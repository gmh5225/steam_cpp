// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: htmlmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_htmlmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_htmlmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_htmlmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[170]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_htmlmessages_2eproto;
class CCookie;
struct CCookieDefaultTypeInternal;
extern CCookieDefaultTypeInternal _CCookie_default_instance_;
class CHTMLHeader;
struct CHTMLHeaderDefaultTypeInternal;
extern CHTMLHeaderDefaultTypeInternal _CHTMLHeader_default_instance_;
class CHTMLPageSecurityInfo;
struct CHTMLPageSecurityInfoDefaultTypeInternal;
extern CHTMLPageSecurityInfoDefaultTypeInternal _CHTMLPageSecurityInfo_default_instance_;
class CHistoryEntry;
struct CHistoryEntryDefaultTypeInternal;
extern CHistoryEntryDefaultTypeInternal _CHistoryEntry_default_instance_;
class CMsgAckPIDShuttingDown;
struct CMsgAckPIDShuttingDownDefaultTypeInternal;
extern CMsgAckPIDShuttingDownDefaultTypeInternal _CMsgAckPIDShuttingDown_default_instance_;
class CMsgAckScreenDPI;
struct CMsgAckScreenDPIDefaultTypeInternal;
extern CMsgAckScreenDPIDefaultTypeInternal _CMsgAckScreenDPI_default_instance_;
class CMsgAckSharedPaintBuffers;
struct CMsgAckSharedPaintBuffersDefaultTypeInternal;
extern CMsgAckSharedPaintBuffersDefaultTypeInternal _CMsgAckSharedPaintBuffers_default_instance_;
class CMsgAddHeader;
struct CMsgAddHeaderDefaultTypeInternal;
extern CMsgAddHeaderDefaultTypeInternal _CMsgAddHeader_default_instance_;
class CMsgAuthedSteamDomains;
struct CMsgAuthedSteamDomainsDefaultTypeInternal;
extern CMsgAuthedSteamDomainsDefaultTypeInternal _CMsgAuthedSteamDomains_default_instance_;
class CMsgBlockedRequest;
struct CMsgBlockedRequestDefaultTypeInternal;
extern CMsgBlockedRequestDefaultTypeInternal _CMsgBlockedRequest_default_instance_;
class CMsgBringWindowToFront;
struct CMsgBringWindowToFrontDefaultTypeInternal;
extern CMsgBringWindowToFrontDefaultTypeInternal _CMsgBringWindowToFront_default_instance_;
class CMsgBrowserCreate;
struct CMsgBrowserCreateDefaultTypeInternal;
extern CMsgBrowserCreateDefaultTypeInternal _CMsgBrowserCreate_default_instance_;
class CMsgBrowserCreateResponse;
struct CMsgBrowserCreateResponseDefaultTypeInternal;
extern CMsgBrowserCreateResponseDefaultTypeInternal _CMsgBrowserCreateResponse_default_instance_;
class CMsgBrowserErrorStrings;
struct CMsgBrowserErrorStringsDefaultTypeInternal;
extern CMsgBrowserErrorStringsDefaultTypeInternal _CMsgBrowserErrorStrings_default_instance_;
class CMsgBrowserFocusChanged;
struct CMsgBrowserFocusChangedDefaultTypeInternal;
extern CMsgBrowserFocusChangedDefaultTypeInternal _CMsgBrowserFocusChanged_default_instance_;
class CMsgBrowserPosition;
struct CMsgBrowserPositionDefaultTypeInternal;
extern CMsgBrowserPositionDefaultTypeInternal _CMsgBrowserPosition_default_instance_;
class CMsgBrowserReady;
struct CMsgBrowserReadyDefaultTypeInternal;
extern CMsgBrowserReadyDefaultTypeInternal _CMsgBrowserReady_default_instance_;
class CMsgBrowserRemove;
struct CMsgBrowserRemoveDefaultTypeInternal;
extern CMsgBrowserRemoveDefaultTypeInternal _CMsgBrowserRemove_default_instance_;
class CMsgBrowserResized;
struct CMsgBrowserResizedDefaultTypeInternal;
extern CMsgBrowserResizedDefaultTypeInternal _CMsgBrowserResized_default_instance_;
class CMsgBrowserSetMinSize;
struct CMsgBrowserSetMinSizeDefaultTypeInternal;
extern CMsgBrowserSetMinSizeDefaultTypeInternal _CMsgBrowserSetMinSize_default_instance_;
class CMsgBrowserSetName;
struct CMsgBrowserSetNameDefaultTypeInternal;
extern CMsgBrowserSetNameDefaultTypeInternal _CMsgBrowserSetName_default_instance_;
class CMsgBrowserSize;
struct CMsgBrowserSizeDefaultTypeInternal;
extern CMsgBrowserSizeDefaultTypeInternal _CMsgBrowserSize_default_instance_;
class CMsgBrowserViewPostMessageToParentRequest;
struct CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal;
extern CMsgBrowserViewPostMessageToParentRequestDefaultTypeInternal _CMsgBrowserViewPostMessageToParentRequest_default_instance_;
class CMsgBuildID;
struct CMsgBuildIDDefaultTypeInternal;
extern CMsgBuildIDDefaultTypeInternal _CMsgBuildID_default_instance_;
class CMsgCanGoBackAndForward;
struct CMsgCanGoBackAndForwardDefaultTypeInternal;
extern CMsgCanGoBackAndForwardDefaultTypeInternal _CMsgCanGoBackAndForward_default_instance_;
class CMsgClearAllBrowsingData;
struct CMsgClearAllBrowsingDataDefaultTypeInternal;
extern CMsgClearAllBrowsingDataDefaultTypeInternal _CMsgClearAllBrowsingData_default_instance_;
class CMsgClearAllCookies;
struct CMsgClearAllCookiesDefaultTypeInternal;
extern CMsgClearAllCookiesDefaultTypeInternal _CMsgClearAllCookies_default_instance_;
class CMsgClearHistory;
struct CMsgClearHistoryDefaultTypeInternal;
extern CMsgClearHistoryDefaultTypeInternal _CMsgClearHistory_default_instance_;
class CMsgClose;
struct CMsgCloseDefaultTypeInternal;
extern CMsgCloseDefaultTypeInternal _CMsgClose_default_instance_;
class CMsgCloseDevTools;
struct CMsgCloseDevToolsDefaultTypeInternal;
extern CMsgCloseDevToolsDefaultTypeInternal _CMsgCloseDevTools_default_instance_;
class CMsgCloseFullScreenFlashIfOpen;
struct CMsgCloseFullScreenFlashIfOpenDefaultTypeInternal;
extern CMsgCloseFullScreenFlashIfOpenDefaultTypeInternal _CMsgCloseFullScreenFlashIfOpen_default_instance_;
class CMsgComboNeedsPaint;
struct CMsgComboNeedsPaintDefaultTypeInternal;
extern CMsgComboNeedsPaintDefaultTypeInternal _CMsgComboNeedsPaint_default_instance_;
class CMsgCopy;
struct CMsgCopyDefaultTypeInternal;
extern CMsgCopyDefaultTypeInternal _CMsgCopy_default_instance_;
class CMsgDisableBackgroundThrottling;
struct CMsgDisableBackgroundThrottlingDefaultTypeInternal;
extern CMsgDisableBackgroundThrottlingDefaultTypeInternal _CMsgDisableBackgroundThrottling_default_instance_;
class CMsgDisableF5;
struct CMsgDisableF5DefaultTypeInternal;
extern CMsgDisableF5DefaultTypeInternal _CMsgDisableF5_default_instance_;
class CMsgDraggableRegionsChanged;
struct CMsgDraggableRegionsChangedDefaultTypeInternal;
extern CMsgDraggableRegionsChangedDefaultTypeInternal _CMsgDraggableRegionsChanged_default_instance_;
class CMsgDraggableRegionsChanged_DraggableRects;
struct CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal;
extern CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal _CMsgDraggableRegionsChanged_DraggableRects_default_instance_;
class CMsgExecuteJavaScript;
struct CMsgExecuteJavaScriptDefaultTypeInternal;
extern CMsgExecuteJavaScriptDefaultTypeInternal _CMsgExecuteJavaScript_default_instance_;
class CMsgExitFullScreen;
struct CMsgExitFullScreenDefaultTypeInternal;
extern CMsgExitFullScreenDefaultTypeInternal _CMsgExitFullScreen_default_instance_;
class CMsgFavIconURLChanged;
struct CMsgFavIconURLChangedDefaultTypeInternal;
extern CMsgFavIconURLChangedDefaultTypeInternal _CMsgFavIconURLChanged_default_instance_;
class CMsgFileLoadDialog;
struct CMsgFileLoadDialogDefaultTypeInternal;
extern CMsgFileLoadDialogDefaultTypeInternal _CMsgFileLoadDialog_default_instance_;
class CMsgFileLoadDialogResponse;
struct CMsgFileLoadDialogResponseDefaultTypeInternal;
extern CMsgFileLoadDialogResponseDefaultTypeInternal _CMsgFileLoadDialogResponse_default_instance_;
class CMsgFileLoadDialog_Filter;
struct CMsgFileLoadDialog_FilterDefaultTypeInternal;
extern CMsgFileLoadDialog_FilterDefaultTypeInternal _CMsgFileLoadDialog_Filter_default_instance_;
class CMsgFind;
struct CMsgFindDefaultTypeInternal;
extern CMsgFindDefaultTypeInternal _CMsgFind_default_instance_;
class CMsgFinishedRequest;
struct CMsgFinishedRequestDefaultTypeInternal;
extern CMsgFinishedRequestDefaultTypeInternal _CMsgFinishedRequest_default_instance_;
class CMsgFocusedNodeText;
struct CMsgFocusedNodeTextDefaultTypeInternal;
extern CMsgFocusedNodeTextDefaultTypeInternal _CMsgFocusedNodeText_default_instance_;
class CMsgFocusedNodeTextResponse;
struct CMsgFocusedNodeTextResponseDefaultTypeInternal;
extern CMsgFocusedNodeTextResponseDefaultTypeInternal _CMsgFocusedNodeTextResponse_default_instance_;
class CMsgForcePopupsToDirectHWND;
struct CMsgForcePopupsToDirectHWNDDefaultTypeInternal;
extern CMsgForcePopupsToDirectHWNDDefaultTypeInternal _CMsgForcePopupsToDirectHWND_default_instance_;
class CMsgFullRepaint;
struct CMsgFullRepaintDefaultTypeInternal;
extern CMsgFullRepaintDefaultTypeInternal _CMsgFullRepaint_default_instance_;
class CMsgGameOverlayTargetTextureID;
struct CMsgGameOverlayTargetTextureIDDefaultTypeInternal;
extern CMsgGameOverlayTargetTextureIDDefaultTypeInternal _CMsgGameOverlayTargetTextureID_default_instance_;
class CMsgGameOverlayTexturePaint;
struct CMsgGameOverlayTexturePaintDefaultTypeInternal;
extern CMsgGameOverlayTexturePaintDefaultTypeInternal _CMsgGameOverlayTexturePaint_default_instance_;
class CMsgGetCookiesForURL;
struct CMsgGetCookiesForURLDefaultTypeInternal;
extern CMsgGetCookiesForURLDefaultTypeInternal _CMsgGetCookiesForURL_default_instance_;
class CMsgGetCookiesForURLResponse;
struct CMsgGetCookiesForURLResponseDefaultTypeInternal;
extern CMsgGetCookiesForURLResponseDefaultTypeInternal _CMsgGetCookiesForURLResponse_default_instance_;
class CMsgGetZoom;
struct CMsgGetZoomDefaultTypeInternal;
extern CMsgGetZoomDefaultTypeInternal _CMsgGetZoom_default_instance_;
class CMsgGetZoomResponse;
struct CMsgGetZoomResponseDefaultTypeInternal;
extern CMsgGetZoomResponseDefaultTypeInternal _CMsgGetZoomResponse_default_instance_;
class CMsgGoBack;
struct CMsgGoBackDefaultTypeInternal;
extern CMsgGoBackDefaultTypeInternal _CMsgGoBack_default_instance_;
class CMsgGoForward;
struct CMsgGoForwardDefaultTypeInternal;
extern CMsgGoForwardDefaultTypeInternal _CMsgGoForward_default_instance_;
class CMsgHandleContextMenuCommand;
struct CMsgHandleContextMenuCommandDefaultTypeInternal;
extern CMsgHandleContextMenuCommandDefaultTypeInternal _CMsgHandleContextMenuCommand_default_instance_;
class CMsgHidePopup;
struct CMsgHidePopupDefaultTypeInternal;
extern CMsgHidePopupDefaultTypeInternal _CMsgHidePopup_default_instance_;
class CMsgHideToolTip;
struct CMsgHideToolTipDefaultTypeInternal;
extern CMsgHideToolTipDefaultTypeInternal _CMsgHideToolTip_default_instance_;
class CMsgHideWindow;
struct CMsgHideWindowDefaultTypeInternal;
extern CMsgHideWindowDefaultTypeInternal _CMsgHideWindow_default_instance_;
class CMsgHistoryChanged;
struct CMsgHistoryChangedDefaultTypeInternal;
extern CMsgHistoryChangedDefaultTypeInternal _CMsgHistoryChanged_default_instance_;
class CMsgHorizontalScrollBarSize;
struct CMsgHorizontalScrollBarSizeDefaultTypeInternal;
extern CMsgHorizontalScrollBarSizeDefaultTypeInternal _CMsgHorizontalScrollBarSize_default_instance_;
class CMsgHorizontalScrollBarSizeResponse;
struct CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal;
extern CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal _CMsgHorizontalScrollBarSizeResponse_default_instance_;
class CMsgImeCancelComposition;
struct CMsgImeCancelCompositionDefaultTypeInternal;
extern CMsgImeCancelCompositionDefaultTypeInternal _CMsgImeCancelComposition_default_instance_;
class CMsgImeCommitText;
struct CMsgImeCommitTextDefaultTypeInternal;
extern CMsgImeCommitTextDefaultTypeInternal _CMsgImeCommitText_default_instance_;
class CMsgImeCompositionRangeChanged;
struct CMsgImeCompositionRangeChangedDefaultTypeInternal;
extern CMsgImeCompositionRangeChangedDefaultTypeInternal _CMsgImeCompositionRangeChanged_default_instance_;
class CMsgImeSetComposition;
struct CMsgImeSetCompositionDefaultTypeInternal;
extern CMsgImeSetCompositionDefaultTypeInternal _CMsgImeSetComposition_default_instance_;
class CMsgInspectElement;
struct CMsgInspectElementDefaultTypeInternal;
extern CMsgInspectElementDefaultTypeInternal _CMsgInspectElement_default_instance_;
class CMsgJSAlert;
struct CMsgJSAlertDefaultTypeInternal;
extern CMsgJSAlertDefaultTypeInternal _CMsgJSAlert_default_instance_;
class CMsgJSConfirm;
struct CMsgJSConfirmDefaultTypeInternal;
extern CMsgJSConfirmDefaultTypeInternal _CMsgJSConfirm_default_instance_;
class CMsgJSDialogResponse;
struct CMsgJSDialogResponseDefaultTypeInternal;
extern CMsgJSDialogResponseDefaultTypeInternal _CMsgJSDialogResponse_default_instance_;
class CMsgJSExecuteCallback;
struct CMsgJSExecuteCallbackDefaultTypeInternal;
extern CMsgJSExecuteCallbackDefaultTypeInternal _CMsgJSExecuteCallback_default_instance_;
class CMsgJSMethodCall;
struct CMsgJSMethodCallDefaultTypeInternal;
extern CMsgJSMethodCallDefaultTypeInternal _CMsgJSMethodCall_default_instance_;
class CMsgJSRaiseException;
struct CMsgJSRaiseExceptionDefaultTypeInternal;
extern CMsgJSRaiseExceptionDefaultTypeInternal _CMsgJSRaiseException_default_instance_;
class CMsgJSRegisterMethod;
struct CMsgJSRegisterMethodDefaultTypeInternal;
extern CMsgJSRegisterMethodDefaultTypeInternal _CMsgJSRegisterMethod_default_instance_;
class CMsgJSReleaseCallback;
struct CMsgJSReleaseCallbackDefaultTypeInternal;
extern CMsgJSReleaseCallbackDefaultTypeInternal _CMsgJSReleaseCallback_default_instance_;
class CMsgJSValue;
struct CMsgJSValueDefaultTypeInternal;
extern CMsgJSValueDefaultTypeInternal _CMsgJSValue_default_instance_;
class CMsgJSValue_JSObjectProperty;
struct CMsgJSValue_JSObjectPropertyDefaultTypeInternal;
extern CMsgJSValue_JSObjectPropertyDefaultTypeInternal _CMsgJSValue_JSObjectProperty_default_instance_;
class CMsgKeyChar;
struct CMsgKeyCharDefaultTypeInternal;
extern CMsgKeyCharDefaultTypeInternal _CMsgKeyChar_default_instance_;
class CMsgKeyDown;
struct CMsgKeyDownDefaultTypeInternal;
extern CMsgKeyDownDefaultTypeInternal _CMsgKeyDown_default_instance_;
class CMsgKeyUp;
struct CMsgKeyUpDefaultTypeInternal;
extern CMsgKeyUpDefaultTypeInternal _CMsgKeyUp_default_instance_;
class CMsgLinkAtPosition;
struct CMsgLinkAtPositionDefaultTypeInternal;
extern CMsgLinkAtPositionDefaultTypeInternal _CMsgLinkAtPosition_default_instance_;
class CMsgLinkAtPositionResponse;
struct CMsgLinkAtPositionResponseDefaultTypeInternal;
extern CMsgLinkAtPositionResponseDefaultTypeInternal _CMsgLinkAtPositionResponse_default_instance_;
class CMsgLoadError;
struct CMsgLoadErrorDefaultTypeInternal;
extern CMsgLoadErrorDefaultTypeInternal _CMsgLoadError_default_instance_;
class CMsgLoadLocalization;
struct CMsgLoadLocalizationDefaultTypeInternal;
extern CMsgLoadLocalizationDefaultTypeInternal _CMsgLoadLocalization_default_instance_;
class CMsgLoadedRequest;
struct CMsgLoadedRequestDefaultTypeInternal;
extern CMsgLoadedRequestDefaultTypeInternal _CMsgLoadedRequest_default_instance_;
class CMsgLoadingResource;
struct CMsgLoadingResourceDefaultTypeInternal;
extern CMsgLoadingResourceDefaultTypeInternal _CMsgLoadingResource_default_instance_;
class CMsgMaximizeRestoreWindow;
struct CMsgMaximizeRestoreWindowDefaultTypeInternal;
extern CMsgMaximizeRestoreWindowDefaultTypeInternal _CMsgMaximizeRestoreWindow_default_instance_;
class CMsgMinimizeWindow;
struct CMsgMinimizeWindowDefaultTypeInternal;
extern CMsgMinimizeWindowDefaultTypeInternal _CMsgMinimizeWindow_default_instance_;
class CMsgMouseDblClick;
struct CMsgMouseDblClickDefaultTypeInternal;
extern CMsgMouseDblClickDefaultTypeInternal _CMsgMouseDblClick_default_instance_;
class CMsgMouseDown;
struct CMsgMouseDownDefaultTypeInternal;
extern CMsgMouseDownDefaultTypeInternal _CMsgMouseDown_default_instance_;
class CMsgMouseLeave;
struct CMsgMouseLeaveDefaultTypeInternal;
extern CMsgMouseLeaveDefaultTypeInternal _CMsgMouseLeave_default_instance_;
class CMsgMouseMove;
struct CMsgMouseMoveDefaultTypeInternal;
extern CMsgMouseMoveDefaultTypeInternal _CMsgMouseMove_default_instance_;
class CMsgMouseUp;
struct CMsgMouseUpDefaultTypeInternal;
extern CMsgMouseUpDefaultTypeInternal _CMsgMouseUp_default_instance_;
class CMsgMouseWheel;
struct CMsgMouseWheelDefaultTypeInternal;
extern CMsgMouseWheelDefaultTypeInternal _CMsgMouseWheel_default_instance_;
class CMsgNeedsPaint;
struct CMsgNeedsPaintDefaultTypeInternal;
extern CMsgNeedsPaintDefaultTypeInternal _CMsgNeedsPaint_default_instance_;
class CMsgNeedsSharedTexturePaint;
struct CMsgNeedsSharedTexturePaintDefaultTypeInternal;
extern CMsgNeedsSharedTexturePaintDefaultTypeInternal _CMsgNeedsSharedTexturePaint_default_instance_;
class CMsgNodeHasFocus;
struct CMsgNodeHasFocusDefaultTypeInternal;
extern CMsgNodeHasFocusDefaultTypeInternal _CMsgNodeHasFocus_default_instance_;
class CMsgNotifyUserActivation;
struct CMsgNotifyUserActivationDefaultTypeInternal;
extern CMsgNotifyUserActivationDefaultTypeInternal _CMsgNotifyUserActivation_default_instance_;
class CMsgOpenDevTools;
struct CMsgOpenDevToolsDefaultTypeInternal;
extern CMsgOpenDevToolsDefaultTypeInternal _CMsgOpenDevTools_default_instance_;
class CMsgOpenNewTab;
struct CMsgOpenNewTabDefaultTypeInternal;
extern CMsgOpenNewTabDefaultTypeInternal _CMsgOpenNewTab_default_instance_;
class CMsgOpenSteamURL;
struct CMsgOpenSteamURLDefaultTypeInternal;
extern CMsgOpenSteamURLDefaultTypeInternal _CMsgOpenSteamURL_default_instance_;
class CMsgPageSecurity;
struct CMsgPageSecurityDefaultTypeInternal;
extern CMsgPageSecurityDefaultTypeInternal _CMsgPageSecurity_default_instance_;
class CMsgPaste;
struct CMsgPasteDefaultTypeInternal;
extern CMsgPasteDefaultTypeInternal _CMsgPaste_default_instance_;
class CMsgPauseFullScreenFlashMovieIfOpen;
struct CMsgPauseFullScreenFlashMovieIfOpenDefaultTypeInternal;
extern CMsgPauseFullScreenFlashMovieIfOpenDefaultTypeInternal _CMsgPauseFullScreenFlashMovieIfOpen_default_instance_;
class CMsgPauseRepaint;
struct CMsgPauseRepaintDefaultTypeInternal;
extern CMsgPauseRepaintDefaultTypeInternal _CMsgPauseRepaint_default_instance_;
class CMsgPopupCreated;
struct CMsgPopupCreatedDefaultTypeInternal;
extern CMsgPopupCreatedDefaultTypeInternal _CMsgPopupCreated_default_instance_;
class CMsgPopupHTMLWindow;
struct CMsgPopupHTMLWindowDefaultTypeInternal;
extern CMsgPopupHTMLWindowDefaultTypeInternal _CMsgPopupHTMLWindow_default_instance_;
class CMsgPopupHTMLWindowResponse;
struct CMsgPopupHTMLWindowResponseDefaultTypeInternal;
extern CMsgPopupHTMLWindowResponseDefaultTypeInternal _CMsgPopupHTMLWindowResponse_default_instance_;
class CMsgPostURL;
struct CMsgPostURLDefaultTypeInternal;
extern CMsgPostURLDefaultTypeInternal _CMsgPostURL_default_instance_;
class CMsgReload;
struct CMsgReloadDefaultTypeInternal;
extern CMsgReloadDefaultTypeInternal _CMsgReload_default_instance_;
class CMsgRequestFullScreen;
struct CMsgRequestFullScreenDefaultTypeInternal;
extern CMsgRequestFullScreenDefaultTypeInternal _CMsgRequestFullScreen_default_instance_;
class CMsgResizeGripChanged;
struct CMsgResizeGripChangedDefaultTypeInternal;
extern CMsgResizeGripChangedDefaultTypeInternal _CMsgResizeGripChanged_default_instance_;
class CMsgSavePageToJPEG;
struct CMsgSavePageToJPEGDefaultTypeInternal;
extern CMsgSavePageToJPEGDefaultTypeInternal _CMsgSavePageToJPEG_default_instance_;
class CMsgSavePageToJPEGResponse;
struct CMsgSavePageToJPEGResponseDefaultTypeInternal;
extern CMsgSavePageToJPEGResponseDefaultTypeInternal _CMsgSavePageToJPEGResponse_default_instance_;
class CMsgScalePageToValue;
struct CMsgScalePageToValueDefaultTypeInternal;
extern CMsgScalePageToValueDefaultTypeInternal _CMsgScalePageToValue_default_instance_;
class CMsgScalePageToValueResponse;
struct CMsgScalePageToValueResponseDefaultTypeInternal;
extern CMsgScalePageToValueResponseDefaultTypeInternal _CMsgScalePageToValueResponse_default_instance_;
class CMsgScreenDPI;
struct CMsgScreenDPIDefaultTypeInternal;
extern CMsgScreenDPIDefaultTypeInternal _CMsgScreenDPI_default_instance_;
class CMsgScreenInformationChanged;
struct CMsgScreenInformationChangedDefaultTypeInternal;
extern CMsgScreenInformationChangedDefaultTypeInternal _CMsgScreenInformationChanged_default_instance_;
class CMsgSearchResults;
struct CMsgSearchResultsDefaultTypeInternal;
extern CMsgSearchResultsDefaultTypeInternal _CMsgSearchResults_default_instance_;
class CMsgSetCookie;
struct CMsgSetCookieDefaultTypeInternal;
extern CMsgSetCookieDefaultTypeInternal _CMsgSetCookie_default_instance_;
class CMsgSetCursor;
struct CMsgSetCursorDefaultTypeInternal;
extern CMsgSetCursorDefaultTypeInternal _CMsgSetCursor_default_instance_;
class CMsgSetFocus;
struct CMsgSetFocusDefaultTypeInternal;
extern CMsgSetFocusDefaultTypeInternal _CMsgSetFocus_default_instance_;
class CMsgSetForceDeviceScaleFactors;
struct CMsgSetForceDeviceScaleFactorsDefaultTypeInternal;
extern CMsgSetForceDeviceScaleFactorsDefaultTypeInternal _CMsgSetForceDeviceScaleFactors_default_instance_;
class CMsgSetForegroundWindow;
struct CMsgSetForegroundWindowDefaultTypeInternal;
extern CMsgSetForegroundWindowDefaultTypeInternal _CMsgSetForegroundWindow_default_instance_;
class CMsgSetGameOverlayTargetPIDs;
struct CMsgSetGameOverlayTargetPIDsDefaultTypeInternal;
extern CMsgSetGameOverlayTargetPIDsDefaultTypeInternal _CMsgSetGameOverlayTargetPIDs_default_instance_;
class CMsgSetHTMLTitle;
struct CMsgSetHTMLTitleDefaultTypeInternal;
extern CMsgSetHTMLTitleDefaultTypeInternal _CMsgSetHTMLTitle_default_instance_;
class CMsgSetHorizontalScroll;
struct CMsgSetHorizontalScrollDefaultTypeInternal;
extern CMsgSetHorizontalScrollDefaultTypeInternal _CMsgSetHorizontalScroll_default_instance_;
class CMsgSetLocalFileRequestMapping;
struct CMsgSetLocalFileRequestMappingDefaultTypeInternal;
extern CMsgSetLocalFileRequestMappingDefaultTypeInternal _CMsgSetLocalFileRequestMapping_default_instance_;
class CMsgSetLocalFileRequestMapping_AdditionalRoute;
struct CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal;
extern CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_;
class CMsgSetNetFakeLocalSystemState;
struct CMsgSetNetFakeLocalSystemStateDefaultTypeInternal;
extern CMsgSetNetFakeLocalSystemStateDefaultTypeInternal _CMsgSetNetFakeLocalSystemState_default_instance_;
class CMsgSetPIDShuttingDown;
struct CMsgSetPIDShuttingDownDefaultTypeInternal;
extern CMsgSetPIDShuttingDownDefaultTypeInternal _CMsgSetPIDShuttingDown_default_instance_;
class CMsgSetProtocolBlockList;
struct CMsgSetProtocolBlockListDefaultTypeInternal;
extern CMsgSetProtocolBlockListDefaultTypeInternal _CMsgSetProtocolBlockList_default_instance_;
class CMsgSetSharedPaintBuffers;
struct CMsgSetSharedPaintBuffersDefaultTypeInternal;
extern CMsgSetSharedPaintBuffersDefaultTypeInternal _CMsgSetSharedPaintBuffers_default_instance_;
class CMsgSetTargetFrameRate;
struct CMsgSetTargetFrameRateDefaultTypeInternal;
extern CMsgSetTargetFrameRateDefaultTypeInternal _CMsgSetTargetFrameRate_default_instance_;
class CMsgSetTopWindow;
struct CMsgSetTopWindowDefaultTypeInternal;
extern CMsgSetTopWindowDefaultTypeInternal _CMsgSetTopWindow_default_instance_;
class CMsgSetTouchGesturesToCancel;
struct CMsgSetTouchGesturesToCancelDefaultTypeInternal;
extern CMsgSetTouchGesturesToCancelDefaultTypeInternal _CMsgSetTouchGesturesToCancel_default_instance_;
class CMsgSetUIMode;
struct CMsgSetUIModeDefaultTypeInternal;
extern CMsgSetUIModeDefaultTypeInternal _CMsgSetUIMode_default_instance_;
class CMsgSetVRKeyboardVisibility;
struct CMsgSetVRKeyboardVisibilityDefaultTypeInternal;
extern CMsgSetVRKeyboardVisibilityDefaultTypeInternal _CMsgSetVRKeyboardVisibility_default_instance_;
class CMsgSetVerticalScroll;
struct CMsgSetVerticalScrollDefaultTypeInternal;
extern CMsgSetVerticalScrollDefaultTypeInternal _CMsgSetVerticalScroll_default_instance_;
class CMsgSetWindowPosition;
struct CMsgSetWindowPositionDefaultTypeInternal;
extern CMsgSetWindowPositionDefaultTypeInternal _CMsgSetWindowPosition_default_instance_;
class CMsgSetWindowVisibility;
struct CMsgSetWindowVisibilityDefaultTypeInternal;
extern CMsgSetWindowVisibilityDefaultTypeInternal _CMsgSetWindowVisibility_default_instance_;
class CMsgSetZoomLevel;
struct CMsgSetZoomLevelDefaultTypeInternal;
extern CMsgSetZoomLevelDefaultTypeInternal _CMsgSetZoomLevel_default_instance_;
class CMsgShowBrowserContextMenu;
struct CMsgShowBrowserContextMenuDefaultTypeInternal;
extern CMsgShowBrowserContextMenuDefaultTypeInternal _CMsgShowBrowserContextMenu_default_instance_;
class CMsgShowBrowserContextMenu_ContextCommand;
struct CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal;
extern CMsgShowBrowserContextMenu_ContextCommandDefaultTypeInternal _CMsgShowBrowserContextMenu_ContextCommand_default_instance_;
class CMsgShowPopup;
struct CMsgShowPopupDefaultTypeInternal;
extern CMsgShowPopupDefaultTypeInternal _CMsgShowPopup_default_instance_;
class CMsgShowToolTip;
struct CMsgShowToolTipDefaultTypeInternal;
extern CMsgShowToolTipDefaultTypeInternal _CMsgShowToolTip_default_instance_;
class CMsgShowWindow;
struct CMsgShowWindowDefaultTypeInternal;
extern CMsgShowWindowDefaultTypeInternal _CMsgShowWindow_default_instance_;
class CMsgSizePopup;
struct CMsgSizePopupDefaultTypeInternal;
extern CMsgSizePopupDefaultTypeInternal _CMsgSizePopup_default_instance_;
class CMsgStartDownload;
struct CMsgStartDownloadDefaultTypeInternal;
extern CMsgStartDownloadDefaultTypeInternal _CMsgStartDownload_default_instance_;
class CMsgStartRequest;
struct CMsgStartRequestDefaultTypeInternal;
extern CMsgStartRequestDefaultTypeInternal _CMsgStartRequest_default_instance_;
class CMsgStartRequestResponse;
struct CMsgStartRequestResponseDefaultTypeInternal;
extern CMsgStartRequestResponseDefaultTypeInternal _CMsgStartRequestResponse_default_instance_;
class CMsgStatusText;
struct CMsgStatusTextDefaultTypeInternal;
extern CMsgStatusTextDefaultTypeInternal _CMsgStatusText_default_instance_;
class CMsgSteamAuthCookiesSet;
struct CMsgSteamAuthCookiesSetDefaultTypeInternal;
extern CMsgSteamAuthCookiesSetDefaultTypeInternal _CMsgSteamAuthCookiesSet_default_instance_;
class CMsgSteamAuthNeeded;
struct CMsgSteamAuthNeededDefaultTypeInternal;
extern CMsgSteamAuthNeededDefaultTypeInternal _CMsgSteamAuthNeeded_default_instance_;
class CMsgStopFind;
struct CMsgStopFindDefaultTypeInternal;
extern CMsgStopFindDefaultTypeInternal _CMsgStopFind_default_instance_;
class CMsgStopLoad;
struct CMsgStopLoadDefaultTypeInternal;
extern CMsgStopLoadDefaultTypeInternal _CMsgStopLoad_default_instance_;
class CMsgToggleFindInPageDialog;
struct CMsgToggleFindInPageDialogDefaultTypeInternal;
extern CMsgToggleFindInPageDialogDefaultTypeInternal _CMsgToggleFindInPageDialog_default_instance_;
class CMsgTouchGesture;
struct CMsgTouchGestureDefaultTypeInternal;
extern CMsgTouchGestureDefaultTypeInternal _CMsgTouchGesture_default_instance_;
class CMsgURLChanged;
struct CMsgURLChangedDefaultTypeInternal;
extern CMsgURLChangedDefaultTypeInternal _CMsgURLChanged_default_instance_;
class CMsgUnlockH264;
struct CMsgUnlockH264DefaultTypeInternal;
extern CMsgUnlockH264DefaultTypeInternal _CMsgUnlockH264_default_instance_;
class CMsgUpdateToolTip;
struct CMsgUpdateToolTipDefaultTypeInternal;
extern CMsgUpdateToolTipDefaultTypeInternal _CMsgUpdateToolTip_default_instance_;
class CMsgVerticalScrollBarSize;
struct CMsgVerticalScrollBarSizeDefaultTypeInternal;
extern CMsgVerticalScrollBarSizeDefaultTypeInternal _CMsgVerticalScrollBarSize_default_instance_;
class CMsgVerticalScrollBarSizeResponse;
struct CMsgVerticalScrollBarSizeResponseDefaultTypeInternal;
extern CMsgVerticalScrollBarSizeResponseDefaultTypeInternal _CMsgVerticalScrollBarSizeResponse_default_instance_;
class CMsgViewSource;
struct CMsgViewSourceDefaultTypeInternal;
extern CMsgViewSourceDefaultTypeInternal _CMsgViewSource_default_instance_;
class CMsgWasHidden;
struct CMsgWasHiddenDefaultTypeInternal;
extern CMsgWasHiddenDefaultTypeInternal _CMsgWasHidden_default_instance_;
class CMsgZoomToElementAtPosition;
struct CMsgZoomToElementAtPositionDefaultTypeInternal;
extern CMsgZoomToElementAtPositionDefaultTypeInternal _CMsgZoomToElementAtPosition_default_instance_;
class CMsgZoomToElementAtPositionResponse;
struct CMsgZoomToElementAtPositionResponseDefaultTypeInternal;
extern CMsgZoomToElementAtPositionResponseDefaultTypeInternal _CMsgZoomToElementAtPositionResponse_default_instance_;
class CMsgZoomToFocusedElement;
struct CMsgZoomToFocusedElementDefaultTypeInternal;
extern CMsgZoomToFocusedElementDefaultTypeInternal _CMsgZoomToFocusedElement_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCookie* Arena::CreateMaybeMessage<::CCookie>(Arena*);
template<> ::CHTMLHeader* Arena::CreateMaybeMessage<::CHTMLHeader>(Arena*);
template<> ::CHTMLPageSecurityInfo* Arena::CreateMaybeMessage<::CHTMLPageSecurityInfo>(Arena*);
template<> ::CHistoryEntry* Arena::CreateMaybeMessage<::CHistoryEntry>(Arena*);
template<> ::CMsgAckPIDShuttingDown* Arena::CreateMaybeMessage<::CMsgAckPIDShuttingDown>(Arena*);
template<> ::CMsgAckScreenDPI* Arena::CreateMaybeMessage<::CMsgAckScreenDPI>(Arena*);
template<> ::CMsgAckSharedPaintBuffers* Arena::CreateMaybeMessage<::CMsgAckSharedPaintBuffers>(Arena*);
template<> ::CMsgAddHeader* Arena::CreateMaybeMessage<::CMsgAddHeader>(Arena*);
template<> ::CMsgAuthedSteamDomains* Arena::CreateMaybeMessage<::CMsgAuthedSteamDomains>(Arena*);
template<> ::CMsgBlockedRequest* Arena::CreateMaybeMessage<::CMsgBlockedRequest>(Arena*);
template<> ::CMsgBringWindowToFront* Arena::CreateMaybeMessage<::CMsgBringWindowToFront>(Arena*);
template<> ::CMsgBrowserCreate* Arena::CreateMaybeMessage<::CMsgBrowserCreate>(Arena*);
template<> ::CMsgBrowserCreateResponse* Arena::CreateMaybeMessage<::CMsgBrowserCreateResponse>(Arena*);
template<> ::CMsgBrowserErrorStrings* Arena::CreateMaybeMessage<::CMsgBrowserErrorStrings>(Arena*);
template<> ::CMsgBrowserFocusChanged* Arena::CreateMaybeMessage<::CMsgBrowserFocusChanged>(Arena*);
template<> ::CMsgBrowserPosition* Arena::CreateMaybeMessage<::CMsgBrowserPosition>(Arena*);
template<> ::CMsgBrowserReady* Arena::CreateMaybeMessage<::CMsgBrowserReady>(Arena*);
template<> ::CMsgBrowserRemove* Arena::CreateMaybeMessage<::CMsgBrowserRemove>(Arena*);
template<> ::CMsgBrowserResized* Arena::CreateMaybeMessage<::CMsgBrowserResized>(Arena*);
template<> ::CMsgBrowserSetMinSize* Arena::CreateMaybeMessage<::CMsgBrowserSetMinSize>(Arena*);
template<> ::CMsgBrowserSetName* Arena::CreateMaybeMessage<::CMsgBrowserSetName>(Arena*);
template<> ::CMsgBrowserSize* Arena::CreateMaybeMessage<::CMsgBrowserSize>(Arena*);
template<> ::CMsgBrowserViewPostMessageToParentRequest* Arena::CreateMaybeMessage<::CMsgBrowserViewPostMessageToParentRequest>(Arena*);
template<> ::CMsgBuildID* Arena::CreateMaybeMessage<::CMsgBuildID>(Arena*);
template<> ::CMsgCanGoBackAndForward* Arena::CreateMaybeMessage<::CMsgCanGoBackAndForward>(Arena*);
template<> ::CMsgClearAllBrowsingData* Arena::CreateMaybeMessage<::CMsgClearAllBrowsingData>(Arena*);
template<> ::CMsgClearAllCookies* Arena::CreateMaybeMessage<::CMsgClearAllCookies>(Arena*);
template<> ::CMsgClearHistory* Arena::CreateMaybeMessage<::CMsgClearHistory>(Arena*);
template<> ::CMsgClose* Arena::CreateMaybeMessage<::CMsgClose>(Arena*);
template<> ::CMsgCloseDevTools* Arena::CreateMaybeMessage<::CMsgCloseDevTools>(Arena*);
template<> ::CMsgCloseFullScreenFlashIfOpen* Arena::CreateMaybeMessage<::CMsgCloseFullScreenFlashIfOpen>(Arena*);
template<> ::CMsgComboNeedsPaint* Arena::CreateMaybeMessage<::CMsgComboNeedsPaint>(Arena*);
template<> ::CMsgCopy* Arena::CreateMaybeMessage<::CMsgCopy>(Arena*);
template<> ::CMsgDisableBackgroundThrottling* Arena::CreateMaybeMessage<::CMsgDisableBackgroundThrottling>(Arena*);
template<> ::CMsgDisableF5* Arena::CreateMaybeMessage<::CMsgDisableF5>(Arena*);
template<> ::CMsgDraggableRegionsChanged* Arena::CreateMaybeMessage<::CMsgDraggableRegionsChanged>(Arena*);
template<> ::CMsgDraggableRegionsChanged_DraggableRects* Arena::CreateMaybeMessage<::CMsgDraggableRegionsChanged_DraggableRects>(Arena*);
template<> ::CMsgExecuteJavaScript* Arena::CreateMaybeMessage<::CMsgExecuteJavaScript>(Arena*);
template<> ::CMsgExitFullScreen* Arena::CreateMaybeMessage<::CMsgExitFullScreen>(Arena*);
template<> ::CMsgFavIconURLChanged* Arena::CreateMaybeMessage<::CMsgFavIconURLChanged>(Arena*);
template<> ::CMsgFileLoadDialog* Arena::CreateMaybeMessage<::CMsgFileLoadDialog>(Arena*);
template<> ::CMsgFileLoadDialogResponse* Arena::CreateMaybeMessage<::CMsgFileLoadDialogResponse>(Arena*);
template<> ::CMsgFileLoadDialog_Filter* Arena::CreateMaybeMessage<::CMsgFileLoadDialog_Filter>(Arena*);
template<> ::CMsgFind* Arena::CreateMaybeMessage<::CMsgFind>(Arena*);
template<> ::CMsgFinishedRequest* Arena::CreateMaybeMessage<::CMsgFinishedRequest>(Arena*);
template<> ::CMsgFocusedNodeText* Arena::CreateMaybeMessage<::CMsgFocusedNodeText>(Arena*);
template<> ::CMsgFocusedNodeTextResponse* Arena::CreateMaybeMessage<::CMsgFocusedNodeTextResponse>(Arena*);
template<> ::CMsgForcePopupsToDirectHWND* Arena::CreateMaybeMessage<::CMsgForcePopupsToDirectHWND>(Arena*);
template<> ::CMsgFullRepaint* Arena::CreateMaybeMessage<::CMsgFullRepaint>(Arena*);
template<> ::CMsgGameOverlayTargetTextureID* Arena::CreateMaybeMessage<::CMsgGameOverlayTargetTextureID>(Arena*);
template<> ::CMsgGameOverlayTexturePaint* Arena::CreateMaybeMessage<::CMsgGameOverlayTexturePaint>(Arena*);
template<> ::CMsgGetCookiesForURL* Arena::CreateMaybeMessage<::CMsgGetCookiesForURL>(Arena*);
template<> ::CMsgGetCookiesForURLResponse* Arena::CreateMaybeMessage<::CMsgGetCookiesForURLResponse>(Arena*);
template<> ::CMsgGetZoom* Arena::CreateMaybeMessage<::CMsgGetZoom>(Arena*);
template<> ::CMsgGetZoomResponse* Arena::CreateMaybeMessage<::CMsgGetZoomResponse>(Arena*);
template<> ::CMsgGoBack* Arena::CreateMaybeMessage<::CMsgGoBack>(Arena*);
template<> ::CMsgGoForward* Arena::CreateMaybeMessage<::CMsgGoForward>(Arena*);
template<> ::CMsgHandleContextMenuCommand* Arena::CreateMaybeMessage<::CMsgHandleContextMenuCommand>(Arena*);
template<> ::CMsgHidePopup* Arena::CreateMaybeMessage<::CMsgHidePopup>(Arena*);
template<> ::CMsgHideToolTip* Arena::CreateMaybeMessage<::CMsgHideToolTip>(Arena*);
template<> ::CMsgHideWindow* Arena::CreateMaybeMessage<::CMsgHideWindow>(Arena*);
template<> ::CMsgHistoryChanged* Arena::CreateMaybeMessage<::CMsgHistoryChanged>(Arena*);
template<> ::CMsgHorizontalScrollBarSize* Arena::CreateMaybeMessage<::CMsgHorizontalScrollBarSize>(Arena*);
template<> ::CMsgHorizontalScrollBarSizeResponse* Arena::CreateMaybeMessage<::CMsgHorizontalScrollBarSizeResponse>(Arena*);
template<> ::CMsgImeCancelComposition* Arena::CreateMaybeMessage<::CMsgImeCancelComposition>(Arena*);
template<> ::CMsgImeCommitText* Arena::CreateMaybeMessage<::CMsgImeCommitText>(Arena*);
template<> ::CMsgImeCompositionRangeChanged* Arena::CreateMaybeMessage<::CMsgImeCompositionRangeChanged>(Arena*);
template<> ::CMsgImeSetComposition* Arena::CreateMaybeMessage<::CMsgImeSetComposition>(Arena*);
template<> ::CMsgInspectElement* Arena::CreateMaybeMessage<::CMsgInspectElement>(Arena*);
template<> ::CMsgJSAlert* Arena::CreateMaybeMessage<::CMsgJSAlert>(Arena*);
template<> ::CMsgJSConfirm* Arena::CreateMaybeMessage<::CMsgJSConfirm>(Arena*);
template<> ::CMsgJSDialogResponse* Arena::CreateMaybeMessage<::CMsgJSDialogResponse>(Arena*);
template<> ::CMsgJSExecuteCallback* Arena::CreateMaybeMessage<::CMsgJSExecuteCallback>(Arena*);
template<> ::CMsgJSMethodCall* Arena::CreateMaybeMessage<::CMsgJSMethodCall>(Arena*);
template<> ::CMsgJSRaiseException* Arena::CreateMaybeMessage<::CMsgJSRaiseException>(Arena*);
template<> ::CMsgJSRegisterMethod* Arena::CreateMaybeMessage<::CMsgJSRegisterMethod>(Arena*);
template<> ::CMsgJSReleaseCallback* Arena::CreateMaybeMessage<::CMsgJSReleaseCallback>(Arena*);
template<> ::CMsgJSValue* Arena::CreateMaybeMessage<::CMsgJSValue>(Arena*);
template<> ::CMsgJSValue_JSObjectProperty* Arena::CreateMaybeMessage<::CMsgJSValue_JSObjectProperty>(Arena*);
template<> ::CMsgKeyChar* Arena::CreateMaybeMessage<::CMsgKeyChar>(Arena*);
template<> ::CMsgKeyDown* Arena::CreateMaybeMessage<::CMsgKeyDown>(Arena*);
template<> ::CMsgKeyUp* Arena::CreateMaybeMessage<::CMsgKeyUp>(Arena*);
template<> ::CMsgLinkAtPosition* Arena::CreateMaybeMessage<::CMsgLinkAtPosition>(Arena*);
template<> ::CMsgLinkAtPositionResponse* Arena::CreateMaybeMessage<::CMsgLinkAtPositionResponse>(Arena*);
template<> ::CMsgLoadError* Arena::CreateMaybeMessage<::CMsgLoadError>(Arena*);
template<> ::CMsgLoadLocalization* Arena::CreateMaybeMessage<::CMsgLoadLocalization>(Arena*);
template<> ::CMsgLoadedRequest* Arena::CreateMaybeMessage<::CMsgLoadedRequest>(Arena*);
template<> ::CMsgLoadingResource* Arena::CreateMaybeMessage<::CMsgLoadingResource>(Arena*);
template<> ::CMsgMaximizeRestoreWindow* Arena::CreateMaybeMessage<::CMsgMaximizeRestoreWindow>(Arena*);
template<> ::CMsgMinimizeWindow* Arena::CreateMaybeMessage<::CMsgMinimizeWindow>(Arena*);
template<> ::CMsgMouseDblClick* Arena::CreateMaybeMessage<::CMsgMouseDblClick>(Arena*);
template<> ::CMsgMouseDown* Arena::CreateMaybeMessage<::CMsgMouseDown>(Arena*);
template<> ::CMsgMouseLeave* Arena::CreateMaybeMessage<::CMsgMouseLeave>(Arena*);
template<> ::CMsgMouseMove* Arena::CreateMaybeMessage<::CMsgMouseMove>(Arena*);
template<> ::CMsgMouseUp* Arena::CreateMaybeMessage<::CMsgMouseUp>(Arena*);
template<> ::CMsgMouseWheel* Arena::CreateMaybeMessage<::CMsgMouseWheel>(Arena*);
template<> ::CMsgNeedsPaint* Arena::CreateMaybeMessage<::CMsgNeedsPaint>(Arena*);
template<> ::CMsgNeedsSharedTexturePaint* Arena::CreateMaybeMessage<::CMsgNeedsSharedTexturePaint>(Arena*);
template<> ::CMsgNodeHasFocus* Arena::CreateMaybeMessage<::CMsgNodeHasFocus>(Arena*);
template<> ::CMsgNotifyUserActivation* Arena::CreateMaybeMessage<::CMsgNotifyUserActivation>(Arena*);
template<> ::CMsgOpenDevTools* Arena::CreateMaybeMessage<::CMsgOpenDevTools>(Arena*);
template<> ::CMsgOpenNewTab* Arena::CreateMaybeMessage<::CMsgOpenNewTab>(Arena*);
template<> ::CMsgOpenSteamURL* Arena::CreateMaybeMessage<::CMsgOpenSteamURL>(Arena*);
template<> ::CMsgPageSecurity* Arena::CreateMaybeMessage<::CMsgPageSecurity>(Arena*);
template<> ::CMsgPaste* Arena::CreateMaybeMessage<::CMsgPaste>(Arena*);
template<> ::CMsgPauseFullScreenFlashMovieIfOpen* Arena::CreateMaybeMessage<::CMsgPauseFullScreenFlashMovieIfOpen>(Arena*);
template<> ::CMsgPauseRepaint* Arena::CreateMaybeMessage<::CMsgPauseRepaint>(Arena*);
template<> ::CMsgPopupCreated* Arena::CreateMaybeMessage<::CMsgPopupCreated>(Arena*);
template<> ::CMsgPopupHTMLWindow* Arena::CreateMaybeMessage<::CMsgPopupHTMLWindow>(Arena*);
template<> ::CMsgPopupHTMLWindowResponse* Arena::CreateMaybeMessage<::CMsgPopupHTMLWindowResponse>(Arena*);
template<> ::CMsgPostURL* Arena::CreateMaybeMessage<::CMsgPostURL>(Arena*);
template<> ::CMsgReload* Arena::CreateMaybeMessage<::CMsgReload>(Arena*);
template<> ::CMsgRequestFullScreen* Arena::CreateMaybeMessage<::CMsgRequestFullScreen>(Arena*);
template<> ::CMsgResizeGripChanged* Arena::CreateMaybeMessage<::CMsgResizeGripChanged>(Arena*);
template<> ::CMsgSavePageToJPEG* Arena::CreateMaybeMessage<::CMsgSavePageToJPEG>(Arena*);
template<> ::CMsgSavePageToJPEGResponse* Arena::CreateMaybeMessage<::CMsgSavePageToJPEGResponse>(Arena*);
template<> ::CMsgScalePageToValue* Arena::CreateMaybeMessage<::CMsgScalePageToValue>(Arena*);
template<> ::CMsgScalePageToValueResponse* Arena::CreateMaybeMessage<::CMsgScalePageToValueResponse>(Arena*);
template<> ::CMsgScreenDPI* Arena::CreateMaybeMessage<::CMsgScreenDPI>(Arena*);
template<> ::CMsgScreenInformationChanged* Arena::CreateMaybeMessage<::CMsgScreenInformationChanged>(Arena*);
template<> ::CMsgSearchResults* Arena::CreateMaybeMessage<::CMsgSearchResults>(Arena*);
template<> ::CMsgSetCookie* Arena::CreateMaybeMessage<::CMsgSetCookie>(Arena*);
template<> ::CMsgSetCursor* Arena::CreateMaybeMessage<::CMsgSetCursor>(Arena*);
template<> ::CMsgSetFocus* Arena::CreateMaybeMessage<::CMsgSetFocus>(Arena*);
template<> ::CMsgSetForceDeviceScaleFactors* Arena::CreateMaybeMessage<::CMsgSetForceDeviceScaleFactors>(Arena*);
template<> ::CMsgSetForegroundWindow* Arena::CreateMaybeMessage<::CMsgSetForegroundWindow>(Arena*);
template<> ::CMsgSetGameOverlayTargetPIDs* Arena::CreateMaybeMessage<::CMsgSetGameOverlayTargetPIDs>(Arena*);
template<> ::CMsgSetHTMLTitle* Arena::CreateMaybeMessage<::CMsgSetHTMLTitle>(Arena*);
template<> ::CMsgSetHorizontalScroll* Arena::CreateMaybeMessage<::CMsgSetHorizontalScroll>(Arena*);
template<> ::CMsgSetLocalFileRequestMapping* Arena::CreateMaybeMessage<::CMsgSetLocalFileRequestMapping>(Arena*);
template<> ::CMsgSetLocalFileRequestMapping_AdditionalRoute* Arena::CreateMaybeMessage<::CMsgSetLocalFileRequestMapping_AdditionalRoute>(Arena*);
template<> ::CMsgSetNetFakeLocalSystemState* Arena::CreateMaybeMessage<::CMsgSetNetFakeLocalSystemState>(Arena*);
template<> ::CMsgSetPIDShuttingDown* Arena::CreateMaybeMessage<::CMsgSetPIDShuttingDown>(Arena*);
template<> ::CMsgSetProtocolBlockList* Arena::CreateMaybeMessage<::CMsgSetProtocolBlockList>(Arena*);
template<> ::CMsgSetSharedPaintBuffers* Arena::CreateMaybeMessage<::CMsgSetSharedPaintBuffers>(Arena*);
template<> ::CMsgSetTargetFrameRate* Arena::CreateMaybeMessage<::CMsgSetTargetFrameRate>(Arena*);
template<> ::CMsgSetTopWindow* Arena::CreateMaybeMessage<::CMsgSetTopWindow>(Arena*);
template<> ::CMsgSetTouchGesturesToCancel* Arena::CreateMaybeMessage<::CMsgSetTouchGesturesToCancel>(Arena*);
template<> ::CMsgSetUIMode* Arena::CreateMaybeMessage<::CMsgSetUIMode>(Arena*);
template<> ::CMsgSetVRKeyboardVisibility* Arena::CreateMaybeMessage<::CMsgSetVRKeyboardVisibility>(Arena*);
template<> ::CMsgSetVerticalScroll* Arena::CreateMaybeMessage<::CMsgSetVerticalScroll>(Arena*);
template<> ::CMsgSetWindowPosition* Arena::CreateMaybeMessage<::CMsgSetWindowPosition>(Arena*);
template<> ::CMsgSetWindowVisibility* Arena::CreateMaybeMessage<::CMsgSetWindowVisibility>(Arena*);
template<> ::CMsgSetZoomLevel* Arena::CreateMaybeMessage<::CMsgSetZoomLevel>(Arena*);
template<> ::CMsgShowBrowserContextMenu* Arena::CreateMaybeMessage<::CMsgShowBrowserContextMenu>(Arena*);
template<> ::CMsgShowBrowserContextMenu_ContextCommand* Arena::CreateMaybeMessage<::CMsgShowBrowserContextMenu_ContextCommand>(Arena*);
template<> ::CMsgShowPopup* Arena::CreateMaybeMessage<::CMsgShowPopup>(Arena*);
template<> ::CMsgShowToolTip* Arena::CreateMaybeMessage<::CMsgShowToolTip>(Arena*);
template<> ::CMsgShowWindow* Arena::CreateMaybeMessage<::CMsgShowWindow>(Arena*);
template<> ::CMsgSizePopup* Arena::CreateMaybeMessage<::CMsgSizePopup>(Arena*);
template<> ::CMsgStartDownload* Arena::CreateMaybeMessage<::CMsgStartDownload>(Arena*);
template<> ::CMsgStartRequest* Arena::CreateMaybeMessage<::CMsgStartRequest>(Arena*);
template<> ::CMsgStartRequestResponse* Arena::CreateMaybeMessage<::CMsgStartRequestResponse>(Arena*);
template<> ::CMsgStatusText* Arena::CreateMaybeMessage<::CMsgStatusText>(Arena*);
template<> ::CMsgSteamAuthCookiesSet* Arena::CreateMaybeMessage<::CMsgSteamAuthCookiesSet>(Arena*);
template<> ::CMsgSteamAuthNeeded* Arena::CreateMaybeMessage<::CMsgSteamAuthNeeded>(Arena*);
template<> ::CMsgStopFind* Arena::CreateMaybeMessage<::CMsgStopFind>(Arena*);
template<> ::CMsgStopLoad* Arena::CreateMaybeMessage<::CMsgStopLoad>(Arena*);
template<> ::CMsgToggleFindInPageDialog* Arena::CreateMaybeMessage<::CMsgToggleFindInPageDialog>(Arena*);
template<> ::CMsgTouchGesture* Arena::CreateMaybeMessage<::CMsgTouchGesture>(Arena*);
template<> ::CMsgURLChanged* Arena::CreateMaybeMessage<::CMsgURLChanged>(Arena*);
template<> ::CMsgUnlockH264* Arena::CreateMaybeMessage<::CMsgUnlockH264>(Arena*);
template<> ::CMsgUpdateToolTip* Arena::CreateMaybeMessage<::CMsgUpdateToolTip>(Arena*);
template<> ::CMsgVerticalScrollBarSize* Arena::CreateMaybeMessage<::CMsgVerticalScrollBarSize>(Arena*);
template<> ::CMsgVerticalScrollBarSizeResponse* Arena::CreateMaybeMessage<::CMsgVerticalScrollBarSizeResponse>(Arena*);
template<> ::CMsgViewSource* Arena::CreateMaybeMessage<::CMsgViewSource>(Arena*);
template<> ::CMsgWasHidden* Arena::CreateMaybeMessage<::CMsgWasHidden>(Arena*);
template<> ::CMsgZoomToElementAtPosition* Arena::CreateMaybeMessage<::CMsgZoomToElementAtPosition>(Arena*);
template<> ::CMsgZoomToElementAtPositionResponse* Arena::CreateMaybeMessage<::CMsgZoomToElementAtPositionResponse>(Arena*);
template<> ::CMsgZoomToFocusedElement* Arena::CreateMaybeMessage<::CMsgZoomToFocusedElement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EJSRegisterMethodType : int {
  k_EJSRegisterMethodType_Invalid = 0,
  k_EJSRegisterMethodType_Function = 1,
  k_EJSRegisterMethodType_Callback = 2,
  k_EJSRegisterMethodType_Promise = 3
};
bool EJSRegisterMethodType_IsValid(int value);
constexpr EJSRegisterMethodType EJSRegisterMethodType_MIN = k_EJSRegisterMethodType_Invalid;
constexpr EJSRegisterMethodType EJSRegisterMethodType_MAX = k_EJSRegisterMethodType_Promise;
constexpr int EJSRegisterMethodType_ARRAYSIZE = EJSRegisterMethodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EJSRegisterMethodType_descriptor();
template<typename T>
inline const std::string& EJSRegisterMethodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EJSRegisterMethodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EJSRegisterMethodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EJSRegisterMethodType_descriptor(), enum_t_value);
}
inline bool EJSRegisterMethodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EJSRegisterMethodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EJSRegisterMethodType>(
    EJSRegisterMethodType_descriptor(), name, value);
}
// ===================================================================

class CMsgKeyUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKeyUp) */ {
 public:
  inline CMsgKeyUp() : CMsgKeyUp(nullptr) {}
  ~CMsgKeyUp() override;
  explicit constexpr CMsgKeyUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKeyUp(const CMsgKeyUp& from);
  CMsgKeyUp(CMsgKeyUp&& from) noexcept
    : CMsgKeyUp() {
    *this = ::std::move(from);
  }

  inline CMsgKeyUp& operator=(const CMsgKeyUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKeyUp& operator=(CMsgKeyUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKeyUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKeyUp* internal_default_instance() {
    return reinterpret_cast<const CMsgKeyUp*>(
               &_CMsgKeyUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgKeyUp& a, CMsgKeyUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKeyUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKeyUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgKeyUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgKeyUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgKeyUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgKeyUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKeyUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKeyUp";
  }
  protected:
  explicit CMsgKeyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kKeyCodeFieldNumber = 2,
    kModifiersFieldNumber = 3,
    kNativeKeyCodeFieldNumber = 4,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 keyCode = 2;
  bool has_keycode() const;
  private:
  bool _internal_has_keycode() const;
  public:
  void clear_keycode();
  uint32_t keycode() const;
  void set_keycode(uint32_t value);
  private:
  uint32_t _internal_keycode() const;
  void _internal_set_keycode(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // optional uint32 nativeKeyCode = 4;
  bool has_nativekeycode() const;
  private:
  bool _internal_has_nativekeycode() const;
  public:
  void clear_nativekeycode();
  uint32_t nativekeycode() const;
  void set_nativekeycode(uint32_t value);
  private:
  uint32_t _internal_nativekeycode() const;
  void _internal_set_nativekeycode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgKeyUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t keycode_;
  uint32_t modifiers_;
  uint32_t nativekeycode_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgKeyDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKeyDown) */ {
 public:
  inline CMsgKeyDown() : CMsgKeyDown(nullptr) {}
  ~CMsgKeyDown() override;
  explicit constexpr CMsgKeyDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKeyDown(const CMsgKeyDown& from);
  CMsgKeyDown(CMsgKeyDown&& from) noexcept
    : CMsgKeyDown() {
    *this = ::std::move(from);
  }

  inline CMsgKeyDown& operator=(const CMsgKeyDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKeyDown& operator=(CMsgKeyDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKeyDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKeyDown* internal_default_instance() {
    return reinterpret_cast<const CMsgKeyDown*>(
               &_CMsgKeyDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgKeyDown& a, CMsgKeyDown& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKeyDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKeyDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgKeyDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgKeyDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgKeyDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgKeyDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKeyDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKeyDown";
  }
  protected:
  explicit CMsgKeyDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kKeyCodeFieldNumber = 2,
    kModifiersFieldNumber = 3,
    kIsSystemKeyFieldNumber = 4,
    kNativeKeyCodeFieldNumber = 5,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 keyCode = 2;
  bool has_keycode() const;
  private:
  bool _internal_has_keycode() const;
  public:
  void clear_keycode();
  uint32_t keycode() const;
  void set_keycode(uint32_t value);
  private:
  uint32_t _internal_keycode() const;
  void _internal_set_keycode(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // optional bool is_system_key = 4;
  bool has_is_system_key() const;
  private:
  bool _internal_has_is_system_key() const;
  public:
  void clear_is_system_key();
  bool is_system_key() const;
  void set_is_system_key(bool value);
  private:
  bool _internal_is_system_key() const;
  void _internal_set_is_system_key(bool value);
  public:

  // optional uint32 nativeKeyCode = 5;
  bool has_nativekeycode() const;
  private:
  bool _internal_has_nativekeycode() const;
  public:
  void clear_nativekeycode();
  uint32_t nativekeycode() const;
  void set_nativekeycode(uint32_t value);
  private:
  uint32_t _internal_nativekeycode() const;
  void _internal_set_nativekeycode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgKeyDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t keycode_;
  uint32_t modifiers_;
  bool is_system_key_;
  uint32_t nativekeycode_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgKeyChar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgKeyChar) */ {
 public:
  inline CMsgKeyChar() : CMsgKeyChar(nullptr) {}
  ~CMsgKeyChar() override;
  explicit constexpr CMsgKeyChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgKeyChar(const CMsgKeyChar& from);
  CMsgKeyChar(CMsgKeyChar&& from) noexcept
    : CMsgKeyChar() {
    *this = ::std::move(from);
  }

  inline CMsgKeyChar& operator=(const CMsgKeyChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgKeyChar& operator=(CMsgKeyChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgKeyChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgKeyChar* internal_default_instance() {
    return reinterpret_cast<const CMsgKeyChar*>(
               &_CMsgKeyChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgKeyChar& a, CMsgKeyChar& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgKeyChar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgKeyChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgKeyChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgKeyChar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgKeyChar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgKeyChar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgKeyChar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgKeyChar";
  }
  protected:
  explicit CMsgKeyChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kUnicharFieldNumber = 2,
    kModifiersFieldNumber = 3,
    kKeyCodeFieldNumber = 4,
    kNativeKeyCodeFieldNumber = 5,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 unichar = 2;
  bool has_unichar() const;
  private:
  bool _internal_has_unichar() const;
  public:
  void clear_unichar();
  uint32_t unichar() const;
  void set_unichar(uint32_t value);
  private:
  uint32_t _internal_unichar() const;
  void _internal_set_unichar(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // optional uint32 keyCode = 4;
  bool has_keycode() const;
  private:
  bool _internal_has_keycode() const;
  public:
  void clear_keycode();
  uint32_t keycode() const;
  void set_keycode(uint32_t value);
  private:
  uint32_t _internal_keycode() const;
  void _internal_set_keycode(uint32_t value);
  public:

  // optional uint32 nativeKeyCode = 5;
  bool has_nativekeycode() const;
  private:
  bool _internal_has_nativekeycode() const;
  public:
  void clear_nativekeycode();
  uint32_t nativekeycode() const;
  void set_nativekeycode(uint32_t value);
  private:
  uint32_t _internal_nativekeycode() const;
  void _internal_set_nativekeycode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgKeyChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t unichar_;
  uint32_t modifiers_;
  uint32_t keycode_;
  uint32_t nativekeycode_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseDown) */ {
 public:
  inline CMsgMouseDown() : CMsgMouseDown(nullptr) {}
  ~CMsgMouseDown() override;
  explicit constexpr CMsgMouseDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseDown(const CMsgMouseDown& from);
  CMsgMouseDown(CMsgMouseDown&& from) noexcept
    : CMsgMouseDown() {
    *this = ::std::move(from);
  }

  inline CMsgMouseDown& operator=(const CMsgMouseDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseDown& operator=(CMsgMouseDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseDown* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseDown*>(
               &_CMsgMouseDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgMouseDown& a, CMsgMouseDown& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseDown";
  }
  protected:
  explicit CMsgMouseDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kMouseButtonFieldNumber = 2,
    kModifiersFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 mouse_button = 2;
  bool has_mouse_button() const;
  private:
  bool _internal_has_mouse_button() const;
  public:
  void clear_mouse_button();
  uint32_t mouse_button() const;
  void set_mouse_button(uint32_t value);
  private:
  uint32_t _internal_mouse_button() const;
  void _internal_set_mouse_button(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t mouse_button_;
  uint32_t modifiers_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseUp) */ {
 public:
  inline CMsgMouseUp() : CMsgMouseUp(nullptr) {}
  ~CMsgMouseUp() override;
  explicit constexpr CMsgMouseUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseUp(const CMsgMouseUp& from);
  CMsgMouseUp(CMsgMouseUp&& from) noexcept
    : CMsgMouseUp() {
    *this = ::std::move(from);
  }

  inline CMsgMouseUp& operator=(const CMsgMouseUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseUp& operator=(CMsgMouseUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseUp* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseUp*>(
               &_CMsgMouseUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgMouseUp& a, CMsgMouseUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseUp";
  }
  protected:
  explicit CMsgMouseUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kMouseButtonFieldNumber = 2,
    kModifiersFieldNumber = 3,
    kIsOffPanelFieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 mouse_button = 2;
  bool has_mouse_button() const;
  private:
  bool _internal_has_mouse_button() const;
  public:
  void clear_mouse_button();
  uint32_t mouse_button() const;
  void set_mouse_button(uint32_t value);
  private:
  uint32_t _internal_mouse_button() const;
  void _internal_set_mouse_button(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // optional bool is_off_panel = 4;
  bool has_is_off_panel() const;
  private:
  bool _internal_has_is_off_panel() const;
  public:
  void clear_is_off_panel();
  bool is_off_panel() const;
  void set_is_off_panel(bool value);
  private:
  bool _internal_is_off_panel() const;
  void _internal_set_is_off_panel(bool value);
  public:

  // optional int32 x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t mouse_button_;
  uint32_t modifiers_;
  bool is_off_panel_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseDblClick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseDblClick) */ {
 public:
  inline CMsgMouseDblClick() : CMsgMouseDblClick(nullptr) {}
  ~CMsgMouseDblClick() override;
  explicit constexpr CMsgMouseDblClick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseDblClick(const CMsgMouseDblClick& from);
  CMsgMouseDblClick(CMsgMouseDblClick&& from) noexcept
    : CMsgMouseDblClick() {
    *this = ::std::move(from);
  }

  inline CMsgMouseDblClick& operator=(const CMsgMouseDblClick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseDblClick& operator=(CMsgMouseDblClick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseDblClick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseDblClick* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseDblClick*>(
               &_CMsgMouseDblClick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgMouseDblClick& a, CMsgMouseDblClick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseDblClick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseDblClick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseDblClick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseDblClick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseDblClick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseDblClick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseDblClick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseDblClick";
  }
  protected:
  explicit CMsgMouseDblClick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kMouseButtonFieldNumber = 2,
    kModifiersFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 mouse_button = 2;
  bool has_mouse_button() const;
  private:
  bool _internal_has_mouse_button() const;
  public:
  void clear_mouse_button();
  uint32_t mouse_button() const;
  void set_mouse_button(uint32_t value);
  private:
  uint32_t _internal_mouse_button() const;
  void _internal_set_mouse_button(uint32_t value);
  public:

  // optional uint32 modifiers = 3;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseDblClick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t mouse_button_;
  uint32_t modifiers_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseWheel) */ {
 public:
  inline CMsgMouseWheel() : CMsgMouseWheel(nullptr) {}
  ~CMsgMouseWheel() override;
  explicit constexpr CMsgMouseWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseWheel(const CMsgMouseWheel& from);
  CMsgMouseWheel(CMsgMouseWheel&& from) noexcept
    : CMsgMouseWheel() {
    *this = ::std::move(from);
  }

  inline CMsgMouseWheel& operator=(const CMsgMouseWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseWheel& operator=(CMsgMouseWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseWheel* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseWheel*>(
               &_CMsgMouseWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgMouseWheel& a, CMsgMouseWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseWheel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseWheel";
  }
  protected:
  explicit CMsgMouseWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kDeltaxFieldNumber = 2,
    kDeltayFieldNumber = 3,
    kModifiersFieldNumber = 4,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 deltax = 2;
  bool has_deltax() const;
  private:
  bool _internal_has_deltax() const;
  public:
  void clear_deltax();
  int32_t deltax() const;
  void set_deltax(int32_t value);
  private:
  int32_t _internal_deltax() const;
  void _internal_set_deltax(int32_t value);
  public:

  // optional int32 deltay = 3;
  bool has_deltay() const;
  private:
  bool _internal_has_deltay() const;
  public:
  void clear_deltay();
  int32_t deltay() const;
  void set_deltay(int32_t value);
  private:
  int32_t _internal_deltay() const;
  void _internal_set_deltay(int32_t value);
  public:

  // optional uint32 modifiers = 4;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t deltax_;
  int32_t deltay_;
  uint32_t modifiers_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseMove) */ {
 public:
  inline CMsgMouseMove() : CMsgMouseMove(nullptr) {}
  ~CMsgMouseMove() override;
  explicit constexpr CMsgMouseMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseMove(const CMsgMouseMove& from);
  CMsgMouseMove(CMsgMouseMove&& from) noexcept
    : CMsgMouseMove() {
    *this = ::std::move(from);
  }

  inline CMsgMouseMove& operator=(const CMsgMouseMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseMove& operator=(CMsgMouseMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseMove* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseMove*>(
               &_CMsgMouseMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgMouseMove& a, CMsgMouseMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseMove";
  }
  protected:
  explicit CMsgMouseMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kModifiersFieldNumber = 4,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional uint32 modifiers = 4;
  bool has_modifiers() const;
  private:
  bool _internal_has_modifiers() const;
  public:
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t x_;
  int32_t y_;
  uint32_t modifiers_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMouseLeave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMouseLeave) */ {
 public:
  inline CMsgMouseLeave() : CMsgMouseLeave(nullptr) {}
  ~CMsgMouseLeave() override;
  explicit constexpr CMsgMouseLeave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMouseLeave(const CMsgMouseLeave& from);
  CMsgMouseLeave(CMsgMouseLeave&& from) noexcept
    : CMsgMouseLeave() {
    *this = ::std::move(from);
  }

  inline CMsgMouseLeave& operator=(const CMsgMouseLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMouseLeave& operator=(CMsgMouseLeave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMouseLeave& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMouseLeave* internal_default_instance() {
    return reinterpret_cast<const CMsgMouseLeave*>(
               &_CMsgMouseLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgMouseLeave& a, CMsgMouseLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMouseLeave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMouseLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMouseLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMouseLeave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMouseLeave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMouseLeave& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMouseLeave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMouseLeave";
  }
  protected:
  explicit CMsgMouseLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMouseLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserCreate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserCreate) */ {
 public:
  inline CMsgBrowserCreate() : CMsgBrowserCreate(nullptr) {}
  ~CMsgBrowserCreate() override;
  explicit constexpr CMsgBrowserCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserCreate(const CMsgBrowserCreate& from);
  CMsgBrowserCreate(CMsgBrowserCreate&& from) noexcept
    : CMsgBrowserCreate() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserCreate& operator=(const CMsgBrowserCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserCreate& operator=(CMsgBrowserCreate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserCreate*>(
               &_CMsgBrowserCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgBrowserCreate& a, CMsgBrowserCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserCreate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserCreate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserCreate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserCreate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserCreate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserCreate";
  }
  protected:
  explicit CMsgBrowserCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseragentFieldNumber = 3,
    kUserCssFieldNumber = 5,
    kWindowIconFieldNumber = 11,
    kVroverlayKeyFieldNumber = 13,
    kInitialUrlFieldNumber = 18,
    kRequestIdFieldNumber = 1,
    kDpiScalingFieldNumber = 7,
    kInitialWidthFieldNumber = 9,
    kInitialHeightFieldNumber = 10,
    kNativeDropdownsFieldNumber = 6,
    kBorderlessFieldNumber = 12,
    kOnlyAllowTrustedPopupsFieldNumber = 17,
    kBrowserTypeFieldNumber = 14,
    kHwndParentFieldNumber = 19,
    kCreationFlagsFieldNumber = 20,
    kInitialLeftFieldNumber = 16,
    kOffscreenFieldNumber = 8,
    kInitialTopFieldNumber = 15,
  };
  // optional string useragent = 3;
  bool has_useragent() const;
  private:
  bool _internal_has_useragent() const;
  public:
  void clear_useragent();
  const std::string& useragent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useragent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useragent();
  PROTOBUF_NODISCARD std::string* release_useragent();
  void set_allocated_useragent(std::string* useragent);
  private:
  const std::string& _internal_useragent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useragent(const std::string& value);
  std::string* _internal_mutable_useragent();
  public:

  // optional string user_css = 5;
  bool has_user_css() const;
  private:
  bool _internal_has_user_css() const;
  public:
  void clear_user_css();
  const std::string& user_css() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_css(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_css();
  PROTOBUF_NODISCARD std::string* release_user_css();
  void set_allocated_user_css(std::string* user_css);
  private:
  const std::string& _internal_user_css() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_css(const std::string& value);
  std::string* _internal_mutable_user_css();
  public:

  // optional string window_icon = 11;
  bool has_window_icon() const;
  private:
  bool _internal_has_window_icon() const;
  public:
  void clear_window_icon();
  const std::string& window_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_icon();
  PROTOBUF_NODISCARD std::string* release_window_icon();
  void set_allocated_window_icon(std::string* window_icon);
  private:
  const std::string& _internal_window_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_icon(const std::string& value);
  std::string* _internal_mutable_window_icon();
  public:

  // optional string vroverlay_key = 13;
  bool has_vroverlay_key() const;
  private:
  bool _internal_has_vroverlay_key() const;
  public:
  void clear_vroverlay_key();
  const std::string& vroverlay_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vroverlay_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vroverlay_key();
  PROTOBUF_NODISCARD std::string* release_vroverlay_key();
  void set_allocated_vroverlay_key(std::string* vroverlay_key);
  private:
  const std::string& _internal_vroverlay_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vroverlay_key(const std::string& value);
  std::string* _internal_mutable_vroverlay_key();
  public:

  // optional string initial_url = 18;
  bool has_initial_url() const;
  private:
  bool _internal_has_initial_url() const;
  public:
  void clear_initial_url();
  const std::string& initial_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initial_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initial_url();
  PROTOBUF_NODISCARD std::string* release_initial_url();
  void set_allocated_initial_url(std::string* initial_url);
  private:
  const std::string& _internal_initial_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initial_url(const std::string& value);
  std::string* _internal_mutable_initial_url();
  public:

  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint32_t request_id() const;
  void set_request_id(uint32_t value);
  private:
  uint32_t _internal_request_id() const;
  void _internal_set_request_id(uint32_t value);
  public:

  // optional float dpi_scaling = 7;
  bool has_dpi_scaling() const;
  private:
  bool _internal_has_dpi_scaling() const;
  public:
  void clear_dpi_scaling();
  float dpi_scaling() const;
  void set_dpi_scaling(float value);
  private:
  float _internal_dpi_scaling() const;
  void _internal_set_dpi_scaling(float value);
  public:

  // optional uint32 initial_width = 9 [default = 0];
  bool has_initial_width() const;
  private:
  bool _internal_has_initial_width() const;
  public:
  void clear_initial_width();
  uint32_t initial_width() const;
  void set_initial_width(uint32_t value);
  private:
  uint32_t _internal_initial_width() const;
  void _internal_set_initial_width(uint32_t value);
  public:

  // optional uint32 initial_height = 10 [default = 0];
  bool has_initial_height() const;
  private:
  bool _internal_has_initial_height() const;
  public:
  void clear_initial_height();
  uint32_t initial_height() const;
  void set_initial_height(uint32_t value);
  private:
  uint32_t _internal_initial_height() const;
  void _internal_set_initial_height(uint32_t value);
  public:

  // optional bool native_dropdowns = 6;
  bool has_native_dropdowns() const;
  private:
  bool _internal_has_native_dropdowns() const;
  public:
  void clear_native_dropdowns();
  bool native_dropdowns() const;
  void set_native_dropdowns(bool value);
  private:
  bool _internal_native_dropdowns() const;
  void _internal_set_native_dropdowns(bool value);
  public:

  // optional bool borderless = 12 [default = false];
  bool has_borderless() const;
  private:
  bool _internal_has_borderless() const;
  public:
  void clear_borderless();
  bool borderless() const;
  void set_borderless(bool value);
  private:
  bool _internal_borderless() const;
  void _internal_set_borderless(bool value);
  public:

  // optional bool only_allow_trusted_popups = 17 [default = false];
  bool has_only_allow_trusted_popups() const;
  private:
  bool _internal_has_only_allow_trusted_popups() const;
  public:
  void clear_only_allow_trusted_popups();
  bool only_allow_trusted_popups() const;
  void set_only_allow_trusted_popups(bool value);
  private:
  bool _internal_only_allow_trusted_popups() const;
  void _internal_set_only_allow_trusted_popups(bool value);
  public:

  // optional uint32 browser_type = 14 [default = 0];
  bool has_browser_type() const;
  private:
  bool _internal_has_browser_type() const;
  public:
  void clear_browser_type();
  uint32_t browser_type() const;
  void set_browser_type(uint32_t value);
  private:
  uint32_t _internal_browser_type() const;
  void _internal_set_browser_type(uint32_t value);
  public:

  // optional fixed64 hwnd_parent = 19;
  bool has_hwnd_parent() const;
  private:
  bool _internal_has_hwnd_parent() const;
  public:
  void clear_hwnd_parent();
  uint64_t hwnd_parent() const;
  void set_hwnd_parent(uint64_t value);
  private:
  uint64_t _internal_hwnd_parent() const;
  void _internal_set_hwnd_parent(uint64_t value);
  public:

  // optional uint32 creation_flags = 20 [default = 0];
  bool has_creation_flags() const;
  private:
  bool _internal_has_creation_flags() const;
  public:
  void clear_creation_flags();
  uint32_t creation_flags() const;
  void set_creation_flags(uint32_t value);
  private:
  uint32_t _internal_creation_flags() const;
  void _internal_set_creation_flags(uint32_t value);
  public:

  // optional int32 initial_left = 16 [default = -2147483648];
  bool has_initial_left() const;
  private:
  bool _internal_has_initial_left() const;
  public:
  void clear_initial_left();
  int32_t initial_left() const;
  void set_initial_left(int32_t value);
  private:
  int32_t _internal_initial_left() const;
  void _internal_set_initial_left(int32_t value);
  public:

  // optional bool offscreen = 8 [default = true];
  bool has_offscreen() const;
  private:
  bool _internal_has_offscreen() const;
  public:
  void clear_offscreen();
  bool offscreen() const;
  void set_offscreen(bool value);
  private:
  bool _internal_offscreen() const;
  void _internal_set_offscreen(bool value);
  public:

  // optional int32 initial_top = 15 [default = -2147483648];
  bool has_initial_top() const;
  private:
  bool _internal_has_initial_top() const;
  public:
  void clear_initial_top();
  int32_t initial_top() const;
  void set_initial_top(int32_t value);
  private:
  int32_t _internal_initial_top() const;
  void _internal_set_initial_top(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useragent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_css_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vroverlay_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initial_url_;
  uint32_t request_id_;
  float dpi_scaling_;
  uint32_t initial_width_;
  uint32_t initial_height_;
  bool native_dropdowns_;
  bool borderless_;
  bool only_allow_trusted_popups_;
  uint32_t browser_type_;
  uint64_t hwnd_parent_;
  uint32_t creation_flags_;
  int32_t initial_left_;
  bool offscreen_;
  int32_t initial_top_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserCreateResponse) */ {
 public:
  inline CMsgBrowserCreateResponse() : CMsgBrowserCreateResponse(nullptr) {}
  ~CMsgBrowserCreateResponse() override;
  explicit constexpr CMsgBrowserCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from);
  CMsgBrowserCreateResponse(CMsgBrowserCreateResponse&& from) noexcept
    : CMsgBrowserCreateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserCreateResponse& operator=(const CMsgBrowserCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserCreateResponse& operator=(CMsgBrowserCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserCreateResponse*>(
               &_CMsgBrowserCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgBrowserCreateResponse& a, CMsgBrowserCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserCreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserCreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserCreateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserCreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserCreateResponse";
  }
  protected:
  explicit CMsgBrowserCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 request_id = 2;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint32_t request_id() const;
  void set_request_id(uint32_t value);
  private:
  uint32_t _internal_request_id() const;
  void _internal_set_request_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t request_id_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserRemove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserRemove) */ {
 public:
  inline CMsgBrowserRemove() : CMsgBrowserRemove(nullptr) {}
  ~CMsgBrowserRemove() override;
  explicit constexpr CMsgBrowserRemove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserRemove(const CMsgBrowserRemove& from);
  CMsgBrowserRemove(CMsgBrowserRemove&& from) noexcept
    : CMsgBrowserRemove() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserRemove& operator=(const CMsgBrowserRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserRemove& operator=(CMsgBrowserRemove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserRemove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserRemove* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserRemove*>(
               &_CMsgBrowserRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgBrowserRemove& a, CMsgBrowserRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserRemove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserRemove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserRemove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserRemove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserRemove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserRemove";
  }
  protected:
  explicit CMsgBrowserRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetLocalFileRequestMapping_AdditionalRoute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetLocalFileRequestMapping.AdditionalRoute) */ {
 public:
  inline CMsgSetLocalFileRequestMapping_AdditionalRoute() : CMsgSetLocalFileRequestMapping_AdditionalRoute(nullptr) {}
  ~CMsgSetLocalFileRequestMapping_AdditionalRoute() override;
  explicit constexpr CMsgSetLocalFileRequestMapping_AdditionalRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetLocalFileRequestMapping_AdditionalRoute(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from);
  CMsgSetLocalFileRequestMapping_AdditionalRoute(CMsgSetLocalFileRequestMapping_AdditionalRoute&& from) noexcept
    : CMsgSetLocalFileRequestMapping_AdditionalRoute() {
    *this = ::std::move(from);
  }

  inline CMsgSetLocalFileRequestMapping_AdditionalRoute& operator=(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetLocalFileRequestMapping_AdditionalRoute& operator=(CMsgSetLocalFileRequestMapping_AdditionalRoute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetLocalFileRequestMapping_AdditionalRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetLocalFileRequestMapping_AdditionalRoute* internal_default_instance() {
    return reinterpret_cast<const CMsgSetLocalFileRequestMapping_AdditionalRoute*>(
               &_CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgSetLocalFileRequestMapping_AdditionalRoute& a, CMsgSetLocalFileRequestMapping_AdditionalRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetLocalFileRequestMapping_AdditionalRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetLocalFileRequestMapping_AdditionalRoute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetLocalFileRequestMapping.AdditionalRoute";
  }
  protected:
  explicit CMsgSetLocalFileRequestMapping_AdditionalRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeUrlFieldNumber = 1,
    kLocalPathFieldNumber = 2,
    kAllowedExtensionsFieldNumber = 3,
    kUrlRewriteFieldNumber = 4,
  };
  // optional string relative_url = 1;
  bool has_relative_url() const;
  private:
  bool _internal_has_relative_url() const;
  public:
  void clear_relative_url();
  const std::string& relative_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_url();
  PROTOBUF_NODISCARD std::string* release_relative_url();
  void set_allocated_relative_url(std::string* relative_url);
  private:
  const std::string& _internal_relative_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_url(const std::string& value);
  std::string* _internal_mutable_relative_url();
  public:

  // optional string local_path = 2;
  bool has_local_path() const;
  private:
  bool _internal_has_local_path() const;
  public:
  void clear_local_path();
  const std::string& local_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_path();
  PROTOBUF_NODISCARD std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);
  private:
  const std::string& _internal_local_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_path(const std::string& value);
  std::string* _internal_mutable_local_path();
  public:

  // optional string allowed_extensions = 3;
  bool has_allowed_extensions() const;
  private:
  bool _internal_has_allowed_extensions() const;
  public:
  void clear_allowed_extensions();
  const std::string& allowed_extensions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allowed_extensions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allowed_extensions();
  PROTOBUF_NODISCARD std::string* release_allowed_extensions();
  void set_allocated_allowed_extensions(std::string* allowed_extensions);
  private:
  const std::string& _internal_allowed_extensions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allowed_extensions(const std::string& value);
  std::string* _internal_mutable_allowed_extensions();
  public:

  // optional bool url_rewrite = 4;
  bool has_url_rewrite() const;
  private:
  bool _internal_has_url_rewrite() const;
  public:
  void clear_url_rewrite();
  bool url_rewrite() const;
  void set_url_rewrite(bool value);
  private:
  bool _internal_url_rewrite() const;
  void _internal_set_url_rewrite(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetLocalFileRequestMapping.AdditionalRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allowed_extensions_;
  bool url_rewrite_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetLocalFileRequestMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetLocalFileRequestMapping) */ {
 public:
  inline CMsgSetLocalFileRequestMapping() : CMsgSetLocalFileRequestMapping(nullptr) {}
  ~CMsgSetLocalFileRequestMapping() override;
  explicit constexpr CMsgSetLocalFileRequestMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetLocalFileRequestMapping(const CMsgSetLocalFileRequestMapping& from);
  CMsgSetLocalFileRequestMapping(CMsgSetLocalFileRequestMapping&& from) noexcept
    : CMsgSetLocalFileRequestMapping() {
    *this = ::std::move(from);
  }

  inline CMsgSetLocalFileRequestMapping& operator=(const CMsgSetLocalFileRequestMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetLocalFileRequestMapping& operator=(CMsgSetLocalFileRequestMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetLocalFileRequestMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetLocalFileRequestMapping* internal_default_instance() {
    return reinterpret_cast<const CMsgSetLocalFileRequestMapping*>(
               &_CMsgSetLocalFileRequestMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgSetLocalFileRequestMapping& a, CMsgSetLocalFileRequestMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetLocalFileRequestMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetLocalFileRequestMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetLocalFileRequestMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetLocalFileRequestMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetLocalFileRequestMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetLocalFileRequestMapping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetLocalFileRequestMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetLocalFileRequestMapping";
  }
  protected:
  explicit CMsgSetLocalFileRequestMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSetLocalFileRequestMapping_AdditionalRoute AdditionalRoute;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 4,
    kRequestUrlFieldNumber = 2,
    kDefaultLocalPathFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated .CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::CMsgSetLocalFileRequestMapping_AdditionalRoute* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >*
      mutable_routes();
  private:
  const ::CMsgSetLocalFileRequestMapping_AdditionalRoute& _internal_routes(int index) const;
  ::CMsgSetLocalFileRequestMapping_AdditionalRoute* _internal_add_routes();
  public:
  const ::CMsgSetLocalFileRequestMapping_AdditionalRoute& routes(int index) const;
  ::CMsgSetLocalFileRequestMapping_AdditionalRoute* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >&
      routes() const;

  // optional string request_url = 2;
  bool has_request_url() const;
  private:
  bool _internal_has_request_url() const;
  public:
  void clear_request_url();
  const std::string& request_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_url();
  PROTOBUF_NODISCARD std::string* release_request_url();
  void set_allocated_request_url(std::string* request_url);
  private:
  const std::string& _internal_request_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_url(const std::string& value);
  std::string* _internal_mutable_request_url();
  public:

  // optional string default_local_path = 3;
  bool has_default_local_path() const;
  private:
  bool _internal_has_default_local_path() const;
  public:
  void clear_default_local_path();
  const std::string& default_local_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_local_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_local_path();
  PROTOBUF_NODISCARD std::string* release_default_local_path();
  void set_allocated_default_local_path(std::string* default_local_path);
  private:
  const std::string& _internal_default_local_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_local_path(const std::string& value);
  std::string* _internal_mutable_default_local_path();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetLocalFileRequestMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSetLocalFileRequestMapping_AdditionalRoute > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_local_path_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserErrorStrings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserErrorStrings) */ {
 public:
  inline CMsgBrowserErrorStrings() : CMsgBrowserErrorStrings(nullptr) {}
  ~CMsgBrowserErrorStrings() override;
  explicit constexpr CMsgBrowserErrorStrings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from);
  CMsgBrowserErrorStrings(CMsgBrowserErrorStrings&& from) noexcept
    : CMsgBrowserErrorStrings() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserErrorStrings& operator=(const CMsgBrowserErrorStrings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserErrorStrings& operator=(CMsgBrowserErrorStrings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserErrorStrings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserErrorStrings* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserErrorStrings*>(
               &_CMsgBrowserErrorStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgBrowserErrorStrings& a, CMsgBrowserErrorStrings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserErrorStrings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserErrorStrings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserErrorStrings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserErrorStrings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserErrorStrings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserErrorStrings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserErrorStrings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserErrorStrings";
  }
  protected:
  explicit CMsgBrowserErrorStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kHeaderFieldNumber = 3,
    kCacheMissFieldNumber = 4,
    kBadUrlFieldNumber = 5,
    kConnectionProblemFieldNumber = 6,
    kProxyProblemFieldNumber = 7,
    kUnknownFieldNumber = 8,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string header = 3;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // optional string cache_miss = 4;
  bool has_cache_miss() const;
  private:
  bool _internal_has_cache_miss() const;
  public:
  void clear_cache_miss();
  const std::string& cache_miss() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_miss(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_miss();
  PROTOBUF_NODISCARD std::string* release_cache_miss();
  void set_allocated_cache_miss(std::string* cache_miss);
  private:
  const std::string& _internal_cache_miss() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_miss(const std::string& value);
  std::string* _internal_mutable_cache_miss();
  public:

  // optional string bad_url = 5;
  bool has_bad_url() const;
  private:
  bool _internal_has_bad_url() const;
  public:
  void clear_bad_url();
  const std::string& bad_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bad_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bad_url();
  PROTOBUF_NODISCARD std::string* release_bad_url();
  void set_allocated_bad_url(std::string* bad_url);
  private:
  const std::string& _internal_bad_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bad_url(const std::string& value);
  std::string* _internal_mutable_bad_url();
  public:

  // optional string connection_problem = 6;
  bool has_connection_problem() const;
  private:
  bool _internal_has_connection_problem() const;
  public:
  void clear_connection_problem();
  const std::string& connection_problem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_problem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_problem();
  PROTOBUF_NODISCARD std::string* release_connection_problem();
  void set_allocated_connection_problem(std::string* connection_problem);
  private:
  const std::string& _internal_connection_problem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_problem(const std::string& value);
  std::string* _internal_mutable_connection_problem();
  public:

  // optional string proxy_problem = 7;
  bool has_proxy_problem() const;
  private:
  bool _internal_has_proxy_problem() const;
  public:
  void clear_proxy_problem();
  const std::string& proxy_problem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxy_problem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxy_problem();
  PROTOBUF_NODISCARD std::string* release_proxy_problem();
  void set_allocated_proxy_problem(std::string* proxy_problem);
  private:
  const std::string& _internal_proxy_problem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxy_problem(const std::string& value);
  std::string* _internal_mutable_proxy_problem();
  public:

  // optional string unknown = 8;
  bool has_unknown() const;
  private:
  bool _internal_has_unknown() const;
  public:
  void clear_unknown();
  const std::string& unknown() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown();
  PROTOBUF_NODISCARD std::string* release_unknown();
  void set_allocated_unknown(std::string* unknown);
  private:
  const std::string& _internal_unknown() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown(const std::string& value);
  std::string* _internal_mutable_unknown();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserErrorStrings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_miss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bad_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_problem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_problem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserSetName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserSetName) */ {
 public:
  inline CMsgBrowserSetName() : CMsgBrowserSetName(nullptr) {}
  ~CMsgBrowserSetName() override;
  explicit constexpr CMsgBrowserSetName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserSetName(const CMsgBrowserSetName& from);
  CMsgBrowserSetName(CMsgBrowserSetName&& from) noexcept
    : CMsgBrowserSetName() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserSetName& operator=(const CMsgBrowserSetName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserSetName& operator=(CMsgBrowserSetName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserSetName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserSetName* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserSetName*>(
               &_CMsgBrowserSetName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgBrowserSetName& a, CMsgBrowserSetName& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserSetName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserSetName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserSetName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserSetName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserSetName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserSetName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserSetName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserSetName";
  }
  protected:
  explicit CMsgBrowserSetName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserSetName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserSize) */ {
 public:
  inline CMsgBrowserSize() : CMsgBrowserSize(nullptr) {}
  ~CMsgBrowserSize() override;
  explicit constexpr CMsgBrowserSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserSize(const CMsgBrowserSize& from);
  CMsgBrowserSize(CMsgBrowserSize&& from) noexcept
    : CMsgBrowserSize() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserSize& operator=(const CMsgBrowserSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserSize& operator=(CMsgBrowserSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserSize* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserSize*>(
               &_CMsgBrowserSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgBrowserSize& a, CMsgBrowserSize& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserSize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserSize";
  }
  protected:
  explicit CMsgBrowserSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional double width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double width_;
  double height_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserSetMinSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserSetMinSize) */ {
 public:
  inline CMsgBrowserSetMinSize() : CMsgBrowserSetMinSize(nullptr) {}
  ~CMsgBrowserSetMinSize() override;
  explicit constexpr CMsgBrowserSetMinSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserSetMinSize(const CMsgBrowserSetMinSize& from);
  CMsgBrowserSetMinSize(CMsgBrowserSetMinSize&& from) noexcept
    : CMsgBrowserSetMinSize() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserSetMinSize& operator=(const CMsgBrowserSetMinSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserSetMinSize& operator=(CMsgBrowserSetMinSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserSetMinSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserSetMinSize* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserSetMinSize*>(
               &_CMsgBrowserSetMinSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgBrowserSetMinSize& a, CMsgBrowserSetMinSize& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserSetMinSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserSetMinSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserSetMinSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserSetMinSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserSetMinSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserSetMinSize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserSetMinSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserSetMinSize";
  }
  protected:
  explicit CMsgBrowserSetMinSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional double width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserSetMinSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double width_;
  double height_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserPosition) */ {
 public:
  inline CMsgBrowserPosition() : CMsgBrowserPosition(nullptr) {}
  ~CMsgBrowserPosition() override;
  explicit constexpr CMsgBrowserPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserPosition(const CMsgBrowserPosition& from);
  CMsgBrowserPosition(CMsgBrowserPosition&& from) noexcept
    : CMsgBrowserPosition() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserPosition& operator=(const CMsgBrowserPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserPosition& operator=(CMsgBrowserPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserPosition*>(
               &_CMsgBrowserPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgBrowserPosition& a, CMsgBrowserPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserPosition";
  }
  protected:
  explicit CMsgBrowserPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kXLocalFieldNumber = 4,
    kYLocalFieldNumber = 5,
    kBrowserHandleFieldNumber = 1,
  };
  // optional double x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double x_local = 4;
  bool has_x_local() const;
  private:
  bool _internal_has_x_local() const;
  public:
  void clear_x_local();
  double x_local() const;
  void set_x_local(double value);
  private:
  double _internal_x_local() const;
  void _internal_set_x_local(double value);
  public:

  // optional double y_local = 5;
  bool has_y_local() const;
  private:
  bool _internal_has_y_local() const;
  public:
  void clear_y_local();
  double y_local() const;
  void set_y_local(double value);
  private:
  double _internal_y_local() const;
  void _internal_set_y_local(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double x_local_;
  double y_local_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserResized final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserResized) */ {
 public:
  inline CMsgBrowserResized() : CMsgBrowserResized(nullptr) {}
  ~CMsgBrowserResized() override;
  explicit constexpr CMsgBrowserResized(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserResized(const CMsgBrowserResized& from);
  CMsgBrowserResized(CMsgBrowserResized&& from) noexcept
    : CMsgBrowserResized() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserResized& operator=(const CMsgBrowserResized& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserResized& operator=(CMsgBrowserResized&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserResized& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserResized* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserResized*>(
               &_CMsgBrowserResized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgBrowserResized& a, CMsgBrowserResized& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserResized* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserResized* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserResized* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserResized>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserResized& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserResized& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserResized* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserResized";
  }
  protected:
  explicit CMsgBrowserResized(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 8,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kDpiHorizontalFieldNumber = 6,
    kDpiVerticalFieldNumber = 7,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string display_name = 8;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional double x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double dpi_horizontal = 6;
  bool has_dpi_horizontal() const;
  private:
  bool _internal_has_dpi_horizontal() const;
  public:
  void clear_dpi_horizontal();
  double dpi_horizontal() const;
  void set_dpi_horizontal(double value);
  private:
  double _internal_dpi_horizontal() const;
  void _internal_set_dpi_horizontal(double value);
  public:

  // optional double dpi_vertical = 7;
  bool has_dpi_vertical() const;
  private:
  bool _internal_has_dpi_vertical() const;
  public:
  void clear_dpi_vertical();
  double dpi_vertical() const;
  void set_dpi_vertical(double value);
  private:
  double _internal_dpi_vertical() const;
  void _internal_set_dpi_vertical(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserResized)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  double x_;
  double y_;
  double width_;
  double height_;
  double dpi_horizontal_;
  double dpi_vertical_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPostURL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPostURL) */ {
 public:
  inline CMsgPostURL() : CMsgPostURL(nullptr) {}
  ~CMsgPostURL() override;
  explicit constexpr CMsgPostURL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPostURL(const CMsgPostURL& from);
  CMsgPostURL(CMsgPostURL&& from) noexcept
    : CMsgPostURL() {
    *this = ::std::move(from);
  }

  inline CMsgPostURL& operator=(const CMsgPostURL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPostURL& operator=(CMsgPostURL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPostURL& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPostURL* internal_default_instance() {
    return reinterpret_cast<const CMsgPostURL*>(
               &_CMsgPostURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgPostURL& a, CMsgPostURL& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPostURL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPostURL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPostURL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPostURL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPostURL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPostURL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPostURL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPostURL";
  }
  protected:
  explicit CMsgPostURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kPostFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kPageserialFieldNumber = 4,
    kReplaceEntryFieldNumber = 5,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string post = 3;
  bool has_post() const;
  private:
  bool _internal_has_post() const;
  public:
  void clear_post();
  const std::string& post() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_post(ArgT0&& arg0, ArgT... args);
  std::string* mutable_post();
  PROTOBUF_NODISCARD std::string* release_post();
  void set_allocated_post(std::string* post);
  private:
  const std::string& _internal_post() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_post(const std::string& value);
  std::string* _internal_mutable_post();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 pageserial = 4;
  bool has_pageserial() const;
  private:
  bool _internal_has_pageserial() const;
  public:
  void clear_pageserial();
  uint32_t pageserial() const;
  void set_pageserial(uint32_t value);
  private:
  uint32_t _internal_pageserial() const;
  void _internal_set_pageserial(uint32_t value);
  public:

  // optional bool replace_entry = 5;
  bool has_replace_entry() const;
  private:
  bool _internal_has_replace_entry() const;
  public:
  void clear_replace_entry();
  bool replace_entry() const;
  void set_replace_entry(bool value);
  private:
  bool _internal_replace_entry() const;
  void _internal_set_replace_entry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPostURL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_;
  uint32_t browser_handle_;
  uint32_t pageserial_;
  bool replace_entry_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAddHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAddHeader) */ {
 public:
  inline CMsgAddHeader() : CMsgAddHeader(nullptr) {}
  ~CMsgAddHeader() override;
  explicit constexpr CMsgAddHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAddHeader(const CMsgAddHeader& from);
  CMsgAddHeader(CMsgAddHeader&& from) noexcept
    : CMsgAddHeader() {
    *this = ::std::move(from);
  }

  inline CMsgAddHeader& operator=(const CMsgAddHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAddHeader& operator=(CMsgAddHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAddHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAddHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgAddHeader*>(
               &_CMsgAddHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgAddHeader& a, CMsgAddHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAddHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAddHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAddHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAddHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAddHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAddHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAddHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAddHeader";
  }
  protected:
  explicit CMsgAddHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAddHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStopLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStopLoad) */ {
 public:
  inline CMsgStopLoad() : CMsgStopLoad(nullptr) {}
  ~CMsgStopLoad() override;
  explicit constexpr CMsgStopLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStopLoad(const CMsgStopLoad& from);
  CMsgStopLoad(CMsgStopLoad&& from) noexcept
    : CMsgStopLoad() {
    *this = ::std::move(from);
  }

  inline CMsgStopLoad& operator=(const CMsgStopLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStopLoad& operator=(CMsgStopLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStopLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStopLoad* internal_default_instance() {
    return reinterpret_cast<const CMsgStopLoad*>(
               &_CMsgStopLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgStopLoad& a, CMsgStopLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStopLoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStopLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStopLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStopLoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStopLoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStopLoad& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStopLoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStopLoad";
  }
  protected:
  explicit CMsgStopLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStopLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgReload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReload) */ {
 public:
  inline CMsgReload() : CMsgReload(nullptr) {}
  ~CMsgReload() override;
  explicit constexpr CMsgReload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReload(const CMsgReload& from);
  CMsgReload(CMsgReload&& from) noexcept
    : CMsgReload() {
    *this = ::std::move(from);
  }

  inline CMsgReload& operator=(const CMsgReload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReload& operator=(CMsgReload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgReload& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReload* internal_default_instance() {
    return reinterpret_cast<const CMsgReload*>(
               &_CMsgReload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgReload& a, CMsgReload& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgReload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgReload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgReload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgReload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReload";
  }
  protected:
  explicit CMsgReload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGoForward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGoForward) */ {
 public:
  inline CMsgGoForward() : CMsgGoForward(nullptr) {}
  ~CMsgGoForward() override;
  explicit constexpr CMsgGoForward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGoForward(const CMsgGoForward& from);
  CMsgGoForward(CMsgGoForward&& from) noexcept
    : CMsgGoForward() {
    *this = ::std::move(from);
  }

  inline CMsgGoForward& operator=(const CMsgGoForward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGoForward& operator=(CMsgGoForward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGoForward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGoForward* internal_default_instance() {
    return reinterpret_cast<const CMsgGoForward*>(
               &_CMsgGoForward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgGoForward& a, CMsgGoForward& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGoForward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGoForward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGoForward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGoForward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGoForward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGoForward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGoForward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGoForward";
  }
  protected:
  explicit CMsgGoForward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGoForward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGoBack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGoBack) */ {
 public:
  inline CMsgGoBack() : CMsgGoBack(nullptr) {}
  ~CMsgGoBack() override;
  explicit constexpr CMsgGoBack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGoBack(const CMsgGoBack& from);
  CMsgGoBack(CMsgGoBack&& from) noexcept
    : CMsgGoBack() {
    *this = ::std::move(from);
  }

  inline CMsgGoBack& operator=(const CMsgGoBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGoBack& operator=(CMsgGoBack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGoBack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGoBack* internal_default_instance() {
    return reinterpret_cast<const CMsgGoBack*>(
               &_CMsgGoBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgGoBack& a, CMsgGoBack& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGoBack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGoBack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGoBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGoBack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGoBack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGoBack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGoBack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGoBack";
  }
  protected:
  explicit CMsgGoBack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGoBack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgWasHidden final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWasHidden) */ {
 public:
  inline CMsgWasHidden() : CMsgWasHidden(nullptr) {}
  ~CMsgWasHidden() override;
  explicit constexpr CMsgWasHidden(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWasHidden(const CMsgWasHidden& from);
  CMsgWasHidden(CMsgWasHidden&& from) noexcept
    : CMsgWasHidden() {
    *this = ::std::move(from);
  }

  inline CMsgWasHidden& operator=(const CMsgWasHidden& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWasHidden& operator=(CMsgWasHidden&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWasHidden& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWasHidden* internal_default_instance() {
    return reinterpret_cast<const CMsgWasHidden*>(
               &_CMsgWasHidden_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgWasHidden& a, CMsgWasHidden& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWasHidden* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWasHidden* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWasHidden* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWasHidden>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWasHidden& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgWasHidden& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWasHidden* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWasHidden";
  }
  protected:
  explicit CMsgWasHidden(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kHiddenFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool hidden = 2;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWasHidden)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool hidden_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetWindowVisibility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetWindowVisibility) */ {
 public:
  inline CMsgSetWindowVisibility() : CMsgSetWindowVisibility(nullptr) {}
  ~CMsgSetWindowVisibility() override;
  explicit constexpr CMsgSetWindowVisibility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetWindowVisibility(const CMsgSetWindowVisibility& from);
  CMsgSetWindowVisibility(CMsgSetWindowVisibility&& from) noexcept
    : CMsgSetWindowVisibility() {
    *this = ::std::move(from);
  }

  inline CMsgSetWindowVisibility& operator=(const CMsgSetWindowVisibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetWindowVisibility& operator=(CMsgSetWindowVisibility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetWindowVisibility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetWindowVisibility* internal_default_instance() {
    return reinterpret_cast<const CMsgSetWindowVisibility*>(
               &_CMsgSetWindowVisibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgSetWindowVisibility& a, CMsgSetWindowVisibility& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetWindowVisibility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetWindowVisibility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetWindowVisibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetWindowVisibility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetWindowVisibility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetWindowVisibility& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetWindowVisibility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetWindowVisibility";
  }
  protected:
  explicit CMsgSetWindowVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kVisibleFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool visible = 2;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetWindowVisibility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool visible_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgClearHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClearHistory) */ {
 public:
  inline CMsgClearHistory() : CMsgClearHistory(nullptr) {}
  ~CMsgClearHistory() override;
  explicit constexpr CMsgClearHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClearHistory(const CMsgClearHistory& from);
  CMsgClearHistory(CMsgClearHistory&& from) noexcept
    : CMsgClearHistory() {
    *this = ::std::move(from);
  }

  inline CMsgClearHistory& operator=(const CMsgClearHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClearHistory& operator=(CMsgClearHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClearHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClearHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgClearHistory*>(
               &_CMsgClearHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgClearHistory& a, CMsgClearHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClearHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClearHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClearHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClearHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClearHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClearHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClearHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClearHistory";
  }
  protected:
  explicit CMsgClearHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClearHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgClearAllBrowsingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClearAllBrowsingData) */ {
 public:
  inline CMsgClearAllBrowsingData() : CMsgClearAllBrowsingData(nullptr) {}
  ~CMsgClearAllBrowsingData() override;
  explicit constexpr CMsgClearAllBrowsingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClearAllBrowsingData(const CMsgClearAllBrowsingData& from);
  CMsgClearAllBrowsingData(CMsgClearAllBrowsingData&& from) noexcept
    : CMsgClearAllBrowsingData() {
    *this = ::std::move(from);
  }

  inline CMsgClearAllBrowsingData& operator=(const CMsgClearAllBrowsingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClearAllBrowsingData& operator=(CMsgClearAllBrowsingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClearAllBrowsingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClearAllBrowsingData* internal_default_instance() {
    return reinterpret_cast<const CMsgClearAllBrowsingData*>(
               &_CMsgClearAllBrowsingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgClearAllBrowsingData& a, CMsgClearAllBrowsingData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClearAllBrowsingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClearAllBrowsingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClearAllBrowsingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClearAllBrowsingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClearAllBrowsingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClearAllBrowsingData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClearAllBrowsingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClearAllBrowsingData";
  }
  protected:
  explicit CMsgClearAllBrowsingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClearAllBrowsingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgCopy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCopy) */ {
 public:
  inline CMsgCopy() : CMsgCopy(nullptr) {}
  ~CMsgCopy() override;
  explicit constexpr CMsgCopy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCopy(const CMsgCopy& from);
  CMsgCopy(CMsgCopy&& from) noexcept
    : CMsgCopy() {
    *this = ::std::move(from);
  }

  inline CMsgCopy& operator=(const CMsgCopy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCopy& operator=(CMsgCopy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCopy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCopy* internal_default_instance() {
    return reinterpret_cast<const CMsgCopy*>(
               &_CMsgCopy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgCopy& a, CMsgCopy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCopy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCopy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCopy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCopy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCopy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCopy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCopy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCopy";
  }
  protected:
  explicit CMsgCopy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCopy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPaste final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPaste) */ {
 public:
  inline CMsgPaste() : CMsgPaste(nullptr) {}
  ~CMsgPaste() override;
  explicit constexpr CMsgPaste(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPaste(const CMsgPaste& from);
  CMsgPaste(CMsgPaste&& from) noexcept
    : CMsgPaste() {
    *this = ::std::move(from);
  }

  inline CMsgPaste& operator=(const CMsgPaste& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPaste& operator=(CMsgPaste&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPaste& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPaste* internal_default_instance() {
    return reinterpret_cast<const CMsgPaste*>(
               &_CMsgPaste_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgPaste& a, CMsgPaste& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPaste* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPaste* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPaste* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPaste>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPaste& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPaste& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPaste* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPaste";
  }
  protected:
  explicit CMsgPaste(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPaste)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgExecuteJavaScript final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgExecuteJavaScript) */ {
 public:
  inline CMsgExecuteJavaScript() : CMsgExecuteJavaScript(nullptr) {}
  ~CMsgExecuteJavaScript() override;
  explicit constexpr CMsgExecuteJavaScript(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from);
  CMsgExecuteJavaScript(CMsgExecuteJavaScript&& from) noexcept
    : CMsgExecuteJavaScript() {
    *this = ::std::move(from);
  }

  inline CMsgExecuteJavaScript& operator=(const CMsgExecuteJavaScript& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgExecuteJavaScript& operator=(CMsgExecuteJavaScript&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgExecuteJavaScript& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgExecuteJavaScript* internal_default_instance() {
    return reinterpret_cast<const CMsgExecuteJavaScript*>(
               &_CMsgExecuteJavaScript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgExecuteJavaScript& a, CMsgExecuteJavaScript& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgExecuteJavaScript* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgExecuteJavaScript* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgExecuteJavaScript* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgExecuteJavaScript>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgExecuteJavaScript& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgExecuteJavaScript& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgExecuteJavaScript* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgExecuteJavaScript";
  }
  protected:
  explicit CMsgExecuteJavaScript(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string script = 2;
  bool has_script() const;
  private:
  bool _internal_has_script() const;
  public:
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgExecuteJavaScript)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetFocus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetFocus) */ {
 public:
  inline CMsgSetFocus() : CMsgSetFocus(nullptr) {}
  ~CMsgSetFocus() override;
  explicit constexpr CMsgSetFocus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetFocus(const CMsgSetFocus& from);
  CMsgSetFocus(CMsgSetFocus&& from) noexcept
    : CMsgSetFocus() {
    *this = ::std::move(from);
  }

  inline CMsgSetFocus& operator=(const CMsgSetFocus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetFocus& operator=(CMsgSetFocus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetFocus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetFocus* internal_default_instance() {
    return reinterpret_cast<const CMsgSetFocus*>(
               &_CMsgSetFocus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgSetFocus& a, CMsgSetFocus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetFocus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetFocus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetFocus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetFocus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetFocus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetFocus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetFocus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetFocus";
  }
  protected:
  explicit CMsgSetFocus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kFocusFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool focus = 2;
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  bool focus() const;
  void set_focus(bool value);
  private:
  bool _internal_focus() const;
  void _internal_set_focus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetFocus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool focus_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHorizontalScrollBarSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHorizontalScrollBarSize) */ {
 public:
  inline CMsgHorizontalScrollBarSize() : CMsgHorizontalScrollBarSize(nullptr) {}
  ~CMsgHorizontalScrollBarSize() override;
  explicit constexpr CMsgHorizontalScrollBarSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from);
  CMsgHorizontalScrollBarSize(CMsgHorizontalScrollBarSize&& from) noexcept
    : CMsgHorizontalScrollBarSize() {
    *this = ::std::move(from);
  }

  inline CMsgHorizontalScrollBarSize& operator=(const CMsgHorizontalScrollBarSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHorizontalScrollBarSize& operator=(CMsgHorizontalScrollBarSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHorizontalScrollBarSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHorizontalScrollBarSize* internal_default_instance() {
    return reinterpret_cast<const CMsgHorizontalScrollBarSize*>(
               &_CMsgHorizontalScrollBarSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgHorizontalScrollBarSize& a, CMsgHorizontalScrollBarSize& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHorizontalScrollBarSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHorizontalScrollBarSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHorizontalScrollBarSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHorizontalScrollBarSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHorizontalScrollBarSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHorizontalScrollBarSize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHorizontalScrollBarSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHorizontalScrollBarSize";
  }
  protected:
  explicit CMsgHorizontalScrollBarSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHorizontalScrollBarSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHorizontalScrollBarSizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHorizontalScrollBarSizeResponse) */ {
 public:
  inline CMsgHorizontalScrollBarSizeResponse() : CMsgHorizontalScrollBarSizeResponse(nullptr) {}
  ~CMsgHorizontalScrollBarSizeResponse() override;
  explicit constexpr CMsgHorizontalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from);
  CMsgHorizontalScrollBarSizeResponse(CMsgHorizontalScrollBarSizeResponse&& from) noexcept
    : CMsgHorizontalScrollBarSizeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgHorizontalScrollBarSizeResponse& operator=(const CMsgHorizontalScrollBarSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHorizontalScrollBarSizeResponse& operator=(CMsgHorizontalScrollBarSizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHorizontalScrollBarSizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHorizontalScrollBarSizeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgHorizontalScrollBarSizeResponse*>(
               &_CMsgHorizontalScrollBarSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgHorizontalScrollBarSizeResponse& a, CMsgHorizontalScrollBarSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHorizontalScrollBarSizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHorizontalScrollBarSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHorizontalScrollBarSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHorizontalScrollBarSizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHorizontalScrollBarSizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHorizontalScrollBarSizeResponse";
  }
  protected:
  explicit CMsgHorizontalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScrollMaxFieldNumber = 6,
    kScrollFieldNumber = 7,
    kZoomFieldNumber = 8,
    kVisibleFieldNumber = 9,
    kPageSizeFieldNumber = 10,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 scroll_max = 6;
  bool has_scroll_max() const;
  private:
  bool _internal_has_scroll_max() const;
  public:
  void clear_scroll_max();
  uint32_t scroll_max() const;
  void set_scroll_max(uint32_t value);
  private:
  uint32_t _internal_scroll_max() const;
  void _internal_set_scroll_max(uint32_t value);
  public:

  // optional uint32 scroll = 7;
  bool has_scroll() const;
  private:
  bool _internal_has_scroll() const;
  public:
  void clear_scroll();
  uint32_t scroll() const;
  void set_scroll(uint32_t value);
  private:
  uint32_t _internal_scroll() const;
  void _internal_set_scroll(uint32_t value);
  public:

  // optional float zoom = 8;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // optional bool visible = 9;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional uint32 page_size = 10;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  uint32_t page_size() const;
  void set_page_size(uint32_t value);
  private:
  uint32_t _internal_page_size() const;
  void _internal_set_page_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHorizontalScrollBarSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t scroll_max_;
  uint32_t scroll_;
  float zoom_;
  bool visible_;
  uint32_t page_size_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgVerticalScrollBarSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVerticalScrollBarSize) */ {
 public:
  inline CMsgVerticalScrollBarSize() : CMsgVerticalScrollBarSize(nullptr) {}
  ~CMsgVerticalScrollBarSize() override;
  explicit constexpr CMsgVerticalScrollBarSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from);
  CMsgVerticalScrollBarSize(CMsgVerticalScrollBarSize&& from) noexcept
    : CMsgVerticalScrollBarSize() {
    *this = ::std::move(from);
  }

  inline CMsgVerticalScrollBarSize& operator=(const CMsgVerticalScrollBarSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVerticalScrollBarSize& operator=(CMsgVerticalScrollBarSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVerticalScrollBarSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVerticalScrollBarSize* internal_default_instance() {
    return reinterpret_cast<const CMsgVerticalScrollBarSize*>(
               &_CMsgVerticalScrollBarSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgVerticalScrollBarSize& a, CMsgVerticalScrollBarSize& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVerticalScrollBarSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVerticalScrollBarSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgVerticalScrollBarSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgVerticalScrollBarSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgVerticalScrollBarSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgVerticalScrollBarSize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVerticalScrollBarSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVerticalScrollBarSize";
  }
  protected:
  explicit CMsgVerticalScrollBarSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVerticalScrollBarSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgVerticalScrollBarSizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVerticalScrollBarSizeResponse) */ {
 public:
  inline CMsgVerticalScrollBarSizeResponse() : CMsgVerticalScrollBarSizeResponse(nullptr) {}
  ~CMsgVerticalScrollBarSizeResponse() override;
  explicit constexpr CMsgVerticalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from);
  CMsgVerticalScrollBarSizeResponse(CMsgVerticalScrollBarSizeResponse&& from) noexcept
    : CMsgVerticalScrollBarSizeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgVerticalScrollBarSizeResponse& operator=(const CMsgVerticalScrollBarSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVerticalScrollBarSizeResponse& operator=(CMsgVerticalScrollBarSizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVerticalScrollBarSizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVerticalScrollBarSizeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgVerticalScrollBarSizeResponse*>(
               &_CMsgVerticalScrollBarSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgVerticalScrollBarSizeResponse& a, CMsgVerticalScrollBarSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVerticalScrollBarSizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVerticalScrollBarSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgVerticalScrollBarSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgVerticalScrollBarSizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgVerticalScrollBarSizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgVerticalScrollBarSizeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVerticalScrollBarSizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVerticalScrollBarSizeResponse";
  }
  protected:
  explicit CMsgVerticalScrollBarSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScrollMaxFieldNumber = 6,
    kScrollFieldNumber = 7,
    kZoomFieldNumber = 8,
    kVisibleFieldNumber = 9,
    kPageSizeFieldNumber = 10,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 scroll_max = 6;
  bool has_scroll_max() const;
  private:
  bool _internal_has_scroll_max() const;
  public:
  void clear_scroll_max();
  uint32_t scroll_max() const;
  void set_scroll_max(uint32_t value);
  private:
  uint32_t _internal_scroll_max() const;
  void _internal_set_scroll_max(uint32_t value);
  public:

  // optional uint32 scroll = 7;
  bool has_scroll() const;
  private:
  bool _internal_has_scroll() const;
  public:
  void clear_scroll();
  uint32_t scroll() const;
  void set_scroll(uint32_t value);
  private:
  uint32_t _internal_scroll() const;
  void _internal_set_scroll(uint32_t value);
  public:

  // optional float zoom = 8;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // optional bool visible = 9;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional uint32 page_size = 10;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  uint32_t page_size() const;
  void set_page_size(uint32_t value);
  private:
  uint32_t _internal_page_size() const;
  void _internal_set_page_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVerticalScrollBarSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t scroll_max_;
  uint32_t scroll_;
  float zoom_;
  bool visible_;
  uint32_t page_size_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFind final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFind) */ {
 public:
  inline CMsgFind() : CMsgFind(nullptr) {}
  ~CMsgFind() override;
  explicit constexpr CMsgFind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFind(const CMsgFind& from);
  CMsgFind(CMsgFind&& from) noexcept
    : CMsgFind() {
    *this = ::std::move(from);
  }

  inline CMsgFind& operator=(const CMsgFind& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFind& operator=(CMsgFind&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFind& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFind* internal_default_instance() {
    return reinterpret_cast<const CMsgFind*>(
               &_CMsgFind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgFind& a, CMsgFind& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFind* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFind>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFind& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFind& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFind* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFind";
  }
  protected:
  explicit CMsgFind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFindFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
    kInfindFieldNumber = 3,
    kReverseFieldNumber = 4,
  };
  // optional string find = 2;
  bool has_find() const;
  private:
  bool _internal_has_find() const;
  public:
  void clear_find();
  const std::string& find() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_find(ArgT0&& arg0, ArgT... args);
  std::string* mutable_find();
  PROTOBUF_NODISCARD std::string* release_find();
  void set_allocated_find(std::string* find);
  private:
  const std::string& _internal_find() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_find(const std::string& value);
  std::string* _internal_mutable_find();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool infind = 3;
  bool has_infind() const;
  private:
  bool _internal_has_infind() const;
  public:
  void clear_infind();
  bool infind() const;
  void set_infind(bool value);
  private:
  bool _internal_infind() const;
  void _internal_set_infind(bool value);
  public:

  // optional bool reverse = 4 [default = false];
  bool has_reverse() const;
  private:
  bool _internal_has_reverse() const;
  public:
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr find_;
  uint32_t browser_handle_;
  bool infind_;
  bool reverse_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStopFind final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStopFind) */ {
 public:
  inline CMsgStopFind() : CMsgStopFind(nullptr) {}
  ~CMsgStopFind() override;
  explicit constexpr CMsgStopFind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStopFind(const CMsgStopFind& from);
  CMsgStopFind(CMsgStopFind&& from) noexcept
    : CMsgStopFind() {
    *this = ::std::move(from);
  }

  inline CMsgStopFind& operator=(const CMsgStopFind& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStopFind& operator=(CMsgStopFind&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStopFind& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStopFind* internal_default_instance() {
    return reinterpret_cast<const CMsgStopFind*>(
               &_CMsgStopFind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgStopFind& a, CMsgStopFind& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStopFind* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStopFind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStopFind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStopFind>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStopFind& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStopFind& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStopFind* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStopFind";
  }
  protected:
  explicit CMsgStopFind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStopFind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetHorizontalScroll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetHorizontalScroll) */ {
 public:
  inline CMsgSetHorizontalScroll() : CMsgSetHorizontalScroll(nullptr) {}
  ~CMsgSetHorizontalScroll() override;
  explicit constexpr CMsgSetHorizontalScroll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from);
  CMsgSetHorizontalScroll(CMsgSetHorizontalScroll&& from) noexcept
    : CMsgSetHorizontalScroll() {
    *this = ::std::move(from);
  }

  inline CMsgSetHorizontalScroll& operator=(const CMsgSetHorizontalScroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetHorizontalScroll& operator=(CMsgSetHorizontalScroll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetHorizontalScroll& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetHorizontalScroll* internal_default_instance() {
    return reinterpret_cast<const CMsgSetHorizontalScroll*>(
               &_CMsgSetHorizontalScroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgSetHorizontalScroll& a, CMsgSetHorizontalScroll& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetHorizontalScroll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetHorizontalScroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetHorizontalScroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetHorizontalScroll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetHorizontalScroll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetHorizontalScroll& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetHorizontalScroll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetHorizontalScroll";
  }
  protected:
  explicit CMsgSetHorizontalScroll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScrollFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 scroll = 2;
  bool has_scroll() const;
  private:
  bool _internal_has_scroll() const;
  public:
  void clear_scroll();
  uint32_t scroll() const;
  void set_scroll(uint32_t value);
  private:
  uint32_t _internal_scroll() const;
  void _internal_set_scroll(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetHorizontalScroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t scroll_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetVerticalScroll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetVerticalScroll) */ {
 public:
  inline CMsgSetVerticalScroll() : CMsgSetVerticalScroll(nullptr) {}
  ~CMsgSetVerticalScroll() override;
  explicit constexpr CMsgSetVerticalScroll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from);
  CMsgSetVerticalScroll(CMsgSetVerticalScroll&& from) noexcept
    : CMsgSetVerticalScroll() {
    *this = ::std::move(from);
  }

  inline CMsgSetVerticalScroll& operator=(const CMsgSetVerticalScroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetVerticalScroll& operator=(CMsgSetVerticalScroll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetVerticalScroll& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetVerticalScroll* internal_default_instance() {
    return reinterpret_cast<const CMsgSetVerticalScroll*>(
               &_CMsgSetVerticalScroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgSetVerticalScroll& a, CMsgSetVerticalScroll& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetVerticalScroll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetVerticalScroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetVerticalScroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetVerticalScroll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetVerticalScroll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetVerticalScroll& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetVerticalScroll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetVerticalScroll";
  }
  protected:
  explicit CMsgSetVerticalScroll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScrollFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 scroll = 2;
  bool has_scroll() const;
  private:
  bool _internal_has_scroll() const;
  public:
  void clear_scroll();
  uint32_t scroll() const;
  void set_scroll(uint32_t value);
  private:
  uint32_t _internal_scroll() const;
  void _internal_set_scroll(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetVerticalScroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t scroll_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetZoomLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetZoomLevel) */ {
 public:
  inline CMsgSetZoomLevel() : CMsgSetZoomLevel(nullptr) {}
  ~CMsgSetZoomLevel() override;
  explicit constexpr CMsgSetZoomLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetZoomLevel(const CMsgSetZoomLevel& from);
  CMsgSetZoomLevel(CMsgSetZoomLevel&& from) noexcept
    : CMsgSetZoomLevel() {
    *this = ::std::move(from);
  }

  inline CMsgSetZoomLevel& operator=(const CMsgSetZoomLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetZoomLevel& operator=(CMsgSetZoomLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetZoomLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetZoomLevel* internal_default_instance() {
    return reinterpret_cast<const CMsgSetZoomLevel*>(
               &_CMsgSetZoomLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgSetZoomLevel& a, CMsgSetZoomLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetZoomLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetZoomLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetZoomLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetZoomLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetZoomLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetZoomLevel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetZoomLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetZoomLevel";
  }
  protected:
  explicit CMsgSetZoomLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoomFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional double zoom = 2;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  double zoom() const;
  void set_zoom(double value);
  private:
  double _internal_zoom() const;
  void _internal_set_zoom(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetZoomLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double zoom_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgViewSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgViewSource) */ {
 public:
  inline CMsgViewSource() : CMsgViewSource(nullptr) {}
  ~CMsgViewSource() override;
  explicit constexpr CMsgViewSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgViewSource(const CMsgViewSource& from);
  CMsgViewSource(CMsgViewSource&& from) noexcept
    : CMsgViewSource() {
    *this = ::std::move(from);
  }

  inline CMsgViewSource& operator=(const CMsgViewSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgViewSource& operator=(CMsgViewSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgViewSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgViewSource* internal_default_instance() {
    return reinterpret_cast<const CMsgViewSource*>(
               &_CMsgViewSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgViewSource& a, CMsgViewSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgViewSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgViewSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgViewSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgViewSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgViewSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgViewSource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgViewSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgViewSource";
  }
  protected:
  explicit CMsgViewSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgViewSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserReady final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserReady) */ {
 public:
  inline CMsgBrowserReady() : CMsgBrowserReady(nullptr) {}
  ~CMsgBrowserReady() override;
  explicit constexpr CMsgBrowserReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserReady(const CMsgBrowserReady& from);
  CMsgBrowserReady(CMsgBrowserReady&& from) noexcept
    : CMsgBrowserReady() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserReady& operator=(const CMsgBrowserReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserReady& operator=(CMsgBrowserReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserReady& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserReady* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserReady*>(
               &_CMsgBrowserReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgBrowserReady& a, CMsgBrowserReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserReady* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserReady>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserReady& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserReady& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserReady* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserReady";
  }
  protected:
  explicit CMsgBrowserReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrOverlayKeyFieldNumber = 2,
    kHwndBrowserFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string vr_overlay_key = 2;
  bool has_vr_overlay_key() const;
  private:
  bool _internal_has_vr_overlay_key() const;
  public:
  void clear_vr_overlay_key();
  const std::string& vr_overlay_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vr_overlay_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vr_overlay_key();
  PROTOBUF_NODISCARD std::string* release_vr_overlay_key();
  void set_allocated_vr_overlay_key(std::string* vr_overlay_key);
  private:
  const std::string& _internal_vr_overlay_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vr_overlay_key(const std::string& value);
  std::string* _internal_mutable_vr_overlay_key();
  public:

  // optional fixed64 hwnd_browser = 3;
  bool has_hwnd_browser() const;
  private:
  bool _internal_has_hwnd_browser() const;
  public:
  void clear_hwnd_browser();
  uint64_t hwnd_browser() const;
  void set_hwnd_browser(uint64_t value);
  private:
  uint64_t _internal_hwnd_browser() const;
  void _internal_set_hwnd_browser(uint64_t value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vr_overlay_key_;
  uint64_t hwnd_browser_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgURLChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgURLChanged) */ {
 public:
  inline CMsgURLChanged() : CMsgURLChanged(nullptr) {}
  ~CMsgURLChanged() override;
  explicit constexpr CMsgURLChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgURLChanged(const CMsgURLChanged& from);
  CMsgURLChanged(CMsgURLChanged&& from) noexcept
    : CMsgURLChanged() {
    *this = ::std::move(from);
  }

  inline CMsgURLChanged& operator=(const CMsgURLChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgURLChanged& operator=(CMsgURLChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgURLChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgURLChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgURLChanged*>(
               &_CMsgURLChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgURLChanged& a, CMsgURLChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgURLChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgURLChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgURLChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgURLChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgURLChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgURLChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgURLChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgURLChanged";
  }
  protected:
  explicit CMsgURLChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kPostDataFieldNumber = 3,
    kPagetitleFieldNumber = 5,
    kBrowserHandleFieldNumber = 1,
    kBIsRedirectFieldNumber = 4,
    kBNewNavigationFieldNumber = 6,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string postData = 3;
  bool has_postdata() const;
  private:
  bool _internal_has_postdata() const;
  public:
  void clear_postdata();
  const std::string& postdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postdata();
  PROTOBUF_NODISCARD std::string* release_postdata();
  void set_allocated_postdata(std::string* postdata);
  private:
  const std::string& _internal_postdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postdata(const std::string& value);
  std::string* _internal_mutable_postdata();
  public:

  // optional string pagetitle = 5;
  bool has_pagetitle() const;
  private:
  bool _internal_has_pagetitle() const;
  public:
  void clear_pagetitle();
  const std::string& pagetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pagetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pagetitle();
  PROTOBUF_NODISCARD std::string* release_pagetitle();
  void set_allocated_pagetitle(std::string* pagetitle);
  private:
  const std::string& _internal_pagetitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pagetitle(const std::string& value);
  std::string* _internal_mutable_pagetitle();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bIsRedirect = 4;
  bool has_bisredirect() const;
  private:
  bool _internal_has_bisredirect() const;
  public:
  void clear_bisredirect();
  bool bisredirect() const;
  void set_bisredirect(bool value);
  private:
  bool _internal_bisredirect() const;
  void _internal_set_bisredirect(bool value);
  public:

  // optional bool bNewNavigation = 6;
  bool has_bnewnavigation() const;
  private:
  bool _internal_has_bnewnavigation() const;
  public:
  void clear_bnewnavigation();
  bool bnewnavigation() const;
  void set_bnewnavigation(bool value);
  private:
  bool _internal_bnewnavigation() const;
  void _internal_set_bnewnavigation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgURLChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pagetitle_;
  uint32_t browser_handle_;
  bool bisredirect_;
  bool bnewnavigation_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CHistoryEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHistoryEntry) */ {
 public:
  inline CHistoryEntry() : CHistoryEntry(nullptr) {}
  ~CHistoryEntry() override;
  explicit constexpr CHistoryEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHistoryEntry(const CHistoryEntry& from);
  CHistoryEntry(CHistoryEntry&& from) noexcept
    : CHistoryEntry() {
    *this = ::std::move(from);
  }

  inline CHistoryEntry& operator=(const CHistoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHistoryEntry& operator=(CHistoryEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHistoryEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHistoryEntry* internal_default_instance() {
    return reinterpret_cast<const CHistoryEntry*>(
               &_CHistoryEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CHistoryEntry& a, CHistoryEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CHistoryEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHistoryEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHistoryEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHistoryEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHistoryEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHistoryEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHistoryEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHistoryEntry";
  }
  protected:
  explicit CHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:CHistoryEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHistoryChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHistoryChanged) */ {
 public:
  inline CMsgHistoryChanged() : CMsgHistoryChanged(nullptr) {}
  ~CMsgHistoryChanged() override;
  explicit constexpr CMsgHistoryChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHistoryChanged(const CMsgHistoryChanged& from);
  CMsgHistoryChanged(CMsgHistoryChanged&& from) noexcept
    : CMsgHistoryChanged() {
    *this = ::std::move(from);
  }

  inline CMsgHistoryChanged& operator=(const CMsgHistoryChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHistoryChanged& operator=(CMsgHistoryChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHistoryChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHistoryChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgHistoryChanged*>(
               &_CMsgHistoryChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgHistoryChanged& a, CMsgHistoryChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHistoryChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHistoryChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHistoryChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHistoryChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHistoryChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHistoryChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHistoryChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHistoryChanged";
  }
  protected:
  explicit CMsgHistoryChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated .CHistoryEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CHistoryEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHistoryEntry >*
      mutable_entries();
  private:
  const ::CHistoryEntry& _internal_entries(int index) const;
  ::CHistoryEntry* _internal_add_entries();
  public:
  const ::CHistoryEntry& entries(int index) const;
  ::CHistoryEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHistoryEntry >&
      entries() const;

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHistoryChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHistoryEntry > entries_;
  uint32_t browser_handle_;
  uint32_t index_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLoadError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLoadError) */ {
 public:
  inline CMsgLoadError() : CMsgLoadError(nullptr) {}
  ~CMsgLoadError() override;
  explicit constexpr CMsgLoadError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLoadError(const CMsgLoadError& from);
  CMsgLoadError(CMsgLoadError&& from) noexcept
    : CMsgLoadError() {
    *this = ::std::move(from);
  }

  inline CMsgLoadError& operator=(const CMsgLoadError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLoadError& operator=(CMsgLoadError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLoadError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLoadError* internal_default_instance() {
    return reinterpret_cast<const CMsgLoadError*>(
               &_CMsgLoadError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgLoadError& a, CMsgLoadError& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLoadError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLoadError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLoadError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLoadError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLoadError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLoadError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLoadError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLoadError";
  }
  protected:
  explicit CMsgLoadError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 3,
    kErrorDescriptionFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string error_description = 4;
  bool has_error_description() const;
  private:
  bool _internal_has_error_description() const;
  public:
  void clear_error_description();
  const std::string& error_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_description();
  PROTOBUF_NODISCARD std::string* release_error_description();
  void set_allocated_error_description(std::string* error_description);
  private:
  const std::string& _internal_error_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_description(const std::string& value);
  std::string* _internal_mutable_error_description();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 error_code = 2;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLoadError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_description_;
  uint32_t browser_handle_;
  int32_t error_code_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CHTMLHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHTMLHeader) */ {
 public:
  inline CHTMLHeader() : CHTMLHeader(nullptr) {}
  ~CHTMLHeader() override;
  explicit constexpr CHTMLHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHTMLHeader(const CHTMLHeader& from);
  CHTMLHeader(CHTMLHeader&& from) noexcept
    : CHTMLHeader() {
    *this = ::std::move(from);
  }

  inline CHTMLHeader& operator=(const CHTMLHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHTMLHeader& operator=(CHTMLHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHTMLHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHTMLHeader* internal_default_instance() {
    return reinterpret_cast<const CHTMLHeader*>(
               &_CHTMLHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CHTMLHeader& a, CHTMLHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CHTMLHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHTMLHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHTMLHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHTMLHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHTMLHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHTMLHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHTMLHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHTMLHeader";
  }
  protected:
  explicit CHTMLHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CHTMLHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CHTMLPageSecurityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHTMLPageSecurityInfo) */ {
 public:
  inline CHTMLPageSecurityInfo() : CHTMLPageSecurityInfo(nullptr) {}
  ~CHTMLPageSecurityInfo() override;
  explicit constexpr CHTMLPageSecurityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from);
  CHTMLPageSecurityInfo(CHTMLPageSecurityInfo&& from) noexcept
    : CHTMLPageSecurityInfo() {
    *this = ::std::move(from);
  }

  inline CHTMLPageSecurityInfo& operator=(const CHTMLPageSecurityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHTMLPageSecurityInfo& operator=(CHTMLPageSecurityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHTMLPageSecurityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHTMLPageSecurityInfo* internal_default_instance() {
    return reinterpret_cast<const CHTMLPageSecurityInfo*>(
               &_CHTMLPageSecurityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CHTMLPageSecurityInfo& a, CHTMLPageSecurityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CHTMLPageSecurityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHTMLPageSecurityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHTMLPageSecurityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHTMLPageSecurityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHTMLPageSecurityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHTMLPageSecurityInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHTMLPageSecurityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHTMLPageSecurityInfo";
  }
  protected:
  explicit CHTMLPageSecurityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerNameFieldNumber = 3,
    kCertNameFieldNumber = 4,
    kBIsSecureFieldNumber = 1,
    kBHasCertErrorFieldNumber = 2,
    kBIsEVCertFieldNumber = 7,
    kCertExpiryFieldNumber = 5,
    kNCertBitsFieldNumber = 6,
  };
  // optional string issuerName = 3;
  bool has_issuername() const;
  private:
  bool _internal_has_issuername() const;
  public:
  void clear_issuername();
  const std::string& issuername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuername();
  PROTOBUF_NODISCARD std::string* release_issuername();
  void set_allocated_issuername(std::string* issuername);
  private:
  const std::string& _internal_issuername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuername(const std::string& value);
  std::string* _internal_mutable_issuername();
  public:

  // optional string certName = 4;
  bool has_certname() const;
  private:
  bool _internal_has_certname() const;
  public:
  void clear_certname();
  const std::string& certname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_certname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_certname();
  PROTOBUF_NODISCARD std::string* release_certname();
  void set_allocated_certname(std::string* certname);
  private:
  const std::string& _internal_certname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_certname(const std::string& value);
  std::string* _internal_mutable_certname();
  public:

  // optional bool bIsSecure = 1 [default = false];
  bool has_bissecure() const;
  private:
  bool _internal_has_bissecure() const;
  public:
  void clear_bissecure();
  bool bissecure() const;
  void set_bissecure(bool value);
  private:
  bool _internal_bissecure() const;
  void _internal_set_bissecure(bool value);
  public:

  // optional bool bHasCertError = 2 [default = false];
  bool has_bhascerterror() const;
  private:
  bool _internal_has_bhascerterror() const;
  public:
  void clear_bhascerterror();
  bool bhascerterror() const;
  void set_bhascerterror(bool value);
  private:
  bool _internal_bhascerterror() const;
  void _internal_set_bhascerterror(bool value);
  public:

  // optional bool bIsEVCert = 7 [default = false];
  bool has_bisevcert() const;
  private:
  bool _internal_has_bisevcert() const;
  public:
  void clear_bisevcert();
  bool bisevcert() const;
  void set_bisevcert(bool value);
  private:
  bool _internal_bisevcert() const;
  void _internal_set_bisevcert(bool value);
  public:

  // optional int32 certExpiry = 5 [default = 0];
  bool has_certexpiry() const;
  private:
  bool _internal_has_certexpiry() const;
  public:
  void clear_certexpiry();
  int32_t certexpiry() const;
  void set_certexpiry(int32_t value);
  private:
  int32_t _internal_certexpiry() const;
  void _internal_set_certexpiry(int32_t value);
  public:

  // optional int32 nCertBits = 6 [default = 0];
  bool has_ncertbits() const;
  private:
  bool _internal_has_ncertbits() const;
  public:
  void clear_ncertbits();
  int32_t ncertbits() const;
  void set_ncertbits(int32_t value);
  private:
  int32_t _internal_ncertbits() const;
  void _internal_set_ncertbits(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHTMLPageSecurityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certname_;
  bool bissecure_;
  bool bhascerterror_;
  bool bisevcert_;
  int32_t certexpiry_;
  int32_t ncertbits_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFinishedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFinishedRequest) */ {
 public:
  inline CMsgFinishedRequest() : CMsgFinishedRequest(nullptr) {}
  ~CMsgFinishedRequest() override;
  explicit constexpr CMsgFinishedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFinishedRequest(const CMsgFinishedRequest& from);
  CMsgFinishedRequest(CMsgFinishedRequest&& from) noexcept
    : CMsgFinishedRequest() {
    *this = ::std::move(from);
  }

  inline CMsgFinishedRequest& operator=(const CMsgFinishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFinishedRequest& operator=(CMsgFinishedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFinishedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFinishedRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgFinishedRequest*>(
               &_CMsgFinishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgFinishedRequest& a, CMsgFinishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFinishedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFinishedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFinishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFinishedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFinishedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFinishedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFinishedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFinishedRequest";
  }
  protected:
  explicit CMsgFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kPageTitleFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string pageTitle = 3;
  bool has_pagetitle() const;
  private:
  bool _internal_has_pagetitle() const;
  public:
  void clear_pagetitle();
  const std::string& pagetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pagetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pagetitle();
  PROTOBUF_NODISCARD std::string* release_pagetitle();
  void set_allocated_pagetitle(std::string* pagetitle);
  private:
  const std::string& _internal_pagetitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pagetitle(const std::string& value);
  std::string* _internal_mutable_pagetitle();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFinishedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pagetitle_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLoadedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLoadedRequest) */ {
 public:
  inline CMsgLoadedRequest() : CMsgLoadedRequest(nullptr) {}
  ~CMsgLoadedRequest() override;
  explicit constexpr CMsgLoadedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLoadedRequest(const CMsgLoadedRequest& from);
  CMsgLoadedRequest(CMsgLoadedRequest&& from) noexcept
    : CMsgLoadedRequest() {
    *this = ::std::move(from);
  }

  inline CMsgLoadedRequest& operator=(const CMsgLoadedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLoadedRequest& operator=(CMsgLoadedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLoadedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLoadedRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgLoadedRequest*>(
               &_CMsgLoadedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgLoadedRequest& a, CMsgLoadedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLoadedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLoadedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLoadedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLoadedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLoadedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLoadedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLoadedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLoadedRequest";
  }
  protected:
  explicit CMsgLoadedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 5,
    kUrlFieldNumber = 2,
    kPageTitleFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated .CHTMLHeader headers = 5;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::CHTMLHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHTMLHeader >*
      mutable_headers();
  private:
  const ::CHTMLHeader& _internal_headers(int index) const;
  ::CHTMLHeader* _internal_add_headers();
  public:
  const ::CHTMLHeader& headers(int index) const;
  ::CHTMLHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHTMLHeader >&
      headers() const;

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string pageTitle = 3;
  bool has_pagetitle() const;
  private:
  bool _internal_has_pagetitle() const;
  public:
  void clear_pagetitle();
  const std::string& pagetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pagetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pagetitle();
  PROTOBUF_NODISCARD std::string* release_pagetitle();
  void set_allocated_pagetitle(std::string* pagetitle);
  private:
  const std::string& _internal_pagetitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pagetitle(const std::string& value);
  std::string* _internal_mutable_pagetitle();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLoadedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHTMLHeader > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pagetitle_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFavIconURLChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFavIconURLChanged) */ {
 public:
  inline CMsgFavIconURLChanged() : CMsgFavIconURLChanged(nullptr) {}
  ~CMsgFavIconURLChanged() override;
  explicit constexpr CMsgFavIconURLChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFavIconURLChanged(const CMsgFavIconURLChanged& from);
  CMsgFavIconURLChanged(CMsgFavIconURLChanged&& from) noexcept
    : CMsgFavIconURLChanged() {
    *this = ::std::move(from);
  }

  inline CMsgFavIconURLChanged& operator=(const CMsgFavIconURLChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFavIconURLChanged& operator=(CMsgFavIconURLChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFavIconURLChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFavIconURLChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgFavIconURLChanged*>(
               &_CMsgFavIconURLChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgFavIconURLChanged& a, CMsgFavIconURLChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFavIconURLChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFavIconURLChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFavIconURLChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFavIconURLChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFavIconURLChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFavIconURLChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFavIconURLChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFavIconURLChanged";
  }
  protected:
  explicit CMsgFavIconURLChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlsFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated string urls = 2;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  const std::string& urls(int index) const;
  std::string* mutable_urls(int index);
  void set_urls(int index, const std::string& value);
  void set_urls(int index, std::string&& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  std::string* add_urls();
  void add_urls(const std::string& value);
  void add_urls(std::string&& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_urls();
  private:
  const std::string& _internal_urls(int index) const;
  std::string* _internal_add_urls();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFavIconURLChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> urls_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPageSecurity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPageSecurity) */ {
 public:
  inline CMsgPageSecurity() : CMsgPageSecurity(nullptr) {}
  ~CMsgPageSecurity() override;
  explicit constexpr CMsgPageSecurity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPageSecurity(const CMsgPageSecurity& from);
  CMsgPageSecurity(CMsgPageSecurity&& from) noexcept
    : CMsgPageSecurity() {
    *this = ::std::move(from);
  }

  inline CMsgPageSecurity& operator=(const CMsgPageSecurity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPageSecurity& operator=(CMsgPageSecurity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPageSecurity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPageSecurity* internal_default_instance() {
    return reinterpret_cast<const CMsgPageSecurity*>(
               &_CMsgPageSecurity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgPageSecurity& a, CMsgPageSecurity& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPageSecurity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPageSecurity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPageSecurity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPageSecurity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPageSecurity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPageSecurity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPageSecurity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPageSecurity";
  }
  protected:
  explicit CMsgPageSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kSecurityInfoFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .CHTMLPageSecurityInfo security_info = 3;
  bool has_security_info() const;
  private:
  bool _internal_has_security_info() const;
  public:
  void clear_security_info();
  const ::CHTMLPageSecurityInfo& security_info() const;
  PROTOBUF_NODISCARD ::CHTMLPageSecurityInfo* release_security_info();
  ::CHTMLPageSecurityInfo* mutable_security_info();
  void set_allocated_security_info(::CHTMLPageSecurityInfo* security_info);
  private:
  const ::CHTMLPageSecurityInfo& _internal_security_info() const;
  ::CHTMLPageSecurityInfo* _internal_mutable_security_info();
  public:
  void unsafe_arena_set_allocated_security_info(
      ::CHTMLPageSecurityInfo* security_info);
  ::CHTMLPageSecurityInfo* unsafe_arena_release_security_info();

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPageSecurity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::CHTMLPageSecurityInfo* security_info_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStartRequest) */ {
 public:
  inline CMsgStartRequest() : CMsgStartRequest(nullptr) {}
  ~CMsgStartRequest() override;
  explicit constexpr CMsgStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStartRequest(const CMsgStartRequest& from);
  CMsgStartRequest(CMsgStartRequest&& from) noexcept
    : CMsgStartRequest() {
    *this = ::std::move(from);
  }

  inline CMsgStartRequest& operator=(const CMsgStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStartRequest& operator=(CMsgStartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStartRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgStartRequest*>(
               &_CMsgStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgStartRequest& a, CMsgStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStartRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStartRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStartRequest";
  }
  protected:
  explicit CMsgStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kTargetFieldNumber = 3,
    kPostDataFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kBIsRedirectFieldNumber = 5,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // optional string postData = 4;
  bool has_postdata() const;
  private:
  bool _internal_has_postdata() const;
  public:
  void clear_postdata();
  const std::string& postdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postdata();
  PROTOBUF_NODISCARD std::string* release_postdata();
  void set_allocated_postdata(std::string* postdata);
  private:
  const std::string& _internal_postdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postdata(const std::string& value);
  std::string* _internal_mutable_postdata();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bIsRedirect = 5;
  bool has_bisredirect() const;
  private:
  bool _internal_has_bisredirect() const;
  public:
  void clear_bisredirect();
  bool bisredirect() const;
  void set_bisredirect(bool value);
  private:
  bool _internal_bisredirect() const;
  void _internal_set_bisredirect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postdata_;
  uint32_t browser_handle_;
  bool bisredirect_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStartRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStartRequestResponse) */ {
 public:
  inline CMsgStartRequestResponse() : CMsgStartRequestResponse(nullptr) {}
  ~CMsgStartRequestResponse() override;
  explicit constexpr CMsgStartRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStartRequestResponse(const CMsgStartRequestResponse& from);
  CMsgStartRequestResponse(CMsgStartRequestResponse&& from) noexcept
    : CMsgStartRequestResponse() {
    *this = ::std::move(from);
  }

  inline CMsgStartRequestResponse& operator=(const CMsgStartRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStartRequestResponse& operator=(CMsgStartRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStartRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStartRequestResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgStartRequestResponse*>(
               &_CMsgStartRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgStartRequestResponse& a, CMsgStartRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStartRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStartRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStartRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStartRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStartRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStartRequestResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStartRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStartRequestResponse";
  }
  protected:
  explicit CMsgStartRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kBAllowFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bAllow = 2;
  bool has_ballow() const;
  private:
  bool _internal_has_ballow() const;
  public:
  void clear_ballow();
  bool ballow() const;
  void set_ballow(bool value);
  private:
  bool _internal_ballow() const;
  void _internal_set_ballow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStartRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool ballow_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowPopup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowPopup) */ {
 public:
  inline CMsgShowPopup() : CMsgShowPopup(nullptr) {}
  ~CMsgShowPopup() override;
  explicit constexpr CMsgShowPopup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowPopup(const CMsgShowPopup& from);
  CMsgShowPopup(CMsgShowPopup&& from) noexcept
    : CMsgShowPopup() {
    *this = ::std::move(from);
  }

  inline CMsgShowPopup& operator=(const CMsgShowPopup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowPopup& operator=(CMsgShowPopup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowPopup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowPopup* internal_default_instance() {
    return reinterpret_cast<const CMsgShowPopup*>(
               &_CMsgShowPopup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgShowPopup& a, CMsgShowPopup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowPopup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowPopup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowPopup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowPopup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowPopup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShowPopup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowPopup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowPopup";
  }
  protected:
  explicit CMsgShowPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowPopup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHidePopup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHidePopup) */ {
 public:
  inline CMsgHidePopup() : CMsgHidePopup(nullptr) {}
  ~CMsgHidePopup() override;
  explicit constexpr CMsgHidePopup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHidePopup(const CMsgHidePopup& from);
  CMsgHidePopup(CMsgHidePopup&& from) noexcept
    : CMsgHidePopup() {
    *this = ::std::move(from);
  }

  inline CMsgHidePopup& operator=(const CMsgHidePopup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHidePopup& operator=(CMsgHidePopup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHidePopup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHidePopup* internal_default_instance() {
    return reinterpret_cast<const CMsgHidePopup*>(
               &_CMsgHidePopup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgHidePopup& a, CMsgHidePopup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHidePopup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHidePopup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHidePopup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHidePopup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHidePopup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHidePopup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHidePopup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHidePopup";
  }
  protected:
  explicit CMsgHidePopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHidePopup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSizePopup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSizePopup) */ {
 public:
  inline CMsgSizePopup() : CMsgSizePopup(nullptr) {}
  ~CMsgSizePopup() override;
  explicit constexpr CMsgSizePopup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSizePopup(const CMsgSizePopup& from);
  CMsgSizePopup(CMsgSizePopup&& from) noexcept
    : CMsgSizePopup() {
    *this = ::std::move(from);
  }

  inline CMsgSizePopup& operator=(const CMsgSizePopup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSizePopup& operator=(CMsgSizePopup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSizePopup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSizePopup* internal_default_instance() {
    return reinterpret_cast<const CMsgSizePopup*>(
               &_CMsgSizePopup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgSizePopup& a, CMsgSizePopup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSizePopup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSizePopup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSizePopup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSizePopup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSizePopup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSizePopup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSizePopup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSizePopup";
  }
  protected:
  explicit CMsgSizePopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWideFieldNumber = 4,
    kTallFieldNumber = 5,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional uint32 wide = 4;
  bool has_wide() const;
  private:
  bool _internal_has_wide() const;
  public:
  void clear_wide();
  uint32_t wide() const;
  void set_wide(uint32_t value);
  private:
  uint32_t _internal_wide() const;
  void _internal_set_wide(uint32_t value);
  public:

  // optional uint32 tall = 5;
  bool has_tall() const;
  private:
  bool _internal_has_tall() const;
  public:
  void clear_tall();
  uint32_t tall() const;
  void set_tall(uint32_t value);
  private:
  uint32_t _internal_tall() const;
  void _internal_set_tall(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSizePopup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t x_;
  int32_t y_;
  uint32_t wide_;
  uint32_t tall_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgOpenNewTab final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgOpenNewTab) */ {
 public:
  inline CMsgOpenNewTab() : CMsgOpenNewTab(nullptr) {}
  ~CMsgOpenNewTab() override;
  explicit constexpr CMsgOpenNewTab(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgOpenNewTab(const CMsgOpenNewTab& from);
  CMsgOpenNewTab(CMsgOpenNewTab&& from) noexcept
    : CMsgOpenNewTab() {
    *this = ::std::move(from);
  }

  inline CMsgOpenNewTab& operator=(const CMsgOpenNewTab& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgOpenNewTab& operator=(CMsgOpenNewTab&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgOpenNewTab& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgOpenNewTab* internal_default_instance() {
    return reinterpret_cast<const CMsgOpenNewTab*>(
               &_CMsgOpenNewTab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgOpenNewTab& a, CMsgOpenNewTab& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgOpenNewTab* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgOpenNewTab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgOpenNewTab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgOpenNewTab>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgOpenNewTab& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgOpenNewTab& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgOpenNewTab* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgOpenNewTab";
  }
  protected:
  explicit CMsgOpenNewTab(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
    kBForegroundFieldNumber = 3,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bForeground = 3;
  bool has_bforeground() const;
  private:
  bool _internal_has_bforeground() const;
  public:
  void clear_bforeground();
  bool bforeground() const;
  void set_bforeground(bool value);
  private:
  bool _internal_bforeground() const;
  void _internal_set_bforeground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgOpenNewTab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  bool bforeground_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPopupHTMLWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPopupHTMLWindow) */ {
 public:
  inline CMsgPopupHTMLWindow() : CMsgPopupHTMLWindow(nullptr) {}
  ~CMsgPopupHTMLWindow() override;
  explicit constexpr CMsgPopupHTMLWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from);
  CMsgPopupHTMLWindow(CMsgPopupHTMLWindow&& from) noexcept
    : CMsgPopupHTMLWindow() {
    *this = ::std::move(from);
  }

  inline CMsgPopupHTMLWindow& operator=(const CMsgPopupHTMLWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPopupHTMLWindow& operator=(CMsgPopupHTMLWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPopupHTMLWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPopupHTMLWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgPopupHTMLWindow*>(
               &_CMsgPopupHTMLWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgPopupHTMLWindow& a, CMsgPopupHTMLWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPopupHTMLWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPopupHTMLWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPopupHTMLWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPopupHTMLWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPopupHTMLWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPopupHTMLWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPopupHTMLWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPopupHTMLWindow";
  }
  protected:
  explicit CMsgPopupHTMLWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kNameFieldNumber = 9,
    kBrowserHandleFieldNumber = 1,
    kWideFieldNumber = 5,
    kTallFieldNumber = 6,
    kPopupIndexFieldNumber = 7,
    kTrustedCreatorFieldNumber = 8,
    kParentPopupIndexFieldNumber = 11,
    kHwndFieldNumber = 10,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string name = 9;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 wide = 5;
  bool has_wide() const;
  private:
  bool _internal_has_wide() const;
  public:
  void clear_wide();
  uint32_t wide() const;
  void set_wide(uint32_t value);
  private:
  uint32_t _internal_wide() const;
  void _internal_set_wide(uint32_t value);
  public:

  // optional uint32 tall = 6;
  bool has_tall() const;
  private:
  bool _internal_has_tall() const;
  public:
  void clear_tall();
  uint32_t tall() const;
  void set_tall(uint32_t value);
  private:
  uint32_t _internal_tall() const;
  void _internal_set_tall(uint32_t value);
  public:

  // optional uint32 popup_index = 7;
  bool has_popup_index() const;
  private:
  bool _internal_has_popup_index() const;
  public:
  void clear_popup_index();
  uint32_t popup_index() const;
  void set_popup_index(uint32_t value);
  private:
  uint32_t _internal_popup_index() const;
  void _internal_set_popup_index(uint32_t value);
  public:

  // optional bool trusted_creator = 8;
  bool has_trusted_creator() const;
  private:
  bool _internal_has_trusted_creator() const;
  public:
  void clear_trusted_creator();
  bool trusted_creator() const;
  void set_trusted_creator(bool value);
  private:
  bool _internal_trusted_creator() const;
  void _internal_set_trusted_creator(bool value);
  public:

  // optional uint32 parent_popup_index = 11;
  bool has_parent_popup_index() const;
  private:
  bool _internal_has_parent_popup_index() const;
  public:
  void clear_parent_popup_index();
  uint32_t parent_popup_index() const;
  void set_parent_popup_index(uint32_t value);
  private:
  uint32_t _internal_parent_popup_index() const;
  void _internal_set_parent_popup_index(uint32_t value);
  public:

  // optional uint64 hwnd = 10;
  bool has_hwnd() const;
  private:
  bool _internal_has_hwnd() const;
  public:
  void clear_hwnd();
  uint64_t hwnd() const;
  void set_hwnd(uint64_t value);
  private:
  uint64_t _internal_hwnd() const;
  void _internal_set_hwnd(uint64_t value);
  public:

  // optional int32 x = 3 [default = -2147483648];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 4 [default = -2147483648];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPopupHTMLWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t browser_handle_;
  uint32_t wide_;
  uint32_t tall_;
  uint32_t popup_index_;
  bool trusted_creator_;
  uint32_t parent_popup_index_;
  uint64_t hwnd_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPopupHTMLWindowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPopupHTMLWindowResponse) */ {
 public:
  inline CMsgPopupHTMLWindowResponse() : CMsgPopupHTMLWindowResponse(nullptr) {}
  ~CMsgPopupHTMLWindowResponse() override;
  explicit constexpr CMsgPopupHTMLWindowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from);
  CMsgPopupHTMLWindowResponse(CMsgPopupHTMLWindowResponse&& from) noexcept
    : CMsgPopupHTMLWindowResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPopupHTMLWindowResponse& operator=(const CMsgPopupHTMLWindowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPopupHTMLWindowResponse& operator=(CMsgPopupHTMLWindowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPopupHTMLWindowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPopupHTMLWindowResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPopupHTMLWindowResponse*>(
               &_CMsgPopupHTMLWindowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgPopupHTMLWindowResponse& a, CMsgPopupHTMLWindowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPopupHTMLWindowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPopupHTMLWindowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPopupHTMLWindowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPopupHTMLWindowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPopupHTMLWindowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPopupHTMLWindowResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPopupHTMLWindowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPopupHTMLWindowResponse";
  }
  protected:
  explicit CMsgPopupHTMLWindowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kBAllowFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bAllow = 2;
  bool has_ballow() const;
  private:
  bool _internal_has_ballow() const;
  public:
  void clear_ballow();
  bool ballow() const;
  void set_ballow(bool value);
  private:
  bool _internal_ballow() const;
  void _internal_set_ballow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPopupHTMLWindowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool ballow_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetHTMLTitle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetHTMLTitle) */ {
 public:
  inline CMsgSetHTMLTitle() : CMsgSetHTMLTitle(nullptr) {}
  ~CMsgSetHTMLTitle() override;
  explicit constexpr CMsgSetHTMLTitle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from);
  CMsgSetHTMLTitle(CMsgSetHTMLTitle&& from) noexcept
    : CMsgSetHTMLTitle() {
    *this = ::std::move(from);
  }

  inline CMsgSetHTMLTitle& operator=(const CMsgSetHTMLTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetHTMLTitle& operator=(CMsgSetHTMLTitle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetHTMLTitle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetHTMLTitle* internal_default_instance() {
    return reinterpret_cast<const CMsgSetHTMLTitle*>(
               &_CMsgSetHTMLTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgSetHTMLTitle& a, CMsgSetHTMLTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetHTMLTitle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetHTMLTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetHTMLTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetHTMLTitle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetHTMLTitle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetHTMLTitle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetHTMLTitle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetHTMLTitle";
  }
  protected:
  explicit CMsgSetHTMLTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetHTMLTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLoadingResource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLoadingResource) */ {
 public:
  inline CMsgLoadingResource() : CMsgLoadingResource(nullptr) {}
  ~CMsgLoadingResource() override;
  explicit constexpr CMsgLoadingResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLoadingResource(const CMsgLoadingResource& from);
  CMsgLoadingResource(CMsgLoadingResource&& from) noexcept
    : CMsgLoadingResource() {
    *this = ::std::move(from);
  }

  inline CMsgLoadingResource& operator=(const CMsgLoadingResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLoadingResource& operator=(CMsgLoadingResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLoadingResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLoadingResource* internal_default_instance() {
    return reinterpret_cast<const CMsgLoadingResource*>(
               &_CMsgLoadingResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgLoadingResource& a, CMsgLoadingResource& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLoadingResource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLoadingResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLoadingResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLoadingResource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLoadingResource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLoadingResource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLoadingResource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLoadingResource";
  }
  protected:
  explicit CMsgLoadingResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLoadingResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStatusText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStatusText) */ {
 public:
  inline CMsgStatusText() : CMsgStatusText(nullptr) {}
  ~CMsgStatusText() override;
  explicit constexpr CMsgStatusText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStatusText(const CMsgStatusText& from);
  CMsgStatusText(CMsgStatusText&& from) noexcept
    : CMsgStatusText() {
    *this = ::std::move(from);
  }

  inline CMsgStatusText& operator=(const CMsgStatusText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStatusText& operator=(CMsgStatusText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStatusText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStatusText* internal_default_instance() {
    return reinterpret_cast<const CMsgStatusText*>(
               &_CMsgStatusText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgStatusText& a, CMsgStatusText& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStatusText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStatusText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStatusText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStatusText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStatusText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStatusText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStatusText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStatusText";
  }
  protected:
  explicit CMsgStatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStatusText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetCursor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetCursor) */ {
 public:
  inline CMsgSetCursor() : CMsgSetCursor(nullptr) {}
  ~CMsgSetCursor() override;
  explicit constexpr CMsgSetCursor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetCursor(const CMsgSetCursor& from);
  CMsgSetCursor(CMsgSetCursor&& from) noexcept
    : CMsgSetCursor() {
    *this = ::std::move(from);
  }

  inline CMsgSetCursor& operator=(const CMsgSetCursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetCursor& operator=(CMsgSetCursor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetCursor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetCursor* internal_default_instance() {
    return reinterpret_cast<const CMsgSetCursor*>(
               &_CMsgSetCursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgSetCursor& a, CMsgSetCursor& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetCursor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetCursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetCursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetCursor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetCursor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetCursor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetCursor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetCursor";
  }
  protected:
  explicit CMsgSetCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDataFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kCursorFieldNumber = 2,
    kWideFieldNumber = 4,
    kTallFieldNumber = 5,
    kXhotspotFieldNumber = 6,
    kYhotspotFieldNumber = 7,
  };
  // optional bytes custom_data = 3;
  bool has_custom_data() const;
  private:
  bool _internal_has_custom_data() const;
  public:
  void clear_custom_data();
  const std::string& custom_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_data();
  PROTOBUF_NODISCARD std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 cursor = 2;
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  uint32_t cursor() const;
  void set_cursor(uint32_t value);
  private:
  uint32_t _internal_cursor() const;
  void _internal_set_cursor(uint32_t value);
  public:

  // optional uint32 wide = 4;
  bool has_wide() const;
  private:
  bool _internal_has_wide() const;
  public:
  void clear_wide();
  uint32_t wide() const;
  void set_wide(uint32_t value);
  private:
  uint32_t _internal_wide() const;
  void _internal_set_wide(uint32_t value);
  public:

  // optional uint32 tall = 5;
  bool has_tall() const;
  private:
  bool _internal_has_tall() const;
  public:
  void clear_tall();
  uint32_t tall() const;
  void set_tall(uint32_t value);
  private:
  uint32_t _internal_tall() const;
  void _internal_set_tall(uint32_t value);
  public:

  // optional uint32 xhotspot = 6;
  bool has_xhotspot() const;
  private:
  bool _internal_has_xhotspot() const;
  public:
  void clear_xhotspot();
  uint32_t xhotspot() const;
  void set_xhotspot(uint32_t value);
  private:
  uint32_t _internal_xhotspot() const;
  void _internal_set_xhotspot(uint32_t value);
  public:

  // optional uint32 yhotspot = 7;
  bool has_yhotspot() const;
  private:
  bool _internal_has_yhotspot() const;
  public:
  void clear_yhotspot();
  uint32_t yhotspot() const;
  void set_yhotspot(uint32_t value);
  private:
  uint32_t _internal_yhotspot() const;
  void _internal_set_yhotspot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetCursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  uint32_t browser_handle_;
  uint32_t cursor_;
  uint32_t wide_;
  uint32_t tall_;
  uint32_t xhotspot_;
  uint32_t yhotspot_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFileLoadDialog_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFileLoadDialog.Filter) */ {
 public:
  inline CMsgFileLoadDialog_Filter() : CMsgFileLoadDialog_Filter(nullptr) {}
  ~CMsgFileLoadDialog_Filter() override;
  explicit constexpr CMsgFileLoadDialog_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFileLoadDialog_Filter(const CMsgFileLoadDialog_Filter& from);
  CMsgFileLoadDialog_Filter(CMsgFileLoadDialog_Filter&& from) noexcept
    : CMsgFileLoadDialog_Filter() {
    *this = ::std::move(from);
  }

  inline CMsgFileLoadDialog_Filter& operator=(const CMsgFileLoadDialog_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFileLoadDialog_Filter& operator=(CMsgFileLoadDialog_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFileLoadDialog_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFileLoadDialog_Filter* internal_default_instance() {
    return reinterpret_cast<const CMsgFileLoadDialog_Filter*>(
               &_CMsgFileLoadDialog_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgFileLoadDialog_Filter& a, CMsgFileLoadDialog_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFileLoadDialog_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFileLoadDialog_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFileLoadDialog_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFileLoadDialog_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFileLoadDialog_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFileLoadDialog_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFileLoadDialog_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFileLoadDialog.Filter";
  }
  protected:
  explicit CMsgFileLoadDialog_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternsFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsDefaultFieldNumber = 3,
  };
  // repeated string patterns = 2;
  int patterns_size() const;
  private:
  int _internal_patterns_size() const;
  public:
  void clear_patterns();
  const std::string& patterns(int index) const;
  std::string* mutable_patterns(int index);
  void set_patterns(int index, const std::string& value);
  void set_patterns(int index, std::string&& value);
  void set_patterns(int index, const char* value);
  void set_patterns(int index, const char* value, size_t size);
  std::string* add_patterns();
  void add_patterns(const std::string& value);
  void add_patterns(std::string&& value);
  void add_patterns(const char* value);
  void add_patterns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& patterns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_patterns();
  private:
  const std::string& _internal_patterns(int index) const;
  std::string* _internal_add_patterns();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool is_default = 3;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFileLoadDialog.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> patterns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_default_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFileLoadDialog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFileLoadDialog) */ {
 public:
  inline CMsgFileLoadDialog() : CMsgFileLoadDialog(nullptr) {}
  ~CMsgFileLoadDialog() override;
  explicit constexpr CMsgFileLoadDialog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFileLoadDialog(const CMsgFileLoadDialog& from);
  CMsgFileLoadDialog(CMsgFileLoadDialog&& from) noexcept
    : CMsgFileLoadDialog() {
    *this = ::std::move(from);
  }

  inline CMsgFileLoadDialog& operator=(const CMsgFileLoadDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFileLoadDialog& operator=(CMsgFileLoadDialog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFileLoadDialog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFileLoadDialog* internal_default_instance() {
    return reinterpret_cast<const CMsgFileLoadDialog*>(
               &_CMsgFileLoadDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgFileLoadDialog& a, CMsgFileLoadDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFileLoadDialog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFileLoadDialog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFileLoadDialog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFileLoadDialog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFileLoadDialog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFileLoadDialog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFileLoadDialog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFileLoadDialog";
  }
  protected:
  explicit CMsgFileLoadDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgFileLoadDialog_Filter Filter;

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptTypesFieldNumber = 5,
    kFiltersFieldNumber = 8,
    kTitleFieldNumber = 3,
    kInitialFileFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
    kIsSaveFieldNumber = 6,
    kChooseDirectoryFieldNumber = 7,
  };
  // repeated string accept_types = 5;
  int accept_types_size() const;
  private:
  int _internal_accept_types_size() const;
  public:
  void clear_accept_types();
  const std::string& accept_types(int index) const;
  std::string* mutable_accept_types(int index);
  void set_accept_types(int index, const std::string& value);
  void set_accept_types(int index, std::string&& value);
  void set_accept_types(int index, const char* value);
  void set_accept_types(int index, const char* value, size_t size);
  std::string* add_accept_types();
  void add_accept_types(const std::string& value);
  void add_accept_types(std::string&& value);
  void add_accept_types(const char* value);
  void add_accept_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accept_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accept_types();
  private:
  const std::string& _internal_accept_types(int index) const;
  std::string* _internal_add_accept_types();
  public:

  // repeated .CMsgFileLoadDialog.Filter filters = 8;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::CMsgFileLoadDialog_Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFileLoadDialog_Filter >*
      mutable_filters();
  private:
  const ::CMsgFileLoadDialog_Filter& _internal_filters(int index) const;
  ::CMsgFileLoadDialog_Filter* _internal_add_filters();
  public:
  const ::CMsgFileLoadDialog_Filter& filters(int index) const;
  ::CMsgFileLoadDialog_Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFileLoadDialog_Filter >&
      filters() const;

  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string initialFile = 4;
  bool has_initialfile() const;
  private:
  bool _internal_has_initialfile() const;
  public:
  void clear_initialfile();
  const std::string& initialfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initialfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initialfile();
  PROTOBUF_NODISCARD std::string* release_initialfile();
  void set_allocated_initialfile(std::string* initialfile);
  private:
  const std::string& _internal_initialfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initialfile(const std::string& value);
  std::string* _internal_mutable_initialfile();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // optional bool is_save = 6;
  bool has_is_save() const;
  private:
  bool _internal_has_is_save() const;
  public:
  void clear_is_save();
  bool is_save() const;
  void set_is_save(bool value);
  private:
  bool _internal_is_save() const;
  void _internal_set_is_save(bool value);
  public:

  // optional bool choose_directory = 7;
  bool has_choose_directory() const;
  private:
  bool _internal_has_choose_directory() const;
  public:
  void clear_choose_directory();
  bool choose_directory() const;
  void set_choose_directory(bool value);
  private:
  bool _internal_choose_directory() const;
  void _internal_set_choose_directory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFileLoadDialog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accept_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFileLoadDialog_Filter > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialfile_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  bool is_save_;
  bool choose_directory_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFileLoadDialogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFileLoadDialogResponse) */ {
 public:
  inline CMsgFileLoadDialogResponse() : CMsgFileLoadDialogResponse(nullptr) {}
  ~CMsgFileLoadDialogResponse() override;
  explicit constexpr CMsgFileLoadDialogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from);
  CMsgFileLoadDialogResponse(CMsgFileLoadDialogResponse&& from) noexcept
    : CMsgFileLoadDialogResponse() {
    *this = ::std::move(from);
  }

  inline CMsgFileLoadDialogResponse& operator=(const CMsgFileLoadDialogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFileLoadDialogResponse& operator=(CMsgFileLoadDialogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFileLoadDialogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFileLoadDialogResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgFileLoadDialogResponse*>(
               &_CMsgFileLoadDialogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgFileLoadDialogResponse& a, CMsgFileLoadDialogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFileLoadDialogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFileLoadDialogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFileLoadDialogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFileLoadDialogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFileLoadDialogResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFileLoadDialogResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFileLoadDialogResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFileLoadDialogResponse";
  }
  protected:
  explicit CMsgFileLoadDialogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
    kBsuccessFieldNumber = 3,
  };
  // repeated string files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // optional bool bsuccess = 3;
  bool has_bsuccess() const;
  private:
  bool _internal_has_bsuccess() const;
  public:
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFileLoadDialogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  bool bsuccess_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowToolTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowToolTip) */ {
 public:
  inline CMsgShowToolTip() : CMsgShowToolTip(nullptr) {}
  ~CMsgShowToolTip() override;
  explicit constexpr CMsgShowToolTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowToolTip(const CMsgShowToolTip& from);
  CMsgShowToolTip(CMsgShowToolTip&& from) noexcept
    : CMsgShowToolTip() {
    *this = ::std::move(from);
  }

  inline CMsgShowToolTip& operator=(const CMsgShowToolTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowToolTip& operator=(CMsgShowToolTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowToolTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowToolTip* internal_default_instance() {
    return reinterpret_cast<const CMsgShowToolTip*>(
               &_CMsgShowToolTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgShowToolTip& a, CMsgShowToolTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowToolTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowToolTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowToolTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowToolTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowToolTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShowToolTip& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowToolTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowToolTip";
  }
  protected:
  explicit CMsgShowToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowToolTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgUpdateToolTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUpdateToolTip) */ {
 public:
  inline CMsgUpdateToolTip() : CMsgUpdateToolTip(nullptr) {}
  ~CMsgUpdateToolTip() override;
  explicit constexpr CMsgUpdateToolTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUpdateToolTip(const CMsgUpdateToolTip& from);
  CMsgUpdateToolTip(CMsgUpdateToolTip&& from) noexcept
    : CMsgUpdateToolTip() {
    *this = ::std::move(from);
  }

  inline CMsgUpdateToolTip& operator=(const CMsgUpdateToolTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUpdateToolTip& operator=(CMsgUpdateToolTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUpdateToolTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUpdateToolTip* internal_default_instance() {
    return reinterpret_cast<const CMsgUpdateToolTip*>(
               &_CMsgUpdateToolTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgUpdateToolTip& a, CMsgUpdateToolTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUpdateToolTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUpdateToolTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgUpdateToolTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgUpdateToolTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgUpdateToolTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgUpdateToolTip& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUpdateToolTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUpdateToolTip";
  }
  protected:
  explicit CMsgUpdateToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUpdateToolTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHideToolTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHideToolTip) */ {
 public:
  inline CMsgHideToolTip() : CMsgHideToolTip(nullptr) {}
  ~CMsgHideToolTip() override;
  explicit constexpr CMsgHideToolTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHideToolTip(const CMsgHideToolTip& from);
  CMsgHideToolTip(CMsgHideToolTip&& from) noexcept
    : CMsgHideToolTip() {
    *this = ::std::move(from);
  }

  inline CMsgHideToolTip& operator=(const CMsgHideToolTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHideToolTip& operator=(CMsgHideToolTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHideToolTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHideToolTip* internal_default_instance() {
    return reinterpret_cast<const CMsgHideToolTip*>(
               &_CMsgHideToolTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgHideToolTip& a, CMsgHideToolTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHideToolTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHideToolTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHideToolTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHideToolTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHideToolTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHideToolTip& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHideToolTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHideToolTip";
  }
  protected:
  explicit CMsgHideToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHideToolTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSearchResults) */ {
 public:
  inline CMsgSearchResults() : CMsgSearchResults(nullptr) {}
  ~CMsgSearchResults() override;
  explicit constexpr CMsgSearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSearchResults(const CMsgSearchResults& from);
  CMsgSearchResults(CMsgSearchResults&& from) noexcept
    : CMsgSearchResults() {
    *this = ::std::move(from);
  }

  inline CMsgSearchResults& operator=(const CMsgSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSearchResults& operator=(CMsgSearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSearchResults* internal_default_instance() {
    return reinterpret_cast<const CMsgSearchResults*>(
               &_CMsgSearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgSearchResults& a, CMsgSearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSearchResults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSearchResults";
  }
  protected:
  explicit CMsgSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kActiveMatchFieldNumber = 2,
    kResultsFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 activeMatch = 2;
  bool has_activematch() const;
  private:
  bool _internal_has_activematch() const;
  public:
  void clear_activematch();
  int32_t activematch() const;
  void set_activematch(int32_t value);
  private:
  int32_t _internal_activematch() const;
  void _internal_set_activematch(int32_t value);
  public:

  // optional int32 results = 3;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  int32_t results() const;
  void set_results(int32_t value);
  private:
  int32_t _internal_results() const;
  void _internal_set_results(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t activematch_;
  int32_t results_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgClose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClose) */ {
 public:
  inline CMsgClose() : CMsgClose(nullptr) {}
  ~CMsgClose() override;
  explicit constexpr CMsgClose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClose(const CMsgClose& from);
  CMsgClose(CMsgClose&& from) noexcept
    : CMsgClose() {
    *this = ::std::move(from);
  }

  inline CMsgClose& operator=(const CMsgClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClose& operator=(CMsgClose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClose& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClose* internal_default_instance() {
    return reinterpret_cast<const CMsgClose*>(
               &_CMsgClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgClose& a, CMsgClose& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClose";
  }
  protected:
  explicit CMsgClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetSharedPaintBuffers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetSharedPaintBuffers) */ {
 public:
  inline CMsgSetSharedPaintBuffers() : CMsgSetSharedPaintBuffers(nullptr) {}
  ~CMsgSetSharedPaintBuffers() override;
  explicit constexpr CMsgSetSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetSharedPaintBuffers(const CMsgSetSharedPaintBuffers& from);
  CMsgSetSharedPaintBuffers(CMsgSetSharedPaintBuffers&& from) noexcept
    : CMsgSetSharedPaintBuffers() {
    *this = ::std::move(from);
  }

  inline CMsgSetSharedPaintBuffers& operator=(const CMsgSetSharedPaintBuffers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetSharedPaintBuffers& operator=(CMsgSetSharedPaintBuffers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetSharedPaintBuffers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetSharedPaintBuffers* internal_default_instance() {
    return reinterpret_cast<const CMsgSetSharedPaintBuffers*>(
               &_CMsgSetSharedPaintBuffers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgSetSharedPaintBuffers& a, CMsgSetSharedPaintBuffers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetSharedPaintBuffers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetSharedPaintBuffers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetSharedPaintBuffers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetSharedPaintBuffers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetSharedPaintBuffers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetSharedPaintBuffers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetSharedPaintBuffers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetSharedPaintBuffers";
  }
  protected:
  explicit CMsgSetSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kWideFieldNumber = 2,
    kSourcePidFieldNumber = 4,
    kSourceHandleFieldNumber = 5,
    kHandleFieldNumber = 6,
    kTallFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 wide = 2;
  bool has_wide() const;
  private:
  bool _internal_has_wide() const;
  public:
  void clear_wide();
  uint32_t wide() const;
  void set_wide(uint32_t value);
  private:
  uint32_t _internal_wide() const;
  void _internal_set_wide(uint32_t value);
  public:

  // optional uint64 source_pid = 4;
  bool has_source_pid() const;
  private:
  bool _internal_has_source_pid() const;
  public:
  void clear_source_pid();
  uint64_t source_pid() const;
  void set_source_pid(uint64_t value);
  private:
  uint64_t _internal_source_pid() const;
  void _internal_set_source_pid(uint64_t value);
  public:

  // optional uint64 source_handle = 5;
  bool has_source_handle() const;
  private:
  bool _internal_has_source_handle() const;
  public:
  void clear_source_handle();
  uint64_t source_handle() const;
  void set_source_handle(uint64_t value);
  private:
  uint64_t _internal_source_handle() const;
  void _internal_set_source_handle(uint64_t value);
  public:

  // optional uint64 handle = 6;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  uint64_t handle() const;
  void set_handle(uint64_t value);
  private:
  uint64_t _internal_handle() const;
  void _internal_set_handle(uint64_t value);
  public:

  // optional uint32 tall = 3;
  bool has_tall() const;
  private:
  bool _internal_has_tall() const;
  public:
  void clear_tall();
  uint32_t tall() const;
  void set_tall(uint32_t value);
  private:
  uint32_t _internal_tall() const;
  void _internal_set_tall(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetSharedPaintBuffers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t wide_;
  uint64_t source_pid_;
  uint64_t source_handle_;
  uint64_t handle_;
  uint32_t tall_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAckSharedPaintBuffers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAckSharedPaintBuffers) */ {
 public:
  inline CMsgAckSharedPaintBuffers() : CMsgAckSharedPaintBuffers(nullptr) {}
  ~CMsgAckSharedPaintBuffers() override;
  explicit constexpr CMsgAckSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAckSharedPaintBuffers(const CMsgAckSharedPaintBuffers& from);
  CMsgAckSharedPaintBuffers(CMsgAckSharedPaintBuffers&& from) noexcept
    : CMsgAckSharedPaintBuffers() {
    *this = ::std::move(from);
  }

  inline CMsgAckSharedPaintBuffers& operator=(const CMsgAckSharedPaintBuffers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAckSharedPaintBuffers& operator=(CMsgAckSharedPaintBuffers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAckSharedPaintBuffers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAckSharedPaintBuffers* internal_default_instance() {
    return reinterpret_cast<const CMsgAckSharedPaintBuffers*>(
               &_CMsgAckSharedPaintBuffers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgAckSharedPaintBuffers& a, CMsgAckSharedPaintBuffers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAckSharedPaintBuffers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAckSharedPaintBuffers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAckSharedPaintBuffers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAckSharedPaintBuffers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAckSharedPaintBuffers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAckSharedPaintBuffers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAckSharedPaintBuffers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAckSharedPaintBuffers";
  }
  protected:
  explicit CMsgAckSharedPaintBuffers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAckSharedPaintBuffers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNeedsPaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNeedsPaint) */ {
 public:
  inline CMsgNeedsPaint() : CMsgNeedsPaint(nullptr) {}
  ~CMsgNeedsPaint() override;
  explicit constexpr CMsgNeedsPaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNeedsPaint(const CMsgNeedsPaint& from);
  CMsgNeedsPaint(CMsgNeedsPaint&& from) noexcept
    : CMsgNeedsPaint() {
    *this = ::std::move(from);
  }

  inline CMsgNeedsPaint& operator=(const CMsgNeedsPaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNeedsPaint& operator=(CMsgNeedsPaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNeedsPaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNeedsPaint* internal_default_instance() {
    return reinterpret_cast<const CMsgNeedsPaint*>(
               &_CMsgNeedsPaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgNeedsPaint& a, CMsgNeedsPaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNeedsPaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNeedsPaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNeedsPaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNeedsPaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNeedsPaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNeedsPaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNeedsPaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNeedsPaint";
  }
  protected:
  explicit CMsgNeedsPaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScrollxFieldNumber = 10,
    kScrollyFieldNumber = 11,
    kPagescaleFieldNumber = 12,
    kPageserialFieldNumber = 15,
    kAvgFrameMsFieldNumber = 20,
    kStddevSumFrameMsFieldNumber = 21,
    kLongFrameMsFieldNumber = 22,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 scrollx = 10;
  bool has_scrollx() const;
  private:
  bool _internal_has_scrollx() const;
  public:
  void clear_scrollx();
  uint32_t scrollx() const;
  void set_scrollx(uint32_t value);
  private:
  uint32_t _internal_scrollx() const;
  void _internal_set_scrollx(uint32_t value);
  public:

  // optional uint32 scrolly = 11;
  bool has_scrolly() const;
  private:
  bool _internal_has_scrolly() const;
  public:
  void clear_scrolly();
  uint32_t scrolly() const;
  void set_scrolly(uint32_t value);
  private:
  uint32_t _internal_scrolly() const;
  void _internal_set_scrolly(uint32_t value);
  public:

  // optional float pagescale = 12;
  bool has_pagescale() const;
  private:
  bool _internal_has_pagescale() const;
  public:
  void clear_pagescale();
  float pagescale() const;
  void set_pagescale(float value);
  private:
  float _internal_pagescale() const;
  void _internal_set_pagescale(float value);
  public:

  // optional uint32 pageserial = 15;
  bool has_pageserial() const;
  private:
  bool _internal_has_pageserial() const;
  public:
  void clear_pageserial();
  uint32_t pageserial() const;
  void set_pageserial(uint32_t value);
  private:
  uint32_t _internal_pageserial() const;
  void _internal_set_pageserial(uint32_t value);
  public:

  // optional uint32 avg_frame_ms = 20;
  bool has_avg_frame_ms() const;
  private:
  bool _internal_has_avg_frame_ms() const;
  public:
  void clear_avg_frame_ms();
  uint32_t avg_frame_ms() const;
  void set_avg_frame_ms(uint32_t value);
  private:
  uint32_t _internal_avg_frame_ms() const;
  void _internal_set_avg_frame_ms(uint32_t value);
  public:

  // optional float stddev_sum_frame_ms = 21;
  bool has_stddev_sum_frame_ms() const;
  private:
  bool _internal_has_stddev_sum_frame_ms() const;
  public:
  void clear_stddev_sum_frame_ms();
  float stddev_sum_frame_ms() const;
  void set_stddev_sum_frame_ms(float value);
  private:
  float _internal_stddev_sum_frame_ms() const;
  void _internal_set_stddev_sum_frame_ms(float value);
  public:

  // optional uint32 long_frame_ms = 22;
  bool has_long_frame_ms() const;
  private:
  bool _internal_has_long_frame_ms() const;
  public:
  void clear_long_frame_ms();
  uint32_t long_frame_ms() const;
  void set_long_frame_ms(uint32_t value);
  private:
  uint32_t _internal_long_frame_ms() const;
  void _internal_set_long_frame_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNeedsPaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t scrollx_;
  uint32_t scrolly_;
  float pagescale_;
  uint32_t pageserial_;
  uint32_t avg_frame_ms_;
  float stddev_sum_frame_ms_;
  uint32_t long_frame_ms_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgComboNeedsPaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgComboNeedsPaint) */ {
 public:
  inline CMsgComboNeedsPaint() : CMsgComboNeedsPaint(nullptr) {}
  ~CMsgComboNeedsPaint() override;
  explicit constexpr CMsgComboNeedsPaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgComboNeedsPaint(const CMsgComboNeedsPaint& from);
  CMsgComboNeedsPaint(CMsgComboNeedsPaint&& from) noexcept
    : CMsgComboNeedsPaint() {
    *this = ::std::move(from);
  }

  inline CMsgComboNeedsPaint& operator=(const CMsgComboNeedsPaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgComboNeedsPaint& operator=(CMsgComboNeedsPaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgComboNeedsPaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgComboNeedsPaint* internal_default_instance() {
    return reinterpret_cast<const CMsgComboNeedsPaint*>(
               &_CMsgComboNeedsPaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgComboNeedsPaint& a, CMsgComboNeedsPaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgComboNeedsPaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgComboNeedsPaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgComboNeedsPaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgComboNeedsPaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgComboNeedsPaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgComboNeedsPaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgComboNeedsPaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgComboNeedsPaint";
  }
  protected:
  explicit CMsgComboNeedsPaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRgbaFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
    kComboboxWideFieldNumber = 3,
    kSharedMemoryHandleFieldNumber = 5,
    kSharedMemorySizeFieldNumber = 7,
    kComboboxTallFieldNumber = 4,
  };
  // optional uint64 rgba = 2;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  uint64_t rgba() const;
  void set_rgba(uint64_t value);
  private:
  uint64_t _internal_rgba() const;
  void _internal_set_rgba(uint64_t value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 combobox_wide = 3 [default = 0];
  bool has_combobox_wide() const;
  private:
  bool _internal_has_combobox_wide() const;
  public:
  void clear_combobox_wide();
  uint32_t combobox_wide() const;
  void set_combobox_wide(uint32_t value);
  private:
  uint32_t _internal_combobox_wide() const;
  void _internal_set_combobox_wide(uint32_t value);
  public:

  // optional uint64 shared_memory_handle = 5 [default = 0];
  bool has_shared_memory_handle() const;
  private:
  bool _internal_has_shared_memory_handle() const;
  public:
  void clear_shared_memory_handle();
  uint64_t shared_memory_handle() const;
  void set_shared_memory_handle(uint64_t value);
  private:
  uint64_t _internal_shared_memory_handle() const;
  void _internal_set_shared_memory_handle(uint64_t value);
  public:

  // optional uint64 shared_memory_size = 7 [default = 0];
  bool has_shared_memory_size() const;
  private:
  bool _internal_has_shared_memory_size() const;
  public:
  void clear_shared_memory_size();
  uint64_t shared_memory_size() const;
  void set_shared_memory_size(uint64_t value);
  private:
  uint64_t _internal_shared_memory_size() const;
  void _internal_set_shared_memory_size(uint64_t value);
  public:

  // optional uint32 combobox_tall = 4 [default = 0];
  bool has_combobox_tall() const;
  private:
  bool _internal_has_combobox_tall() const;
  public:
  void clear_combobox_tall();
  uint32_t combobox_tall() const;
  void set_combobox_tall(uint32_t value);
  private:
  uint32_t _internal_combobox_tall() const;
  void _internal_set_combobox_tall(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgComboNeedsPaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t rgba_;
  uint32_t browser_handle_;
  uint32_t combobox_wide_;
  uint64_t shared_memory_handle_;
  uint64_t shared_memory_size_;
  uint32_t combobox_tall_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNeedsSharedTexturePaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNeedsSharedTexturePaint) */ {
 public:
  inline CMsgNeedsSharedTexturePaint() : CMsgNeedsSharedTexturePaint(nullptr) {}
  ~CMsgNeedsSharedTexturePaint() override;
  explicit constexpr CMsgNeedsSharedTexturePaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNeedsSharedTexturePaint(const CMsgNeedsSharedTexturePaint& from);
  CMsgNeedsSharedTexturePaint(CMsgNeedsSharedTexturePaint&& from) noexcept
    : CMsgNeedsSharedTexturePaint() {
    *this = ::std::move(from);
  }

  inline CMsgNeedsSharedTexturePaint& operator=(const CMsgNeedsSharedTexturePaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNeedsSharedTexturePaint& operator=(CMsgNeedsSharedTexturePaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNeedsSharedTexturePaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNeedsSharedTexturePaint* internal_default_instance() {
    return reinterpret_cast<const CMsgNeedsSharedTexturePaint*>(
               &_CMsgNeedsSharedTexturePaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgNeedsSharedTexturePaint& a, CMsgNeedsSharedTexturePaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNeedsSharedTexturePaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNeedsSharedTexturePaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNeedsSharedTexturePaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNeedsSharedTexturePaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNeedsSharedTexturePaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNeedsSharedTexturePaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNeedsSharedTexturePaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNeedsSharedTexturePaint";
  }
  protected:
  explicit CMsgNeedsSharedTexturePaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kShareHandleFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kScrollxFieldNumber = 5,
    kScrollyFieldNumber = 6,
    kPagescaleFieldNumber = 7,
    kPageserialFieldNumber = 8,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 share_handle = 2;
  bool has_share_handle() const;
  private:
  bool _internal_has_share_handle() const;
  public:
  void clear_share_handle();
  uint32_t share_handle() const;
  void set_share_handle(uint32_t value);
  private:
  uint32_t _internal_share_handle() const;
  void _internal_set_share_handle(uint32_t value);
  public:

  // optional uint32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 scrollx = 5;
  bool has_scrollx() const;
  private:
  bool _internal_has_scrollx() const;
  public:
  void clear_scrollx();
  uint32_t scrollx() const;
  void set_scrollx(uint32_t value);
  private:
  uint32_t _internal_scrollx() const;
  void _internal_set_scrollx(uint32_t value);
  public:

  // optional uint32 scrolly = 6;
  bool has_scrolly() const;
  private:
  bool _internal_has_scrolly() const;
  public:
  void clear_scrolly();
  uint32_t scrolly() const;
  void set_scrolly(uint32_t value);
  private:
  uint32_t _internal_scrolly() const;
  void _internal_set_scrolly(uint32_t value);
  public:

  // optional float pagescale = 7;
  bool has_pagescale() const;
  private:
  bool _internal_has_pagescale() const;
  public:
  void clear_pagescale();
  float pagescale() const;
  void set_pagescale(float value);
  private:
  float _internal_pagescale() const;
  void _internal_set_pagescale(float value);
  public:

  // optional uint32 pageserial = 8;
  bool has_pageserial() const;
  private:
  bool _internal_has_pageserial() const;
  public:
  void clear_pageserial();
  uint32_t pageserial() const;
  void set_pageserial(uint32_t value);
  private:
  uint32_t _internal_pageserial() const;
  void _internal_set_pageserial(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNeedsSharedTexturePaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t share_handle_;
  uint32_t width_;
  uint32_t height_;
  uint32_t scrollx_;
  uint32_t scrolly_;
  float pagescale_;
  uint32_t pageserial_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameOverlayTexturePaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameOverlayTexturePaint) */ {
 public:
  inline CMsgGameOverlayTexturePaint() : CMsgGameOverlayTexturePaint(nullptr) {}
  ~CMsgGameOverlayTexturePaint() override;
  explicit constexpr CMsgGameOverlayTexturePaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameOverlayTexturePaint(const CMsgGameOverlayTexturePaint& from);
  CMsgGameOverlayTexturePaint(CMsgGameOverlayTexturePaint&& from) noexcept
    : CMsgGameOverlayTexturePaint() {
    *this = ::std::move(from);
  }

  inline CMsgGameOverlayTexturePaint& operator=(const CMsgGameOverlayTexturePaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameOverlayTexturePaint& operator=(CMsgGameOverlayTexturePaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameOverlayTexturePaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameOverlayTexturePaint* internal_default_instance() {
    return reinterpret_cast<const CMsgGameOverlayTexturePaint*>(
               &_CMsgGameOverlayTexturePaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgGameOverlayTexturePaint& a, CMsgGameOverlayTexturePaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameOverlayTexturePaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameOverlayTexturePaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameOverlayTexturePaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameOverlayTexturePaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameOverlayTexturePaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameOverlayTexturePaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameOverlayTexturePaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameOverlayTexturePaint";
  }
  protected:
  explicit CMsgGameOverlayTexturePaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kScrollxFieldNumber = 5,
    kScrollyFieldNumber = 6,
    kPagescaleFieldNumber = 7,
    kPageserialFieldNumber = 8,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 scrollx = 5;
  bool has_scrollx() const;
  private:
  bool _internal_has_scrollx() const;
  public:
  void clear_scrollx();
  uint32_t scrollx() const;
  void set_scrollx(uint32_t value);
  private:
  uint32_t _internal_scrollx() const;
  void _internal_set_scrollx(uint32_t value);
  public:

  // optional uint32 scrolly = 6;
  bool has_scrolly() const;
  private:
  bool _internal_has_scrolly() const;
  public:
  void clear_scrolly();
  uint32_t scrolly() const;
  void set_scrolly(uint32_t value);
  private:
  uint32_t _internal_scrolly() const;
  void _internal_set_scrolly(uint32_t value);
  public:

  // optional float pagescale = 7;
  bool has_pagescale() const;
  private:
  bool _internal_has_pagescale() const;
  public:
  void clear_pagescale();
  float pagescale() const;
  void set_pagescale(float value);
  private:
  float _internal_pagescale() const;
  void _internal_set_pagescale(float value);
  public:

  // optional uint32 pageserial = 8;
  bool has_pageserial() const;
  private:
  bool _internal_has_pageserial() const;
  public:
  void clear_pageserial();
  uint32_t pageserial() const;
  void set_pageserial(uint32_t value);
  private:
  uint32_t _internal_pageserial() const;
  void _internal_set_pageserial(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameOverlayTexturePaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t width_;
  uint32_t height_;
  uint32_t scrollx_;
  uint32_t scrolly_;
  float pagescale_;
  uint32_t pageserial_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetZoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetZoom) */ {
 public:
  inline CMsgGetZoom() : CMsgGetZoom(nullptr) {}
  ~CMsgGetZoom() override;
  explicit constexpr CMsgGetZoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetZoom(const CMsgGetZoom& from);
  CMsgGetZoom(CMsgGetZoom&& from) noexcept
    : CMsgGetZoom() {
    *this = ::std::move(from);
  }

  inline CMsgGetZoom& operator=(const CMsgGetZoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetZoom& operator=(CMsgGetZoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetZoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetZoom* internal_default_instance() {
    return reinterpret_cast<const CMsgGetZoom*>(
               &_CMsgGetZoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgGetZoom& a, CMsgGetZoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetZoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetZoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetZoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetZoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetZoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGetZoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetZoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetZoom";
  }
  protected:
  explicit CMsgGetZoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetZoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetZoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetZoomResponse) */ {
 public:
  inline CMsgGetZoomResponse() : CMsgGetZoomResponse(nullptr) {}
  ~CMsgGetZoomResponse() override;
  explicit constexpr CMsgGetZoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetZoomResponse(const CMsgGetZoomResponse& from);
  CMsgGetZoomResponse(CMsgGetZoomResponse&& from) noexcept
    : CMsgGetZoomResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGetZoomResponse& operator=(const CMsgGetZoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetZoomResponse& operator=(CMsgGetZoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetZoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetZoomResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGetZoomResponse*>(
               &_CMsgGetZoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgGetZoomResponse& a, CMsgGetZoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetZoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetZoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetZoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetZoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetZoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGetZoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetZoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetZoomResponse";
  }
  protected:
  explicit CMsgGetZoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kZoomFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional float zoom = 2;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetZoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  float zoom_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLinkAtPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLinkAtPosition) */ {
 public:
  inline CMsgLinkAtPosition() : CMsgLinkAtPosition(nullptr) {}
  ~CMsgLinkAtPosition() override;
  explicit constexpr CMsgLinkAtPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLinkAtPosition(const CMsgLinkAtPosition& from);
  CMsgLinkAtPosition(CMsgLinkAtPosition&& from) noexcept
    : CMsgLinkAtPosition() {
    *this = ::std::move(from);
  }

  inline CMsgLinkAtPosition& operator=(const CMsgLinkAtPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLinkAtPosition& operator=(CMsgLinkAtPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLinkAtPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLinkAtPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgLinkAtPosition*>(
               &_CMsgLinkAtPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgLinkAtPosition& a, CMsgLinkAtPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLinkAtPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLinkAtPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLinkAtPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLinkAtPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLinkAtPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLinkAtPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLinkAtPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLinkAtPosition";
  }
  protected:
  explicit CMsgLinkAtPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLinkAtPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t x_;
  uint32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLinkAtPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLinkAtPositionResponse) */ {
 public:
  inline CMsgLinkAtPositionResponse() : CMsgLinkAtPositionResponse(nullptr) {}
  ~CMsgLinkAtPositionResponse() override;
  explicit constexpr CMsgLinkAtPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from);
  CMsgLinkAtPositionResponse(CMsgLinkAtPositionResponse&& from) noexcept
    : CMsgLinkAtPositionResponse() {
    *this = ::std::move(from);
  }

  inline CMsgLinkAtPositionResponse& operator=(const CMsgLinkAtPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLinkAtPositionResponse& operator=(CMsgLinkAtPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLinkAtPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLinkAtPositionResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgLinkAtPositionResponse*>(
               &_CMsgLinkAtPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgLinkAtPositionResponse& a, CMsgLinkAtPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLinkAtPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLinkAtPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLinkAtPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLinkAtPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLinkAtPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLinkAtPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLinkAtPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLinkAtPositionResponse";
  }
  protected:
  explicit CMsgLinkAtPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kBlivelinkFieldNumber = 5,
    kBinputFieldNumber = 6,
  };
  // optional string url = 4;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // optional bool blivelink = 5;
  bool has_blivelink() const;
  private:
  bool _internal_has_blivelink() const;
  public:
  void clear_blivelink();
  bool blivelink() const;
  void set_blivelink(bool value);
  private:
  bool _internal_blivelink() const;
  void _internal_set_blivelink(bool value);
  public:

  // optional bool binput = 6;
  bool has_binput() const;
  private:
  bool _internal_has_binput() const;
  public:
  void clear_binput();
  bool binput() const;
  void set_binput(bool value);
  private:
  bool _internal_binput() const;
  void _internal_set_binput(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLinkAtPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  uint32_t x_;
  uint32_t y_;
  bool blivelink_;
  bool binput_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgZoomToElementAtPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgZoomToElementAtPosition) */ {
 public:
  inline CMsgZoomToElementAtPosition() : CMsgZoomToElementAtPosition(nullptr) {}
  ~CMsgZoomToElementAtPosition() override;
  explicit constexpr CMsgZoomToElementAtPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from);
  CMsgZoomToElementAtPosition(CMsgZoomToElementAtPosition&& from) noexcept
    : CMsgZoomToElementAtPosition() {
    *this = ::std::move(from);
  }

  inline CMsgZoomToElementAtPosition& operator=(const CMsgZoomToElementAtPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgZoomToElementAtPosition& operator=(CMsgZoomToElementAtPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgZoomToElementAtPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgZoomToElementAtPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgZoomToElementAtPosition*>(
               &_CMsgZoomToElementAtPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgZoomToElementAtPosition& a, CMsgZoomToElementAtPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgZoomToElementAtPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgZoomToElementAtPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgZoomToElementAtPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgZoomToElementAtPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgZoomToElementAtPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgZoomToElementAtPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgZoomToElementAtPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgZoomToElementAtPosition";
  }
  protected:
  explicit CMsgZoomToElementAtPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgZoomToElementAtPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t x_;
  uint32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgZoomToElementAtPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgZoomToElementAtPositionResponse) */ {
 public:
  inline CMsgZoomToElementAtPositionResponse() : CMsgZoomToElementAtPositionResponse(nullptr) {}
  ~CMsgZoomToElementAtPositionResponse() override;
  explicit constexpr CMsgZoomToElementAtPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from);
  CMsgZoomToElementAtPositionResponse(CMsgZoomToElementAtPositionResponse&& from) noexcept
    : CMsgZoomToElementAtPositionResponse() {
    *this = ::std::move(from);
  }

  inline CMsgZoomToElementAtPositionResponse& operator=(const CMsgZoomToElementAtPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgZoomToElementAtPositionResponse& operator=(CMsgZoomToElementAtPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgZoomToElementAtPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgZoomToElementAtPositionResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgZoomToElementAtPositionResponse*>(
               &_CMsgZoomToElementAtPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CMsgZoomToElementAtPositionResponse& a, CMsgZoomToElementAtPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgZoomToElementAtPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgZoomToElementAtPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgZoomToElementAtPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgZoomToElementAtPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgZoomToElementAtPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgZoomToElementAtPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgZoomToElementAtPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgZoomToElementAtPositionResponse";
  }
  protected:
  explicit CMsgZoomToElementAtPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScaleFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional float scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgZoomToElementAtPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  float scale_;
  float duration_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgScalePageToValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgScalePageToValue) */ {
 public:
  inline CMsgScalePageToValue() : CMsgScalePageToValue(nullptr) {}
  ~CMsgScalePageToValue() override;
  explicit constexpr CMsgScalePageToValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgScalePageToValue(const CMsgScalePageToValue& from);
  CMsgScalePageToValue(CMsgScalePageToValue&& from) noexcept
    : CMsgScalePageToValue() {
    *this = ::std::move(from);
  }

  inline CMsgScalePageToValue& operator=(const CMsgScalePageToValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgScalePageToValue& operator=(CMsgScalePageToValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgScalePageToValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgScalePageToValue* internal_default_instance() {
    return reinterpret_cast<const CMsgScalePageToValue*>(
               &_CMsgScalePageToValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CMsgScalePageToValue& a, CMsgScalePageToValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgScalePageToValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgScalePageToValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgScalePageToValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgScalePageToValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgScalePageToValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgScalePageToValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgScalePageToValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgScalePageToValue";
  }
  protected:
  explicit CMsgScalePageToValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kScaleFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional float scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgScalePageToValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  float scale_;
  float x_;
  float y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgForcePopupsToDirectHWND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgForcePopupsToDirectHWND) */ {
 public:
  inline CMsgForcePopupsToDirectHWND() : CMsgForcePopupsToDirectHWND(nullptr) {}
  ~CMsgForcePopupsToDirectHWND() override;
  explicit constexpr CMsgForcePopupsToDirectHWND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgForcePopupsToDirectHWND(const CMsgForcePopupsToDirectHWND& from);
  CMsgForcePopupsToDirectHWND(CMsgForcePopupsToDirectHWND&& from) noexcept
    : CMsgForcePopupsToDirectHWND() {
    *this = ::std::move(from);
  }

  inline CMsgForcePopupsToDirectHWND& operator=(const CMsgForcePopupsToDirectHWND& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgForcePopupsToDirectHWND& operator=(CMsgForcePopupsToDirectHWND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgForcePopupsToDirectHWND& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgForcePopupsToDirectHWND* internal_default_instance() {
    return reinterpret_cast<const CMsgForcePopupsToDirectHWND*>(
               &_CMsgForcePopupsToDirectHWND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CMsgForcePopupsToDirectHWND& a, CMsgForcePopupsToDirectHWND& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgForcePopupsToDirectHWND* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgForcePopupsToDirectHWND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgForcePopupsToDirectHWND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgForcePopupsToDirectHWND>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgForcePopupsToDirectHWND& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgForcePopupsToDirectHWND& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgForcePopupsToDirectHWND* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgForcePopupsToDirectHWND";
  }
  protected:
  explicit CMsgForcePopupsToDirectHWND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kForceDirectHwndPopupsFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool force_direct_hwnd_popups = 2;
  bool has_force_direct_hwnd_popups() const;
  private:
  bool _internal_has_force_direct_hwnd_popups() const;
  public:
  void clear_force_direct_hwnd_popups();
  bool force_direct_hwnd_popups() const;
  void set_force_direct_hwnd_popups(bool value);
  private:
  bool _internal_force_direct_hwnd_popups() const;
  void _internal_set_force_direct_hwnd_popups(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgForcePopupsToDirectHWND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool force_direct_hwnd_popups_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgScalePageToValueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgScalePageToValueResponse) */ {
 public:
  inline CMsgScalePageToValueResponse() : CMsgScalePageToValueResponse(nullptr) {}
  ~CMsgScalePageToValueResponse() override;
  explicit constexpr CMsgScalePageToValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from);
  CMsgScalePageToValueResponse(CMsgScalePageToValueResponse&& from) noexcept
    : CMsgScalePageToValueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgScalePageToValueResponse& operator=(const CMsgScalePageToValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgScalePageToValueResponse& operator=(CMsgScalePageToValueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgScalePageToValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgScalePageToValueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgScalePageToValueResponse*>(
               &_CMsgScalePageToValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CMsgScalePageToValueResponse& a, CMsgScalePageToValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgScalePageToValueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgScalePageToValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgScalePageToValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgScalePageToValueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgScalePageToValueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgScalePageToValueResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgScalePageToValueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgScalePageToValueResponse";
  }
  protected:
  explicit CMsgScalePageToValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kZoomFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional float zoom = 2;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgScalePageToValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  float zoom_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSavePageToJPEG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSavePageToJPEG) */ {
 public:
  inline CMsgSavePageToJPEG() : CMsgSavePageToJPEG(nullptr) {}
  ~CMsgSavePageToJPEG() override;
  explicit constexpr CMsgSavePageToJPEG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from);
  CMsgSavePageToJPEG(CMsgSavePageToJPEG&& from) noexcept
    : CMsgSavePageToJPEG() {
    *this = ::std::move(from);
  }

  inline CMsgSavePageToJPEG& operator=(const CMsgSavePageToJPEG& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSavePageToJPEG& operator=(CMsgSavePageToJPEG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSavePageToJPEG& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSavePageToJPEG* internal_default_instance() {
    return reinterpret_cast<const CMsgSavePageToJPEG*>(
               &_CMsgSavePageToJPEG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CMsgSavePageToJPEG& a, CMsgSavePageToJPEG& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSavePageToJPEG* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSavePageToJPEG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSavePageToJPEG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSavePageToJPEG>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSavePageToJPEG& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSavePageToJPEG& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSavePageToJPEG* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSavePageToJPEG";
  }
  protected:
  explicit CMsgSavePageToJPEG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSavePageToJPEG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t browser_handle_;
  uint32_t width_;
  uint32_t height_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSavePageToJPEGResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSavePageToJPEGResponse) */ {
 public:
  inline CMsgSavePageToJPEGResponse() : CMsgSavePageToJPEGResponse(nullptr) {}
  ~CMsgSavePageToJPEGResponse() override;
  explicit constexpr CMsgSavePageToJPEGResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from);
  CMsgSavePageToJPEGResponse(CMsgSavePageToJPEGResponse&& from) noexcept
    : CMsgSavePageToJPEGResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSavePageToJPEGResponse& operator=(const CMsgSavePageToJPEGResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSavePageToJPEGResponse& operator=(CMsgSavePageToJPEGResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSavePageToJPEGResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSavePageToJPEGResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSavePageToJPEGResponse*>(
               &_CMsgSavePageToJPEGResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CMsgSavePageToJPEGResponse& a, CMsgSavePageToJPEGResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSavePageToJPEGResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSavePageToJPEGResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSavePageToJPEGResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSavePageToJPEGResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSavePageToJPEGResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSavePageToJPEGResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSavePageToJPEGResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSavePageToJPEGResponse";
  }
  protected:
  explicit CMsgSavePageToJPEGResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSavePageToJPEGResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSAlert) */ {
 public:
  inline CMsgJSAlert() : CMsgJSAlert(nullptr) {}
  ~CMsgJSAlert() override;
  explicit constexpr CMsgJSAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSAlert(const CMsgJSAlert& from);
  CMsgJSAlert(CMsgJSAlert&& from) noexcept
    : CMsgJSAlert() {
    *this = ::std::move(from);
  }

  inline CMsgJSAlert& operator=(const CMsgJSAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSAlert& operator=(CMsgJSAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSAlert* internal_default_instance() {
    return reinterpret_cast<const CMsgJSAlert*>(
               &_CMsgJSAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CMsgJSAlert& a, CMsgJSAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSAlert& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSAlert";
  }
  protected:
  explicit CMsgJSAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSConfirm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSConfirm) */ {
 public:
  inline CMsgJSConfirm() : CMsgJSConfirm(nullptr) {}
  ~CMsgJSConfirm() override;
  explicit constexpr CMsgJSConfirm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSConfirm(const CMsgJSConfirm& from);
  CMsgJSConfirm(CMsgJSConfirm&& from) noexcept
    : CMsgJSConfirm() {
    *this = ::std::move(from);
  }

  inline CMsgJSConfirm& operator=(const CMsgJSConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSConfirm& operator=(CMsgJSConfirm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSConfirm& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSConfirm* internal_default_instance() {
    return reinterpret_cast<const CMsgJSConfirm*>(
               &_CMsgJSConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgJSConfirm& a, CMsgJSConfirm& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSConfirm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSConfirm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSConfirm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSConfirm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSConfirm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSConfirm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSConfirm";
  }
  protected:
  explicit CMsgJSConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSConfirm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSDialogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSDialogResponse) */ {
 public:
  inline CMsgJSDialogResponse() : CMsgJSDialogResponse(nullptr) {}
  ~CMsgJSDialogResponse() override;
  explicit constexpr CMsgJSDialogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSDialogResponse(const CMsgJSDialogResponse& from);
  CMsgJSDialogResponse(CMsgJSDialogResponse&& from) noexcept
    : CMsgJSDialogResponse() {
    *this = ::std::move(from);
  }

  inline CMsgJSDialogResponse& operator=(const CMsgJSDialogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSDialogResponse& operator=(CMsgJSDialogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSDialogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSDialogResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgJSDialogResponse*>(
               &_CMsgJSDialogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgJSDialogResponse& a, CMsgJSDialogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSDialogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSDialogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSDialogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSDialogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSDialogResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSDialogResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSDialogResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSDialogResponse";
  }
  protected:
  explicit CMsgJSDialogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSDialogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool result_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgCanGoBackAndForward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCanGoBackAndForward) */ {
 public:
  inline CMsgCanGoBackAndForward() : CMsgCanGoBackAndForward(nullptr) {}
  ~CMsgCanGoBackAndForward() override;
  explicit constexpr CMsgCanGoBackAndForward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from);
  CMsgCanGoBackAndForward(CMsgCanGoBackAndForward&& from) noexcept
    : CMsgCanGoBackAndForward() {
    *this = ::std::move(from);
  }

  inline CMsgCanGoBackAndForward& operator=(const CMsgCanGoBackAndForward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCanGoBackAndForward& operator=(CMsgCanGoBackAndForward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCanGoBackAndForward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCanGoBackAndForward* internal_default_instance() {
    return reinterpret_cast<const CMsgCanGoBackAndForward*>(
               &_CMsgCanGoBackAndForward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgCanGoBackAndForward& a, CMsgCanGoBackAndForward& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCanGoBackAndForward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCanGoBackAndForward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCanGoBackAndForward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCanGoBackAndForward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCanGoBackAndForward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCanGoBackAndForward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCanGoBackAndForward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCanGoBackAndForward";
  }
  protected:
  explicit CMsgCanGoBackAndForward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kBgobackFieldNumber = 2,
    kBgoforwardFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bgoback = 2;
  bool has_bgoback() const;
  private:
  bool _internal_has_bgoback() const;
  public:
  void clear_bgoback();
  bool bgoback() const;
  void set_bgoback(bool value);
  private:
  bool _internal_bgoback() const;
  void _internal_set_bgoback(bool value);
  public:

  // optional bool bgoforward = 3;
  bool has_bgoforward() const;
  private:
  bool _internal_has_bgoforward() const;
  public:
  void clear_bgoforward();
  bool bgoforward() const;
  void set_bgoforward(bool value);
  private:
  bool _internal_bgoforward() const;
  void _internal_set_bgoforward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCanGoBackAndForward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool bgoback_;
  bool bgoforward_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgOpenSteamURL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgOpenSteamURL) */ {
 public:
  inline CMsgOpenSteamURL() : CMsgOpenSteamURL(nullptr) {}
  ~CMsgOpenSteamURL() override;
  explicit constexpr CMsgOpenSteamURL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgOpenSteamURL(const CMsgOpenSteamURL& from);
  CMsgOpenSteamURL(CMsgOpenSteamURL&& from) noexcept
    : CMsgOpenSteamURL() {
    *this = ::std::move(from);
  }

  inline CMsgOpenSteamURL& operator=(const CMsgOpenSteamURL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgOpenSteamURL& operator=(CMsgOpenSteamURL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgOpenSteamURL& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgOpenSteamURL* internal_default_instance() {
    return reinterpret_cast<const CMsgOpenSteamURL*>(
               &_CMsgOpenSteamURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CMsgOpenSteamURL& a, CMsgOpenSteamURL& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgOpenSteamURL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgOpenSteamURL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgOpenSteamURL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgOpenSteamURL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgOpenSteamURL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgOpenSteamURL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgOpenSteamURL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgOpenSteamURL";
  }
  protected:
  explicit CMsgOpenSteamURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kReferrerFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string referrer = 3;
  bool has_referrer() const;
  private:
  bool _internal_has_referrer() const;
  public:
  void clear_referrer();
  const std::string& referrer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_referrer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_referrer();
  PROTOBUF_NODISCARD std::string* release_referrer();
  void set_allocated_referrer(std::string* referrer);
  private:
  const std::string& _internal_referrer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referrer(const std::string& value);
  std::string* _internal_mutable_referrer();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgOpenSteamURL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetCookie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetCookie) */ {
 public:
  inline CMsgSetCookie() : CMsgSetCookie(nullptr) {}
  ~CMsgSetCookie() override;
  explicit constexpr CMsgSetCookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetCookie(const CMsgSetCookie& from);
  CMsgSetCookie(CMsgSetCookie&& from) noexcept
    : CMsgSetCookie() {
    *this = ::std::move(from);
  }

  inline CMsgSetCookie& operator=(const CMsgSetCookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetCookie& operator=(CMsgSetCookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetCookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetCookie* internal_default_instance() {
    return reinterpret_cast<const CMsgSetCookie*>(
               &_CMsgSetCookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgSetCookie& a, CMsgSetCookie& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetCookie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetCookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetCookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetCookie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetCookie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetCookie& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetCookie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetCookie";
  }
  protected:
  explicit CMsgSetCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kPathFieldNumber = 3,
    kHostFieldNumber = 4,
    kExpiresFieldNumber = 5,
    kSecureFieldNumber = 6,
    kHttponlyFieldNumber = 7,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string host = 4;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // optional uint32 expires = 5;
  bool has_expires() const;
  private:
  bool _internal_has_expires() const;
  public:
  void clear_expires();
  uint32_t expires() const;
  void set_expires(uint32_t value);
  private:
  uint32_t _internal_expires() const;
  void _internal_set_expires(uint32_t value);
  public:

  // optional bool secure = 6;
  bool has_secure() const;
  private:
  bool _internal_has_secure() const;
  public:
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);
  private:
  bool _internal_secure() const;
  void _internal_set_secure(bool value);
  public:

  // optional bool httponly = 7;
  bool has_httponly() const;
  private:
  bool _internal_has_httponly() const;
  public:
  void clear_httponly();
  bool httponly() const;
  void set_httponly(bool value);
  private:
  bool _internal_httponly() const;
  void _internal_set_httponly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetCookie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  uint32_t expires_;
  bool secure_;
  bool httponly_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetTargetFrameRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetTargetFrameRate) */ {
 public:
  inline CMsgSetTargetFrameRate() : CMsgSetTargetFrameRate(nullptr) {}
  ~CMsgSetTargetFrameRate() override;
  explicit constexpr CMsgSetTargetFrameRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from);
  CMsgSetTargetFrameRate(CMsgSetTargetFrameRate&& from) noexcept
    : CMsgSetTargetFrameRate() {
    *this = ::std::move(from);
  }

  inline CMsgSetTargetFrameRate& operator=(const CMsgSetTargetFrameRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetTargetFrameRate& operator=(CMsgSetTargetFrameRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetTargetFrameRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetTargetFrameRate* internal_default_instance() {
    return reinterpret_cast<const CMsgSetTargetFrameRate*>(
               &_CMsgSetTargetFrameRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CMsgSetTargetFrameRate& a, CMsgSetTargetFrameRate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetTargetFrameRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetTargetFrameRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetTargetFrameRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetTargetFrameRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetTargetFrameRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetTargetFrameRate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetTargetFrameRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetTargetFrameRate";
  }
  protected:
  explicit CMsgSetTargetFrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kNTargetFrameRateFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 nTargetFrameRate = 2;
  bool has_ntargetframerate() const;
  private:
  bool _internal_has_ntargetframerate() const;
  public:
  void clear_ntargetframerate();
  uint32_t ntargetframerate() const;
  void set_ntargetframerate(uint32_t value);
  private:
  uint32_t _internal_ntargetframerate() const;
  void _internal_set_ntargetframerate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetTargetFrameRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t ntargetframerate_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPauseRepaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPauseRepaint) */ {
 public:
  inline CMsgPauseRepaint() : CMsgPauseRepaint(nullptr) {}
  ~CMsgPauseRepaint() override;
  explicit constexpr CMsgPauseRepaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPauseRepaint(const CMsgPauseRepaint& from);
  CMsgPauseRepaint(CMsgPauseRepaint&& from) noexcept
    : CMsgPauseRepaint() {
    *this = ::std::move(from);
  }

  inline CMsgPauseRepaint& operator=(const CMsgPauseRepaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPauseRepaint& operator=(CMsgPauseRepaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPauseRepaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPauseRepaint* internal_default_instance() {
    return reinterpret_cast<const CMsgPauseRepaint*>(
               &_CMsgPauseRepaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CMsgPauseRepaint& a, CMsgPauseRepaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPauseRepaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPauseRepaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPauseRepaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPauseRepaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPauseRepaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPauseRepaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPauseRepaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPauseRepaint";
  }
  protected:
  explicit CMsgPauseRepaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPauseRepaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFullRepaint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFullRepaint) */ {
 public:
  inline CMsgFullRepaint() : CMsgFullRepaint(nullptr) {}
  ~CMsgFullRepaint() override;
  explicit constexpr CMsgFullRepaint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFullRepaint(const CMsgFullRepaint& from);
  CMsgFullRepaint(CMsgFullRepaint&& from) noexcept
    : CMsgFullRepaint() {
    *this = ::std::move(from);
  }

  inline CMsgFullRepaint& operator=(const CMsgFullRepaint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFullRepaint& operator=(CMsgFullRepaint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFullRepaint& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFullRepaint* internal_default_instance() {
    return reinterpret_cast<const CMsgFullRepaint*>(
               &_CMsgFullRepaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CMsgFullRepaint& a, CMsgFullRepaint& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFullRepaint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFullRepaint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFullRepaint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFullRepaint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFullRepaint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFullRepaint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFullRepaint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFullRepaint";
  }
  protected:
  explicit CMsgFullRepaint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFullRepaint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgRequestFullScreen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRequestFullScreen) */ {
 public:
  inline CMsgRequestFullScreen() : CMsgRequestFullScreen(nullptr) {}
  ~CMsgRequestFullScreen() override;
  explicit constexpr CMsgRequestFullScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRequestFullScreen(const CMsgRequestFullScreen& from);
  CMsgRequestFullScreen(CMsgRequestFullScreen&& from) noexcept
    : CMsgRequestFullScreen() {
    *this = ::std::move(from);
  }

  inline CMsgRequestFullScreen& operator=(const CMsgRequestFullScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRequestFullScreen& operator=(CMsgRequestFullScreen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRequestFullScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRequestFullScreen* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestFullScreen*>(
               &_CMsgRequestFullScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CMsgRequestFullScreen& a, CMsgRequestFullScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRequestFullScreen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRequestFullScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgRequestFullScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgRequestFullScreen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgRequestFullScreen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgRequestFullScreen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRequestFullScreen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRequestFullScreen";
  }
  protected:
  explicit CMsgRequestFullScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRequestFullScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgExitFullScreen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgExitFullScreen) */ {
 public:
  inline CMsgExitFullScreen() : CMsgExitFullScreen(nullptr) {}
  ~CMsgExitFullScreen() override;
  explicit constexpr CMsgExitFullScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgExitFullScreen(const CMsgExitFullScreen& from);
  CMsgExitFullScreen(CMsgExitFullScreen&& from) noexcept
    : CMsgExitFullScreen() {
    *this = ::std::move(from);
  }

  inline CMsgExitFullScreen& operator=(const CMsgExitFullScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgExitFullScreen& operator=(CMsgExitFullScreen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgExitFullScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgExitFullScreen* internal_default_instance() {
    return reinterpret_cast<const CMsgExitFullScreen*>(
               &_CMsgExitFullScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CMsgExitFullScreen& a, CMsgExitFullScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgExitFullScreen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgExitFullScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgExitFullScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgExitFullScreen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgExitFullScreen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgExitFullScreen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgExitFullScreen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgExitFullScreen";
  }
  protected:
  explicit CMsgExitFullScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgExitFullScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgToggleFindInPageDialog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgToggleFindInPageDialog) */ {
 public:
  inline CMsgToggleFindInPageDialog() : CMsgToggleFindInPageDialog(nullptr) {}
  ~CMsgToggleFindInPageDialog() override;
  explicit constexpr CMsgToggleFindInPageDialog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgToggleFindInPageDialog(const CMsgToggleFindInPageDialog& from);
  CMsgToggleFindInPageDialog(CMsgToggleFindInPageDialog&& from) noexcept
    : CMsgToggleFindInPageDialog() {
    *this = ::std::move(from);
  }

  inline CMsgToggleFindInPageDialog& operator=(const CMsgToggleFindInPageDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgToggleFindInPageDialog& operator=(CMsgToggleFindInPageDialog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgToggleFindInPageDialog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgToggleFindInPageDialog* internal_default_instance() {
    return reinterpret_cast<const CMsgToggleFindInPageDialog*>(
               &_CMsgToggleFindInPageDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CMsgToggleFindInPageDialog& a, CMsgToggleFindInPageDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgToggleFindInPageDialog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgToggleFindInPageDialog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgToggleFindInPageDialog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgToggleFindInPageDialog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgToggleFindInPageDialog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgToggleFindInPageDialog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgToggleFindInPageDialog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgToggleFindInPageDialog";
  }
  protected:
  explicit CMsgToggleFindInPageDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgToggleFindInPageDialog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetPIDShuttingDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetPIDShuttingDown) */ {
 public:
  inline CMsgSetPIDShuttingDown() : CMsgSetPIDShuttingDown(nullptr) {}
  ~CMsgSetPIDShuttingDown() override;
  explicit constexpr CMsgSetPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetPIDShuttingDown(const CMsgSetPIDShuttingDown& from);
  CMsgSetPIDShuttingDown(CMsgSetPIDShuttingDown&& from) noexcept
    : CMsgSetPIDShuttingDown() {
    *this = ::std::move(from);
  }

  inline CMsgSetPIDShuttingDown& operator=(const CMsgSetPIDShuttingDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetPIDShuttingDown& operator=(CMsgSetPIDShuttingDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetPIDShuttingDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetPIDShuttingDown* internal_default_instance() {
    return reinterpret_cast<const CMsgSetPIDShuttingDown*>(
               &_CMsgSetPIDShuttingDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CMsgSetPIDShuttingDown& a, CMsgSetPIDShuttingDown& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetPIDShuttingDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetPIDShuttingDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetPIDShuttingDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetPIDShuttingDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetPIDShuttingDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetPIDShuttingDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetPIDShuttingDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetPIDShuttingDown";
  }
  protected:
  explicit CMsgSetPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetPIDShuttingDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgDisableBackgroundThrottling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDisableBackgroundThrottling) */ {
 public:
  inline CMsgDisableBackgroundThrottling() : CMsgDisableBackgroundThrottling(nullptr) {}
  ~CMsgDisableBackgroundThrottling() override;
  explicit constexpr CMsgDisableBackgroundThrottling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDisableBackgroundThrottling(const CMsgDisableBackgroundThrottling& from);
  CMsgDisableBackgroundThrottling(CMsgDisableBackgroundThrottling&& from) noexcept
    : CMsgDisableBackgroundThrottling() {
    *this = ::std::move(from);
  }

  inline CMsgDisableBackgroundThrottling& operator=(const CMsgDisableBackgroundThrottling& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDisableBackgroundThrottling& operator=(CMsgDisableBackgroundThrottling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDisableBackgroundThrottling& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDisableBackgroundThrottling* internal_default_instance() {
    return reinterpret_cast<const CMsgDisableBackgroundThrottling*>(
               &_CMsgDisableBackgroundThrottling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CMsgDisableBackgroundThrottling& a, CMsgDisableBackgroundThrottling& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDisableBackgroundThrottling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDisableBackgroundThrottling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDisableBackgroundThrottling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDisableBackgroundThrottling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDisableBackgroundThrottling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDisableBackgroundThrottling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDisableBackgroundThrottling* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDisableBackgroundThrottling";
  }
  protected:
  explicit CMsgDisableBackgroundThrottling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDisableBackgroundThrottling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAckPIDShuttingDown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAckPIDShuttingDown) */ {
 public:
  inline CMsgAckPIDShuttingDown() : CMsgAckPIDShuttingDown(nullptr) {}
  ~CMsgAckPIDShuttingDown() override;
  explicit constexpr CMsgAckPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAckPIDShuttingDown(const CMsgAckPIDShuttingDown& from);
  CMsgAckPIDShuttingDown(CMsgAckPIDShuttingDown&& from) noexcept
    : CMsgAckPIDShuttingDown() {
    *this = ::std::move(from);
  }

  inline CMsgAckPIDShuttingDown& operator=(const CMsgAckPIDShuttingDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAckPIDShuttingDown& operator=(CMsgAckPIDShuttingDown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAckPIDShuttingDown& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAckPIDShuttingDown* internal_default_instance() {
    return reinterpret_cast<const CMsgAckPIDShuttingDown*>(
               &_CMsgAckPIDShuttingDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CMsgAckPIDShuttingDown& a, CMsgAckPIDShuttingDown& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAckPIDShuttingDown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAckPIDShuttingDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAckPIDShuttingDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAckPIDShuttingDown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAckPIDShuttingDown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAckPIDShuttingDown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAckPIDShuttingDown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAckPIDShuttingDown";
  }
  protected:
  explicit CMsgAckPIDShuttingDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAckPIDShuttingDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetCookiesForURL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetCookiesForURL) */ {
 public:
  inline CMsgGetCookiesForURL() : CMsgGetCookiesForURL(nullptr) {}
  ~CMsgGetCookiesForURL() override;
  explicit constexpr CMsgGetCookiesForURL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from);
  CMsgGetCookiesForURL(CMsgGetCookiesForURL&& from) noexcept
    : CMsgGetCookiesForURL() {
    *this = ::std::move(from);
  }

  inline CMsgGetCookiesForURL& operator=(const CMsgGetCookiesForURL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetCookiesForURL& operator=(CMsgGetCookiesForURL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetCookiesForURL& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetCookiesForURL* internal_default_instance() {
    return reinterpret_cast<const CMsgGetCookiesForURL*>(
               &_CMsgGetCookiesForURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CMsgGetCookiesForURL& a, CMsgGetCookiesForURL& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetCookiesForURL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetCookiesForURL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetCookiesForURL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetCookiesForURL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetCookiesForURL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGetCookiesForURL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetCookiesForURL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetCookiesForURL";
  }
  protected:
  explicit CMsgGetCookiesForURL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetCookiesForURL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CCookie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCookie) */ {
 public:
  inline CCookie() : CCookie(nullptr) {}
  ~CCookie() override;
  explicit constexpr CCookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCookie(const CCookie& from);
  CCookie(CCookie&& from) noexcept
    : CCookie() {
    *this = ::std::move(from);
  }

  inline CCookie& operator=(const CCookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCookie& operator=(CCookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCookie* internal_default_instance() {
    return reinterpret_cast<const CCookie*>(
               &_CCookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CCookie& a, CCookie& b) {
    a.Swap(&b);
  }
  inline void Swap(CCookie* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCookie>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCookie& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCookie& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCookie* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCookie";
  }
  protected:
  explicit CCookie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kDomainFieldNumber = 3,
    kPathFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string domain = 3;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string path = 4;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:CCookie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGetCookiesForURLResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGetCookiesForURLResponse) */ {
 public:
  inline CMsgGetCookiesForURLResponse() : CMsgGetCookiesForURLResponse(nullptr) {}
  ~CMsgGetCookiesForURLResponse() override;
  explicit constexpr CMsgGetCookiesForURLResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from);
  CMsgGetCookiesForURLResponse(CMsgGetCookiesForURLResponse&& from) noexcept
    : CMsgGetCookiesForURLResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGetCookiesForURLResponse& operator=(const CMsgGetCookiesForURLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGetCookiesForURLResponse& operator=(CMsgGetCookiesForURLResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGetCookiesForURLResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGetCookiesForURLResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGetCookiesForURLResponse*>(
               &_CMsgGetCookiesForURLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CMsgGetCookiesForURLResponse& a, CMsgGetCookiesForURLResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGetCookiesForURLResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGetCookiesForURLResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGetCookiesForURLResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGetCookiesForURLResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGetCookiesForURLResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGetCookiesForURLResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGetCookiesForURLResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGetCookiesForURLResponse";
  }
  protected:
  explicit CMsgGetCookiesForURLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookiesFieldNumber = 3,
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated .CCookie cookies = 3;
  int cookies_size() const;
  private:
  int _internal_cookies_size() const;
  public:
  void clear_cookies();
  ::CCookie* mutable_cookies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCookie >*
      mutable_cookies();
  private:
  const ::CCookie& _internal_cookies(int index) const;
  ::CCookie* _internal_add_cookies();
  public:
  const ::CCookie& cookies(int index) const;
  ::CCookie* add_cookies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCookie >&
      cookies() const;

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGetCookiesForURLResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCookie > cookies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNodeHasFocus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNodeHasFocus) */ {
 public:
  inline CMsgNodeHasFocus() : CMsgNodeHasFocus(nullptr) {}
  ~CMsgNodeHasFocus() override;
  explicit constexpr CMsgNodeHasFocus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNodeHasFocus(const CMsgNodeHasFocus& from);
  CMsgNodeHasFocus(CMsgNodeHasFocus&& from) noexcept
    : CMsgNodeHasFocus() {
    *this = ::std::move(from);
  }

  inline CMsgNodeHasFocus& operator=(const CMsgNodeHasFocus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNodeHasFocus& operator=(CMsgNodeHasFocus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNodeHasFocus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNodeHasFocus* internal_default_instance() {
    return reinterpret_cast<const CMsgNodeHasFocus*>(
               &_CMsgNodeHasFocus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CMsgNodeHasFocus& a, CMsgNodeHasFocus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNodeHasFocus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNodeHasFocus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNodeHasFocus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNodeHasFocus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNodeHasFocus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNodeHasFocus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNodeHasFocus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNodeHasFocus";
  }
  protected:
  explicit CMsgNodeHasFocus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kElementtagnameFieldNumber = 4,
    kSearchbuttontextFieldNumber = 5,
    kInputTypeFieldNumber = 7,
    kBrowserHandleFieldNumber = 1,
    kBInputFieldNumber = 2,
    kBHasMultipleInputsFieldNumber = 6,
    kBIsMainFrameFieldNumber = 8,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string elementtagname = 4;
  bool has_elementtagname() const;
  private:
  bool _internal_has_elementtagname() const;
  public:
  void clear_elementtagname();
  const std::string& elementtagname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elementtagname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elementtagname();
  PROTOBUF_NODISCARD std::string* release_elementtagname();
  void set_allocated_elementtagname(std::string* elementtagname);
  private:
  const std::string& _internal_elementtagname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elementtagname(const std::string& value);
  std::string* _internal_mutable_elementtagname();
  public:

  // optional string searchbuttontext = 5;
  bool has_searchbuttontext() const;
  private:
  bool _internal_has_searchbuttontext() const;
  public:
  void clear_searchbuttontext();
  const std::string& searchbuttontext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_searchbuttontext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_searchbuttontext();
  PROTOBUF_NODISCARD std::string* release_searchbuttontext();
  void set_allocated_searchbuttontext(std::string* searchbuttontext);
  private:
  const std::string& _internal_searchbuttontext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_searchbuttontext(const std::string& value);
  std::string* _internal_mutable_searchbuttontext();
  public:

  // optional string input_type = 7;
  bool has_input_type() const;
  private:
  bool _internal_has_input_type() const;
  public:
  void clear_input_type();
  const std::string& input_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_type();
  PROTOBUF_NODISCARD std::string* release_input_type();
  void set_allocated_input_type(std::string* input_type);
  private:
  const std::string& _internal_input_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_type(const std::string& value);
  std::string* _internal_mutable_input_type();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool bInput = 2;
  bool has_binput() const;
  private:
  bool _internal_has_binput() const;
  public:
  void clear_binput();
  bool binput() const;
  void set_binput(bool value);
  private:
  bool _internal_binput() const;
  void _internal_set_binput(bool value);
  public:

  // optional bool bHasMultipleInputs = 6;
  bool has_bhasmultipleinputs() const;
  private:
  bool _internal_has_bhasmultipleinputs() const;
  public:
  void clear_bhasmultipleinputs();
  bool bhasmultipleinputs() const;
  void set_bhasmultipleinputs(bool value);
  private:
  bool _internal_bhasmultipleinputs() const;
  void _internal_set_bhasmultipleinputs(bool value);
  public:

  // optional bool bIsMainFrame = 8;
  bool has_bismainframe() const;
  private:
  bool _internal_has_bismainframe() const;
  public:
  void clear_bismainframe();
  bool bismainframe() const;
  void set_bismainframe(bool value);
  private:
  bool _internal_bismainframe() const;
  void _internal_set_bismainframe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNodeHasFocus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elementtagname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr searchbuttontext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_type_;
  uint32_t browser_handle_;
  bool binput_;
  bool bhasmultipleinputs_;
  bool bismainframe_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgZoomToFocusedElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgZoomToFocusedElement) */ {
 public:
  inline CMsgZoomToFocusedElement() : CMsgZoomToFocusedElement(nullptr) {}
  ~CMsgZoomToFocusedElement() override;
  explicit constexpr CMsgZoomToFocusedElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from);
  CMsgZoomToFocusedElement(CMsgZoomToFocusedElement&& from) noexcept
    : CMsgZoomToFocusedElement() {
    *this = ::std::move(from);
  }

  inline CMsgZoomToFocusedElement& operator=(const CMsgZoomToFocusedElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgZoomToFocusedElement& operator=(CMsgZoomToFocusedElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgZoomToFocusedElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgZoomToFocusedElement* internal_default_instance() {
    return reinterpret_cast<const CMsgZoomToFocusedElement*>(
               &_CMsgZoomToFocusedElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CMsgZoomToFocusedElement& a, CMsgZoomToFocusedElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgZoomToFocusedElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgZoomToFocusedElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgZoomToFocusedElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgZoomToFocusedElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgZoomToFocusedElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgZoomToFocusedElement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgZoomToFocusedElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgZoomToFocusedElement";
  }
  protected:
  explicit CMsgZoomToFocusedElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgZoomToFocusedElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgCloseFullScreenFlashIfOpen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCloseFullScreenFlashIfOpen) */ {
 public:
  inline CMsgCloseFullScreenFlashIfOpen() : CMsgCloseFullScreenFlashIfOpen(nullptr) {}
  ~CMsgCloseFullScreenFlashIfOpen() override;
  explicit constexpr CMsgCloseFullScreenFlashIfOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCloseFullScreenFlashIfOpen(const CMsgCloseFullScreenFlashIfOpen& from);
  CMsgCloseFullScreenFlashIfOpen(CMsgCloseFullScreenFlashIfOpen&& from) noexcept
    : CMsgCloseFullScreenFlashIfOpen() {
    *this = ::std::move(from);
  }

  inline CMsgCloseFullScreenFlashIfOpen& operator=(const CMsgCloseFullScreenFlashIfOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCloseFullScreenFlashIfOpen& operator=(CMsgCloseFullScreenFlashIfOpen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCloseFullScreenFlashIfOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCloseFullScreenFlashIfOpen* internal_default_instance() {
    return reinterpret_cast<const CMsgCloseFullScreenFlashIfOpen*>(
               &_CMsgCloseFullScreenFlashIfOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CMsgCloseFullScreenFlashIfOpen& a, CMsgCloseFullScreenFlashIfOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCloseFullScreenFlashIfOpen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCloseFullScreenFlashIfOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCloseFullScreenFlashIfOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCloseFullScreenFlashIfOpen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCloseFullScreenFlashIfOpen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCloseFullScreenFlashIfOpen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCloseFullScreenFlashIfOpen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCloseFullScreenFlashIfOpen";
  }
  protected:
  explicit CMsgCloseFullScreenFlashIfOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCloseFullScreenFlashIfOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPauseFullScreenFlashMovieIfOpen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPauseFullScreenFlashMovieIfOpen) */ {
 public:
  inline CMsgPauseFullScreenFlashMovieIfOpen() : CMsgPauseFullScreenFlashMovieIfOpen(nullptr) {}
  ~CMsgPauseFullScreenFlashMovieIfOpen() override;
  explicit constexpr CMsgPauseFullScreenFlashMovieIfOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPauseFullScreenFlashMovieIfOpen(const CMsgPauseFullScreenFlashMovieIfOpen& from);
  CMsgPauseFullScreenFlashMovieIfOpen(CMsgPauseFullScreenFlashMovieIfOpen&& from) noexcept
    : CMsgPauseFullScreenFlashMovieIfOpen() {
    *this = ::std::move(from);
  }

  inline CMsgPauseFullScreenFlashMovieIfOpen& operator=(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPauseFullScreenFlashMovieIfOpen& operator=(CMsgPauseFullScreenFlashMovieIfOpen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPauseFullScreenFlashMovieIfOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPauseFullScreenFlashMovieIfOpen* internal_default_instance() {
    return reinterpret_cast<const CMsgPauseFullScreenFlashMovieIfOpen*>(
               &_CMsgPauseFullScreenFlashMovieIfOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CMsgPauseFullScreenFlashMovieIfOpen& a, CMsgPauseFullScreenFlashMovieIfOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPauseFullScreenFlashMovieIfOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPauseFullScreenFlashMovieIfOpen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPauseFullScreenFlashMovieIfOpen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPauseFullScreenFlashMovieIfOpen";
  }
  protected:
  explicit CMsgPauseFullScreenFlashMovieIfOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPauseFullScreenFlashMovieIfOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFocusedNodeText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFocusedNodeText) */ {
 public:
  inline CMsgFocusedNodeText() : CMsgFocusedNodeText(nullptr) {}
  ~CMsgFocusedNodeText() override;
  explicit constexpr CMsgFocusedNodeText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFocusedNodeText(const CMsgFocusedNodeText& from);
  CMsgFocusedNodeText(CMsgFocusedNodeText&& from) noexcept
    : CMsgFocusedNodeText() {
    *this = ::std::move(from);
  }

  inline CMsgFocusedNodeText& operator=(const CMsgFocusedNodeText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFocusedNodeText& operator=(CMsgFocusedNodeText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFocusedNodeText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFocusedNodeText* internal_default_instance() {
    return reinterpret_cast<const CMsgFocusedNodeText*>(
               &_CMsgFocusedNodeText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CMsgFocusedNodeText& a, CMsgFocusedNodeText& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFocusedNodeText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFocusedNodeText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFocusedNodeText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFocusedNodeText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFocusedNodeText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFocusedNodeText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFocusedNodeText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFocusedNodeText";
  }
  protected:
  explicit CMsgFocusedNodeText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFocusedNodeText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgFocusedNodeTextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFocusedNodeTextResponse) */ {
 public:
  inline CMsgFocusedNodeTextResponse() : CMsgFocusedNodeTextResponse(nullptr) {}
  ~CMsgFocusedNodeTextResponse() override;
  explicit constexpr CMsgFocusedNodeTextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from);
  CMsgFocusedNodeTextResponse(CMsgFocusedNodeTextResponse&& from) noexcept
    : CMsgFocusedNodeTextResponse() {
    *this = ::std::move(from);
  }

  inline CMsgFocusedNodeTextResponse& operator=(const CMsgFocusedNodeTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFocusedNodeTextResponse& operator=(CMsgFocusedNodeTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgFocusedNodeTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFocusedNodeTextResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgFocusedNodeTextResponse*>(
               &_CMsgFocusedNodeTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CMsgFocusedNodeTextResponse& a, CMsgFocusedNodeTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFocusedNodeTextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFocusedNodeTextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgFocusedNodeTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgFocusedNodeTextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgFocusedNodeTextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgFocusedNodeTextResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFocusedNodeTextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFocusedNodeTextResponse";
  }
  protected:
  explicit CMsgFocusedNodeTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFocusedNodeTextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBuildID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBuildID) */ {
 public:
  inline CMsgBuildID() : CMsgBuildID(nullptr) {}
  ~CMsgBuildID() override;
  explicit constexpr CMsgBuildID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBuildID(const CMsgBuildID& from);
  CMsgBuildID(CMsgBuildID&& from) noexcept
    : CMsgBuildID() {
    *this = ::std::move(from);
  }

  inline CMsgBuildID& operator=(const CMsgBuildID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBuildID& operator=(CMsgBuildID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBuildID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBuildID* internal_default_instance() {
    return reinterpret_cast<const CMsgBuildID*>(
               &_CMsgBuildID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CMsgBuildID& a, CMsgBuildID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBuildID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBuildID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBuildID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBuildID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBuildID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBuildID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBuildID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBuildID";
  }
  protected:
  explicit CMsgBuildID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildIdFieldNumber = 1,
  };
  // optional uint64 build_id = 1;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  uint64_t build_id() const;
  void set_build_id(uint64_t value);
  private:
  uint64_t _internal_build_id() const;
  void _internal_set_build_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBuildID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t build_id_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgOpenDevTools final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgOpenDevTools) */ {
 public:
  inline CMsgOpenDevTools() : CMsgOpenDevTools(nullptr) {}
  ~CMsgOpenDevTools() override;
  explicit constexpr CMsgOpenDevTools(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgOpenDevTools(const CMsgOpenDevTools& from);
  CMsgOpenDevTools(CMsgOpenDevTools&& from) noexcept
    : CMsgOpenDevTools() {
    *this = ::std::move(from);
  }

  inline CMsgOpenDevTools& operator=(const CMsgOpenDevTools& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgOpenDevTools& operator=(CMsgOpenDevTools&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgOpenDevTools& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgOpenDevTools* internal_default_instance() {
    return reinterpret_cast<const CMsgOpenDevTools*>(
               &_CMsgOpenDevTools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CMsgOpenDevTools& a, CMsgOpenDevTools& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgOpenDevTools* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgOpenDevTools* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgOpenDevTools* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgOpenDevTools>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgOpenDevTools& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgOpenDevTools& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgOpenDevTools* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgOpenDevTools";
  }
  protected:
  explicit CMsgOpenDevTools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgOpenDevTools)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgCloseDevTools final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCloseDevTools) */ {
 public:
  inline CMsgCloseDevTools() : CMsgCloseDevTools(nullptr) {}
  ~CMsgCloseDevTools() override;
  explicit constexpr CMsgCloseDevTools(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCloseDevTools(const CMsgCloseDevTools& from);
  CMsgCloseDevTools(CMsgCloseDevTools&& from) noexcept
    : CMsgCloseDevTools() {
    *this = ::std::move(from);
  }

  inline CMsgCloseDevTools& operator=(const CMsgCloseDevTools& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCloseDevTools& operator=(CMsgCloseDevTools&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCloseDevTools& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCloseDevTools* internal_default_instance() {
    return reinterpret_cast<const CMsgCloseDevTools*>(
               &_CMsgCloseDevTools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CMsgCloseDevTools& a, CMsgCloseDevTools& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCloseDevTools* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCloseDevTools* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCloseDevTools* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCloseDevTools>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCloseDevTools& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCloseDevTools& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCloseDevTools* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCloseDevTools";
  }
  protected:
  explicit CMsgCloseDevTools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCloseDevTools)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgUnlockH264 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgUnlockH264) */ {
 public:
  inline CMsgUnlockH264() : CMsgUnlockH264(nullptr) {}
  ~CMsgUnlockH264() override;
  explicit constexpr CMsgUnlockH264(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgUnlockH264(const CMsgUnlockH264& from);
  CMsgUnlockH264(CMsgUnlockH264&& from) noexcept
    : CMsgUnlockH264() {
    *this = ::std::move(from);
  }

  inline CMsgUnlockH264& operator=(const CMsgUnlockH264& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgUnlockH264& operator=(CMsgUnlockH264&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgUnlockH264& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgUnlockH264* internal_default_instance() {
    return reinterpret_cast<const CMsgUnlockH264*>(
               &_CMsgUnlockH264_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CMsgUnlockH264& a, CMsgUnlockH264& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgUnlockH264* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgUnlockH264* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgUnlockH264* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgUnlockH264>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgUnlockH264& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgUnlockH264& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgUnlockH264* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgUnlockH264";
  }
  protected:
  explicit CMsgUnlockH264(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockCodeFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string unlock_code = 2;
  bool has_unlock_code() const;
  private:
  bool _internal_has_unlock_code() const;
  public:
  void clear_unlock_code();
  const std::string& unlock_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unlock_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unlock_code();
  PROTOBUF_NODISCARD std::string* release_unlock_code();
  void set_allocated_unlock_code(std::string* unlock_code);
  private:
  const std::string& _internal_unlock_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unlock_code(const std::string& value);
  std::string* _internal_mutable_unlock_code();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgUnlockH264)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlock_code_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgScreenInformationChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgScreenInformationChanged) */ {
 public:
  inline CMsgScreenInformationChanged() : CMsgScreenInformationChanged(nullptr) {}
  ~CMsgScreenInformationChanged() override;
  explicit constexpr CMsgScreenInformationChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgScreenInformationChanged(const CMsgScreenInformationChanged& from);
  CMsgScreenInformationChanged(CMsgScreenInformationChanged&& from) noexcept
    : CMsgScreenInformationChanged() {
    *this = ::std::move(from);
  }

  inline CMsgScreenInformationChanged& operator=(const CMsgScreenInformationChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgScreenInformationChanged& operator=(CMsgScreenInformationChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgScreenInformationChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgScreenInformationChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgScreenInformationChanged*>(
               &_CMsgScreenInformationChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CMsgScreenInformationChanged& a, CMsgScreenInformationChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgScreenInformationChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgScreenInformationChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgScreenInformationChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgScreenInformationChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgScreenInformationChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgScreenInformationChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgScreenInformationChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgScreenInformationChanged";
  }
  protected:
  explicit CMsgScreenInformationChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kOverrideWidthFieldNumber = 2,
    kOverrideHeightFieldNumber = 3,
    kMonitorLeftFieldNumber = 4,
    kMonitorTopFieldNumber = 5,
    kMonitorRightFieldNumber = 6,
    kMonitorBottomFieldNumber = 7,
    kUsableLeftFieldNumber = 8,
    kUsableTopFieldNumber = 9,
    kUsableRightFieldNumber = 10,
    kUsableBottomFieldNumber = 11,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 override_width = 2;
  bool has_override_width() const;
  private:
  bool _internal_has_override_width() const;
  public:
  void clear_override_width();
  uint32_t override_width() const;
  void set_override_width(uint32_t value);
  private:
  uint32_t _internal_override_width() const;
  void _internal_set_override_width(uint32_t value);
  public:

  // optional uint32 override_height = 3;
  bool has_override_height() const;
  private:
  bool _internal_has_override_height() const;
  public:
  void clear_override_height();
  uint32_t override_height() const;
  void set_override_height(uint32_t value);
  private:
  uint32_t _internal_override_height() const;
  void _internal_set_override_height(uint32_t value);
  public:

  // optional uint32 monitor_left = 4;
  bool has_monitor_left() const;
  private:
  bool _internal_has_monitor_left() const;
  public:
  void clear_monitor_left();
  uint32_t monitor_left() const;
  void set_monitor_left(uint32_t value);
  private:
  uint32_t _internal_monitor_left() const;
  void _internal_set_monitor_left(uint32_t value);
  public:

  // optional uint32 monitor_top = 5;
  bool has_monitor_top() const;
  private:
  bool _internal_has_monitor_top() const;
  public:
  void clear_monitor_top();
  uint32_t monitor_top() const;
  void set_monitor_top(uint32_t value);
  private:
  uint32_t _internal_monitor_top() const;
  void _internal_set_monitor_top(uint32_t value);
  public:

  // optional uint32 monitor_right = 6;
  bool has_monitor_right() const;
  private:
  bool _internal_has_monitor_right() const;
  public:
  void clear_monitor_right();
  uint32_t monitor_right() const;
  void set_monitor_right(uint32_t value);
  private:
  uint32_t _internal_monitor_right() const;
  void _internal_set_monitor_right(uint32_t value);
  public:

  // optional uint32 monitor_bottom = 7;
  bool has_monitor_bottom() const;
  private:
  bool _internal_has_monitor_bottom() const;
  public:
  void clear_monitor_bottom();
  uint32_t monitor_bottom() const;
  void set_monitor_bottom(uint32_t value);
  private:
  uint32_t _internal_monitor_bottom() const;
  void _internal_set_monitor_bottom(uint32_t value);
  public:

  // optional uint32 usable_left = 8;
  bool has_usable_left() const;
  private:
  bool _internal_has_usable_left() const;
  public:
  void clear_usable_left();
  uint32_t usable_left() const;
  void set_usable_left(uint32_t value);
  private:
  uint32_t _internal_usable_left() const;
  void _internal_set_usable_left(uint32_t value);
  public:

  // optional uint32 usable_top = 9;
  bool has_usable_top() const;
  private:
  bool _internal_has_usable_top() const;
  public:
  void clear_usable_top();
  uint32_t usable_top() const;
  void set_usable_top(uint32_t value);
  private:
  uint32_t _internal_usable_top() const;
  void _internal_set_usable_top(uint32_t value);
  public:

  // optional uint32 usable_right = 10;
  bool has_usable_right() const;
  private:
  bool _internal_has_usable_right() const;
  public:
  void clear_usable_right();
  uint32_t usable_right() const;
  void set_usable_right(uint32_t value);
  private:
  uint32_t _internal_usable_right() const;
  void _internal_set_usable_right(uint32_t value);
  public:

  // optional uint32 usable_bottom = 11;
  bool has_usable_bottom() const;
  private:
  bool _internal_has_usable_bottom() const;
  public:
  void clear_usable_bottom();
  uint32_t usable_bottom() const;
  void set_usable_bottom(uint32_t value);
  private:
  uint32_t _internal_usable_bottom() const;
  void _internal_set_usable_bottom(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgScreenInformationChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t override_width_;
  uint32_t override_height_;
  uint32_t monitor_left_;
  uint32_t monitor_top_;
  uint32_t monitor_right_;
  uint32_t monitor_bottom_;
  uint32_t usable_left_;
  uint32_t usable_top_;
  uint32_t usable_right_;
  uint32_t usable_bottom_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgClearAllCookies final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClearAllCookies) */ {
 public:
  inline CMsgClearAllCookies() : CMsgClearAllCookies(nullptr) {}
  ~CMsgClearAllCookies() override;
  explicit constexpr CMsgClearAllCookies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClearAllCookies(const CMsgClearAllCookies& from);
  CMsgClearAllCookies(CMsgClearAllCookies&& from) noexcept
    : CMsgClearAllCookies() {
    *this = ::std::move(from);
  }

  inline CMsgClearAllCookies& operator=(const CMsgClearAllCookies& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClearAllCookies& operator=(CMsgClearAllCookies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClearAllCookies& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClearAllCookies* internal_default_instance() {
    return reinterpret_cast<const CMsgClearAllCookies*>(
               &_CMsgClearAllCookies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CMsgClearAllCookies& a, CMsgClearAllCookies& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClearAllCookies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClearAllCookies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClearAllCookies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClearAllCookies>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClearAllCookies& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClearAllCookies& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClearAllCookies* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClearAllCookies";
  }
  protected:
  explicit CMsgClearAllCookies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClearAllCookies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgScreenDPI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgScreenDPI) */ {
 public:
  inline CMsgScreenDPI() : CMsgScreenDPI(nullptr) {}
  ~CMsgScreenDPI() override;
  explicit constexpr CMsgScreenDPI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgScreenDPI(const CMsgScreenDPI& from);
  CMsgScreenDPI(CMsgScreenDPI&& from) noexcept
    : CMsgScreenDPI() {
    *this = ::std::move(from);
  }

  inline CMsgScreenDPI& operator=(const CMsgScreenDPI& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgScreenDPI& operator=(CMsgScreenDPI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgScreenDPI& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgScreenDPI* internal_default_instance() {
    return reinterpret_cast<const CMsgScreenDPI*>(
               &_CMsgScreenDPI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CMsgScreenDPI& a, CMsgScreenDPI& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgScreenDPI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgScreenDPI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgScreenDPI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgScreenDPI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgScreenDPI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgScreenDPI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgScreenDPI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgScreenDPI";
  }
  protected:
  explicit CMsgScreenDPI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kDpiScalingFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional float dpi_scaling = 2;
  bool has_dpi_scaling() const;
  private:
  bool _internal_has_dpi_scaling() const;
  public:
  void clear_dpi_scaling();
  float dpi_scaling() const;
  void set_dpi_scaling(float value);
  private:
  float _internal_dpi_scaling() const;
  void _internal_set_dpi_scaling(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgScreenDPI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  float dpi_scaling_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAckScreenDPI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAckScreenDPI) */ {
 public:
  inline CMsgAckScreenDPI() : CMsgAckScreenDPI(nullptr) {}
  ~CMsgAckScreenDPI() override;
  explicit constexpr CMsgAckScreenDPI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAckScreenDPI(const CMsgAckScreenDPI& from);
  CMsgAckScreenDPI(CMsgAckScreenDPI&& from) noexcept
    : CMsgAckScreenDPI() {
    *this = ::std::move(from);
  }

  inline CMsgAckScreenDPI& operator=(const CMsgAckScreenDPI& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAckScreenDPI& operator=(CMsgAckScreenDPI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAckScreenDPI& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAckScreenDPI* internal_default_instance() {
    return reinterpret_cast<const CMsgAckScreenDPI*>(
               &_CMsgAckScreenDPI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CMsgAckScreenDPI& a, CMsgAckScreenDPI& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAckScreenDPI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAckScreenDPI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAckScreenDPI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAckScreenDPI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAckScreenDPI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAckScreenDPI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAckScreenDPI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAckScreenDPI";
  }
  protected:
  explicit CMsgAckScreenDPI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAckScreenDPI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgAuthedSteamDomains final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAuthedSteamDomains) */ {
 public:
  inline CMsgAuthedSteamDomains() : CMsgAuthedSteamDomains(nullptr) {}
  ~CMsgAuthedSteamDomains() override;
  explicit constexpr CMsgAuthedSteamDomains(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAuthedSteamDomains(const CMsgAuthedSteamDomains& from);
  CMsgAuthedSteamDomains(CMsgAuthedSteamDomains&& from) noexcept
    : CMsgAuthedSteamDomains() {
    *this = ::std::move(from);
  }

  inline CMsgAuthedSteamDomains& operator=(const CMsgAuthedSteamDomains& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAuthedSteamDomains& operator=(CMsgAuthedSteamDomains&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAuthedSteamDomains& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAuthedSteamDomains* internal_default_instance() {
    return reinterpret_cast<const CMsgAuthedSteamDomains*>(
               &_CMsgAuthedSteamDomains_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CMsgAuthedSteamDomains& a, CMsgAuthedSteamDomains& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAuthedSteamDomains* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAuthedSteamDomains* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAuthedSteamDomains* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAuthedSteamDomains>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAuthedSteamDomains& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAuthedSteamDomains& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAuthedSteamDomains* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAuthedSteamDomains";
  }
  protected:
  explicit CMsgAuthedSteamDomains(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 1,
  };
  // repeated string domains = 1;
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  const std::string& domains(int index) const;
  std::string* mutable_domains(int index);
  void set_domains(int index, const std::string& value);
  void set_domains(int index, std::string&& value);
  void set_domains(int index, const char* value);
  void set_domains(int index, const char* value, size_t size);
  std::string* add_domains();
  void add_domains(const std::string& value);
  void add_domains(std::string&& value);
  void add_domains(const char* value);
  void add_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domains();
  private:
  const std::string& _internal_domains(int index) const;
  std::string* _internal_add_domains();
  public:

  // @@protoc_insertion_point(class_scope:CMsgAuthedSteamDomains)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamAuthNeeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamAuthNeeded) */ {
 public:
  inline CMsgSteamAuthNeeded() : CMsgSteamAuthNeeded(nullptr) {}
  ~CMsgSteamAuthNeeded() override;
  explicit constexpr CMsgSteamAuthNeeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamAuthNeeded(const CMsgSteamAuthNeeded& from);
  CMsgSteamAuthNeeded(CMsgSteamAuthNeeded&& from) noexcept
    : CMsgSteamAuthNeeded() {
    *this = ::std::move(from);
  }

  inline CMsgSteamAuthNeeded& operator=(const CMsgSteamAuthNeeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamAuthNeeded& operator=(CMsgSteamAuthNeeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamAuthNeeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamAuthNeeded* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamAuthNeeded*>(
               &_CMsgSteamAuthNeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CMsgSteamAuthNeeded& a, CMsgSteamAuthNeeded& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamAuthNeeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamAuthNeeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamAuthNeeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamAuthNeeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamAuthNeeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSteamAuthNeeded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamAuthNeeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamAuthNeeded";
  }
  protected:
  explicit CMsgSteamAuthNeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 1,
  };
  // optional bool filler = 1;
  bool has_filler() const;
  private:
  bool _internal_has_filler() const;
  public:
  void clear_filler();
  bool filler() const;
  void set_filler(bool value);
  private:
  bool _internal_filler() const;
  void _internal_set_filler(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamAuthNeeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool filler_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamAuthCookiesSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamAuthCookiesSet) */ {
 public:
  inline CMsgSteamAuthCookiesSet() : CMsgSteamAuthCookiesSet(nullptr) {}
  ~CMsgSteamAuthCookiesSet() override;
  explicit constexpr CMsgSteamAuthCookiesSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamAuthCookiesSet(const CMsgSteamAuthCookiesSet& from);
  CMsgSteamAuthCookiesSet(CMsgSteamAuthCookiesSet&& from) noexcept
    : CMsgSteamAuthCookiesSet() {
    *this = ::std::move(from);
  }

  inline CMsgSteamAuthCookiesSet& operator=(const CMsgSteamAuthCookiesSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamAuthCookiesSet& operator=(CMsgSteamAuthCookiesSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamAuthCookiesSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamAuthCookiesSet* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamAuthCookiesSet*>(
               &_CMsgSteamAuthCookiesSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CMsgSteamAuthCookiesSet& a, CMsgSteamAuthCookiesSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamAuthCookiesSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamAuthCookiesSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamAuthCookiesSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamAuthCookiesSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamAuthCookiesSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSteamAuthCookiesSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamAuthCookiesSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamAuthCookiesSet";
  }
  protected:
  explicit CMsgSteamAuthCookiesSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamAuthCookiesSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSRegisterMethod final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSRegisterMethod) */ {
 public:
  inline CMsgJSRegisterMethod() : CMsgJSRegisterMethod(nullptr) {}
  ~CMsgJSRegisterMethod() override;
  explicit constexpr CMsgJSRegisterMethod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSRegisterMethod(const CMsgJSRegisterMethod& from);
  CMsgJSRegisterMethod(CMsgJSRegisterMethod&& from) noexcept
    : CMsgJSRegisterMethod() {
    *this = ::std::move(from);
  }

  inline CMsgJSRegisterMethod& operator=(const CMsgJSRegisterMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSRegisterMethod& operator=(CMsgJSRegisterMethod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSRegisterMethod& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSRegisterMethod* internal_default_instance() {
    return reinterpret_cast<const CMsgJSRegisterMethod*>(
               &_CMsgJSRegisterMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CMsgJSRegisterMethod& a, CMsgJSRegisterMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSRegisterMethod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSRegisterMethod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSRegisterMethod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSRegisterMethod>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSRegisterMethod& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSRegisterMethod& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSRegisterMethod* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSRegisterMethod";
  }
  protected:
  explicit CMsgJSRegisterMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
    kMethodTypeFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional .EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
  bool has_method_type() const;
  private:
  bool _internal_has_method_type() const;
  public:
  void clear_method_type();
  ::EJSRegisterMethodType method_type() const;
  void set_method_type(::EJSRegisterMethodType value);
  private:
  ::EJSRegisterMethodType _internal_method_type() const;
  void _internal_set_method_type(::EJSRegisterMethodType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSRegisterMethod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t browser_handle_;
  int method_type_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSValue_JSObjectProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSValue.JSObjectProperty) */ {
 public:
  inline CMsgJSValue_JSObjectProperty() : CMsgJSValue_JSObjectProperty(nullptr) {}
  ~CMsgJSValue_JSObjectProperty() override;
  explicit constexpr CMsgJSValue_JSObjectProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSValue_JSObjectProperty(const CMsgJSValue_JSObjectProperty& from);
  CMsgJSValue_JSObjectProperty(CMsgJSValue_JSObjectProperty&& from) noexcept
    : CMsgJSValue_JSObjectProperty() {
    *this = ::std::move(from);
  }

  inline CMsgJSValue_JSObjectProperty& operator=(const CMsgJSValue_JSObjectProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSValue_JSObjectProperty& operator=(CMsgJSValue_JSObjectProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSValue_JSObjectProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSValue_JSObjectProperty* internal_default_instance() {
    return reinterpret_cast<const CMsgJSValue_JSObjectProperty*>(
               &_CMsgJSValue_JSObjectProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CMsgJSValue_JSObjectProperty& a, CMsgJSValue_JSObjectProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSValue_JSObjectProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSValue_JSObjectProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSValue_JSObjectProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSValue_JSObjectProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSValue_JSObjectProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSValue_JSObjectProperty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSValue_JSObjectProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSValue.JSObjectProperty";
  }
  protected:
  explicit CMsgJSValue_JSObjectProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .CMsgJSValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::CMsgJSValue& value() const;
  PROTOBUF_NODISCARD ::CMsgJSValue* release_value();
  ::CMsgJSValue* mutable_value();
  void set_allocated_value(::CMsgJSValue* value);
  private:
  const ::CMsgJSValue& _internal_value() const;
  ::CMsgJSValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::CMsgJSValue* value);
  ::CMsgJSValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:CMsgJSValue.JSObjectProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::CMsgJSValue* value_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSValue) */ {
 public:
  inline CMsgJSValue() : CMsgJSValue(nullptr) {}
  ~CMsgJSValue() override;
  explicit constexpr CMsgJSValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSValue(const CMsgJSValue& from);
  CMsgJSValue(CMsgJSValue&& from) noexcept
    : CMsgJSValue() {
    *this = ::std::move(from);
  }

  inline CMsgJSValue& operator=(const CMsgJSValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSValue& operator=(CMsgJSValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSValue* internal_default_instance() {
    return reinterpret_cast<const CMsgJSValue*>(
               &_CMsgJSValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CMsgJSValue& a, CMsgJSValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSValue";
  }
  protected:
  explicit CMsgJSValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgJSValue_JSObjectProperty JSObjectProperty;

  // accessors -------------------------------------------------------

  enum : int {
    kArrayValuesFieldNumber = 9,
    kObjectPropertiesFieldNumber = 11,
    kStringValueFieldNumber = 5,
    kBytesValueFieldNumber = 12,
    kIntValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kFunctionHandleFieldNumber = 6,
    kBoolValueFieldNumber = 1,
    kIsArrayFieldNumber = 8,
    kIsObjectFieldNumber = 10,
  };
  // repeated .CMsgJSValue array_values = 9;
  int array_values_size() const;
  private:
  int _internal_array_values_size() const;
  public:
  void clear_array_values();
  ::CMsgJSValue* mutable_array_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
      mutable_array_values();
  private:
  const ::CMsgJSValue& _internal_array_values(int index) const;
  ::CMsgJSValue* _internal_add_array_values();
  public:
  const ::CMsgJSValue& array_values(int index) const;
  ::CMsgJSValue* add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
      array_values() const;

  // repeated .CMsgJSValue.JSObjectProperty object_properties = 11;
  int object_properties_size() const;
  private:
  int _internal_object_properties_size() const;
  public:
  void clear_object_properties();
  ::CMsgJSValue_JSObjectProperty* mutable_object_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue_JSObjectProperty >*
      mutable_object_properties();
  private:
  const ::CMsgJSValue_JSObjectProperty& _internal_object_properties(int index) const;
  ::CMsgJSValue_JSObjectProperty* _internal_add_object_properties();
  public:
  const ::CMsgJSValue_JSObjectProperty& object_properties(int index) const;
  ::CMsgJSValue_JSObjectProperty* add_object_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue_JSObjectProperty >&
      object_properties() const;

  // optional string string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional bytes bytes_value = 12;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // optional int32 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int32_t int_value() const;
  void set_int_value(int32_t value);
  private:
  int32_t _internal_int_value() const;
  void _internal_set_int_value(int32_t value);
  public:

  // optional uint32 uint_value = 3;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  uint32_t uint_value() const;
  void set_uint_value(uint32_t value);
  private:
  uint32_t _internal_uint_value() const;
  void _internal_set_uint_value(uint32_t value);
  public:

  // optional double double_value = 4;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional uint64 function_handle = 6;
  bool has_function_handle() const;
  private:
  bool _internal_has_function_handle() const;
  public:
  void clear_function_handle();
  uint64_t function_handle() const;
  void set_function_handle(uint64_t value);
  private:
  uint64_t _internal_function_handle() const;
  void _internal_set_function_handle(uint64_t value);
  public:

  // optional bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional bool is_array = 8;
  bool has_is_array() const;
  private:
  bool _internal_has_is_array() const;
  public:
  void clear_is_array();
  bool is_array() const;
  void set_is_array(bool value);
  private:
  bool _internal_is_array() const;
  void _internal_set_is_array(bool value);
  public:

  // optional bool is_object = 10;
  bool has_is_object() const;
  private:
  bool _internal_has_is_object() const;
  public:
  void clear_is_object();
  bool is_object() const;
  void set_is_object(bool value);
  private:
  bool _internal_is_object() const;
  void _internal_set_is_object(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue > array_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue_JSObjectProperty > object_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  int32_t int_value_;
  uint32_t uint_value_;
  double double_value_;
  uint64_t function_handle_;
  bool bool_value_;
  bool is_array_;
  bool is_object_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSMethodCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSMethodCall) */ {
 public:
  inline CMsgJSMethodCall() : CMsgJSMethodCall(nullptr) {}
  ~CMsgJSMethodCall() override;
  explicit constexpr CMsgJSMethodCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSMethodCall(const CMsgJSMethodCall& from);
  CMsgJSMethodCall(CMsgJSMethodCall&& from) noexcept
    : CMsgJSMethodCall() {
    *this = ::std::move(from);
  }

  inline CMsgJSMethodCall& operator=(const CMsgJSMethodCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSMethodCall& operator=(CMsgJSMethodCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSMethodCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSMethodCall* internal_default_instance() {
    return reinterpret_cast<const CMsgJSMethodCall*>(
               &_CMsgJSMethodCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CMsgJSMethodCall& a, CMsgJSMethodCall& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSMethodCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSMethodCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSMethodCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSMethodCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSMethodCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSMethodCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSMethodCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSMethodCall";
  }
  protected:
  explicit CMsgJSMethodCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 4,
    kNameFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
  };
  // repeated .CMsgJSValue arguments = 4;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::CMsgJSValue* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
      mutable_arguments();
  private:
  const ::CMsgJSValue& _internal_arguments(int index) const;
  ::CMsgJSValue* _internal_add_arguments();
  public:
  const ::CMsgJSValue& arguments(int index) const;
  ::CMsgJSValue* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
      arguments() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSMethodCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue > arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSExecuteCallback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSExecuteCallback) */ {
 public:
  inline CMsgJSExecuteCallback() : CMsgJSExecuteCallback(nullptr) {}
  ~CMsgJSExecuteCallback() override;
  explicit constexpr CMsgJSExecuteCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSExecuteCallback(const CMsgJSExecuteCallback& from);
  CMsgJSExecuteCallback(CMsgJSExecuteCallback&& from) noexcept
    : CMsgJSExecuteCallback() {
    *this = ::std::move(from);
  }

  inline CMsgJSExecuteCallback& operator=(const CMsgJSExecuteCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSExecuteCallback& operator=(CMsgJSExecuteCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSExecuteCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSExecuteCallback* internal_default_instance() {
    return reinterpret_cast<const CMsgJSExecuteCallback*>(
               &_CMsgJSExecuteCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CMsgJSExecuteCallback& a, CMsgJSExecuteCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSExecuteCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSExecuteCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSExecuteCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSExecuteCallback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSExecuteCallback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSExecuteCallback& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSExecuteCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSExecuteCallback";
  }
  protected:
  explicit CMsgJSExecuteCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
    kFunctionHandleFieldNumber = 3,
  };
  // repeated .CMsgJSValue arguments = 4;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::CMsgJSValue* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
      mutable_arguments();
  private:
  const ::CMsgJSValue& _internal_arguments(int index) const;
  ::CMsgJSValue* _internal_add_arguments();
  public:
  const ::CMsgJSValue& arguments(int index) const;
  ::CMsgJSValue* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
      arguments() const;

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // optional uint64 function_handle = 3;
  bool has_function_handle() const;
  private:
  bool _internal_has_function_handle() const;
  public:
  void clear_function_handle();
  uint64_t function_handle() const;
  void set_function_handle(uint64_t value);
  private:
  uint64_t _internal_function_handle() const;
  void _internal_set_function_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSExecuteCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue > arguments_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  uint64_t function_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSReleaseCallback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSReleaseCallback) */ {
 public:
  inline CMsgJSReleaseCallback() : CMsgJSReleaseCallback(nullptr) {}
  ~CMsgJSReleaseCallback() override;
  explicit constexpr CMsgJSReleaseCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSReleaseCallback(const CMsgJSReleaseCallback& from);
  CMsgJSReleaseCallback(CMsgJSReleaseCallback&& from) noexcept
    : CMsgJSReleaseCallback() {
    *this = ::std::move(from);
  }

  inline CMsgJSReleaseCallback& operator=(const CMsgJSReleaseCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSReleaseCallback& operator=(CMsgJSReleaseCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSReleaseCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSReleaseCallback* internal_default_instance() {
    return reinterpret_cast<const CMsgJSReleaseCallback*>(
               &_CMsgJSReleaseCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CMsgJSReleaseCallback& a, CMsgJSReleaseCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSReleaseCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSReleaseCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSReleaseCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSReleaseCallback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSReleaseCallback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSReleaseCallback& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSReleaseCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSReleaseCallback";
  }
  protected:
  explicit CMsgJSReleaseCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
    kFunctionHandleFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // optional uint64 function_handle = 3;
  bool has_function_handle() const;
  private:
  bool _internal_has_function_handle() const;
  public:
  void clear_function_handle();
  uint64_t function_handle() const;
  void set_function_handle(uint64_t value);
  private:
  uint64_t _internal_function_handle() const;
  void _internal_set_function_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSReleaseCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  uint64_t function_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgJSRaiseException final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJSRaiseException) */ {
 public:
  inline CMsgJSRaiseException() : CMsgJSRaiseException(nullptr) {}
  ~CMsgJSRaiseException() override;
  explicit constexpr CMsgJSRaiseException(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJSRaiseException(const CMsgJSRaiseException& from);
  CMsgJSRaiseException(CMsgJSRaiseException&& from) noexcept
    : CMsgJSRaiseException() {
    *this = ::std::move(from);
  }

  inline CMsgJSRaiseException& operator=(const CMsgJSRaiseException& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJSRaiseException& operator=(CMsgJSRaiseException&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgJSRaiseException& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJSRaiseException* internal_default_instance() {
    return reinterpret_cast<const CMsgJSRaiseException*>(
               &_CMsgJSRaiseException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CMsgJSRaiseException& a, CMsgJSRaiseException& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJSRaiseException* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJSRaiseException* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgJSRaiseException* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgJSRaiseException>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgJSRaiseException& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgJSRaiseException& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJSRaiseException* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJSRaiseException";
  }
  protected:
  explicit CMsgJSRaiseException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
    kOwningBrowserHandleFieldNumber = 2,
  };
  // optional string exception = 3;
  bool has_exception() const;
  private:
  bool _internal_has_exception() const;
  public:
  void clear_exception();
  const std::string& exception() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exception(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exception();
  PROTOBUF_NODISCARD std::string* release_exception();
  void set_allocated_exception(std::string* exception);
  private:
  const std::string& _internal_exception() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exception(const std::string& value);
  std::string* _internal_mutable_exception();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 owning_browser_handle = 2;
  bool has_owning_browser_handle() const;
  private:
  bool _internal_has_owning_browser_handle() const;
  public:
  void clear_owning_browser_handle();
  uint32_t owning_browser_handle() const;
  void set_owning_browser_handle(uint32_t value);
  private:
  uint32_t _internal_owning_browser_handle() const;
  void _internal_set_owning_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJSRaiseException)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_;
  uint32_t browser_handle_;
  uint32_t owning_browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgLoadLocalization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLoadLocalization) */ {
 public:
  inline CMsgLoadLocalization() : CMsgLoadLocalization(nullptr) {}
  ~CMsgLoadLocalization() override;
  explicit constexpr CMsgLoadLocalization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLoadLocalization(const CMsgLoadLocalization& from);
  CMsgLoadLocalization(CMsgLoadLocalization&& from) noexcept
    : CMsgLoadLocalization() {
    *this = ::std::move(from);
  }

  inline CMsgLoadLocalization& operator=(const CMsgLoadLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLoadLocalization& operator=(CMsgLoadLocalization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLoadLocalization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLoadLocalization* internal_default_instance() {
    return reinterpret_cast<const CMsgLoadLocalization*>(
               &_CMsgLoadLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CMsgLoadLocalization& a, CMsgLoadLocalization& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLoadLocalization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLoadLocalization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLoadLocalization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLoadLocalization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLoadLocalization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgLoadLocalization& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLoadLocalization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLoadLocalization";
  }
  protected:
  explicit CMsgLoadLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizationPathFieldNumber = 2,
    kLanguageFieldNumber = 3,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string localization_path = 2;
  bool has_localization_path() const;
  private:
  bool _internal_has_localization_path() const;
  public:
  void clear_localization_path();
  const std::string& localization_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_path();
  PROTOBUF_NODISCARD std::string* release_localization_path();
  void set_allocated_localization_path(std::string* localization_path);
  private:
  const std::string& _internal_localization_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_path(const std::string& value);
  std::string* _internal_mutable_localization_path();
  public:

  // optional string language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLoadLocalization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgNotifyUserActivation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNotifyUserActivation) */ {
 public:
  inline CMsgNotifyUserActivation() : CMsgNotifyUserActivation(nullptr) {}
  ~CMsgNotifyUserActivation() override;
  explicit constexpr CMsgNotifyUserActivation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNotifyUserActivation(const CMsgNotifyUserActivation& from);
  CMsgNotifyUserActivation(CMsgNotifyUserActivation&& from) noexcept
    : CMsgNotifyUserActivation() {
    *this = ::std::move(from);
  }

  inline CMsgNotifyUserActivation& operator=(const CMsgNotifyUserActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNotifyUserActivation& operator=(CMsgNotifyUserActivation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNotifyUserActivation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNotifyUserActivation* internal_default_instance() {
    return reinterpret_cast<const CMsgNotifyUserActivation*>(
               &_CMsgNotifyUserActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CMsgNotifyUserActivation& a, CMsgNotifyUserActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNotifyUserActivation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNotifyUserActivation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNotifyUserActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNotifyUserActivation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNotifyUserActivation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNotifyUserActivation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNotifyUserActivation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNotifyUserActivation";
  }
  protected:
  explicit CMsgNotifyUserActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNotifyUserActivation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetNetFakeLocalSystemState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetNetFakeLocalSystemState) */ {
 public:
  inline CMsgSetNetFakeLocalSystemState() : CMsgSetNetFakeLocalSystemState(nullptr) {}
  ~CMsgSetNetFakeLocalSystemState() override;
  explicit constexpr CMsgSetNetFakeLocalSystemState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetNetFakeLocalSystemState(const CMsgSetNetFakeLocalSystemState& from);
  CMsgSetNetFakeLocalSystemState(CMsgSetNetFakeLocalSystemState&& from) noexcept
    : CMsgSetNetFakeLocalSystemState() {
    *this = ::std::move(from);
  }

  inline CMsgSetNetFakeLocalSystemState& operator=(const CMsgSetNetFakeLocalSystemState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetNetFakeLocalSystemState& operator=(CMsgSetNetFakeLocalSystemState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetNetFakeLocalSystemState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetNetFakeLocalSystemState* internal_default_instance() {
    return reinterpret_cast<const CMsgSetNetFakeLocalSystemState*>(
               &_CMsgSetNetFakeLocalSystemState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CMsgSetNetFakeLocalSystemState& a, CMsgSetNetFakeLocalSystemState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetNetFakeLocalSystemState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetNetFakeLocalSystemState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetNetFakeLocalSystemState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetNetFakeLocalSystemState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetNetFakeLocalSystemState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetNetFakeLocalSystemState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetNetFakeLocalSystemState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetNetFakeLocalSystemState";
  }
  protected:
  explicit CMsgSetNetFakeLocalSystemState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetNetFakeLocalSystemState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t state_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetGameOverlayTargetPIDs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetGameOverlayTargetPIDs) */ {
 public:
  inline CMsgSetGameOverlayTargetPIDs() : CMsgSetGameOverlayTargetPIDs(nullptr) {}
  ~CMsgSetGameOverlayTargetPIDs() override;
  explicit constexpr CMsgSetGameOverlayTargetPIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetGameOverlayTargetPIDs(const CMsgSetGameOverlayTargetPIDs& from);
  CMsgSetGameOverlayTargetPIDs(CMsgSetGameOverlayTargetPIDs&& from) noexcept
    : CMsgSetGameOverlayTargetPIDs() {
    *this = ::std::move(from);
  }

  inline CMsgSetGameOverlayTargetPIDs& operator=(const CMsgSetGameOverlayTargetPIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetGameOverlayTargetPIDs& operator=(CMsgSetGameOverlayTargetPIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetGameOverlayTargetPIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetGameOverlayTargetPIDs* internal_default_instance() {
    return reinterpret_cast<const CMsgSetGameOverlayTargetPIDs*>(
               &_CMsgSetGameOverlayTargetPIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CMsgSetGameOverlayTargetPIDs& a, CMsgSetGameOverlayTargetPIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetGameOverlayTargetPIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetGameOverlayTargetPIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetGameOverlayTargetPIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetGameOverlayTargetPIDs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetGameOverlayTargetPIDs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetGameOverlayTargetPIDs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetGameOverlayTargetPIDs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetGameOverlayTargetPIDs";
  }
  protected:
  explicit CMsgSetGameOverlayTargetPIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated uint32 target_pid = 2;
  int target_pid_size() const;
  private:
  int _internal_target_pid_size() const;
  public:
  void clear_target_pid();
  private:
  uint32_t _internal_target_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_target_pid() const;
  void _internal_add_target_pid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_target_pid();
  public:
  uint32_t target_pid(int index) const;
  void set_target_pid(int index, uint32_t value);
  void add_target_pid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_target_pid();

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetGameOverlayTargetPIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > target_pid_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameOverlayTargetTextureID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameOverlayTargetTextureID) */ {
 public:
  inline CMsgGameOverlayTargetTextureID() : CMsgGameOverlayTargetTextureID(nullptr) {}
  ~CMsgGameOverlayTargetTextureID() override;
  explicit constexpr CMsgGameOverlayTargetTextureID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameOverlayTargetTextureID(const CMsgGameOverlayTargetTextureID& from);
  CMsgGameOverlayTargetTextureID(CMsgGameOverlayTargetTextureID&& from) noexcept
    : CMsgGameOverlayTargetTextureID() {
    *this = ::std::move(from);
  }

  inline CMsgGameOverlayTargetTextureID& operator=(const CMsgGameOverlayTargetTextureID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameOverlayTargetTextureID& operator=(CMsgGameOverlayTargetTextureID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameOverlayTargetTextureID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameOverlayTargetTextureID* internal_default_instance() {
    return reinterpret_cast<const CMsgGameOverlayTargetTextureID*>(
               &_CMsgGameOverlayTargetTextureID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(CMsgGameOverlayTargetTextureID& a, CMsgGameOverlayTargetTextureID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameOverlayTargetTextureID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameOverlayTargetTextureID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameOverlayTargetTextureID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameOverlayTargetTextureID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameOverlayTargetTextureID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameOverlayTargetTextureID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameOverlayTargetTextureID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameOverlayTargetTextureID";
  }
  protected:
  explicit CMsgGameOverlayTargetTextureID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kTargetPidFieldNumber = 2,
    kTextureHandleFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 target_pid = 2;
  bool has_target_pid() const;
  private:
  bool _internal_has_target_pid() const;
  public:
  void clear_target_pid();
  uint32_t target_pid() const;
  void set_target_pid(uint32_t value);
  private:
  uint32_t _internal_target_pid() const;
  void _internal_set_target_pid(uint32_t value);
  public:

  // optional uint32 texture_handle = 3;
  bool has_texture_handle() const;
  private:
  bool _internal_has_texture_handle() const;
  public:
  void clear_texture_handle();
  uint32_t texture_handle() const;
  void set_texture_handle(uint32_t value);
  private:
  uint32_t _internal_texture_handle() const;
  void _internal_set_texture_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameOverlayTargetTextureID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t target_pid_;
  uint32_t texture_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraggableRegionsChanged_DraggableRects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraggableRegionsChanged.DraggableRects) */ {
 public:
  inline CMsgDraggableRegionsChanged_DraggableRects() : CMsgDraggableRegionsChanged_DraggableRects(nullptr) {}
  ~CMsgDraggableRegionsChanged_DraggableRects() override;
  explicit constexpr CMsgDraggableRegionsChanged_DraggableRects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraggableRegionsChanged_DraggableRects(const CMsgDraggableRegionsChanged_DraggableRects& from);
  CMsgDraggableRegionsChanged_DraggableRects(CMsgDraggableRegionsChanged_DraggableRects&& from) noexcept
    : CMsgDraggableRegionsChanged_DraggableRects() {
    *this = ::std::move(from);
  }

  inline CMsgDraggableRegionsChanged_DraggableRects& operator=(const CMsgDraggableRegionsChanged_DraggableRects& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraggableRegionsChanged_DraggableRects& operator=(CMsgDraggableRegionsChanged_DraggableRects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraggableRegionsChanged_DraggableRects& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraggableRegionsChanged_DraggableRects* internal_default_instance() {
    return reinterpret_cast<const CMsgDraggableRegionsChanged_DraggableRects*>(
               &_CMsgDraggableRegionsChanged_DraggableRects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CMsgDraggableRegionsChanged_DraggableRects& a, CMsgDraggableRegionsChanged_DraggableRects& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraggableRegionsChanged_DraggableRects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraggableRegionsChanged_DraggableRects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraggableRegionsChanged_DraggableRects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraggableRegionsChanged_DraggableRects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraggableRegionsChanged_DraggableRects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDraggableRegionsChanged_DraggableRects& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraggableRegionsChanged_DraggableRects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraggableRegionsChanged.DraggableRects";
  }
  protected:
  explicit CMsgDraggableRegionsChanged_DraggableRects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kDraggableFieldNumber = 5,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional bool draggable = 5;
  bool has_draggable() const;
  private:
  bool _internal_has_draggable() const;
  public:
  void clear_draggable();
  bool draggable() const;
  void set_draggable(bool value);
  private:
  bool _internal_draggable() const;
  void _internal_set_draggable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDraggableRegionsChanged.DraggableRects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  int32_t width_;
  int32_t height_;
  bool draggable_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgDraggableRegionsChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDraggableRegionsChanged) */ {
 public:
  inline CMsgDraggableRegionsChanged() : CMsgDraggableRegionsChanged(nullptr) {}
  ~CMsgDraggableRegionsChanged() override;
  explicit constexpr CMsgDraggableRegionsChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDraggableRegionsChanged(const CMsgDraggableRegionsChanged& from);
  CMsgDraggableRegionsChanged(CMsgDraggableRegionsChanged&& from) noexcept
    : CMsgDraggableRegionsChanged() {
    *this = ::std::move(from);
  }

  inline CMsgDraggableRegionsChanged& operator=(const CMsgDraggableRegionsChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDraggableRegionsChanged& operator=(CMsgDraggableRegionsChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDraggableRegionsChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDraggableRegionsChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgDraggableRegionsChanged*>(
               &_CMsgDraggableRegionsChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CMsgDraggableRegionsChanged& a, CMsgDraggableRegionsChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDraggableRegionsChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDraggableRegionsChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDraggableRegionsChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDraggableRegionsChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDraggableRegionsChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDraggableRegionsChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDraggableRegionsChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDraggableRegionsChanged";
  }
  protected:
  explicit CMsgDraggableRegionsChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDraggableRegionsChanged_DraggableRects DraggableRects;

  // accessors -------------------------------------------------------

  enum : int {
    kRectsFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated .CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  int rects_size() const;
  private:
  int _internal_rects_size() const;
  public:
  void clear_rects();
  ::CMsgDraggableRegionsChanged_DraggableRects* mutable_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraggableRegionsChanged_DraggableRects >*
      mutable_rects();
  private:
  const ::CMsgDraggableRegionsChanged_DraggableRects& _internal_rects(int index) const;
  ::CMsgDraggableRegionsChanged_DraggableRects* _internal_add_rects();
  public:
  const ::CMsgDraggableRegionsChanged_DraggableRects& rects(int index) const;
  ::CMsgDraggableRegionsChanged_DraggableRects* add_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraggableRegionsChanged_DraggableRects >&
      rects() const;

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDraggableRegionsChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraggableRegionsChanged_DraggableRects > rects_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgResizeGripChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgResizeGripChanged) */ {
 public:
  inline CMsgResizeGripChanged() : CMsgResizeGripChanged(nullptr) {}
  ~CMsgResizeGripChanged() override;
  explicit constexpr CMsgResizeGripChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgResizeGripChanged(const CMsgResizeGripChanged& from);
  CMsgResizeGripChanged(CMsgResizeGripChanged&& from) noexcept
    : CMsgResizeGripChanged() {
    *this = ::std::move(from);
  }

  inline CMsgResizeGripChanged& operator=(const CMsgResizeGripChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgResizeGripChanged& operator=(CMsgResizeGripChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgResizeGripChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgResizeGripChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgResizeGripChanged*>(
               &_CMsgResizeGripChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CMsgResizeGripChanged& a, CMsgResizeGripChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgResizeGripChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgResizeGripChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgResizeGripChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgResizeGripChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgResizeGripChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgResizeGripChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgResizeGripChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgResizeGripChanged";
  }
  protected:
  explicit CMsgResizeGripChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgResizeGripChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t width_;
  int32_t height_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetWindowPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetWindowPosition) */ {
 public:
  inline CMsgSetWindowPosition() : CMsgSetWindowPosition(nullptr) {}
  ~CMsgSetWindowPosition() override;
  explicit constexpr CMsgSetWindowPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetWindowPosition(const CMsgSetWindowPosition& from);
  CMsgSetWindowPosition(CMsgSetWindowPosition&& from) noexcept
    : CMsgSetWindowPosition() {
    *this = ::std::move(from);
  }

  inline CMsgSetWindowPosition& operator=(const CMsgSetWindowPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetWindowPosition& operator=(CMsgSetWindowPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetWindowPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetWindowPosition* internal_default_instance() {
    return reinterpret_cast<const CMsgSetWindowPosition*>(
               &_CMsgSetWindowPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(CMsgSetWindowPosition& a, CMsgSetWindowPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetWindowPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetWindowPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetWindowPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetWindowPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetWindowPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetWindowPosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetWindowPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetWindowPosition";
  }
  protected:
  explicit CMsgSetWindowPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kMinWidthFieldNumber = 6,
    kMinHeightFieldNumber = 7,
    kMaxWidthFieldNumber = 8,
    kMaxHeightFieldNumber = 9,
    kBrowserHandleFieldNumber = 1,
  };
  // optional double x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double min_width = 6;
  bool has_min_width() const;
  private:
  bool _internal_has_min_width() const;
  public:
  void clear_min_width();
  double min_width() const;
  void set_min_width(double value);
  private:
  double _internal_min_width() const;
  void _internal_set_min_width(double value);
  public:

  // optional double min_height = 7;
  bool has_min_height() const;
  private:
  bool _internal_has_min_height() const;
  public:
  void clear_min_height();
  double min_height() const;
  void set_min_height(double value);
  private:
  double _internal_min_height() const;
  void _internal_set_min_height(double value);
  public:

  // optional double max_width = 8;
  bool has_max_width() const;
  private:
  bool _internal_has_max_width() const;
  public:
  void clear_max_width();
  double max_width() const;
  void set_max_width(double value);
  private:
  double _internal_max_width() const;
  void _internal_set_max_width(double value);
  public:

  // optional double max_height = 9;
  bool has_max_height() const;
  private:
  bool _internal_has_max_height() const;
  public:
  void clear_max_height();
  double max_height() const;
  void set_max_height(double value);
  private:
  double _internal_max_height() const;
  void _internal_set_max_height(double value);
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetWindowPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double width_;
  double height_;
  double min_width_;
  double min_height_;
  double max_width_;
  double max_height_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowWindow) */ {
 public:
  inline CMsgShowWindow() : CMsgShowWindow(nullptr) {}
  ~CMsgShowWindow() override;
  explicit constexpr CMsgShowWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowWindow(const CMsgShowWindow& from);
  CMsgShowWindow(CMsgShowWindow&& from) noexcept
    : CMsgShowWindow() {
    *this = ::std::move(from);
  }

  inline CMsgShowWindow& operator=(const CMsgShowWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowWindow& operator=(CMsgShowWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgShowWindow*>(
               &_CMsgShowWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CMsgShowWindow& a, CMsgShowWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShowWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowWindow";
  }
  protected:
  explicit CMsgShowWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHideWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHideWindow) */ {
 public:
  inline CMsgHideWindow() : CMsgHideWindow(nullptr) {}
  ~CMsgHideWindow() override;
  explicit constexpr CMsgHideWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHideWindow(const CMsgHideWindow& from);
  CMsgHideWindow(CMsgHideWindow&& from) noexcept
    : CMsgHideWindow() {
    *this = ::std::move(from);
  }

  inline CMsgHideWindow& operator=(const CMsgHideWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHideWindow& operator=(CMsgHideWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHideWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHideWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgHideWindow*>(
               &_CMsgHideWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CMsgHideWindow& a, CMsgHideWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHideWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHideWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHideWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHideWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHideWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHideWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHideWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHideWindow";
  }
  protected:
  explicit CMsgHideWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHideWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBringWindowToFront final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBringWindowToFront) */ {
 public:
  inline CMsgBringWindowToFront() : CMsgBringWindowToFront(nullptr) {}
  ~CMsgBringWindowToFront() override;
  explicit constexpr CMsgBringWindowToFront(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBringWindowToFront(const CMsgBringWindowToFront& from);
  CMsgBringWindowToFront(CMsgBringWindowToFront&& from) noexcept
    : CMsgBringWindowToFront() {
    *this = ::std::move(from);
  }

  inline CMsgBringWindowToFront& operator=(const CMsgBringWindowToFront& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBringWindowToFront& operator=(CMsgBringWindowToFront&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBringWindowToFront& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBringWindowToFront* internal_default_instance() {
    return reinterpret_cast<const CMsgBringWindowToFront*>(
               &_CMsgBringWindowToFront_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CMsgBringWindowToFront& a, CMsgBringWindowToFront& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBringWindowToFront* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBringWindowToFront* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBringWindowToFront* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBringWindowToFront>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBringWindowToFront& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBringWindowToFront& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBringWindowToFront* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBringWindowToFront";
  }
  protected:
  explicit CMsgBringWindowToFront(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBringWindowToFront)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetForegroundWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetForegroundWindow) */ {
 public:
  inline CMsgSetForegroundWindow() : CMsgSetForegroundWindow(nullptr) {}
  ~CMsgSetForegroundWindow() override;
  explicit constexpr CMsgSetForegroundWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetForegroundWindow(const CMsgSetForegroundWindow& from);
  CMsgSetForegroundWindow(CMsgSetForegroundWindow&& from) noexcept
    : CMsgSetForegroundWindow() {
    *this = ::std::move(from);
  }

  inline CMsgSetForegroundWindow& operator=(const CMsgSetForegroundWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetForegroundWindow& operator=(CMsgSetForegroundWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetForegroundWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetForegroundWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgSetForegroundWindow*>(
               &_CMsgSetForegroundWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(CMsgSetForegroundWindow& a, CMsgSetForegroundWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetForegroundWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetForegroundWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetForegroundWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetForegroundWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetForegroundWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetForegroundWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetForegroundWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetForegroundWindow";
  }
  protected:
  explicit CMsgSetForegroundWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetForegroundWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMaximizeRestoreWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMaximizeRestoreWindow) */ {
 public:
  inline CMsgMaximizeRestoreWindow() : CMsgMaximizeRestoreWindow(nullptr) {}
  ~CMsgMaximizeRestoreWindow() override;
  explicit constexpr CMsgMaximizeRestoreWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMaximizeRestoreWindow(const CMsgMaximizeRestoreWindow& from);
  CMsgMaximizeRestoreWindow(CMsgMaximizeRestoreWindow&& from) noexcept
    : CMsgMaximizeRestoreWindow() {
    *this = ::std::move(from);
  }

  inline CMsgMaximizeRestoreWindow& operator=(const CMsgMaximizeRestoreWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMaximizeRestoreWindow& operator=(CMsgMaximizeRestoreWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMaximizeRestoreWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMaximizeRestoreWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgMaximizeRestoreWindow*>(
               &_CMsgMaximizeRestoreWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CMsgMaximizeRestoreWindow& a, CMsgMaximizeRestoreWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMaximizeRestoreWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMaximizeRestoreWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMaximizeRestoreWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMaximizeRestoreWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMaximizeRestoreWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMaximizeRestoreWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMaximizeRestoreWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMaximizeRestoreWindow";
  }
  protected:
  explicit CMsgMaximizeRestoreWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMaximizeRestoreWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgMinimizeWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMinimizeWindow) */ {
 public:
  inline CMsgMinimizeWindow() : CMsgMinimizeWindow(nullptr) {}
  ~CMsgMinimizeWindow() override;
  explicit constexpr CMsgMinimizeWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMinimizeWindow(const CMsgMinimizeWindow& from);
  CMsgMinimizeWindow(CMsgMinimizeWindow&& from) noexcept
    : CMsgMinimizeWindow() {
    *this = ::std::move(from);
  }

  inline CMsgMinimizeWindow& operator=(const CMsgMinimizeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMinimizeWindow& operator=(CMsgMinimizeWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMinimizeWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMinimizeWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgMinimizeWindow*>(
               &_CMsgMinimizeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(CMsgMinimizeWindow& a, CMsgMinimizeWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMinimizeWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMinimizeWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMinimizeWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMinimizeWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMinimizeWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMinimizeWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMinimizeWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMinimizeWindow";
  }
  protected:
  explicit CMsgMinimizeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMinimizeWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowBrowserContextMenu_ContextCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowBrowserContextMenu.ContextCommand) */ {
 public:
  inline CMsgShowBrowserContextMenu_ContextCommand() : CMsgShowBrowserContextMenu_ContextCommand(nullptr) {}
  ~CMsgShowBrowserContextMenu_ContextCommand() override;
  explicit constexpr CMsgShowBrowserContextMenu_ContextCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowBrowserContextMenu_ContextCommand(const CMsgShowBrowserContextMenu_ContextCommand& from);
  CMsgShowBrowserContextMenu_ContextCommand(CMsgShowBrowserContextMenu_ContextCommand&& from) noexcept
    : CMsgShowBrowserContextMenu_ContextCommand() {
    *this = ::std::move(from);
  }

  inline CMsgShowBrowserContextMenu_ContextCommand& operator=(const CMsgShowBrowserContextMenu_ContextCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowBrowserContextMenu_ContextCommand& operator=(CMsgShowBrowserContextMenu_ContextCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowBrowserContextMenu_ContextCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowBrowserContextMenu_ContextCommand* internal_default_instance() {
    return reinterpret_cast<const CMsgShowBrowserContextMenu_ContextCommand*>(
               &_CMsgShowBrowserContextMenu_ContextCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(CMsgShowBrowserContextMenu_ContextCommand& a, CMsgShowBrowserContextMenu_ContextCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowBrowserContextMenu_ContextCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowBrowserContextMenu_ContextCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowBrowserContextMenu_ContextCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowBrowserContextMenu_ContextCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowBrowserContextMenu_ContextCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShowBrowserContextMenu_ContextCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowBrowserContextMenu_ContextCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowBrowserContextMenu.ContextCommand";
  }
  protected:
  explicit CMsgShowBrowserContextMenu_ContextCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowBrowserContextMenu.ContextCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  int32_t id_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgShowBrowserContextMenu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShowBrowserContextMenu) */ {
 public:
  inline CMsgShowBrowserContextMenu() : CMsgShowBrowserContextMenu(nullptr) {}
  ~CMsgShowBrowserContextMenu() override;
  explicit constexpr CMsgShowBrowserContextMenu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShowBrowserContextMenu(const CMsgShowBrowserContextMenu& from);
  CMsgShowBrowserContextMenu(CMsgShowBrowserContextMenu&& from) noexcept
    : CMsgShowBrowserContextMenu() {
    *this = ::std::move(from);
  }

  inline CMsgShowBrowserContextMenu& operator=(const CMsgShowBrowserContextMenu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShowBrowserContextMenu& operator=(CMsgShowBrowserContextMenu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShowBrowserContextMenu& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShowBrowserContextMenu* internal_default_instance() {
    return reinterpret_cast<const CMsgShowBrowserContextMenu*>(
               &_CMsgShowBrowserContextMenu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CMsgShowBrowserContextMenu& a, CMsgShowBrowserContextMenu& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShowBrowserContextMenu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShowBrowserContextMenu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShowBrowserContextMenu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShowBrowserContextMenu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShowBrowserContextMenu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShowBrowserContextMenu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShowBrowserContextMenu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShowBrowserContextMenu";
  }
  protected:
  explicit CMsgShowBrowserContextMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgShowBrowserContextMenu_ContextCommand ContextCommand;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomCommandsFieldNumber = 2,
    kPageUrlFieldNumber = 4,
    kLinkUrlFieldNumber = 7,
    kUnfilteredLinkUrlFieldNumber = 8,
    kSelectionTextFieldNumber = 9,
    kMisspelledWordFieldNumber = 10,
    kBrowserHandleFieldNumber = 1,
    kTypeFlagsFieldNumber = 3,
    kCoordXFieldNumber = 5,
    kCoordYFieldNumber = 6,
    kEditStateFlagsFieldNumber = 11,
  };
  // repeated .CMsgShowBrowserContextMenu.ContextCommand custom_commands = 2;
  int custom_commands_size() const;
  private:
  int _internal_custom_commands_size() const;
  public:
  void clear_custom_commands();
  ::CMsgShowBrowserContextMenu_ContextCommand* mutable_custom_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowBrowserContextMenu_ContextCommand >*
      mutable_custom_commands();
  private:
  const ::CMsgShowBrowserContextMenu_ContextCommand& _internal_custom_commands(int index) const;
  ::CMsgShowBrowserContextMenu_ContextCommand* _internal_add_custom_commands();
  public:
  const ::CMsgShowBrowserContextMenu_ContextCommand& custom_commands(int index) const;
  ::CMsgShowBrowserContextMenu_ContextCommand* add_custom_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowBrowserContextMenu_ContextCommand >&
      custom_commands() const;

  // optional string page_url = 4;
  bool has_page_url() const;
  private:
  bool _internal_has_page_url() const;
  public:
  void clear_page_url();
  const std::string& page_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_url();
  PROTOBUF_NODISCARD std::string* release_page_url();
  void set_allocated_page_url(std::string* page_url);
  private:
  const std::string& _internal_page_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_url(const std::string& value);
  std::string* _internal_mutable_page_url();
  public:

  // optional string link_url = 7;
  bool has_link_url() const;
  private:
  bool _internal_has_link_url() const;
  public:
  void clear_link_url();
  const std::string& link_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_link_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_link_url();
  PROTOBUF_NODISCARD std::string* release_link_url();
  void set_allocated_link_url(std::string* link_url);
  private:
  const std::string& _internal_link_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link_url(const std::string& value);
  std::string* _internal_mutable_link_url();
  public:

  // optional string unfiltered_link_url = 8;
  bool has_unfiltered_link_url() const;
  private:
  bool _internal_has_unfiltered_link_url() const;
  public:
  void clear_unfiltered_link_url();
  const std::string& unfiltered_link_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unfiltered_link_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unfiltered_link_url();
  PROTOBUF_NODISCARD std::string* release_unfiltered_link_url();
  void set_allocated_unfiltered_link_url(std::string* unfiltered_link_url);
  private:
  const std::string& _internal_unfiltered_link_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unfiltered_link_url(const std::string& value);
  std::string* _internal_mutable_unfiltered_link_url();
  public:

  // optional string selection_text = 9;
  bool has_selection_text() const;
  private:
  bool _internal_has_selection_text() const;
  public:
  void clear_selection_text();
  const std::string& selection_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selection_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selection_text();
  PROTOBUF_NODISCARD std::string* release_selection_text();
  void set_allocated_selection_text(std::string* selection_text);
  private:
  const std::string& _internal_selection_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selection_text(const std::string& value);
  std::string* _internal_mutable_selection_text();
  public:

  // optional string misspelled_word = 10;
  bool has_misspelled_word() const;
  private:
  bool _internal_has_misspelled_word() const;
  public:
  void clear_misspelled_word();
  const std::string& misspelled_word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_misspelled_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_misspelled_word();
  PROTOBUF_NODISCARD std::string* release_misspelled_word();
  void set_allocated_misspelled_word(std::string* misspelled_word);
  private:
  const std::string& _internal_misspelled_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_misspelled_word(const std::string& value);
  std::string* _internal_mutable_misspelled_word();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 type_flags = 3;
  bool has_type_flags() const;
  private:
  bool _internal_has_type_flags() const;
  public:
  void clear_type_flags();
  uint32_t type_flags() const;
  void set_type_flags(uint32_t value);
  private:
  uint32_t _internal_type_flags() const;
  void _internal_set_type_flags(uint32_t value);
  public:

  // optional int32 coord_x = 5;
  bool has_coord_x() const;
  private:
  bool _internal_has_coord_x() const;
  public:
  void clear_coord_x();
  int32_t coord_x() const;
  void set_coord_x(int32_t value);
  private:
  int32_t _internal_coord_x() const;
  void _internal_set_coord_x(int32_t value);
  public:

  // optional int32 coord_y = 6;
  bool has_coord_y() const;
  private:
  bool _internal_has_coord_y() const;
  public:
  void clear_coord_y();
  int32_t coord_y() const;
  void set_coord_y(int32_t value);
  private:
  int32_t _internal_coord_y() const;
  void _internal_set_coord_y(int32_t value);
  public:

  // optional uint32 edit_state_flags = 11;
  bool has_edit_state_flags() const;
  private:
  bool _internal_has_edit_state_flags() const;
  public:
  void clear_edit_state_flags();
  uint32_t edit_state_flags() const;
  void set_edit_state_flags(uint32_t value);
  private:
  uint32_t _internal_edit_state_flags() const;
  void _internal_set_edit_state_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShowBrowserContextMenu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowBrowserContextMenu_ContextCommand > custom_commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unfiltered_link_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selection_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr misspelled_word_;
  uint32_t browser_handle_;
  uint32_t type_flags_;
  int32_t coord_x_;
  int32_t coord_y_;
  uint32_t edit_state_flags_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgHandleContextMenuCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgHandleContextMenuCommand) */ {
 public:
  inline CMsgHandleContextMenuCommand() : CMsgHandleContextMenuCommand(nullptr) {}
  ~CMsgHandleContextMenuCommand() override;
  explicit constexpr CMsgHandleContextMenuCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgHandleContextMenuCommand(const CMsgHandleContextMenuCommand& from);
  CMsgHandleContextMenuCommand(CMsgHandleContextMenuCommand&& from) noexcept
    : CMsgHandleContextMenuCommand() {
    *this = ::std::move(from);
  }

  inline CMsgHandleContextMenuCommand& operator=(const CMsgHandleContextMenuCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHandleContextMenuCommand& operator=(CMsgHandleContextMenuCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgHandleContextMenuCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgHandleContextMenuCommand* internal_default_instance() {
    return reinterpret_cast<const CMsgHandleContextMenuCommand*>(
               &_CMsgHandleContextMenuCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(CMsgHandleContextMenuCommand& a, CMsgHandleContextMenuCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHandleContextMenuCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgHandleContextMenuCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgHandleContextMenuCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgHandleContextMenuCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgHandleContextMenuCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgHandleContextMenuCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHandleContextMenuCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgHandleContextMenuCommand";
  }
  protected:
  explicit CMsgHandleContextMenuCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kCommandIdFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 command_id = 2;
  bool has_command_id() const;
  private:
  bool _internal_has_command_id() const;
  public:
  void clear_command_id();
  int32_t command_id() const;
  void set_command_id(int32_t value);
  private:
  int32_t _internal_command_id() const;
  void _internal_set_command_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgHandleContextMenuCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t command_id_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgTouchGesture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTouchGesture) */ {
 public:
  inline CMsgTouchGesture() : CMsgTouchGesture(nullptr) {}
  ~CMsgTouchGesture() override;
  explicit constexpr CMsgTouchGesture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTouchGesture(const CMsgTouchGesture& from);
  CMsgTouchGesture(CMsgTouchGesture&& from) noexcept
    : CMsgTouchGesture() {
    *this = ::std::move(from);
  }

  inline CMsgTouchGesture& operator=(const CMsgTouchGesture& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTouchGesture& operator=(CMsgTouchGesture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTouchGesture& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTouchGesture* internal_default_instance() {
    return reinterpret_cast<const CMsgTouchGesture*>(
               &_CMsgTouchGesture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CMsgTouchGesture& a, CMsgTouchGesture& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTouchGesture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTouchGesture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTouchGesture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTouchGesture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTouchGesture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTouchGesture& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTouchGesture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTouchGesture";
  }
  protected:
  explicit CMsgTouchGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kIdFieldNumber = 2,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kGestureFieldNumber = 3,
    kTapCountFieldNumber = 8,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kPinchScaleFieldNumber = 9,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional double x = 4;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 5;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional uint32 gesture = 3;
  bool has_gesture() const;
  private:
  bool _internal_has_gesture() const;
  public:
  void clear_gesture();
  uint32_t gesture() const;
  void set_gesture(uint32_t value);
  private:
  uint32_t _internal_gesture() const;
  void _internal_set_gesture(uint32_t value);
  public:

  // optional uint32 tap_count = 8;
  bool has_tap_count() const;
  private:
  bool _internal_has_tap_count() const;
  public:
  void clear_tap_count();
  uint32_t tap_count() const;
  void set_tap_count(uint32_t value);
  private:
  uint32_t _internal_tap_count() const;
  void _internal_set_tap_count(uint32_t value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double pinch_scale = 9;
  bool has_pinch_scale() const;
  private:
  bool _internal_has_pinch_scale() const;
  public:
  void clear_pinch_scale();
  double pinch_scale() const;
  void set_pinch_scale(double value);
  private:
  double _internal_pinch_scale() const;
  void _internal_set_pinch_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTouchGesture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  int32_t id_;
  double x_;
  double y_;
  uint32_t gesture_;
  uint32_t tap_count_;
  double width_;
  double height_;
  double pinch_scale_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetTouchGesturesToCancel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetTouchGesturesToCancel) */ {
 public:
  inline CMsgSetTouchGesturesToCancel() : CMsgSetTouchGesturesToCancel(nullptr) {}
  ~CMsgSetTouchGesturesToCancel() override;
  explicit constexpr CMsgSetTouchGesturesToCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetTouchGesturesToCancel(const CMsgSetTouchGesturesToCancel& from);
  CMsgSetTouchGesturesToCancel(CMsgSetTouchGesturesToCancel&& from) noexcept
    : CMsgSetTouchGesturesToCancel() {
    *this = ::std::move(from);
  }

  inline CMsgSetTouchGesturesToCancel& operator=(const CMsgSetTouchGesturesToCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetTouchGesturesToCancel& operator=(CMsgSetTouchGesturesToCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetTouchGesturesToCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetTouchGesturesToCancel* internal_default_instance() {
    return reinterpret_cast<const CMsgSetTouchGesturesToCancel*>(
               &_CMsgSetTouchGesturesToCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CMsgSetTouchGesturesToCancel& a, CMsgSetTouchGesturesToCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetTouchGesturesToCancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetTouchGesturesToCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetTouchGesturesToCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetTouchGesturesToCancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetTouchGesturesToCancel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetTouchGesturesToCancel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetTouchGesturesToCancel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetTouchGesturesToCancel";
  }
  protected:
  explicit CMsgSetTouchGesturesToCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGesturesFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // repeated uint32 gestures = 2;
  int gestures_size() const;
  private:
  int _internal_gestures_size() const;
  public:
  void clear_gestures();
  private:
  uint32_t _internal_gestures(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_gestures() const;
  void _internal_add_gestures(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_gestures();
  public:
  uint32_t gestures(int index) const;
  void set_gestures(int index, uint32_t value);
  void add_gestures(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      gestures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_gestures();

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetTouchGesturesToCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > gestures_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgImeSetComposition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgImeSetComposition) */ {
 public:
  inline CMsgImeSetComposition() : CMsgImeSetComposition(nullptr) {}
  ~CMsgImeSetComposition() override;
  explicit constexpr CMsgImeSetComposition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgImeSetComposition(const CMsgImeSetComposition& from);
  CMsgImeSetComposition(CMsgImeSetComposition&& from) noexcept
    : CMsgImeSetComposition() {
    *this = ::std::move(from);
  }

  inline CMsgImeSetComposition& operator=(const CMsgImeSetComposition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgImeSetComposition& operator=(CMsgImeSetComposition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgImeSetComposition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgImeSetComposition* internal_default_instance() {
    return reinterpret_cast<const CMsgImeSetComposition*>(
               &_CMsgImeSetComposition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(CMsgImeSetComposition& a, CMsgImeSetComposition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgImeSetComposition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgImeSetComposition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgImeSetComposition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgImeSetComposition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgImeSetComposition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgImeSetComposition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgImeSetComposition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgImeSetComposition";
  }
  protected:
  explicit CMsgImeSetComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgImeSetComposition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgImeCommitText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgImeCommitText) */ {
 public:
  inline CMsgImeCommitText() : CMsgImeCommitText(nullptr) {}
  ~CMsgImeCommitText() override;
  explicit constexpr CMsgImeCommitText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgImeCommitText(const CMsgImeCommitText& from);
  CMsgImeCommitText(CMsgImeCommitText&& from) noexcept
    : CMsgImeCommitText() {
    *this = ::std::move(from);
  }

  inline CMsgImeCommitText& operator=(const CMsgImeCommitText& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgImeCommitText& operator=(CMsgImeCommitText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgImeCommitText& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgImeCommitText* internal_default_instance() {
    return reinterpret_cast<const CMsgImeCommitText*>(
               &_CMsgImeCommitText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CMsgImeCommitText& a, CMsgImeCommitText& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgImeCommitText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgImeCommitText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgImeCommitText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgImeCommitText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgImeCommitText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgImeCommitText& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgImeCommitText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgImeCommitText";
  }
  protected:
  explicit CMsgImeCommitText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgImeCommitText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgImeCancelComposition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgImeCancelComposition) */ {
 public:
  inline CMsgImeCancelComposition() : CMsgImeCancelComposition(nullptr) {}
  ~CMsgImeCancelComposition() override;
  explicit constexpr CMsgImeCancelComposition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgImeCancelComposition(const CMsgImeCancelComposition& from);
  CMsgImeCancelComposition(CMsgImeCancelComposition&& from) noexcept
    : CMsgImeCancelComposition() {
    *this = ::std::move(from);
  }

  inline CMsgImeCancelComposition& operator=(const CMsgImeCancelComposition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgImeCancelComposition& operator=(CMsgImeCancelComposition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgImeCancelComposition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgImeCancelComposition* internal_default_instance() {
    return reinterpret_cast<const CMsgImeCancelComposition*>(
               &_CMsgImeCancelComposition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(CMsgImeCancelComposition& a, CMsgImeCancelComposition& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgImeCancelComposition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgImeCancelComposition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgImeCancelComposition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgImeCancelComposition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgImeCancelComposition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgImeCancelComposition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgImeCancelComposition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgImeCancelComposition";
  }
  protected:
  explicit CMsgImeCancelComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgImeCancelComposition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgImeCompositionRangeChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgImeCompositionRangeChanged) */ {
 public:
  inline CMsgImeCompositionRangeChanged() : CMsgImeCompositionRangeChanged(nullptr) {}
  ~CMsgImeCompositionRangeChanged() override;
  explicit constexpr CMsgImeCompositionRangeChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgImeCompositionRangeChanged(const CMsgImeCompositionRangeChanged& from);
  CMsgImeCompositionRangeChanged(CMsgImeCompositionRangeChanged&& from) noexcept
    : CMsgImeCompositionRangeChanged() {
    *this = ::std::move(from);
  }

  inline CMsgImeCompositionRangeChanged& operator=(const CMsgImeCompositionRangeChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgImeCompositionRangeChanged& operator=(CMsgImeCompositionRangeChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgImeCompositionRangeChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgImeCompositionRangeChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgImeCompositionRangeChanged*>(
               &_CMsgImeCompositionRangeChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CMsgImeCompositionRangeChanged& a, CMsgImeCompositionRangeChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgImeCompositionRangeChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgImeCompositionRangeChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgImeCompositionRangeChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgImeCompositionRangeChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgImeCompositionRangeChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgImeCompositionRangeChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgImeCompositionRangeChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgImeCompositionRangeChanged";
  }
  protected:
  explicit CMsgImeCompositionRangeChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgImeCompositionRangeChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t x_;
  uint32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgInspectElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgInspectElement) */ {
 public:
  inline CMsgInspectElement() : CMsgInspectElement(nullptr) {}
  ~CMsgInspectElement() override;
  explicit constexpr CMsgInspectElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgInspectElement(const CMsgInspectElement& from);
  CMsgInspectElement(CMsgInspectElement&& from) noexcept
    : CMsgInspectElement() {
    *this = ::std::move(from);
  }

  inline CMsgInspectElement& operator=(const CMsgInspectElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgInspectElement& operator=(CMsgInspectElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgInspectElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgInspectElement* internal_default_instance() {
    return reinterpret_cast<const CMsgInspectElement*>(
               &_CMsgInspectElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(CMsgInspectElement& a, CMsgInspectElement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgInspectElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgInspectElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgInspectElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgInspectElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgInspectElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgInspectElement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgInspectElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgInspectElement";
  }
  protected:
  explicit CMsgInspectElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgInspectElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  uint32_t x_;
  uint32_t y_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgDisableF5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDisableF5) */ {
 public:
  inline CMsgDisableF5() : CMsgDisableF5(nullptr) {}
  ~CMsgDisableF5() override;
  explicit constexpr CMsgDisableF5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDisableF5(const CMsgDisableF5& from);
  CMsgDisableF5(CMsgDisableF5&& from) noexcept
    : CMsgDisableF5() {
    *this = ::std::move(from);
  }

  inline CMsgDisableF5& operator=(const CMsgDisableF5& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDisableF5& operator=(CMsgDisableF5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDisableF5& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDisableF5* internal_default_instance() {
    return reinterpret_cast<const CMsgDisableF5*>(
               &_CMsgDisableF5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(CMsgDisableF5& a, CMsgDisableF5& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDisableF5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDisableF5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDisableF5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDisableF5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDisableF5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDisableF5& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDisableF5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDisableF5";
  }
  protected:
  explicit CMsgDisableF5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kDisableFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool disable = 2;
  bool has_disable() const;
  private:
  bool _internal_has_disable() const;
  public:
  void clear_disable();
  bool disable() const;
  void set_disable(bool value);
  private:
  bool _internal_disable() const;
  void _internal_set_disable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDisableF5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool disable_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgStartDownload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStartDownload) */ {
 public:
  inline CMsgStartDownload() : CMsgStartDownload(nullptr) {}
  ~CMsgStartDownload() override;
  explicit constexpr CMsgStartDownload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStartDownload(const CMsgStartDownload& from);
  CMsgStartDownload(CMsgStartDownload&& from) noexcept
    : CMsgStartDownload() {
    *this = ::std::move(from);
  }

  inline CMsgStartDownload& operator=(const CMsgStartDownload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStartDownload& operator=(CMsgStartDownload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStartDownload& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStartDownload* internal_default_instance() {
    return reinterpret_cast<const CMsgStartDownload*>(
               &_CMsgStartDownload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(CMsgStartDownload& a, CMsgStartDownload& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStartDownload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStartDownload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStartDownload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStartDownload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStartDownload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStartDownload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStartDownload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStartDownload";
  }
  protected:
  explicit CMsgStartDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStartDownload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetTopWindow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetTopWindow) */ {
 public:
  inline CMsgSetTopWindow() : CMsgSetTopWindow(nullptr) {}
  ~CMsgSetTopWindow() override;
  explicit constexpr CMsgSetTopWindow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetTopWindow(const CMsgSetTopWindow& from);
  CMsgSetTopWindow(CMsgSetTopWindow&& from) noexcept
    : CMsgSetTopWindow() {
    *this = ::std::move(from);
  }

  inline CMsgSetTopWindow& operator=(const CMsgSetTopWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetTopWindow& operator=(CMsgSetTopWindow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetTopWindow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetTopWindow* internal_default_instance() {
    return reinterpret_cast<const CMsgSetTopWindow*>(
               &_CMsgSetTopWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CMsgSetTopWindow& a, CMsgSetTopWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetTopWindow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetTopWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetTopWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetTopWindow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetTopWindow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetTopWindow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetTopWindow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetTopWindow";
  }
  protected:
  explicit CMsgSetTopWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetTopWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserViewPostMessageToParentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserViewPostMessageToParentRequest) */ {
 public:
  inline CMsgBrowserViewPostMessageToParentRequest() : CMsgBrowserViewPostMessageToParentRequest(nullptr) {}
  ~CMsgBrowserViewPostMessageToParentRequest() override;
  explicit constexpr CMsgBrowserViewPostMessageToParentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserViewPostMessageToParentRequest(const CMsgBrowserViewPostMessageToParentRequest& from);
  CMsgBrowserViewPostMessageToParentRequest(CMsgBrowserViewPostMessageToParentRequest&& from) noexcept
    : CMsgBrowserViewPostMessageToParentRequest() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserViewPostMessageToParentRequest& operator=(const CMsgBrowserViewPostMessageToParentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserViewPostMessageToParentRequest& operator=(CMsgBrowserViewPostMessageToParentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserViewPostMessageToParentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserViewPostMessageToParentRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserViewPostMessageToParentRequest*>(
               &_CMsgBrowserViewPostMessageToParentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(CMsgBrowserViewPostMessageToParentRequest& a, CMsgBrowserViewPostMessageToParentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserViewPostMessageToParentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserViewPostMessageToParentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserViewPostMessageToParentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserViewPostMessageToParentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserViewPostMessageToParentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserViewPostMessageToParentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserViewPostMessageToParentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserViewPostMessageToParentRequest";
  }
  protected:
  explicit CMsgBrowserViewPostMessageToParentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kArgsFieldNumber = 3,
    kRequestingUrlFieldNumber = 4,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string args = 3;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // optional string requesting_url = 4;
  bool has_requesting_url() const;
  private:
  bool _internal_has_requesting_url() const;
  public:
  void clear_requesting_url();
  const std::string& requesting_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_url();
  PROTOBUF_NODISCARD std::string* release_requesting_url();
  void set_allocated_requesting_url(std::string* requesting_url);
  private:
  const std::string& _internal_requesting_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_url(const std::string& value);
  std::string* _internal_mutable_requesting_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserViewPostMessageToParentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBlockedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBlockedRequest) */ {
 public:
  inline CMsgBlockedRequest() : CMsgBlockedRequest(nullptr) {}
  ~CMsgBlockedRequest() override;
  explicit constexpr CMsgBlockedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBlockedRequest(const CMsgBlockedRequest& from);
  CMsgBlockedRequest(CMsgBlockedRequest&& from) noexcept
    : CMsgBlockedRequest() {
    *this = ::std::move(from);
  }

  inline CMsgBlockedRequest& operator=(const CMsgBlockedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBlockedRequest& operator=(CMsgBlockedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBlockedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBlockedRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgBlockedRequest*>(
               &_CMsgBlockedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(CMsgBlockedRequest& a, CMsgBlockedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBlockedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBlockedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBlockedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBlockedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBlockedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBlockedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBlockedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBlockedRequest";
  }
  protected:
  explicit CMsgBlockedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBlockedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgBrowserFocusChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBrowserFocusChanged) */ {
 public:
  inline CMsgBrowserFocusChanged() : CMsgBrowserFocusChanged(nullptr) {}
  ~CMsgBrowserFocusChanged() override;
  explicit constexpr CMsgBrowserFocusChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBrowserFocusChanged(const CMsgBrowserFocusChanged& from);
  CMsgBrowserFocusChanged(CMsgBrowserFocusChanged&& from) noexcept
    : CMsgBrowserFocusChanged() {
    *this = ::std::move(from);
  }

  inline CMsgBrowserFocusChanged& operator=(const CMsgBrowserFocusChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBrowserFocusChanged& operator=(CMsgBrowserFocusChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBrowserFocusChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBrowserFocusChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgBrowserFocusChanged*>(
               &_CMsgBrowserFocusChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(CMsgBrowserFocusChanged& a, CMsgBrowserFocusChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBrowserFocusChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBrowserFocusChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBrowserFocusChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBrowserFocusChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBrowserFocusChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBrowserFocusChanged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBrowserFocusChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBrowserFocusChanged";
  }
  protected:
  explicit CMsgBrowserFocusChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kFocusedFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool focused = 2;
  bool has_focused() const;
  private:
  bool _internal_has_focused() const;
  public:
  void clear_focused();
  bool focused() const;
  void set_focused(bool value);
  private:
  bool _internal_focused() const;
  void _internal_set_focused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBrowserFocusChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool focused_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetProtocolBlockList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetProtocolBlockList) */ {
 public:
  inline CMsgSetProtocolBlockList() : CMsgSetProtocolBlockList(nullptr) {}
  ~CMsgSetProtocolBlockList() override;
  explicit constexpr CMsgSetProtocolBlockList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetProtocolBlockList(const CMsgSetProtocolBlockList& from);
  CMsgSetProtocolBlockList(CMsgSetProtocolBlockList&& from) noexcept
    : CMsgSetProtocolBlockList() {
    *this = ::std::move(from);
  }

  inline CMsgSetProtocolBlockList& operator=(const CMsgSetProtocolBlockList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetProtocolBlockList& operator=(CMsgSetProtocolBlockList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetProtocolBlockList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetProtocolBlockList* internal_default_instance() {
    return reinterpret_cast<const CMsgSetProtocolBlockList*>(
               &_CMsgSetProtocolBlockList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CMsgSetProtocolBlockList& a, CMsgSetProtocolBlockList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetProtocolBlockList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetProtocolBlockList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetProtocolBlockList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetProtocolBlockList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetProtocolBlockList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetProtocolBlockList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetProtocolBlockList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetProtocolBlockList";
  }
  protected:
  explicit CMsgSetProtocolBlockList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kBrowserHandleFieldNumber = 1,
  };
  // optional string list = 2;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const std::string& list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_list();
  PROTOBUF_NODISCARD std::string* release_list();
  void set_allocated_list(std::string* list);
  private:
  const std::string& _internal_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_list(const std::string& value);
  std::string* _internal_mutable_list();
  public:

  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetProtocolBlockList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetForceDeviceScaleFactors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetForceDeviceScaleFactors) */ {
 public:
  inline CMsgSetForceDeviceScaleFactors() : CMsgSetForceDeviceScaleFactors(nullptr) {}
  ~CMsgSetForceDeviceScaleFactors() override;
  explicit constexpr CMsgSetForceDeviceScaleFactors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetForceDeviceScaleFactors(const CMsgSetForceDeviceScaleFactors& from);
  CMsgSetForceDeviceScaleFactors(CMsgSetForceDeviceScaleFactors&& from) noexcept
    : CMsgSetForceDeviceScaleFactors() {
    *this = ::std::move(from);
  }

  inline CMsgSetForceDeviceScaleFactors& operator=(const CMsgSetForceDeviceScaleFactors& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetForceDeviceScaleFactors& operator=(CMsgSetForceDeviceScaleFactors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetForceDeviceScaleFactors& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetForceDeviceScaleFactors* internal_default_instance() {
    return reinterpret_cast<const CMsgSetForceDeviceScaleFactors*>(
               &_CMsgSetForceDeviceScaleFactors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(CMsgSetForceDeviceScaleFactors& a, CMsgSetForceDeviceScaleFactors& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetForceDeviceScaleFactors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetForceDeviceScaleFactors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetForceDeviceScaleFactors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetForceDeviceScaleFactors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetForceDeviceScaleFactors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetForceDeviceScaleFactors& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetForceDeviceScaleFactors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetForceDeviceScaleFactors";
  }
  protected:
  explicit CMsgSetForceDeviceScaleFactors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDpiScaleFieldNumber = 1,
    kBrowserScaleFieldNumber = 2,
  };
  // optional double dpi_scale = 1;
  bool has_dpi_scale() const;
  private:
  bool _internal_has_dpi_scale() const;
  public:
  void clear_dpi_scale();
  double dpi_scale() const;
  void set_dpi_scale(double value);
  private:
  double _internal_dpi_scale() const;
  void _internal_set_dpi_scale(double value);
  public:

  // optional double browser_scale = 2;
  bool has_browser_scale() const;
  private:
  bool _internal_has_browser_scale() const;
  public:
  void clear_browser_scale();
  double browser_scale() const;
  void set_browser_scale(double value);
  private:
  double _internal_browser_scale() const;
  void _internal_set_browser_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetForceDeviceScaleFactors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double dpi_scale_;
  double browser_scale_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetUIMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetUIMode) */ {
 public:
  inline CMsgSetUIMode() : CMsgSetUIMode(nullptr) {}
  ~CMsgSetUIMode() override;
  explicit constexpr CMsgSetUIMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetUIMode(const CMsgSetUIMode& from);
  CMsgSetUIMode(CMsgSetUIMode&& from) noexcept
    : CMsgSetUIMode() {
    *this = ::std::move(from);
  }

  inline CMsgSetUIMode& operator=(const CMsgSetUIMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetUIMode& operator=(CMsgSetUIMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetUIMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetUIMode* internal_default_instance() {
    return reinterpret_cast<const CMsgSetUIMode*>(
               &_CMsgSetUIMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(CMsgSetUIMode& a, CMsgSetUIMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetUIMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetUIMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetUIMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetUIMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetUIMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetUIMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetUIMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetUIMode";
  }
  protected:
  explicit CMsgSetUIMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiModeFieldNumber = 1,
  };
  // optional int32 ui_mode = 1;
  bool has_ui_mode() const;
  private:
  bool _internal_has_ui_mode() const;
  public:
  void clear_ui_mode();
  int32_t ui_mode() const;
  void set_ui_mode(int32_t value);
  private:
  int32_t _internal_ui_mode() const;
  void _internal_set_ui_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetUIMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ui_mode_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgPopupCreated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPopupCreated) */ {
 public:
  inline CMsgPopupCreated() : CMsgPopupCreated(nullptr) {}
  ~CMsgPopupCreated() override;
  explicit constexpr CMsgPopupCreated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPopupCreated(const CMsgPopupCreated& from);
  CMsgPopupCreated(CMsgPopupCreated&& from) noexcept
    : CMsgPopupCreated() {
    *this = ::std::move(from);
  }

  inline CMsgPopupCreated& operator=(const CMsgPopupCreated& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPopupCreated& operator=(CMsgPopupCreated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPopupCreated& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPopupCreated* internal_default_instance() {
    return reinterpret_cast<const CMsgPopupCreated*>(
               &_CMsgPopupCreated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(CMsgPopupCreated& a, CMsgPopupCreated& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPopupCreated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPopupCreated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPopupCreated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPopupCreated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPopupCreated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPopupCreated& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPopupCreated* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPopupCreated";
  }
  protected:
  explicit CMsgPopupCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPopupCreated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetVRKeyboardVisibility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetVRKeyboardVisibility) */ {
 public:
  inline CMsgSetVRKeyboardVisibility() : CMsgSetVRKeyboardVisibility(nullptr) {}
  ~CMsgSetVRKeyboardVisibility() override;
  explicit constexpr CMsgSetVRKeyboardVisibility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetVRKeyboardVisibility(const CMsgSetVRKeyboardVisibility& from);
  CMsgSetVRKeyboardVisibility(CMsgSetVRKeyboardVisibility&& from) noexcept
    : CMsgSetVRKeyboardVisibility() {
    *this = ::std::move(from);
  }

  inline CMsgSetVRKeyboardVisibility& operator=(const CMsgSetVRKeyboardVisibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetVRKeyboardVisibility& operator=(CMsgSetVRKeyboardVisibility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSetVRKeyboardVisibility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetVRKeyboardVisibility* internal_default_instance() {
    return reinterpret_cast<const CMsgSetVRKeyboardVisibility*>(
               &_CMsgSetVRKeyboardVisibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(CMsgSetVRKeyboardVisibility& a, CMsgSetVRKeyboardVisibility& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetVRKeyboardVisibility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetVRKeyboardVisibility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSetVRKeyboardVisibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSetVRKeyboardVisibility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSetVRKeyboardVisibility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSetVRKeyboardVisibility& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetVRKeyboardVisibility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetVRKeyboardVisibility";
  }
  protected:
  explicit CMsgSetVRKeyboardVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserHandleFieldNumber = 1,
    kVisibleFieldNumber = 2,
  };
  // optional uint32 browser_handle = 1;
  bool has_browser_handle() const;
  private:
  bool _internal_has_browser_handle() const;
  public:
  void clear_browser_handle();
  uint32_t browser_handle() const;
  void set_browser_handle(uint32_t value);
  private:
  uint32_t _internal_browser_handle() const;
  void _internal_set_browser_handle(uint32_t value);
  public:

  // optional bool visible = 2;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetVRKeyboardVisibility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t browser_handle_;
  bool visible_;
  friend struct ::TableStruct_htmlmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgKeyUp

// optional uint32 browser_handle = 1;
inline bool CMsgKeyUp::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgKeyUp::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgKeyUp::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgKeyUp::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgKeyUp::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgKeyUp.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgKeyUp::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgKeyUp::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgKeyUp.browser_handle)
}

// optional uint32 keyCode = 2;
inline bool CMsgKeyUp::_internal_has_keycode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgKeyUp::has_keycode() const {
  return _internal_has_keycode();
}
inline void CMsgKeyUp::clear_keycode() {
  keycode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgKeyUp::_internal_keycode() const {
  return keycode_;
}
inline uint32_t CMsgKeyUp::keycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyUp.keyCode)
  return _internal_keycode();
}
inline void CMsgKeyUp::_internal_set_keycode(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  keycode_ = value;
}
inline void CMsgKeyUp::set_keycode(uint32_t value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyUp.keyCode)
}

// optional uint32 modifiers = 3;
inline bool CMsgKeyUp::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgKeyUp::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgKeyUp::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgKeyUp::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgKeyUp::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgKeyUp.modifiers)
  return _internal_modifiers();
}
inline void CMsgKeyUp::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgKeyUp::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgKeyUp.modifiers)
}

// optional uint32 nativeKeyCode = 4;
inline bool CMsgKeyUp::_internal_has_nativekeycode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgKeyUp::has_nativekeycode() const {
  return _internal_has_nativekeycode();
}
inline void CMsgKeyUp::clear_nativekeycode() {
  nativekeycode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgKeyUp::_internal_nativekeycode() const {
  return nativekeycode_;
}
inline uint32_t CMsgKeyUp::nativekeycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyUp.nativeKeyCode)
  return _internal_nativekeycode();
}
inline void CMsgKeyUp::_internal_set_nativekeycode(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  nativekeycode_ = value;
}
inline void CMsgKeyUp::set_nativekeycode(uint32_t value) {
  _internal_set_nativekeycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyUp.nativeKeyCode)
}

// -------------------------------------------------------------------

// CMsgKeyDown

// optional uint32 browser_handle = 1;
inline bool CMsgKeyDown::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgKeyDown::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgKeyDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgKeyDown::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgKeyDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgKeyDown.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgKeyDown::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgKeyDown::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgKeyDown.browser_handle)
}

// optional uint32 keyCode = 2;
inline bool CMsgKeyDown::_internal_has_keycode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgKeyDown::has_keycode() const {
  return _internal_has_keycode();
}
inline void CMsgKeyDown::clear_keycode() {
  keycode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgKeyDown::_internal_keycode() const {
  return keycode_;
}
inline uint32_t CMsgKeyDown::keycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyDown.keyCode)
  return _internal_keycode();
}
inline void CMsgKeyDown::_internal_set_keycode(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  keycode_ = value;
}
inline void CMsgKeyDown::set_keycode(uint32_t value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyDown.keyCode)
}

// optional uint32 modifiers = 3;
inline bool CMsgKeyDown::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgKeyDown::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgKeyDown::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgKeyDown::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgKeyDown::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgKeyDown.modifiers)
  return _internal_modifiers();
}
inline void CMsgKeyDown::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgKeyDown::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgKeyDown.modifiers)
}

// optional bool is_system_key = 4;
inline bool CMsgKeyDown::_internal_has_is_system_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgKeyDown::has_is_system_key() const {
  return _internal_has_is_system_key();
}
inline void CMsgKeyDown::clear_is_system_key() {
  is_system_key_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgKeyDown::_internal_is_system_key() const {
  return is_system_key_;
}
inline bool CMsgKeyDown::is_system_key() const {
  // @@protoc_insertion_point(field_get:CMsgKeyDown.is_system_key)
  return _internal_is_system_key();
}
inline void CMsgKeyDown::_internal_set_is_system_key(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_system_key_ = value;
}
inline void CMsgKeyDown::set_is_system_key(bool value) {
  _internal_set_is_system_key(value);
  // @@protoc_insertion_point(field_set:CMsgKeyDown.is_system_key)
}

// optional uint32 nativeKeyCode = 5;
inline bool CMsgKeyDown::_internal_has_nativekeycode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgKeyDown::has_nativekeycode() const {
  return _internal_has_nativekeycode();
}
inline void CMsgKeyDown::clear_nativekeycode() {
  nativekeycode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgKeyDown::_internal_nativekeycode() const {
  return nativekeycode_;
}
inline uint32_t CMsgKeyDown::nativekeycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyDown.nativeKeyCode)
  return _internal_nativekeycode();
}
inline void CMsgKeyDown::_internal_set_nativekeycode(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  nativekeycode_ = value;
}
inline void CMsgKeyDown::set_nativekeycode(uint32_t value) {
  _internal_set_nativekeycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyDown.nativeKeyCode)
}

// -------------------------------------------------------------------

// CMsgKeyChar

// optional uint32 browser_handle = 1;
inline bool CMsgKeyChar::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgKeyChar::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgKeyChar::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgKeyChar::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgKeyChar::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgKeyChar.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgKeyChar::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgKeyChar::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgKeyChar.browser_handle)
}

// optional uint32 unichar = 2;
inline bool CMsgKeyChar::_internal_has_unichar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgKeyChar::has_unichar() const {
  return _internal_has_unichar();
}
inline void CMsgKeyChar::clear_unichar() {
  unichar_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgKeyChar::_internal_unichar() const {
  return unichar_;
}
inline uint32_t CMsgKeyChar::unichar() const {
  // @@protoc_insertion_point(field_get:CMsgKeyChar.unichar)
  return _internal_unichar();
}
inline void CMsgKeyChar::_internal_set_unichar(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  unichar_ = value;
}
inline void CMsgKeyChar::set_unichar(uint32_t value) {
  _internal_set_unichar(value);
  // @@protoc_insertion_point(field_set:CMsgKeyChar.unichar)
}

// optional uint32 modifiers = 3;
inline bool CMsgKeyChar::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgKeyChar::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgKeyChar::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgKeyChar::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgKeyChar::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgKeyChar.modifiers)
  return _internal_modifiers();
}
inline void CMsgKeyChar::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgKeyChar::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgKeyChar.modifiers)
}

// optional uint32 keyCode = 4;
inline bool CMsgKeyChar::_internal_has_keycode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgKeyChar::has_keycode() const {
  return _internal_has_keycode();
}
inline void CMsgKeyChar::clear_keycode() {
  keycode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgKeyChar::_internal_keycode() const {
  return keycode_;
}
inline uint32_t CMsgKeyChar::keycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyChar.keyCode)
  return _internal_keycode();
}
inline void CMsgKeyChar::_internal_set_keycode(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  keycode_ = value;
}
inline void CMsgKeyChar::set_keycode(uint32_t value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyChar.keyCode)
}

// optional uint32 nativeKeyCode = 5;
inline bool CMsgKeyChar::_internal_has_nativekeycode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgKeyChar::has_nativekeycode() const {
  return _internal_has_nativekeycode();
}
inline void CMsgKeyChar::clear_nativekeycode() {
  nativekeycode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgKeyChar::_internal_nativekeycode() const {
  return nativekeycode_;
}
inline uint32_t CMsgKeyChar::nativekeycode() const {
  // @@protoc_insertion_point(field_get:CMsgKeyChar.nativeKeyCode)
  return _internal_nativekeycode();
}
inline void CMsgKeyChar::_internal_set_nativekeycode(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  nativekeycode_ = value;
}
inline void CMsgKeyChar::set_nativekeycode(uint32_t value) {
  _internal_set_nativekeycode(value);
  // @@protoc_insertion_point(field_set:CMsgKeyChar.nativeKeyCode)
}

// -------------------------------------------------------------------

// CMsgMouseDown

// optional uint32 browser_handle = 1;
inline bool CMsgMouseDown::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseDown::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseDown::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDown.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseDown::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseDown::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDown.browser_handle)
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseDown::_internal_has_mouse_button() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMouseDown::has_mouse_button() const {
  return _internal_has_mouse_button();
}
inline void CMsgMouseDown::clear_mouse_button() {
  mouse_button_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMouseDown::_internal_mouse_button() const {
  return mouse_button_;
}
inline uint32_t CMsgMouseDown::mouse_button() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDown.mouse_button)
  return _internal_mouse_button();
}
inline void CMsgMouseDown::_internal_set_mouse_button(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  mouse_button_ = value;
}
inline void CMsgMouseDown::set_mouse_button(uint32_t value) {
  _internal_set_mouse_button(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDown.mouse_button)
}

// optional uint32 modifiers = 3;
inline bool CMsgMouseDown::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMouseDown::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgMouseDown::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgMouseDown::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgMouseDown::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDown.modifiers)
  return _internal_modifiers();
}
inline void CMsgMouseDown::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgMouseDown::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDown.modifiers)
}

// -------------------------------------------------------------------

// CMsgMouseUp

// optional uint32 browser_handle = 1;
inline bool CMsgMouseUp::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseUp::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseUp::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseUp::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseUp::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseUp::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.browser_handle)
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseUp::_internal_has_mouse_button() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_mouse_button() const {
  return _internal_has_mouse_button();
}
inline void CMsgMouseUp::clear_mouse_button() {
  mouse_button_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMouseUp::_internal_mouse_button() const {
  return mouse_button_;
}
inline uint32_t CMsgMouseUp::mouse_button() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.mouse_button)
  return _internal_mouse_button();
}
inline void CMsgMouseUp::_internal_set_mouse_button(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  mouse_button_ = value;
}
inline void CMsgMouseUp::set_mouse_button(uint32_t value) {
  _internal_set_mouse_button(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.mouse_button)
}

// optional uint32 modifiers = 3;
inline bool CMsgMouseUp::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgMouseUp::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgMouseUp::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgMouseUp::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.modifiers)
  return _internal_modifiers();
}
inline void CMsgMouseUp::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgMouseUp::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.modifiers)
}

// optional bool is_off_panel = 4;
inline bool CMsgMouseUp::_internal_has_is_off_panel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_is_off_panel() const {
  return _internal_has_is_off_panel();
}
inline void CMsgMouseUp::clear_is_off_panel() {
  is_off_panel_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgMouseUp::_internal_is_off_panel() const {
  return is_off_panel_;
}
inline bool CMsgMouseUp::is_off_panel() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.is_off_panel)
  return _internal_is_off_panel();
}
inline void CMsgMouseUp::_internal_set_is_off_panel(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_off_panel_ = value;
}
inline void CMsgMouseUp::set_is_off_panel(bool value) {
  _internal_set_is_off_panel(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.is_off_panel)
}

// optional int32 x = 5;
inline bool CMsgMouseUp::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_x() const {
  return _internal_has_x();
}
inline void CMsgMouseUp::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgMouseUp::_internal_x() const {
  return x_;
}
inline int32_t CMsgMouseUp::x() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.x)
  return _internal_x();
}
inline void CMsgMouseUp::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  x_ = value;
}
inline void CMsgMouseUp::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.x)
}

// optional int32 y = 6;
inline bool CMsgMouseUp::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgMouseUp::has_y() const {
  return _internal_has_y();
}
inline void CMsgMouseUp::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgMouseUp::_internal_y() const {
  return y_;
}
inline int32_t CMsgMouseUp::y() const {
  // @@protoc_insertion_point(field_get:CMsgMouseUp.y)
  return _internal_y();
}
inline void CMsgMouseUp::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
}
inline void CMsgMouseUp::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgMouseUp.y)
}

// -------------------------------------------------------------------

// CMsgMouseDblClick

// optional uint32 browser_handle = 1;
inline bool CMsgMouseDblClick::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseDblClick::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseDblClick::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseDblClick::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseDblClick::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDblClick.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseDblClick::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseDblClick::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDblClick.browser_handle)
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseDblClick::_internal_has_mouse_button() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMouseDblClick::has_mouse_button() const {
  return _internal_has_mouse_button();
}
inline void CMsgMouseDblClick::clear_mouse_button() {
  mouse_button_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMouseDblClick::_internal_mouse_button() const {
  return mouse_button_;
}
inline uint32_t CMsgMouseDblClick::mouse_button() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDblClick.mouse_button)
  return _internal_mouse_button();
}
inline void CMsgMouseDblClick::_internal_set_mouse_button(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  mouse_button_ = value;
}
inline void CMsgMouseDblClick::set_mouse_button(uint32_t value) {
  _internal_set_mouse_button(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDblClick.mouse_button)
}

// optional uint32 modifiers = 3;
inline bool CMsgMouseDblClick::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMouseDblClick::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgMouseDblClick::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgMouseDblClick::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgMouseDblClick::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgMouseDblClick.modifiers)
  return _internal_modifiers();
}
inline void CMsgMouseDblClick::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  modifiers_ = value;
}
inline void CMsgMouseDblClick::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgMouseDblClick.modifiers)
}

// -------------------------------------------------------------------

// CMsgMouseWheel

// optional uint32 browser_handle = 1;
inline bool CMsgMouseWheel::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseWheel::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseWheel::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseWheel::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseWheel::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseWheel.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseWheel::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseWheel::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseWheel.browser_handle)
}

// optional int32 deltax = 2;
inline bool CMsgMouseWheel::_internal_has_deltax() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMouseWheel::has_deltax() const {
  return _internal_has_deltax();
}
inline void CMsgMouseWheel::clear_deltax() {
  deltax_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgMouseWheel::_internal_deltax() const {
  return deltax_;
}
inline int32_t CMsgMouseWheel::deltax() const {
  // @@protoc_insertion_point(field_get:CMsgMouseWheel.deltax)
  return _internal_deltax();
}
inline void CMsgMouseWheel::_internal_set_deltax(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  deltax_ = value;
}
inline void CMsgMouseWheel::set_deltax(int32_t value) {
  _internal_set_deltax(value);
  // @@protoc_insertion_point(field_set:CMsgMouseWheel.deltax)
}

// optional int32 deltay = 3;
inline bool CMsgMouseWheel::_internal_has_deltay() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMouseWheel::has_deltay() const {
  return _internal_has_deltay();
}
inline void CMsgMouseWheel::clear_deltay() {
  deltay_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgMouseWheel::_internal_deltay() const {
  return deltay_;
}
inline int32_t CMsgMouseWheel::deltay() const {
  // @@protoc_insertion_point(field_get:CMsgMouseWheel.deltay)
  return _internal_deltay();
}
inline void CMsgMouseWheel::_internal_set_deltay(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  deltay_ = value;
}
inline void CMsgMouseWheel::set_deltay(int32_t value) {
  _internal_set_deltay(value);
  // @@protoc_insertion_point(field_set:CMsgMouseWheel.deltay)
}

// optional uint32 modifiers = 4;
inline bool CMsgMouseWheel::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMouseWheel::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgMouseWheel::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgMouseWheel::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgMouseWheel::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgMouseWheel.modifiers)
  return _internal_modifiers();
}
inline void CMsgMouseWheel::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  modifiers_ = value;
}
inline void CMsgMouseWheel::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgMouseWheel.modifiers)
}

// -------------------------------------------------------------------

// CMsgMouseMove

// optional uint32 browser_handle = 1;
inline bool CMsgMouseMove::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseMove::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseMove::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseMove::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseMove::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseMove.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseMove::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseMove::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseMove.browser_handle)
}

// optional int32 x = 2;
inline bool CMsgMouseMove::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMouseMove::has_x() const {
  return _internal_has_x();
}
inline void CMsgMouseMove::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgMouseMove::_internal_x() const {
  return x_;
}
inline int32_t CMsgMouseMove::x() const {
  // @@protoc_insertion_point(field_get:CMsgMouseMove.x)
  return _internal_x();
}
inline void CMsgMouseMove::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgMouseMove::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgMouseMove.x)
}

// optional int32 y = 3;
inline bool CMsgMouseMove::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMouseMove::has_y() const {
  return _internal_has_y();
}
inline void CMsgMouseMove::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgMouseMove::_internal_y() const {
  return y_;
}
inline int32_t CMsgMouseMove::y() const {
  // @@protoc_insertion_point(field_get:CMsgMouseMove.y)
  return _internal_y();
}
inline void CMsgMouseMove::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgMouseMove::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgMouseMove.y)
}

// optional uint32 modifiers = 4;
inline bool CMsgMouseMove::_internal_has_modifiers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMouseMove::has_modifiers() const {
  return _internal_has_modifiers();
}
inline void CMsgMouseMove::clear_modifiers() {
  modifiers_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgMouseMove::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t CMsgMouseMove::modifiers() const {
  // @@protoc_insertion_point(field_get:CMsgMouseMove.modifiers)
  return _internal_modifiers();
}
inline void CMsgMouseMove::_internal_set_modifiers(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  modifiers_ = value;
}
inline void CMsgMouseMove::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:CMsgMouseMove.modifiers)
}

// -------------------------------------------------------------------

// CMsgMouseLeave

// optional uint32 browser_handle = 1;
inline bool CMsgMouseLeave::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMouseLeave::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMouseLeave::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMouseLeave::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMouseLeave::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMouseLeave.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMouseLeave::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMouseLeave::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMouseLeave.browser_handle)
}

// -------------------------------------------------------------------

// CMsgBrowserCreate

// optional uint32 request_id = 1;
inline bool CMsgBrowserCreate::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgBrowserCreate::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBrowserCreate::_internal_request_id() const {
  return request_id_;
}
inline uint32_t CMsgBrowserCreate::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.request_id)
  return _internal_request_id();
}
inline void CMsgBrowserCreate::_internal_set_request_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  request_id_ = value;
}
inline void CMsgBrowserCreate::set_request_id(uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.request_id)
}

// optional string useragent = 3;
inline bool CMsgBrowserCreate::_internal_has_useragent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_useragent() const {
  return _internal_has_useragent();
}
inline void CMsgBrowserCreate::clear_useragent() {
  useragent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserCreate::useragent() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.useragent)
  return _internal_useragent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserCreate::set_useragent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.useragent)
}
inline std::string* CMsgBrowserCreate::mutable_useragent() {
  std::string* _s = _internal_mutable_useragent();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserCreate.useragent)
  return _s;
}
inline const std::string& CMsgBrowserCreate::_internal_useragent() const {
  return useragent_.Get();
}
inline void CMsgBrowserCreate::_internal_set_useragent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::_internal_mutable_useragent() {
  _has_bits_[0] |= 0x00000001u;
  return useragent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::release_useragent() {
  // @@protoc_insertion_point(field_release:CMsgBrowserCreate.useragent)
  if (!_internal_has_useragent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = useragent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (useragent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserCreate::set_allocated_useragent(std::string* useragent) {
  if (useragent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  useragent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useragent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (useragent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserCreate.useragent)
}

// optional string user_css = 5;
inline bool CMsgBrowserCreate::_internal_has_user_css() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_user_css() const {
  return _internal_has_user_css();
}
inline void CMsgBrowserCreate::clear_user_css() {
  user_css_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBrowserCreate::user_css() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.user_css)
  return _internal_user_css();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserCreate::set_user_css(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 user_css_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.user_css)
}
inline std::string* CMsgBrowserCreate::mutable_user_css() {
  std::string* _s = _internal_mutable_user_css();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserCreate.user_css)
  return _s;
}
inline const std::string& CMsgBrowserCreate::_internal_user_css() const {
  return user_css_.Get();
}
inline void CMsgBrowserCreate::_internal_set_user_css(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_css_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::_internal_mutable_user_css() {
  _has_bits_[0] |= 0x00000002u;
  return user_css_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::release_user_css() {
  // @@protoc_insertion_point(field_release:CMsgBrowserCreate.user_css)
  if (!_internal_has_user_css()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = user_css_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_css_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_css_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserCreate::set_allocated_user_css(std::string* user_css) {
  if (user_css != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_css_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_css,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_css_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_css_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserCreate.user_css)
}

// optional bool native_dropdowns = 6;
inline bool CMsgBrowserCreate::_internal_has_native_dropdowns() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_native_dropdowns() const {
  return _internal_has_native_dropdowns();
}
inline void CMsgBrowserCreate::clear_native_dropdowns() {
  native_dropdowns_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgBrowserCreate::_internal_native_dropdowns() const {
  return native_dropdowns_;
}
inline bool CMsgBrowserCreate::native_dropdowns() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.native_dropdowns)
  return _internal_native_dropdowns();
}
inline void CMsgBrowserCreate::_internal_set_native_dropdowns(bool value) {
  _has_bits_[0] |= 0x00000200u;
  native_dropdowns_ = value;
}
inline void CMsgBrowserCreate::set_native_dropdowns(bool value) {
  _internal_set_native_dropdowns(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.native_dropdowns)
}

// optional float dpi_scaling = 7;
inline bool CMsgBrowserCreate::_internal_has_dpi_scaling() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_dpi_scaling() const {
  return _internal_has_dpi_scaling();
}
inline void CMsgBrowserCreate::clear_dpi_scaling() {
  dpi_scaling_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgBrowserCreate::_internal_dpi_scaling() const {
  return dpi_scaling_;
}
inline float CMsgBrowserCreate::dpi_scaling() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.dpi_scaling)
  return _internal_dpi_scaling();
}
inline void CMsgBrowserCreate::_internal_set_dpi_scaling(float value) {
  _has_bits_[0] |= 0x00000040u;
  dpi_scaling_ = value;
}
inline void CMsgBrowserCreate::set_dpi_scaling(float value) {
  _internal_set_dpi_scaling(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.dpi_scaling)
}

// optional bool offscreen = 8 [default = true];
inline bool CMsgBrowserCreate::_internal_has_offscreen() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_offscreen() const {
  return _internal_has_offscreen();
}
inline void CMsgBrowserCreate::clear_offscreen() {
  offscreen_ = true;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgBrowserCreate::_internal_offscreen() const {
  return offscreen_;
}
inline bool CMsgBrowserCreate::offscreen() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.offscreen)
  return _internal_offscreen();
}
inline void CMsgBrowserCreate::_internal_set_offscreen(bool value) {
  _has_bits_[0] |= 0x00010000u;
  offscreen_ = value;
}
inline void CMsgBrowserCreate::set_offscreen(bool value) {
  _internal_set_offscreen(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.offscreen)
}

// optional uint32 initial_width = 9 [default = 0];
inline bool CMsgBrowserCreate::_internal_has_initial_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_initial_width() const {
  return _internal_has_initial_width();
}
inline void CMsgBrowserCreate::clear_initial_width() {
  initial_width_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBrowserCreate::_internal_initial_width() const {
  return initial_width_;
}
inline uint32_t CMsgBrowserCreate::initial_width() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.initial_width)
  return _internal_initial_width();
}
inline void CMsgBrowserCreate::_internal_set_initial_width(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  initial_width_ = value;
}
inline void CMsgBrowserCreate::set_initial_width(uint32_t value) {
  _internal_set_initial_width(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.initial_width)
}

// optional uint32 initial_height = 10 [default = 0];
inline bool CMsgBrowserCreate::_internal_has_initial_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_initial_height() const {
  return _internal_has_initial_height();
}
inline void CMsgBrowserCreate::clear_initial_height() {
  initial_height_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBrowserCreate::_internal_initial_height() const {
  return initial_height_;
}
inline uint32_t CMsgBrowserCreate::initial_height() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.initial_height)
  return _internal_initial_height();
}
inline void CMsgBrowserCreate::_internal_set_initial_height(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  initial_height_ = value;
}
inline void CMsgBrowserCreate::set_initial_height(uint32_t value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.initial_height)
}

// optional string window_icon = 11;
inline bool CMsgBrowserCreate::_internal_has_window_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_window_icon() const {
  return _internal_has_window_icon();
}
inline void CMsgBrowserCreate::clear_window_icon() {
  window_icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgBrowserCreate::window_icon() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.window_icon)
  return _internal_window_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserCreate::set_window_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 window_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.window_icon)
}
inline std::string* CMsgBrowserCreate::mutable_window_icon() {
  std::string* _s = _internal_mutable_window_icon();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserCreate.window_icon)
  return _s;
}
inline const std::string& CMsgBrowserCreate::_internal_window_icon() const {
  return window_icon_.Get();
}
inline void CMsgBrowserCreate::_internal_set_window_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  window_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::_internal_mutable_window_icon() {
  _has_bits_[0] |= 0x00000004u;
  return window_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::release_window_icon() {
  // @@protoc_insertion_point(field_release:CMsgBrowserCreate.window_icon)
  if (!_internal_has_window_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = window_icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserCreate::set_allocated_window_icon(std::string* window_icon) {
  if (window_icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  window_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserCreate.window_icon)
}

// optional bool borderless = 12 [default = false];
inline bool CMsgBrowserCreate::_internal_has_borderless() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_borderless() const {
  return _internal_has_borderless();
}
inline void CMsgBrowserCreate::clear_borderless() {
  borderless_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgBrowserCreate::_internal_borderless() const {
  return borderless_;
}
inline bool CMsgBrowserCreate::borderless() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.borderless)
  return _internal_borderless();
}
inline void CMsgBrowserCreate::_internal_set_borderless(bool value) {
  _has_bits_[0] |= 0x00000400u;
  borderless_ = value;
}
inline void CMsgBrowserCreate::set_borderless(bool value) {
  _internal_set_borderless(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.borderless)
}

// optional string vroverlay_key = 13;
inline bool CMsgBrowserCreate::_internal_has_vroverlay_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_vroverlay_key() const {
  return _internal_has_vroverlay_key();
}
inline void CMsgBrowserCreate::clear_vroverlay_key() {
  vroverlay_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgBrowserCreate::vroverlay_key() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.vroverlay_key)
  return _internal_vroverlay_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserCreate::set_vroverlay_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 vroverlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.vroverlay_key)
}
inline std::string* CMsgBrowserCreate::mutable_vroverlay_key() {
  std::string* _s = _internal_mutable_vroverlay_key();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserCreate.vroverlay_key)
  return _s;
}
inline const std::string& CMsgBrowserCreate::_internal_vroverlay_key() const {
  return vroverlay_key_.Get();
}
inline void CMsgBrowserCreate::_internal_set_vroverlay_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  vroverlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::_internal_mutable_vroverlay_key() {
  _has_bits_[0] |= 0x00000008u;
  return vroverlay_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::release_vroverlay_key() {
  // @@protoc_insertion_point(field_release:CMsgBrowserCreate.vroverlay_key)
  if (!_internal_has_vroverlay_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = vroverlay_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vroverlay_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vroverlay_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserCreate::set_allocated_vroverlay_key(std::string* vroverlay_key) {
  if (vroverlay_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vroverlay_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vroverlay_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vroverlay_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vroverlay_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserCreate.vroverlay_key)
}

// optional uint32 browser_type = 14 [default = 0];
inline bool CMsgBrowserCreate::_internal_has_browser_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_browser_type() const {
  return _internal_has_browser_type();
}
inline void CMsgBrowserCreate::clear_browser_type() {
  browser_type_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgBrowserCreate::_internal_browser_type() const {
  return browser_type_;
}
inline uint32_t CMsgBrowserCreate::browser_type() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.browser_type)
  return _internal_browser_type();
}
inline void CMsgBrowserCreate::_internal_set_browser_type(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  browser_type_ = value;
}
inline void CMsgBrowserCreate::set_browser_type(uint32_t value) {
  _internal_set_browser_type(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.browser_type)
}

// optional int32 initial_top = 15 [default = -2147483648];
inline bool CMsgBrowserCreate::_internal_has_initial_top() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_initial_top() const {
  return _internal_has_initial_top();
}
inline void CMsgBrowserCreate::clear_initial_top() {
  initial_top_ = -2147483647 - 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t CMsgBrowserCreate::_internal_initial_top() const {
  return initial_top_;
}
inline int32_t CMsgBrowserCreate::initial_top() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.initial_top)
  return _internal_initial_top();
}
inline void CMsgBrowserCreate::_internal_set_initial_top(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  initial_top_ = value;
}
inline void CMsgBrowserCreate::set_initial_top(int32_t value) {
  _internal_set_initial_top(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.initial_top)
}

// optional int32 initial_left = 16 [default = -2147483648];
inline bool CMsgBrowserCreate::_internal_has_initial_left() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_initial_left() const {
  return _internal_has_initial_left();
}
inline void CMsgBrowserCreate::clear_initial_left() {
  initial_left_ = -2147483647 - 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgBrowserCreate::_internal_initial_left() const {
  return initial_left_;
}
inline int32_t CMsgBrowserCreate::initial_left() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.initial_left)
  return _internal_initial_left();
}
inline void CMsgBrowserCreate::_internal_set_initial_left(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  initial_left_ = value;
}
inline void CMsgBrowserCreate::set_initial_left(int32_t value) {
  _internal_set_initial_left(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.initial_left)
}

// optional bool only_allow_trusted_popups = 17 [default = false];
inline bool CMsgBrowserCreate::_internal_has_only_allow_trusted_popups() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_only_allow_trusted_popups() const {
  return _internal_has_only_allow_trusted_popups();
}
inline void CMsgBrowserCreate::clear_only_allow_trusted_popups() {
  only_allow_trusted_popups_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgBrowserCreate::_internal_only_allow_trusted_popups() const {
  return only_allow_trusted_popups_;
}
inline bool CMsgBrowserCreate::only_allow_trusted_popups() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.only_allow_trusted_popups)
  return _internal_only_allow_trusted_popups();
}
inline void CMsgBrowserCreate::_internal_set_only_allow_trusted_popups(bool value) {
  _has_bits_[0] |= 0x00000800u;
  only_allow_trusted_popups_ = value;
}
inline void CMsgBrowserCreate::set_only_allow_trusted_popups(bool value) {
  _internal_set_only_allow_trusted_popups(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.only_allow_trusted_popups)
}

// optional string initial_url = 18;
inline bool CMsgBrowserCreate::_internal_has_initial_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_initial_url() const {
  return _internal_has_initial_url();
}
inline void CMsgBrowserCreate::clear_initial_url() {
  initial_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgBrowserCreate::initial_url() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.initial_url)
  return _internal_initial_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserCreate::set_initial_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 initial_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.initial_url)
}
inline std::string* CMsgBrowserCreate::mutable_initial_url() {
  std::string* _s = _internal_mutable_initial_url();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserCreate.initial_url)
  return _s;
}
inline const std::string& CMsgBrowserCreate::_internal_initial_url() const {
  return initial_url_.Get();
}
inline void CMsgBrowserCreate::_internal_set_initial_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  initial_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::_internal_mutable_initial_url() {
  _has_bits_[0] |= 0x00000010u;
  return initial_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserCreate::release_initial_url() {
  // @@protoc_insertion_point(field_release:CMsgBrowserCreate.initial_url)
  if (!_internal_has_initial_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = initial_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initial_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserCreate::set_allocated_initial_url(std::string* initial_url) {
  if (initial_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  initial_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initial_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initial_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initial_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserCreate.initial_url)
}

// optional fixed64 hwnd_parent = 19;
inline bool CMsgBrowserCreate::_internal_has_hwnd_parent() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_hwnd_parent() const {
  return _internal_has_hwnd_parent();
}
inline void CMsgBrowserCreate::clear_hwnd_parent() {
  hwnd_parent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CMsgBrowserCreate::_internal_hwnd_parent() const {
  return hwnd_parent_;
}
inline uint64_t CMsgBrowserCreate::hwnd_parent() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.hwnd_parent)
  return _internal_hwnd_parent();
}
inline void CMsgBrowserCreate::_internal_set_hwnd_parent(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  hwnd_parent_ = value;
}
inline void CMsgBrowserCreate::set_hwnd_parent(uint64_t value) {
  _internal_set_hwnd_parent(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.hwnd_parent)
}

// optional uint32 creation_flags = 20 [default = 0];
inline bool CMsgBrowserCreate::_internal_has_creation_flags() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgBrowserCreate::has_creation_flags() const {
  return _internal_has_creation_flags();
}
inline void CMsgBrowserCreate::clear_creation_flags() {
  creation_flags_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgBrowserCreate::_internal_creation_flags() const {
  return creation_flags_;
}
inline uint32_t CMsgBrowserCreate::creation_flags() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreate.creation_flags)
  return _internal_creation_flags();
}
inline void CMsgBrowserCreate::_internal_set_creation_flags(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  creation_flags_ = value;
}
inline void CMsgBrowserCreate::set_creation_flags(uint32_t value) {
  _internal_set_creation_flags(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreate.creation_flags)
}

// -------------------------------------------------------------------

// CMsgBrowserCreateResponse

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserCreateResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserCreateResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserCreateResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBrowserCreateResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserCreateResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreateResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserCreateResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgBrowserCreateResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreateResponse.browser_handle)
}

// optional uint32 request_id = 2;
inline bool CMsgBrowserCreateResponse::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserCreateResponse::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgBrowserCreateResponse::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBrowserCreateResponse::_internal_request_id() const {
  return request_id_;
}
inline uint32_t CMsgBrowserCreateResponse::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserCreateResponse.request_id)
  return _internal_request_id();
}
inline void CMsgBrowserCreateResponse::_internal_set_request_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
}
inline void CMsgBrowserCreateResponse::set_request_id(uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserCreateResponse.request_id)
}

// -------------------------------------------------------------------

// CMsgBrowserRemove

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserRemove::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserRemove::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserRemove::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBrowserRemove::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserRemove::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserRemove.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserRemove::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgBrowserRemove::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserRemove.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetLocalFileRequestMapping_AdditionalRoute

// optional string relative_url = 1;
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_has_relative_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_relative_url() const {
  return _internal_has_relative_url();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_relative_url() {
  relative_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::relative_url() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  return _internal_relative_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_relative_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 relative_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_relative_url() {
  std::string* _s = _internal_mutable_relative_url();
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  return _s;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_relative_url() const {
  return relative_url_.Get();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_set_relative_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relative_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_mutable_relative_url() {
  _has_bits_[0] |= 0x00000001u;
  return relative_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_relative_url() {
  // @@protoc_insertion_point(field_release:CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
  if (!_internal_has_relative_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = relative_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    relative_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_relative_url(std::string* relative_url) {
  if (relative_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relative_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    relative_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url)
}

// optional string local_path = 2;
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_has_local_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_local_path() const {
  return _internal_has_local_path();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_local_path() {
  local_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::local_path() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  return _internal_local_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_local_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_local_path() {
  std::string* _s = _internal_mutable_local_path();
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  return _s;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_local_path() const {
  return local_path_.Get();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_set_local_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_mutable_local_path() {
  _has_bits_[0] |= 0x00000002u;
  return local_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_local_path() {
  // @@protoc_insertion_point(field_release:CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
  if (!_internal_has_local_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = local_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path)
}

// optional string allowed_extensions = 3;
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_has_allowed_extensions() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_allowed_extensions() const {
  return _internal_has_allowed_extensions();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_allowed_extensions() {
  allowed_extensions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::allowed_extensions() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  return _internal_allowed_extensions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allowed_extensions(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 allowed_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::mutable_allowed_extensions() {
  std::string* _s = _internal_mutable_allowed_extensions();
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  return _s;
}
inline const std::string& CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_allowed_extensions() const {
  return allowed_extensions_.Get();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_set_allowed_extensions(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  allowed_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_mutable_allowed_extensions() {
  _has_bits_[0] |= 0x00000004u;
  return allowed_extensions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping_AdditionalRoute::release_allowed_extensions() {
  // @@protoc_insertion_point(field_release:CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
  if (!_internal_has_allowed_extensions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = allowed_extensions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (allowed_extensions_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    allowed_extensions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_allocated_allowed_extensions(std::string* allowed_extensions) {
  if (allowed_extensions != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  allowed_extensions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allowed_extensions,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (allowed_extensions_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    allowed_extensions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions)
}

// optional bool url_rewrite = 4;
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_has_url_rewrite() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::has_url_rewrite() const {
  return _internal_has_url_rewrite();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::clear_url_rewrite() {
  url_rewrite_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_url_rewrite() const {
  return url_rewrite_;
}
inline bool CMsgSetLocalFileRequestMapping_AdditionalRoute::url_rewrite() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.AdditionalRoute.url_rewrite)
  return _internal_url_rewrite();
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::_internal_set_url_rewrite(bool value) {
  _has_bits_[0] |= 0x00000008u;
  url_rewrite_ = value;
}
inline void CMsgSetLocalFileRequestMapping_AdditionalRoute::set_url_rewrite(bool value) {
  _internal_set_url_rewrite(value);
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.AdditionalRoute.url_rewrite)
}

// -------------------------------------------------------------------

// CMsgSetLocalFileRequestMapping

// optional uint32 browser_handle = 1;
inline bool CMsgSetLocalFileRequestMapping::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetLocalFileRequestMapping::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSetLocalFileRequestMapping::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetLocalFileRequestMapping::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetLocalFileRequestMapping::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgSetLocalFileRequestMapping::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.browser_handle)
}

// optional string request_url = 2;
inline bool CMsgSetLocalFileRequestMapping::_internal_has_request_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping::has_request_url() const {
  return _internal_has_request_url();
}
inline void CMsgSetLocalFileRequestMapping::clear_request_url() {
  request_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetLocalFileRequestMapping::request_url() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.request_url)
  return _internal_request_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetLocalFileRequestMapping::set_request_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 request_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.request_url)
}
inline std::string* CMsgSetLocalFileRequestMapping::mutable_request_url() {
  std::string* _s = _internal_mutable_request_url();
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.request_url)
  return _s;
}
inline const std::string& CMsgSetLocalFileRequestMapping::_internal_request_url() const {
  return request_url_.Get();
}
inline void CMsgSetLocalFileRequestMapping::_internal_set_request_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping::_internal_mutable_request_url() {
  _has_bits_[0] |= 0x00000001u;
  return request_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping::release_request_url() {
  // @@protoc_insertion_point(field_release:CMsgSetLocalFileRequestMapping.request_url)
  if (!_internal_has_request_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = request_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetLocalFileRequestMapping::set_allocated_request_url(std::string* request_url) {
  if (request_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetLocalFileRequestMapping.request_url)
}

// optional string default_local_path = 3;
inline bool CMsgSetLocalFileRequestMapping::_internal_has_default_local_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetLocalFileRequestMapping::has_default_local_path() const {
  return _internal_has_default_local_path();
}
inline void CMsgSetLocalFileRequestMapping::clear_default_local_path() {
  default_local_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSetLocalFileRequestMapping::default_local_path() const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.default_local_path)
  return _internal_default_local_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetLocalFileRequestMapping::set_default_local_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 default_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetLocalFileRequestMapping.default_local_path)
}
inline std::string* CMsgSetLocalFileRequestMapping::mutable_default_local_path() {
  std::string* _s = _internal_mutable_default_local_path();
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.default_local_path)
  return _s;
}
inline const std::string& CMsgSetLocalFileRequestMapping::_internal_default_local_path() const {
  return default_local_path_.Get();
}
inline void CMsgSetLocalFileRequestMapping::_internal_set_default_local_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  default_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping::_internal_mutable_default_local_path() {
  _has_bits_[0] |= 0x00000002u;
  return default_local_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetLocalFileRequestMapping::release_default_local_path() {
  // @@protoc_insertion_point(field_release:CMsgSetLocalFileRequestMapping.default_local_path)
  if (!_internal_has_default_local_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = default_local_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_local_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    default_local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetLocalFileRequestMapping::set_allocated_default_local_path(std::string* default_local_path) {
  if (default_local_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  default_local_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_local_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_local_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    default_local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetLocalFileRequestMapping.default_local_path)
}

// repeated .CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
inline int CMsgSetLocalFileRequestMapping::_internal_routes_size() const {
  return routes_.size();
}
inline int CMsgSetLocalFileRequestMapping::routes_size() const {
  return _internal_routes_size();
}
inline void CMsgSetLocalFileRequestMapping::clear_routes() {
  routes_.Clear();
}
inline ::CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSetLocalFileRequestMapping.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >*
CMsgSetLocalFileRequestMapping::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSetLocalFileRequestMapping.routes)
  return &routes_;
}
inline const ::CMsgSetLocalFileRequestMapping_AdditionalRoute& CMsgSetLocalFileRequestMapping::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::CMsgSetLocalFileRequestMapping_AdditionalRoute& CMsgSetLocalFileRequestMapping::routes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSetLocalFileRequestMapping.routes)
  return _internal_routes(index);
}
inline ::CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping::_internal_add_routes() {
  return routes_.Add();
}
inline ::CMsgSetLocalFileRequestMapping_AdditionalRoute* CMsgSetLocalFileRequestMapping::add_routes() {
  ::CMsgSetLocalFileRequestMapping_AdditionalRoute* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:CMsgSetLocalFileRequestMapping.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSetLocalFileRequestMapping_AdditionalRoute >&
CMsgSetLocalFileRequestMapping::routes() const {
  // @@protoc_insertion_point(field_list:CMsgSetLocalFileRequestMapping.routes)
  return routes_;
}

// -------------------------------------------------------------------

// CMsgBrowserErrorStrings

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserErrorStrings::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserErrorStrings::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBrowserErrorStrings::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserErrorStrings::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserErrorStrings::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  browser_handle_ = value;
}
inline void CMsgBrowserErrorStrings::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.browser_handle)
}

// optional string title = 2;
inline bool CMsgBrowserErrorStrings::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_title() const {
  return _internal_has_title();
}
inline void CMsgBrowserErrorStrings::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserErrorStrings::title() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.title)
}
inline std::string* CMsgBrowserErrorStrings::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.title)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_title() const {
  return title_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_title() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.title)
}

// optional string header = 3;
inline bool CMsgBrowserErrorStrings::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_header() const {
  return _internal_has_header();
}
inline void CMsgBrowserErrorStrings::clear_header() {
  header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBrowserErrorStrings::header() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.header)
}
inline std::string* CMsgBrowserErrorStrings::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.header)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_header() const {
  return header_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_header() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.header)
  if (!_internal_has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = header_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.header)
}

// optional string cache_miss = 4;
inline bool CMsgBrowserErrorStrings::_internal_has_cache_miss() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_cache_miss() const {
  return _internal_has_cache_miss();
}
inline void CMsgBrowserErrorStrings::clear_cache_miss() {
  cache_miss_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgBrowserErrorStrings::cache_miss() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.cache_miss)
  return _internal_cache_miss();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_cache_miss(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cache_miss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.cache_miss)
}
inline std::string* CMsgBrowserErrorStrings::mutable_cache_miss() {
  std::string* _s = _internal_mutable_cache_miss();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.cache_miss)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_cache_miss() const {
  return cache_miss_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_cache_miss(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cache_miss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_cache_miss() {
  _has_bits_[0] |= 0x00000004u;
  return cache_miss_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_cache_miss() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.cache_miss)
  if (!_internal_has_cache_miss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = cache_miss_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_miss_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_miss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_cache_miss(std::string* cache_miss) {
  if (cache_miss != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cache_miss_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_miss,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_miss_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_miss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.cache_miss)
}

// optional string bad_url = 5;
inline bool CMsgBrowserErrorStrings::_internal_has_bad_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_bad_url() const {
  return _internal_has_bad_url();
}
inline void CMsgBrowserErrorStrings::clear_bad_url() {
  bad_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgBrowserErrorStrings::bad_url() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.bad_url)
  return _internal_bad_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_bad_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 bad_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.bad_url)
}
inline std::string* CMsgBrowserErrorStrings::mutable_bad_url() {
  std::string* _s = _internal_mutable_bad_url();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.bad_url)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_bad_url() const {
  return bad_url_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_bad_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  bad_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_bad_url() {
  _has_bits_[0] |= 0x00000008u;
  return bad_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_bad_url() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.bad_url)
  if (!_internal_has_bad_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = bad_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bad_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bad_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_bad_url(std::string* bad_url) {
  if (bad_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bad_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bad_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bad_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bad_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.bad_url)
}

// optional string connection_problem = 6;
inline bool CMsgBrowserErrorStrings::_internal_has_connection_problem() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_connection_problem() const {
  return _internal_has_connection_problem();
}
inline void CMsgBrowserErrorStrings::clear_connection_problem() {
  connection_problem_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgBrowserErrorStrings::connection_problem() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.connection_problem)
  return _internal_connection_problem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_connection_problem(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 connection_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.connection_problem)
}
inline std::string* CMsgBrowserErrorStrings::mutable_connection_problem() {
  std::string* _s = _internal_mutable_connection_problem();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.connection_problem)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_connection_problem() const {
  return connection_problem_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_connection_problem(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  connection_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_connection_problem() {
  _has_bits_[0] |= 0x00000010u;
  return connection_problem_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_connection_problem() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.connection_problem)
  if (!_internal_has_connection_problem()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = connection_problem_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_problem_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_connection_problem(std::string* connection_problem) {
  if (connection_problem != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  connection_problem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_problem,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_problem_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.connection_problem)
}

// optional string proxy_problem = 7;
inline bool CMsgBrowserErrorStrings::_internal_has_proxy_problem() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_proxy_problem() const {
  return _internal_has_proxy_problem();
}
inline void CMsgBrowserErrorStrings::clear_proxy_problem() {
  proxy_problem_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgBrowserErrorStrings::proxy_problem() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.proxy_problem)
  return _internal_proxy_problem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_proxy_problem(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 proxy_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.proxy_problem)
}
inline std::string* CMsgBrowserErrorStrings::mutable_proxy_problem() {
  std::string* _s = _internal_mutable_proxy_problem();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.proxy_problem)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_proxy_problem() const {
  return proxy_problem_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_proxy_problem(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  proxy_problem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_proxy_problem() {
  _has_bits_[0] |= 0x00000020u;
  return proxy_problem_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_proxy_problem() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.proxy_problem)
  if (!_internal_has_proxy_problem()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = proxy_problem_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxy_problem_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxy_problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_proxy_problem(std::string* proxy_problem) {
  if (proxy_problem != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  proxy_problem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_problem,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxy_problem_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxy_problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.proxy_problem)
}

// optional string unknown = 8;
inline bool CMsgBrowserErrorStrings::_internal_has_unknown() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBrowserErrorStrings::has_unknown() const {
  return _internal_has_unknown();
}
inline void CMsgBrowserErrorStrings::clear_unknown() {
  unknown_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgBrowserErrorStrings::unknown() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserErrorStrings.unknown)
  return _internal_unknown();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserErrorStrings::set_unknown(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 unknown_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserErrorStrings.unknown)
}
inline std::string* CMsgBrowserErrorStrings::mutable_unknown() {
  std::string* _s = _internal_mutable_unknown();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserErrorStrings.unknown)
  return _s;
}
inline const std::string& CMsgBrowserErrorStrings::_internal_unknown() const {
  return unknown_.Get();
}
inline void CMsgBrowserErrorStrings::_internal_set_unknown(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  unknown_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::_internal_mutable_unknown() {
  _has_bits_[0] |= 0x00000040u;
  return unknown_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserErrorStrings::release_unknown() {
  // @@protoc_insertion_point(field_release:CMsgBrowserErrorStrings.unknown)
  if (!_internal_has_unknown()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = unknown_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unknown_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unknown_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserErrorStrings::set_allocated_unknown(std::string* unknown) {
  if (unknown != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  unknown_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unknown,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unknown_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unknown_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserErrorStrings.unknown)
}

// -------------------------------------------------------------------

// CMsgBrowserSetName

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserSetName::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserSetName::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserSetName::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBrowserSetName::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserSetName::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSetName.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserSetName::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgBrowserSetName::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSetName.browser_handle)
}

// optional string name = 2;
inline bool CMsgBrowserSetName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserSetName::has_name() const {
  return _internal_has_name();
}
inline void CMsgBrowserSetName::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserSetName::name() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSetName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserSetName::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserSetName.name)
}
inline std::string* CMsgBrowserSetName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserSetName.name)
  return _s;
}
inline const std::string& CMsgBrowserSetName::_internal_name() const {
  return name_.Get();
}
inline void CMsgBrowserSetName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserSetName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserSetName::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBrowserSetName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserSetName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserSetName.name)
}

// -------------------------------------------------------------------

// CMsgBrowserSize

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserSize::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserSize::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBrowserSize::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSize.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserSize::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgBrowserSize::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSize.browser_handle)
}

// optional double width = 2;
inline bool CMsgBrowserSize::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserSize::has_width() const {
  return _internal_has_width();
}
inline void CMsgBrowserSize::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgBrowserSize::_internal_width() const {
  return width_;
}
inline double CMsgBrowserSize::width() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSize.width)
  return _internal_width();
}
inline void CMsgBrowserSize::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void CMsgBrowserSize::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSize.width)
}

// optional double height = 3;
inline bool CMsgBrowserSize::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserSize::has_height() const {
  return _internal_has_height();
}
inline void CMsgBrowserSize::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgBrowserSize::_internal_height() const {
  return height_;
}
inline double CMsgBrowserSize::height() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSize.height)
  return _internal_height();
}
inline void CMsgBrowserSize::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void CMsgBrowserSize::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSize.height)
}

// -------------------------------------------------------------------

// CMsgBrowserSetMinSize

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserSetMinSize::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserSetMinSize::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserSetMinSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBrowserSetMinSize::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserSetMinSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSetMinSize.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserSetMinSize::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgBrowserSetMinSize::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSetMinSize.browser_handle)
}

// optional double width = 2;
inline bool CMsgBrowserSetMinSize::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserSetMinSize::has_width() const {
  return _internal_has_width();
}
inline void CMsgBrowserSetMinSize::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgBrowserSetMinSize::_internal_width() const {
  return width_;
}
inline double CMsgBrowserSetMinSize::width() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSetMinSize.width)
  return _internal_width();
}
inline void CMsgBrowserSetMinSize::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void CMsgBrowserSetMinSize::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSetMinSize.width)
}

// optional double height = 3;
inline bool CMsgBrowserSetMinSize::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserSetMinSize::has_height() const {
  return _internal_has_height();
}
inline void CMsgBrowserSetMinSize::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgBrowserSetMinSize::_internal_height() const {
  return height_;
}
inline double CMsgBrowserSetMinSize::height() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserSetMinSize.height)
  return _internal_height();
}
inline void CMsgBrowserSetMinSize::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void CMsgBrowserSetMinSize::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserSetMinSize.height)
}

// -------------------------------------------------------------------

// CMsgBrowserPosition

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserPosition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBrowserPosition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBrowserPosition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserPosition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserPosition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  browser_handle_ = value;
}
inline void CMsgBrowserPosition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserPosition.browser_handle)
}

// optional double x = 2;
inline bool CMsgBrowserPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserPosition::has_x() const {
  return _internal_has_x();
}
inline void CMsgBrowserPosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgBrowserPosition::_internal_x() const {
  return x_;
}
inline double CMsgBrowserPosition::x() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserPosition.x)
  return _internal_x();
}
inline void CMsgBrowserPosition::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgBrowserPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserPosition.x)
}

// optional double y = 3;
inline bool CMsgBrowserPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserPosition::has_y() const {
  return _internal_has_y();
}
inline void CMsgBrowserPosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgBrowserPosition::_internal_y() const {
  return y_;
}
inline double CMsgBrowserPosition::y() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserPosition.y)
  return _internal_y();
}
inline void CMsgBrowserPosition::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgBrowserPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserPosition.y)
}

// optional double x_local = 4;
inline bool CMsgBrowserPosition::_internal_has_x_local() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserPosition::has_x_local() const {
  return _internal_has_x_local();
}
inline void CMsgBrowserPosition::clear_x_local() {
  x_local_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CMsgBrowserPosition::_internal_x_local() const {
  return x_local_;
}
inline double CMsgBrowserPosition::x_local() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserPosition.x_local)
  return _internal_x_local();
}
inline void CMsgBrowserPosition::_internal_set_x_local(double value) {
  _has_bits_[0] |= 0x00000004u;
  x_local_ = value;
}
inline void CMsgBrowserPosition::set_x_local(double value) {
  _internal_set_x_local(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserPosition.x_local)
}

// optional double y_local = 5;
inline bool CMsgBrowserPosition::_internal_has_y_local() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBrowserPosition::has_y_local() const {
  return _internal_has_y_local();
}
inline void CMsgBrowserPosition::clear_y_local() {
  y_local_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CMsgBrowserPosition::_internal_y_local() const {
  return y_local_;
}
inline double CMsgBrowserPosition::y_local() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserPosition.y_local)
  return _internal_y_local();
}
inline void CMsgBrowserPosition::_internal_set_y_local(double value) {
  _has_bits_[0] |= 0x00000008u;
  y_local_ = value;
}
inline void CMsgBrowserPosition::set_y_local(double value) {
  _internal_set_y_local(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserPosition.y_local)
}

// -------------------------------------------------------------------

// CMsgBrowserResized

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserResized::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserResized::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBrowserResized::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserResized::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserResized::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  browser_handle_ = value;
}
inline void CMsgBrowserResized::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.browser_handle)
}

// optional double x = 2;
inline bool CMsgBrowserResized::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_x() const {
  return _internal_has_x();
}
inline void CMsgBrowserResized::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgBrowserResized::_internal_x() const {
  return x_;
}
inline double CMsgBrowserResized::x() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.x)
  return _internal_x();
}
inline void CMsgBrowserResized::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgBrowserResized::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.x)
}

// optional double y = 3;
inline bool CMsgBrowserResized::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_y() const {
  return _internal_has_y();
}
inline void CMsgBrowserResized::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CMsgBrowserResized::_internal_y() const {
  return y_;
}
inline double CMsgBrowserResized::y() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.y)
  return _internal_y();
}
inline void CMsgBrowserResized::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgBrowserResized::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.y)
}

// optional double width = 4;
inline bool CMsgBrowserResized::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_width() const {
  return _internal_has_width();
}
inline void CMsgBrowserResized::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CMsgBrowserResized::_internal_width() const {
  return width_;
}
inline double CMsgBrowserResized::width() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.width)
  return _internal_width();
}
inline void CMsgBrowserResized::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void CMsgBrowserResized::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.width)
}

// optional double height = 5;
inline bool CMsgBrowserResized::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_height() const {
  return _internal_has_height();
}
inline void CMsgBrowserResized::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CMsgBrowserResized::_internal_height() const {
  return height_;
}
inline double CMsgBrowserResized::height() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.height)
  return _internal_height();
}
inline void CMsgBrowserResized::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void CMsgBrowserResized::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.height)
}

// optional double dpi_horizontal = 6;
inline bool CMsgBrowserResized::_internal_has_dpi_horizontal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_dpi_horizontal() const {
  return _internal_has_dpi_horizontal();
}
inline void CMsgBrowserResized::clear_dpi_horizontal() {
  dpi_horizontal_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CMsgBrowserResized::_internal_dpi_horizontal() const {
  return dpi_horizontal_;
}
inline double CMsgBrowserResized::dpi_horizontal() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.dpi_horizontal)
  return _internal_dpi_horizontal();
}
inline void CMsgBrowserResized::_internal_set_dpi_horizontal(double value) {
  _has_bits_[0] |= 0x00000020u;
  dpi_horizontal_ = value;
}
inline void CMsgBrowserResized::set_dpi_horizontal(double value) {
  _internal_set_dpi_horizontal(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.dpi_horizontal)
}

// optional double dpi_vertical = 7;
inline bool CMsgBrowserResized::_internal_has_dpi_vertical() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_dpi_vertical() const {
  return _internal_has_dpi_vertical();
}
inline void CMsgBrowserResized::clear_dpi_vertical() {
  dpi_vertical_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CMsgBrowserResized::_internal_dpi_vertical() const {
  return dpi_vertical_;
}
inline double CMsgBrowserResized::dpi_vertical() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.dpi_vertical)
  return _internal_dpi_vertical();
}
inline void CMsgBrowserResized::_internal_set_dpi_vertical(double value) {
  _has_bits_[0] |= 0x00000040u;
  dpi_vertical_ = value;
}
inline void CMsgBrowserResized::set_dpi_vertical(double value) {
  _internal_set_dpi_vertical(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.dpi_vertical)
}

// optional string display_name = 8;
inline bool CMsgBrowserResized::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserResized::has_display_name() const {
  return _internal_has_display_name();
}
inline void CMsgBrowserResized::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserResized::display_name() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserResized.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserResized::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserResized.display_name)
}
inline std::string* CMsgBrowserResized::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserResized.display_name)
  return _s;
}
inline const std::string& CMsgBrowserResized::_internal_display_name() const {
  return display_name_.Get();
}
inline void CMsgBrowserResized::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserResized::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserResized::release_display_name() {
  // @@protoc_insertion_point(field_release:CMsgBrowserResized.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserResized::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserResized.display_name)
}

// -------------------------------------------------------------------

// CMsgPostURL

// optional uint32 browser_handle = 1;
inline bool CMsgPostURL::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPostURL::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPostURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPostURL::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPostURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPostURL.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPostURL::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgPostURL::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPostURL.browser_handle)
}

// optional string url = 2;
inline bool CMsgPostURL::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPostURL::has_url() const {
  return _internal_has_url();
}
inline void CMsgPostURL::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPostURL::url() const {
  // @@protoc_insertion_point(field_get:CMsgPostURL.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPostURL::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPostURL.url)
}
inline std::string* CMsgPostURL::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgPostURL.url)
  return _s;
}
inline const std::string& CMsgPostURL::_internal_url() const {
  return url_.Get();
}
inline void CMsgPostURL::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPostURL::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPostURL::release_url() {
  // @@protoc_insertion_point(field_release:CMsgPostURL.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPostURL::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPostURL.url)
}

// optional string post = 3;
inline bool CMsgPostURL::_internal_has_post() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPostURL::has_post() const {
  return _internal_has_post();
}
inline void CMsgPostURL::clear_post() {
  post_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPostURL::post() const {
  // @@protoc_insertion_point(field_get:CMsgPostURL.post)
  return _internal_post();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPostURL::set_post(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 post_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPostURL.post)
}
inline std::string* CMsgPostURL::mutable_post() {
  std::string* _s = _internal_mutable_post();
  // @@protoc_insertion_point(field_mutable:CMsgPostURL.post)
  return _s;
}
inline const std::string& CMsgPostURL::_internal_post() const {
  return post_.Get();
}
inline void CMsgPostURL::_internal_set_post(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  post_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPostURL::_internal_mutable_post() {
  _has_bits_[0] |= 0x00000002u;
  return post_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPostURL::release_post() {
  // @@protoc_insertion_point(field_release:CMsgPostURL.post)
  if (!_internal_has_post()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = post_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (post_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    post_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPostURL::set_allocated_post(std::string* post) {
  if (post != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  post_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (post_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    post_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPostURL.post)
}

// optional uint32 pageserial = 4;
inline bool CMsgPostURL::_internal_has_pageserial() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPostURL::has_pageserial() const {
  return _internal_has_pageserial();
}
inline void CMsgPostURL::clear_pageserial() {
  pageserial_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgPostURL::_internal_pageserial() const {
  return pageserial_;
}
inline uint32_t CMsgPostURL::pageserial() const {
  // @@protoc_insertion_point(field_get:CMsgPostURL.pageserial)
  return _internal_pageserial();
}
inline void CMsgPostURL::_internal_set_pageserial(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  pageserial_ = value;
}
inline void CMsgPostURL::set_pageserial(uint32_t value) {
  _internal_set_pageserial(value);
  // @@protoc_insertion_point(field_set:CMsgPostURL.pageserial)
}

// optional bool replace_entry = 5;
inline bool CMsgPostURL::_internal_has_replace_entry() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPostURL::has_replace_entry() const {
  return _internal_has_replace_entry();
}
inline void CMsgPostURL::clear_replace_entry() {
  replace_entry_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgPostURL::_internal_replace_entry() const {
  return replace_entry_;
}
inline bool CMsgPostURL::replace_entry() const {
  // @@protoc_insertion_point(field_get:CMsgPostURL.replace_entry)
  return _internal_replace_entry();
}
inline void CMsgPostURL::_internal_set_replace_entry(bool value) {
  _has_bits_[0] |= 0x00000010u;
  replace_entry_ = value;
}
inline void CMsgPostURL::set_replace_entry(bool value) {
  _internal_set_replace_entry(value);
  // @@protoc_insertion_point(field_set:CMsgPostURL.replace_entry)
}

// -------------------------------------------------------------------

// CMsgAddHeader

// optional uint32 browser_handle = 1;
inline bool CMsgAddHeader::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAddHeader::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgAddHeader::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAddHeader::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgAddHeader::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgAddHeader.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgAddHeader::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgAddHeader::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgAddHeader.browser_handle)
}

// optional string key = 2;
inline bool CMsgAddHeader::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAddHeader::has_key() const {
  return _internal_has_key();
}
inline void CMsgAddHeader::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAddHeader::key() const {
  // @@protoc_insertion_point(field_get:CMsgAddHeader.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAddHeader::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAddHeader.key)
}
inline std::string* CMsgAddHeader::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgAddHeader.key)
  return _s;
}
inline const std::string& CMsgAddHeader::_internal_key() const {
  return key_.Get();
}
inline void CMsgAddHeader::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgAddHeader::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgAddHeader::release_key() {
  // @@protoc_insertion_point(field_release:CMsgAddHeader.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAddHeader::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAddHeader.key)
}

// optional string value = 3;
inline bool CMsgAddHeader::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAddHeader::has_value() const {
  return _internal_has_value();
}
inline void CMsgAddHeader::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgAddHeader::value() const {
  // @@protoc_insertion_point(field_get:CMsgAddHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgAddHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgAddHeader.value)
}
inline std::string* CMsgAddHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgAddHeader.value)
  return _s;
}
inline const std::string& CMsgAddHeader::_internal_value() const {
  return value_.Get();
}
inline void CMsgAddHeader::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgAddHeader::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgAddHeader::release_value() {
  // @@protoc_insertion_point(field_release:CMsgAddHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgAddHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgAddHeader.value)
}

// -------------------------------------------------------------------

// CMsgStopLoad

// optional uint32 browser_handle = 1;
inline bool CMsgStopLoad::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStopLoad::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStopLoad::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStopLoad::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStopLoad::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStopLoad.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStopLoad::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgStopLoad::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStopLoad.browser_handle)
}

// -------------------------------------------------------------------

// CMsgReload

// optional uint32 browser_handle = 1;
inline bool CMsgReload::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReload::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgReload::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgReload::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgReload::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgReload.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgReload::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgReload::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgReload.browser_handle)
}

// -------------------------------------------------------------------

// CMsgGoForward

// optional uint32 browser_handle = 1;
inline bool CMsgGoForward::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGoForward::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGoForward::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGoForward::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGoForward::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGoForward.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGoForward::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGoForward::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGoForward.browser_handle)
}

// -------------------------------------------------------------------

// CMsgGoBack

// optional uint32 browser_handle = 1;
inline bool CMsgGoBack::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGoBack::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGoBack::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGoBack::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGoBack::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGoBack.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGoBack::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGoBack::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGoBack.browser_handle)
}

// -------------------------------------------------------------------

// CMsgWasHidden

// optional uint32 browser_handle = 1;
inline bool CMsgWasHidden::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWasHidden::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgWasHidden::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgWasHidden::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgWasHidden::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgWasHidden.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgWasHidden::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgWasHidden::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgWasHidden.browser_handle)
}

// optional bool hidden = 2;
inline bool CMsgWasHidden::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWasHidden::has_hidden() const {
  return _internal_has_hidden();
}
inline void CMsgWasHidden::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgWasHidden::_internal_hidden() const {
  return hidden_;
}
inline bool CMsgWasHidden::hidden() const {
  // @@protoc_insertion_point(field_get:CMsgWasHidden.hidden)
  return _internal_hidden();
}
inline void CMsgWasHidden::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hidden_ = value;
}
inline void CMsgWasHidden::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CMsgWasHidden.hidden)
}

// -------------------------------------------------------------------

// CMsgSetWindowVisibility

// optional uint32 browser_handle = 1;
inline bool CMsgSetWindowVisibility::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetWindowVisibility::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetWindowVisibility::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetWindowVisibility::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetWindowVisibility::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowVisibility.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetWindowVisibility::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetWindowVisibility::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowVisibility.browser_handle)
}

// optional bool visible = 2;
inline bool CMsgSetWindowVisibility::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetWindowVisibility::has_visible() const {
  return _internal_has_visible();
}
inline void CMsgSetWindowVisibility::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSetWindowVisibility::_internal_visible() const {
  return visible_;
}
inline bool CMsgSetWindowVisibility::visible() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowVisibility.visible)
  return _internal_visible();
}
inline void CMsgSetWindowVisibility::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  visible_ = value;
}
inline void CMsgSetWindowVisibility::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowVisibility.visible)
}

// -------------------------------------------------------------------

// CMsgClearHistory

// optional uint32 browser_handle = 1;
inline bool CMsgClearHistory::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClearHistory::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgClearHistory::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClearHistory::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgClearHistory::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgClearHistory.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgClearHistory::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgClearHistory::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgClearHistory.browser_handle)
}

// -------------------------------------------------------------------

// CMsgClearAllBrowsingData

// optional uint32 browser_handle = 1;
inline bool CMsgClearAllBrowsingData::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClearAllBrowsingData::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgClearAllBrowsingData::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClearAllBrowsingData::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgClearAllBrowsingData::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgClearAllBrowsingData.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgClearAllBrowsingData::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgClearAllBrowsingData::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgClearAllBrowsingData.browser_handle)
}

// -------------------------------------------------------------------

// CMsgCopy

// optional uint32 browser_handle = 1;
inline bool CMsgCopy::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCopy::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgCopy::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCopy::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgCopy::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgCopy.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgCopy::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgCopy::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgCopy.browser_handle)
}

// -------------------------------------------------------------------

// CMsgPaste

// optional uint32 browser_handle = 1;
inline bool CMsgPaste::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPaste::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPaste::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPaste::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPaste::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPaste.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPaste::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgPaste::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPaste.browser_handle)
}

// -------------------------------------------------------------------

// CMsgExecuteJavaScript

// optional uint32 browser_handle = 1;
inline bool CMsgExecuteJavaScript::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgExecuteJavaScript::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgExecuteJavaScript::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgExecuteJavaScript::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgExecuteJavaScript::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgExecuteJavaScript.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgExecuteJavaScript::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgExecuteJavaScript::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgExecuteJavaScript.browser_handle)
}

// optional string script = 2;
inline bool CMsgExecuteJavaScript::_internal_has_script() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgExecuteJavaScript::has_script() const {
  return _internal_has_script();
}
inline void CMsgExecuteJavaScript::clear_script() {
  script_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgExecuteJavaScript::script() const {
  // @@protoc_insertion_point(field_get:CMsgExecuteJavaScript.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgExecuteJavaScript::set_script(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgExecuteJavaScript.script)
}
inline std::string* CMsgExecuteJavaScript::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:CMsgExecuteJavaScript.script)
  return _s;
}
inline const std::string& CMsgExecuteJavaScript::_internal_script() const {
  return script_.Get();
}
inline void CMsgExecuteJavaScript::_internal_set_script(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgExecuteJavaScript::_internal_mutable_script() {
  _has_bits_[0] |= 0x00000001u;
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgExecuteJavaScript::release_script() {
  // @@protoc_insertion_point(field_release:CMsgExecuteJavaScript.script)
  if (!_internal_has_script()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = script_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgExecuteJavaScript::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgExecuteJavaScript.script)
}

// -------------------------------------------------------------------

// CMsgSetFocus

// optional uint32 browser_handle = 1;
inline bool CMsgSetFocus::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetFocus::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetFocus::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetFocus::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetFocus.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetFocus::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetFocus::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetFocus.browser_handle)
}

// optional bool focus = 2;
inline bool CMsgSetFocus::_internal_has_focus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetFocus::has_focus() const {
  return _internal_has_focus();
}
inline void CMsgSetFocus::clear_focus() {
  focus_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSetFocus::_internal_focus() const {
  return focus_;
}
inline bool CMsgSetFocus::focus() const {
  // @@protoc_insertion_point(field_get:CMsgSetFocus.focus)
  return _internal_focus();
}
inline void CMsgSetFocus::_internal_set_focus(bool value) {
  _has_bits_[0] |= 0x00000002u;
  focus_ = value;
}
inline void CMsgSetFocus::set_focus(bool value) {
  _internal_set_focus(value);
  // @@protoc_insertion_point(field_set:CMsgSetFocus.focus)
}

// -------------------------------------------------------------------

// CMsgHorizontalScrollBarSize

// optional uint32 browser_handle = 1;
inline bool CMsgHorizontalScrollBarSize::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSize::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHorizontalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHorizontalScrollBarSize::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHorizontalScrollBarSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSize.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHorizontalScrollBarSize::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHorizontalScrollBarSize::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSize.browser_handle)
}

// -------------------------------------------------------------------

// CMsgHorizontalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.browser_handle)
}

// optional uint32 scroll_max = 6;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_scroll_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_scroll_max() const {
  return _internal_has_scroll_max();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::_internal_scroll_max() const {
  return scroll_max_;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::scroll_max() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.scroll_max)
  return _internal_scroll_max();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_scroll_max(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  scroll_max_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_scroll_max(uint32_t value) {
  _internal_set_scroll_max(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.scroll_max)
}

// optional uint32 scroll = 7;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_scroll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_scroll() const {
  return _internal_has_scroll();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::_internal_scroll() const {
  return scroll_;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::scroll() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.scroll)
  return _internal_scroll();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_scroll(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  scroll_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_scroll(uint32_t value) {
  _internal_set_scroll(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.scroll)
}

// optional float zoom = 8;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgHorizontalScrollBarSizeResponse::_internal_zoom() const {
  return zoom_;
}
inline float CMsgHorizontalScrollBarSizeResponse::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.zoom)
  return _internal_zoom();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_zoom(float value) {
  _has_bits_[0] |= 0x00000008u;
  zoom_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.zoom)
}

// optional bool visible = 9;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_visible() const {
  return _internal_has_visible();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_visible() const {
  return visible_;
}
inline bool CMsgHorizontalScrollBarSizeResponse::visible() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.visible)
  return _internal_visible();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000010u;
  visible_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.visible)
}

// optional uint32 page_size = 10;
inline bool CMsgHorizontalScrollBarSizeResponse::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgHorizontalScrollBarSizeResponse::has_page_size() const {
  return _internal_has_page_size();
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_page_size() {
  page_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::_internal_page_size() const {
  return page_size_;
}
inline uint32_t CMsgHorizontalScrollBarSizeResponse::page_size() const {
  // @@protoc_insertion_point(field_get:CMsgHorizontalScrollBarSizeResponse.page_size)
  return _internal_page_size();
}
inline void CMsgHorizontalScrollBarSizeResponse::_internal_set_page_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  page_size_ = value;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_page_size(uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:CMsgHorizontalScrollBarSizeResponse.page_size)
}

// -------------------------------------------------------------------

// CMsgVerticalScrollBarSize

// optional uint32 browser_handle = 1;
inline bool CMsgVerticalScrollBarSize::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSize::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgVerticalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgVerticalScrollBarSize::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgVerticalScrollBarSize::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSize.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgVerticalScrollBarSize::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgVerticalScrollBarSize::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSize.browser_handle)
}

// -------------------------------------------------------------------

// CMsgVerticalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.browser_handle)
}

// optional uint32 scroll_max = 6;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_scroll_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_scroll_max() const {
  return _internal_has_scroll_max();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::_internal_scroll_max() const {
  return scroll_max_;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::scroll_max() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.scroll_max)
  return _internal_scroll_max();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_scroll_max(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  scroll_max_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_scroll_max(uint32_t value) {
  _internal_set_scroll_max(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.scroll_max)
}

// optional uint32 scroll = 7;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_scroll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_scroll() const {
  return _internal_has_scroll();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::_internal_scroll() const {
  return scroll_;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::scroll() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.scroll)
  return _internal_scroll();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_scroll(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  scroll_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_scroll(uint32_t value) {
  _internal_set_scroll(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.scroll)
}

// optional float zoom = 8;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgVerticalScrollBarSizeResponse::_internal_zoom() const {
  return zoom_;
}
inline float CMsgVerticalScrollBarSizeResponse::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.zoom)
  return _internal_zoom();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_zoom(float value) {
  _has_bits_[0] |= 0x00000008u;
  zoom_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.zoom)
}

// optional bool visible = 9;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_visible() const {
  return _internal_has_visible();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgVerticalScrollBarSizeResponse::_internal_visible() const {
  return visible_;
}
inline bool CMsgVerticalScrollBarSizeResponse::visible() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.visible)
  return _internal_visible();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000010u;
  visible_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.visible)
}

// optional uint32 page_size = 10;
inline bool CMsgVerticalScrollBarSizeResponse::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgVerticalScrollBarSizeResponse::has_page_size() const {
  return _internal_has_page_size();
}
inline void CMsgVerticalScrollBarSizeResponse::clear_page_size() {
  page_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::_internal_page_size() const {
  return page_size_;
}
inline uint32_t CMsgVerticalScrollBarSizeResponse::page_size() const {
  // @@protoc_insertion_point(field_get:CMsgVerticalScrollBarSizeResponse.page_size)
  return _internal_page_size();
}
inline void CMsgVerticalScrollBarSizeResponse::_internal_set_page_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  page_size_ = value;
}
inline void CMsgVerticalScrollBarSizeResponse::set_page_size(uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:CMsgVerticalScrollBarSizeResponse.page_size)
}

// -------------------------------------------------------------------

// CMsgFind

// optional uint32 browser_handle = 1;
inline bool CMsgFind::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFind::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFind::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgFind::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFind::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFind.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFind::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgFind::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFind.browser_handle)
}

// optional string find = 2;
inline bool CMsgFind::_internal_has_find() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFind::has_find() const {
  return _internal_has_find();
}
inline void CMsgFind::clear_find() {
  find_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgFind::find() const {
  // @@protoc_insertion_point(field_get:CMsgFind.find)
  return _internal_find();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFind::set_find(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 find_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFind.find)
}
inline std::string* CMsgFind::mutable_find() {
  std::string* _s = _internal_mutable_find();
  // @@protoc_insertion_point(field_mutable:CMsgFind.find)
  return _s;
}
inline const std::string& CMsgFind::_internal_find() const {
  return find_.Get();
}
inline void CMsgFind::_internal_set_find(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  find_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFind::_internal_mutable_find() {
  _has_bits_[0] |= 0x00000001u;
  return find_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFind::release_find() {
  // @@protoc_insertion_point(field_release:CMsgFind.find)
  if (!_internal_has_find()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = find_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (find_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    find_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFind::set_allocated_find(std::string* find) {
  if (find != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  find_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), find,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (find_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    find_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFind.find)
}

// optional bool infind = 3;
inline bool CMsgFind::_internal_has_infind() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFind::has_infind() const {
  return _internal_has_infind();
}
inline void CMsgFind::clear_infind() {
  infind_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgFind::_internal_infind() const {
  return infind_;
}
inline bool CMsgFind::infind() const {
  // @@protoc_insertion_point(field_get:CMsgFind.infind)
  return _internal_infind();
}
inline void CMsgFind::_internal_set_infind(bool value) {
  _has_bits_[0] |= 0x00000004u;
  infind_ = value;
}
inline void CMsgFind::set_infind(bool value) {
  _internal_set_infind(value);
  // @@protoc_insertion_point(field_set:CMsgFind.infind)
}

// optional bool reverse = 4 [default = false];
inline bool CMsgFind::_internal_has_reverse() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFind::has_reverse() const {
  return _internal_has_reverse();
}
inline void CMsgFind::clear_reverse() {
  reverse_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgFind::_internal_reverse() const {
  return reverse_;
}
inline bool CMsgFind::reverse() const {
  // @@protoc_insertion_point(field_get:CMsgFind.reverse)
  return _internal_reverse();
}
inline void CMsgFind::_internal_set_reverse(bool value) {
  _has_bits_[0] |= 0x00000008u;
  reverse_ = value;
}
inline void CMsgFind::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:CMsgFind.reverse)
}

// -------------------------------------------------------------------

// CMsgStopFind

// optional uint32 browser_handle = 1;
inline bool CMsgStopFind::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStopFind::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStopFind::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStopFind::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStopFind::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStopFind.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStopFind::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgStopFind::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStopFind.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetHorizontalScroll

// optional uint32 browser_handle = 1;
inline bool CMsgSetHorizontalScroll::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetHorizontalScroll::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetHorizontalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetHorizontalScroll::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetHorizontalScroll::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetHorizontalScroll.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetHorizontalScroll::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetHorizontalScroll::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetHorizontalScroll.browser_handle)
}

// optional uint32 scroll = 2;
inline bool CMsgSetHorizontalScroll::_internal_has_scroll() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetHorizontalScroll::has_scroll() const {
  return _internal_has_scroll();
}
inline void CMsgSetHorizontalScroll::clear_scroll() {
  scroll_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetHorizontalScroll::_internal_scroll() const {
  return scroll_;
}
inline uint32_t CMsgSetHorizontalScroll::scroll() const {
  // @@protoc_insertion_point(field_get:CMsgSetHorizontalScroll.scroll)
  return _internal_scroll();
}
inline void CMsgSetHorizontalScroll::_internal_set_scroll(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  scroll_ = value;
}
inline void CMsgSetHorizontalScroll::set_scroll(uint32_t value) {
  _internal_set_scroll(value);
  // @@protoc_insertion_point(field_set:CMsgSetHorizontalScroll.scroll)
}

// -------------------------------------------------------------------

// CMsgSetVerticalScroll

// optional uint32 browser_handle = 1;
inline bool CMsgSetVerticalScroll::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetVerticalScroll::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetVerticalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetVerticalScroll::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetVerticalScroll::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetVerticalScroll.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetVerticalScroll::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetVerticalScroll::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetVerticalScroll.browser_handle)
}

// optional uint32 scroll = 2;
inline bool CMsgSetVerticalScroll::_internal_has_scroll() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetVerticalScroll::has_scroll() const {
  return _internal_has_scroll();
}
inline void CMsgSetVerticalScroll::clear_scroll() {
  scroll_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetVerticalScroll::_internal_scroll() const {
  return scroll_;
}
inline uint32_t CMsgSetVerticalScroll::scroll() const {
  // @@protoc_insertion_point(field_get:CMsgSetVerticalScroll.scroll)
  return _internal_scroll();
}
inline void CMsgSetVerticalScroll::_internal_set_scroll(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  scroll_ = value;
}
inline void CMsgSetVerticalScroll::set_scroll(uint32_t value) {
  _internal_set_scroll(value);
  // @@protoc_insertion_point(field_set:CMsgSetVerticalScroll.scroll)
}

// -------------------------------------------------------------------

// CMsgSetZoomLevel

// optional uint32 browser_handle = 1;
inline bool CMsgSetZoomLevel::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetZoomLevel::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetZoomLevel::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetZoomLevel::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetZoomLevel::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetZoomLevel.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetZoomLevel::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgSetZoomLevel::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetZoomLevel.browser_handle)
}

// optional double zoom = 2;
inline bool CMsgSetZoomLevel::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetZoomLevel::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgSetZoomLevel::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgSetZoomLevel::_internal_zoom() const {
  return zoom_;
}
inline double CMsgSetZoomLevel::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgSetZoomLevel.zoom)
  return _internal_zoom();
}
inline void CMsgSetZoomLevel::_internal_set_zoom(double value) {
  _has_bits_[0] |= 0x00000001u;
  zoom_ = value;
}
inline void CMsgSetZoomLevel::set_zoom(double value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgSetZoomLevel.zoom)
}

// -------------------------------------------------------------------

// CMsgViewSource

// optional uint32 browser_handle = 1;
inline bool CMsgViewSource::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgViewSource::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgViewSource::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgViewSource::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgViewSource::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgViewSource.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgViewSource::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgViewSource::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgViewSource.browser_handle)
}

// -------------------------------------------------------------------

// CMsgBrowserReady

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserReady::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserReady::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserReady::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBrowserReady::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserReady::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserReady.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserReady::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgBrowserReady::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserReady.browser_handle)
}

// optional string vr_overlay_key = 2;
inline bool CMsgBrowserReady::_internal_has_vr_overlay_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserReady::has_vr_overlay_key() const {
  return _internal_has_vr_overlay_key();
}
inline void CMsgBrowserReady::clear_vr_overlay_key() {
  vr_overlay_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserReady::vr_overlay_key() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserReady.vr_overlay_key)
  return _internal_vr_overlay_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserReady::set_vr_overlay_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vr_overlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserReady.vr_overlay_key)
}
inline std::string* CMsgBrowserReady::mutable_vr_overlay_key() {
  std::string* _s = _internal_mutable_vr_overlay_key();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserReady.vr_overlay_key)
  return _s;
}
inline const std::string& CMsgBrowserReady::_internal_vr_overlay_key() const {
  return vr_overlay_key_.Get();
}
inline void CMsgBrowserReady::_internal_set_vr_overlay_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vr_overlay_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserReady::_internal_mutable_vr_overlay_key() {
  _has_bits_[0] |= 0x00000001u;
  return vr_overlay_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserReady::release_vr_overlay_key() {
  // @@protoc_insertion_point(field_release:CMsgBrowserReady.vr_overlay_key)
  if (!_internal_has_vr_overlay_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vr_overlay_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_overlay_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_overlay_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserReady::set_allocated_vr_overlay_key(std::string* vr_overlay_key) {
  if (vr_overlay_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vr_overlay_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vr_overlay_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vr_overlay_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vr_overlay_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserReady.vr_overlay_key)
}

// optional fixed64 hwnd_browser = 3;
inline bool CMsgBrowserReady::_internal_has_hwnd_browser() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserReady::has_hwnd_browser() const {
  return _internal_has_hwnd_browser();
}
inline void CMsgBrowserReady::clear_hwnd_browser() {
  hwnd_browser_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgBrowserReady::_internal_hwnd_browser() const {
  return hwnd_browser_;
}
inline uint64_t CMsgBrowserReady::hwnd_browser() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserReady.hwnd_browser)
  return _internal_hwnd_browser();
}
inline void CMsgBrowserReady::_internal_set_hwnd_browser(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  hwnd_browser_ = value;
}
inline void CMsgBrowserReady::set_hwnd_browser(uint64_t value) {
  _internal_set_hwnd_browser(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserReady.hwnd_browser)
}

// -------------------------------------------------------------------

// CMsgURLChanged

// optional uint32 browser_handle = 1;
inline bool CMsgURLChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgURLChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgURLChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgURLChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgURLChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  browser_handle_ = value;
}
inline void CMsgURLChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgURLChanged.browser_handle)
}

// optional string url = 2;
inline bool CMsgURLChanged::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_url() const {
  return _internal_has_url();
}
inline void CMsgURLChanged::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgURLChanged::url() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgURLChanged::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgURLChanged.url)
}
inline std::string* CMsgURLChanged::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgURLChanged.url)
  return _s;
}
inline const std::string& CMsgURLChanged::_internal_url() const {
  return url_.Get();
}
inline void CMsgURLChanged::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::release_url() {
  // @@protoc_insertion_point(field_release:CMsgURLChanged.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgURLChanged::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgURLChanged.url)
}

// optional string postData = 3;
inline bool CMsgURLChanged::_internal_has_postdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_postdata() const {
  return _internal_has_postdata();
}
inline void CMsgURLChanged::clear_postdata() {
  postdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgURLChanged::postdata() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.postData)
  return _internal_postdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgURLChanged::set_postdata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgURLChanged.postData)
}
inline std::string* CMsgURLChanged::mutable_postdata() {
  std::string* _s = _internal_mutable_postdata();
  // @@protoc_insertion_point(field_mutable:CMsgURLChanged.postData)
  return _s;
}
inline const std::string& CMsgURLChanged::_internal_postdata() const {
  return postdata_.Get();
}
inline void CMsgURLChanged::_internal_set_postdata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::_internal_mutable_postdata() {
  _has_bits_[0] |= 0x00000002u;
  return postdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::release_postdata() {
  // @@protoc_insertion_point(field_release:CMsgURLChanged.postData)
  if (!_internal_has_postdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = postdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    postdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgURLChanged::set_allocated_postdata(std::string* postdata) {
  if (postdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  postdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postdata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    postdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgURLChanged.postData)
}

// optional bool bIsRedirect = 4;
inline bool CMsgURLChanged::_internal_has_bisredirect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_bisredirect() const {
  return _internal_has_bisredirect();
}
inline void CMsgURLChanged::clear_bisredirect() {
  bisredirect_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgURLChanged::_internal_bisredirect() const {
  return bisredirect_;
}
inline bool CMsgURLChanged::bisredirect() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.bIsRedirect)
  return _internal_bisredirect();
}
inline void CMsgURLChanged::_internal_set_bisredirect(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bisredirect_ = value;
}
inline void CMsgURLChanged::set_bisredirect(bool value) {
  _internal_set_bisredirect(value);
  // @@protoc_insertion_point(field_set:CMsgURLChanged.bIsRedirect)
}

// optional string pagetitle = 5;
inline bool CMsgURLChanged::_internal_has_pagetitle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_pagetitle() const {
  return _internal_has_pagetitle();
}
inline void CMsgURLChanged::clear_pagetitle() {
  pagetitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgURLChanged::pagetitle() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.pagetitle)
  return _internal_pagetitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgURLChanged::set_pagetitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgURLChanged.pagetitle)
}
inline std::string* CMsgURLChanged::mutable_pagetitle() {
  std::string* _s = _internal_mutable_pagetitle();
  // @@protoc_insertion_point(field_mutable:CMsgURLChanged.pagetitle)
  return _s;
}
inline const std::string& CMsgURLChanged::_internal_pagetitle() const {
  return pagetitle_.Get();
}
inline void CMsgURLChanged::_internal_set_pagetitle(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::_internal_mutable_pagetitle() {
  _has_bits_[0] |= 0x00000004u;
  return pagetitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgURLChanged::release_pagetitle() {
  // @@protoc_insertion_point(field_release:CMsgURLChanged.pagetitle)
  if (!_internal_has_pagetitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = pagetitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgURLChanged::set_allocated_pagetitle(std::string* pagetitle) {
  if (pagetitle != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pagetitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pagetitle,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgURLChanged.pagetitle)
}

// optional bool bNewNavigation = 6;
inline bool CMsgURLChanged::_internal_has_bnewnavigation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgURLChanged::has_bnewnavigation() const {
  return _internal_has_bnewnavigation();
}
inline void CMsgURLChanged::clear_bnewnavigation() {
  bnewnavigation_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgURLChanged::_internal_bnewnavigation() const {
  return bnewnavigation_;
}
inline bool CMsgURLChanged::bnewnavigation() const {
  // @@protoc_insertion_point(field_get:CMsgURLChanged.bNewNavigation)
  return _internal_bnewnavigation();
}
inline void CMsgURLChanged::_internal_set_bnewnavigation(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bnewnavigation_ = value;
}
inline void CMsgURLChanged::set_bnewnavigation(bool value) {
  _internal_set_bnewnavigation(value);
  // @@protoc_insertion_point(field_set:CMsgURLChanged.bNewNavigation)
}

// -------------------------------------------------------------------

// CHistoryEntry

// optional string url = 1;
inline bool CHistoryEntry::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHistoryEntry::has_url() const {
  return _internal_has_url();
}
inline void CHistoryEntry::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHistoryEntry::url() const {
  // @@protoc_insertion_point(field_get:CHistoryEntry.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHistoryEntry::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHistoryEntry.url)
}
inline std::string* CHistoryEntry::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CHistoryEntry.url)
  return _s;
}
inline const std::string& CHistoryEntry::_internal_url() const {
  return url_.Get();
}
inline void CHistoryEntry::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHistoryEntry::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHistoryEntry::release_url() {
  // @@protoc_insertion_point(field_release:CHistoryEntry.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHistoryEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHistoryEntry.url)
}

// -------------------------------------------------------------------

// CMsgHistoryChanged

// optional uint32 browser_handle = 1;
inline bool CMsgHistoryChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHistoryChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHistoryChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHistoryChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHistoryChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHistoryChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHistoryChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHistoryChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHistoryChanged.browser_handle)
}

// optional uint32 index = 2;
inline bool CMsgHistoryChanged::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHistoryChanged::has_index() const {
  return _internal_has_index();
}
inline void CMsgHistoryChanged::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgHistoryChanged::_internal_index() const {
  return index_;
}
inline uint32_t CMsgHistoryChanged::index() const {
  // @@protoc_insertion_point(field_get:CMsgHistoryChanged.index)
  return _internal_index();
}
inline void CMsgHistoryChanged::_internal_set_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void CMsgHistoryChanged::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CMsgHistoryChanged.index)
}

// repeated .CHistoryEntry entries = 3;
inline int CMsgHistoryChanged::_internal_entries_size() const {
  return entries_.size();
}
inline int CMsgHistoryChanged::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgHistoryChanged::clear_entries() {
  entries_.Clear();
}
inline ::CHistoryEntry* CMsgHistoryChanged::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgHistoryChanged.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHistoryEntry >*
CMsgHistoryChanged::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgHistoryChanged.entries)
  return &entries_;
}
inline const ::CHistoryEntry& CMsgHistoryChanged::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::CHistoryEntry& CMsgHistoryChanged::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgHistoryChanged.entries)
  return _internal_entries(index);
}
inline ::CHistoryEntry* CMsgHistoryChanged::_internal_add_entries() {
  return entries_.Add();
}
inline ::CHistoryEntry* CMsgHistoryChanged::add_entries() {
  ::CHistoryEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgHistoryChanged.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHistoryEntry >&
CMsgHistoryChanged::entries() const {
  // @@protoc_insertion_point(field_list:CMsgHistoryChanged.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CMsgLoadError

// optional uint32 browser_handle = 1;
inline bool CMsgLoadError::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLoadError::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLoadError::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLoadError::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLoadError::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLoadError.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLoadError::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgLoadError::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLoadError.browser_handle)
}

// optional int32 error_code = 2;
inline bool CMsgLoadError::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLoadError::has_error_code() const {
  return _internal_has_error_code();
}
inline void CMsgLoadError::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgLoadError::_internal_error_code() const {
  return error_code_;
}
inline int32_t CMsgLoadError::error_code() const {
  // @@protoc_insertion_point(field_get:CMsgLoadError.error_code)
  return _internal_error_code();
}
inline void CMsgLoadError::_internal_set_error_code(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  error_code_ = value;
}
inline void CMsgLoadError::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:CMsgLoadError.error_code)
}

// optional string url = 3;
inline bool CMsgLoadError::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLoadError::has_url() const {
  return _internal_has_url();
}
inline void CMsgLoadError::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLoadError::url() const {
  // @@protoc_insertion_point(field_get:CMsgLoadError.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadError::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadError.url)
}
inline std::string* CMsgLoadError::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgLoadError.url)
  return _s;
}
inline const std::string& CMsgLoadError::_internal_url() const {
  return url_.Get();
}
inline void CMsgLoadError::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadError::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadError::release_url() {
  // @@protoc_insertion_point(field_release:CMsgLoadError.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadError::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadError.url)
}

// optional string error_description = 4;
inline bool CMsgLoadError::_internal_has_error_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLoadError::has_error_description() const {
  return _internal_has_error_description();
}
inline void CMsgLoadError::clear_error_description() {
  error_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgLoadError::error_description() const {
  // @@protoc_insertion_point(field_get:CMsgLoadError.error_description)
  return _internal_error_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadError::set_error_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 error_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadError.error_description)
}
inline std::string* CMsgLoadError::mutable_error_description() {
  std::string* _s = _internal_mutable_error_description();
  // @@protoc_insertion_point(field_mutable:CMsgLoadError.error_description)
  return _s;
}
inline const std::string& CMsgLoadError::_internal_error_description() const {
  return error_description_.Get();
}
inline void CMsgLoadError::_internal_set_error_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadError::_internal_mutable_error_description() {
  _has_bits_[0] |= 0x00000002u;
  return error_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadError::release_error_description() {
  // @@protoc_insertion_point(field_release:CMsgLoadError.error_description)
  if (!_internal_has_error_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = error_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadError::set_allocated_error_description(std::string* error_description) {
  if (error_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadError.error_description)
}

// -------------------------------------------------------------------

// CHTMLHeader

// optional string key = 1;
inline bool CHTMLHeader::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHTMLHeader::has_key() const {
  return _internal_has_key();
}
inline void CHTMLHeader::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHTMLHeader::key() const {
  // @@protoc_insertion_point(field_get:CHTMLHeader.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHTMLHeader::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHTMLHeader.key)
}
inline std::string* CHTMLHeader::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CHTMLHeader.key)
  return _s;
}
inline const std::string& CHTMLHeader::_internal_key() const {
  return key_.Get();
}
inline void CHTMLHeader::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHTMLHeader::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHTMLHeader::release_key() {
  // @@protoc_insertion_point(field_release:CHTMLHeader.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHTMLHeader::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHTMLHeader.key)
}

// optional string value = 2;
inline bool CHTMLHeader::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHTMLHeader::has_value() const {
  return _internal_has_value();
}
inline void CHTMLHeader::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CHTMLHeader::value() const {
  // @@protoc_insertion_point(field_get:CHTMLHeader.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHTMLHeader::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHTMLHeader.value)
}
inline std::string* CHTMLHeader::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CHTMLHeader.value)
  return _s;
}
inline const std::string& CHTMLHeader::_internal_value() const {
  return value_.Get();
}
inline void CHTMLHeader::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHTMLHeader::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHTMLHeader::release_value() {
  // @@protoc_insertion_point(field_release:CHTMLHeader.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHTMLHeader::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHTMLHeader.value)
}

// -------------------------------------------------------------------

// CHTMLPageSecurityInfo

// optional bool bIsSecure = 1 [default = false];
inline bool CHTMLPageSecurityInfo::_internal_has_bissecure() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_bissecure() const {
  return _internal_has_bissecure();
}
inline void CHTMLPageSecurityInfo::clear_bissecure() {
  bissecure_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CHTMLPageSecurityInfo::_internal_bissecure() const {
  return bissecure_;
}
inline bool CHTMLPageSecurityInfo::bissecure() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.bIsSecure)
  return _internal_bissecure();
}
inline void CHTMLPageSecurityInfo::_internal_set_bissecure(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bissecure_ = value;
}
inline void CHTMLPageSecurityInfo::set_bissecure(bool value) {
  _internal_set_bissecure(value);
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.bIsSecure)
}

// optional bool bHasCertError = 2 [default = false];
inline bool CHTMLPageSecurityInfo::_internal_has_bhascerterror() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_bhascerterror() const {
  return _internal_has_bhascerterror();
}
inline void CHTMLPageSecurityInfo::clear_bhascerterror() {
  bhascerterror_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CHTMLPageSecurityInfo::_internal_bhascerterror() const {
  return bhascerterror_;
}
inline bool CHTMLPageSecurityInfo::bhascerterror() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.bHasCertError)
  return _internal_bhascerterror();
}
inline void CHTMLPageSecurityInfo::_internal_set_bhascerterror(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bhascerterror_ = value;
}
inline void CHTMLPageSecurityInfo::set_bhascerterror(bool value) {
  _internal_set_bhascerterror(value);
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.bHasCertError)
}

// optional string issuerName = 3;
inline bool CHTMLPageSecurityInfo::_internal_has_issuername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_issuername() const {
  return _internal_has_issuername();
}
inline void CHTMLPageSecurityInfo::clear_issuername() {
  issuername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHTMLPageSecurityInfo::issuername() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.issuerName)
  return _internal_issuername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHTMLPageSecurityInfo::set_issuername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 issuername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.issuerName)
}
inline std::string* CHTMLPageSecurityInfo::mutable_issuername() {
  std::string* _s = _internal_mutable_issuername();
  // @@protoc_insertion_point(field_mutable:CHTMLPageSecurityInfo.issuerName)
  return _s;
}
inline const std::string& CHTMLPageSecurityInfo::_internal_issuername() const {
  return issuername_.Get();
}
inline void CHTMLPageSecurityInfo::_internal_set_issuername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  issuername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHTMLPageSecurityInfo::_internal_mutable_issuername() {
  _has_bits_[0] |= 0x00000001u;
  return issuername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHTMLPageSecurityInfo::release_issuername() {
  // @@protoc_insertion_point(field_release:CHTMLPageSecurityInfo.issuerName)
  if (!_internal_has_issuername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = issuername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    issuername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHTMLPageSecurityInfo::set_allocated_issuername(std::string* issuername) {
  if (issuername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  issuername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    issuername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHTMLPageSecurityInfo.issuerName)
}

// optional string certName = 4;
inline bool CHTMLPageSecurityInfo::_internal_has_certname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_certname() const {
  return _internal_has_certname();
}
inline void CHTMLPageSecurityInfo::clear_certname() {
  certname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CHTMLPageSecurityInfo::certname() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.certName)
  return _internal_certname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHTMLPageSecurityInfo::set_certname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 certname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.certName)
}
inline std::string* CHTMLPageSecurityInfo::mutable_certname() {
  std::string* _s = _internal_mutable_certname();
  // @@protoc_insertion_point(field_mutable:CHTMLPageSecurityInfo.certName)
  return _s;
}
inline const std::string& CHTMLPageSecurityInfo::_internal_certname() const {
  return certname_.Get();
}
inline void CHTMLPageSecurityInfo::_internal_set_certname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  certname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHTMLPageSecurityInfo::_internal_mutable_certname() {
  _has_bits_[0] |= 0x00000002u;
  return certname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHTMLPageSecurityInfo::release_certname() {
  // @@protoc_insertion_point(field_release:CHTMLPageSecurityInfo.certName)
  if (!_internal_has_certname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = certname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    certname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHTMLPageSecurityInfo::set_allocated_certname(std::string* certname) {
  if (certname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  certname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (certname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    certname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHTMLPageSecurityInfo.certName)
}

// optional int32 certExpiry = 5 [default = 0];
inline bool CHTMLPageSecurityInfo::_internal_has_certexpiry() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_certexpiry() const {
  return _internal_has_certexpiry();
}
inline void CHTMLPageSecurityInfo::clear_certexpiry() {
  certexpiry_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CHTMLPageSecurityInfo::_internal_certexpiry() const {
  return certexpiry_;
}
inline int32_t CHTMLPageSecurityInfo::certexpiry() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.certExpiry)
  return _internal_certexpiry();
}
inline void CHTMLPageSecurityInfo::_internal_set_certexpiry(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  certexpiry_ = value;
}
inline void CHTMLPageSecurityInfo::set_certexpiry(int32_t value) {
  _internal_set_certexpiry(value);
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.certExpiry)
}

// optional int32 nCertBits = 6 [default = 0];
inline bool CHTMLPageSecurityInfo::_internal_has_ncertbits() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_ncertbits() const {
  return _internal_has_ncertbits();
}
inline void CHTMLPageSecurityInfo::clear_ncertbits() {
  ncertbits_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CHTMLPageSecurityInfo::_internal_ncertbits() const {
  return ncertbits_;
}
inline int32_t CHTMLPageSecurityInfo::ncertbits() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.nCertBits)
  return _internal_ncertbits();
}
inline void CHTMLPageSecurityInfo::_internal_set_ncertbits(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  ncertbits_ = value;
}
inline void CHTMLPageSecurityInfo::set_ncertbits(int32_t value) {
  _internal_set_ncertbits(value);
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.nCertBits)
}

// optional bool bIsEVCert = 7 [default = false];
inline bool CHTMLPageSecurityInfo::_internal_has_bisevcert() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CHTMLPageSecurityInfo::has_bisevcert() const {
  return _internal_has_bisevcert();
}
inline void CHTMLPageSecurityInfo::clear_bisevcert() {
  bisevcert_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CHTMLPageSecurityInfo::_internal_bisevcert() const {
  return bisevcert_;
}
inline bool CHTMLPageSecurityInfo::bisevcert() const {
  // @@protoc_insertion_point(field_get:CHTMLPageSecurityInfo.bIsEVCert)
  return _internal_bisevcert();
}
inline void CHTMLPageSecurityInfo::_internal_set_bisevcert(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bisevcert_ = value;
}
inline void CHTMLPageSecurityInfo::set_bisevcert(bool value) {
  _internal_set_bisevcert(value);
  // @@protoc_insertion_point(field_set:CHTMLPageSecurityInfo.bIsEVCert)
}

// -------------------------------------------------------------------

// CMsgFinishedRequest

// optional uint32 browser_handle = 1;
inline bool CMsgFinishedRequest::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFinishedRequest::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFinishedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgFinishedRequest::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFinishedRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFinishedRequest.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFinishedRequest::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgFinishedRequest::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFinishedRequest.browser_handle)
}

// optional string url = 2;
inline bool CMsgFinishedRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFinishedRequest::has_url() const {
  return _internal_has_url();
}
inline void CMsgFinishedRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgFinishedRequest::url() const {
  // @@protoc_insertion_point(field_get:CMsgFinishedRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFinishedRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFinishedRequest.url)
}
inline std::string* CMsgFinishedRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgFinishedRequest.url)
  return _s;
}
inline const std::string& CMsgFinishedRequest::_internal_url() const {
  return url_.Get();
}
inline void CMsgFinishedRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFinishedRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFinishedRequest::release_url() {
  // @@protoc_insertion_point(field_release:CMsgFinishedRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFinishedRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFinishedRequest.url)
}

// optional string pageTitle = 3;
inline bool CMsgFinishedRequest::_internal_has_pagetitle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFinishedRequest::has_pagetitle() const {
  return _internal_has_pagetitle();
}
inline void CMsgFinishedRequest::clear_pagetitle() {
  pagetitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgFinishedRequest::pagetitle() const {
  // @@protoc_insertion_point(field_get:CMsgFinishedRequest.pageTitle)
  return _internal_pagetitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFinishedRequest::set_pagetitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFinishedRequest.pageTitle)
}
inline std::string* CMsgFinishedRequest::mutable_pagetitle() {
  std::string* _s = _internal_mutable_pagetitle();
  // @@protoc_insertion_point(field_mutable:CMsgFinishedRequest.pageTitle)
  return _s;
}
inline const std::string& CMsgFinishedRequest::_internal_pagetitle() const {
  return pagetitle_.Get();
}
inline void CMsgFinishedRequest::_internal_set_pagetitle(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFinishedRequest::_internal_mutable_pagetitle() {
  _has_bits_[0] |= 0x00000002u;
  return pagetitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFinishedRequest::release_pagetitle() {
  // @@protoc_insertion_point(field_release:CMsgFinishedRequest.pageTitle)
  if (!_internal_has_pagetitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = pagetitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFinishedRequest::set_allocated_pagetitle(std::string* pagetitle) {
  if (pagetitle != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pagetitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pagetitle,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFinishedRequest.pageTitle)
}

// -------------------------------------------------------------------

// CMsgLoadedRequest

// optional uint32 browser_handle = 1;
inline bool CMsgLoadedRequest::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLoadedRequest::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLoadedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLoadedRequest::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLoadedRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLoadedRequest.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLoadedRequest::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgLoadedRequest::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLoadedRequest.browser_handle)
}

// optional string url = 2;
inline bool CMsgLoadedRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLoadedRequest::has_url() const {
  return _internal_has_url();
}
inline void CMsgLoadedRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLoadedRequest::url() const {
  // @@protoc_insertion_point(field_get:CMsgLoadedRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadedRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadedRequest.url)
}
inline std::string* CMsgLoadedRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgLoadedRequest.url)
  return _s;
}
inline const std::string& CMsgLoadedRequest::_internal_url() const {
  return url_.Get();
}
inline void CMsgLoadedRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadedRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadedRequest::release_url() {
  // @@protoc_insertion_point(field_release:CMsgLoadedRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadedRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadedRequest.url)
}

// optional string pageTitle = 3;
inline bool CMsgLoadedRequest::_internal_has_pagetitle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLoadedRequest::has_pagetitle() const {
  return _internal_has_pagetitle();
}
inline void CMsgLoadedRequest::clear_pagetitle() {
  pagetitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgLoadedRequest::pagetitle() const {
  // @@protoc_insertion_point(field_get:CMsgLoadedRequest.pageTitle)
  return _internal_pagetitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadedRequest::set_pagetitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadedRequest.pageTitle)
}
inline std::string* CMsgLoadedRequest::mutable_pagetitle() {
  std::string* _s = _internal_mutable_pagetitle();
  // @@protoc_insertion_point(field_mutable:CMsgLoadedRequest.pageTitle)
  return _s;
}
inline const std::string& CMsgLoadedRequest::_internal_pagetitle() const {
  return pagetitle_.Get();
}
inline void CMsgLoadedRequest::_internal_set_pagetitle(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pagetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadedRequest::_internal_mutable_pagetitle() {
  _has_bits_[0] |= 0x00000002u;
  return pagetitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadedRequest::release_pagetitle() {
  // @@protoc_insertion_point(field_release:CMsgLoadedRequest.pageTitle)
  if (!_internal_has_pagetitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = pagetitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadedRequest::set_allocated_pagetitle(std::string* pagetitle) {
  if (pagetitle != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pagetitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pagetitle,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pagetitle_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pagetitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadedRequest.pageTitle)
}

// repeated .CHTMLHeader headers = 5;
inline int CMsgLoadedRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int CMsgLoadedRequest::headers_size() const {
  return _internal_headers_size();
}
inline void CMsgLoadedRequest::clear_headers() {
  headers_.Clear();
}
inline ::CHTMLHeader* CMsgLoadedRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLoadedRequest.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHTMLHeader >*
CMsgLoadedRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLoadedRequest.headers)
  return &headers_;
}
inline const ::CHTMLHeader& CMsgLoadedRequest::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::CHTMLHeader& CMsgLoadedRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLoadedRequest.headers)
  return _internal_headers(index);
}
inline ::CHTMLHeader* CMsgLoadedRequest::_internal_add_headers() {
  return headers_.Add();
}
inline ::CHTMLHeader* CMsgLoadedRequest::add_headers() {
  ::CHTMLHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:CMsgLoadedRequest.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHTMLHeader >&
CMsgLoadedRequest::headers() const {
  // @@protoc_insertion_point(field_list:CMsgLoadedRequest.headers)
  return headers_;
}

// -------------------------------------------------------------------

// CMsgFavIconURLChanged

// optional uint32 browser_handle = 1;
inline bool CMsgFavIconURLChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFavIconURLChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFavIconURLChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFavIconURLChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFavIconURLChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFavIconURLChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFavIconURLChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgFavIconURLChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFavIconURLChanged.browser_handle)
}

// repeated string urls = 2;
inline int CMsgFavIconURLChanged::_internal_urls_size() const {
  return urls_.size();
}
inline int CMsgFavIconURLChanged::urls_size() const {
  return _internal_urls_size();
}
inline void CMsgFavIconURLChanged::clear_urls() {
  urls_.Clear();
}
inline std::string* CMsgFavIconURLChanged::add_urls() {
  std::string* _s = _internal_add_urls();
  // @@protoc_insertion_point(field_add_mutable:CMsgFavIconURLChanged.urls)
  return _s;
}
inline const std::string& CMsgFavIconURLChanged::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const std::string& CMsgFavIconURLChanged::urls(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFavIconURLChanged.urls)
  return _internal_urls(index);
}
inline std::string* CMsgFavIconURLChanged::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFavIconURLChanged.urls)
  return urls_.Mutable(index);
}
inline void CMsgFavIconURLChanged::set_urls(int index, const std::string& value) {
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::set_urls(int index, std::string&& value) {
  urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgFavIconURLChanged.urls)
}
inline std::string* CMsgFavIconURLChanged::_internal_add_urls() {
  return urls_.Add();
}
inline void CMsgFavIconURLChanged::add_urls(const std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::add_urls(std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::add_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgFavIconURLChanged.urls)
}
inline void CMsgFavIconURLChanged::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgFavIconURLChanged.urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgFavIconURLChanged::urls() const {
  // @@protoc_insertion_point(field_list:CMsgFavIconURLChanged.urls)
  return urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgFavIconURLChanged::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFavIconURLChanged.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// CMsgPageSecurity

// optional uint32 browser_handle = 1;
inline bool CMsgPageSecurity::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPageSecurity::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPageSecurity::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPageSecurity::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPageSecurity::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPageSecurity.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPageSecurity::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgPageSecurity::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPageSecurity.browser_handle)
}

// optional string url = 2;
inline bool CMsgPageSecurity::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPageSecurity::has_url() const {
  return _internal_has_url();
}
inline void CMsgPageSecurity::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPageSecurity::url() const {
  // @@protoc_insertion_point(field_get:CMsgPageSecurity.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPageSecurity::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPageSecurity.url)
}
inline std::string* CMsgPageSecurity::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgPageSecurity.url)
  return _s;
}
inline const std::string& CMsgPageSecurity::_internal_url() const {
  return url_.Get();
}
inline void CMsgPageSecurity::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPageSecurity::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPageSecurity::release_url() {
  // @@protoc_insertion_point(field_release:CMsgPageSecurity.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPageSecurity::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPageSecurity.url)
}

// optional .CHTMLPageSecurityInfo security_info = 3;
inline bool CMsgPageSecurity::_internal_has_security_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || security_info_ != nullptr);
  return value;
}
inline bool CMsgPageSecurity::has_security_info() const {
  return _internal_has_security_info();
}
inline void CMsgPageSecurity::clear_security_info() {
  if (security_info_ != nullptr) security_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CHTMLPageSecurityInfo& CMsgPageSecurity::_internal_security_info() const {
  const ::CHTMLPageSecurityInfo* p = security_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CHTMLPageSecurityInfo&>(
      ::_CHTMLPageSecurityInfo_default_instance_);
}
inline const ::CHTMLPageSecurityInfo& CMsgPageSecurity::security_info() const {
  // @@protoc_insertion_point(field_get:CMsgPageSecurity.security_info)
  return _internal_security_info();
}
inline void CMsgPageSecurity::unsafe_arena_set_allocated_security_info(
    ::CHTMLPageSecurityInfo* security_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_info_);
  }
  security_info_ = security_info;
  if (security_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPageSecurity.security_info)
}
inline ::CHTMLPageSecurityInfo* CMsgPageSecurity::release_security_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::CHTMLPageSecurityInfo* temp = security_info_;
  security_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CHTMLPageSecurityInfo* CMsgPageSecurity::unsafe_arena_release_security_info() {
  // @@protoc_insertion_point(field_release:CMsgPageSecurity.security_info)
  _has_bits_[0] &= ~0x00000002u;
  ::CHTMLPageSecurityInfo* temp = security_info_;
  security_info_ = nullptr;
  return temp;
}
inline ::CHTMLPageSecurityInfo* CMsgPageSecurity::_internal_mutable_security_info() {
  _has_bits_[0] |= 0x00000002u;
  if (security_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CHTMLPageSecurityInfo>(GetArenaForAllocation());
    security_info_ = p;
  }
  return security_info_;
}
inline ::CHTMLPageSecurityInfo* CMsgPageSecurity::mutable_security_info() {
  ::CHTMLPageSecurityInfo* _msg = _internal_mutable_security_info();
  // @@protoc_insertion_point(field_mutable:CMsgPageSecurity.security_info)
  return _msg;
}
inline void CMsgPageSecurity::set_allocated_security_info(::CHTMLPageSecurityInfo* security_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete security_info_;
  }
  if (security_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHTMLPageSecurityInfo>::GetOwningArena(security_info);
    if (message_arena != submessage_arena) {
      security_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  security_info_ = security_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgPageSecurity.security_info)
}

// -------------------------------------------------------------------

// CMsgStartRequest

// optional uint32 browser_handle = 1;
inline bool CMsgStartRequest::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStartRequest::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStartRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgStartRequest::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStartRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequest.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStartRequest::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  browser_handle_ = value;
}
inline void CMsgStartRequest::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStartRequest.browser_handle)
}

// optional string url = 2;
inline bool CMsgStartRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStartRequest::has_url() const {
  return _internal_has_url();
}
inline void CMsgStartRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStartRequest::url() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStartRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStartRequest.url)
}
inline std::string* CMsgStartRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgStartRequest.url)
  return _s;
}
inline const std::string& CMsgStartRequest::_internal_url() const {
  return url_.Get();
}
inline void CMsgStartRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::release_url() {
  // @@protoc_insertion_point(field_release:CMsgStartRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStartRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStartRequest.url)
}

// optional string target = 3;
inline bool CMsgStartRequest::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStartRequest::has_target() const {
  return _internal_has_target();
}
inline void CMsgStartRequest::clear_target() {
  target_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgStartRequest::target() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequest.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStartRequest::set_target(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStartRequest.target)
}
inline std::string* CMsgStartRequest::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:CMsgStartRequest.target)
  return _s;
}
inline const std::string& CMsgStartRequest::_internal_target() const {
  return target_.Get();
}
inline void CMsgStartRequest::_internal_set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000002u;
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::release_target() {
  // @@protoc_insertion_point(field_release:CMsgStartRequest.target)
  if (!_internal_has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = target_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStartRequest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStartRequest.target)
}

// optional string postData = 4;
inline bool CMsgStartRequest::_internal_has_postdata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStartRequest::has_postdata() const {
  return _internal_has_postdata();
}
inline void CMsgStartRequest::clear_postdata() {
  postdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgStartRequest::postdata() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequest.postData)
  return _internal_postdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStartRequest::set_postdata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStartRequest.postData)
}
inline std::string* CMsgStartRequest::mutable_postdata() {
  std::string* _s = _internal_mutable_postdata();
  // @@protoc_insertion_point(field_mutable:CMsgStartRequest.postData)
  return _s;
}
inline const std::string& CMsgStartRequest::_internal_postdata() const {
  return postdata_.Get();
}
inline void CMsgStartRequest::_internal_set_postdata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  postdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::_internal_mutable_postdata() {
  _has_bits_[0] |= 0x00000004u;
  return postdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStartRequest::release_postdata() {
  // @@protoc_insertion_point(field_release:CMsgStartRequest.postData)
  if (!_internal_has_postdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = postdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    postdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStartRequest::set_allocated_postdata(std::string* postdata) {
  if (postdata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  postdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postdata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    postdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStartRequest.postData)
}

// optional bool bIsRedirect = 5;
inline bool CMsgStartRequest::_internal_has_bisredirect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStartRequest::has_bisredirect() const {
  return _internal_has_bisredirect();
}
inline void CMsgStartRequest::clear_bisredirect() {
  bisredirect_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgStartRequest::_internal_bisredirect() const {
  return bisredirect_;
}
inline bool CMsgStartRequest::bisredirect() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequest.bIsRedirect)
  return _internal_bisredirect();
}
inline void CMsgStartRequest::_internal_set_bisredirect(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bisredirect_ = value;
}
inline void CMsgStartRequest::set_bisredirect(bool value) {
  _internal_set_bisredirect(value);
  // @@protoc_insertion_point(field_set:CMsgStartRequest.bIsRedirect)
}

// -------------------------------------------------------------------

// CMsgStartRequestResponse

// optional uint32 browser_handle = 1;
inline bool CMsgStartRequestResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStartRequestResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStartRequestResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgStartRequestResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStartRequestResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequestResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStartRequestResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgStartRequestResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStartRequestResponse.browser_handle)
}

// optional bool bAllow = 2;
inline bool CMsgStartRequestResponse::_internal_has_ballow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStartRequestResponse::has_ballow() const {
  return _internal_has_ballow();
}
inline void CMsgStartRequestResponse::clear_ballow() {
  ballow_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgStartRequestResponse::_internal_ballow() const {
  return ballow_;
}
inline bool CMsgStartRequestResponse::ballow() const {
  // @@protoc_insertion_point(field_get:CMsgStartRequestResponse.bAllow)
  return _internal_ballow();
}
inline void CMsgStartRequestResponse::_internal_set_ballow(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ballow_ = value;
}
inline void CMsgStartRequestResponse::set_ballow(bool value) {
  _internal_set_ballow(value);
  // @@protoc_insertion_point(field_set:CMsgStartRequestResponse.bAllow)
}

// -------------------------------------------------------------------

// CMsgShowPopup

// optional uint32 browser_handle = 1;
inline bool CMsgShowPopup::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowPopup::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgShowPopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowPopup::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgShowPopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgShowPopup.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgShowPopup::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgShowPopup::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgShowPopup.browser_handle)
}

// -------------------------------------------------------------------

// CMsgHidePopup

// optional uint32 browser_handle = 1;
inline bool CMsgHidePopup::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHidePopup::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHidePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHidePopup::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHidePopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHidePopup.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHidePopup::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHidePopup::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHidePopup.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSizePopup

// optional uint32 browser_handle = 1;
inline bool CMsgSizePopup::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSizePopup::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSizePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSizePopup::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSizePopup::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSizePopup.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSizePopup::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSizePopup::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSizePopup.browser_handle)
}

// optional int32 x = 2;
inline bool CMsgSizePopup::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSizePopup::has_x() const {
  return _internal_has_x();
}
inline void CMsgSizePopup::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSizePopup::_internal_x() const {
  return x_;
}
inline int32_t CMsgSizePopup::x() const {
  // @@protoc_insertion_point(field_get:CMsgSizePopup.x)
  return _internal_x();
}
inline void CMsgSizePopup::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgSizePopup::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgSizePopup.x)
}

// optional int32 y = 3;
inline bool CMsgSizePopup::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSizePopup::has_y() const {
  return _internal_has_y();
}
inline void CMsgSizePopup::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSizePopup::_internal_y() const {
  return y_;
}
inline int32_t CMsgSizePopup::y() const {
  // @@protoc_insertion_point(field_get:CMsgSizePopup.y)
  return _internal_y();
}
inline void CMsgSizePopup::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgSizePopup::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgSizePopup.y)
}

// optional uint32 wide = 4;
inline bool CMsgSizePopup::_internal_has_wide() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSizePopup::has_wide() const {
  return _internal_has_wide();
}
inline void CMsgSizePopup::clear_wide() {
  wide_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSizePopup::_internal_wide() const {
  return wide_;
}
inline uint32_t CMsgSizePopup::wide() const {
  // @@protoc_insertion_point(field_get:CMsgSizePopup.wide)
  return _internal_wide();
}
inline void CMsgSizePopup::_internal_set_wide(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  wide_ = value;
}
inline void CMsgSizePopup::set_wide(uint32_t value) {
  _internal_set_wide(value);
  // @@protoc_insertion_point(field_set:CMsgSizePopup.wide)
}

// optional uint32 tall = 5;
inline bool CMsgSizePopup::_internal_has_tall() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSizePopup::has_tall() const {
  return _internal_has_tall();
}
inline void CMsgSizePopup::clear_tall() {
  tall_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSizePopup::_internal_tall() const {
  return tall_;
}
inline uint32_t CMsgSizePopup::tall() const {
  // @@protoc_insertion_point(field_get:CMsgSizePopup.tall)
  return _internal_tall();
}
inline void CMsgSizePopup::_internal_set_tall(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tall_ = value;
}
inline void CMsgSizePopup::set_tall(uint32_t value) {
  _internal_set_tall(value);
  // @@protoc_insertion_point(field_set:CMsgSizePopup.tall)
}

// -------------------------------------------------------------------

// CMsgOpenNewTab

// optional uint32 browser_handle = 1;
inline bool CMsgOpenNewTab::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgOpenNewTab::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgOpenNewTab::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgOpenNewTab::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgOpenNewTab::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgOpenNewTab.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgOpenNewTab::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgOpenNewTab::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgOpenNewTab.browser_handle)
}

// optional string url = 2;
inline bool CMsgOpenNewTab::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgOpenNewTab::has_url() const {
  return _internal_has_url();
}
inline void CMsgOpenNewTab::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgOpenNewTab::url() const {
  // @@protoc_insertion_point(field_get:CMsgOpenNewTab.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgOpenNewTab::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgOpenNewTab.url)
}
inline std::string* CMsgOpenNewTab::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgOpenNewTab.url)
  return _s;
}
inline const std::string& CMsgOpenNewTab::_internal_url() const {
  return url_.Get();
}
inline void CMsgOpenNewTab::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgOpenNewTab::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgOpenNewTab::release_url() {
  // @@protoc_insertion_point(field_release:CMsgOpenNewTab.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgOpenNewTab::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgOpenNewTab.url)
}

// optional bool bForeground = 3;
inline bool CMsgOpenNewTab::_internal_has_bforeground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgOpenNewTab::has_bforeground() const {
  return _internal_has_bforeground();
}
inline void CMsgOpenNewTab::clear_bforeground() {
  bforeground_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgOpenNewTab::_internal_bforeground() const {
  return bforeground_;
}
inline bool CMsgOpenNewTab::bforeground() const {
  // @@protoc_insertion_point(field_get:CMsgOpenNewTab.bForeground)
  return _internal_bforeground();
}
inline void CMsgOpenNewTab::_internal_set_bforeground(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bforeground_ = value;
}
inline void CMsgOpenNewTab::set_bforeground(bool value) {
  _internal_set_bforeground(value);
  // @@protoc_insertion_point(field_set:CMsgOpenNewTab.bForeground)
}

// -------------------------------------------------------------------

// CMsgPopupHTMLWindow

// optional uint32 browser_handle = 1;
inline bool CMsgPopupHTMLWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPopupHTMLWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPopupHTMLWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPopupHTMLWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPopupHTMLWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgPopupHTMLWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.browser_handle)
}

// optional string url = 2;
inline bool CMsgPopupHTMLWindow::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_url() const {
  return _internal_has_url();
}
inline void CMsgPopupHTMLWindow::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPopupHTMLWindow::url() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPopupHTMLWindow::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.url)
}
inline std::string* CMsgPopupHTMLWindow::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgPopupHTMLWindow.url)
  return _s;
}
inline const std::string& CMsgPopupHTMLWindow::_internal_url() const {
  return url_.Get();
}
inline void CMsgPopupHTMLWindow::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPopupHTMLWindow::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPopupHTMLWindow::release_url() {
  // @@protoc_insertion_point(field_release:CMsgPopupHTMLWindow.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPopupHTMLWindow::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPopupHTMLWindow.url)
}

// optional int32 x = 3 [default = -2147483648];
inline bool CMsgPopupHTMLWindow::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_x() const {
  return _internal_has_x();
}
inline void CMsgPopupHTMLWindow::clear_x() {
  x_ = -2147483647 - 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgPopupHTMLWindow::_internal_x() const {
  return x_;
}
inline int32_t CMsgPopupHTMLWindow::x() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.x)
  return _internal_x();
}
inline void CMsgPopupHTMLWindow::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  x_ = value;
}
inline void CMsgPopupHTMLWindow::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.x)
}

// optional int32 y = 4 [default = -2147483648];
inline bool CMsgPopupHTMLWindow::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_y() const {
  return _internal_has_y();
}
inline void CMsgPopupHTMLWindow::clear_y() {
  y_ = -2147483647 - 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgPopupHTMLWindow::_internal_y() const {
  return y_;
}
inline int32_t CMsgPopupHTMLWindow::y() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.y)
  return _internal_y();
}
inline void CMsgPopupHTMLWindow::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  y_ = value;
}
inline void CMsgPopupHTMLWindow::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.y)
}

// optional uint32 wide = 5;
inline bool CMsgPopupHTMLWindow::_internal_has_wide() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_wide() const {
  return _internal_has_wide();
}
inline void CMsgPopupHTMLWindow::clear_wide() {
  wide_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgPopupHTMLWindow::_internal_wide() const {
  return wide_;
}
inline uint32_t CMsgPopupHTMLWindow::wide() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.wide)
  return _internal_wide();
}
inline void CMsgPopupHTMLWindow::_internal_set_wide(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  wide_ = value;
}
inline void CMsgPopupHTMLWindow::set_wide(uint32_t value) {
  _internal_set_wide(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.wide)
}

// optional uint32 tall = 6;
inline bool CMsgPopupHTMLWindow::_internal_has_tall() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_tall() const {
  return _internal_has_tall();
}
inline void CMsgPopupHTMLWindow::clear_tall() {
  tall_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgPopupHTMLWindow::_internal_tall() const {
  return tall_;
}
inline uint32_t CMsgPopupHTMLWindow::tall() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.tall)
  return _internal_tall();
}
inline void CMsgPopupHTMLWindow::_internal_set_tall(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tall_ = value;
}
inline void CMsgPopupHTMLWindow::set_tall(uint32_t value) {
  _internal_set_tall(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.tall)
}

// optional uint32 popup_index = 7;
inline bool CMsgPopupHTMLWindow::_internal_has_popup_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_popup_index() const {
  return _internal_has_popup_index();
}
inline void CMsgPopupHTMLWindow::clear_popup_index() {
  popup_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgPopupHTMLWindow::_internal_popup_index() const {
  return popup_index_;
}
inline uint32_t CMsgPopupHTMLWindow::popup_index() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.popup_index)
  return _internal_popup_index();
}
inline void CMsgPopupHTMLWindow::_internal_set_popup_index(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  popup_index_ = value;
}
inline void CMsgPopupHTMLWindow::set_popup_index(uint32_t value) {
  _internal_set_popup_index(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.popup_index)
}

// optional bool trusted_creator = 8;
inline bool CMsgPopupHTMLWindow::_internal_has_trusted_creator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_trusted_creator() const {
  return _internal_has_trusted_creator();
}
inline void CMsgPopupHTMLWindow::clear_trusted_creator() {
  trusted_creator_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgPopupHTMLWindow::_internal_trusted_creator() const {
  return trusted_creator_;
}
inline bool CMsgPopupHTMLWindow::trusted_creator() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.trusted_creator)
  return _internal_trusted_creator();
}
inline void CMsgPopupHTMLWindow::_internal_set_trusted_creator(bool value) {
  _has_bits_[0] |= 0x00000040u;
  trusted_creator_ = value;
}
inline void CMsgPopupHTMLWindow::set_trusted_creator(bool value) {
  _internal_set_trusted_creator(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.trusted_creator)
}

// optional string name = 9;
inline bool CMsgPopupHTMLWindow::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_name() const {
  return _internal_has_name();
}
inline void CMsgPopupHTMLWindow::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPopupHTMLWindow::name() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPopupHTMLWindow::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.name)
}
inline std::string* CMsgPopupHTMLWindow::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgPopupHTMLWindow.name)
  return _s;
}
inline const std::string& CMsgPopupHTMLWindow::_internal_name() const {
  return name_.Get();
}
inline void CMsgPopupHTMLWindow::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPopupHTMLWindow::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPopupHTMLWindow::release_name() {
  // @@protoc_insertion_point(field_release:CMsgPopupHTMLWindow.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPopupHTMLWindow::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPopupHTMLWindow.name)
}

// optional uint64 hwnd = 10;
inline bool CMsgPopupHTMLWindow::_internal_has_hwnd() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_hwnd() const {
  return _internal_has_hwnd();
}
inline void CMsgPopupHTMLWindow::clear_hwnd() {
  hwnd_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgPopupHTMLWindow::_internal_hwnd() const {
  return hwnd_;
}
inline uint64_t CMsgPopupHTMLWindow::hwnd() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.hwnd)
  return _internal_hwnd();
}
inline void CMsgPopupHTMLWindow::_internal_set_hwnd(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  hwnd_ = value;
}
inline void CMsgPopupHTMLWindow::set_hwnd(uint64_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.hwnd)
}

// optional uint32 parent_popup_index = 11;
inline bool CMsgPopupHTMLWindow::_internal_has_parent_popup_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindow::has_parent_popup_index() const {
  return _internal_has_parent_popup_index();
}
inline void CMsgPopupHTMLWindow::clear_parent_popup_index() {
  parent_popup_index_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgPopupHTMLWindow::_internal_parent_popup_index() const {
  return parent_popup_index_;
}
inline uint32_t CMsgPopupHTMLWindow::parent_popup_index() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindow.parent_popup_index)
  return _internal_parent_popup_index();
}
inline void CMsgPopupHTMLWindow::_internal_set_parent_popup_index(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  parent_popup_index_ = value;
}
inline void CMsgPopupHTMLWindow::set_parent_popup_index(uint32_t value) {
  _internal_set_parent_popup_index(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindow.parent_popup_index)
}

// -------------------------------------------------------------------

// CMsgPopupHTMLWindowResponse

// optional uint32 browser_handle = 1;
inline bool CMsgPopupHTMLWindowResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindowResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPopupHTMLWindowResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPopupHTMLWindowResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPopupHTMLWindowResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindowResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPopupHTMLWindowResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgPopupHTMLWindowResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindowResponse.browser_handle)
}

// optional bool bAllow = 2;
inline bool CMsgPopupHTMLWindowResponse::_internal_has_ballow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPopupHTMLWindowResponse::has_ballow() const {
  return _internal_has_ballow();
}
inline void CMsgPopupHTMLWindowResponse::clear_ballow() {
  ballow_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgPopupHTMLWindowResponse::_internal_ballow() const {
  return ballow_;
}
inline bool CMsgPopupHTMLWindowResponse::ballow() const {
  // @@protoc_insertion_point(field_get:CMsgPopupHTMLWindowResponse.bAllow)
  return _internal_ballow();
}
inline void CMsgPopupHTMLWindowResponse::_internal_set_ballow(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ballow_ = value;
}
inline void CMsgPopupHTMLWindowResponse::set_ballow(bool value) {
  _internal_set_ballow(value);
  // @@protoc_insertion_point(field_set:CMsgPopupHTMLWindowResponse.bAllow)
}

// -------------------------------------------------------------------

// CMsgSetHTMLTitle

// optional uint32 browser_handle = 1;
inline bool CMsgSetHTMLTitle::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetHTMLTitle::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetHTMLTitle::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetHTMLTitle::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetHTMLTitle::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetHTMLTitle.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetHTMLTitle::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgSetHTMLTitle::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetHTMLTitle.browser_handle)
}

// optional string title = 2;
inline bool CMsgSetHTMLTitle::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetHTMLTitle::has_title() const {
  return _internal_has_title();
}
inline void CMsgSetHTMLTitle::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetHTMLTitle::title() const {
  // @@protoc_insertion_point(field_get:CMsgSetHTMLTitle.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetHTMLTitle::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetHTMLTitle.title)
}
inline std::string* CMsgSetHTMLTitle::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CMsgSetHTMLTitle.title)
  return _s;
}
inline const std::string& CMsgSetHTMLTitle::_internal_title() const {
  return title_.Get();
}
inline void CMsgSetHTMLTitle::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetHTMLTitle::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetHTMLTitle::release_title() {
  // @@protoc_insertion_point(field_release:CMsgSetHTMLTitle.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetHTMLTitle::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetHTMLTitle.title)
}

// -------------------------------------------------------------------

// CMsgLoadingResource

// optional uint32 browser_handle = 1;
inline bool CMsgLoadingResource::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLoadingResource::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLoadingResource::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLoadingResource::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLoadingResource::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLoadingResource.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLoadingResource::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgLoadingResource::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLoadingResource.browser_handle)
}

// optional string url = 2;
inline bool CMsgLoadingResource::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLoadingResource::has_url() const {
  return _internal_has_url();
}
inline void CMsgLoadingResource::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLoadingResource::url() const {
  // @@protoc_insertion_point(field_get:CMsgLoadingResource.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadingResource::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadingResource.url)
}
inline std::string* CMsgLoadingResource::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgLoadingResource.url)
  return _s;
}
inline const std::string& CMsgLoadingResource::_internal_url() const {
  return url_.Get();
}
inline void CMsgLoadingResource::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadingResource::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadingResource::release_url() {
  // @@protoc_insertion_point(field_release:CMsgLoadingResource.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadingResource::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadingResource.url)
}

// -------------------------------------------------------------------

// CMsgStatusText

// optional uint32 browser_handle = 1;
inline bool CMsgStatusText::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStatusText::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStatusText::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgStatusText::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStatusText::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStatusText.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStatusText::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgStatusText::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStatusText.browser_handle)
}

// optional string text = 2;
inline bool CMsgStatusText::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStatusText::has_text() const {
  return _internal_has_text();
}
inline void CMsgStatusText::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStatusText::text() const {
  // @@protoc_insertion_point(field_get:CMsgStatusText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStatusText::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStatusText.text)
}
inline std::string* CMsgStatusText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgStatusText.text)
  return _s;
}
inline const std::string& CMsgStatusText::_internal_text() const {
  return text_.Get();
}
inline void CMsgStatusText::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStatusText::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStatusText::release_text() {
  // @@protoc_insertion_point(field_release:CMsgStatusText.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStatusText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStatusText.text)
}

// -------------------------------------------------------------------

// CMsgSetCursor

// optional uint32 browser_handle = 1;
inline bool CMsgSetCursor::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetCursor::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetCursor::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetCursor::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetCursor::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgSetCursor::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.browser_handle)
}

// optional uint32 cursor = 2;
inline bool CMsgSetCursor::_internal_has_cursor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_cursor() const {
  return _internal_has_cursor();
}
inline void CMsgSetCursor::clear_cursor() {
  cursor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSetCursor::_internal_cursor() const {
  return cursor_;
}
inline uint32_t CMsgSetCursor::cursor() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.cursor)
  return _internal_cursor();
}
inline void CMsgSetCursor::_internal_set_cursor(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  cursor_ = value;
}
inline void CMsgSetCursor::set_cursor(uint32_t value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.cursor)
}

// optional bytes custom_data = 3;
inline bool CMsgSetCursor::_internal_has_custom_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_custom_data() const {
  return _internal_has_custom_data();
}
inline void CMsgSetCursor::clear_custom_data() {
  custom_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetCursor::custom_data() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.custom_data)
  return _internal_custom_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetCursor::set_custom_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 custom_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetCursor.custom_data)
}
inline std::string* CMsgSetCursor::mutable_custom_data() {
  std::string* _s = _internal_mutable_custom_data();
  // @@protoc_insertion_point(field_mutable:CMsgSetCursor.custom_data)
  return _s;
}
inline const std::string& CMsgSetCursor::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void CMsgSetCursor::_internal_set_custom_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetCursor::_internal_mutable_custom_data() {
  _has_bits_[0] |= 0x00000001u;
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetCursor::release_custom_data() {
  // @@protoc_insertion_point(field_release:CMsgSetCursor.custom_data)
  if (!_internal_has_custom_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = custom_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    custom_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetCursor::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    custom_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetCursor.custom_data)
}

// optional uint32 wide = 4;
inline bool CMsgSetCursor::_internal_has_wide() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_wide() const {
  return _internal_has_wide();
}
inline void CMsgSetCursor::clear_wide() {
  wide_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSetCursor::_internal_wide() const {
  return wide_;
}
inline uint32_t CMsgSetCursor::wide() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.wide)
  return _internal_wide();
}
inline void CMsgSetCursor::_internal_set_wide(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  wide_ = value;
}
inline void CMsgSetCursor::set_wide(uint32_t value) {
  _internal_set_wide(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.wide)
}

// optional uint32 tall = 5;
inline bool CMsgSetCursor::_internal_has_tall() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_tall() const {
  return _internal_has_tall();
}
inline void CMsgSetCursor::clear_tall() {
  tall_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSetCursor::_internal_tall() const {
  return tall_;
}
inline uint32_t CMsgSetCursor::tall() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.tall)
  return _internal_tall();
}
inline void CMsgSetCursor::_internal_set_tall(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tall_ = value;
}
inline void CMsgSetCursor::set_tall(uint32_t value) {
  _internal_set_tall(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.tall)
}

// optional uint32 xhotspot = 6;
inline bool CMsgSetCursor::_internal_has_xhotspot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_xhotspot() const {
  return _internal_has_xhotspot();
}
inline void CMsgSetCursor::clear_xhotspot() {
  xhotspot_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSetCursor::_internal_xhotspot() const {
  return xhotspot_;
}
inline uint32_t CMsgSetCursor::xhotspot() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.xhotspot)
  return _internal_xhotspot();
}
inline void CMsgSetCursor::_internal_set_xhotspot(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  xhotspot_ = value;
}
inline void CMsgSetCursor::set_xhotspot(uint32_t value) {
  _internal_set_xhotspot(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.xhotspot)
}

// optional uint32 yhotspot = 7;
inline bool CMsgSetCursor::_internal_has_yhotspot() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSetCursor::has_yhotspot() const {
  return _internal_has_yhotspot();
}
inline void CMsgSetCursor::clear_yhotspot() {
  yhotspot_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSetCursor::_internal_yhotspot() const {
  return yhotspot_;
}
inline uint32_t CMsgSetCursor::yhotspot() const {
  // @@protoc_insertion_point(field_get:CMsgSetCursor.yhotspot)
  return _internal_yhotspot();
}
inline void CMsgSetCursor::_internal_set_yhotspot(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  yhotspot_ = value;
}
inline void CMsgSetCursor::set_yhotspot(uint32_t value) {
  _internal_set_yhotspot(value);
  // @@protoc_insertion_point(field_set:CMsgSetCursor.yhotspot)
}

// -------------------------------------------------------------------

// CMsgFileLoadDialog_Filter

// optional string name = 1;
inline bool CMsgFileLoadDialog_Filter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog_Filter::has_name() const {
  return _internal_has_name();
}
inline void CMsgFileLoadDialog_Filter::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgFileLoadDialog_Filter::name() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.Filter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFileLoadDialog_Filter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.Filter.name)
}
inline std::string* CMsgFileLoadDialog_Filter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.Filter.name)
  return _s;
}
inline const std::string& CMsgFileLoadDialog_Filter::_internal_name() const {
  return name_.Get();
}
inline void CMsgFileLoadDialog_Filter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog_Filter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog_Filter::release_name() {
  // @@protoc_insertion_point(field_release:CMsgFileLoadDialog.Filter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFileLoadDialog_Filter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFileLoadDialog.Filter.name)
}

// repeated string patterns = 2;
inline int CMsgFileLoadDialog_Filter::_internal_patterns_size() const {
  return patterns_.size();
}
inline int CMsgFileLoadDialog_Filter::patterns_size() const {
  return _internal_patterns_size();
}
inline void CMsgFileLoadDialog_Filter::clear_patterns() {
  patterns_.Clear();
}
inline std::string* CMsgFileLoadDialog_Filter::add_patterns() {
  std::string* _s = _internal_add_patterns();
  // @@protoc_insertion_point(field_add_mutable:CMsgFileLoadDialog.Filter.patterns)
  return _s;
}
inline const std::string& CMsgFileLoadDialog_Filter::_internal_patterns(int index) const {
  return patterns_.Get(index);
}
inline const std::string& CMsgFileLoadDialog_Filter::patterns(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.Filter.patterns)
  return _internal_patterns(index);
}
inline std::string* CMsgFileLoadDialog_Filter::mutable_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.Filter.patterns)
  return patterns_.Mutable(index);
}
inline void CMsgFileLoadDialog_Filter::set_patterns(int index, const std::string& value) {
  patterns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::set_patterns(int index, std::string&& value) {
  patterns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::set_patterns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  patterns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::set_patterns(int index, const char* value, size_t size) {
  patterns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgFileLoadDialog.Filter.patterns)
}
inline std::string* CMsgFileLoadDialog_Filter::_internal_add_patterns() {
  return patterns_.Add();
}
inline void CMsgFileLoadDialog_Filter::add_patterns(const std::string& value) {
  patterns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::add_patterns(std::string&& value) {
  patterns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::add_patterns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  patterns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgFileLoadDialog.Filter.patterns)
}
inline void CMsgFileLoadDialog_Filter::add_patterns(const char* value, size_t size) {
  patterns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgFileLoadDialog.Filter.patterns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgFileLoadDialog_Filter::patterns() const {
  // @@protoc_insertion_point(field_list:CMsgFileLoadDialog.Filter.patterns)
  return patterns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgFileLoadDialog_Filter::mutable_patterns() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFileLoadDialog.Filter.patterns)
  return &patterns_;
}

// optional bool is_default = 3;
inline bool CMsgFileLoadDialog_Filter::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog_Filter::has_is_default() const {
  return _internal_has_is_default();
}
inline void CMsgFileLoadDialog_Filter::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgFileLoadDialog_Filter::_internal_is_default() const {
  return is_default_;
}
inline bool CMsgFileLoadDialog_Filter::is_default() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.Filter.is_default)
  return _internal_is_default();
}
inline void CMsgFileLoadDialog_Filter::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_default_ = value;
}
inline void CMsgFileLoadDialog_Filter::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.Filter.is_default)
}

// -------------------------------------------------------------------

// CMsgFileLoadDialog

// optional uint32 browser_handle = 1;
inline bool CMsgFileLoadDialog::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFileLoadDialog::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgFileLoadDialog::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFileLoadDialog::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFileLoadDialog::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgFileLoadDialog::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgFileLoadDialog::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgFileLoadDialog::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgFileLoadDialog::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgFileLoadDialog::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgFileLoadDialog::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  owning_browser_handle_ = value;
}
inline void CMsgFileLoadDialog::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.owning_browser_handle)
}

// optional string title = 3;
inline bool CMsgFileLoadDialog::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_title() const {
  return _internal_has_title();
}
inline void CMsgFileLoadDialog::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgFileLoadDialog::title() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFileLoadDialog::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.title)
}
inline std::string* CMsgFileLoadDialog::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.title)
  return _s;
}
inline const std::string& CMsgFileLoadDialog::_internal_title() const {
  return title_.Get();
}
inline void CMsgFileLoadDialog::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog::release_title() {
  // @@protoc_insertion_point(field_release:CMsgFileLoadDialog.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFileLoadDialog::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFileLoadDialog.title)
}

// optional string initialFile = 4;
inline bool CMsgFileLoadDialog::_internal_has_initialfile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_initialfile() const {
  return _internal_has_initialfile();
}
inline void CMsgFileLoadDialog::clear_initialfile() {
  initialfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgFileLoadDialog::initialfile() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.initialFile)
  return _internal_initialfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFileLoadDialog::set_initialfile(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 initialfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.initialFile)
}
inline std::string* CMsgFileLoadDialog::mutable_initialfile() {
  std::string* _s = _internal_mutable_initialfile();
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.initialFile)
  return _s;
}
inline const std::string& CMsgFileLoadDialog::_internal_initialfile() const {
  return initialfile_.Get();
}
inline void CMsgFileLoadDialog::_internal_set_initialfile(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  initialfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog::_internal_mutable_initialfile() {
  _has_bits_[0] |= 0x00000002u;
  return initialfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFileLoadDialog::release_initialfile() {
  // @@protoc_insertion_point(field_release:CMsgFileLoadDialog.initialFile)
  if (!_internal_has_initialfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = initialfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initialfile_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initialfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFileLoadDialog::set_allocated_initialfile(std::string* initialfile) {
  if (initialfile != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  initialfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initialfile,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initialfile_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initialfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFileLoadDialog.initialFile)
}

// repeated string accept_types = 5;
inline int CMsgFileLoadDialog::_internal_accept_types_size() const {
  return accept_types_.size();
}
inline int CMsgFileLoadDialog::accept_types_size() const {
  return _internal_accept_types_size();
}
inline void CMsgFileLoadDialog::clear_accept_types() {
  accept_types_.Clear();
}
inline std::string* CMsgFileLoadDialog::add_accept_types() {
  std::string* _s = _internal_add_accept_types();
  // @@protoc_insertion_point(field_add_mutable:CMsgFileLoadDialog.accept_types)
  return _s;
}
inline const std::string& CMsgFileLoadDialog::_internal_accept_types(int index) const {
  return accept_types_.Get(index);
}
inline const std::string& CMsgFileLoadDialog::accept_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.accept_types)
  return _internal_accept_types(index);
}
inline std::string* CMsgFileLoadDialog::mutable_accept_types(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.accept_types)
  return accept_types_.Mutable(index);
}
inline void CMsgFileLoadDialog::set_accept_types(int index, const std::string& value) {
  accept_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::set_accept_types(int index, std::string&& value) {
  accept_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::set_accept_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accept_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::set_accept_types(int index, const char* value, size_t size) {
  accept_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgFileLoadDialog.accept_types)
}
inline std::string* CMsgFileLoadDialog::_internal_add_accept_types() {
  return accept_types_.Add();
}
inline void CMsgFileLoadDialog::add_accept_types(const std::string& value) {
  accept_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::add_accept_types(std::string&& value) {
  accept_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::add_accept_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accept_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgFileLoadDialog.accept_types)
}
inline void CMsgFileLoadDialog::add_accept_types(const char* value, size_t size) {
  accept_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgFileLoadDialog.accept_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgFileLoadDialog::accept_types() const {
  // @@protoc_insertion_point(field_list:CMsgFileLoadDialog.accept_types)
  return accept_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgFileLoadDialog::mutable_accept_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFileLoadDialog.accept_types)
  return &accept_types_;
}

// optional bool is_save = 6;
inline bool CMsgFileLoadDialog::_internal_has_is_save() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_is_save() const {
  return _internal_has_is_save();
}
inline void CMsgFileLoadDialog::clear_is_save() {
  is_save_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgFileLoadDialog::_internal_is_save() const {
  return is_save_;
}
inline bool CMsgFileLoadDialog::is_save() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.is_save)
  return _internal_is_save();
}
inline void CMsgFileLoadDialog::_internal_set_is_save(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_save_ = value;
}
inline void CMsgFileLoadDialog::set_is_save(bool value) {
  _internal_set_is_save(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.is_save)
}

// optional bool choose_directory = 7;
inline bool CMsgFileLoadDialog::_internal_has_choose_directory() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgFileLoadDialog::has_choose_directory() const {
  return _internal_has_choose_directory();
}
inline void CMsgFileLoadDialog::clear_choose_directory() {
  choose_directory_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgFileLoadDialog::_internal_choose_directory() const {
  return choose_directory_;
}
inline bool CMsgFileLoadDialog::choose_directory() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.choose_directory)
  return _internal_choose_directory();
}
inline void CMsgFileLoadDialog::_internal_set_choose_directory(bool value) {
  _has_bits_[0] |= 0x00000020u;
  choose_directory_ = value;
}
inline void CMsgFileLoadDialog::set_choose_directory(bool value) {
  _internal_set_choose_directory(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialog.choose_directory)
}

// repeated .CMsgFileLoadDialog.Filter filters = 8;
inline int CMsgFileLoadDialog::_internal_filters_size() const {
  return filters_.size();
}
inline int CMsgFileLoadDialog::filters_size() const {
  return _internal_filters_size();
}
inline void CMsgFileLoadDialog::clear_filters() {
  filters_.Clear();
}
inline ::CMsgFileLoadDialog_Filter* CMsgFileLoadDialog::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialog.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFileLoadDialog_Filter >*
CMsgFileLoadDialog::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFileLoadDialog.filters)
  return &filters_;
}
inline const ::CMsgFileLoadDialog_Filter& CMsgFileLoadDialog::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::CMsgFileLoadDialog_Filter& CMsgFileLoadDialog::filters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialog.filters)
  return _internal_filters(index);
}
inline ::CMsgFileLoadDialog_Filter* CMsgFileLoadDialog::_internal_add_filters() {
  return filters_.Add();
}
inline ::CMsgFileLoadDialog_Filter* CMsgFileLoadDialog::add_filters() {
  ::CMsgFileLoadDialog_Filter* _add = _internal_add_filters();
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialog.filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgFileLoadDialog_Filter >&
CMsgFileLoadDialog::filters() const {
  // @@protoc_insertion_point(field_list:CMsgFileLoadDialog.filters)
  return filters_;
}

// -------------------------------------------------------------------

// CMsgFileLoadDialogResponse

// optional uint32 browser_handle = 1;
inline bool CMsgFileLoadDialogResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFileLoadDialogResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFileLoadDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFileLoadDialogResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFileLoadDialogResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialogResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFileLoadDialogResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgFileLoadDialogResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialogResponse.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgFileLoadDialogResponse::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFileLoadDialogResponse::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgFileLoadDialogResponse::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgFileLoadDialogResponse::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgFileLoadDialogResponse::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialogResponse.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgFileLoadDialogResponse::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  owning_browser_handle_ = value;
}
inline void CMsgFileLoadDialogResponse::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialogResponse.owning_browser_handle)
}

// optional bool bsuccess = 3;
inline bool CMsgFileLoadDialogResponse::_internal_has_bsuccess() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFileLoadDialogResponse::has_bsuccess() const {
  return _internal_has_bsuccess();
}
inline void CMsgFileLoadDialogResponse::clear_bsuccess() {
  bsuccess_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgFileLoadDialogResponse::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool CMsgFileLoadDialogResponse::bsuccess() const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialogResponse.bsuccess)
  return _internal_bsuccess();
}
inline void CMsgFileLoadDialogResponse::_internal_set_bsuccess(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bsuccess_ = value;
}
inline void CMsgFileLoadDialogResponse::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialogResponse.bsuccess)
}

// repeated string files = 4;
inline int CMsgFileLoadDialogResponse::_internal_files_size() const {
  return files_.size();
}
inline int CMsgFileLoadDialogResponse::files_size() const {
  return _internal_files_size();
}
inline void CMsgFileLoadDialogResponse::clear_files() {
  files_.Clear();
}
inline std::string* CMsgFileLoadDialogResponse::add_files() {
  std::string* _s = _internal_add_files();
  // @@protoc_insertion_point(field_add_mutable:CMsgFileLoadDialogResponse.files)
  return _s;
}
inline const std::string& CMsgFileLoadDialogResponse::_internal_files(int index) const {
  return files_.Get(index);
}
inline const std::string& CMsgFileLoadDialogResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFileLoadDialogResponse.files)
  return _internal_files(index);
}
inline std::string* CMsgFileLoadDialogResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFileLoadDialogResponse.files)
  return files_.Mutable(index);
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const std::string& value) {
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::set_files(int index, std::string&& value) {
  files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgFileLoadDialogResponse.files)
}
inline std::string* CMsgFileLoadDialogResponse::_internal_add_files() {
  return files_.Add();
}
inline void CMsgFileLoadDialogResponse::add_files(const std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::add_files(std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgFileLoadDialogResponse.files)
}
inline void CMsgFileLoadDialogResponse::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgFileLoadDialogResponse.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgFileLoadDialogResponse::files() const {
  // @@protoc_insertion_point(field_list:CMsgFileLoadDialogResponse.files)
  return files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgFileLoadDialogResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFileLoadDialogResponse.files)
  return &files_;
}

// -------------------------------------------------------------------

// CMsgShowToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgShowToolTip::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowToolTip::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgShowToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgShowToolTip::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgShowToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgShowToolTip.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgShowToolTip::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgShowToolTip::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgShowToolTip.browser_handle)
}

// optional string text = 2;
inline bool CMsgShowToolTip::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowToolTip::has_text() const {
  return _internal_has_text();
}
inline void CMsgShowToolTip::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShowToolTip::text() const {
  // @@protoc_insertion_point(field_get:CMsgShowToolTip.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowToolTip::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowToolTip.text)
}
inline std::string* CMsgShowToolTip::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgShowToolTip.text)
  return _s;
}
inline const std::string& CMsgShowToolTip::_internal_text() const {
  return text_.Get();
}
inline void CMsgShowToolTip::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowToolTip::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowToolTip::release_text() {
  // @@protoc_insertion_point(field_release:CMsgShowToolTip.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowToolTip::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowToolTip.text)
}

// -------------------------------------------------------------------

// CMsgUpdateToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgUpdateToolTip::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgUpdateToolTip::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgUpdateToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgUpdateToolTip::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgUpdateToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgUpdateToolTip.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgUpdateToolTip::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgUpdateToolTip::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgUpdateToolTip.browser_handle)
}

// optional string text = 2;
inline bool CMsgUpdateToolTip::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUpdateToolTip::has_text() const {
  return _internal_has_text();
}
inline void CMsgUpdateToolTip::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgUpdateToolTip::text() const {
  // @@protoc_insertion_point(field_get:CMsgUpdateToolTip.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgUpdateToolTip::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgUpdateToolTip.text)
}
inline std::string* CMsgUpdateToolTip::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgUpdateToolTip.text)
  return _s;
}
inline const std::string& CMsgUpdateToolTip::_internal_text() const {
  return text_.Get();
}
inline void CMsgUpdateToolTip::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgUpdateToolTip::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgUpdateToolTip::release_text() {
  // @@protoc_insertion_point(field_release:CMsgUpdateToolTip.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgUpdateToolTip::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgUpdateToolTip.text)
}

// -------------------------------------------------------------------

// CMsgHideToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgHideToolTip::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHideToolTip::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHideToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHideToolTip::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHideToolTip::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHideToolTip.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHideToolTip::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHideToolTip::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHideToolTip.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSearchResults

// optional uint32 browser_handle = 1;
inline bool CMsgSearchResults::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSearchResults::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSearchResults::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSearchResults::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSearchResults::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSearchResults.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSearchResults::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSearchResults::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSearchResults.browser_handle)
}

// optional int32 activeMatch = 2;
inline bool CMsgSearchResults::_internal_has_activematch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSearchResults::has_activematch() const {
  return _internal_has_activematch();
}
inline void CMsgSearchResults::clear_activematch() {
  activematch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSearchResults::_internal_activematch() const {
  return activematch_;
}
inline int32_t CMsgSearchResults::activematch() const {
  // @@protoc_insertion_point(field_get:CMsgSearchResults.activeMatch)
  return _internal_activematch();
}
inline void CMsgSearchResults::_internal_set_activematch(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  activematch_ = value;
}
inline void CMsgSearchResults::set_activematch(int32_t value) {
  _internal_set_activematch(value);
  // @@protoc_insertion_point(field_set:CMsgSearchResults.activeMatch)
}

// optional int32 results = 3;
inline bool CMsgSearchResults::_internal_has_results() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSearchResults::has_results() const {
  return _internal_has_results();
}
inline void CMsgSearchResults::clear_results() {
  results_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSearchResults::_internal_results() const {
  return results_;
}
inline int32_t CMsgSearchResults::results() const {
  // @@protoc_insertion_point(field_get:CMsgSearchResults.results)
  return _internal_results();
}
inline void CMsgSearchResults::_internal_set_results(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  results_ = value;
}
inline void CMsgSearchResults::set_results(int32_t value) {
  _internal_set_results(value);
  // @@protoc_insertion_point(field_set:CMsgSearchResults.results)
}

// -------------------------------------------------------------------

// CMsgClose

// optional uint32 browser_handle = 1;
inline bool CMsgClose::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClose::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgClose::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClose::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgClose::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgClose.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgClose::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgClose::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgClose.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetSharedPaintBuffers

// optional uint32 browser_handle = 1;
inline bool CMsgSetSharedPaintBuffers::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetSharedPaintBuffers::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetSharedPaintBuffers::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetSharedPaintBuffers::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.browser_handle)
}

// optional uint32 wide = 2;
inline bool CMsgSetSharedPaintBuffers::_internal_has_wide() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_wide() const {
  return _internal_has_wide();
}
inline void CMsgSetSharedPaintBuffers::clear_wide() {
  wide_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetSharedPaintBuffers::_internal_wide() const {
  return wide_;
}
inline uint32_t CMsgSetSharedPaintBuffers::wide() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.wide)
  return _internal_wide();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_wide(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  wide_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_wide(uint32_t value) {
  _internal_set_wide(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.wide)
}

// optional uint32 tall = 3;
inline bool CMsgSetSharedPaintBuffers::_internal_has_tall() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_tall() const {
  return _internal_has_tall();
}
inline void CMsgSetSharedPaintBuffers::clear_tall() {
  tall_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSetSharedPaintBuffers::_internal_tall() const {
  return tall_;
}
inline uint32_t CMsgSetSharedPaintBuffers::tall() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.tall)
  return _internal_tall();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_tall(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  tall_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_tall(uint32_t value) {
  _internal_set_tall(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.tall)
}

// optional uint64 source_pid = 4;
inline bool CMsgSetSharedPaintBuffers::_internal_has_source_pid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_source_pid() const {
  return _internal_has_source_pid();
}
inline void CMsgSetSharedPaintBuffers::clear_source_pid() {
  source_pid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSetSharedPaintBuffers::_internal_source_pid() const {
  return source_pid_;
}
inline uint64_t CMsgSetSharedPaintBuffers::source_pid() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.source_pid)
  return _internal_source_pid();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_source_pid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  source_pid_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_source_pid(uint64_t value) {
  _internal_set_source_pid(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.source_pid)
}

// optional uint64 source_handle = 5;
inline bool CMsgSetSharedPaintBuffers::_internal_has_source_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_source_handle() const {
  return _internal_has_source_handle();
}
inline void CMsgSetSharedPaintBuffers::clear_source_handle() {
  source_handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgSetSharedPaintBuffers::_internal_source_handle() const {
  return source_handle_;
}
inline uint64_t CMsgSetSharedPaintBuffers::source_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.source_handle)
  return _internal_source_handle();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_source_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  source_handle_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_source_handle(uint64_t value) {
  _internal_set_source_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.source_handle)
}

// optional uint64 handle = 6;
inline bool CMsgSetSharedPaintBuffers::_internal_has_handle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSetSharedPaintBuffers::has_handle() const {
  return _internal_has_handle();
}
inline void CMsgSetSharedPaintBuffers::clear_handle() {
  handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgSetSharedPaintBuffers::_internal_handle() const {
  return handle_;
}
inline uint64_t CMsgSetSharedPaintBuffers::handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetSharedPaintBuffers.handle)
  return _internal_handle();
}
inline void CMsgSetSharedPaintBuffers::_internal_set_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  handle_ = value;
}
inline void CMsgSetSharedPaintBuffers::set_handle(uint64_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetSharedPaintBuffers.handle)
}

// -------------------------------------------------------------------

// CMsgAckSharedPaintBuffers

// optional uint32 browser_handle = 1;
inline bool CMsgAckSharedPaintBuffers::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAckSharedPaintBuffers::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgAckSharedPaintBuffers::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAckSharedPaintBuffers::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgAckSharedPaintBuffers::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgAckSharedPaintBuffers.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgAckSharedPaintBuffers::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgAckSharedPaintBuffers::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgAckSharedPaintBuffers.browser_handle)
}

// -------------------------------------------------------------------

// CMsgNeedsPaint

// optional uint32 browser_handle = 1;
inline bool CMsgNeedsPaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgNeedsPaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNeedsPaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgNeedsPaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgNeedsPaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgNeedsPaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.browser_handle)
}

// optional uint32 scrollx = 10;
inline bool CMsgNeedsPaint::_internal_has_scrollx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_scrollx() const {
  return _internal_has_scrollx();
}
inline void CMsgNeedsPaint::clear_scrollx() {
  scrollx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgNeedsPaint::_internal_scrollx() const {
  return scrollx_;
}
inline uint32_t CMsgNeedsPaint::scrollx() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.scrollx)
  return _internal_scrollx();
}
inline void CMsgNeedsPaint::_internal_set_scrollx(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  scrollx_ = value;
}
inline void CMsgNeedsPaint::set_scrollx(uint32_t value) {
  _internal_set_scrollx(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.scrollx)
}

// optional uint32 scrolly = 11;
inline bool CMsgNeedsPaint::_internal_has_scrolly() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_scrolly() const {
  return _internal_has_scrolly();
}
inline void CMsgNeedsPaint::clear_scrolly() {
  scrolly_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNeedsPaint::_internal_scrolly() const {
  return scrolly_;
}
inline uint32_t CMsgNeedsPaint::scrolly() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.scrolly)
  return _internal_scrolly();
}
inline void CMsgNeedsPaint::_internal_set_scrolly(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  scrolly_ = value;
}
inline void CMsgNeedsPaint::set_scrolly(uint32_t value) {
  _internal_set_scrolly(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.scrolly)
}

// optional float pagescale = 12;
inline bool CMsgNeedsPaint::_internal_has_pagescale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_pagescale() const {
  return _internal_has_pagescale();
}
inline void CMsgNeedsPaint::clear_pagescale() {
  pagescale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgNeedsPaint::_internal_pagescale() const {
  return pagescale_;
}
inline float CMsgNeedsPaint::pagescale() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.pagescale)
  return _internal_pagescale();
}
inline void CMsgNeedsPaint::_internal_set_pagescale(float value) {
  _has_bits_[0] |= 0x00000008u;
  pagescale_ = value;
}
inline void CMsgNeedsPaint::set_pagescale(float value) {
  _internal_set_pagescale(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.pagescale)
}

// optional uint32 pageserial = 15;
inline bool CMsgNeedsPaint::_internal_has_pageserial() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_pageserial() const {
  return _internal_has_pageserial();
}
inline void CMsgNeedsPaint::clear_pageserial() {
  pageserial_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgNeedsPaint::_internal_pageserial() const {
  return pageserial_;
}
inline uint32_t CMsgNeedsPaint::pageserial() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.pageserial)
  return _internal_pageserial();
}
inline void CMsgNeedsPaint::_internal_set_pageserial(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  pageserial_ = value;
}
inline void CMsgNeedsPaint::set_pageserial(uint32_t value) {
  _internal_set_pageserial(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.pageserial)
}

// optional uint32 avg_frame_ms = 20;
inline bool CMsgNeedsPaint::_internal_has_avg_frame_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_avg_frame_ms() const {
  return _internal_has_avg_frame_ms();
}
inline void CMsgNeedsPaint::clear_avg_frame_ms() {
  avg_frame_ms_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgNeedsPaint::_internal_avg_frame_ms() const {
  return avg_frame_ms_;
}
inline uint32_t CMsgNeedsPaint::avg_frame_ms() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.avg_frame_ms)
  return _internal_avg_frame_ms();
}
inline void CMsgNeedsPaint::_internal_set_avg_frame_ms(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  avg_frame_ms_ = value;
}
inline void CMsgNeedsPaint::set_avg_frame_ms(uint32_t value) {
  _internal_set_avg_frame_ms(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.avg_frame_ms)
}

// optional float stddev_sum_frame_ms = 21;
inline bool CMsgNeedsPaint::_internal_has_stddev_sum_frame_ms() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_stddev_sum_frame_ms() const {
  return _internal_has_stddev_sum_frame_ms();
}
inline void CMsgNeedsPaint::clear_stddev_sum_frame_ms() {
  stddev_sum_frame_ms_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgNeedsPaint::_internal_stddev_sum_frame_ms() const {
  return stddev_sum_frame_ms_;
}
inline float CMsgNeedsPaint::stddev_sum_frame_ms() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.stddev_sum_frame_ms)
  return _internal_stddev_sum_frame_ms();
}
inline void CMsgNeedsPaint::_internal_set_stddev_sum_frame_ms(float value) {
  _has_bits_[0] |= 0x00000040u;
  stddev_sum_frame_ms_ = value;
}
inline void CMsgNeedsPaint::set_stddev_sum_frame_ms(float value) {
  _internal_set_stddev_sum_frame_ms(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.stddev_sum_frame_ms)
}

// optional uint32 long_frame_ms = 22;
inline bool CMsgNeedsPaint::_internal_has_long_frame_ms() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgNeedsPaint::has_long_frame_ms() const {
  return _internal_has_long_frame_ms();
}
inline void CMsgNeedsPaint::clear_long_frame_ms() {
  long_frame_ms_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgNeedsPaint::_internal_long_frame_ms() const {
  return long_frame_ms_;
}
inline uint32_t CMsgNeedsPaint::long_frame_ms() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsPaint.long_frame_ms)
  return _internal_long_frame_ms();
}
inline void CMsgNeedsPaint::_internal_set_long_frame_ms(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  long_frame_ms_ = value;
}
inline void CMsgNeedsPaint::set_long_frame_ms(uint32_t value) {
  _internal_set_long_frame_ms(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsPaint.long_frame_ms)
}

// -------------------------------------------------------------------

// CMsgComboNeedsPaint

// optional uint32 browser_handle = 1;
inline bool CMsgComboNeedsPaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgComboNeedsPaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgComboNeedsPaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgComboNeedsPaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgComboNeedsPaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgComboNeedsPaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.browser_handle)
}

// optional uint64 rgba = 2;
inline bool CMsgComboNeedsPaint::_internal_has_rgba() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_rgba() const {
  return _internal_has_rgba();
}
inline void CMsgComboNeedsPaint::clear_rgba() {
  rgba_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgComboNeedsPaint::_internal_rgba() const {
  return rgba_;
}
inline uint64_t CMsgComboNeedsPaint::rgba() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.rgba)
  return _internal_rgba();
}
inline void CMsgComboNeedsPaint::_internal_set_rgba(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  rgba_ = value;
}
inline void CMsgComboNeedsPaint::set_rgba(uint64_t value) {
  _internal_set_rgba(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.rgba)
}

// optional uint32 combobox_wide = 3 [default = 0];
inline bool CMsgComboNeedsPaint::_internal_has_combobox_wide() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_combobox_wide() const {
  return _internal_has_combobox_wide();
}
inline void CMsgComboNeedsPaint::clear_combobox_wide() {
  combobox_wide_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgComboNeedsPaint::_internal_combobox_wide() const {
  return combobox_wide_;
}
inline uint32_t CMsgComboNeedsPaint::combobox_wide() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.combobox_wide)
  return _internal_combobox_wide();
}
inline void CMsgComboNeedsPaint::_internal_set_combobox_wide(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  combobox_wide_ = value;
}
inline void CMsgComboNeedsPaint::set_combobox_wide(uint32_t value) {
  _internal_set_combobox_wide(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.combobox_wide)
}

// optional uint32 combobox_tall = 4 [default = 0];
inline bool CMsgComboNeedsPaint::_internal_has_combobox_tall() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_combobox_tall() const {
  return _internal_has_combobox_tall();
}
inline void CMsgComboNeedsPaint::clear_combobox_tall() {
  combobox_tall_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgComboNeedsPaint::_internal_combobox_tall() const {
  return combobox_tall_;
}
inline uint32_t CMsgComboNeedsPaint::combobox_tall() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.combobox_tall)
  return _internal_combobox_tall();
}
inline void CMsgComboNeedsPaint::_internal_set_combobox_tall(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  combobox_tall_ = value;
}
inline void CMsgComboNeedsPaint::set_combobox_tall(uint32_t value) {
  _internal_set_combobox_tall(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.combobox_tall)
}

// optional uint64 shared_memory_handle = 5 [default = 0];
inline bool CMsgComboNeedsPaint::_internal_has_shared_memory_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_shared_memory_handle() const {
  return _internal_has_shared_memory_handle();
}
inline void CMsgComboNeedsPaint::clear_shared_memory_handle() {
  shared_memory_handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgComboNeedsPaint::_internal_shared_memory_handle() const {
  return shared_memory_handle_;
}
inline uint64_t CMsgComboNeedsPaint::shared_memory_handle() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.shared_memory_handle)
  return _internal_shared_memory_handle();
}
inline void CMsgComboNeedsPaint::_internal_set_shared_memory_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  shared_memory_handle_ = value;
}
inline void CMsgComboNeedsPaint::set_shared_memory_handle(uint64_t value) {
  _internal_set_shared_memory_handle(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.shared_memory_handle)
}

// optional uint64 shared_memory_size = 7 [default = 0];
inline bool CMsgComboNeedsPaint::_internal_has_shared_memory_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgComboNeedsPaint::has_shared_memory_size() const {
  return _internal_has_shared_memory_size();
}
inline void CMsgComboNeedsPaint::clear_shared_memory_size() {
  shared_memory_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgComboNeedsPaint::_internal_shared_memory_size() const {
  return shared_memory_size_;
}
inline uint64_t CMsgComboNeedsPaint::shared_memory_size() const {
  // @@protoc_insertion_point(field_get:CMsgComboNeedsPaint.shared_memory_size)
  return _internal_shared_memory_size();
}
inline void CMsgComboNeedsPaint::_internal_set_shared_memory_size(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  shared_memory_size_ = value;
}
inline void CMsgComboNeedsPaint::set_shared_memory_size(uint64_t value) {
  _internal_set_shared_memory_size(value);
  // @@protoc_insertion_point(field_set:CMsgComboNeedsPaint.shared_memory_size)
}

// -------------------------------------------------------------------

// CMsgNeedsSharedTexturePaint

// optional uint32 browser_handle = 1;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgNeedsSharedTexturePaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.browser_handle)
}

// optional uint32 share_handle = 2;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_share_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_share_handle() const {
  return _internal_has_share_handle();
}
inline void CMsgNeedsSharedTexturePaint::clear_share_handle() {
  share_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_share_handle() const {
  return share_handle_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::share_handle() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.share_handle)
  return _internal_share_handle();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_share_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  share_handle_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_share_handle(uint32_t value) {
  _internal_set_share_handle(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.share_handle)
}

// optional uint32 width = 3;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_width() const {
  return _internal_has_width();
}
inline void CMsgNeedsSharedTexturePaint::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_width() const {
  return width_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::width() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.width)
  return _internal_width();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.width)
}

// optional uint32 height = 4;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_height() const {
  return _internal_has_height();
}
inline void CMsgNeedsSharedTexturePaint::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_height() const {
  return height_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::height() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.height)
  return _internal_height();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.height)
}

// optional uint32 scrollx = 5;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_scrollx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_scrollx() const {
  return _internal_has_scrollx();
}
inline void CMsgNeedsSharedTexturePaint::clear_scrollx() {
  scrollx_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_scrollx() const {
  return scrollx_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::scrollx() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.scrollx)
  return _internal_scrollx();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_scrollx(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  scrollx_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_scrollx(uint32_t value) {
  _internal_set_scrollx(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.scrollx)
}

// optional uint32 scrolly = 6;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_scrolly() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_scrolly() const {
  return _internal_has_scrolly();
}
inline void CMsgNeedsSharedTexturePaint::clear_scrolly() {
  scrolly_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_scrolly() const {
  return scrolly_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::scrolly() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.scrolly)
  return _internal_scrolly();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_scrolly(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  scrolly_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_scrolly(uint32_t value) {
  _internal_set_scrolly(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.scrolly)
}

// optional float pagescale = 7;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_pagescale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_pagescale() const {
  return _internal_has_pagescale();
}
inline void CMsgNeedsSharedTexturePaint::clear_pagescale() {
  pagescale_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgNeedsSharedTexturePaint::_internal_pagescale() const {
  return pagescale_;
}
inline float CMsgNeedsSharedTexturePaint::pagescale() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.pagescale)
  return _internal_pagescale();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_pagescale(float value) {
  _has_bits_[0] |= 0x00000040u;
  pagescale_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_pagescale(float value) {
  _internal_set_pagescale(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.pagescale)
}

// optional uint32 pageserial = 8;
inline bool CMsgNeedsSharedTexturePaint::_internal_has_pageserial() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgNeedsSharedTexturePaint::has_pageserial() const {
  return _internal_has_pageserial();
}
inline void CMsgNeedsSharedTexturePaint::clear_pageserial() {
  pageserial_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgNeedsSharedTexturePaint::_internal_pageserial() const {
  return pageserial_;
}
inline uint32_t CMsgNeedsSharedTexturePaint::pageserial() const {
  // @@protoc_insertion_point(field_get:CMsgNeedsSharedTexturePaint.pageserial)
  return _internal_pageserial();
}
inline void CMsgNeedsSharedTexturePaint::_internal_set_pageserial(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  pageserial_ = value;
}
inline void CMsgNeedsSharedTexturePaint::set_pageserial(uint32_t value) {
  _internal_set_pageserial(value);
  // @@protoc_insertion_point(field_set:CMsgNeedsSharedTexturePaint.pageserial)
}

// -------------------------------------------------------------------

// CMsgGameOverlayTexturePaint

// optional uint32 browser_handle = 1;
inline bool CMsgGameOverlayTexturePaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGameOverlayTexturePaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGameOverlayTexturePaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.browser_handle)
}

// optional uint32 width = 3;
inline bool CMsgGameOverlayTexturePaint::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_width() const {
  return _internal_has_width();
}
inline void CMsgGameOverlayTexturePaint::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_width() const {
  return width_;
}
inline uint32_t CMsgGameOverlayTexturePaint::width() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.width)
  return _internal_width();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.width)
}

// optional uint32 height = 4;
inline bool CMsgGameOverlayTexturePaint::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_height() const {
  return _internal_has_height();
}
inline void CMsgGameOverlayTexturePaint::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_height() const {
  return height_;
}
inline uint32_t CMsgGameOverlayTexturePaint::height() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.height)
  return _internal_height();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.height)
}

// optional uint32 scrollx = 5;
inline bool CMsgGameOverlayTexturePaint::_internal_has_scrollx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_scrollx() const {
  return _internal_has_scrollx();
}
inline void CMsgGameOverlayTexturePaint::clear_scrollx() {
  scrollx_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_scrollx() const {
  return scrollx_;
}
inline uint32_t CMsgGameOverlayTexturePaint::scrollx() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.scrollx)
  return _internal_scrollx();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_scrollx(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  scrollx_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_scrollx(uint32_t value) {
  _internal_set_scrollx(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.scrollx)
}

// optional uint32 scrolly = 6;
inline bool CMsgGameOverlayTexturePaint::_internal_has_scrolly() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_scrolly() const {
  return _internal_has_scrolly();
}
inline void CMsgGameOverlayTexturePaint::clear_scrolly() {
  scrolly_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_scrolly() const {
  return scrolly_;
}
inline uint32_t CMsgGameOverlayTexturePaint::scrolly() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.scrolly)
  return _internal_scrolly();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_scrolly(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  scrolly_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_scrolly(uint32_t value) {
  _internal_set_scrolly(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.scrolly)
}

// optional float pagescale = 7;
inline bool CMsgGameOverlayTexturePaint::_internal_has_pagescale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_pagescale() const {
  return _internal_has_pagescale();
}
inline void CMsgGameOverlayTexturePaint::clear_pagescale() {
  pagescale_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgGameOverlayTexturePaint::_internal_pagescale() const {
  return pagescale_;
}
inline float CMsgGameOverlayTexturePaint::pagescale() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.pagescale)
  return _internal_pagescale();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_pagescale(float value) {
  _has_bits_[0] |= 0x00000020u;
  pagescale_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_pagescale(float value) {
  _internal_set_pagescale(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.pagescale)
}

// optional uint32 pageserial = 8;
inline bool CMsgGameOverlayTexturePaint::_internal_has_pageserial() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameOverlayTexturePaint::has_pageserial() const {
  return _internal_has_pageserial();
}
inline void CMsgGameOverlayTexturePaint::clear_pageserial() {
  pageserial_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameOverlayTexturePaint::_internal_pageserial() const {
  return pageserial_;
}
inline uint32_t CMsgGameOverlayTexturePaint::pageserial() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTexturePaint.pageserial)
  return _internal_pageserial();
}
inline void CMsgGameOverlayTexturePaint::_internal_set_pageserial(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  pageserial_ = value;
}
inline void CMsgGameOverlayTexturePaint::set_pageserial(uint32_t value) {
  _internal_set_pageserial(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTexturePaint.pageserial)
}

// -------------------------------------------------------------------

// CMsgGetZoom

// optional uint32 browser_handle = 1;
inline bool CMsgGetZoom::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetZoom::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGetZoom::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGetZoom::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGetZoom::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGetZoom.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGetZoom::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGetZoom::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGetZoom.browser_handle)
}

// -------------------------------------------------------------------

// CMsgGetZoomResponse

// optional uint32 browser_handle = 1;
inline bool CMsgGetZoomResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetZoomResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGetZoomResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGetZoomResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGetZoomResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGetZoomResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGetZoomResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGetZoomResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGetZoomResponse.browser_handle)
}

// optional float zoom = 2;
inline bool CMsgGetZoomResponse::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGetZoomResponse::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgGetZoomResponse::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgGetZoomResponse::_internal_zoom() const {
  return zoom_;
}
inline float CMsgGetZoomResponse::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgGetZoomResponse.zoom)
  return _internal_zoom();
}
inline void CMsgGetZoomResponse::_internal_set_zoom(float value) {
  _has_bits_[0] |= 0x00000002u;
  zoom_ = value;
}
inline void CMsgGetZoomResponse::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgGetZoomResponse.zoom)
}

// -------------------------------------------------------------------

// CMsgLinkAtPosition

// optional uint32 browser_handle = 1;
inline bool CMsgLinkAtPosition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLinkAtPosition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLinkAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLinkAtPosition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLinkAtPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPosition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLinkAtPosition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgLinkAtPosition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPosition.browser_handle)
}

// optional uint32 x = 2;
inline bool CMsgLinkAtPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLinkAtPosition::has_x() const {
  return _internal_has_x();
}
inline void CMsgLinkAtPosition::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLinkAtPosition::_internal_x() const {
  return x_;
}
inline uint32_t CMsgLinkAtPosition::x() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPosition.x)
  return _internal_x();
}
inline void CMsgLinkAtPosition::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgLinkAtPosition::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPosition.x)
}

// optional uint32 y = 3;
inline bool CMsgLinkAtPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLinkAtPosition::has_y() const {
  return _internal_has_y();
}
inline void CMsgLinkAtPosition::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLinkAtPosition::_internal_y() const {
  return y_;
}
inline uint32_t CMsgLinkAtPosition::y() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPosition.y)
  return _internal_y();
}
inline void CMsgLinkAtPosition::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgLinkAtPosition::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPosition.y)
}

// -------------------------------------------------------------------

// CMsgLinkAtPositionResponse

// optional uint32 browser_handle = 1;
inline bool CMsgLinkAtPositionResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLinkAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLinkAtPositionResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLinkAtPositionResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLinkAtPositionResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgLinkAtPositionResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.browser_handle)
}

// optional uint32 x = 2;
inline bool CMsgLinkAtPositionResponse::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_x() const {
  return _internal_has_x();
}
inline void CMsgLinkAtPositionResponse::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLinkAtPositionResponse::_internal_x() const {
  return x_;
}
inline uint32_t CMsgLinkAtPositionResponse::x() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.x)
  return _internal_x();
}
inline void CMsgLinkAtPositionResponse::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void CMsgLinkAtPositionResponse::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.x)
}

// optional uint32 y = 3;
inline bool CMsgLinkAtPositionResponse::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_y() const {
  return _internal_has_y();
}
inline void CMsgLinkAtPositionResponse::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgLinkAtPositionResponse::_internal_y() const {
  return y_;
}
inline uint32_t CMsgLinkAtPositionResponse::y() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.y)
  return _internal_y();
}
inline void CMsgLinkAtPositionResponse::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void CMsgLinkAtPositionResponse::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.y)
}

// optional string url = 4;
inline bool CMsgLinkAtPositionResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_url() const {
  return _internal_has_url();
}
inline void CMsgLinkAtPositionResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLinkAtPositionResponse::url() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLinkAtPositionResponse::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.url)
}
inline std::string* CMsgLinkAtPositionResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgLinkAtPositionResponse.url)
  return _s;
}
inline const std::string& CMsgLinkAtPositionResponse::_internal_url() const {
  return url_.Get();
}
inline void CMsgLinkAtPositionResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLinkAtPositionResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLinkAtPositionResponse::release_url() {
  // @@protoc_insertion_point(field_release:CMsgLinkAtPositionResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLinkAtPositionResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLinkAtPositionResponse.url)
}

// optional bool blivelink = 5;
inline bool CMsgLinkAtPositionResponse::_internal_has_blivelink() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_blivelink() const {
  return _internal_has_blivelink();
}
inline void CMsgLinkAtPositionResponse::clear_blivelink() {
  blivelink_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgLinkAtPositionResponse::_internal_blivelink() const {
  return blivelink_;
}
inline bool CMsgLinkAtPositionResponse::blivelink() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.blivelink)
  return _internal_blivelink();
}
inline void CMsgLinkAtPositionResponse::_internal_set_blivelink(bool value) {
  _has_bits_[0] |= 0x00000010u;
  blivelink_ = value;
}
inline void CMsgLinkAtPositionResponse::set_blivelink(bool value) {
  _internal_set_blivelink(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.blivelink)
}

// optional bool binput = 6;
inline bool CMsgLinkAtPositionResponse::_internal_has_binput() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLinkAtPositionResponse::has_binput() const {
  return _internal_has_binput();
}
inline void CMsgLinkAtPositionResponse::clear_binput() {
  binput_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgLinkAtPositionResponse::_internal_binput() const {
  return binput_;
}
inline bool CMsgLinkAtPositionResponse::binput() const {
  // @@protoc_insertion_point(field_get:CMsgLinkAtPositionResponse.binput)
  return _internal_binput();
}
inline void CMsgLinkAtPositionResponse::_internal_set_binput(bool value) {
  _has_bits_[0] |= 0x00000020u;
  binput_ = value;
}
inline void CMsgLinkAtPositionResponse::set_binput(bool value) {
  _internal_set_binput(value);
  // @@protoc_insertion_point(field_set:CMsgLinkAtPositionResponse.binput)
}

// -------------------------------------------------------------------

// CMsgZoomToElementAtPosition

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToElementAtPosition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPosition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgZoomToElementAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgZoomToElementAtPosition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgZoomToElementAtPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPosition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgZoomToElementAtPosition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgZoomToElementAtPosition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPosition.browser_handle)
}

// optional uint32 x = 2;
inline bool CMsgZoomToElementAtPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPosition::has_x() const {
  return _internal_has_x();
}
inline void CMsgZoomToElementAtPosition::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgZoomToElementAtPosition::_internal_x() const {
  return x_;
}
inline uint32_t CMsgZoomToElementAtPosition::x() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPosition.x)
  return _internal_x();
}
inline void CMsgZoomToElementAtPosition::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgZoomToElementAtPosition::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPosition.x)
}

// optional uint32 y = 3;
inline bool CMsgZoomToElementAtPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPosition::has_y() const {
  return _internal_has_y();
}
inline void CMsgZoomToElementAtPosition::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgZoomToElementAtPosition::_internal_y() const {
  return y_;
}
inline uint32_t CMsgZoomToElementAtPosition::y() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPosition.y)
  return _internal_y();
}
inline void CMsgZoomToElementAtPosition::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgZoomToElementAtPosition::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPosition.y)
}

// -------------------------------------------------------------------

// CMsgZoomToElementAtPositionResponse

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToElementAtPositionResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPositionResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgZoomToElementAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgZoomToElementAtPositionResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgZoomToElementAtPositionResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPositionResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgZoomToElementAtPositionResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgZoomToElementAtPositionResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPositionResponse.browser_handle)
}

// optional float scale = 2;
inline bool CMsgZoomToElementAtPositionResponse::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPositionResponse::has_scale() const {
  return _internal_has_scale();
}
inline void CMsgZoomToElementAtPositionResponse::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgZoomToElementAtPositionResponse::_internal_scale() const {
  return scale_;
}
inline float CMsgZoomToElementAtPositionResponse::scale() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPositionResponse.scale)
  return _internal_scale();
}
inline void CMsgZoomToElementAtPositionResponse::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void CMsgZoomToElementAtPositionResponse::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPositionResponse.scale)
}

// optional float duration = 3;
inline bool CMsgZoomToElementAtPositionResponse::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgZoomToElementAtPositionResponse::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgZoomToElementAtPositionResponse::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgZoomToElementAtPositionResponse::_internal_duration() const {
  return duration_;
}
inline float CMsgZoomToElementAtPositionResponse::duration() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToElementAtPositionResponse.duration)
  return _internal_duration();
}
inline void CMsgZoomToElementAtPositionResponse::_internal_set_duration(float value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
}
inline void CMsgZoomToElementAtPositionResponse::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToElementAtPositionResponse.duration)
}

// -------------------------------------------------------------------

// CMsgScalePageToValue

// optional uint32 browser_handle = 1;
inline bool CMsgScalePageToValue::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgScalePageToValue::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgScalePageToValue::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgScalePageToValue::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgScalePageToValue::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValue.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgScalePageToValue::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgScalePageToValue::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValue.browser_handle)
}

// optional float scale = 2;
inline bool CMsgScalePageToValue::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgScalePageToValue::has_scale() const {
  return _internal_has_scale();
}
inline void CMsgScalePageToValue::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgScalePageToValue::_internal_scale() const {
  return scale_;
}
inline float CMsgScalePageToValue::scale() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValue.scale)
  return _internal_scale();
}
inline void CMsgScalePageToValue::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void CMsgScalePageToValue::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValue.scale)
}

// optional float x = 3;
inline bool CMsgScalePageToValue::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgScalePageToValue::has_x() const {
  return _internal_has_x();
}
inline void CMsgScalePageToValue::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgScalePageToValue::_internal_x() const {
  return x_;
}
inline float CMsgScalePageToValue::x() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValue.x)
  return _internal_x();
}
inline void CMsgScalePageToValue::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void CMsgScalePageToValue::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValue.x)
}

// optional float y = 4;
inline bool CMsgScalePageToValue::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgScalePageToValue::has_y() const {
  return _internal_has_y();
}
inline void CMsgScalePageToValue::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgScalePageToValue::_internal_y() const {
  return y_;
}
inline float CMsgScalePageToValue::y() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValue.y)
  return _internal_y();
}
inline void CMsgScalePageToValue::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void CMsgScalePageToValue::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValue.y)
}

// -------------------------------------------------------------------

// CMsgForcePopupsToDirectHWND

// optional uint32 browser_handle = 1;
inline bool CMsgForcePopupsToDirectHWND::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgForcePopupsToDirectHWND::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgForcePopupsToDirectHWND::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgForcePopupsToDirectHWND::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgForcePopupsToDirectHWND::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgForcePopupsToDirectHWND.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgForcePopupsToDirectHWND::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgForcePopupsToDirectHWND::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgForcePopupsToDirectHWND.browser_handle)
}

// optional bool force_direct_hwnd_popups = 2;
inline bool CMsgForcePopupsToDirectHWND::_internal_has_force_direct_hwnd_popups() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgForcePopupsToDirectHWND::has_force_direct_hwnd_popups() const {
  return _internal_has_force_direct_hwnd_popups();
}
inline void CMsgForcePopupsToDirectHWND::clear_force_direct_hwnd_popups() {
  force_direct_hwnd_popups_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgForcePopupsToDirectHWND::_internal_force_direct_hwnd_popups() const {
  return force_direct_hwnd_popups_;
}
inline bool CMsgForcePopupsToDirectHWND::force_direct_hwnd_popups() const {
  // @@protoc_insertion_point(field_get:CMsgForcePopupsToDirectHWND.force_direct_hwnd_popups)
  return _internal_force_direct_hwnd_popups();
}
inline void CMsgForcePopupsToDirectHWND::_internal_set_force_direct_hwnd_popups(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_direct_hwnd_popups_ = value;
}
inline void CMsgForcePopupsToDirectHWND::set_force_direct_hwnd_popups(bool value) {
  _internal_set_force_direct_hwnd_popups(value);
  // @@protoc_insertion_point(field_set:CMsgForcePopupsToDirectHWND.force_direct_hwnd_popups)
}

// -------------------------------------------------------------------

// CMsgScalePageToValueResponse

// optional uint32 browser_handle = 1;
inline bool CMsgScalePageToValueResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgScalePageToValueResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgScalePageToValueResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgScalePageToValueResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgScalePageToValueResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValueResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgScalePageToValueResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgScalePageToValueResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValueResponse.browser_handle)
}

// optional float zoom = 2;
inline bool CMsgScalePageToValueResponse::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgScalePageToValueResponse::has_zoom() const {
  return _internal_has_zoom();
}
inline void CMsgScalePageToValueResponse::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgScalePageToValueResponse::_internal_zoom() const {
  return zoom_;
}
inline float CMsgScalePageToValueResponse::zoom() const {
  // @@protoc_insertion_point(field_get:CMsgScalePageToValueResponse.zoom)
  return _internal_zoom();
}
inline void CMsgScalePageToValueResponse::_internal_set_zoom(float value) {
  _has_bits_[0] |= 0x00000002u;
  zoom_ = value;
}
inline void CMsgScalePageToValueResponse::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:CMsgScalePageToValueResponse.zoom)
}

// -------------------------------------------------------------------

// CMsgSavePageToJPEG

// optional uint32 browser_handle = 1;
inline bool CMsgSavePageToJPEG::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEG::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSavePageToJPEG::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSavePageToJPEG::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSavePageToJPEG::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEG.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSavePageToJPEG::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgSavePageToJPEG::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEG.browser_handle)
}

// optional string url = 2;
inline bool CMsgSavePageToJPEG::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEG::has_url() const {
  return _internal_has_url();
}
inline void CMsgSavePageToJPEG::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSavePageToJPEG::url() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEG.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSavePageToJPEG::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEG.url)
}
inline std::string* CMsgSavePageToJPEG::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgSavePageToJPEG.url)
  return _s;
}
inline const std::string& CMsgSavePageToJPEG::_internal_url() const {
  return url_.Get();
}
inline void CMsgSavePageToJPEG::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEG::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEG::release_url() {
  // @@protoc_insertion_point(field_release:CMsgSavePageToJPEG.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSavePageToJPEG::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSavePageToJPEG.url)
}

// optional string filename = 3;
inline bool CMsgSavePageToJPEG::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEG::has_filename() const {
  return _internal_has_filename();
}
inline void CMsgSavePageToJPEG::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSavePageToJPEG::filename() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEG.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSavePageToJPEG::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEG.filename)
}
inline std::string* CMsgSavePageToJPEG::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CMsgSavePageToJPEG.filename)
  return _s;
}
inline const std::string& CMsgSavePageToJPEG::_internal_filename() const {
  return filename_.Get();
}
inline void CMsgSavePageToJPEG::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEG::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEG::release_filename() {
  // @@protoc_insertion_point(field_release:CMsgSavePageToJPEG.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSavePageToJPEG::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSavePageToJPEG.filename)
}

// optional uint32 width = 4;
inline bool CMsgSavePageToJPEG::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEG::has_width() const {
  return _internal_has_width();
}
inline void CMsgSavePageToJPEG::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSavePageToJPEG::_internal_width() const {
  return width_;
}
inline uint32_t CMsgSavePageToJPEG::width() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEG.width)
  return _internal_width();
}
inline void CMsgSavePageToJPEG::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void CMsgSavePageToJPEG::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEG.width)
}

// optional uint32 height = 5;
inline bool CMsgSavePageToJPEG::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEG::has_height() const {
  return _internal_has_height();
}
inline void CMsgSavePageToJPEG::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSavePageToJPEG::_internal_height() const {
  return height_;
}
inline uint32_t CMsgSavePageToJPEG::height() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEG.height)
  return _internal_height();
}
inline void CMsgSavePageToJPEG::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void CMsgSavePageToJPEG::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEG.height)
}

// -------------------------------------------------------------------

// CMsgSavePageToJPEGResponse

// optional uint32 browser_handle = 1;
inline bool CMsgSavePageToJPEGResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEGResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSavePageToJPEGResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSavePageToJPEGResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSavePageToJPEGResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEGResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSavePageToJPEGResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgSavePageToJPEGResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEGResponse.browser_handle)
}

// optional string url = 2;
inline bool CMsgSavePageToJPEGResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEGResponse::has_url() const {
  return _internal_has_url();
}
inline void CMsgSavePageToJPEGResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSavePageToJPEGResponse::url() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEGResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSavePageToJPEGResponse::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEGResponse.url)
}
inline std::string* CMsgSavePageToJPEGResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgSavePageToJPEGResponse.url)
  return _s;
}
inline const std::string& CMsgSavePageToJPEGResponse::_internal_url() const {
  return url_.Get();
}
inline void CMsgSavePageToJPEGResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEGResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEGResponse::release_url() {
  // @@protoc_insertion_point(field_release:CMsgSavePageToJPEGResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSavePageToJPEGResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSavePageToJPEGResponse.url)
}

// optional string filename = 3;
inline bool CMsgSavePageToJPEGResponse::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSavePageToJPEGResponse::has_filename() const {
  return _internal_has_filename();
}
inline void CMsgSavePageToJPEGResponse::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSavePageToJPEGResponse::filename() const {
  // @@protoc_insertion_point(field_get:CMsgSavePageToJPEGResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSavePageToJPEGResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSavePageToJPEGResponse.filename)
}
inline std::string* CMsgSavePageToJPEGResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CMsgSavePageToJPEGResponse.filename)
  return _s;
}
inline const std::string& CMsgSavePageToJPEGResponse::_internal_filename() const {
  return filename_.Get();
}
inline void CMsgSavePageToJPEGResponse::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEGResponse::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSavePageToJPEGResponse::release_filename() {
  // @@protoc_insertion_point(field_release:CMsgSavePageToJPEGResponse.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSavePageToJPEGResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSavePageToJPEGResponse.filename)
}

// -------------------------------------------------------------------

// CMsgJSAlert

// optional uint32 browser_handle = 1;
inline bool CMsgJSAlert::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSAlert::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSAlert::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSAlert::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSAlert::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSAlert.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSAlert::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgJSAlert::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSAlert.browser_handle)
}

// optional string message = 2;
inline bool CMsgJSAlert::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSAlert::has_message() const {
  return _internal_has_message();
}
inline void CMsgJSAlert::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSAlert::message() const {
  // @@protoc_insertion_point(field_get:CMsgJSAlert.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSAlert::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSAlert.message)
}
inline std::string* CMsgJSAlert::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgJSAlert.message)
  return _s;
}
inline const std::string& CMsgJSAlert::_internal_message() const {
  return message_.Get();
}
inline void CMsgJSAlert::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSAlert::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSAlert::release_message() {
  // @@protoc_insertion_point(field_release:CMsgJSAlert.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSAlert::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSAlert.message)
}

// -------------------------------------------------------------------

// CMsgJSConfirm

// optional uint32 browser_handle = 1;
inline bool CMsgJSConfirm::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSConfirm::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSConfirm::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSConfirm::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSConfirm::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSConfirm.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSConfirm::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgJSConfirm::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSConfirm.browser_handle)
}

// optional string message = 2;
inline bool CMsgJSConfirm::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSConfirm::has_message() const {
  return _internal_has_message();
}
inline void CMsgJSConfirm::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSConfirm::message() const {
  // @@protoc_insertion_point(field_get:CMsgJSConfirm.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSConfirm::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSConfirm.message)
}
inline std::string* CMsgJSConfirm::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgJSConfirm.message)
  return _s;
}
inline const std::string& CMsgJSConfirm::_internal_message() const {
  return message_.Get();
}
inline void CMsgJSConfirm::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSConfirm::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSConfirm::release_message() {
  // @@protoc_insertion_point(field_release:CMsgJSConfirm.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSConfirm::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSConfirm.message)
}

// -------------------------------------------------------------------

// CMsgJSDialogResponse

// optional uint32 browser_handle = 1;
inline bool CMsgJSDialogResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSDialogResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgJSDialogResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSDialogResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSDialogResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSDialogResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgJSDialogResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSDialogResponse.browser_handle)
}

// optional bool result = 2;
inline bool CMsgJSDialogResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSDialogResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgJSDialogResponse::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgJSDialogResponse::_internal_result() const {
  return result_;
}
inline bool CMsgJSDialogResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgJSDialogResponse.result)
  return _internal_result();
}
inline void CMsgJSDialogResponse::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CMsgJSDialogResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgJSDialogResponse.result)
}

// -------------------------------------------------------------------

// CMsgCanGoBackAndForward

// optional uint32 browser_handle = 1;
inline bool CMsgCanGoBackAndForward::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCanGoBackAndForward::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgCanGoBackAndForward::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCanGoBackAndForward::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgCanGoBackAndForward::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgCanGoBackAndForward.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgCanGoBackAndForward::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgCanGoBackAndForward::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgCanGoBackAndForward.browser_handle)
}

// optional bool bgoback = 2;
inline bool CMsgCanGoBackAndForward::_internal_has_bgoback() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCanGoBackAndForward::has_bgoback() const {
  return _internal_has_bgoback();
}
inline void CMsgCanGoBackAndForward::clear_bgoback() {
  bgoback_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgCanGoBackAndForward::_internal_bgoback() const {
  return bgoback_;
}
inline bool CMsgCanGoBackAndForward::bgoback() const {
  // @@protoc_insertion_point(field_get:CMsgCanGoBackAndForward.bgoback)
  return _internal_bgoback();
}
inline void CMsgCanGoBackAndForward::_internal_set_bgoback(bool value) {
  _has_bits_[0] |= 0x00000002u;
  bgoback_ = value;
}
inline void CMsgCanGoBackAndForward::set_bgoback(bool value) {
  _internal_set_bgoback(value);
  // @@protoc_insertion_point(field_set:CMsgCanGoBackAndForward.bgoback)
}

// optional bool bgoforward = 3;
inline bool CMsgCanGoBackAndForward::_internal_has_bgoforward() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgCanGoBackAndForward::has_bgoforward() const {
  return _internal_has_bgoforward();
}
inline void CMsgCanGoBackAndForward::clear_bgoforward() {
  bgoforward_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgCanGoBackAndForward::_internal_bgoforward() const {
  return bgoforward_;
}
inline bool CMsgCanGoBackAndForward::bgoforward() const {
  // @@protoc_insertion_point(field_get:CMsgCanGoBackAndForward.bgoforward)
  return _internal_bgoforward();
}
inline void CMsgCanGoBackAndForward::_internal_set_bgoforward(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bgoforward_ = value;
}
inline void CMsgCanGoBackAndForward::set_bgoforward(bool value) {
  _internal_set_bgoforward(value);
  // @@protoc_insertion_point(field_set:CMsgCanGoBackAndForward.bgoforward)
}

// -------------------------------------------------------------------

// CMsgOpenSteamURL

// optional uint32 browser_handle = 1;
inline bool CMsgOpenSteamURL::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgOpenSteamURL::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgOpenSteamURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgOpenSteamURL::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgOpenSteamURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgOpenSteamURL.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgOpenSteamURL::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgOpenSteamURL::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgOpenSteamURL.browser_handle)
}

// optional string url = 2;
inline bool CMsgOpenSteamURL::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgOpenSteamURL::has_url() const {
  return _internal_has_url();
}
inline void CMsgOpenSteamURL::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgOpenSteamURL::url() const {
  // @@protoc_insertion_point(field_get:CMsgOpenSteamURL.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgOpenSteamURL::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgOpenSteamURL.url)
}
inline std::string* CMsgOpenSteamURL::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgOpenSteamURL.url)
  return _s;
}
inline const std::string& CMsgOpenSteamURL::_internal_url() const {
  return url_.Get();
}
inline void CMsgOpenSteamURL::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgOpenSteamURL::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgOpenSteamURL::release_url() {
  // @@protoc_insertion_point(field_release:CMsgOpenSteamURL.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgOpenSteamURL::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgOpenSteamURL.url)
}

// optional string referrer = 3;
inline bool CMsgOpenSteamURL::_internal_has_referrer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgOpenSteamURL::has_referrer() const {
  return _internal_has_referrer();
}
inline void CMsgOpenSteamURL::clear_referrer() {
  referrer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgOpenSteamURL::referrer() const {
  // @@protoc_insertion_point(field_get:CMsgOpenSteamURL.referrer)
  return _internal_referrer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgOpenSteamURL::set_referrer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgOpenSteamURL.referrer)
}
inline std::string* CMsgOpenSteamURL::mutable_referrer() {
  std::string* _s = _internal_mutable_referrer();
  // @@protoc_insertion_point(field_mutable:CMsgOpenSteamURL.referrer)
  return _s;
}
inline const std::string& CMsgOpenSteamURL::_internal_referrer() const {
  return referrer_.Get();
}
inline void CMsgOpenSteamURL::_internal_set_referrer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgOpenSteamURL::_internal_mutable_referrer() {
  _has_bits_[0] |= 0x00000002u;
  return referrer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgOpenSteamURL::release_referrer() {
  // @@protoc_insertion_point(field_release:CMsgOpenSteamURL.referrer)
  if (!_internal_has_referrer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = referrer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgOpenSteamURL::set_allocated_referrer(std::string* referrer) {
  if (referrer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referrer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (referrer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    referrer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgOpenSteamURL.referrer)
}

// -------------------------------------------------------------------

// CMsgSetCookie

// optional string key = 1;
inline bool CMsgSetCookie::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_key() const {
  return _internal_has_key();
}
inline void CMsgSetCookie::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetCookie::key() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetCookie::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetCookie.key)
}
inline std::string* CMsgSetCookie::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgSetCookie.key)
  return _s;
}
inline const std::string& CMsgSetCookie::_internal_key() const {
  return key_.Get();
}
inline void CMsgSetCookie::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::release_key() {
  // @@protoc_insertion_point(field_release:CMsgSetCookie.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetCookie::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetCookie.key)
}

// optional string value = 2;
inline bool CMsgSetCookie::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_value() const {
  return _internal_has_value();
}
inline void CMsgSetCookie::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSetCookie::value() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetCookie::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetCookie.value)
}
inline std::string* CMsgSetCookie::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgSetCookie.value)
  return _s;
}
inline const std::string& CMsgSetCookie::_internal_value() const {
  return value_.Get();
}
inline void CMsgSetCookie::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::release_value() {
  // @@protoc_insertion_point(field_release:CMsgSetCookie.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetCookie::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetCookie.value)
}

// optional string path = 3;
inline bool CMsgSetCookie::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_path() const {
  return _internal_has_path();
}
inline void CMsgSetCookie::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSetCookie::path() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetCookie::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetCookie.path)
}
inline std::string* CMsgSetCookie::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CMsgSetCookie.path)
  return _s;
}
inline const std::string& CMsgSetCookie::_internal_path() const {
  return path_.Get();
}
inline void CMsgSetCookie::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000004u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::release_path() {
  // @@protoc_insertion_point(field_release:CMsgSetCookie.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetCookie::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetCookie.path)
}

// optional string host = 4;
inline bool CMsgSetCookie::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_host() const {
  return _internal_has_host();
}
inline void CMsgSetCookie::clear_host() {
  host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgSetCookie::host() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetCookie::set_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetCookie.host)
}
inline std::string* CMsgSetCookie::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:CMsgSetCookie.host)
  return _s;
}
inline const std::string& CMsgSetCookie::_internal_host() const {
  return host_.Get();
}
inline void CMsgSetCookie::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000008u;
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetCookie::release_host() {
  // @@protoc_insertion_point(field_release:CMsgSetCookie.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetCookie::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetCookie.host)
}

// optional uint32 expires = 5;
inline bool CMsgSetCookie::_internal_has_expires() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_expires() const {
  return _internal_has_expires();
}
inline void CMsgSetCookie::clear_expires() {
  expires_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSetCookie::_internal_expires() const {
  return expires_;
}
inline uint32_t CMsgSetCookie::expires() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.expires)
  return _internal_expires();
}
inline void CMsgSetCookie::_internal_set_expires(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  expires_ = value;
}
inline void CMsgSetCookie::set_expires(uint32_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:CMsgSetCookie.expires)
}

// optional bool secure = 6;
inline bool CMsgSetCookie::_internal_has_secure() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_secure() const {
  return _internal_has_secure();
}
inline void CMsgSetCookie::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSetCookie::_internal_secure() const {
  return secure_;
}
inline bool CMsgSetCookie::secure() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.secure)
  return _internal_secure();
}
inline void CMsgSetCookie::_internal_set_secure(bool value) {
  _has_bits_[0] |= 0x00000020u;
  secure_ = value;
}
inline void CMsgSetCookie::set_secure(bool value) {
  _internal_set_secure(value);
  // @@protoc_insertion_point(field_set:CMsgSetCookie.secure)
}

// optional bool httponly = 7;
inline bool CMsgSetCookie::_internal_has_httponly() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSetCookie::has_httponly() const {
  return _internal_has_httponly();
}
inline void CMsgSetCookie::clear_httponly() {
  httponly_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSetCookie::_internal_httponly() const {
  return httponly_;
}
inline bool CMsgSetCookie::httponly() const {
  // @@protoc_insertion_point(field_get:CMsgSetCookie.httponly)
  return _internal_httponly();
}
inline void CMsgSetCookie::_internal_set_httponly(bool value) {
  _has_bits_[0] |= 0x00000040u;
  httponly_ = value;
}
inline void CMsgSetCookie::set_httponly(bool value) {
  _internal_set_httponly(value);
  // @@protoc_insertion_point(field_set:CMsgSetCookie.httponly)
}

// -------------------------------------------------------------------

// CMsgSetTargetFrameRate

// optional uint32 browser_handle = 1;
inline bool CMsgSetTargetFrameRate::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetTargetFrameRate::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetTargetFrameRate::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetTargetFrameRate::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetTargetFrameRate::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetTargetFrameRate.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetTargetFrameRate::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetTargetFrameRate::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetTargetFrameRate.browser_handle)
}

// optional uint32 nTargetFrameRate = 2;
inline bool CMsgSetTargetFrameRate::_internal_has_ntargetframerate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetTargetFrameRate::has_ntargetframerate() const {
  return _internal_has_ntargetframerate();
}
inline void CMsgSetTargetFrameRate::clear_ntargetframerate() {
  ntargetframerate_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetTargetFrameRate::_internal_ntargetframerate() const {
  return ntargetframerate_;
}
inline uint32_t CMsgSetTargetFrameRate::ntargetframerate() const {
  // @@protoc_insertion_point(field_get:CMsgSetTargetFrameRate.nTargetFrameRate)
  return _internal_ntargetframerate();
}
inline void CMsgSetTargetFrameRate::_internal_set_ntargetframerate(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ntargetframerate_ = value;
}
inline void CMsgSetTargetFrameRate::set_ntargetframerate(uint32_t value) {
  _internal_set_ntargetframerate(value);
  // @@protoc_insertion_point(field_set:CMsgSetTargetFrameRate.nTargetFrameRate)
}

// -------------------------------------------------------------------

// CMsgPauseRepaint

// optional uint32 browser_handle = 1;
inline bool CMsgPauseRepaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPauseRepaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPauseRepaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPauseRepaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPauseRepaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPauseRepaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPauseRepaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgPauseRepaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPauseRepaint.browser_handle)
}

// -------------------------------------------------------------------

// CMsgFullRepaint

// optional uint32 browser_handle = 1;
inline bool CMsgFullRepaint::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFullRepaint::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFullRepaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFullRepaint::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFullRepaint::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFullRepaint.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFullRepaint::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgFullRepaint::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFullRepaint.browser_handle)
}

// -------------------------------------------------------------------

// CMsgRequestFullScreen

// optional uint32 browser_handle = 1;
inline bool CMsgRequestFullScreen::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRequestFullScreen::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgRequestFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgRequestFullScreen::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgRequestFullScreen::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgRequestFullScreen.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgRequestFullScreen::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgRequestFullScreen::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgRequestFullScreen.browser_handle)
}

// -------------------------------------------------------------------

// CMsgExitFullScreen

// optional uint32 browser_handle = 1;
inline bool CMsgExitFullScreen::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgExitFullScreen::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgExitFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgExitFullScreen::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgExitFullScreen::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgExitFullScreen.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgExitFullScreen::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgExitFullScreen::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgExitFullScreen.browser_handle)
}

// -------------------------------------------------------------------

// CMsgToggleFindInPageDialog

// optional uint32 browser_handle = 1;
inline bool CMsgToggleFindInPageDialog::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgToggleFindInPageDialog::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgToggleFindInPageDialog::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgToggleFindInPageDialog::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgToggleFindInPageDialog::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgToggleFindInPageDialog.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgToggleFindInPageDialog::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgToggleFindInPageDialog::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgToggleFindInPageDialog.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetPIDShuttingDown

// optional uint32 browser_handle = 1;
inline bool CMsgSetPIDShuttingDown::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetPIDShuttingDown::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetPIDShuttingDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetPIDShuttingDown::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetPIDShuttingDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetPIDShuttingDown.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetPIDShuttingDown::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetPIDShuttingDown::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetPIDShuttingDown.browser_handle)
}

// -------------------------------------------------------------------

// CMsgDisableBackgroundThrottling

// optional uint32 browser_handle = 1;
inline bool CMsgDisableBackgroundThrottling::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDisableBackgroundThrottling::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgDisableBackgroundThrottling::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDisableBackgroundThrottling::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgDisableBackgroundThrottling::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgDisableBackgroundThrottling.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgDisableBackgroundThrottling::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgDisableBackgroundThrottling::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgDisableBackgroundThrottling.browser_handle)
}

// -------------------------------------------------------------------

// CMsgAckPIDShuttingDown

// optional uint32 browser_handle = 1;
inline bool CMsgAckPIDShuttingDown::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAckPIDShuttingDown::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgAckPIDShuttingDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAckPIDShuttingDown::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgAckPIDShuttingDown::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgAckPIDShuttingDown.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgAckPIDShuttingDown::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgAckPIDShuttingDown::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgAckPIDShuttingDown.browser_handle)
}

// -------------------------------------------------------------------

// CMsgGetCookiesForURL

// optional uint32 browser_handle = 1;
inline bool CMsgGetCookiesForURL::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGetCookiesForURL::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGetCookiesForURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGetCookiesForURL::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGetCookiesForURL::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGetCookiesForURL.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGetCookiesForURL::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgGetCookiesForURL::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGetCookiesForURL.browser_handle)
}

// optional string url = 2;
inline bool CMsgGetCookiesForURL::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetCookiesForURL::has_url() const {
  return _internal_has_url();
}
inline void CMsgGetCookiesForURL::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGetCookiesForURL::url() const {
  // @@protoc_insertion_point(field_get:CMsgGetCookiesForURL.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGetCookiesForURL::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGetCookiesForURL.url)
}
inline std::string* CMsgGetCookiesForURL::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgGetCookiesForURL.url)
  return _s;
}
inline const std::string& CMsgGetCookiesForURL::_internal_url() const {
  return url_.Get();
}
inline void CMsgGetCookiesForURL::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGetCookiesForURL::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGetCookiesForURL::release_url() {
  // @@protoc_insertion_point(field_release:CMsgGetCookiesForURL.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGetCookiesForURL::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGetCookiesForURL.url)
}

// -------------------------------------------------------------------

// CCookie

// optional string name = 1;
inline bool CCookie::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCookie::has_name() const {
  return _internal_has_name();
}
inline void CCookie::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCookie::name() const {
  // @@protoc_insertion_point(field_get:CCookie.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCookie::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCookie.name)
}
inline std::string* CCookie::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCookie.name)
  return _s;
}
inline const std::string& CCookie::_internal_name() const {
  return name_.Get();
}
inline void CCookie::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCookie::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCookie::release_name() {
  // @@protoc_insertion_point(field_release:CCookie.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCookie::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCookie.name)
}

// optional string value = 2;
inline bool CCookie::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCookie::has_value() const {
  return _internal_has_value();
}
inline void CCookie::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCookie::value() const {
  // @@protoc_insertion_point(field_get:CCookie.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCookie::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCookie.value)
}
inline std::string* CCookie::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CCookie.value)
  return _s;
}
inline const std::string& CCookie::_internal_value() const {
  return value_.Get();
}
inline void CCookie::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCookie::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCookie::release_value() {
  // @@protoc_insertion_point(field_release:CCookie.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCookie::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCookie.value)
}

// optional string domain = 3;
inline bool CCookie::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCookie::has_domain() const {
  return _internal_has_domain();
}
inline void CCookie::clear_domain() {
  domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCookie::domain() const {
  // @@protoc_insertion_point(field_get:CCookie.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCookie::set_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCookie.domain)
}
inline std::string* CCookie::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:CCookie.domain)
  return _s;
}
inline const std::string& CCookie::_internal_domain() const {
  return domain_.Get();
}
inline void CCookie::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCookie::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000004u;
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCookie::release_domain() {
  // @@protoc_insertion_point(field_release:CCookie.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = domain_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCookie::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCookie.domain)
}

// optional string path = 4;
inline bool CCookie::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCookie::has_path() const {
  return _internal_has_path();
}
inline void CCookie::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CCookie::path() const {
  // @@protoc_insertion_point(field_get:CCookie.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCookie::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCookie.path)
}
inline std::string* CCookie::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CCookie.path)
  return _s;
}
inline const std::string& CCookie::_internal_path() const {
  return path_.Get();
}
inline void CCookie::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCookie::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000008u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCookie::release_path() {
  // @@protoc_insertion_point(field_release:CCookie.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCookie::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCookie.path)
}

// -------------------------------------------------------------------

// CMsgGetCookiesForURLResponse

// optional uint32 browser_handle = 1;
inline bool CMsgGetCookiesForURLResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGetCookiesForURLResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGetCookiesForURLResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGetCookiesForURLResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGetCookiesForURLResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGetCookiesForURLResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGetCookiesForURLResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgGetCookiesForURLResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGetCookiesForURLResponse.browser_handle)
}

// optional string url = 2;
inline bool CMsgGetCookiesForURLResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGetCookiesForURLResponse::has_url() const {
  return _internal_has_url();
}
inline void CMsgGetCookiesForURLResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGetCookiesForURLResponse::url() const {
  // @@protoc_insertion_point(field_get:CMsgGetCookiesForURLResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGetCookiesForURLResponse::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGetCookiesForURLResponse.url)
}
inline std::string* CMsgGetCookiesForURLResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgGetCookiesForURLResponse.url)
  return _s;
}
inline const std::string& CMsgGetCookiesForURLResponse::_internal_url() const {
  return url_.Get();
}
inline void CMsgGetCookiesForURLResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGetCookiesForURLResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGetCookiesForURLResponse::release_url() {
  // @@protoc_insertion_point(field_release:CMsgGetCookiesForURLResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGetCookiesForURLResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGetCookiesForURLResponse.url)
}

// repeated .CCookie cookies = 3;
inline int CMsgGetCookiesForURLResponse::_internal_cookies_size() const {
  return cookies_.size();
}
inline int CMsgGetCookiesForURLResponse::cookies_size() const {
  return _internal_cookies_size();
}
inline void CMsgGetCookiesForURLResponse::clear_cookies() {
  cookies_.Clear();
}
inline ::CCookie* CMsgGetCookiesForURLResponse::mutable_cookies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGetCookiesForURLResponse.cookies)
  return cookies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCookie >*
CMsgGetCookiesForURLResponse::mutable_cookies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGetCookiesForURLResponse.cookies)
  return &cookies_;
}
inline const ::CCookie& CMsgGetCookiesForURLResponse::_internal_cookies(int index) const {
  return cookies_.Get(index);
}
inline const ::CCookie& CMsgGetCookiesForURLResponse::cookies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGetCookiesForURLResponse.cookies)
  return _internal_cookies(index);
}
inline ::CCookie* CMsgGetCookiesForURLResponse::_internal_add_cookies() {
  return cookies_.Add();
}
inline ::CCookie* CMsgGetCookiesForURLResponse::add_cookies() {
  ::CCookie* _add = _internal_add_cookies();
  // @@protoc_insertion_point(field_add:CMsgGetCookiesForURLResponse.cookies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCookie >&
CMsgGetCookiesForURLResponse::cookies() const {
  // @@protoc_insertion_point(field_list:CMsgGetCookiesForURLResponse.cookies)
  return cookies_;
}

// -------------------------------------------------------------------

// CMsgNodeHasFocus

// optional uint32 browser_handle = 1;
inline bool CMsgNodeHasFocus::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgNodeHasFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgNodeHasFocus::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgNodeHasFocus::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgNodeHasFocus::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  browser_handle_ = value;
}
inline void CMsgNodeHasFocus::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.browser_handle)
}

// optional bool bInput = 2;
inline bool CMsgNodeHasFocus::_internal_has_binput() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_binput() const {
  return _internal_has_binput();
}
inline void CMsgNodeHasFocus::clear_binput() {
  binput_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgNodeHasFocus::_internal_binput() const {
  return binput_;
}
inline bool CMsgNodeHasFocus::binput() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.bInput)
  return _internal_binput();
}
inline void CMsgNodeHasFocus::_internal_set_binput(bool value) {
  _has_bits_[0] |= 0x00000020u;
  binput_ = value;
}
inline void CMsgNodeHasFocus::set_binput(bool value) {
  _internal_set_binput(value);
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.bInput)
}

// optional string name = 3;
inline bool CMsgNodeHasFocus::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_name() const {
  return _internal_has_name();
}
inline void CMsgNodeHasFocus::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNodeHasFocus::name() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNodeHasFocus::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.name)
}
inline std::string* CMsgNodeHasFocus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgNodeHasFocus.name)
  return _s;
}
inline const std::string& CMsgNodeHasFocus::_internal_name() const {
  return name_.Get();
}
inline void CMsgNodeHasFocus::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::release_name() {
  // @@protoc_insertion_point(field_release:CMsgNodeHasFocus.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNodeHasFocus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNodeHasFocus.name)
}

// optional string elementtagname = 4;
inline bool CMsgNodeHasFocus::_internal_has_elementtagname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_elementtagname() const {
  return _internal_has_elementtagname();
}
inline void CMsgNodeHasFocus::clear_elementtagname() {
  elementtagname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgNodeHasFocus::elementtagname() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.elementtagname)
  return _internal_elementtagname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNodeHasFocus::set_elementtagname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 elementtagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.elementtagname)
}
inline std::string* CMsgNodeHasFocus::mutable_elementtagname() {
  std::string* _s = _internal_mutable_elementtagname();
  // @@protoc_insertion_point(field_mutable:CMsgNodeHasFocus.elementtagname)
  return _s;
}
inline const std::string& CMsgNodeHasFocus::_internal_elementtagname() const {
  return elementtagname_.Get();
}
inline void CMsgNodeHasFocus::_internal_set_elementtagname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  elementtagname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::_internal_mutable_elementtagname() {
  _has_bits_[0] |= 0x00000002u;
  return elementtagname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::release_elementtagname() {
  // @@protoc_insertion_point(field_release:CMsgNodeHasFocus.elementtagname)
  if (!_internal_has_elementtagname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = elementtagname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (elementtagname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    elementtagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNodeHasFocus::set_allocated_elementtagname(std::string* elementtagname) {
  if (elementtagname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  elementtagname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), elementtagname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (elementtagname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    elementtagname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNodeHasFocus.elementtagname)
}

// optional string searchbuttontext = 5;
inline bool CMsgNodeHasFocus::_internal_has_searchbuttontext() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_searchbuttontext() const {
  return _internal_has_searchbuttontext();
}
inline void CMsgNodeHasFocus::clear_searchbuttontext() {
  searchbuttontext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgNodeHasFocus::searchbuttontext() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.searchbuttontext)
  return _internal_searchbuttontext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNodeHasFocus::set_searchbuttontext(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 searchbuttontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.searchbuttontext)
}
inline std::string* CMsgNodeHasFocus::mutable_searchbuttontext() {
  std::string* _s = _internal_mutable_searchbuttontext();
  // @@protoc_insertion_point(field_mutable:CMsgNodeHasFocus.searchbuttontext)
  return _s;
}
inline const std::string& CMsgNodeHasFocus::_internal_searchbuttontext() const {
  return searchbuttontext_.Get();
}
inline void CMsgNodeHasFocus::_internal_set_searchbuttontext(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  searchbuttontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::_internal_mutable_searchbuttontext() {
  _has_bits_[0] |= 0x00000004u;
  return searchbuttontext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::release_searchbuttontext() {
  // @@protoc_insertion_point(field_release:CMsgNodeHasFocus.searchbuttontext)
  if (!_internal_has_searchbuttontext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = searchbuttontext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (searchbuttontext_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    searchbuttontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNodeHasFocus::set_allocated_searchbuttontext(std::string* searchbuttontext) {
  if (searchbuttontext != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  searchbuttontext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), searchbuttontext,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (searchbuttontext_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    searchbuttontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNodeHasFocus.searchbuttontext)
}

// optional bool bHasMultipleInputs = 6;
inline bool CMsgNodeHasFocus::_internal_has_bhasmultipleinputs() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_bhasmultipleinputs() const {
  return _internal_has_bhasmultipleinputs();
}
inline void CMsgNodeHasFocus::clear_bhasmultipleinputs() {
  bhasmultipleinputs_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgNodeHasFocus::_internal_bhasmultipleinputs() const {
  return bhasmultipleinputs_;
}
inline bool CMsgNodeHasFocus::bhasmultipleinputs() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.bHasMultipleInputs)
  return _internal_bhasmultipleinputs();
}
inline void CMsgNodeHasFocus::_internal_set_bhasmultipleinputs(bool value) {
  _has_bits_[0] |= 0x00000040u;
  bhasmultipleinputs_ = value;
}
inline void CMsgNodeHasFocus::set_bhasmultipleinputs(bool value) {
  _internal_set_bhasmultipleinputs(value);
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.bHasMultipleInputs)
}

// optional string input_type = 7;
inline bool CMsgNodeHasFocus::_internal_has_input_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_input_type() const {
  return _internal_has_input_type();
}
inline void CMsgNodeHasFocus::clear_input_type() {
  input_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgNodeHasFocus::input_type() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.input_type)
  return _internal_input_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNodeHasFocus::set_input_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.input_type)
}
inline std::string* CMsgNodeHasFocus::mutable_input_type() {
  std::string* _s = _internal_mutable_input_type();
  // @@protoc_insertion_point(field_mutable:CMsgNodeHasFocus.input_type)
  return _s;
}
inline const std::string& CMsgNodeHasFocus::_internal_input_type() const {
  return input_type_.Get();
}
inline void CMsgNodeHasFocus::_internal_set_input_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  input_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::_internal_mutable_input_type() {
  _has_bits_[0] |= 0x00000008u;
  return input_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNodeHasFocus::release_input_type() {
  // @@protoc_insertion_point(field_release:CMsgNodeHasFocus.input_type)
  if (!_internal_has_input_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = input_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNodeHasFocus::set_allocated_input_type(std::string* input_type) {
  if (input_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  input_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNodeHasFocus.input_type)
}

// optional bool bIsMainFrame = 8;
inline bool CMsgNodeHasFocus::_internal_has_bismainframe() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgNodeHasFocus::has_bismainframe() const {
  return _internal_has_bismainframe();
}
inline void CMsgNodeHasFocus::clear_bismainframe() {
  bismainframe_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgNodeHasFocus::_internal_bismainframe() const {
  return bismainframe_;
}
inline bool CMsgNodeHasFocus::bismainframe() const {
  // @@protoc_insertion_point(field_get:CMsgNodeHasFocus.bIsMainFrame)
  return _internal_bismainframe();
}
inline void CMsgNodeHasFocus::_internal_set_bismainframe(bool value) {
  _has_bits_[0] |= 0x00000080u;
  bismainframe_ = value;
}
inline void CMsgNodeHasFocus::set_bismainframe(bool value) {
  _internal_set_bismainframe(value);
  // @@protoc_insertion_point(field_set:CMsgNodeHasFocus.bIsMainFrame)
}

// -------------------------------------------------------------------

// CMsgZoomToFocusedElement

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToFocusedElement::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgZoomToFocusedElement::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgZoomToFocusedElement::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgZoomToFocusedElement::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgZoomToFocusedElement::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgZoomToFocusedElement.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgZoomToFocusedElement::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgZoomToFocusedElement::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgZoomToFocusedElement.browser_handle)
}

// -------------------------------------------------------------------

// CMsgCloseFullScreenFlashIfOpen

// optional uint32 browser_handle = 1;
inline bool CMsgCloseFullScreenFlashIfOpen::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCloseFullScreenFlashIfOpen::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgCloseFullScreenFlashIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCloseFullScreenFlashIfOpen::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgCloseFullScreenFlashIfOpen::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgCloseFullScreenFlashIfOpen.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgCloseFullScreenFlashIfOpen::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgCloseFullScreenFlashIfOpen::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgCloseFullScreenFlashIfOpen.browser_handle)
}

// -------------------------------------------------------------------

// CMsgPauseFullScreenFlashMovieIfOpen

// optional uint32 browser_handle = 1;
inline bool CMsgPauseFullScreenFlashMovieIfOpen::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPauseFullScreenFlashMovieIfOpen::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPauseFullScreenFlashMovieIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPauseFullScreenFlashMovieIfOpen::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPauseFullScreenFlashMovieIfOpen::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPauseFullScreenFlashMovieIfOpen.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPauseFullScreenFlashMovieIfOpen::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgPauseFullScreenFlashMovieIfOpen::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPauseFullScreenFlashMovieIfOpen.browser_handle)
}

// -------------------------------------------------------------------

// CMsgFocusedNodeText

// optional uint32 browser_handle = 1;
inline bool CMsgFocusedNodeText::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFocusedNodeText::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFocusedNodeText::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgFocusedNodeText::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFocusedNodeText::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFocusedNodeText.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFocusedNodeText::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgFocusedNodeText::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFocusedNodeText.browser_handle)
}

// -------------------------------------------------------------------

// CMsgFocusedNodeTextResponse

// optional uint32 browser_handle = 1;
inline bool CMsgFocusedNodeTextResponse::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFocusedNodeTextResponse::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgFocusedNodeTextResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgFocusedNodeTextResponse::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgFocusedNodeTextResponse::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgFocusedNodeTextResponse.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgFocusedNodeTextResponse::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgFocusedNodeTextResponse::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgFocusedNodeTextResponse.browser_handle)
}

// optional string value = 2;
inline bool CMsgFocusedNodeTextResponse::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFocusedNodeTextResponse::has_value() const {
  return _internal_has_value();
}
inline void CMsgFocusedNodeTextResponse::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgFocusedNodeTextResponse::value() const {
  // @@protoc_insertion_point(field_get:CMsgFocusedNodeTextResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgFocusedNodeTextResponse::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgFocusedNodeTextResponse.value)
}
inline std::string* CMsgFocusedNodeTextResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgFocusedNodeTextResponse.value)
  return _s;
}
inline const std::string& CMsgFocusedNodeTextResponse::_internal_value() const {
  return value_.Get();
}
inline void CMsgFocusedNodeTextResponse::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgFocusedNodeTextResponse::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgFocusedNodeTextResponse::release_value() {
  // @@protoc_insertion_point(field_release:CMsgFocusedNodeTextResponse.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgFocusedNodeTextResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgFocusedNodeTextResponse.value)
}

// -------------------------------------------------------------------

// CMsgBuildID

// optional uint64 build_id = 1;
inline bool CMsgBuildID::_internal_has_build_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBuildID::has_build_id() const {
  return _internal_has_build_id();
}
inline void CMsgBuildID::clear_build_id() {
  build_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgBuildID::_internal_build_id() const {
  return build_id_;
}
inline uint64_t CMsgBuildID::build_id() const {
  // @@protoc_insertion_point(field_get:CMsgBuildID.build_id)
  return _internal_build_id();
}
inline void CMsgBuildID::_internal_set_build_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  build_id_ = value;
}
inline void CMsgBuildID::set_build_id(uint64_t value) {
  _internal_set_build_id(value);
  // @@protoc_insertion_point(field_set:CMsgBuildID.build_id)
}

// -------------------------------------------------------------------

// CMsgOpenDevTools

// optional uint32 browser_handle = 1;
inline bool CMsgOpenDevTools::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgOpenDevTools::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgOpenDevTools::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgOpenDevTools::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgOpenDevTools::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgOpenDevTools.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgOpenDevTools::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgOpenDevTools::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgOpenDevTools.browser_handle)
}

// -------------------------------------------------------------------

// CMsgCloseDevTools

// optional uint32 browser_handle = 1;
inline bool CMsgCloseDevTools::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCloseDevTools::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgCloseDevTools::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCloseDevTools::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgCloseDevTools::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgCloseDevTools.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgCloseDevTools::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgCloseDevTools::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgCloseDevTools.browser_handle)
}

// -------------------------------------------------------------------

// CMsgUnlockH264

// optional uint32 browser_handle = 1;
inline bool CMsgUnlockH264::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgUnlockH264::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgUnlockH264::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgUnlockH264::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgUnlockH264::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgUnlockH264.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgUnlockH264::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgUnlockH264::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgUnlockH264.browser_handle)
}

// optional string unlock_code = 2;
inline bool CMsgUnlockH264::_internal_has_unlock_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgUnlockH264::has_unlock_code() const {
  return _internal_has_unlock_code();
}
inline void CMsgUnlockH264::clear_unlock_code() {
  unlock_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgUnlockH264::unlock_code() const {
  // @@protoc_insertion_point(field_get:CMsgUnlockH264.unlock_code)
  return _internal_unlock_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgUnlockH264::set_unlock_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 unlock_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgUnlockH264.unlock_code)
}
inline std::string* CMsgUnlockH264::mutable_unlock_code() {
  std::string* _s = _internal_mutable_unlock_code();
  // @@protoc_insertion_point(field_mutable:CMsgUnlockH264.unlock_code)
  return _s;
}
inline const std::string& CMsgUnlockH264::_internal_unlock_code() const {
  return unlock_code_.Get();
}
inline void CMsgUnlockH264::_internal_set_unlock_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unlock_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgUnlockH264::_internal_mutable_unlock_code() {
  _has_bits_[0] |= 0x00000001u;
  return unlock_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgUnlockH264::release_unlock_code() {
  // @@protoc_insertion_point(field_release:CMsgUnlockH264.unlock_code)
  if (!_internal_has_unlock_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = unlock_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unlock_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unlock_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgUnlockH264::set_allocated_unlock_code(std::string* unlock_code) {
  if (unlock_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unlock_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unlock_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unlock_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unlock_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgUnlockH264.unlock_code)
}

// -------------------------------------------------------------------

// CMsgScreenInformationChanged

// optional uint32 browser_handle = 1;
inline bool CMsgScreenInformationChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgScreenInformationChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgScreenInformationChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgScreenInformationChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgScreenInformationChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.browser_handle)
}

// optional uint32 override_width = 2;
inline bool CMsgScreenInformationChanged::_internal_has_override_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_override_width() const {
  return _internal_has_override_width();
}
inline void CMsgScreenInformationChanged::clear_override_width() {
  override_width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_override_width() const {
  return override_width_;
}
inline uint32_t CMsgScreenInformationChanged::override_width() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.override_width)
  return _internal_override_width();
}
inline void CMsgScreenInformationChanged::_internal_set_override_width(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  override_width_ = value;
}
inline void CMsgScreenInformationChanged::set_override_width(uint32_t value) {
  _internal_set_override_width(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.override_width)
}

// optional uint32 override_height = 3;
inline bool CMsgScreenInformationChanged::_internal_has_override_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_override_height() const {
  return _internal_has_override_height();
}
inline void CMsgScreenInformationChanged::clear_override_height() {
  override_height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_override_height() const {
  return override_height_;
}
inline uint32_t CMsgScreenInformationChanged::override_height() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.override_height)
  return _internal_override_height();
}
inline void CMsgScreenInformationChanged::_internal_set_override_height(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  override_height_ = value;
}
inline void CMsgScreenInformationChanged::set_override_height(uint32_t value) {
  _internal_set_override_height(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.override_height)
}

// optional uint32 monitor_left = 4;
inline bool CMsgScreenInformationChanged::_internal_has_monitor_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_monitor_left() const {
  return _internal_has_monitor_left();
}
inline void CMsgScreenInformationChanged::clear_monitor_left() {
  monitor_left_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_monitor_left() const {
  return monitor_left_;
}
inline uint32_t CMsgScreenInformationChanged::monitor_left() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.monitor_left)
  return _internal_monitor_left();
}
inline void CMsgScreenInformationChanged::_internal_set_monitor_left(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  monitor_left_ = value;
}
inline void CMsgScreenInformationChanged::set_monitor_left(uint32_t value) {
  _internal_set_monitor_left(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.monitor_left)
}

// optional uint32 monitor_top = 5;
inline bool CMsgScreenInformationChanged::_internal_has_monitor_top() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_monitor_top() const {
  return _internal_has_monitor_top();
}
inline void CMsgScreenInformationChanged::clear_monitor_top() {
  monitor_top_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_monitor_top() const {
  return monitor_top_;
}
inline uint32_t CMsgScreenInformationChanged::monitor_top() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.monitor_top)
  return _internal_monitor_top();
}
inline void CMsgScreenInformationChanged::_internal_set_monitor_top(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  monitor_top_ = value;
}
inline void CMsgScreenInformationChanged::set_monitor_top(uint32_t value) {
  _internal_set_monitor_top(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.monitor_top)
}

// optional uint32 monitor_right = 6;
inline bool CMsgScreenInformationChanged::_internal_has_monitor_right() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_monitor_right() const {
  return _internal_has_monitor_right();
}
inline void CMsgScreenInformationChanged::clear_monitor_right() {
  monitor_right_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_monitor_right() const {
  return monitor_right_;
}
inline uint32_t CMsgScreenInformationChanged::monitor_right() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.monitor_right)
  return _internal_monitor_right();
}
inline void CMsgScreenInformationChanged::_internal_set_monitor_right(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  monitor_right_ = value;
}
inline void CMsgScreenInformationChanged::set_monitor_right(uint32_t value) {
  _internal_set_monitor_right(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.monitor_right)
}

// optional uint32 monitor_bottom = 7;
inline bool CMsgScreenInformationChanged::_internal_has_monitor_bottom() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_monitor_bottom() const {
  return _internal_has_monitor_bottom();
}
inline void CMsgScreenInformationChanged::clear_monitor_bottom() {
  monitor_bottom_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_monitor_bottom() const {
  return monitor_bottom_;
}
inline uint32_t CMsgScreenInformationChanged::monitor_bottom() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.monitor_bottom)
  return _internal_monitor_bottom();
}
inline void CMsgScreenInformationChanged::_internal_set_monitor_bottom(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  monitor_bottom_ = value;
}
inline void CMsgScreenInformationChanged::set_monitor_bottom(uint32_t value) {
  _internal_set_monitor_bottom(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.monitor_bottom)
}

// optional uint32 usable_left = 8;
inline bool CMsgScreenInformationChanged::_internal_has_usable_left() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_usable_left() const {
  return _internal_has_usable_left();
}
inline void CMsgScreenInformationChanged::clear_usable_left() {
  usable_left_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_usable_left() const {
  return usable_left_;
}
inline uint32_t CMsgScreenInformationChanged::usable_left() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.usable_left)
  return _internal_usable_left();
}
inline void CMsgScreenInformationChanged::_internal_set_usable_left(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  usable_left_ = value;
}
inline void CMsgScreenInformationChanged::set_usable_left(uint32_t value) {
  _internal_set_usable_left(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.usable_left)
}

// optional uint32 usable_top = 9;
inline bool CMsgScreenInformationChanged::_internal_has_usable_top() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_usable_top() const {
  return _internal_has_usable_top();
}
inline void CMsgScreenInformationChanged::clear_usable_top() {
  usable_top_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_usable_top() const {
  return usable_top_;
}
inline uint32_t CMsgScreenInformationChanged::usable_top() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.usable_top)
  return _internal_usable_top();
}
inline void CMsgScreenInformationChanged::_internal_set_usable_top(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  usable_top_ = value;
}
inline void CMsgScreenInformationChanged::set_usable_top(uint32_t value) {
  _internal_set_usable_top(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.usable_top)
}

// optional uint32 usable_right = 10;
inline bool CMsgScreenInformationChanged::_internal_has_usable_right() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_usable_right() const {
  return _internal_has_usable_right();
}
inline void CMsgScreenInformationChanged::clear_usable_right() {
  usable_right_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_usable_right() const {
  return usable_right_;
}
inline uint32_t CMsgScreenInformationChanged::usable_right() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.usable_right)
  return _internal_usable_right();
}
inline void CMsgScreenInformationChanged::_internal_set_usable_right(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  usable_right_ = value;
}
inline void CMsgScreenInformationChanged::set_usable_right(uint32_t value) {
  _internal_set_usable_right(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.usable_right)
}

// optional uint32 usable_bottom = 11;
inline bool CMsgScreenInformationChanged::_internal_has_usable_bottom() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgScreenInformationChanged::has_usable_bottom() const {
  return _internal_has_usable_bottom();
}
inline void CMsgScreenInformationChanged::clear_usable_bottom() {
  usable_bottom_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgScreenInformationChanged::_internal_usable_bottom() const {
  return usable_bottom_;
}
inline uint32_t CMsgScreenInformationChanged::usable_bottom() const {
  // @@protoc_insertion_point(field_get:CMsgScreenInformationChanged.usable_bottom)
  return _internal_usable_bottom();
}
inline void CMsgScreenInformationChanged::_internal_set_usable_bottom(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  usable_bottom_ = value;
}
inline void CMsgScreenInformationChanged::set_usable_bottom(uint32_t value) {
  _internal_set_usable_bottom(value);
  // @@protoc_insertion_point(field_set:CMsgScreenInformationChanged.usable_bottom)
}

// -------------------------------------------------------------------

// CMsgClearAllCookies

// optional uint32 browser_handle = 1;
inline bool CMsgClearAllCookies::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClearAllCookies::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgClearAllCookies::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClearAllCookies::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgClearAllCookies::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgClearAllCookies.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgClearAllCookies::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgClearAllCookies::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgClearAllCookies.browser_handle)
}

// -------------------------------------------------------------------

// CMsgScreenDPI

// optional uint32 browser_handle = 1;
inline bool CMsgScreenDPI::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgScreenDPI::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgScreenDPI::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgScreenDPI::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgScreenDPI::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgScreenDPI.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgScreenDPI::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgScreenDPI::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgScreenDPI.browser_handle)
}

// optional float dpi_scaling = 2;
inline bool CMsgScreenDPI::_internal_has_dpi_scaling() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgScreenDPI::has_dpi_scaling() const {
  return _internal_has_dpi_scaling();
}
inline void CMsgScreenDPI::clear_dpi_scaling() {
  dpi_scaling_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgScreenDPI::_internal_dpi_scaling() const {
  return dpi_scaling_;
}
inline float CMsgScreenDPI::dpi_scaling() const {
  // @@protoc_insertion_point(field_get:CMsgScreenDPI.dpi_scaling)
  return _internal_dpi_scaling();
}
inline void CMsgScreenDPI::_internal_set_dpi_scaling(float value) {
  _has_bits_[0] |= 0x00000002u;
  dpi_scaling_ = value;
}
inline void CMsgScreenDPI::set_dpi_scaling(float value) {
  _internal_set_dpi_scaling(value);
  // @@protoc_insertion_point(field_set:CMsgScreenDPI.dpi_scaling)
}

// -------------------------------------------------------------------

// CMsgAckScreenDPI

// optional uint32 browser_handle = 1;
inline bool CMsgAckScreenDPI::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAckScreenDPI::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgAckScreenDPI::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAckScreenDPI::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgAckScreenDPI::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgAckScreenDPI.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgAckScreenDPI::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgAckScreenDPI::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgAckScreenDPI.browser_handle)
}

// -------------------------------------------------------------------

// CMsgAuthedSteamDomains

// repeated string domains = 1;
inline int CMsgAuthedSteamDomains::_internal_domains_size() const {
  return domains_.size();
}
inline int CMsgAuthedSteamDomains::domains_size() const {
  return _internal_domains_size();
}
inline void CMsgAuthedSteamDomains::clear_domains() {
  domains_.Clear();
}
inline std::string* CMsgAuthedSteamDomains::add_domains() {
  std::string* _s = _internal_add_domains();
  // @@protoc_insertion_point(field_add_mutable:CMsgAuthedSteamDomains.domains)
  return _s;
}
inline const std::string& CMsgAuthedSteamDomains::_internal_domains(int index) const {
  return domains_.Get(index);
}
inline const std::string& CMsgAuthedSteamDomains::domains(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAuthedSteamDomains.domains)
  return _internal_domains(index);
}
inline std::string* CMsgAuthedSteamDomains::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAuthedSteamDomains.domains)
  return domains_.Mutable(index);
}
inline void CMsgAuthedSteamDomains::set_domains(int index, const std::string& value) {
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::set_domains(int index, std::string&& value) {
  domains_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgAuthedSteamDomains.domains)
}
inline std::string* CMsgAuthedSteamDomains::_internal_add_domains() {
  return domains_.Add();
}
inline void CMsgAuthedSteamDomains::add_domains(const std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::add_domains(std::string&& value) {
  domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::add_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgAuthedSteamDomains.domains)
}
inline void CMsgAuthedSteamDomains::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgAuthedSteamDomains.domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgAuthedSteamDomains::domains() const {
  // @@protoc_insertion_point(field_list:CMsgAuthedSteamDomains.domains)
  return domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgAuthedSteamDomains::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAuthedSteamDomains.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// CMsgSteamAuthNeeded

// optional bool filler = 1;
inline bool CMsgSteamAuthNeeded::_internal_has_filler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamAuthNeeded::has_filler() const {
  return _internal_has_filler();
}
inline void CMsgSteamAuthNeeded::clear_filler() {
  filler_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSteamAuthNeeded::_internal_filler() const {
  return filler_;
}
inline bool CMsgSteamAuthNeeded::filler() const {
  // @@protoc_insertion_point(field_get:CMsgSteamAuthNeeded.filler)
  return _internal_filler();
}
inline void CMsgSteamAuthNeeded::_internal_set_filler(bool value) {
  _has_bits_[0] |= 0x00000001u;
  filler_ = value;
}
inline void CMsgSteamAuthNeeded::set_filler(bool value) {
  _internal_set_filler(value);
  // @@protoc_insertion_point(field_set:CMsgSteamAuthNeeded.filler)
}

// -------------------------------------------------------------------

// CMsgSteamAuthCookiesSet

// optional bool success = 1;
inline bool CMsgSteamAuthCookiesSet::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamAuthCookiesSet::has_success() const {
  return _internal_has_success();
}
inline void CMsgSteamAuthCookiesSet::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSteamAuthCookiesSet::_internal_success() const {
  return success_;
}
inline bool CMsgSteamAuthCookiesSet::success() const {
  // @@protoc_insertion_point(field_get:CMsgSteamAuthCookiesSet.success)
  return _internal_success();
}
inline void CMsgSteamAuthCookiesSet::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CMsgSteamAuthCookiesSet::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CMsgSteamAuthCookiesSet.success)
}

// -------------------------------------------------------------------

// CMsgJSRegisterMethod

// optional uint32 browser_handle = 1;
inline bool CMsgJSRegisterMethod::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSRegisterMethod::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSRegisterMethod::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSRegisterMethod::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSRegisterMethod::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSRegisterMethod.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSRegisterMethod::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgJSRegisterMethod::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSRegisterMethod.browser_handle)
}

// optional string name = 2;
inline bool CMsgJSRegisterMethod::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSRegisterMethod::has_name() const {
  return _internal_has_name();
}
inline void CMsgJSRegisterMethod::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSRegisterMethod::name() const {
  // @@protoc_insertion_point(field_get:CMsgJSRegisterMethod.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSRegisterMethod::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSRegisterMethod.name)
}
inline std::string* CMsgJSRegisterMethod::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgJSRegisterMethod.name)
  return _s;
}
inline const std::string& CMsgJSRegisterMethod::_internal_name() const {
  return name_.Get();
}
inline void CMsgJSRegisterMethod::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSRegisterMethod::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSRegisterMethod::release_name() {
  // @@protoc_insertion_point(field_release:CMsgJSRegisterMethod.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSRegisterMethod::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSRegisterMethod.name)
}

// optional .EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
inline bool CMsgJSRegisterMethod::_internal_has_method_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSRegisterMethod::has_method_type() const {
  return _internal_has_method_type();
}
inline void CMsgJSRegisterMethod::clear_method_type() {
  method_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EJSRegisterMethodType CMsgJSRegisterMethod::_internal_method_type() const {
  return static_cast< ::EJSRegisterMethodType >(method_type_);
}
inline ::EJSRegisterMethodType CMsgJSRegisterMethod::method_type() const {
  // @@protoc_insertion_point(field_get:CMsgJSRegisterMethod.method_type)
  return _internal_method_type();
}
inline void CMsgJSRegisterMethod::_internal_set_method_type(::EJSRegisterMethodType value) {
  assert(::EJSRegisterMethodType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  method_type_ = value;
}
inline void CMsgJSRegisterMethod::set_method_type(::EJSRegisterMethodType value) {
  _internal_set_method_type(value);
  // @@protoc_insertion_point(field_set:CMsgJSRegisterMethod.method_type)
}

// -------------------------------------------------------------------

// CMsgJSValue_JSObjectProperty

// optional string name = 1;
inline bool CMsgJSValue_JSObjectProperty::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSValue_JSObjectProperty::has_name() const {
  return _internal_has_name();
}
inline void CMsgJSValue_JSObjectProperty::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSValue_JSObjectProperty::name() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.JSObjectProperty.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSValue_JSObjectProperty::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSValue.JSObjectProperty.name)
}
inline std::string* CMsgJSValue_JSObjectProperty::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.JSObjectProperty.name)
  return _s;
}
inline const std::string& CMsgJSValue_JSObjectProperty::_internal_name() const {
  return name_.Get();
}
inline void CMsgJSValue_JSObjectProperty::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSValue_JSObjectProperty::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSValue_JSObjectProperty::release_name() {
  // @@protoc_insertion_point(field_release:CMsgJSValue.JSObjectProperty.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSValue_JSObjectProperty::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSValue.JSObjectProperty.name)
}

// optional .CMsgJSValue value = 2;
inline bool CMsgJSValue_JSObjectProperty::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool CMsgJSValue_JSObjectProperty::has_value() const {
  return _internal_has_value();
}
inline void CMsgJSValue_JSObjectProperty::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgJSValue& CMsgJSValue_JSObjectProperty::_internal_value() const {
  const ::CMsgJSValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgJSValue&>(
      ::_CMsgJSValue_default_instance_);
}
inline const ::CMsgJSValue& CMsgJSValue_JSObjectProperty::value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.JSObjectProperty.value)
  return _internal_value();
}
inline void CMsgJSValue_JSObjectProperty::unsafe_arena_set_allocated_value(
    ::CMsgJSValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgJSValue.JSObjectProperty.value)
}
inline ::CMsgJSValue* CMsgJSValue_JSObjectProperty::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgJSValue* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgJSValue* CMsgJSValue_JSObjectProperty::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:CMsgJSValue.JSObjectProperty.value)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgJSValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::CMsgJSValue* CMsgJSValue_JSObjectProperty::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgJSValue>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::CMsgJSValue* CMsgJSValue_JSObjectProperty::mutable_value() {
  ::CMsgJSValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.JSObjectProperty.value)
  return _msg;
}
inline void CMsgJSValue_JSObjectProperty::set_allocated_value(::CMsgJSValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgJSValue>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:CMsgJSValue.JSObjectProperty.value)
}

// -------------------------------------------------------------------

// CMsgJSValue

// optional bool bool_value = 1;
inline bool CMsgJSValue::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgJSValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void CMsgJSValue::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgJSValue::_internal_bool_value() const {
  return bool_value_;
}
inline bool CMsgJSValue::bool_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.bool_value)
  return _internal_bool_value();
}
inline void CMsgJSValue::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000040u;
  bool_value_ = value;
}
inline void CMsgJSValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.bool_value)
}

// optional int32 int_value = 2;
inline bool CMsgJSValue::_internal_has_int_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void CMsgJSValue::clear_int_value() {
  int_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgJSValue::_internal_int_value() const {
  return int_value_;
}
inline int32_t CMsgJSValue::int_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.int_value)
  return _internal_int_value();
}
inline void CMsgJSValue::_internal_set_int_value(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  int_value_ = value;
}
inline void CMsgJSValue::set_int_value(int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.int_value)
}

// optional uint32 uint_value = 3;
inline bool CMsgJSValue::_internal_has_uint_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgJSValue::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void CMsgJSValue::clear_uint_value() {
  uint_value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgJSValue::_internal_uint_value() const {
  return uint_value_;
}
inline uint32_t CMsgJSValue::uint_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.uint_value)
  return _internal_uint_value();
}
inline void CMsgJSValue::_internal_set_uint_value(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  uint_value_ = value;
}
inline void CMsgJSValue::set_uint_value(uint32_t value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.uint_value)
}

// optional double double_value = 4;
inline bool CMsgJSValue::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgJSValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void CMsgJSValue::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CMsgJSValue::_internal_double_value() const {
  return double_value_;
}
inline double CMsgJSValue::double_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.double_value)
  return _internal_double_value();
}
inline void CMsgJSValue::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  double_value_ = value;
}
inline void CMsgJSValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.double_value)
}

// optional string string_value = 5;
inline bool CMsgJSValue::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void CMsgJSValue::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSValue::string_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSValue::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSValue.string_value)
}
inline std::string* CMsgJSValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.string_value)
  return _s;
}
inline const std::string& CMsgJSValue::_internal_string_value() const {
  return string_value_.Get();
}
inline void CMsgJSValue::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSValue::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSValue::release_string_value() {
  // @@protoc_insertion_point(field_release:CMsgJSValue.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSValue::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSValue.string_value)
}

// optional uint64 function_handle = 6;
inline bool CMsgJSValue::_internal_has_function_handle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgJSValue::has_function_handle() const {
  return _internal_has_function_handle();
}
inline void CMsgJSValue::clear_function_handle() {
  function_handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgJSValue::_internal_function_handle() const {
  return function_handle_;
}
inline uint64_t CMsgJSValue::function_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.function_handle)
  return _internal_function_handle();
}
inline void CMsgJSValue::_internal_set_function_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  function_handle_ = value;
}
inline void CMsgJSValue::set_function_handle(uint64_t value) {
  _internal_set_function_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.function_handle)
}

// optional bytes bytes_value = 12;
inline bool CMsgJSValue::_internal_has_bytes_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSValue::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void CMsgJSValue::clear_bytes_value() {
  bytes_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgJSValue::bytes_value() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSValue::set_bytes_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSValue.bytes_value)
}
inline std::string* CMsgJSValue::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.bytes_value)
  return _s;
}
inline const std::string& CMsgJSValue::_internal_bytes_value() const {
  return bytes_value_.Get();
}
inline void CMsgJSValue::_internal_set_bytes_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSValue::_internal_mutable_bytes_value() {
  _has_bits_[0] |= 0x00000002u;
  return bytes_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSValue::release_bytes_value() {
  // @@protoc_insertion_point(field_release:CMsgJSValue.bytes_value)
  if (!_internal_has_bytes_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSValue::set_allocated_bytes_value(std::string* bytes_value) {
  if (bytes_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSValue.bytes_value)
}

// optional bool is_array = 8;
inline bool CMsgJSValue::_internal_has_is_array() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgJSValue::has_is_array() const {
  return _internal_has_is_array();
}
inline void CMsgJSValue::clear_is_array() {
  is_array_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgJSValue::_internal_is_array() const {
  return is_array_;
}
inline bool CMsgJSValue::is_array() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.is_array)
  return _internal_is_array();
}
inline void CMsgJSValue::_internal_set_is_array(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_array_ = value;
}
inline void CMsgJSValue::set_is_array(bool value) {
  _internal_set_is_array(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.is_array)
}

// repeated .CMsgJSValue array_values = 9;
inline int CMsgJSValue::_internal_array_values_size() const {
  return array_values_.size();
}
inline int CMsgJSValue::array_values_size() const {
  return _internal_array_values_size();
}
inline void CMsgJSValue::clear_array_values() {
  array_values_.Clear();
}
inline ::CMsgJSValue* CMsgJSValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.array_values)
  return array_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
CMsgJSValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJSValue.array_values)
  return &array_values_;
}
inline const ::CMsgJSValue& CMsgJSValue::_internal_array_values(int index) const {
  return array_values_.Get(index);
}
inline const ::CMsgJSValue& CMsgJSValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.array_values)
  return _internal_array_values(index);
}
inline ::CMsgJSValue* CMsgJSValue::_internal_add_array_values() {
  return array_values_.Add();
}
inline ::CMsgJSValue* CMsgJSValue::add_array_values() {
  ::CMsgJSValue* _add = _internal_add_array_values();
  // @@protoc_insertion_point(field_add:CMsgJSValue.array_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
CMsgJSValue::array_values() const {
  // @@protoc_insertion_point(field_list:CMsgJSValue.array_values)
  return array_values_;
}

// optional bool is_object = 10;
inline bool CMsgJSValue::_internal_has_is_object() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgJSValue::has_is_object() const {
  return _internal_has_is_object();
}
inline void CMsgJSValue::clear_is_object() {
  is_object_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgJSValue::_internal_is_object() const {
  return is_object_;
}
inline bool CMsgJSValue::is_object() const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.is_object)
  return _internal_is_object();
}
inline void CMsgJSValue::_internal_set_is_object(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_object_ = value;
}
inline void CMsgJSValue::set_is_object(bool value) {
  _internal_set_is_object(value);
  // @@protoc_insertion_point(field_set:CMsgJSValue.is_object)
}

// repeated .CMsgJSValue.JSObjectProperty object_properties = 11;
inline int CMsgJSValue::_internal_object_properties_size() const {
  return object_properties_.size();
}
inline int CMsgJSValue::object_properties_size() const {
  return _internal_object_properties_size();
}
inline void CMsgJSValue::clear_object_properties() {
  object_properties_.Clear();
}
inline ::CMsgJSValue_JSObjectProperty* CMsgJSValue::mutable_object_properties(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJSValue.object_properties)
  return object_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue_JSObjectProperty >*
CMsgJSValue::mutable_object_properties() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJSValue.object_properties)
  return &object_properties_;
}
inline const ::CMsgJSValue_JSObjectProperty& CMsgJSValue::_internal_object_properties(int index) const {
  return object_properties_.Get(index);
}
inline const ::CMsgJSValue_JSObjectProperty& CMsgJSValue::object_properties(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJSValue.object_properties)
  return _internal_object_properties(index);
}
inline ::CMsgJSValue_JSObjectProperty* CMsgJSValue::_internal_add_object_properties() {
  return object_properties_.Add();
}
inline ::CMsgJSValue_JSObjectProperty* CMsgJSValue::add_object_properties() {
  ::CMsgJSValue_JSObjectProperty* _add = _internal_add_object_properties();
  // @@protoc_insertion_point(field_add:CMsgJSValue.object_properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue_JSObjectProperty >&
CMsgJSValue::object_properties() const {
  // @@protoc_insertion_point(field_list:CMsgJSValue.object_properties)
  return object_properties_;
}

// -------------------------------------------------------------------

// CMsgJSMethodCall

// optional uint32 browser_handle = 1;
inline bool CMsgJSMethodCall::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSMethodCall::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSMethodCall::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSMethodCall::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSMethodCall::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSMethodCall.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSMethodCall::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgJSMethodCall::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSMethodCall.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgJSMethodCall::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSMethodCall::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgJSMethodCall::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgJSMethodCall::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgJSMethodCall::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSMethodCall.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgJSMethodCall::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  owning_browser_handle_ = value;
}
inline void CMsgJSMethodCall::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSMethodCall.owning_browser_handle)
}

// optional string name = 3;
inline bool CMsgJSMethodCall::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSMethodCall::has_name() const {
  return _internal_has_name();
}
inline void CMsgJSMethodCall::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSMethodCall::name() const {
  // @@protoc_insertion_point(field_get:CMsgJSMethodCall.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSMethodCall::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSMethodCall.name)
}
inline std::string* CMsgJSMethodCall::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgJSMethodCall.name)
  return _s;
}
inline const std::string& CMsgJSMethodCall::_internal_name() const {
  return name_.Get();
}
inline void CMsgJSMethodCall::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSMethodCall::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSMethodCall::release_name() {
  // @@protoc_insertion_point(field_release:CMsgJSMethodCall.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSMethodCall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSMethodCall.name)
}

// repeated .CMsgJSValue arguments = 4;
inline int CMsgJSMethodCall::_internal_arguments_size() const {
  return arguments_.size();
}
inline int CMsgJSMethodCall::arguments_size() const {
  return _internal_arguments_size();
}
inline void CMsgJSMethodCall::clear_arguments() {
  arguments_.Clear();
}
inline ::CMsgJSValue* CMsgJSMethodCall::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJSMethodCall.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
CMsgJSMethodCall::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJSMethodCall.arguments)
  return &arguments_;
}
inline const ::CMsgJSValue& CMsgJSMethodCall::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::CMsgJSValue& CMsgJSMethodCall::arguments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJSMethodCall.arguments)
  return _internal_arguments(index);
}
inline ::CMsgJSValue* CMsgJSMethodCall::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::CMsgJSValue* CMsgJSMethodCall::add_arguments() {
  ::CMsgJSValue* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:CMsgJSMethodCall.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
CMsgJSMethodCall::arguments() const {
  // @@protoc_insertion_point(field_list:CMsgJSMethodCall.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// CMsgJSExecuteCallback

// optional uint32 browser_handle = 1;
inline bool CMsgJSExecuteCallback::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSExecuteCallback::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSExecuteCallback::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgJSExecuteCallback::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSExecuteCallback::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSExecuteCallback.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSExecuteCallback::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgJSExecuteCallback::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSExecuteCallback.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgJSExecuteCallback::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSExecuteCallback::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgJSExecuteCallback::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSExecuteCallback::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgJSExecuteCallback::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSExecuteCallback.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgJSExecuteCallback::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  owning_browser_handle_ = value;
}
inline void CMsgJSExecuteCallback::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSExecuteCallback.owning_browser_handle)
}

// optional uint64 function_handle = 3;
inline bool CMsgJSExecuteCallback::_internal_has_function_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSExecuteCallback::has_function_handle() const {
  return _internal_has_function_handle();
}
inline void CMsgJSExecuteCallback::clear_function_handle() {
  function_handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgJSExecuteCallback::_internal_function_handle() const {
  return function_handle_;
}
inline uint64_t CMsgJSExecuteCallback::function_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSExecuteCallback.function_handle)
  return _internal_function_handle();
}
inline void CMsgJSExecuteCallback::_internal_set_function_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  function_handle_ = value;
}
inline void CMsgJSExecuteCallback::set_function_handle(uint64_t value) {
  _internal_set_function_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSExecuteCallback.function_handle)
}

// repeated .CMsgJSValue arguments = 4;
inline int CMsgJSExecuteCallback::_internal_arguments_size() const {
  return arguments_.size();
}
inline int CMsgJSExecuteCallback::arguments_size() const {
  return _internal_arguments_size();
}
inline void CMsgJSExecuteCallback::clear_arguments() {
  arguments_.Clear();
}
inline ::CMsgJSValue* CMsgJSExecuteCallback::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJSExecuteCallback.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >*
CMsgJSExecuteCallback::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJSExecuteCallback.arguments)
  return &arguments_;
}
inline const ::CMsgJSValue& CMsgJSExecuteCallback::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::CMsgJSValue& CMsgJSExecuteCallback::arguments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJSExecuteCallback.arguments)
  return _internal_arguments(index);
}
inline ::CMsgJSValue* CMsgJSExecuteCallback::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::CMsgJSValue* CMsgJSExecuteCallback::add_arguments() {
  ::CMsgJSValue* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:CMsgJSExecuteCallback.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJSValue >&
CMsgJSExecuteCallback::arguments() const {
  // @@protoc_insertion_point(field_list:CMsgJSExecuteCallback.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// CMsgJSReleaseCallback

// optional uint32 browser_handle = 1;
inline bool CMsgJSReleaseCallback::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSReleaseCallback::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSReleaseCallback::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgJSReleaseCallback::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSReleaseCallback::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSReleaseCallback.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSReleaseCallback::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgJSReleaseCallback::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSReleaseCallback.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgJSReleaseCallback::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSReleaseCallback::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgJSReleaseCallback::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSReleaseCallback::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgJSReleaseCallback::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSReleaseCallback.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgJSReleaseCallback::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  owning_browser_handle_ = value;
}
inline void CMsgJSReleaseCallback::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSReleaseCallback.owning_browser_handle)
}

// optional uint64 function_handle = 3;
inline bool CMsgJSReleaseCallback::_internal_has_function_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSReleaseCallback::has_function_handle() const {
  return _internal_has_function_handle();
}
inline void CMsgJSReleaseCallback::clear_function_handle() {
  function_handle_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgJSReleaseCallback::_internal_function_handle() const {
  return function_handle_;
}
inline uint64_t CMsgJSReleaseCallback::function_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSReleaseCallback.function_handle)
  return _internal_function_handle();
}
inline void CMsgJSReleaseCallback::_internal_set_function_handle(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  function_handle_ = value;
}
inline void CMsgJSReleaseCallback::set_function_handle(uint64_t value) {
  _internal_set_function_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSReleaseCallback.function_handle)
}

// -------------------------------------------------------------------

// CMsgJSRaiseException

// optional uint32 browser_handle = 1;
inline bool CMsgJSRaiseException::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJSRaiseException::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgJSRaiseException::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgJSRaiseException::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgJSRaiseException::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSRaiseException.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgJSRaiseException::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgJSRaiseException::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSRaiseException.browser_handle)
}

// optional uint32 owning_browser_handle = 2;
inline bool CMsgJSRaiseException::_internal_has_owning_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJSRaiseException::has_owning_browser_handle() const {
  return _internal_has_owning_browser_handle();
}
inline void CMsgJSRaiseException::clear_owning_browser_handle() {
  owning_browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgJSRaiseException::_internal_owning_browser_handle() const {
  return owning_browser_handle_;
}
inline uint32_t CMsgJSRaiseException::owning_browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgJSRaiseException.owning_browser_handle)
  return _internal_owning_browser_handle();
}
inline void CMsgJSRaiseException::_internal_set_owning_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  owning_browser_handle_ = value;
}
inline void CMsgJSRaiseException::set_owning_browser_handle(uint32_t value) {
  _internal_set_owning_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgJSRaiseException.owning_browser_handle)
}

// optional string exception = 3;
inline bool CMsgJSRaiseException::_internal_has_exception() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJSRaiseException::has_exception() const {
  return _internal_has_exception();
}
inline void CMsgJSRaiseException::clear_exception() {
  exception_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJSRaiseException::exception() const {
  // @@protoc_insertion_point(field_get:CMsgJSRaiseException.exception)
  return _internal_exception();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgJSRaiseException::set_exception(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgJSRaiseException.exception)
}
inline std::string* CMsgJSRaiseException::mutable_exception() {
  std::string* _s = _internal_mutable_exception();
  // @@protoc_insertion_point(field_mutable:CMsgJSRaiseException.exception)
  return _s;
}
inline const std::string& CMsgJSRaiseException::_internal_exception() const {
  return exception_.Get();
}
inline void CMsgJSRaiseException::_internal_set_exception(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgJSRaiseException::_internal_mutable_exception() {
  _has_bits_[0] |= 0x00000001u;
  return exception_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgJSRaiseException::release_exception() {
  // @@protoc_insertion_point(field_release:CMsgJSRaiseException.exception)
  if (!_internal_has_exception()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = exception_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exception_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exception_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgJSRaiseException::set_allocated_exception(std::string* exception) {
  if (exception != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exception_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exception_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exception_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgJSRaiseException.exception)
}

// -------------------------------------------------------------------

// CMsgLoadLocalization

// optional uint32 browser_handle = 1;
inline bool CMsgLoadLocalization::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLoadLocalization::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgLoadLocalization::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLoadLocalization::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgLoadLocalization::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgLoadLocalization.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgLoadLocalization::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  browser_handle_ = value;
}
inline void CMsgLoadLocalization::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgLoadLocalization.browser_handle)
}

// optional string localization_path = 2;
inline bool CMsgLoadLocalization::_internal_has_localization_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLoadLocalization::has_localization_path() const {
  return _internal_has_localization_path();
}
inline void CMsgLoadLocalization::clear_localization_path() {
  localization_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLoadLocalization::localization_path() const {
  // @@protoc_insertion_point(field_get:CMsgLoadLocalization.localization_path)
  return _internal_localization_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadLocalization::set_localization_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 localization_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadLocalization.localization_path)
}
inline std::string* CMsgLoadLocalization::mutable_localization_path() {
  std::string* _s = _internal_mutable_localization_path();
  // @@protoc_insertion_point(field_mutable:CMsgLoadLocalization.localization_path)
  return _s;
}
inline const std::string& CMsgLoadLocalization::_internal_localization_path() const {
  return localization_path_.Get();
}
inline void CMsgLoadLocalization::_internal_set_localization_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  localization_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadLocalization::_internal_mutable_localization_path() {
  _has_bits_[0] |= 0x00000001u;
  return localization_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadLocalization::release_localization_path() {
  // @@protoc_insertion_point(field_release:CMsgLoadLocalization.localization_path)
  if (!_internal_has_localization_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = localization_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localization_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localization_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadLocalization::set_allocated_localization_path(std::string* localization_path) {
  if (localization_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  localization_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localization_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localization_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localization_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadLocalization.localization_path)
}

// optional string language = 3;
inline bool CMsgLoadLocalization::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLoadLocalization::has_language() const {
  return _internal_has_language();
}
inline void CMsgLoadLocalization::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgLoadLocalization::language() const {
  // @@protoc_insertion_point(field_get:CMsgLoadLocalization.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLoadLocalization::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLoadLocalization.language)
}
inline std::string* CMsgLoadLocalization::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CMsgLoadLocalization.language)
  return _s;
}
inline const std::string& CMsgLoadLocalization::_internal_language() const {
  return language_.Get();
}
inline void CMsgLoadLocalization::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgLoadLocalization::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000002u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgLoadLocalization::release_language() {
  // @@protoc_insertion_point(field_release:CMsgLoadLocalization.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLoadLocalization::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLoadLocalization.language)
}

// -------------------------------------------------------------------

// CMsgNotifyUserActivation

// optional uint32 browser_handle = 1;
inline bool CMsgNotifyUserActivation::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNotifyUserActivation::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgNotifyUserActivation::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNotifyUserActivation::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgNotifyUserActivation::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgNotifyUserActivation.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgNotifyUserActivation::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgNotifyUserActivation::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgNotifyUserActivation.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetNetFakeLocalSystemState

// optional uint32 state = 1;
inline bool CMsgSetNetFakeLocalSystemState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetNetFakeLocalSystemState::has_state() const {
  return _internal_has_state();
}
inline void CMsgSetNetFakeLocalSystemState::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetNetFakeLocalSystemState::_internal_state() const {
  return state_;
}
inline uint32_t CMsgSetNetFakeLocalSystemState::state() const {
  // @@protoc_insertion_point(field_get:CMsgSetNetFakeLocalSystemState.state)
  return _internal_state();
}
inline void CMsgSetNetFakeLocalSystemState::_internal_set_state(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void CMsgSetNetFakeLocalSystemState::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgSetNetFakeLocalSystemState.state)
}

// -------------------------------------------------------------------

// CMsgSetGameOverlayTargetPIDs

// optional uint32 browser_handle = 1;
inline bool CMsgSetGameOverlayTargetPIDs::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetGameOverlayTargetPIDs::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetGameOverlayTargetPIDs::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetGameOverlayTargetPIDs::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetGameOverlayTargetPIDs::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetGameOverlayTargetPIDs.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetGameOverlayTargetPIDs::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetGameOverlayTargetPIDs::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetGameOverlayTargetPIDs.browser_handle)
}

// repeated uint32 target_pid = 2;
inline int CMsgSetGameOverlayTargetPIDs::_internal_target_pid_size() const {
  return target_pid_.size();
}
inline int CMsgSetGameOverlayTargetPIDs::target_pid_size() const {
  return _internal_target_pid_size();
}
inline void CMsgSetGameOverlayTargetPIDs::clear_target_pid() {
  target_pid_.Clear();
}
inline uint32_t CMsgSetGameOverlayTargetPIDs::_internal_target_pid(int index) const {
  return target_pid_.Get(index);
}
inline uint32_t CMsgSetGameOverlayTargetPIDs::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSetGameOverlayTargetPIDs.target_pid)
  return _internal_target_pid(index);
}
inline void CMsgSetGameOverlayTargetPIDs::set_target_pid(int index, uint32_t value) {
  target_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSetGameOverlayTargetPIDs.target_pid)
}
inline void CMsgSetGameOverlayTargetPIDs::_internal_add_target_pid(uint32_t value) {
  target_pid_.Add(value);
}
inline void CMsgSetGameOverlayTargetPIDs::add_target_pid(uint32_t value) {
  _internal_add_target_pid(value);
  // @@protoc_insertion_point(field_add:CMsgSetGameOverlayTargetPIDs.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSetGameOverlayTargetPIDs::_internal_target_pid() const {
  return target_pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSetGameOverlayTargetPIDs::target_pid() const {
  // @@protoc_insertion_point(field_list:CMsgSetGameOverlayTargetPIDs.target_pid)
  return _internal_target_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSetGameOverlayTargetPIDs::_internal_mutable_target_pid() {
  return &target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSetGameOverlayTargetPIDs::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSetGameOverlayTargetPIDs.target_pid)
  return _internal_mutable_target_pid();
}

// -------------------------------------------------------------------

// CMsgGameOverlayTargetTextureID

// optional uint32 browser_handle = 1;
inline bool CMsgGameOverlayTargetTextureID::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameOverlayTargetTextureID::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgGameOverlayTargetTextureID::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameOverlayTargetTextureID::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgGameOverlayTargetTextureID::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTargetTextureID.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgGameOverlayTargetTextureID::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgGameOverlayTargetTextureID::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTargetTextureID.browser_handle)
}

// optional uint32 target_pid = 2;
inline bool CMsgGameOverlayTargetTextureID::_internal_has_target_pid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameOverlayTargetTextureID::has_target_pid() const {
  return _internal_has_target_pid();
}
inline void CMsgGameOverlayTargetTextureID::clear_target_pid() {
  target_pid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameOverlayTargetTextureID::_internal_target_pid() const {
  return target_pid_;
}
inline uint32_t CMsgGameOverlayTargetTextureID::target_pid() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTargetTextureID.target_pid)
  return _internal_target_pid();
}
inline void CMsgGameOverlayTargetTextureID::_internal_set_target_pid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  target_pid_ = value;
}
inline void CMsgGameOverlayTargetTextureID::set_target_pid(uint32_t value) {
  _internal_set_target_pid(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTargetTextureID.target_pid)
}

// optional uint32 texture_handle = 3;
inline bool CMsgGameOverlayTargetTextureID::_internal_has_texture_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameOverlayTargetTextureID::has_texture_handle() const {
  return _internal_has_texture_handle();
}
inline void CMsgGameOverlayTargetTextureID::clear_texture_handle() {
  texture_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameOverlayTargetTextureID::_internal_texture_handle() const {
  return texture_handle_;
}
inline uint32_t CMsgGameOverlayTargetTextureID::texture_handle() const {
  // @@protoc_insertion_point(field_get:CMsgGameOverlayTargetTextureID.texture_handle)
  return _internal_texture_handle();
}
inline void CMsgGameOverlayTargetTextureID::_internal_set_texture_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  texture_handle_ = value;
}
inline void CMsgGameOverlayTargetTextureID::set_texture_handle(uint32_t value) {
  _internal_set_texture_handle(value);
  // @@protoc_insertion_point(field_set:CMsgGameOverlayTargetTextureID.texture_handle)
}

// -------------------------------------------------------------------

// CMsgDraggableRegionsChanged_DraggableRects

// optional int32 x = 1;
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::has_x() const {
  return _internal_has_x();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::_internal_x() const {
  return x_;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::x() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.DraggableRects.x)
  return _internal_x();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgDraggableRegionsChanged_DraggableRects::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.DraggableRects.x)
}

// optional int32 y = 2;
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::has_y() const {
  return _internal_has_y();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::_internal_y() const {
  return y_;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::y() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.DraggableRects.y)
  return _internal_y();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgDraggableRegionsChanged_DraggableRects::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.DraggableRects.y)
}

// optional int32 width = 3;
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::has_width() const {
  return _internal_has_width();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::_internal_width() const {
  return width_;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::width() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.DraggableRects.width)
  return _internal_width();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void CMsgDraggableRegionsChanged_DraggableRects::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.DraggableRects.width)
}

// optional int32 height = 4;
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::has_height() const {
  return _internal_has_height();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::_internal_height() const {
  return height_;
}
inline int32_t CMsgDraggableRegionsChanged_DraggableRects::height() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.DraggableRects.height)
  return _internal_height();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void CMsgDraggableRegionsChanged_DraggableRects::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.DraggableRects.height)
}

// optional bool draggable = 5;
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_has_draggable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::has_draggable() const {
  return _internal_has_draggable();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::clear_draggable() {
  draggable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::_internal_draggable() const {
  return draggable_;
}
inline bool CMsgDraggableRegionsChanged_DraggableRects::draggable() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.DraggableRects.draggable)
  return _internal_draggable();
}
inline void CMsgDraggableRegionsChanged_DraggableRects::_internal_set_draggable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  draggable_ = value;
}
inline void CMsgDraggableRegionsChanged_DraggableRects::set_draggable(bool value) {
  _internal_set_draggable(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.DraggableRects.draggable)
}

// -------------------------------------------------------------------

// CMsgDraggableRegionsChanged

// optional uint32 browser_handle = 1;
inline bool CMsgDraggableRegionsChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDraggableRegionsChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgDraggableRegionsChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDraggableRegionsChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgDraggableRegionsChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgDraggableRegionsChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgDraggableRegionsChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgDraggableRegionsChanged.browser_handle)
}

// repeated .CMsgDraggableRegionsChanged.DraggableRects rects = 2;
inline int CMsgDraggableRegionsChanged::_internal_rects_size() const {
  return rects_.size();
}
inline int CMsgDraggableRegionsChanged::rects_size() const {
  return _internal_rects_size();
}
inline void CMsgDraggableRegionsChanged::clear_rects() {
  rects_.Clear();
}
inline ::CMsgDraggableRegionsChanged_DraggableRects* CMsgDraggableRegionsChanged::mutable_rects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDraggableRegionsChanged.rects)
  return rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraggableRegionsChanged_DraggableRects >*
CMsgDraggableRegionsChanged::mutable_rects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDraggableRegionsChanged.rects)
  return &rects_;
}
inline const ::CMsgDraggableRegionsChanged_DraggableRects& CMsgDraggableRegionsChanged::_internal_rects(int index) const {
  return rects_.Get(index);
}
inline const ::CMsgDraggableRegionsChanged_DraggableRects& CMsgDraggableRegionsChanged::rects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDraggableRegionsChanged.rects)
  return _internal_rects(index);
}
inline ::CMsgDraggableRegionsChanged_DraggableRects* CMsgDraggableRegionsChanged::_internal_add_rects() {
  return rects_.Add();
}
inline ::CMsgDraggableRegionsChanged_DraggableRects* CMsgDraggableRegionsChanged::add_rects() {
  ::CMsgDraggableRegionsChanged_DraggableRects* _add = _internal_add_rects();
  // @@protoc_insertion_point(field_add:CMsgDraggableRegionsChanged.rects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDraggableRegionsChanged_DraggableRects >&
CMsgDraggableRegionsChanged::rects() const {
  // @@protoc_insertion_point(field_list:CMsgDraggableRegionsChanged.rects)
  return rects_;
}

// -------------------------------------------------------------------

// CMsgResizeGripChanged

// optional uint32 browser_handle = 1;
inline bool CMsgResizeGripChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgResizeGripChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgResizeGripChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgResizeGripChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgResizeGripChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgResizeGripChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgResizeGripChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgResizeGripChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgResizeGripChanged.browser_handle)
}

// optional int32 width = 2;
inline bool CMsgResizeGripChanged::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgResizeGripChanged::has_width() const {
  return _internal_has_width();
}
inline void CMsgResizeGripChanged::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgResizeGripChanged::_internal_width() const {
  return width_;
}
inline int32_t CMsgResizeGripChanged::width() const {
  // @@protoc_insertion_point(field_get:CMsgResizeGripChanged.width)
  return _internal_width();
}
inline void CMsgResizeGripChanged::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void CMsgResizeGripChanged::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgResizeGripChanged.width)
}

// optional int32 height = 3;
inline bool CMsgResizeGripChanged::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgResizeGripChanged::has_height() const {
  return _internal_has_height();
}
inline void CMsgResizeGripChanged::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgResizeGripChanged::_internal_height() const {
  return height_;
}
inline int32_t CMsgResizeGripChanged::height() const {
  // @@protoc_insertion_point(field_get:CMsgResizeGripChanged.height)
  return _internal_height();
}
inline void CMsgResizeGripChanged::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CMsgResizeGripChanged::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgResizeGripChanged.height)
}

// -------------------------------------------------------------------

// CMsgSetWindowPosition

// optional uint32 browser_handle = 1;
inline bool CMsgSetWindowPosition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetWindowPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgSetWindowPosition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetWindowPosition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetWindowPosition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  browser_handle_ = value;
}
inline void CMsgSetWindowPosition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.browser_handle)
}

// optional double x = 2;
inline bool CMsgSetWindowPosition::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_x() const {
  return _internal_has_x();
}
inline void CMsgSetWindowPosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgSetWindowPosition::_internal_x() const {
  return x_;
}
inline double CMsgSetWindowPosition::x() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.x)
  return _internal_x();
}
inline void CMsgSetWindowPosition::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgSetWindowPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.x)
}

// optional double y = 3;
inline bool CMsgSetWindowPosition::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_y() const {
  return _internal_has_y();
}
inline void CMsgSetWindowPosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgSetWindowPosition::_internal_y() const {
  return y_;
}
inline double CMsgSetWindowPosition::y() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.y)
  return _internal_y();
}
inline void CMsgSetWindowPosition::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgSetWindowPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.y)
}

// optional double width = 4;
inline bool CMsgSetWindowPosition::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_width() const {
  return _internal_has_width();
}
inline void CMsgSetWindowPosition::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CMsgSetWindowPosition::_internal_width() const {
  return width_;
}
inline double CMsgSetWindowPosition::width() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.width)
  return _internal_width();
}
inline void CMsgSetWindowPosition::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void CMsgSetWindowPosition::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.width)
}

// optional double height = 5;
inline bool CMsgSetWindowPosition::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_height() const {
  return _internal_has_height();
}
inline void CMsgSetWindowPosition::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CMsgSetWindowPosition::_internal_height() const {
  return height_;
}
inline double CMsgSetWindowPosition::height() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.height)
  return _internal_height();
}
inline void CMsgSetWindowPosition::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void CMsgSetWindowPosition::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.height)
}

// optional double min_width = 6;
inline bool CMsgSetWindowPosition::_internal_has_min_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_min_width() const {
  return _internal_has_min_width();
}
inline void CMsgSetWindowPosition::clear_min_width() {
  min_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CMsgSetWindowPosition::_internal_min_width() const {
  return min_width_;
}
inline double CMsgSetWindowPosition::min_width() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.min_width)
  return _internal_min_width();
}
inline void CMsgSetWindowPosition::_internal_set_min_width(double value) {
  _has_bits_[0] |= 0x00000010u;
  min_width_ = value;
}
inline void CMsgSetWindowPosition::set_min_width(double value) {
  _internal_set_min_width(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.min_width)
}

// optional double min_height = 7;
inline bool CMsgSetWindowPosition::_internal_has_min_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_min_height() const {
  return _internal_has_min_height();
}
inline void CMsgSetWindowPosition::clear_min_height() {
  min_height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CMsgSetWindowPosition::_internal_min_height() const {
  return min_height_;
}
inline double CMsgSetWindowPosition::min_height() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.min_height)
  return _internal_min_height();
}
inline void CMsgSetWindowPosition::_internal_set_min_height(double value) {
  _has_bits_[0] |= 0x00000020u;
  min_height_ = value;
}
inline void CMsgSetWindowPosition::set_min_height(double value) {
  _internal_set_min_height(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.min_height)
}

// optional double max_width = 8;
inline bool CMsgSetWindowPosition::_internal_has_max_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_max_width() const {
  return _internal_has_max_width();
}
inline void CMsgSetWindowPosition::clear_max_width() {
  max_width_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CMsgSetWindowPosition::_internal_max_width() const {
  return max_width_;
}
inline double CMsgSetWindowPosition::max_width() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.max_width)
  return _internal_max_width();
}
inline void CMsgSetWindowPosition::_internal_set_max_width(double value) {
  _has_bits_[0] |= 0x00000040u;
  max_width_ = value;
}
inline void CMsgSetWindowPosition::set_max_width(double value) {
  _internal_set_max_width(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.max_width)
}

// optional double max_height = 9;
inline bool CMsgSetWindowPosition::_internal_has_max_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSetWindowPosition::has_max_height() const {
  return _internal_has_max_height();
}
inline void CMsgSetWindowPosition::clear_max_height() {
  max_height_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double CMsgSetWindowPosition::_internal_max_height() const {
  return max_height_;
}
inline double CMsgSetWindowPosition::max_height() const {
  // @@protoc_insertion_point(field_get:CMsgSetWindowPosition.max_height)
  return _internal_max_height();
}
inline void CMsgSetWindowPosition::_internal_set_max_height(double value) {
  _has_bits_[0] |= 0x00000080u;
  max_height_ = value;
}
inline void CMsgSetWindowPosition::set_max_height(double value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:CMsgSetWindowPosition.max_height)
}

// -------------------------------------------------------------------

// CMsgShowWindow

// optional uint32 browser_handle = 1;
inline bool CMsgShowWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgShowWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgShowWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgShowWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgShowWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgShowWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgShowWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgShowWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgHideWindow

// optional uint32 browser_handle = 1;
inline bool CMsgHideWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHideWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHideWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHideWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHideWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHideWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHideWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHideWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHideWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgBringWindowToFront

// optional uint32 browser_handle = 1;
inline bool CMsgBringWindowToFront::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBringWindowToFront::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBringWindowToFront::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBringWindowToFront::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBringWindowToFront::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBringWindowToFront.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBringWindowToFront::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgBringWindowToFront::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBringWindowToFront.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetForegroundWindow

// optional uint32 browser_handle = 1;
inline bool CMsgSetForegroundWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetForegroundWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetForegroundWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetForegroundWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetForegroundWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetForegroundWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetForegroundWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetForegroundWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetForegroundWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgMaximizeRestoreWindow

// optional uint32 browser_handle = 1;
inline bool CMsgMaximizeRestoreWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMaximizeRestoreWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMaximizeRestoreWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMaximizeRestoreWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMaximizeRestoreWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMaximizeRestoreWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMaximizeRestoreWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMaximizeRestoreWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMaximizeRestoreWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgMinimizeWindow

// optional uint32 browser_handle = 1;
inline bool CMsgMinimizeWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMinimizeWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgMinimizeWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMinimizeWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgMinimizeWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgMinimizeWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgMinimizeWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgMinimizeWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgMinimizeWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgShowBrowserContextMenu_ContextCommand

// optional int32 id = 1;
inline bool CMsgShowBrowserContextMenu_ContextCommand::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu_ContextCommand::has_id() const {
  return _internal_has_id();
}
inline void CMsgShowBrowserContextMenu_ContextCommand::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgShowBrowserContextMenu_ContextCommand::_internal_id() const {
  return id_;
}
inline int32_t CMsgShowBrowserContextMenu_ContextCommand::id() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.ContextCommand.id)
  return _internal_id();
}
inline void CMsgShowBrowserContextMenu_ContextCommand::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgShowBrowserContextMenu_ContextCommand::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.ContextCommand.id)
}

// optional string label = 2;
inline bool CMsgShowBrowserContextMenu_ContextCommand::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu_ContextCommand::has_label() const {
  return _internal_has_label();
}
inline void CMsgShowBrowserContextMenu_ContextCommand::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShowBrowserContextMenu_ContextCommand::label() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.ContextCommand.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu_ContextCommand::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.ContextCommand.label)
}
inline std::string* CMsgShowBrowserContextMenu_ContextCommand::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.ContextCommand.label)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu_ContextCommand::_internal_label() const {
  return label_.Get();
}
inline void CMsgShowBrowserContextMenu_ContextCommand::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu_ContextCommand::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu_ContextCommand::release_label() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.ContextCommand.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu_ContextCommand::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.ContextCommand.label)
}

// -------------------------------------------------------------------

// CMsgShowBrowserContextMenu

// optional uint32 browser_handle = 1;
inline bool CMsgShowBrowserContextMenu::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgShowBrowserContextMenu::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgShowBrowserContextMenu::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgShowBrowserContextMenu::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgShowBrowserContextMenu::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  browser_handle_ = value;
}
inline void CMsgShowBrowserContextMenu::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.browser_handle)
}

// repeated .CMsgShowBrowserContextMenu.ContextCommand custom_commands = 2;
inline int CMsgShowBrowserContextMenu::_internal_custom_commands_size() const {
  return custom_commands_.size();
}
inline int CMsgShowBrowserContextMenu::custom_commands_size() const {
  return _internal_custom_commands_size();
}
inline void CMsgShowBrowserContextMenu::clear_custom_commands() {
  custom_commands_.Clear();
}
inline ::CMsgShowBrowserContextMenu_ContextCommand* CMsgShowBrowserContextMenu::mutable_custom_commands(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.custom_commands)
  return custom_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowBrowserContextMenu_ContextCommand >*
CMsgShowBrowserContextMenu::mutable_custom_commands() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShowBrowserContextMenu.custom_commands)
  return &custom_commands_;
}
inline const ::CMsgShowBrowserContextMenu_ContextCommand& CMsgShowBrowserContextMenu::_internal_custom_commands(int index) const {
  return custom_commands_.Get(index);
}
inline const ::CMsgShowBrowserContextMenu_ContextCommand& CMsgShowBrowserContextMenu::custom_commands(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.custom_commands)
  return _internal_custom_commands(index);
}
inline ::CMsgShowBrowserContextMenu_ContextCommand* CMsgShowBrowserContextMenu::_internal_add_custom_commands() {
  return custom_commands_.Add();
}
inline ::CMsgShowBrowserContextMenu_ContextCommand* CMsgShowBrowserContextMenu::add_custom_commands() {
  ::CMsgShowBrowserContextMenu_ContextCommand* _add = _internal_add_custom_commands();
  // @@protoc_insertion_point(field_add:CMsgShowBrowserContextMenu.custom_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgShowBrowserContextMenu_ContextCommand >&
CMsgShowBrowserContextMenu::custom_commands() const {
  // @@protoc_insertion_point(field_list:CMsgShowBrowserContextMenu.custom_commands)
  return custom_commands_;
}

// optional uint32 type_flags = 3;
inline bool CMsgShowBrowserContextMenu::_internal_has_type_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_type_flags() const {
  return _internal_has_type_flags();
}
inline void CMsgShowBrowserContextMenu::clear_type_flags() {
  type_flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgShowBrowserContextMenu::_internal_type_flags() const {
  return type_flags_;
}
inline uint32_t CMsgShowBrowserContextMenu::type_flags() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.type_flags)
  return _internal_type_flags();
}
inline void CMsgShowBrowserContextMenu::_internal_set_type_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  type_flags_ = value;
}
inline void CMsgShowBrowserContextMenu::set_type_flags(uint32_t value) {
  _internal_set_type_flags(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.type_flags)
}

// optional string page_url = 4;
inline bool CMsgShowBrowserContextMenu::_internal_has_page_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_page_url() const {
  return _internal_has_page_url();
}
inline void CMsgShowBrowserContextMenu::clear_page_url() {
  page_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShowBrowserContextMenu::page_url() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.page_url)
  return _internal_page_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu::set_page_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 page_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.page_url)
}
inline std::string* CMsgShowBrowserContextMenu::mutable_page_url() {
  std::string* _s = _internal_mutable_page_url();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.page_url)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu::_internal_page_url() const {
  return page_url_.Get();
}
inline void CMsgShowBrowserContextMenu::_internal_set_page_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::_internal_mutable_page_url() {
  _has_bits_[0] |= 0x00000001u;
  return page_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::release_page_url() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.page_url)
  if (!_internal_has_page_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = page_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu::set_allocated_page_url(std::string* page_url) {
  if (page_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.page_url)
}

// optional int32 coord_x = 5;
inline bool CMsgShowBrowserContextMenu::_internal_has_coord_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_coord_x() const {
  return _internal_has_coord_x();
}
inline void CMsgShowBrowserContextMenu::clear_coord_x() {
  coord_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgShowBrowserContextMenu::_internal_coord_x() const {
  return coord_x_;
}
inline int32_t CMsgShowBrowserContextMenu::coord_x() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.coord_x)
  return _internal_coord_x();
}
inline void CMsgShowBrowserContextMenu::_internal_set_coord_x(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  coord_x_ = value;
}
inline void CMsgShowBrowserContextMenu::set_coord_x(int32_t value) {
  _internal_set_coord_x(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.coord_x)
}

// optional int32 coord_y = 6;
inline bool CMsgShowBrowserContextMenu::_internal_has_coord_y() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_coord_y() const {
  return _internal_has_coord_y();
}
inline void CMsgShowBrowserContextMenu::clear_coord_y() {
  coord_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgShowBrowserContextMenu::_internal_coord_y() const {
  return coord_y_;
}
inline int32_t CMsgShowBrowserContextMenu::coord_y() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.coord_y)
  return _internal_coord_y();
}
inline void CMsgShowBrowserContextMenu::_internal_set_coord_y(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  coord_y_ = value;
}
inline void CMsgShowBrowserContextMenu::set_coord_y(int32_t value) {
  _internal_set_coord_y(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.coord_y)
}

// optional string link_url = 7;
inline bool CMsgShowBrowserContextMenu::_internal_has_link_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_link_url() const {
  return _internal_has_link_url();
}
inline void CMsgShowBrowserContextMenu::clear_link_url() {
  link_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgShowBrowserContextMenu::link_url() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.link_url)
  return _internal_link_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu::set_link_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.link_url)
}
inline std::string* CMsgShowBrowserContextMenu::mutable_link_url() {
  std::string* _s = _internal_mutable_link_url();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.link_url)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu::_internal_link_url() const {
  return link_url_.Get();
}
inline void CMsgShowBrowserContextMenu::_internal_set_link_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::_internal_mutable_link_url() {
  _has_bits_[0] |= 0x00000002u;
  return link_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::release_link_url() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.link_url)
  if (!_internal_has_link_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = link_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu::set_allocated_link_url(std::string* link_url) {
  if (link_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  link_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.link_url)
}

// optional string unfiltered_link_url = 8;
inline bool CMsgShowBrowserContextMenu::_internal_has_unfiltered_link_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_unfiltered_link_url() const {
  return _internal_has_unfiltered_link_url();
}
inline void CMsgShowBrowserContextMenu::clear_unfiltered_link_url() {
  unfiltered_link_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgShowBrowserContextMenu::unfiltered_link_url() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.unfiltered_link_url)
  return _internal_unfiltered_link_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu::set_unfiltered_link_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 unfiltered_link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.unfiltered_link_url)
}
inline std::string* CMsgShowBrowserContextMenu::mutable_unfiltered_link_url() {
  std::string* _s = _internal_mutable_unfiltered_link_url();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.unfiltered_link_url)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu::_internal_unfiltered_link_url() const {
  return unfiltered_link_url_.Get();
}
inline void CMsgShowBrowserContextMenu::_internal_set_unfiltered_link_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unfiltered_link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::_internal_mutable_unfiltered_link_url() {
  _has_bits_[0] |= 0x00000004u;
  return unfiltered_link_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::release_unfiltered_link_url() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.unfiltered_link_url)
  if (!_internal_has_unfiltered_link_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = unfiltered_link_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unfiltered_link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unfiltered_link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu::set_allocated_unfiltered_link_url(std::string* unfiltered_link_url) {
  if (unfiltered_link_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unfiltered_link_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unfiltered_link_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unfiltered_link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unfiltered_link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.unfiltered_link_url)
}

// optional string selection_text = 9;
inline bool CMsgShowBrowserContextMenu::_internal_has_selection_text() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_selection_text() const {
  return _internal_has_selection_text();
}
inline void CMsgShowBrowserContextMenu::clear_selection_text() {
  selection_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgShowBrowserContextMenu::selection_text() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.selection_text)
  return _internal_selection_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu::set_selection_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 selection_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.selection_text)
}
inline std::string* CMsgShowBrowserContextMenu::mutable_selection_text() {
  std::string* _s = _internal_mutable_selection_text();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.selection_text)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu::_internal_selection_text() const {
  return selection_text_.Get();
}
inline void CMsgShowBrowserContextMenu::_internal_set_selection_text(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  selection_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::_internal_mutable_selection_text() {
  _has_bits_[0] |= 0x00000008u;
  return selection_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::release_selection_text() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.selection_text)
  if (!_internal_has_selection_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = selection_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selection_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selection_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu::set_allocated_selection_text(std::string* selection_text) {
  if (selection_text != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  selection_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selection_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selection_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selection_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.selection_text)
}

// optional string misspelled_word = 10;
inline bool CMsgShowBrowserContextMenu::_internal_has_misspelled_word() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_misspelled_word() const {
  return _internal_has_misspelled_word();
}
inline void CMsgShowBrowserContextMenu::clear_misspelled_word() {
  misspelled_word_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgShowBrowserContextMenu::misspelled_word() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.misspelled_word)
  return _internal_misspelled_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShowBrowserContextMenu::set_misspelled_word(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 misspelled_word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.misspelled_word)
}
inline std::string* CMsgShowBrowserContextMenu::mutable_misspelled_word() {
  std::string* _s = _internal_mutable_misspelled_word();
  // @@protoc_insertion_point(field_mutable:CMsgShowBrowserContextMenu.misspelled_word)
  return _s;
}
inline const std::string& CMsgShowBrowserContextMenu::_internal_misspelled_word() const {
  return misspelled_word_.Get();
}
inline void CMsgShowBrowserContextMenu::_internal_set_misspelled_word(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  misspelled_word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::_internal_mutable_misspelled_word() {
  _has_bits_[0] |= 0x00000010u;
  return misspelled_word_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShowBrowserContextMenu::release_misspelled_word() {
  // @@protoc_insertion_point(field_release:CMsgShowBrowserContextMenu.misspelled_word)
  if (!_internal_has_misspelled_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = misspelled_word_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (misspelled_word_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    misspelled_word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShowBrowserContextMenu::set_allocated_misspelled_word(std::string* misspelled_word) {
  if (misspelled_word != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  misspelled_word_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), misspelled_word,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (misspelled_word_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    misspelled_word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShowBrowserContextMenu.misspelled_word)
}

// optional uint32 edit_state_flags = 11;
inline bool CMsgShowBrowserContextMenu::_internal_has_edit_state_flags() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgShowBrowserContextMenu::has_edit_state_flags() const {
  return _internal_has_edit_state_flags();
}
inline void CMsgShowBrowserContextMenu::clear_edit_state_flags() {
  edit_state_flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgShowBrowserContextMenu::_internal_edit_state_flags() const {
  return edit_state_flags_;
}
inline uint32_t CMsgShowBrowserContextMenu::edit_state_flags() const {
  // @@protoc_insertion_point(field_get:CMsgShowBrowserContextMenu.edit_state_flags)
  return _internal_edit_state_flags();
}
inline void CMsgShowBrowserContextMenu::_internal_set_edit_state_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  edit_state_flags_ = value;
}
inline void CMsgShowBrowserContextMenu::set_edit_state_flags(uint32_t value) {
  _internal_set_edit_state_flags(value);
  // @@protoc_insertion_point(field_set:CMsgShowBrowserContextMenu.edit_state_flags)
}

// -------------------------------------------------------------------

// CMsgHandleContextMenuCommand

// optional uint32 browser_handle = 1;
inline bool CMsgHandleContextMenuCommand::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgHandleContextMenuCommand::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgHandleContextMenuCommand::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgHandleContextMenuCommand::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgHandleContextMenuCommand::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgHandleContextMenuCommand.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgHandleContextMenuCommand::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgHandleContextMenuCommand::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgHandleContextMenuCommand.browser_handle)
}

// optional int32 command_id = 2;
inline bool CMsgHandleContextMenuCommand::_internal_has_command_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgHandleContextMenuCommand::has_command_id() const {
  return _internal_has_command_id();
}
inline void CMsgHandleContextMenuCommand::clear_command_id() {
  command_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgHandleContextMenuCommand::_internal_command_id() const {
  return command_id_;
}
inline int32_t CMsgHandleContextMenuCommand::command_id() const {
  // @@protoc_insertion_point(field_get:CMsgHandleContextMenuCommand.command_id)
  return _internal_command_id();
}
inline void CMsgHandleContextMenuCommand::_internal_set_command_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  command_id_ = value;
}
inline void CMsgHandleContextMenuCommand::set_command_id(int32_t value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:CMsgHandleContextMenuCommand.command_id)
}

// -------------------------------------------------------------------

// CMsgTouchGesture

// optional uint32 browser_handle = 1;
inline bool CMsgTouchGesture::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgTouchGesture::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgTouchGesture::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgTouchGesture::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgTouchGesture::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgTouchGesture::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.browser_handle)
}

// optional int32 id = 2;
inline bool CMsgTouchGesture::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_id() const {
  return _internal_has_id();
}
inline void CMsgTouchGesture::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgTouchGesture::_internal_id() const {
  return id_;
}
inline int32_t CMsgTouchGesture::id() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.id)
  return _internal_id();
}
inline void CMsgTouchGesture::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgTouchGesture::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.id)
}

// optional uint32 gesture = 3;
inline bool CMsgTouchGesture::_internal_has_gesture() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_gesture() const {
  return _internal_has_gesture();
}
inline void CMsgTouchGesture::clear_gesture() {
  gesture_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgTouchGesture::_internal_gesture() const {
  return gesture_;
}
inline uint32_t CMsgTouchGesture::gesture() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.gesture)
  return _internal_gesture();
}
inline void CMsgTouchGesture::_internal_set_gesture(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  gesture_ = value;
}
inline void CMsgTouchGesture::set_gesture(uint32_t value) {
  _internal_set_gesture(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.gesture)
}

// optional double x = 4;
inline bool CMsgTouchGesture::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_x() const {
  return _internal_has_x();
}
inline void CMsgTouchGesture::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CMsgTouchGesture::_internal_x() const {
  return x_;
}
inline double CMsgTouchGesture::x() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.x)
  return _internal_x();
}
inline void CMsgTouchGesture::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void CMsgTouchGesture::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.x)
}

// optional double y = 5;
inline bool CMsgTouchGesture::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_y() const {
  return _internal_has_y();
}
inline void CMsgTouchGesture::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CMsgTouchGesture::_internal_y() const {
  return y_;
}
inline double CMsgTouchGesture::y() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.y)
  return _internal_y();
}
inline void CMsgTouchGesture::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void CMsgTouchGesture::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.y)
}

// optional double width = 6;
inline bool CMsgTouchGesture::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_width() const {
  return _internal_has_width();
}
inline void CMsgTouchGesture::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CMsgTouchGesture::_internal_width() const {
  return width_;
}
inline double CMsgTouchGesture::width() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.width)
  return _internal_width();
}
inline void CMsgTouchGesture::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000040u;
  width_ = value;
}
inline void CMsgTouchGesture::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.width)
}

// optional double height = 7;
inline bool CMsgTouchGesture::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_height() const {
  return _internal_has_height();
}
inline void CMsgTouchGesture::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double CMsgTouchGesture::_internal_height() const {
  return height_;
}
inline double CMsgTouchGesture::height() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.height)
  return _internal_height();
}
inline void CMsgTouchGesture::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000080u;
  height_ = value;
}
inline void CMsgTouchGesture::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.height)
}

// optional uint32 tap_count = 8;
inline bool CMsgTouchGesture::_internal_has_tap_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_tap_count() const {
  return _internal_has_tap_count();
}
inline void CMsgTouchGesture::clear_tap_count() {
  tap_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgTouchGesture::_internal_tap_count() const {
  return tap_count_;
}
inline uint32_t CMsgTouchGesture::tap_count() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.tap_count)
  return _internal_tap_count();
}
inline void CMsgTouchGesture::_internal_set_tap_count(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  tap_count_ = value;
}
inline void CMsgTouchGesture::set_tap_count(uint32_t value) {
  _internal_set_tap_count(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.tap_count)
}

// optional double pinch_scale = 9;
inline bool CMsgTouchGesture::_internal_has_pinch_scale() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgTouchGesture::has_pinch_scale() const {
  return _internal_has_pinch_scale();
}
inline void CMsgTouchGesture::clear_pinch_scale() {
  pinch_scale_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double CMsgTouchGesture::_internal_pinch_scale() const {
  return pinch_scale_;
}
inline double CMsgTouchGesture::pinch_scale() const {
  // @@protoc_insertion_point(field_get:CMsgTouchGesture.pinch_scale)
  return _internal_pinch_scale();
}
inline void CMsgTouchGesture::_internal_set_pinch_scale(double value) {
  _has_bits_[0] |= 0x00000100u;
  pinch_scale_ = value;
}
inline void CMsgTouchGesture::set_pinch_scale(double value) {
  _internal_set_pinch_scale(value);
  // @@protoc_insertion_point(field_set:CMsgTouchGesture.pinch_scale)
}

// -------------------------------------------------------------------

// CMsgSetTouchGesturesToCancel

// optional uint32 browser_handle = 1;
inline bool CMsgSetTouchGesturesToCancel::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetTouchGesturesToCancel::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetTouchGesturesToCancel::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetTouchGesturesToCancel::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetTouchGesturesToCancel::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetTouchGesturesToCancel.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetTouchGesturesToCancel::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetTouchGesturesToCancel::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetTouchGesturesToCancel.browser_handle)
}

// repeated uint32 gestures = 2;
inline int CMsgSetTouchGesturesToCancel::_internal_gestures_size() const {
  return gestures_.size();
}
inline int CMsgSetTouchGesturesToCancel::gestures_size() const {
  return _internal_gestures_size();
}
inline void CMsgSetTouchGesturesToCancel::clear_gestures() {
  gestures_.Clear();
}
inline uint32_t CMsgSetTouchGesturesToCancel::_internal_gestures(int index) const {
  return gestures_.Get(index);
}
inline uint32_t CMsgSetTouchGesturesToCancel::gestures(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSetTouchGesturesToCancel.gestures)
  return _internal_gestures(index);
}
inline void CMsgSetTouchGesturesToCancel::set_gestures(int index, uint32_t value) {
  gestures_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSetTouchGesturesToCancel.gestures)
}
inline void CMsgSetTouchGesturesToCancel::_internal_add_gestures(uint32_t value) {
  gestures_.Add(value);
}
inline void CMsgSetTouchGesturesToCancel::add_gestures(uint32_t value) {
  _internal_add_gestures(value);
  // @@protoc_insertion_point(field_add:CMsgSetTouchGesturesToCancel.gestures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSetTouchGesturesToCancel::_internal_gestures() const {
  return gestures_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSetTouchGesturesToCancel::gestures() const {
  // @@protoc_insertion_point(field_list:CMsgSetTouchGesturesToCancel.gestures)
  return _internal_gestures();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSetTouchGesturesToCancel::_internal_mutable_gestures() {
  return &gestures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSetTouchGesturesToCancel::mutable_gestures() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSetTouchGesturesToCancel.gestures)
  return _internal_mutable_gestures();
}

// -------------------------------------------------------------------

// CMsgImeSetComposition

// optional uint32 browser_handle = 1;
inline bool CMsgImeSetComposition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgImeSetComposition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgImeSetComposition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgImeSetComposition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgImeSetComposition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgImeSetComposition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgImeSetComposition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgImeSetComposition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgImeSetComposition.browser_handle)
}

// optional string text = 2;
inline bool CMsgImeSetComposition::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgImeSetComposition::has_text() const {
  return _internal_has_text();
}
inline void CMsgImeSetComposition::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgImeSetComposition::text() const {
  // @@protoc_insertion_point(field_get:CMsgImeSetComposition.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgImeSetComposition::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgImeSetComposition.text)
}
inline std::string* CMsgImeSetComposition::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgImeSetComposition.text)
  return _s;
}
inline const std::string& CMsgImeSetComposition::_internal_text() const {
  return text_.Get();
}
inline void CMsgImeSetComposition::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgImeSetComposition::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgImeSetComposition::release_text() {
  // @@protoc_insertion_point(field_release:CMsgImeSetComposition.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgImeSetComposition::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgImeSetComposition.text)
}

// -------------------------------------------------------------------

// CMsgImeCommitText

// optional uint32 browser_handle = 1;
inline bool CMsgImeCommitText::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgImeCommitText::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgImeCommitText::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgImeCommitText::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgImeCommitText::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgImeCommitText.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgImeCommitText::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgImeCommitText::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgImeCommitText.browser_handle)
}

// optional string text = 2;
inline bool CMsgImeCommitText::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgImeCommitText::has_text() const {
  return _internal_has_text();
}
inline void CMsgImeCommitText::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgImeCommitText::text() const {
  // @@protoc_insertion_point(field_get:CMsgImeCommitText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgImeCommitText::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgImeCommitText.text)
}
inline std::string* CMsgImeCommitText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgImeCommitText.text)
  return _s;
}
inline const std::string& CMsgImeCommitText::_internal_text() const {
  return text_.Get();
}
inline void CMsgImeCommitText::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgImeCommitText::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgImeCommitText::release_text() {
  // @@protoc_insertion_point(field_release:CMsgImeCommitText.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgImeCommitText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgImeCommitText.text)
}

// -------------------------------------------------------------------

// CMsgImeCancelComposition

// optional uint32 browser_handle = 1;
inline bool CMsgImeCancelComposition::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgImeCancelComposition::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgImeCancelComposition::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgImeCancelComposition::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgImeCancelComposition::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgImeCancelComposition.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgImeCancelComposition::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgImeCancelComposition::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgImeCancelComposition.browser_handle)
}

// -------------------------------------------------------------------

// CMsgImeCompositionRangeChanged

// optional uint32 browser_handle = 1;
inline bool CMsgImeCompositionRangeChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgImeCompositionRangeChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgImeCompositionRangeChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgImeCompositionRangeChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgImeCompositionRangeChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgImeCompositionRangeChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgImeCompositionRangeChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgImeCompositionRangeChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgImeCompositionRangeChanged.browser_handle)
}

// optional uint32 x = 2;
inline bool CMsgImeCompositionRangeChanged::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgImeCompositionRangeChanged::has_x() const {
  return _internal_has_x();
}
inline void CMsgImeCompositionRangeChanged::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgImeCompositionRangeChanged::_internal_x() const {
  return x_;
}
inline uint32_t CMsgImeCompositionRangeChanged::x() const {
  // @@protoc_insertion_point(field_get:CMsgImeCompositionRangeChanged.x)
  return _internal_x();
}
inline void CMsgImeCompositionRangeChanged::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgImeCompositionRangeChanged::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgImeCompositionRangeChanged.x)
}

// optional uint32 y = 3;
inline bool CMsgImeCompositionRangeChanged::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgImeCompositionRangeChanged::has_y() const {
  return _internal_has_y();
}
inline void CMsgImeCompositionRangeChanged::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgImeCompositionRangeChanged::_internal_y() const {
  return y_;
}
inline uint32_t CMsgImeCompositionRangeChanged::y() const {
  // @@protoc_insertion_point(field_get:CMsgImeCompositionRangeChanged.y)
  return _internal_y();
}
inline void CMsgImeCompositionRangeChanged::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgImeCompositionRangeChanged::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgImeCompositionRangeChanged.y)
}

// -------------------------------------------------------------------

// CMsgInspectElement

// optional uint32 browser_handle = 1;
inline bool CMsgInspectElement::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgInspectElement::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgInspectElement::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgInspectElement::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgInspectElement::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgInspectElement.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgInspectElement::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgInspectElement::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgInspectElement.browser_handle)
}

// optional uint32 x = 2;
inline bool CMsgInspectElement::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgInspectElement::has_x() const {
  return _internal_has_x();
}
inline void CMsgInspectElement::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgInspectElement::_internal_x() const {
  return x_;
}
inline uint32_t CMsgInspectElement::x() const {
  // @@protoc_insertion_point(field_get:CMsgInspectElement.x)
  return _internal_x();
}
inline void CMsgInspectElement::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CMsgInspectElement::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgInspectElement.x)
}

// optional uint32 y = 3;
inline bool CMsgInspectElement::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgInspectElement::has_y() const {
  return _internal_has_y();
}
inline void CMsgInspectElement::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgInspectElement::_internal_y() const {
  return y_;
}
inline uint32_t CMsgInspectElement::y() const {
  // @@protoc_insertion_point(field_get:CMsgInspectElement.y)
  return _internal_y();
}
inline void CMsgInspectElement::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CMsgInspectElement::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgInspectElement.y)
}

// -------------------------------------------------------------------

// CMsgDisableF5

// optional uint32 browser_handle = 1;
inline bool CMsgDisableF5::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDisableF5::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgDisableF5::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDisableF5::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgDisableF5::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgDisableF5.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgDisableF5::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgDisableF5::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgDisableF5.browser_handle)
}

// optional bool disable = 2;
inline bool CMsgDisableF5::_internal_has_disable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDisableF5::has_disable() const {
  return _internal_has_disable();
}
inline void CMsgDisableF5::clear_disable() {
  disable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDisableF5::_internal_disable() const {
  return disable_;
}
inline bool CMsgDisableF5::disable() const {
  // @@protoc_insertion_point(field_get:CMsgDisableF5.disable)
  return _internal_disable();
}
inline void CMsgDisableF5::_internal_set_disable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  disable_ = value;
}
inline void CMsgDisableF5::set_disable(bool value) {
  _internal_set_disable(value);
  // @@protoc_insertion_point(field_set:CMsgDisableF5.disable)
}

// -------------------------------------------------------------------

// CMsgStartDownload

// optional uint32 browser_handle = 1;
inline bool CMsgStartDownload::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStartDownload::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgStartDownload::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgStartDownload::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgStartDownload::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgStartDownload.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgStartDownload::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgStartDownload::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgStartDownload.browser_handle)
}

// optional string url = 2;
inline bool CMsgStartDownload::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStartDownload::has_url() const {
  return _internal_has_url();
}
inline void CMsgStartDownload::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStartDownload::url() const {
  // @@protoc_insertion_point(field_get:CMsgStartDownload.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStartDownload::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStartDownload.url)
}
inline std::string* CMsgStartDownload::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgStartDownload.url)
  return _s;
}
inline const std::string& CMsgStartDownload::_internal_url() const {
  return url_.Get();
}
inline void CMsgStartDownload::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStartDownload::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStartDownload::release_url() {
  // @@protoc_insertion_point(field_release:CMsgStartDownload.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStartDownload::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStartDownload.url)
}

// -------------------------------------------------------------------

// CMsgSetTopWindow

// optional uint32 browser_handle = 1;
inline bool CMsgSetTopWindow::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetTopWindow::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetTopWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetTopWindow::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetTopWindow::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetTopWindow.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetTopWindow::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetTopWindow::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetTopWindow.browser_handle)
}

// -------------------------------------------------------------------

// CMsgBrowserViewPostMessageToParentRequest

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserViewPostMessageToParentRequest::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBrowserViewPostMessageToParentRequest::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserViewPostMessageToParentRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBrowserViewPostMessageToParentRequest::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserViewPostMessageToParentRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserViewPostMessageToParentRequest.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserViewPostMessageToParentRequest::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  browser_handle_ = value;
}
inline void CMsgBrowserViewPostMessageToParentRequest::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserViewPostMessageToParentRequest.browser_handle)
}

// optional string message = 2;
inline bool CMsgBrowserViewPostMessageToParentRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserViewPostMessageToParentRequest::has_message() const {
  return _internal_has_message();
}
inline void CMsgBrowserViewPostMessageToParentRequest::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::message() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserViewPostMessageToParentRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserViewPostMessageToParentRequest::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserViewPostMessageToParentRequest.message)
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserViewPostMessageToParentRequest.message)
  return _s;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::_internal_message() const {
  return message_.Get();
}
inline void CMsgBrowserViewPostMessageToParentRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::release_message() {
  // @@protoc_insertion_point(field_release:CMsgBrowserViewPostMessageToParentRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserViewPostMessageToParentRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserViewPostMessageToParentRequest.message)
}

// optional string args = 3;
inline bool CMsgBrowserViewPostMessageToParentRequest::_internal_has_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserViewPostMessageToParentRequest::has_args() const {
  return _internal_has_args();
}
inline void CMsgBrowserViewPostMessageToParentRequest::clear_args() {
  args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::args() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserViewPostMessageToParentRequest.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserViewPostMessageToParentRequest::set_args(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserViewPostMessageToParentRequest.args)
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserViewPostMessageToParentRequest.args)
  return _s;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::_internal_args() const {
  return args_.Get();
}
inline void CMsgBrowserViewPostMessageToParentRequest::_internal_set_args(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::_internal_mutable_args() {
  _has_bits_[0] |= 0x00000002u;
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::release_args() {
  // @@protoc_insertion_point(field_release:CMsgBrowserViewPostMessageToParentRequest.args)
  if (!_internal_has_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserViewPostMessageToParentRequest::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserViewPostMessageToParentRequest.args)
}

// optional string requesting_url = 4;
inline bool CMsgBrowserViewPostMessageToParentRequest::_internal_has_requesting_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBrowserViewPostMessageToParentRequest::has_requesting_url() const {
  return _internal_has_requesting_url();
}
inline void CMsgBrowserViewPostMessageToParentRequest::clear_requesting_url() {
  requesting_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::requesting_url() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserViewPostMessageToParentRequest.requesting_url)
  return _internal_requesting_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBrowserViewPostMessageToParentRequest::set_requesting_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 requesting_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBrowserViewPostMessageToParentRequest.requesting_url)
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::mutable_requesting_url() {
  std::string* _s = _internal_mutable_requesting_url();
  // @@protoc_insertion_point(field_mutable:CMsgBrowserViewPostMessageToParentRequest.requesting_url)
  return _s;
}
inline const std::string& CMsgBrowserViewPostMessageToParentRequest::_internal_requesting_url() const {
  return requesting_url_.Get();
}
inline void CMsgBrowserViewPostMessageToParentRequest::_internal_set_requesting_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  requesting_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::_internal_mutable_requesting_url() {
  _has_bits_[0] |= 0x00000004u;
  return requesting_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBrowserViewPostMessageToParentRequest::release_requesting_url() {
  // @@protoc_insertion_point(field_release:CMsgBrowserViewPostMessageToParentRequest.requesting_url)
  if (!_internal_has_requesting_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = requesting_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requesting_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    requesting_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBrowserViewPostMessageToParentRequest::set_allocated_requesting_url(std::string* requesting_url) {
  if (requesting_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  requesting_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesting_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (requesting_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    requesting_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBrowserViewPostMessageToParentRequest.requesting_url)
}

// -------------------------------------------------------------------

// CMsgBlockedRequest

// optional uint32 browser_handle = 1;
inline bool CMsgBlockedRequest::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBlockedRequest::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBlockedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBlockedRequest::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBlockedRequest::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBlockedRequest.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBlockedRequest::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgBlockedRequest::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBlockedRequest.browser_handle)
}

// optional string url = 2;
inline bool CMsgBlockedRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBlockedRequest::has_url() const {
  return _internal_has_url();
}
inline void CMsgBlockedRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBlockedRequest::url() const {
  // @@protoc_insertion_point(field_get:CMsgBlockedRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBlockedRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBlockedRequest.url)
}
inline std::string* CMsgBlockedRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgBlockedRequest.url)
  return _s;
}
inline const std::string& CMsgBlockedRequest::_internal_url() const {
  return url_.Get();
}
inline void CMsgBlockedRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBlockedRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBlockedRequest::release_url() {
  // @@protoc_insertion_point(field_release:CMsgBlockedRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBlockedRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBlockedRequest.url)
}

// -------------------------------------------------------------------

// CMsgBrowserFocusChanged

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserFocusChanged::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBrowserFocusChanged::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgBrowserFocusChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBrowserFocusChanged::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgBrowserFocusChanged::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserFocusChanged.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgBrowserFocusChanged::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgBrowserFocusChanged::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserFocusChanged.browser_handle)
}

// optional bool focused = 2;
inline bool CMsgBrowserFocusChanged::_internal_has_focused() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBrowserFocusChanged::has_focused() const {
  return _internal_has_focused();
}
inline void CMsgBrowserFocusChanged::clear_focused() {
  focused_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgBrowserFocusChanged::_internal_focused() const {
  return focused_;
}
inline bool CMsgBrowserFocusChanged::focused() const {
  // @@protoc_insertion_point(field_get:CMsgBrowserFocusChanged.focused)
  return _internal_focused();
}
inline void CMsgBrowserFocusChanged::_internal_set_focused(bool value) {
  _has_bits_[0] |= 0x00000002u;
  focused_ = value;
}
inline void CMsgBrowserFocusChanged::set_focused(bool value) {
  _internal_set_focused(value);
  // @@protoc_insertion_point(field_set:CMsgBrowserFocusChanged.focused)
}

// -------------------------------------------------------------------

// CMsgSetProtocolBlockList

// optional uint32 browser_handle = 1;
inline bool CMsgSetProtocolBlockList::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetProtocolBlockList::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetProtocolBlockList::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSetProtocolBlockList::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetProtocolBlockList::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetProtocolBlockList.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetProtocolBlockList::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  browser_handle_ = value;
}
inline void CMsgSetProtocolBlockList::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetProtocolBlockList.browser_handle)
}

// optional string list = 2;
inline bool CMsgSetProtocolBlockList::_internal_has_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetProtocolBlockList::has_list() const {
  return _internal_has_list();
}
inline void CMsgSetProtocolBlockList::clear_list() {
  list_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetProtocolBlockList::list() const {
  // @@protoc_insertion_point(field_get:CMsgSetProtocolBlockList.list)
  return _internal_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSetProtocolBlockList::set_list(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSetProtocolBlockList.list)
}
inline std::string* CMsgSetProtocolBlockList::mutable_list() {
  std::string* _s = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:CMsgSetProtocolBlockList.list)
  return _s;
}
inline const std::string& CMsgSetProtocolBlockList::_internal_list() const {
  return list_.Get();
}
inline void CMsgSetProtocolBlockList::_internal_set_list(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSetProtocolBlockList::_internal_mutable_list() {
  _has_bits_[0] |= 0x00000001u;
  return list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSetProtocolBlockList::release_list() {
  // @@protoc_insertion_point(field_release:CMsgSetProtocolBlockList.list)
  if (!_internal_has_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSetProtocolBlockList::set_allocated_list(std::string* list) {
  if (list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), list,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSetProtocolBlockList.list)
}

// -------------------------------------------------------------------

// CMsgSetForceDeviceScaleFactors

// optional double dpi_scale = 1;
inline bool CMsgSetForceDeviceScaleFactors::_internal_has_dpi_scale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetForceDeviceScaleFactors::has_dpi_scale() const {
  return _internal_has_dpi_scale();
}
inline void CMsgSetForceDeviceScaleFactors::clear_dpi_scale() {
  dpi_scale_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CMsgSetForceDeviceScaleFactors::_internal_dpi_scale() const {
  return dpi_scale_;
}
inline double CMsgSetForceDeviceScaleFactors::dpi_scale() const {
  // @@protoc_insertion_point(field_get:CMsgSetForceDeviceScaleFactors.dpi_scale)
  return _internal_dpi_scale();
}
inline void CMsgSetForceDeviceScaleFactors::_internal_set_dpi_scale(double value) {
  _has_bits_[0] |= 0x00000001u;
  dpi_scale_ = value;
}
inline void CMsgSetForceDeviceScaleFactors::set_dpi_scale(double value) {
  _internal_set_dpi_scale(value);
  // @@protoc_insertion_point(field_set:CMsgSetForceDeviceScaleFactors.dpi_scale)
}

// optional double browser_scale = 2;
inline bool CMsgSetForceDeviceScaleFactors::_internal_has_browser_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetForceDeviceScaleFactors::has_browser_scale() const {
  return _internal_has_browser_scale();
}
inline void CMsgSetForceDeviceScaleFactors::clear_browser_scale() {
  browser_scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgSetForceDeviceScaleFactors::_internal_browser_scale() const {
  return browser_scale_;
}
inline double CMsgSetForceDeviceScaleFactors::browser_scale() const {
  // @@protoc_insertion_point(field_get:CMsgSetForceDeviceScaleFactors.browser_scale)
  return _internal_browser_scale();
}
inline void CMsgSetForceDeviceScaleFactors::_internal_set_browser_scale(double value) {
  _has_bits_[0] |= 0x00000002u;
  browser_scale_ = value;
}
inline void CMsgSetForceDeviceScaleFactors::set_browser_scale(double value) {
  _internal_set_browser_scale(value);
  // @@protoc_insertion_point(field_set:CMsgSetForceDeviceScaleFactors.browser_scale)
}

// -------------------------------------------------------------------

// CMsgSetUIMode

// optional int32 ui_mode = 1;
inline bool CMsgSetUIMode::_internal_has_ui_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetUIMode::has_ui_mode() const {
  return _internal_has_ui_mode();
}
inline void CMsgSetUIMode::clear_ui_mode() {
  ui_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSetUIMode::_internal_ui_mode() const {
  return ui_mode_;
}
inline int32_t CMsgSetUIMode::ui_mode() const {
  // @@protoc_insertion_point(field_get:CMsgSetUIMode.ui_mode)
  return _internal_ui_mode();
}
inline void CMsgSetUIMode::_internal_set_ui_mode(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ui_mode_ = value;
}
inline void CMsgSetUIMode::set_ui_mode(int32_t value) {
  _internal_set_ui_mode(value);
  // @@protoc_insertion_point(field_set:CMsgSetUIMode.ui_mode)
}

// -------------------------------------------------------------------

// CMsgPopupCreated

// optional uint32 browser_handle = 1;
inline bool CMsgPopupCreated::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPopupCreated::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgPopupCreated::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPopupCreated::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgPopupCreated::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgPopupCreated.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgPopupCreated::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgPopupCreated::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgPopupCreated.browser_handle)
}

// -------------------------------------------------------------------

// CMsgSetVRKeyboardVisibility

// optional uint32 browser_handle = 1;
inline bool CMsgSetVRKeyboardVisibility::_internal_has_browser_handle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetVRKeyboardVisibility::has_browser_handle() const {
  return _internal_has_browser_handle();
}
inline void CMsgSetVRKeyboardVisibility::clear_browser_handle() {
  browser_handle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSetVRKeyboardVisibility::_internal_browser_handle() const {
  return browser_handle_;
}
inline uint32_t CMsgSetVRKeyboardVisibility::browser_handle() const {
  // @@protoc_insertion_point(field_get:CMsgSetVRKeyboardVisibility.browser_handle)
  return _internal_browser_handle();
}
inline void CMsgSetVRKeyboardVisibility::_internal_set_browser_handle(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  browser_handle_ = value;
}
inline void CMsgSetVRKeyboardVisibility::set_browser_handle(uint32_t value) {
  _internal_set_browser_handle(value);
  // @@protoc_insertion_point(field_set:CMsgSetVRKeyboardVisibility.browser_handle)
}

// optional bool visible = 2;
inline bool CMsgSetVRKeyboardVisibility::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetVRKeyboardVisibility::has_visible() const {
  return _internal_has_visible();
}
inline void CMsgSetVRKeyboardVisibility::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSetVRKeyboardVisibility::_internal_visible() const {
  return visible_;
}
inline bool CMsgSetVRKeyboardVisibility::visible() const {
  // @@protoc_insertion_point(field_get:CMsgSetVRKeyboardVisibility.visible)
  return _internal_visible();
}
inline void CMsgSetVRKeyboardVisibility::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  visible_ = value;
}
inline void CMsgSetVRKeyboardVisibility::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:CMsgSetVRKeyboardVisibility.visible)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EJSRegisterMethodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EJSRegisterMethodType>() {
  return ::EJSRegisterMethodType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_htmlmessages_2eproto
