// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_appoverview.proto

#include "steammessages_appoverview.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CAppOverview_AppAssociation::CAppOverview_AppAssociation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct CAppOverview_AppAssociationDefaultTypeInternal {
  constexpr CAppOverview_AppAssociationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppOverview_AppAssociationDefaultTypeInternal() {}
  union {
    CAppOverview_AppAssociation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppOverview_AppAssociationDefaultTypeInternal _CAppOverview_AppAssociation_default_instance_;
constexpr CAppOverview_PerClientData::CAppOverview_PerClientData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , active_beta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(uint64_t{0u})
  , display_status_(0)

  , status_percentage_(0u)
  , bytes_downloaded_(uint64_t{0u})
  , bytes_total_(uint64_t{0u})
  , installed_(false)
  , streaming_to_local_client_(false)
  , is_available_on_current_platform_(false)
  , is_invalid_os_type_(false)
  , playtime_left_(0u)
  , cloud_status_(0)
{}
struct CAppOverview_PerClientDataDefaultTypeInternal {
  constexpr CAppOverview_PerClientDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppOverview_PerClientDataDefaultTypeInternal() {}
  union {
    CAppOverview_PerClientData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppOverview_PerClientDataDefaultTypeInternal _CAppOverview_PerClientData_default_instance_;
constexpr CAppOverview::CAppOverview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_tag_()
  , association_()
  , store_category_()
  , per_client_data_()
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_as_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_data_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , library_capsule_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , library_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mastersub_includedwith_logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_license_site_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , app_type_(0)

  , mru_index_(0u)
  , rt_recent_activity_time_(0u)
  , minutes_playtime_forever_(0u)
  , minutes_playtime_last_two_weeks_(0u)
  , rt_last_time_played_(0u)
  , rt_original_release_date_(0u)
  , rt_steam_release_date_(0u)
  , controller_support_(0)

  , visible_in_game_list_(false)
  , vr_supported_(false)
  , third_party_mod_(false)
  , vr_only_(false)
  , metacritic_score_(0u)
  , size_on_disk_(uint64_t{0u})
  , most_available_clientid_(uint64_t{0u})
  , selected_clientid_(uint64_t{0u})
  , rt_store_asset_mtime_(0u)
  , rt_custom_image_mtime_(0u)
  , rt_purchased_time_(0u)
  , optional_parent_app_id_(0u)
  , owner_account_id_(0u)
  , review_score_with_bombs_(0u)
  , review_percentage_with_bombs_(0u)
  , review_score_without_bombs_(0u)
  , review_percentage_without_bombs_(0u)
  , mastersub_appid_(0u)
  , shortcut_override_appid_(0u)
  , steam_deck_compat_category_(0)

  , rt_last_time_locally_played_(0u){}
struct CAppOverviewDefaultTypeInternal {
  constexpr CAppOverviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppOverviewDefaultTypeInternal() {}
  union {
    CAppOverview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppOverviewDefaultTypeInternal _CAppOverview_default_instance_;
constexpr CAppOverview_Change::CAppOverview_Change(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_overview_()
  , removed_appid_()
  , full_update_(false)
  , update_complete_(false){}
struct CAppOverview_ChangeDefaultTypeInternal {
  constexpr CAppOverview_ChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppOverview_ChangeDefaultTypeInternal() {}
  union {
    CAppOverview_Change _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppOverview_ChangeDefaultTypeInternal _CAppOverview_Change_default_instance_;
constexpr CAppBootstrapData::CAppBootstrapData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_tag_()
  , appid_(0u)
  , hidden_(false){}
struct CAppBootstrapDataDefaultTypeInternal {
  constexpr CAppBootstrapDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAppBootstrapDataDefaultTypeInternal() {}
  union {
    CAppBootstrapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAppBootstrapDataDefaultTypeInternal _CAppBootstrapData_default_instance_;
constexpr CLibraryBootstrapData::CLibraryBootstrapData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_data_(){}
struct CLibraryBootstrapDataDefaultTypeInternal {
  constexpr CLibraryBootstrapDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLibraryBootstrapDataDefaultTypeInternal() {}
  union {
    CLibraryBootstrapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLibraryBootstrapDataDefaultTypeInternal _CLibraryBootstrapData_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fappoverview_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fappoverview_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fappoverview_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fappoverview_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CAppOverview_AppAssociation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_AppAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAppOverview_AppAssociation, type_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_AppAssociation, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, clientid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, client_name_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, display_status_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, status_percentage_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, active_beta_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, installed_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, bytes_total_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, streaming_to_local_client_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, is_available_on_current_platform_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, is_invalid_os_type_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, playtime_left_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_PerClientData, cloud_status_),
  2,
  0,
  3,
  4,
  1,
  7,
  5,
  6,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CAppOverview, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAppOverview, appid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, display_name_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, visible_in_game_list_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, sort_as_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, app_type_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, mru_index_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_recent_activity_time_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, minutes_playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, minutes_playtime_last_two_weeks_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_last_time_played_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, store_tag_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, association_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, store_category_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_original_release_date_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_steam_release_date_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, icon_hash_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, controller_support_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, vr_supported_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, metacritic_score_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, size_on_disk_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, third_party_mod_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, icon_data_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, icon_data_format_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, gameid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, library_capsule_filename_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, per_client_data_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, most_available_clientid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, selected_clientid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_store_asset_mtime_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_custom_image_mtime_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, optional_parent_app_id_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, review_score_with_bombs_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, review_percentage_with_bombs_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, review_score_without_bombs_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, review_percentage_without_bombs_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, library_id_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, vr_only_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, mastersub_appid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, mastersub_includedwith_logo_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, site_license_site_name_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, shortcut_override_appid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, steam_deck_compat_category_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_last_time_locally_played_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, rt_purchased_time_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview, header_filename_),
  11,
  0,
  21,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  19,
  2,
  20,
  22,
  25,
  26,
  23,
  3,
  4,
  5,
  6,
  ~0u,
  27,
  28,
  29,
  30,
  32,
  33,
  34,
  35,
  36,
  37,
  7,
  24,
  38,
  8,
  9,
  39,
  40,
  41,
  31,
  10,
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, app_overview_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, removed_appid_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, full_update_),
  PROTOBUF_FIELD_OFFSET(::CAppOverview_Change, update_complete_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAppBootstrapData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAppBootstrapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAppBootstrapData, appid_),
  PROTOBUF_FIELD_OFFSET(::CAppBootstrapData, hidden_),
  PROTOBUF_FIELD_OFFSET(::CAppBootstrapData, user_tag_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CLibraryBootstrapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLibraryBootstrapData, app_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CAppOverview_AppAssociation)},
  { 10, 29, -1, sizeof(::CAppOverview_PerClientData)},
  { 42, 94, -1, sizeof(::CAppOverview)},
  { 140, 150, -1, sizeof(::CAppOverview_Change)},
  { 154, 163, -1, sizeof(::CAppBootstrapData)},
  { 166, -1, -1, sizeof(::CLibraryBootstrapData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppOverview_AppAssociation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppOverview_PerClientData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppOverview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppOverview_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAppBootstrapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLibraryBootstrapData_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fappoverview_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037steammessages_appoverview.proto\032\013enums"
  ".proto\"m\n\033CAppOverview_AppAssociation\022@\n"
  "\004type\030\001 \001(\0162\024.EAppAssociationType:\034k_EAp"
  "pAssociationTypeInvalid\022\014\n\004name\030\002 \001(\t\"\302\003"
  "\n\032CAppOverview_PerClientData\022\020\n\010clientid"
  "\030\001 \001(\004\022\023\n\013client_name\030\002 \001(\t\022@\n\016display_s"
  "tatus\030\003 \001(\0162\017.EDisplayStatus:\027k_EDisplay"
  "StatusInvalid\022\034\n\021status_percentage\030\004 \001(\r"
  ":\0010\022\023\n\013active_beta\030\005 \001(\t\022\021\n\tinstalled\030\006 "
  "\001(\010\022\033\n\020bytes_downloaded\030\007 \001(\004:\0010\022\026\n\013byte"
  "s_total\030\010 \001(\004:\0010\022!\n\031streaming_to_local_c"
  "lient\030\t \001(\010\022(\n is_available_on_current_p"
  "latform\030\n \001(\010\022\032\n\022is_invalid_os_type\030\013 \001("
  "\010\022\025\n\rplaytime_left\030\014 \001(\r\022@\n\014cloud_status"
  "\030\r \001(\0162\020.EAppCloudStatus:\030k_EAppCloudSta"
  "tusInvalid\"\373\013\n\014CAppOverview\022\r\n\005appid\030\001 \001"
  "(\r\022\024\n\014display_name\030\002 \001(\t\022\034\n\024visible_in_g"
  "ame_list\030\004 \001(\010\022\017\n\007sort_as\030\006 \001(\t\0223\n\010app_t"
  "ype\030\007 \001(\0162\016.EProtoAppType:\021k_EAppTypeInv"
  "alid\022\021\n\tmru_index\030\r \001(\r\022\"\n\027rt_recent_act"
  "ivity_time\030\016 \001(\r:\0010\022#\n\030minutes_playtime_"
  "forever\030\020 \001(\r:\0010\022*\n\037minutes_playtime_las"
  "t_two_weeks\030\021 \001(\r:\0010\022\036\n\023rt_last_time_pla"
  "yed\030\022 \001(\r:\0010\022\021\n\tstore_tag\030\023 \003(\r\0221\n\013assoc"
  "iation\030\024 \003(\0132\034.CAppOverview_AppAssociati"
  "on\022\026\n\016store_category\030\027 \003(\r\022#\n\030rt_origina"
  "l_release_date\030\031 \001(\r:\0010\022 \n\025rt_steam_rele"
  "ase_date\030\032 \001(\r:\0010\022\021\n\ticon_hash\030\033 \001(\t\022Y\n\022"
  "controller_support\030\037 \001(\0162\033.EAppControlle"
  "rSupportLevel: k_EAppControllerSupportLe"
  "velNone\022\024\n\014vr_supported\030  \001(\010\022\030\n\020metacri"
  "tic_score\030$ \001(\r\022\024\n\014size_on_disk\030% \001(\004\022\027\n"
  "\017third_party_mod\030& \001(\010\022\021\n\ticon_data\030\' \001("
  "\t\022\030\n\020icon_data_format\030( \001(\t\022\016\n\006gameid\030) "
  "\001(\t\022 \n\030library_capsule_filename\030* \001(\t\0224\n"
  "\017per_client_data\030+ \003(\0132\033.CAppOverview_Pe"
  "rClientData\022\037\n\027most_available_clientid\030,"
  " \001(\004\022\031\n\021selected_clientid\030- \001(\004\022\034\n\024rt_st"
  "ore_asset_mtime\030. \001(\r\022\035\n\025rt_custom_image"
  "_mtime\030/ \001(\r\022\036\n\026optional_parent_app_id\0300"
  " \001(\r\022\030\n\020owner_account_id\0301 \001(\r\022\037\n\027review"
  "_score_with_bombs\0305 \001(\r\022$\n\034review_percen"
  "tage_with_bombs\0306 \001(\r\022\"\n\032review_score_wi"
  "thout_bombs\0307 \001(\r\022\'\n\037review_percentage_w"
  "ithout_bombs\0308 \001(\r\022\022\n\nlibrary_id\0309 \001(\t\022\017"
  "\n\007vr_only\030: \001(\010\022\027\n\017mastersub_appid\030; \001(\r"
  "\022#\n\033mastersub_includedwith_logo\030< \001(\t\022\036\n"
  "\026site_license_site_name\030> \001(\t\022\037\n\027shortcu"
  "t_override_appid\030\? \001(\r\022o\n\032steam_deck_com"
  "pat_category\030@ \001(\0162 .ESteamDeckCompatibi"
  "lityCategory:)k_ESteamDeckCompatibilityC"
  "ategory_Unknown\022#\n\033rt_last_time_locally_"
  "played\030A \001(\r\022\031\n\021rt_purchased_time\030B \001(\r\022"
  "\027\n\017header_filename\030C \001(\t\"\177\n\023CAppOverview"
  "_Change\022#\n\014app_overview\030\001 \003(\0132\r.CAppOver"
  "view\022\025\n\rremoved_appid\030\002 \003(\r\022\023\n\013full_upda"
  "te\030\003 \001(\010\022\027\n\017update_complete\030\004 \001(\010\"D\n\021CAp"
  "pBootstrapData\022\r\n\005appid\030\001 \001(\r\022\016\n\006hidden\030"
  "\002 \001(\010\022\020\n\010user_tag\030\003 \003(\t\"=\n\025CLibraryBoots"
  "trapData\022$\n\010app_data\030\001 \003(\0132\022.CAppBootstr"
  "apData*\345\t\n\016EDisplayStatus\022\033\n\027k_EDisplayS"
  "tatusInvalid\020\000\022\035\n\031k_EDisplayStatusLaunch"
  "ing\020\001\022 \n\034k_EDisplayStatusUninstalling\020\002\022"
  "\036\n\032k_EDisplayStatusInstalling\020\003\022\033\n\027k_EDi"
  "splayStatusRunning\020\004\022\036\n\032k_EDisplayStatus"
  "Validating\020\005\022\034\n\030k_EDisplayStatusUpdating"
  "\020\006\022\037\n\033k_EDisplayStatusDownloading\020\007\022!\n\035k"
  "_EDisplayStatusSynchronizing\020\010\022\"\n\036k_EDis"
  "playStatusReadyToInstall\020\t\022\"\n\036k_EDisplay"
  "StatusReadyToPreload\020\n\022!\n\035k_EDisplayStat"
  "usReadyToLaunch\020\013\022$\n k_EDisplayStatusReg"
  "ionRestricted\020\014\022\037\n\033k_EDisplayStatusPresa"
  "leOnly\020\r\022#\n\037k_EDisplayStatusInvalidPlatf"
  "orm\020\016\022#\n\037k_EDisplayStatusPreloadComplete"
  "\020\020\022\"\n\036k_EDisplayStatusBorrowerLocked\020\021\022 "
  "\n\034k_EDisplayStatusUpdatePaused\020\022\022 \n\034k_ED"
  "isplayStatusUpdateQueued\020\023\022\"\n\036k_EDisplay"
  "StatusUpdateRequired\020\024\022\"\n\036k_EDisplayStat"
  "usUpdateDisabled\020\025\022\"\n\036k_EDisplayStatusDo"
  "wnloadPaused\020\026\022\"\n\036k_EDisplayStatusDownlo"
  "adQueued\020\027\022$\n k_EDisplayStatusDownloadRe"
  "quired\020\030\022$\n k_EDisplayStatusDownloadDisa"
  "bled\020\031\022\"\n\036k_EDisplayStatusLicensePending"
  "\020\032\022\"\n\036k_EDisplayStatusLicenseExpired\020\033\022 "
  "\n\034k_EDisplayStatusAvailForFree\020\034\022!\n\035k_ED"
  "isplayStatusAvailToBorrow\020\035\022\"\n\036k_EDispla"
  "yStatusAvailGuestPass\020\036\022\034\n\030k_EDisplaySta"
  "tusPurchase\020\037\022\037\n\033k_EDisplayStatusUnavail"
  "able\020 \022!\n\035k_EDisplayStatusNotLaunchable\020"
  "!\022\036\n\032k_EDisplayStatusCloudError\020\"\022\"\n\036k_E"
  "DisplayStatusCloudOutOfDate\020#\022\037\n\033k_EDisp"
  "layStatusTerminating\020$*\367\002\n\017EAppCloudStat"
  "us\022\034\n\030k_EAppCloudStatusInvalid\020\000\022\035\n\031k_EA"
  "ppCloudStatusDisabled\020\001\022\034\n\030k_EAppCloudSt"
  "atusUnknown\020\002\022!\n\035k_EAppCloudStatusSynchr"
  "onized\020\003\022\035\n\031k_EAppCloudStatusChecking\020\004\022"
  "\036\n\032k_EAppCloudStatusOutOfSync\020\005\022\036\n\032k_EAp"
  "pCloudStatusUploading\020\006\022 \n\034k_EAppCloudSt"
  "atusDownloading\020\007\022\037\n\033k_EAppCloudStatusSy"
  "ncFailed\020\010\022\035\n\031k_EAppCloudStatusConflict\020"
  "\t\022%\n!k_EAppCloudStatusPendingElsewhere\020\n"
  "*\352\003\n\rEProtoAppType\022\025\n\021k_EAppTypeInvalid\020"
  "\000\022\022\n\016k_EAppTypeGame\020\001\022\031\n\025k_EAppTypeAppli"
  "cation\020\002\022\022\n\016k_EAppTypeTool\020\004\022\022\n\016k_EAppTy"
  "peDemo\020\010\022\027\n\023k_EAppTypeDeprected\020\020\022\021\n\rk_E"
  "AppTypeDLC\020 \022\023\n\017k_EAppTypeGuide\020@\022\025\n\020k_E"
  "AppTypeDriver\020\200\001\022\025\n\020k_EAppTypeConfig\020\200\002\022"
  "\027\n\022k_EAppTypeHardware\020\200\004\022\030\n\023k_EAppTypeFr"
  "anchise\020\200\010\022\024\n\017k_EAppTypeVideo\020\200\020\022\025\n\020k_EA"
  "ppTypePlugin\020\200 \022\031\n\024k_EAppTypeMusicAlbum\020"
  "\200@\022\026\n\020k_EAppTypeSeries\020\200\200\001\022\025\n\017k_EAppType"
  "Comic\020\200\200\002\022\024\n\016k_EAppTypeBeta\020\200\200\004\022\032\n\022k_EAp"
  "pTypeShortcut\020\200\200\200\200\004\022 \n\023k_EAppTypeDepotOn"
  "ly\020\200\200\200\200\370\377\377\377\377\001*\243\001\n\023EAppAssociationType\022 \n"
  "\034k_EAppAssociationTypeInvalid\020\000\022\"\n\036k_EAp"
  "pAssociationTypePublisher\020\001\022\"\n\036k_EAppAss"
  "ociationTypeDeveloper\020\002\022\"\n\036k_EAppAssocia"
  "tionTypeFranchise\020\003*\221\001\n\032EAppControllerSu"
  "pportLevel\022$\n k_EAppControllerSupportLev"
  "elNone\020\000\022\'\n#k_EAppControllerSupportLevel"
  "Partial\020\001\022$\n k_EAppControllerSupportLeve"
  "lFull\020\002*\375\001\n#EAppGamepadGyroTrackpadSuppo"
  "rtLevel\0229\n,k_EAppGamepadGyroTrackpadSupp"
  "ortLevelUnknown\020\377\377\377\377\377\377\377\377\377\001\0222\n.k_EAppGame"
  "padGyroTrackpadSupportLevelNoGamepad\020\000\0220"
  "\n,k_EAppGamepadGyroTrackpadSupportLevelG"
  "amepad\020\001\0225\n1k_EAppGamepadGyroTrackpadSup"
  "portLevelSimultaneous\020\002B\005H\001\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fappoverview_2eproto_deps[1] = {
  &::descriptor_table_enums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fappoverview_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fappoverview_2eproto = {
  false, false, 5110, descriptor_table_protodef_steammessages_5fappoverview_2eproto, "steammessages_appoverview.proto", 
  &descriptor_table_steammessages_5fappoverview_2eproto_once, descriptor_table_steammessages_5fappoverview_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_steammessages_5fappoverview_2eproto::offsets,
  file_level_metadata_steammessages_5fappoverview_2eproto, file_level_enum_descriptors_steammessages_5fappoverview_2eproto, file_level_service_descriptors_steammessages_5fappoverview_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fappoverview_2eproto_getter() {
  return &descriptor_table_steammessages_5fappoverview_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fappoverview_2eproto(&descriptor_table_steammessages_5fappoverview_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDisplayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[0];
}
bool EDisplayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppCloudStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[1];
}
bool EAppCloudStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[2];
}
bool EProtoAppType_IsValid(int value) {
  switch (value) {
    case -2147483647 - 1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppAssociationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[3];
}
bool EAppAssociationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppControllerSupportLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[4];
}
bool EAppControllerSupportLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppGamepadGyroTrackpadSupportLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fappoverview_2eproto);
  return file_level_enum_descriptors_steammessages_5fappoverview_2eproto[5];
}
bool EAppGamepadGyroTrackpadSupportLevel_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CAppOverview_AppAssociation::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppOverview_AppAssociation>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAppOverview_AppAssociation::CAppOverview_AppAssociation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CAppOverview_AppAssociation)
}
CAppOverview_AppAssociation::CAppOverview_AppAssociation(const CAppOverview_AppAssociation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CAppOverview_AppAssociation)
}

inline void CAppOverview_AppAssociation::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

CAppOverview_AppAssociation::~CAppOverview_AppAssociation() {
  // @@protoc_insertion_point(destructor:CAppOverview_AppAssociation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAppOverview_AppAssociation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAppOverview_AppAssociation::ArenaDtor(void* object) {
  CAppOverview_AppAssociation* _this = reinterpret_cast< CAppOverview_AppAssociation* >(object);
  (void)_this;
}
void CAppOverview_AppAssociation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppOverview_AppAssociation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppOverview_AppAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppOverview_AppAssociation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppOverview_AppAssociation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EAppAssociationType type = 1 [default = k_EAppAssociationTypeInvalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EAppAssociationType_IsValid(val))) {
            _internal_set_type(static_cast<::EAppAssociationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview_AppAssociation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAppOverview_AppAssociation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppOverview_AppAssociation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EAppAssociationType type = 1 [default = k_EAppAssociationTypeInvalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview_AppAssociation.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppOverview_AppAssociation)
  return target;
}

size_t CAppOverview_AppAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppOverview_AppAssociation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .EAppAssociationType type = 1 [default = k_EAppAssociationTypeInvalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAppOverview_AppAssociation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAppOverview_AppAssociation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAppOverview_AppAssociation::GetClassData() const { return &_class_data_; }

void CAppOverview_AppAssociation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAppOverview_AppAssociation *>(to)->MergeFrom(
      static_cast<const CAppOverview_AppAssociation &>(from));
}


void CAppOverview_AppAssociation::MergeFrom(const CAppOverview_AppAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppOverview_AppAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAppOverview_AppAssociation::CopyFrom(const CAppOverview_AppAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppOverview_AppAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppOverview_AppAssociation::IsInitialized() const {
  return true;
}

void CAppOverview_AppAssociation::InternalSwap(CAppOverview_AppAssociation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppOverview_AppAssociation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[0]);
}

// ===================================================================

class CAppOverview_PerClientData::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppOverview_PerClientData>()._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_active_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes_total(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_streaming_to_local_client(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_available_on_current_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_invalid_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_playtime_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cloud_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CAppOverview_PerClientData::CAppOverview_PerClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CAppOverview_PerClientData)
}
CAppOverview_PerClientData::CAppOverview_PerClientData(const CAppOverview_PerClientData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_name()) {
    client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_name(), 
      GetArenaForAllocation());
  }
  active_beta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    active_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_active_beta()) {
    active_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_active_beta(), 
      GetArenaForAllocation());
  }
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cloud_status_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(cloud_status_));
  // @@protoc_insertion_point(copy_constructor:CAppOverview_PerClientData)
}

inline void CAppOverview_PerClientData::SharedCtor() {
client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
active_beta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  active_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clientid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cloud_status_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(cloud_status_));
}

CAppOverview_PerClientData::~CAppOverview_PerClientData() {
  // @@protoc_insertion_point(destructor:CAppOverview_PerClientData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAppOverview_PerClientData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_beta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAppOverview_PerClientData::ArenaDtor(void* object) {
  CAppOverview_PerClientData* _this = reinterpret_cast< CAppOverview_PerClientData* >(object);
  (void)_this;
}
void CAppOverview_PerClientData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppOverview_PerClientData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppOverview_PerClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppOverview_PerClientData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      active_beta_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&installed_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(installed_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&streaming_to_local_client_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cloud_status_) -
        reinterpret_cast<char*>(&streaming_to_local_client_)) + sizeof(cloud_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppOverview_PerClientData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview_PerClientData.client_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EDisplayStatus display_status = 3 [default = k_EDisplayStatusInvalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDisplayStatus_IsValid(val))) {
            _internal_set_display_status(static_cast<::EDisplayStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status_percentage = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_status_percentage(&has_bits);
          status_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string active_beta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_active_beta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview_PerClientData.active_beta");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_installed(&has_bits);
          installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_total = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_total(&has_bits);
          bytes_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool streaming_to_local_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_streaming_to_local_client(&has_bits);
          streaming_to_local_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_available_on_current_platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_available_on_current_platform(&has_bits);
          is_available_on_current_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_invalid_os_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_invalid_os_type(&has_bits);
          is_invalid_os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 playtime_left = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_playtime_left(&has_bits);
          playtime_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EAppCloudStatus cloud_status = 13 [default = k_EAppCloudStatusInvalid];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EAppCloudStatus_IsValid(val))) {
            _internal_set_cloud_status(static_cast<::EAppCloudStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAppOverview_PerClientData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppOverview_PerClientData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 clientid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clientid(), target);
  }

  // optional string client_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview_PerClientData.client_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  // optional .EDisplayStatus display_status = 3 [default = k_EDisplayStatusInvalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_display_status(), target);
  }

  // optional uint32 status_percentage = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status_percentage(), target);
  }

  // optional string active_beta = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_active_beta().data(), static_cast<int>(this->_internal_active_beta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview_PerClientData.active_beta");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_active_beta(), target);
  }

  // optional bool installed = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_installed(), target);
  }

  // optional uint64 bytes_downloaded = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_bytes_downloaded(), target);
  }

  // optional uint64 bytes_total = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_bytes_total(), target);
  }

  // optional bool streaming_to_local_client = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_streaming_to_local_client(), target);
  }

  // optional bool is_available_on_current_platform = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_available_on_current_platform(), target);
  }

  // optional bool is_invalid_os_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_invalid_os_type(), target);
  }

  // optional uint32 playtime_left = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_playtime_left(), target);
  }

  // optional .EAppCloudStatus cloud_status = 13 [default = k_EAppCloudStatusInvalid];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_cloud_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppOverview_PerClientData)
  return target;
}

size_t CAppOverview_PerClientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppOverview_PerClientData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_name());
    }

    // optional string active_beta = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_active_beta());
    }

    // optional uint64 clientid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clientid());
    }

    // optional .EDisplayStatus display_status = 3 [default = k_EDisplayStatusInvalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_status());
    }

    // optional uint32 status_percentage = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_percentage());
    }

    // optional uint64 bytes_downloaded = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_downloaded());
    }

    // optional uint64 bytes_total = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_total());
    }

    // optional bool installed = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool streaming_to_local_client = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_available_on_current_platform = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_invalid_os_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 playtime_left = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playtime_left());
    }

    // optional .EAppCloudStatus cloud_status = 13 [default = k_EAppCloudStatusInvalid];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cloud_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAppOverview_PerClientData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAppOverview_PerClientData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAppOverview_PerClientData::GetClassData() const { return &_class_data_; }

void CAppOverview_PerClientData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAppOverview_PerClientData *>(to)->MergeFrom(
      static_cast<const CAppOverview_PerClientData &>(from));
}


void CAppOverview_PerClientData::MergeFrom(const CAppOverview_PerClientData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppOverview_PerClientData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_name(from._internal_client_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_active_beta(from._internal_active_beta());
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_status_ = from.display_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_percentage_ = from.status_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_total_ = from.bytes_total_;
    }
    if (cached_has_bits & 0x00000080u) {
      installed_ = from.installed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      streaming_to_local_client_ = from.streaming_to_local_client_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_available_on_current_platform_ = from.is_available_on_current_platform_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_invalid_os_type_ = from.is_invalid_os_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      playtime_left_ = from.playtime_left_;
    }
    if (cached_has_bits & 0x00001000u) {
      cloud_status_ = from.cloud_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAppOverview_PerClientData::CopyFrom(const CAppOverview_PerClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppOverview_PerClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppOverview_PerClientData::IsInitialized() const {
  return true;
}

void CAppOverview_PerClientData::InternalSwap(CAppOverview_PerClientData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_name_, lhs_arena,
      &other->client_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &active_beta_, lhs_arena,
      &other->active_beta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAppOverview_PerClientData, cloud_status_)
      + sizeof(CAppOverview_PerClientData::cloud_status_)
      - PROTOBUF_FIELD_OFFSET(CAppOverview_PerClientData, clientid_)>(
          reinterpret_cast<char*>(&clientid_),
          reinterpret_cast<char*>(&other->clientid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppOverview_PerClientData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[1]);
}

// ===================================================================

class CAppOverview::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppOverview>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visible_in_game_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_sort_as(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mru_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_rt_recent_activity_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_minutes_playtime_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_minutes_playtime_last_two_weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_rt_last_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rt_original_release_date(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rt_steam_release_date(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_icon_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_controller_support(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_vr_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_metacritic_score(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_size_on_disk(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_third_party_mod(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_icon_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_icon_data_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_library_capsule_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_most_available_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_selected_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_rt_store_asset_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_rt_custom_image_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_optional_parent_app_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_review_score_with_bombs(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_review_percentage_with_bombs(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_review_score_without_bombs(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_review_percentage_without_bombs(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_library_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vr_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mastersub_appid(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_mastersub_includedwith_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_site_license_site_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_shortcut_override_appid(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_steam_deck_compat_category(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_rt_last_time_locally_played(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_rt_purchased_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_header_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CAppOverview::CAppOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  store_tag_(arena),
  association_(arena),
  store_category_(arena),
  per_client_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CAppOverview)
}
CAppOverview::CAppOverview(const CAppOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      store_tag_(from.store_tag_),
      association_(from.association_),
      store_category_(from.store_category_),
      per_client_data_(from.per_client_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  sort_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sort_as()) {
    sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort_as(), 
      GetArenaForAllocation());
  }
  icon_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_hash()) {
    icon_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_hash(), 
      GetArenaForAllocation());
  }
  icon_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_data()) {
    icon_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_data(), 
      GetArenaForAllocation());
  }
  icon_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_data_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_data_format()) {
    icon_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_data_format(), 
      GetArenaForAllocation());
  }
  gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gameid()) {
    gameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameid(), 
      GetArenaForAllocation());
  }
  library_capsule_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    library_capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_library_capsule_filename()) {
    library_capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_library_capsule_filename(), 
      GetArenaForAllocation());
  }
  library_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    library_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_library_id()) {
    library_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_library_id(), 
      GetArenaForAllocation());
  }
  mastersub_includedwith_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mastersub_includedwith_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mastersub_includedwith_logo()) {
    mastersub_includedwith_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mastersub_includedwith_logo(), 
      GetArenaForAllocation());
  }
  site_license_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_license_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_license_site_name()) {
    site_license_site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_license_site_name(), 
      GetArenaForAllocation());
  }
  header_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header_filename()) {
    header_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rt_last_time_locally_played_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(rt_last_time_locally_played_));
  // @@protoc_insertion_point(copy_constructor:CAppOverview)
}

inline void CAppOverview::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sort_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_data_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_data_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
library_capsule_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  library_capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
library_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  library_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mastersub_includedwith_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mastersub_includedwith_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
site_license_site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_license_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rt_last_time_locally_played_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(rt_last_time_locally_played_));
}

CAppOverview::~CAppOverview() {
  // @@protoc_insertion_point(destructor:CAppOverview)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAppOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_as_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_data_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_capsule_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mastersub_includedwith_logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_license_site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAppOverview::ArenaDtor(void* object) {
  CAppOverview* _this = reinterpret_cast< CAppOverview* >(object);
  (void)_this;
}
void CAppOverview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppOverview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_tag_.Clear();
  association_.Clear();
  store_category_.Clear();
  per_client_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sort_as_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      icon_data_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      gameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      library_capsule_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      library_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      mastersub_includedwith_logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      site_license_site_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      header_filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minutes_playtime_forever_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(minutes_playtime_forever_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&minutes_playtime_last_two_weeks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&third_party_mod_) -
        reinterpret_cast<char*>(&minutes_playtime_last_two_weeks_)) + sizeof(third_party_mod_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&vr_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_purchased_time_) -
        reinterpret_cast<char*>(&vr_only_)) + sizeof(rt_purchased_time_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&optional_parent_app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shortcut_override_appid_) -
        reinterpret_cast<char*>(&optional_parent_app_id_)) + sizeof(shortcut_override_appid_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&steam_deck_compat_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_last_time_locally_played_) -
        reinterpret_cast<char*>(&steam_deck_compat_category_)) + sizeof(rt_last_time_locally_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppOverview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&_has_bits_);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool visible_in_game_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_visible_in_game_list(&_has_bits_);
          visible_in_game_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sort_as = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sort_as();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.sort_as");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EProtoAppType app_type = 7 [default = k_EAppTypeInvalid];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProtoAppType_IsValid(val))) {
            _internal_set_app_type(static_cast<::EProtoAppType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mru_index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_mru_index(&_has_bits_);
          mru_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_recent_activity_time = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_rt_recent_activity_time(&_has_bits_);
          rt_recent_activity_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_playtime_forever = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_minutes_playtime_forever(&_has_bits_);
          minutes_playtime_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_minutes_playtime_last_two_weeks(&_has_bits_);
          minutes_playtime_last_two_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_last_time_played = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_rt_last_time_played(&_has_bits_);
          rt_last_time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 store_tag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_store_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_store_tag(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CAppOverview_AppAssociation association = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_association(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 store_category = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_store_category(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<uint8_t>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_store_category(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_original_release_date = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_rt_original_release_date(&_has_bits_);
          rt_original_release_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_steam_release_date = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_rt_steam_release_date(&_has_bits_);
          rt_steam_release_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_hash = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_icon_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.icon_hash");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EAppControllerSupportLevel controller_support = 31 [default = k_EAppControllerSupportLevelNone];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EAppControllerSupportLevel_IsValid(val))) {
            _internal_set_controller_support(static_cast<::EAppControllerSupportLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool vr_supported = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_vr_supported(&_has_bits_);
          vr_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 metacritic_score = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_metacritic_score(&_has_bits_);
          metacritic_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size_on_disk = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_size_on_disk(&_has_bits_);
          size_on_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool third_party_mod = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_third_party_mod(&_has_bits_);
          third_party_mod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_data = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_icon_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.icon_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_data_format = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_icon_data_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.icon_data_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gameid = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_gameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.gameid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string library_capsule_filename = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_library_capsule_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.library_capsule_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CAppOverview_PerClientData per_client_data = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_per_client_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 most_available_clientid = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_most_available_clientid(&_has_bits_);
          most_available_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 selected_clientid = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_selected_clientid(&_has_bits_);
          selected_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_store_asset_mtime = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_rt_store_asset_mtime(&_has_bits_);
          rt_store_asset_mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_custom_image_mtime = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_rt_custom_image_mtime(&_has_bits_);
          rt_custom_image_mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 optional_parent_app_id = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_optional_parent_app_id(&_has_bits_);
          optional_parent_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_owner_account_id(&_has_bits_);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 review_score_with_bombs = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_review_score_with_bombs(&_has_bits_);
          review_score_with_bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 review_percentage_with_bombs = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_review_percentage_with_bombs(&_has_bits_);
          review_percentage_with_bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 review_score_without_bombs = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_review_score_without_bombs(&_has_bits_);
          review_score_without_bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 review_percentage_without_bombs = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_review_percentage_without_bombs(&_has_bits_);
          review_percentage_without_bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string library_id = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_library_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.library_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vr_only = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_vr_only(&_has_bits_);
          vr_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mastersub_appid = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_mastersub_appid(&_has_bits_);
          mastersub_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mastersub_includedwith_logo = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_mastersub_includedwith_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.mastersub_includedwith_logo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string site_license_site_name = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_site_license_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.site_license_site_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shortcut_override_appid = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_shortcut_override_appid(&_has_bits_);
          shortcut_override_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64 [default = k_ESteamDeckCompatibilityCategory_Unknown];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamDeckCompatibilityCategory_IsValid(val))) {
            _internal_set_steam_deck_compat_category(static_cast<::ESteamDeckCompatibilityCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(64, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_last_time_locally_played = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rt_last_time_locally_played(&_has_bits_);
          rt_last_time_locally_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_purchased_time = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rt_purchased_time(&_has_bits_);
          rt_purchased_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string header_filename = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_header_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppOverview.header_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAppOverview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppOverview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // optional bool visible_in_game_list = 4;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visible_in_game_list(), target);
  }

  // optional string sort_as = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sort_as().data(), static_cast<int>(this->_internal_sort_as().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.sort_as");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sort_as(), target);
  }

  // optional .EProtoAppType app_type = 7 [default = k_EAppTypeInvalid];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_app_type(), target);
  }

  // optional uint32 mru_index = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mru_index(), target);
  }

  // optional uint32 rt_recent_activity_time = 14 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rt_recent_activity_time(), target);
  }

  // optional uint32 minutes_playtime_forever = 16 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_minutes_playtime_forever(), target);
  }

  // optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_minutes_playtime_last_two_weeks(), target);
  }

  // optional uint32 rt_last_time_played = 18 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_rt_last_time_played(), target);
  }

  // repeated uint32 store_tag = 19;
  for (int i = 0, n = this->_internal_store_tag_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_store_tag(i), target);
  }

  // repeated .CAppOverview_AppAssociation association = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_association_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_association(i), target, stream);
  }

  // repeated uint32 store_category = 23;
  for (int i = 0, n = this->_internal_store_category_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_store_category(i), target);
  }

  // optional uint32 rt_original_release_date = 25 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_rt_original_release_date(), target);
  }

  // optional uint32 rt_steam_release_date = 26 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_rt_steam_release_date(), target);
  }

  // optional string icon_hash = 27;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_hash().data(), static_cast<int>(this->_internal_icon_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.icon_hash");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_icon_hash(), target);
  }

  // optional .EAppControllerSupportLevel controller_support = 31 [default = k_EAppControllerSupportLevelNone];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_controller_support(), target);
  }

  // optional bool vr_supported = 32;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_vr_supported(), target);
  }

  // optional uint32 metacritic_score = 36;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_metacritic_score(), target);
  }

  // optional uint64 size_on_disk = 37;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(37, this->_internal_size_on_disk(), target);
  }

  // optional bool third_party_mod = 38;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_third_party_mod(), target);
  }

  // optional string icon_data = 39;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_data().data(), static_cast<int>(this->_internal_icon_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.icon_data");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_icon_data(), target);
  }

  // optional string icon_data_format = 40;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_data_format().data(), static_cast<int>(this->_internal_icon_data_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.icon_data_format");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_icon_data_format(), target);
  }

  // optional string gameid = 41;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameid().data(), static_cast<int>(this->_internal_gameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.gameid");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_gameid(), target);
  }

  // optional string library_capsule_filename = 42;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_library_capsule_filename().data(), static_cast<int>(this->_internal_library_capsule_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.library_capsule_filename");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_library_capsule_filename(), target);
  }

  // repeated .CAppOverview_PerClientData per_client_data = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_per_client_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_per_client_data(i), target, stream);
  }

  // optional uint64 most_available_clientid = 44;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(44, this->_internal_most_available_clientid(), target);
  }

  // optional uint64 selected_clientid = 45;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(45, this->_internal_selected_clientid(), target);
  }

  // optional uint32 rt_store_asset_mtime = 46;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_rt_store_asset_mtime(), target);
  }

  // optional uint32 rt_custom_image_mtime = 47;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_rt_custom_image_mtime(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 optional_parent_app_id = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_optional_parent_app_id(), target);
  }

  // optional uint32 owner_account_id = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_owner_account_id(), target);
  }

  // optional uint32 review_score_with_bombs = 53;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_review_score_with_bombs(), target);
  }

  // optional uint32 review_percentage_with_bombs = 54;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_review_percentage_with_bombs(), target);
  }

  // optional uint32 review_score_without_bombs = 55;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_review_score_without_bombs(), target);
  }

  // optional uint32 review_percentage_without_bombs = 56;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_review_percentage_without_bombs(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string library_id = 57;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_library_id().data(), static_cast<int>(this->_internal_library_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.library_id");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_library_id(), target);
  }

  // optional bool vr_only = 58;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_vr_only(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 mastersub_appid = 59;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_mastersub_appid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string mastersub_includedwith_logo = 60;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mastersub_includedwith_logo().data(), static_cast<int>(this->_internal_mastersub_includedwith_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.mastersub_includedwith_logo");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_mastersub_includedwith_logo(), target);
  }

  // optional string site_license_site_name = 62;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_site_license_site_name().data(), static_cast<int>(this->_internal_site_license_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.site_license_site_name");
    target = stream->WriteStringMaybeAliased(
        62, this->_internal_site_license_site_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 shortcut_override_appid = 63;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_shortcut_override_appid(), target);
  }

  // optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64 [default = k_ESteamDeckCompatibilityCategory_Unknown];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      64, this->_internal_steam_deck_compat_category(), target);
  }

  // optional uint32 rt_last_time_locally_played = 65;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_rt_last_time_locally_played(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 rt_purchased_time = 66;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_rt_purchased_time(), target);
  }

  // optional string header_filename = 67;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header_filename().data(), static_cast<int>(this->_internal_header_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppOverview.header_filename");
    target = stream->WriteStringMaybeAliased(
        67, this->_internal_header_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppOverview)
  return target;
}

size_t CAppOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppOverview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 store_tag = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->store_tag_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_store_tag_size());
    total_size += data_size;
  }

  // repeated .CAppOverview_AppAssociation association = 20;
  total_size += 2UL * this->_internal_association_size();
  for (const auto& msg : this->association_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 store_category = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->store_category_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_store_category_size());
    total_size += data_size;
  }

  // repeated .CAppOverview_PerClientData per_client_data = 43;
  total_size += 2UL * this->_internal_per_client_data_size();
  for (const auto& msg : this->per_client_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string display_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string sort_as = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sort_as());
    }

    // optional string icon_hash = 27;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_hash());
    }

    // optional string icon_data = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_data());
    }

    // optional string icon_data_format = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_data_format());
    }

    // optional string gameid = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameid());
    }

    // optional string library_capsule_filename = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_library_capsule_filename());
    }

    // optional string library_id = 57;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_library_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string mastersub_includedwith_logo = 60;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mastersub_includedwith_logo());
    }

    // optional string site_license_site_name = 62;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_license_site_name());
    }

    // optional string header_filename = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header_filename());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional .EProtoAppType app_type = 7 [default = k_EAppTypeInvalid];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_app_type());
    }

    // optional uint32 mru_index = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mru_index());
    }

    // optional uint32 rt_recent_activity_time = 14 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rt_recent_activity_time());
    }

    // optional uint32 minutes_playtime_forever = 16 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_playtime_forever());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_playtime_last_two_weeks());
    }

    // optional uint32 rt_last_time_played = 18 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_last_time_played());
    }

    // optional uint32 rt_original_release_date = 25 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_original_release_date());
    }

    // optional uint32 rt_steam_release_date = 26 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_steam_release_date());
    }

    // optional .EAppControllerSupportLevel controller_support = 31 [default = k_EAppControllerSupportLevelNone];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_controller_support());
    }

    // optional bool visible_in_game_list = 4;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool vr_supported = 32;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool third_party_mod = 38;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool vr_only = 58;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 metacritic_score = 36;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_metacritic_score());
    }

    // optional uint64 size_on_disk = 37;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size_on_disk());
    }

    // optional uint64 most_available_clientid = 44;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_most_available_clientid());
    }

    // optional uint64 selected_clientid = 45;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_selected_clientid());
    }

    // optional uint32 rt_store_asset_mtime = 46;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_store_asset_mtime());
    }

    // optional uint32 rt_custom_image_mtime = 47;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_custom_image_mtime());
    }

    // optional uint32 rt_purchased_time = 66;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_purchased_time());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 optional_parent_app_id = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optional_parent_app_id());
    }

    // optional uint32 owner_account_id = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 review_score_with_bombs = 53;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_review_score_with_bombs());
    }

    // optional uint32 review_percentage_with_bombs = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_review_percentage_with_bombs());
    }

    // optional uint32 review_score_without_bombs = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_review_score_without_bombs());
    }

    // optional uint32 review_percentage_without_bombs = 56;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_review_percentage_without_bombs());
    }

    // optional uint32 mastersub_appid = 59;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mastersub_appid());
    }

    // optional uint32 shortcut_override_appid = 63;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shortcut_override_appid());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64 [default = k_ESteamDeckCompatibilityCategory_Unknown];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steam_deck_compat_category());
    }

    // optional uint32 rt_last_time_locally_played = 65;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_last_time_locally_played());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAppOverview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAppOverview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAppOverview::GetClassData() const { return &_class_data_; }

void CAppOverview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAppOverview *>(to)->MergeFrom(
      static_cast<const CAppOverview &>(from));
}


void CAppOverview::MergeFrom(const CAppOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppOverview)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  store_tag_.MergeFrom(from.store_tag_);
  association_.MergeFrom(from.association_);
  store_category_.MergeFrom(from.store_category_);
  per_client_data_.MergeFrom(from.per_client_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sort_as(from._internal_sort_as());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon_hash(from._internal_icon_hash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon_data(from._internal_icon_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_icon_data_format(from._internal_icon_data_format());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_gameid(from._internal_gameid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_library_capsule_filename(from._internal_library_capsule_filename());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_library_id(from._internal_library_id());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_mastersub_includedwith_logo(from._internal_mastersub_includedwith_logo());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_site_license_site_name(from._internal_site_license_site_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_header_filename(from._internal_header_filename());
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      app_type_ = from.app_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      mru_index_ = from.mru_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      rt_recent_activity_time_ = from.rt_recent_activity_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      minutes_playtime_forever_ = from.minutes_playtime_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      minutes_playtime_last_two_weeks_ = from.minutes_playtime_last_two_weeks_;
    }
    if (cached_has_bits & 0x00020000u) {
      rt_last_time_played_ = from.rt_last_time_played_;
    }
    if (cached_has_bits & 0x00040000u) {
      rt_original_release_date_ = from.rt_original_release_date_;
    }
    if (cached_has_bits & 0x00080000u) {
      rt_steam_release_date_ = from.rt_steam_release_date_;
    }
    if (cached_has_bits & 0x00100000u) {
      controller_support_ = from.controller_support_;
    }
    if (cached_has_bits & 0x00200000u) {
      visible_in_game_list_ = from.visible_in_game_list_;
    }
    if (cached_has_bits & 0x00400000u) {
      vr_supported_ = from.vr_supported_;
    }
    if (cached_has_bits & 0x00800000u) {
      third_party_mod_ = from.third_party_mod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      vr_only_ = from.vr_only_;
    }
    if (cached_has_bits & 0x02000000u) {
      metacritic_score_ = from.metacritic_score_;
    }
    if (cached_has_bits & 0x04000000u) {
      size_on_disk_ = from.size_on_disk_;
    }
    if (cached_has_bits & 0x08000000u) {
      most_available_clientid_ = from.most_available_clientid_;
    }
    if (cached_has_bits & 0x10000000u) {
      selected_clientid_ = from.selected_clientid_;
    }
    if (cached_has_bits & 0x20000000u) {
      rt_store_asset_mtime_ = from.rt_store_asset_mtime_;
    }
    if (cached_has_bits & 0x40000000u) {
      rt_custom_image_mtime_ = from.rt_custom_image_mtime_;
    }
    if (cached_has_bits & 0x80000000u) {
      rt_purchased_time_ = from.rt_purchased_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_parent_app_id_ = from.optional_parent_app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      review_score_with_bombs_ = from.review_score_with_bombs_;
    }
    if (cached_has_bits & 0x00000008u) {
      review_percentage_with_bombs_ = from.review_percentage_with_bombs_;
    }
    if (cached_has_bits & 0x00000010u) {
      review_score_without_bombs_ = from.review_score_without_bombs_;
    }
    if (cached_has_bits & 0x00000020u) {
      review_percentage_without_bombs_ = from.review_percentage_without_bombs_;
    }
    if (cached_has_bits & 0x00000040u) {
      mastersub_appid_ = from.mastersub_appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      shortcut_override_appid_ = from.shortcut_override_appid_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      steam_deck_compat_category_ = from.steam_deck_compat_category_;
    }
    if (cached_has_bits & 0x00000200u) {
      rt_last_time_locally_played_ = from.rt_last_time_locally_played_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAppOverview::CopyFrom(const CAppOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppOverview::IsInitialized() const {
  return true;
}

void CAppOverview::InternalSwap(CAppOverview* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  store_tag_.InternalSwap(&other->store_tag_);
  association_.InternalSwap(&other->association_);
  store_category_.InternalSwap(&other->store_category_);
  per_client_data_.InternalSwap(&other->per_client_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sort_as_, lhs_arena,
      &other->sort_as_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_hash_, lhs_arena,
      &other->icon_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_data_, lhs_arena,
      &other->icon_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_data_format_, lhs_arena,
      &other->icon_data_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gameid_, lhs_arena,
      &other->gameid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &library_capsule_filename_, lhs_arena,
      &other->library_capsule_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &library_id_, lhs_arena,
      &other->library_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mastersub_includedwith_logo_, lhs_arena,
      &other->mastersub_includedwith_logo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_license_site_name_, lhs_arena,
      &other->site_license_site_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_filename_, lhs_arena,
      &other->header_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAppOverview, rt_last_time_locally_played_)
      + sizeof(CAppOverview::rt_last_time_locally_played_)
      - PROTOBUF_FIELD_OFFSET(CAppOverview, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppOverview::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[2]);
}

// ===================================================================

class CAppOverview_Change::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppOverview_Change>()._has_bits_);
  static void set_has_full_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAppOverview_Change::CAppOverview_Change(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_overview_(arena),
  removed_appid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CAppOverview_Change)
}
CAppOverview_Change::CAppOverview_Change(const CAppOverview_Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      app_overview_(from.app_overview_),
      removed_appid_(from.removed_appid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&full_update_, &from.full_update_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_complete_) -
    reinterpret_cast<char*>(&full_update_)) + sizeof(update_complete_));
  // @@protoc_insertion_point(copy_constructor:CAppOverview_Change)
}

inline void CAppOverview_Change::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&full_update_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_complete_) -
    reinterpret_cast<char*>(&full_update_)) + sizeof(update_complete_));
}

CAppOverview_Change::~CAppOverview_Change() {
  // @@protoc_insertion_point(destructor:CAppOverview_Change)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAppOverview_Change::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CAppOverview_Change::ArenaDtor(void* object) {
  CAppOverview_Change* _this = reinterpret_cast< CAppOverview_Change* >(object);
  (void)_this;
}
void CAppOverview_Change::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppOverview_Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppOverview_Change::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppOverview_Change)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_overview_.Clear();
  removed_appid_.Clear();
  ::memset(&full_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_complete_) -
      reinterpret_cast<char*>(&full_update_)) + sizeof(update_complete_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppOverview_Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CAppOverview app_overview = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_overview(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 removed_appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_removed_appid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_removed_appid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool full_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_full_update(&has_bits);
          full_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool update_complete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_update_complete(&has_bits);
          update_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAppOverview_Change::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppOverview_Change)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAppOverview app_overview = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_overview_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_app_overview(i), target, stream);
  }

  // repeated uint32 removed_appid = 2;
  for (int i = 0, n = this->_internal_removed_appid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_removed_appid(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool full_update = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_full_update(), target);
  }

  // optional bool update_complete = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppOverview_Change)
  return target;
}

size_t CAppOverview_Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppOverview_Change)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAppOverview app_overview = 1;
  total_size += 1UL * this->_internal_app_overview_size();
  for (const auto& msg : this->app_overview_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 removed_appid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->removed_appid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_removed_appid_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool full_update = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool update_complete = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAppOverview_Change::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAppOverview_Change::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAppOverview_Change::GetClassData() const { return &_class_data_; }

void CAppOverview_Change::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAppOverview_Change *>(to)->MergeFrom(
      static_cast<const CAppOverview_Change &>(from));
}


void CAppOverview_Change::MergeFrom(const CAppOverview_Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppOverview_Change)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_overview_.MergeFrom(from.app_overview_);
  removed_appid_.MergeFrom(from.removed_appid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      full_update_ = from.full_update_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_complete_ = from.update_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAppOverview_Change::CopyFrom(const CAppOverview_Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppOverview_Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppOverview_Change::IsInitialized() const {
  return true;
}

void CAppOverview_Change::InternalSwap(CAppOverview_Change* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_overview_.InternalSwap(&other->app_overview_);
  removed_appid_.InternalSwap(&other->removed_appid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAppOverview_Change, update_complete_)
      + sizeof(CAppOverview_Change::update_complete_)
      - PROTOBUF_FIELD_OFFSET(CAppOverview_Change, full_update_)>(
          reinterpret_cast<char*>(&full_update_),
          reinterpret_cast<char*>(&other->full_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppOverview_Change::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[3]);
}

// ===================================================================

class CAppBootstrapData::_Internal {
 public:
  using HasBits = decltype(std::declval<CAppBootstrapData>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAppBootstrapData::CAppBootstrapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_tag_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CAppBootstrapData)
}
CAppBootstrapData::CAppBootstrapData(const CAppBootstrapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      user_tag_(from.user_tag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(hidden_));
  // @@protoc_insertion_point(copy_constructor:CAppBootstrapData)
}

inline void CAppBootstrapData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(hidden_));
}

CAppBootstrapData::~CAppBootstrapData() {
  // @@protoc_insertion_point(destructor:CAppBootstrapData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CAppBootstrapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CAppBootstrapData::ArenaDtor(void* object) {
  CAppBootstrapData* _this = reinterpret_cast< CAppBootstrapData* >(object);
  (void)_this;
}
void CAppBootstrapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAppBootstrapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAppBootstrapData::Clear() {
// @@protoc_insertion_point(message_clear_start:CAppBootstrapData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_tag_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAppBootstrapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_tag();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAppBootstrapData.user_tag");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAppBootstrapData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAppBootstrapData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hidden(), target);
  }

  // repeated string user_tag = 3;
  for (int i = 0, n = this->_internal_user_tag_size(); i < n; i++) {
    const auto& s = this->_internal_user_tag(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAppBootstrapData.user_tag");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAppBootstrapData)
  return target;
}

size_t CAppBootstrapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAppBootstrapData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_tag = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_tag_.size());
  for (int i = 0, n = user_tag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_tag_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool hidden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAppBootstrapData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAppBootstrapData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAppBootstrapData::GetClassData() const { return &_class_data_; }

void CAppBootstrapData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAppBootstrapData *>(to)->MergeFrom(
      static_cast<const CAppBootstrapData &>(from));
}


void CAppBootstrapData::MergeFrom(const CAppBootstrapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAppBootstrapData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_tag_.MergeFrom(from.user_tag_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAppBootstrapData::CopyFrom(const CAppBootstrapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAppBootstrapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAppBootstrapData::IsInitialized() const {
  return true;
}

void CAppBootstrapData::InternalSwap(CAppBootstrapData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_tag_.InternalSwap(&other->user_tag_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAppBootstrapData, hidden_)
      + sizeof(CAppBootstrapData::hidden_)
      - PROTOBUF_FIELD_OFFSET(CAppBootstrapData, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAppBootstrapData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[4]);
}

// ===================================================================

class CLibraryBootstrapData::_Internal {
 public:
};

CLibraryBootstrapData::CLibraryBootstrapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CLibraryBootstrapData)
}
CLibraryBootstrapData::CLibraryBootstrapData(const CLibraryBootstrapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_data_(from.app_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CLibraryBootstrapData)
}

inline void CLibraryBootstrapData::SharedCtor() {
}

CLibraryBootstrapData::~CLibraryBootstrapData() {
  // @@protoc_insertion_point(destructor:CLibraryBootstrapData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CLibraryBootstrapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CLibraryBootstrapData::ArenaDtor(void* object) {
  CLibraryBootstrapData* _this = reinterpret_cast< CLibraryBootstrapData* >(object);
  (void)_this;
}
void CLibraryBootstrapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLibraryBootstrapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLibraryBootstrapData::Clear() {
// @@protoc_insertion_point(message_clear_start:CLibraryBootstrapData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLibraryBootstrapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CAppBootstrapData app_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLibraryBootstrapData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLibraryBootstrapData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CAppBootstrapData app_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_app_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLibraryBootstrapData)
  return target;
}

size_t CLibraryBootstrapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLibraryBootstrapData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CAppBootstrapData app_data = 1;
  total_size += 1UL * this->_internal_app_data_size();
  for (const auto& msg : this->app_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLibraryBootstrapData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CLibraryBootstrapData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLibraryBootstrapData::GetClassData() const { return &_class_data_; }

void CLibraryBootstrapData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CLibraryBootstrapData *>(to)->MergeFrom(
      static_cast<const CLibraryBootstrapData &>(from));
}


void CLibraryBootstrapData::MergeFrom(const CLibraryBootstrapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLibraryBootstrapData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_data_.MergeFrom(from.app_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLibraryBootstrapData::CopyFrom(const CLibraryBootstrapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLibraryBootstrapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLibraryBootstrapData::IsInitialized() const {
  return true;
}

void CLibraryBootstrapData::InternalSwap(CLibraryBootstrapData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  app_data_.InternalSwap(&other->app_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLibraryBootstrapData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fappoverview_2eproto_getter, &descriptor_table_steammessages_5fappoverview_2eproto_once,
      file_level_metadata_steammessages_5fappoverview_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CAppOverview_AppAssociation* Arena::CreateMaybeMessage< ::CAppOverview_AppAssociation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppOverview_AppAssociation >(arena);
}
template<> PROTOBUF_NOINLINE ::CAppOverview_PerClientData* Arena::CreateMaybeMessage< ::CAppOverview_PerClientData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppOverview_PerClientData >(arena);
}
template<> PROTOBUF_NOINLINE ::CAppOverview* Arena::CreateMaybeMessage< ::CAppOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::CAppOverview_Change* Arena::CreateMaybeMessage< ::CAppOverview_Change >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppOverview_Change >(arena);
}
template<> PROTOBUF_NOINLINE ::CAppBootstrapData* Arena::CreateMaybeMessage< ::CAppBootstrapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAppBootstrapData >(arena);
}
template<> PROTOBUF_NOINLINE ::CLibraryBootstrapData* Arena::CreateMaybeMessage< ::CLibraryBootstrapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLibraryBootstrapData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
