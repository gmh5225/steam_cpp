// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_accounthardware.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5faccounthardware_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5faccounthardware_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5faccounthardware_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5faccounthardware_2esteamclient_2eproto;
class CAccountHardware_CompleteSteamControllerRegistration_Request;
struct CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal;
extern CAccountHardware_CompleteSteamControllerRegistration_RequestDefaultTypeInternal _CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_;
class CAccountHardware_CompleteSteamControllerRegistration_Response;
struct CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal;
extern CAccountHardware_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal _CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_;
class CAccountHardware_DeRegisterSteamController_Request;
struct CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal;
extern CAccountHardware_DeRegisterSteamController_RequestDefaultTypeInternal _CAccountHardware_DeRegisterSteamController_Request_default_instance_;
class CAccountHardware_DeRegisterSteamController_Response;
struct CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal;
extern CAccountHardware_DeRegisterSteamController_ResponseDefaultTypeInternal _CAccountHardware_DeRegisterSteamController_Response_default_instance_;
class CAccountHardware_GetPersonalizationFile_Request;
struct CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal;
extern CAccountHardware_GetPersonalizationFile_RequestDefaultTypeInternal _CAccountHardware_GetPersonalizationFile_Request_default_instance_;
class CAccountHardware_GetPersonalizationFile_Response;
struct CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal;
extern CAccountHardware_GetPersonalizationFile_ResponseDefaultTypeInternal _CAccountHardware_GetPersonalizationFile_Response_default_instance_;
class CAccountHardware_GetSteamDeckComponents_Request;
struct CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal;
extern CAccountHardware_GetSteamDeckComponents_RequestDefaultTypeInternal _CAccountHardware_GetSteamDeckComponents_Request_default_instance_;
class CAccountHardware_GetSteamDeckComponents_Response;
struct CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal;
extern CAccountHardware_GetSteamDeckComponents_ResponseDefaultTypeInternal _CAccountHardware_GetSteamDeckComponents_Response_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_Accounts;
struct CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal;
extern CAccountHardware_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_Request;
struct CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal;
extern CAccountHardware_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_;
class CAccountHardware_QueryAccountsRegisteredToSerial_Response;
struct CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal;
extern CAccountHardware_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal _CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_;
class CAccountHardware_RegisterSteamController_Request;
struct CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal;
extern CAccountHardware_RegisterSteamController_RequestDefaultTypeInternal _CAccountHardware_RegisterSteamController_Request_default_instance_;
class CAccountHardware_RegisterSteamController_Response;
struct CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal;
extern CAccountHardware_RegisterSteamController_ResponseDefaultTypeInternal _CAccountHardware_RegisterSteamController_Response_default_instance_;
class CAccountHardware_RegisterValveIndexComponent_Request;
struct CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal;
extern CAccountHardware_RegisterValveIndexComponent_RequestDefaultTypeInternal _CAccountHardware_RegisterValveIndexComponent_Request_default_instance_;
class CAccountHardware_RegisterValveIndexComponent_Response;
struct CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal;
extern CAccountHardware_RegisterValveIndexComponent_ResponseDefaultTypeInternal _CAccountHardware_RegisterValveIndexComponent_Response_default_instance_;
class CAccountHardware_SetPersonalizationFile_Request;
struct CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal;
extern CAccountHardware_SetPersonalizationFile_RequestDefaultTypeInternal _CAccountHardware_SetPersonalizationFile_Request_default_instance_;
class CAccountHardware_SetPersonalizationFile_Response;
struct CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal;
extern CAccountHardware_SetPersonalizationFile_ResponseDefaultTypeInternal _CAccountHardware_SetPersonalizationFile_Response_default_instance_;
class CAccountHardware_SteamControllerGetConfig_ControllerConfig;
struct CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal;
extern CAccountHardware_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_;
class CAccountHardware_SteamControllerGetConfig_Request;
struct CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal;
extern CAccountHardware_SteamControllerGetConfig_RequestDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_Request_default_instance_;
class CAccountHardware_SteamControllerGetConfig_Response;
struct CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal;
extern CAccountHardware_SteamControllerGetConfig_ResponseDefaultTypeInternal _CAccountHardware_SteamControllerGetConfig_Response_default_instance_;
class CAccountHardware_SteamControllerSetConfig_ControllerConfig;
struct CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal;
extern CAccountHardware_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_;
class CAccountHardware_SteamControllerSetConfig_Request;
struct CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal;
extern CAccountHardware_SteamControllerSetConfig_RequestDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_Request_default_instance_;
class CAccountHardware_SteamControllerSetConfig_Response;
struct CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal;
extern CAccountHardware_SteamControllerSetConfig_ResponseDefaultTypeInternal _CAccountHardware_SteamControllerSetConfig_Response_default_instance_;
class CAccountHardware_VRCompatibilityCheck_Request;
struct CAccountHardware_VRCompatibilityCheck_RequestDefaultTypeInternal;
extern CAccountHardware_VRCompatibilityCheck_RequestDefaultTypeInternal _CAccountHardware_VRCompatibilityCheck_Request_default_instance_;
class CAccountHardware_VRCompatibilityCheck_Request_Pair;
struct CAccountHardware_VRCompatibilityCheck_Request_PairDefaultTypeInternal;
extern CAccountHardware_VRCompatibilityCheck_Request_PairDefaultTypeInternal _CAccountHardware_VRCompatibilityCheck_Request_Pair_default_instance_;
class CAccountHardware_VRCompatibilityCheck_Response;
struct CAccountHardware_VRCompatibilityCheck_ResponseDefaultTypeInternal;
extern CAccountHardware_VRCompatibilityCheck_ResponseDefaultTypeInternal _CAccountHardware_VRCompatibilityCheck_Response_default_instance_;
class CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay;
struct CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplayDefaultTypeInternal;
extern CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplayDefaultTypeInternal _CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay_default_instance_;
class CAccountHardware_VRCompatibilityCheck_Response_Pair;
struct CAccountHardware_VRCompatibilityCheck_Response_PairDefaultTypeInternal;
extern CAccountHardware_VRCompatibilityCheck_Response_PairDefaultTypeInternal _CAccountHardware_VRCompatibilityCheck_Response_Pair_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CAccountHardware_CompleteSteamControllerRegistration_Request* Arena::CreateMaybeMessage<::CAccountHardware_CompleteSteamControllerRegistration_Request>(Arena*);
template<> ::CAccountHardware_CompleteSteamControllerRegistration_Response* Arena::CreateMaybeMessage<::CAccountHardware_CompleteSteamControllerRegistration_Response>(Arena*);
template<> ::CAccountHardware_DeRegisterSteamController_Request* Arena::CreateMaybeMessage<::CAccountHardware_DeRegisterSteamController_Request>(Arena*);
template<> ::CAccountHardware_DeRegisterSteamController_Response* Arena::CreateMaybeMessage<::CAccountHardware_DeRegisterSteamController_Response>(Arena*);
template<> ::CAccountHardware_GetPersonalizationFile_Request* Arena::CreateMaybeMessage<::CAccountHardware_GetPersonalizationFile_Request>(Arena*);
template<> ::CAccountHardware_GetPersonalizationFile_Response* Arena::CreateMaybeMessage<::CAccountHardware_GetPersonalizationFile_Response>(Arena*);
template<> ::CAccountHardware_GetSteamDeckComponents_Request* Arena::CreateMaybeMessage<::CAccountHardware_GetSteamDeckComponents_Request>(Arena*);
template<> ::CAccountHardware_GetSteamDeckComponents_Response* Arena::CreateMaybeMessage<::CAccountHardware_GetSteamDeckComponents_Response>(Arena*);
template<> ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* Arena::CreateMaybeMessage<::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(Arena*);
template<> ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* Arena::CreateMaybeMessage<::CAccountHardware_QueryAccountsRegisteredToSerial_Request>(Arena*);
template<> ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* Arena::CreateMaybeMessage<::CAccountHardware_QueryAccountsRegisteredToSerial_Response>(Arena*);
template<> ::CAccountHardware_RegisterSteamController_Request* Arena::CreateMaybeMessage<::CAccountHardware_RegisterSteamController_Request>(Arena*);
template<> ::CAccountHardware_RegisterSteamController_Response* Arena::CreateMaybeMessage<::CAccountHardware_RegisterSteamController_Response>(Arena*);
template<> ::CAccountHardware_RegisterValveIndexComponent_Request* Arena::CreateMaybeMessage<::CAccountHardware_RegisterValveIndexComponent_Request>(Arena*);
template<> ::CAccountHardware_RegisterValveIndexComponent_Response* Arena::CreateMaybeMessage<::CAccountHardware_RegisterValveIndexComponent_Response>(Arena*);
template<> ::CAccountHardware_SetPersonalizationFile_Request* Arena::CreateMaybeMessage<::CAccountHardware_SetPersonalizationFile_Request>(Arena*);
template<> ::CAccountHardware_SetPersonalizationFile_Response* Arena::CreateMaybeMessage<::CAccountHardware_SetPersonalizationFile_Response>(Arena*);
template<> ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerGetConfig_ControllerConfig>(Arena*);
template<> ::CAccountHardware_SteamControllerGetConfig_Request* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerGetConfig_Request>(Arena*);
template<> ::CAccountHardware_SteamControllerGetConfig_Response* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerGetConfig_Response>(Arena*);
template<> ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerSetConfig_ControllerConfig>(Arena*);
template<> ::CAccountHardware_SteamControllerSetConfig_Request* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerSetConfig_Request>(Arena*);
template<> ::CAccountHardware_SteamControllerSetConfig_Response* Arena::CreateMaybeMessage<::CAccountHardware_SteamControllerSetConfig_Response>(Arena*);
template<> ::CAccountHardware_VRCompatibilityCheck_Request* Arena::CreateMaybeMessage<::CAccountHardware_VRCompatibilityCheck_Request>(Arena*);
template<> ::CAccountHardware_VRCompatibilityCheck_Request_Pair* Arena::CreateMaybeMessage<::CAccountHardware_VRCompatibilityCheck_Request_Pair>(Arena*);
template<> ::CAccountHardware_VRCompatibilityCheck_Response* Arena::CreateMaybeMessage<::CAccountHardware_VRCompatibilityCheck_Response>(Arena*);
template<> ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* Arena::CreateMaybeMessage<::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay>(Arena*);
template<> ::CAccountHardware_VRCompatibilityCheck_Response_Pair* Arena::CreateMaybeMessage<::CAccountHardware_VRCompatibilityCheck_Response_Pair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EValveIndexComponent : int {
  k_EValveIndexComponentUnknown = 0,
  k_EValveIndexComponentHMD = 1,
  k_EValveIndexComponentLeftKnuckle = 2,
  k_EValveIndexComponentRightKnuckle = 3
};
bool EValveIndexComponent_IsValid(int value);
constexpr EValveIndexComponent EValveIndexComponent_MIN = k_EValveIndexComponentUnknown;
constexpr EValveIndexComponent EValveIndexComponent_MAX = k_EValveIndexComponentRightKnuckle;
constexpr int EValveIndexComponent_ARRAYSIZE = EValveIndexComponent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EValveIndexComponent_descriptor();
template<typename T>
inline const std::string& EValveIndexComponent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EValveIndexComponent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EValveIndexComponent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EValveIndexComponent_descriptor(), enum_t_value);
}
inline bool EValveIndexComponent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EValveIndexComponent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EValveIndexComponent>(
    EValveIndexComponent_descriptor(), name, value);
}
// ===================================================================

class CAccountHardware_RegisterSteamController_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_RegisterSteamController_Request) */ {
 public:
  inline CAccountHardware_RegisterSteamController_Request() : CAccountHardware_RegisterSteamController_Request(nullptr) {}
  ~CAccountHardware_RegisterSteamController_Request() override;
  explicit constexpr CAccountHardware_RegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_RegisterSteamController_Request(const CAccountHardware_RegisterSteamController_Request& from);
  CAccountHardware_RegisterSteamController_Request(CAccountHardware_RegisterSteamController_Request&& from) noexcept
    : CAccountHardware_RegisterSteamController_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_RegisterSteamController_Request& operator=(const CAccountHardware_RegisterSteamController_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_RegisterSteamController_Request& operator=(CAccountHardware_RegisterSteamController_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_RegisterSteamController_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_RegisterSteamController_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_RegisterSteamController_Request*>(
               &_CAccountHardware_RegisterSteamController_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CAccountHardware_RegisterSteamController_Request& a, CAccountHardware_RegisterSteamController_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_RegisterSteamController_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_RegisterSteamController_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_RegisterSteamController_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_RegisterSteamController_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_RegisterSteamController_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_RegisterSteamController_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_RegisterSteamController_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_RegisterSteamController_Request";
  }
  protected:
  explicit CAccountHardware_RegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_RegisterSteamController_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_RegisterSteamController_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_RegisterSteamController_Response) */ {
 public:
  inline CAccountHardware_RegisterSteamController_Response() : CAccountHardware_RegisterSteamController_Response(nullptr) {}
  explicit constexpr CAccountHardware_RegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_RegisterSteamController_Response(const CAccountHardware_RegisterSteamController_Response& from);
  CAccountHardware_RegisterSteamController_Response(CAccountHardware_RegisterSteamController_Response&& from) noexcept
    : CAccountHardware_RegisterSteamController_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_RegisterSteamController_Response& operator=(const CAccountHardware_RegisterSteamController_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_RegisterSteamController_Response& operator=(CAccountHardware_RegisterSteamController_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_RegisterSteamController_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_RegisterSteamController_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_RegisterSteamController_Response*>(
               &_CAccountHardware_RegisterSteamController_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CAccountHardware_RegisterSteamController_Response& a, CAccountHardware_RegisterSteamController_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_RegisterSteamController_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_RegisterSteamController_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_RegisterSteamController_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_RegisterSteamController_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_RegisterSteamController_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_RegisterSteamController_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_RegisterSteamController_Response";
  }
  protected:
  explicit CAccountHardware_RegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_RegisterSteamController_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_CompleteSteamControllerRegistration_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_CompleteSteamControllerRegistration_Request) */ {
 public:
  inline CAccountHardware_CompleteSteamControllerRegistration_Request() : CAccountHardware_CompleteSteamControllerRegistration_Request(nullptr) {}
  ~CAccountHardware_CompleteSteamControllerRegistration_Request() override;
  explicit constexpr CAccountHardware_CompleteSteamControllerRegistration_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_CompleteSteamControllerRegistration_Request(const CAccountHardware_CompleteSteamControllerRegistration_Request& from);
  CAccountHardware_CompleteSteamControllerRegistration_Request(CAccountHardware_CompleteSteamControllerRegistration_Request&& from) noexcept
    : CAccountHardware_CompleteSteamControllerRegistration_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_CompleteSteamControllerRegistration_Request& operator=(const CAccountHardware_CompleteSteamControllerRegistration_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_CompleteSteamControllerRegistration_Request& operator=(CAccountHardware_CompleteSteamControllerRegistration_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_CompleteSteamControllerRegistration_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_CompleteSteamControllerRegistration_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_CompleteSteamControllerRegistration_Request*>(
               &_CAccountHardware_CompleteSteamControllerRegistration_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CAccountHardware_CompleteSteamControllerRegistration_Request& a, CAccountHardware_CompleteSteamControllerRegistration_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_CompleteSteamControllerRegistration_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_CompleteSteamControllerRegistration_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_CompleteSteamControllerRegistration_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_CompleteSteamControllerRegistration_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_CompleteSteamControllerRegistration_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_CompleteSteamControllerRegistration_Request";
  }
  protected:
  explicit CAccountHardware_CompleteSteamControllerRegistration_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_CompleteSteamControllerRegistration_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_CompleteSteamControllerRegistration_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_CompleteSteamControllerRegistration_Response) */ {
 public:
  inline CAccountHardware_CompleteSteamControllerRegistration_Response() : CAccountHardware_CompleteSteamControllerRegistration_Response(nullptr) {}
  explicit constexpr CAccountHardware_CompleteSteamControllerRegistration_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_CompleteSteamControllerRegistration_Response(const CAccountHardware_CompleteSteamControllerRegistration_Response& from);
  CAccountHardware_CompleteSteamControllerRegistration_Response(CAccountHardware_CompleteSteamControllerRegistration_Response&& from) noexcept
    : CAccountHardware_CompleteSteamControllerRegistration_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_CompleteSteamControllerRegistration_Response& operator=(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_CompleteSteamControllerRegistration_Response& operator=(CAccountHardware_CompleteSteamControllerRegistration_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_CompleteSteamControllerRegistration_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_CompleteSteamControllerRegistration_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_CompleteSteamControllerRegistration_Response*>(
               &_CAccountHardware_CompleteSteamControllerRegistration_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CAccountHardware_CompleteSteamControllerRegistration_Response& a, CAccountHardware_CompleteSteamControllerRegistration_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_CompleteSteamControllerRegistration_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_CompleteSteamControllerRegistration_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_CompleteSteamControllerRegistration_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_CompleteSteamControllerRegistration_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_CompleteSteamControllerRegistration_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_CompleteSteamControllerRegistration_Response";
  }
  protected:
  explicit CAccountHardware_CompleteSteamControllerRegistration_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_CompleteSteamControllerRegistration_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_QueryAccountsRegisteredToSerial_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_QueryAccountsRegisteredToSerial_Request) */ {
 public:
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Request() : CAccountHardware_QueryAccountsRegisteredToSerial_Request(nullptr) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_Request() override;
  explicit constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_QueryAccountsRegisteredToSerial_Request(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from);
  CAccountHardware_QueryAccountsRegisteredToSerial_Request(CAccountHardware_QueryAccountsRegisteredToSerial_Request&& from) noexcept
    : CAccountHardware_QueryAccountsRegisteredToSerial_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_QueryAccountsRegisteredToSerial_Request& operator=(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Request& operator=(CAccountHardware_QueryAccountsRegisteredToSerial_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_QueryAccountsRegisteredToSerial_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_QueryAccountsRegisteredToSerial_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_QueryAccountsRegisteredToSerial_Request*>(
               &_CAccountHardware_QueryAccountsRegisteredToSerial_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CAccountHardware_QueryAccountsRegisteredToSerial_Request& a, CAccountHardware_QueryAccountsRegisteredToSerial_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_QueryAccountsRegisteredToSerial_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_QueryAccountsRegisteredToSerial_Request";
  }
  protected:
  explicit CAccountHardware_QueryAccountsRegisteredToSerial_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_QueryAccountsRegisteredToSerial_Accounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) */ {
 public:
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Accounts() : CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(nullptr) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_Accounts() override;
  explicit constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from);
  CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts&& from) noexcept
    : CAccountHardware_QueryAccountsRegisteredToSerial_Accounts() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& operator=(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& operator=(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts*>(
               &_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& a, CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts";
  }
  protected:
  explicit CAccountHardware_QueryAccountsRegisteredToSerial_Accounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kRegistrationCompleteFieldNumber = 2,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional bool registration_complete = 2;
  bool has_registration_complete() const;
  private:
  bool _internal_has_registration_complete() const;
  public:
  void clear_registration_complete();
  bool registration_complete() const;
  void set_registration_complete(bool value);
  private:
  bool _internal_registration_complete() const;
  void _internal_set_registration_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t accountid_;
  bool registration_complete_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_QueryAccountsRegisteredToSerial_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_QueryAccountsRegisteredToSerial_Response) */ {
 public:
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Response() : CAccountHardware_QueryAccountsRegisteredToSerial_Response(nullptr) {}
  ~CAccountHardware_QueryAccountsRegisteredToSerial_Response() override;
  explicit constexpr CAccountHardware_QueryAccountsRegisteredToSerial_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_QueryAccountsRegisteredToSerial_Response(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from);
  CAccountHardware_QueryAccountsRegisteredToSerial_Response(CAccountHardware_QueryAccountsRegisteredToSerial_Response&& from) noexcept
    : CAccountHardware_QueryAccountsRegisteredToSerial_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_QueryAccountsRegisteredToSerial_Response& operator=(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_QueryAccountsRegisteredToSerial_Response& operator=(CAccountHardware_QueryAccountsRegisteredToSerial_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_QueryAccountsRegisteredToSerial_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_QueryAccountsRegisteredToSerial_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_QueryAccountsRegisteredToSerial_Response*>(
               &_CAccountHardware_QueryAccountsRegisteredToSerial_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CAccountHardware_QueryAccountsRegisteredToSerial_Response& a, CAccountHardware_QueryAccountsRegisteredToSerial_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_QueryAccountsRegisteredToSerial_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_QueryAccountsRegisteredToSerial_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_QueryAccountsRegisteredToSerial_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_QueryAccountsRegisteredToSerial_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_QueryAccountsRegisteredToSerial_Response";
  }
  protected:
  explicit CAccountHardware_QueryAccountsRegisteredToSerial_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >*
      mutable_accounts();
  private:
  const ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& _internal_accounts(int index) const;
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* _internal_add_accounts();
  public:
  const ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& accounts(int index) const;
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerSetConfig_ControllerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerSetConfig_ControllerConfig) */ {
 public:
  inline CAccountHardware_SteamControllerSetConfig_ControllerConfig() : CAccountHardware_SteamControllerSetConfig_ControllerConfig(nullptr) {}
  ~CAccountHardware_SteamControllerSetConfig_ControllerConfig() override;
  explicit constexpr CAccountHardware_SteamControllerSetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerSetConfig_ControllerConfig(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from);
  CAccountHardware_SteamControllerSetConfig_ControllerConfig(CAccountHardware_SteamControllerSetConfig_ControllerConfig&& from) noexcept
    : CAccountHardware_SteamControllerSetConfig_ControllerConfig() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerSetConfig_ControllerConfig& operator=(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerSetConfig_ControllerConfig& operator=(CAccountHardware_SteamControllerSetConfig_ControllerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerSetConfig_ControllerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerSetConfig_ControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerSetConfig_ControllerConfig*>(
               &_CAccountHardware_SteamControllerSetConfig_ControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CAccountHardware_SteamControllerSetConfig_ControllerConfig& a, CAccountHardware_SteamControllerSetConfig_ControllerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerSetConfig_ControllerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerSetConfig_ControllerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerSetConfig_ControllerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SteamControllerSetConfig_ControllerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerSetConfig_ControllerConfig";
  }
  protected:
  explicit CAccountHardware_SteamControllerSetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidornameFieldNumber = 1,
    kTemplatenameFieldNumber = 3,
    kPublishedfileidFieldNumber = 2,
  };
  // optional string appidorname = 1;
  bool has_appidorname() const;
  private:
  bool _internal_has_appidorname() const;
  public:
  void clear_appidorname();
  const std::string& appidorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appidorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appidorname();
  PROTOBUF_NODISCARD std::string* release_appidorname();
  void set_allocated_appidorname(std::string* appidorname);
  private:
  const std::string& _internal_appidorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appidorname(const std::string& value);
  std::string* _internal_mutable_appidorname();
  public:

  // optional string templatename = 3;
  bool has_templatename() const;
  private:
  bool _internal_has_templatename() const;
  public:
  void clear_templatename();
  const std::string& templatename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_templatename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_templatename();
  PROTOBUF_NODISCARD std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appidorname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerSetConfig_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerSetConfig_Request) */ {
 public:
  inline CAccountHardware_SteamControllerSetConfig_Request() : CAccountHardware_SteamControllerSetConfig_Request(nullptr) {}
  ~CAccountHardware_SteamControllerSetConfig_Request() override;
  explicit constexpr CAccountHardware_SteamControllerSetConfig_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerSetConfig_Request(const CAccountHardware_SteamControllerSetConfig_Request& from);
  CAccountHardware_SteamControllerSetConfig_Request(CAccountHardware_SteamControllerSetConfig_Request&& from) noexcept
    : CAccountHardware_SteamControllerSetConfig_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerSetConfig_Request& operator=(const CAccountHardware_SteamControllerSetConfig_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerSetConfig_Request& operator=(CAccountHardware_SteamControllerSetConfig_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerSetConfig_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerSetConfig_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerSetConfig_Request*>(
               &_CAccountHardware_SteamControllerSetConfig_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CAccountHardware_SteamControllerSetConfig_Request& a, CAccountHardware_SteamControllerSetConfig_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerSetConfig_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerSetConfig_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerSetConfig_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerSetConfig_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SteamControllerSetConfig_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerSetConfig_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SteamControllerSetConfig_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerSetConfig_Request";
  }
  protected:
  explicit CAccountHardware_SteamControllerSetConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationsFieldNumber = 4,
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
    kAccountidFieldNumber = 3,
    kOnlyForThisSerialFieldNumber = 6,
    kControllerTypeFieldNumber = 5,
  };
  // repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
  int configurations_size() const;
  private:
  int _internal_configurations_size() const;
  public:
  void clear_configurations();
  ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* mutable_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >*
      mutable_configurations();
  private:
  const ::CAccountHardware_SteamControllerSetConfig_ControllerConfig& _internal_configurations(int index) const;
  ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* _internal_add_configurations();
  public:
  const ::CAccountHardware_SteamControllerSetConfig_ControllerConfig& configurations(int index) const;
  ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* add_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >&
      configurations() const;

  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional bool only_for_this_serial = 6 [default = false];
  bool has_only_for_this_serial() const;
  private:
  bool _internal_has_only_for_this_serial() const;
  public:
  void clear_only_for_this_serial();
  bool only_for_this_serial() const;
  void set_only_for_this_serial(bool value);
  private:
  bool _internal_only_for_this_serial() const;
  void _internal_set_only_for_this_serial(bool value);
  public:

  // optional int32 controller_type = 5 [default = 2];
  bool has_controller_type() const;
  private:
  bool _internal_has_controller_type() const;
  public:
  void clear_controller_type();
  int32_t controller_type() const;
  void set_controller_type(int32_t value);
  private:
  int32_t _internal_controller_type() const;
  void _internal_set_controller_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerSetConfig_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig > configurations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  uint32_t accountid_;
  bool only_for_this_serial_;
  int32_t controller_type_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerSetConfig_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerSetConfig_Response) */ {
 public:
  inline CAccountHardware_SteamControllerSetConfig_Response() : CAccountHardware_SteamControllerSetConfig_Response(nullptr) {}
  explicit constexpr CAccountHardware_SteamControllerSetConfig_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerSetConfig_Response(const CAccountHardware_SteamControllerSetConfig_Response& from);
  CAccountHardware_SteamControllerSetConfig_Response(CAccountHardware_SteamControllerSetConfig_Response&& from) noexcept
    : CAccountHardware_SteamControllerSetConfig_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerSetConfig_Response& operator=(const CAccountHardware_SteamControllerSetConfig_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerSetConfig_Response& operator=(CAccountHardware_SteamControllerSetConfig_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerSetConfig_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerSetConfig_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerSetConfig_Response*>(
               &_CAccountHardware_SteamControllerSetConfig_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CAccountHardware_SteamControllerSetConfig_Response& a, CAccountHardware_SteamControllerSetConfig_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerSetConfig_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerSetConfig_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerSetConfig_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerSetConfig_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerSetConfig_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerSetConfig_Response";
  }
  protected:
  explicit CAccountHardware_SteamControllerSetConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerSetConfig_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerGetConfig_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerGetConfig_Request) */ {
 public:
  inline CAccountHardware_SteamControllerGetConfig_Request() : CAccountHardware_SteamControllerGetConfig_Request(nullptr) {}
  ~CAccountHardware_SteamControllerGetConfig_Request() override;
  explicit constexpr CAccountHardware_SteamControllerGetConfig_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerGetConfig_Request(const CAccountHardware_SteamControllerGetConfig_Request& from);
  CAccountHardware_SteamControllerGetConfig_Request(CAccountHardware_SteamControllerGetConfig_Request&& from) noexcept
    : CAccountHardware_SteamControllerGetConfig_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerGetConfig_Request& operator=(const CAccountHardware_SteamControllerGetConfig_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerGetConfig_Request& operator=(CAccountHardware_SteamControllerGetConfig_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerGetConfig_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerGetConfig_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerGetConfig_Request*>(
               &_CAccountHardware_SteamControllerGetConfig_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CAccountHardware_SteamControllerGetConfig_Request& a, CAccountHardware_SteamControllerGetConfig_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerGetConfig_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerGetConfig_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerGetConfig_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerGetConfig_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SteamControllerGetConfig_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerGetConfig_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SteamControllerGetConfig_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerGetConfig_Request";
  }
  protected:
  explicit CAccountHardware_SteamControllerGetConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
    kAppidornameFieldNumber = 4,
    kAccountidFieldNumber = 3,
    kOnlyForThisSerialFieldNumber = 6,
    kControllerTypeFieldNumber = 5,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // optional string appidorname = 4;
  bool has_appidorname() const;
  private:
  bool _internal_has_appidorname() const;
  public:
  void clear_appidorname();
  const std::string& appidorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appidorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appidorname();
  PROTOBUF_NODISCARD std::string* release_appidorname();
  void set_allocated_appidorname(std::string* appidorname);
  private:
  const std::string& _internal_appidorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appidorname(const std::string& value);
  std::string* _internal_mutable_appidorname();
  public:

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional bool only_for_this_serial = 6 [default = false];
  bool has_only_for_this_serial() const;
  private:
  bool _internal_has_only_for_this_serial() const;
  public:
  void clear_only_for_this_serial();
  bool only_for_this_serial() const;
  void set_only_for_this_serial(bool value);
  private:
  bool _internal_only_for_this_serial() const;
  void _internal_set_only_for_this_serial(bool value);
  public:

  // optional int32 controller_type = 5 [default = 2];
  bool has_controller_type() const;
  private:
  bool _internal_has_controller_type() const;
  public:
  void clear_controller_type();
  int32_t controller_type() const;
  void set_controller_type(int32_t value);
  private:
  int32_t _internal_controller_type() const;
  void _internal_set_controller_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerGetConfig_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appidorname_;
  uint32_t accountid_;
  bool only_for_this_serial_;
  int32_t controller_type_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerGetConfig_ControllerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerGetConfig_ControllerConfig) */ {
 public:
  inline CAccountHardware_SteamControllerGetConfig_ControllerConfig() : CAccountHardware_SteamControllerGetConfig_ControllerConfig(nullptr) {}
  ~CAccountHardware_SteamControllerGetConfig_ControllerConfig() override;
  explicit constexpr CAccountHardware_SteamControllerGetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerGetConfig_ControllerConfig(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from);
  CAccountHardware_SteamControllerGetConfig_ControllerConfig(CAccountHardware_SteamControllerGetConfig_ControllerConfig&& from) noexcept
    : CAccountHardware_SteamControllerGetConfig_ControllerConfig() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerGetConfig_ControllerConfig& operator=(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerGetConfig_ControllerConfig& operator=(CAccountHardware_SteamControllerGetConfig_ControllerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerGetConfig_ControllerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerGetConfig_ControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerGetConfig_ControllerConfig*>(
               &_CAccountHardware_SteamControllerGetConfig_ControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CAccountHardware_SteamControllerGetConfig_ControllerConfig& a, CAccountHardware_SteamControllerGetConfig_ControllerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerGetConfig_ControllerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerGetConfig_ControllerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerGetConfig_ControllerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SteamControllerGetConfig_ControllerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerGetConfig_ControllerConfig";
  }
  protected:
  explicit CAccountHardware_SteamControllerGetConfig_ControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidornameFieldNumber = 1,
    kTemplatenameFieldNumber = 3,
    kSerialNumberFieldNumber = 4,
    kPublishedfileidFieldNumber = 2,
    kAutosaveFieldNumber = 5,
  };
  // optional string appidorname = 1;
  bool has_appidorname() const;
  private:
  bool _internal_has_appidorname() const;
  public:
  void clear_appidorname();
  const std::string& appidorname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appidorname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appidorname();
  PROTOBUF_NODISCARD std::string* release_appidorname();
  void set_allocated_appidorname(std::string* appidorname);
  private:
  const std::string& _internal_appidorname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appidorname(const std::string& value);
  std::string* _internal_mutable_appidorname();
  public:

  // optional string templatename = 3;
  bool has_templatename() const;
  private:
  bool _internal_has_templatename() const;
  public:
  void clear_templatename();
  const std::string& templatename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_templatename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_templatename();
  PROTOBUF_NODISCARD std::string* release_templatename();
  void set_allocated_templatename(std::string* templatename);
  private:
  const std::string& _internal_templatename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_templatename(const std::string& value);
  std::string* _internal_mutable_templatename();
  public:

  // optional string serial_number = 4;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional bool autosave = 5 [default = false];
  bool has_autosave() const;
  private:
  bool _internal_has_autosave() const;
  public:
  void clear_autosave();
  bool autosave() const;
  void set_autosave(bool value);
  private:
  bool _internal_autosave() const;
  void _internal_set_autosave(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appidorname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr templatename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  uint64_t publishedfileid_;
  bool autosave_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SteamControllerGetConfig_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SteamControllerGetConfig_Response) */ {
 public:
  inline CAccountHardware_SteamControllerGetConfig_Response() : CAccountHardware_SteamControllerGetConfig_Response(nullptr) {}
  ~CAccountHardware_SteamControllerGetConfig_Response() override;
  explicit constexpr CAccountHardware_SteamControllerGetConfig_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SteamControllerGetConfig_Response(const CAccountHardware_SteamControllerGetConfig_Response& from);
  CAccountHardware_SteamControllerGetConfig_Response(CAccountHardware_SteamControllerGetConfig_Response&& from) noexcept
    : CAccountHardware_SteamControllerGetConfig_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SteamControllerGetConfig_Response& operator=(const CAccountHardware_SteamControllerGetConfig_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SteamControllerGetConfig_Response& operator=(CAccountHardware_SteamControllerGetConfig_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SteamControllerGetConfig_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SteamControllerGetConfig_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SteamControllerGetConfig_Response*>(
               &_CAccountHardware_SteamControllerGetConfig_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CAccountHardware_SteamControllerGetConfig_Response& a, CAccountHardware_SteamControllerGetConfig_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SteamControllerGetConfig_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SteamControllerGetConfig_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SteamControllerGetConfig_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SteamControllerGetConfig_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SteamControllerGetConfig_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SteamControllerGetConfig_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SteamControllerGetConfig_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SteamControllerGetConfig_Response";
  }
  protected:
  explicit CAccountHardware_SteamControllerGetConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationsFieldNumber = 1,
  };
  // repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
  int configurations_size() const;
  private:
  int _internal_configurations_size() const;
  public:
  void clear_configurations();
  ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* mutable_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >*
      mutable_configurations();
  private:
  const ::CAccountHardware_SteamControllerGetConfig_ControllerConfig& _internal_configurations(int index) const;
  ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* _internal_add_configurations();
  public:
  const ::CAccountHardware_SteamControllerGetConfig_ControllerConfig& configurations(int index) const;
  ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* add_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >&
      configurations() const;

  // @@protoc_insertion_point(class_scope:CAccountHardware_SteamControllerGetConfig_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig > configurations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_DeRegisterSteamController_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_DeRegisterSteamController_Request) */ {
 public:
  inline CAccountHardware_DeRegisterSteamController_Request() : CAccountHardware_DeRegisterSteamController_Request(nullptr) {}
  ~CAccountHardware_DeRegisterSteamController_Request() override;
  explicit constexpr CAccountHardware_DeRegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_DeRegisterSteamController_Request(const CAccountHardware_DeRegisterSteamController_Request& from);
  CAccountHardware_DeRegisterSteamController_Request(CAccountHardware_DeRegisterSteamController_Request&& from) noexcept
    : CAccountHardware_DeRegisterSteamController_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_DeRegisterSteamController_Request& operator=(const CAccountHardware_DeRegisterSteamController_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_DeRegisterSteamController_Request& operator=(CAccountHardware_DeRegisterSteamController_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_DeRegisterSteamController_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_DeRegisterSteamController_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_DeRegisterSteamController_Request*>(
               &_CAccountHardware_DeRegisterSteamController_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CAccountHardware_DeRegisterSteamController_Request& a, CAccountHardware_DeRegisterSteamController_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_DeRegisterSteamController_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_DeRegisterSteamController_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_DeRegisterSteamController_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_DeRegisterSteamController_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_DeRegisterSteamController_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_DeRegisterSteamController_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_DeRegisterSteamController_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_DeRegisterSteamController_Request";
  }
  protected:
  explicit CAccountHardware_DeRegisterSteamController_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
    kAccountidFieldNumber = 3,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_DeRegisterSteamController_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_DeRegisterSteamController_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_DeRegisterSteamController_Response) */ {
 public:
  inline CAccountHardware_DeRegisterSteamController_Response() : CAccountHardware_DeRegisterSteamController_Response(nullptr) {}
  explicit constexpr CAccountHardware_DeRegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_DeRegisterSteamController_Response(const CAccountHardware_DeRegisterSteamController_Response& from);
  CAccountHardware_DeRegisterSteamController_Response(CAccountHardware_DeRegisterSteamController_Response&& from) noexcept
    : CAccountHardware_DeRegisterSteamController_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_DeRegisterSteamController_Response& operator=(const CAccountHardware_DeRegisterSteamController_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_DeRegisterSteamController_Response& operator=(CAccountHardware_DeRegisterSteamController_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_DeRegisterSteamController_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_DeRegisterSteamController_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_DeRegisterSteamController_Response*>(
               &_CAccountHardware_DeRegisterSteamController_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CAccountHardware_DeRegisterSteamController_Response& a, CAccountHardware_DeRegisterSteamController_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_DeRegisterSteamController_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_DeRegisterSteamController_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_DeRegisterSteamController_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_DeRegisterSteamController_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_DeRegisterSteamController_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_DeRegisterSteamController_Response";
  }
  protected:
  explicit CAccountHardware_DeRegisterSteamController_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_DeRegisterSteamController_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SetPersonalizationFile_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_SetPersonalizationFile_Request) */ {
 public:
  inline CAccountHardware_SetPersonalizationFile_Request() : CAccountHardware_SetPersonalizationFile_Request(nullptr) {}
  ~CAccountHardware_SetPersonalizationFile_Request() override;
  explicit constexpr CAccountHardware_SetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SetPersonalizationFile_Request(const CAccountHardware_SetPersonalizationFile_Request& from);
  CAccountHardware_SetPersonalizationFile_Request(CAccountHardware_SetPersonalizationFile_Request&& from) noexcept
    : CAccountHardware_SetPersonalizationFile_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SetPersonalizationFile_Request& operator=(const CAccountHardware_SetPersonalizationFile_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SetPersonalizationFile_Request& operator=(CAccountHardware_SetPersonalizationFile_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SetPersonalizationFile_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SetPersonalizationFile_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SetPersonalizationFile_Request*>(
               &_CAccountHardware_SetPersonalizationFile_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CAccountHardware_SetPersonalizationFile_Request& a, CAccountHardware_SetPersonalizationFile_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SetPersonalizationFile_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SetPersonalizationFile_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SetPersonalizationFile_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SetPersonalizationFile_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_SetPersonalizationFile_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_SetPersonalizationFile_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_SetPersonalizationFile_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SetPersonalizationFile_Request";
  }
  protected:
  explicit CAccountHardware_SetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kPublishedfileidFieldNumber = 2,
    kAccountidFieldNumber = 3,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_SetPersonalizationFile_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  uint64_t publishedfileid_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_SetPersonalizationFile_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_SetPersonalizationFile_Response) */ {
 public:
  inline CAccountHardware_SetPersonalizationFile_Response() : CAccountHardware_SetPersonalizationFile_Response(nullptr) {}
  explicit constexpr CAccountHardware_SetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_SetPersonalizationFile_Response(const CAccountHardware_SetPersonalizationFile_Response& from);
  CAccountHardware_SetPersonalizationFile_Response(CAccountHardware_SetPersonalizationFile_Response&& from) noexcept
    : CAccountHardware_SetPersonalizationFile_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_SetPersonalizationFile_Response& operator=(const CAccountHardware_SetPersonalizationFile_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_SetPersonalizationFile_Response& operator=(CAccountHardware_SetPersonalizationFile_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_SetPersonalizationFile_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_SetPersonalizationFile_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_SetPersonalizationFile_Response*>(
               &_CAccountHardware_SetPersonalizationFile_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CAccountHardware_SetPersonalizationFile_Response& a, CAccountHardware_SetPersonalizationFile_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_SetPersonalizationFile_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_SetPersonalizationFile_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_SetPersonalizationFile_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_SetPersonalizationFile_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_SetPersonalizationFile_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_SetPersonalizationFile_Response";
  }
  protected:
  explicit CAccountHardware_SetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_SetPersonalizationFile_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_GetPersonalizationFile_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_GetPersonalizationFile_Request) */ {
 public:
  inline CAccountHardware_GetPersonalizationFile_Request() : CAccountHardware_GetPersonalizationFile_Request(nullptr) {}
  ~CAccountHardware_GetPersonalizationFile_Request() override;
  explicit constexpr CAccountHardware_GetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_GetPersonalizationFile_Request(const CAccountHardware_GetPersonalizationFile_Request& from);
  CAccountHardware_GetPersonalizationFile_Request(CAccountHardware_GetPersonalizationFile_Request&& from) noexcept
    : CAccountHardware_GetPersonalizationFile_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_GetPersonalizationFile_Request& operator=(const CAccountHardware_GetPersonalizationFile_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_GetPersonalizationFile_Request& operator=(CAccountHardware_GetPersonalizationFile_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_GetPersonalizationFile_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_GetPersonalizationFile_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_GetPersonalizationFile_Request*>(
               &_CAccountHardware_GetPersonalizationFile_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CAccountHardware_GetPersonalizationFile_Request& a, CAccountHardware_GetPersonalizationFile_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_GetPersonalizationFile_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_GetPersonalizationFile_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_GetPersonalizationFile_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_GetPersonalizationFile_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_GetPersonalizationFile_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_GetPersonalizationFile_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_GetPersonalizationFile_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_GetPersonalizationFile_Request";
  }
  protected:
  explicit CAccountHardware_GetPersonalizationFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kAccountidFieldNumber = 2,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional uint32 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_GetPersonalizationFile_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  uint32_t accountid_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_GetPersonalizationFile_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_GetPersonalizationFile_Response) */ {
 public:
  inline CAccountHardware_GetPersonalizationFile_Response() : CAccountHardware_GetPersonalizationFile_Response(nullptr) {}
  ~CAccountHardware_GetPersonalizationFile_Response() override;
  explicit constexpr CAccountHardware_GetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_GetPersonalizationFile_Response(const CAccountHardware_GetPersonalizationFile_Response& from);
  CAccountHardware_GetPersonalizationFile_Response(CAccountHardware_GetPersonalizationFile_Response&& from) noexcept
    : CAccountHardware_GetPersonalizationFile_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_GetPersonalizationFile_Response& operator=(const CAccountHardware_GetPersonalizationFile_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_GetPersonalizationFile_Response& operator=(CAccountHardware_GetPersonalizationFile_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_GetPersonalizationFile_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_GetPersonalizationFile_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_GetPersonalizationFile_Response*>(
               &_CAccountHardware_GetPersonalizationFile_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CAccountHardware_GetPersonalizationFile_Response& a, CAccountHardware_GetPersonalizationFile_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_GetPersonalizationFile_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_GetPersonalizationFile_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_GetPersonalizationFile_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_GetPersonalizationFile_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_GetPersonalizationFile_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_GetPersonalizationFile_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_GetPersonalizationFile_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_GetPersonalizationFile_Response";
  }
  protected:
  explicit CAccountHardware_GetPersonalizationFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_GetPersonalizationFile_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_VRCompatibilityCheck_Request_Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_VRCompatibilityCheck_Request.Pair) */ {
 public:
  inline CAccountHardware_VRCompatibilityCheck_Request_Pair() : CAccountHardware_VRCompatibilityCheck_Request_Pair(nullptr) {}
  ~CAccountHardware_VRCompatibilityCheck_Request_Pair() override;
  explicit constexpr CAccountHardware_VRCompatibilityCheck_Request_Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_VRCompatibilityCheck_Request_Pair(const CAccountHardware_VRCompatibilityCheck_Request_Pair& from);
  CAccountHardware_VRCompatibilityCheck_Request_Pair(CAccountHardware_VRCompatibilityCheck_Request_Pair&& from) noexcept
    : CAccountHardware_VRCompatibilityCheck_Request_Pair() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_VRCompatibilityCheck_Request_Pair& operator=(const CAccountHardware_VRCompatibilityCheck_Request_Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_VRCompatibilityCheck_Request_Pair& operator=(CAccountHardware_VRCompatibilityCheck_Request_Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_VRCompatibilityCheck_Request_Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_VRCompatibilityCheck_Request_Pair* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_VRCompatibilityCheck_Request_Pair*>(
               &_CAccountHardware_VRCompatibilityCheck_Request_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CAccountHardware_VRCompatibilityCheck_Request_Pair& a, CAccountHardware_VRCompatibilityCheck_Request_Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_VRCompatibilityCheck_Request_Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_VRCompatibilityCheck_Request_Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_VRCompatibilityCheck_Request_Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_VRCompatibilityCheck_Request_Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_VRCompatibilityCheck_Request_Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_VRCompatibilityCheck_Request_Pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_VRCompatibilityCheck_Request_Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_VRCompatibilityCheck_Request.Pair";
  }
  protected:
  explicit CAccountHardware_VRCompatibilityCheck_Request_Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_VRCompatibilityCheck_Request.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_VRCompatibilityCheck_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_VRCompatibilityCheck_Request) */ {
 public:
  inline CAccountHardware_VRCompatibilityCheck_Request() : CAccountHardware_VRCompatibilityCheck_Request(nullptr) {}
  ~CAccountHardware_VRCompatibilityCheck_Request() override;
  explicit constexpr CAccountHardware_VRCompatibilityCheck_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_VRCompatibilityCheck_Request(const CAccountHardware_VRCompatibilityCheck_Request& from);
  CAccountHardware_VRCompatibilityCheck_Request(CAccountHardware_VRCompatibilityCheck_Request&& from) noexcept
    : CAccountHardware_VRCompatibilityCheck_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_VRCompatibilityCheck_Request& operator=(const CAccountHardware_VRCompatibilityCheck_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_VRCompatibilityCheck_Request& operator=(CAccountHardware_VRCompatibilityCheck_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_VRCompatibilityCheck_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_VRCompatibilityCheck_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_VRCompatibilityCheck_Request*>(
               &_CAccountHardware_VRCompatibilityCheck_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CAccountHardware_VRCompatibilityCheck_Request& a, CAccountHardware_VRCompatibilityCheck_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_VRCompatibilityCheck_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_VRCompatibilityCheck_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_VRCompatibilityCheck_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_VRCompatibilityCheck_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_VRCompatibilityCheck_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_VRCompatibilityCheck_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_VRCompatibilityCheck_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_VRCompatibilityCheck_Request";
  }
  protected:
  explicit CAccountHardware_VRCompatibilityCheck_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CAccountHardware_VRCompatibilityCheck_Request_Pair Pair;

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kProductNameFieldNumber = 1,
  };
  // repeated .CAccountHardware_VRCompatibilityCheck_Request.Pair values = 2 [(.description) = "Values from client system probe"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::CAccountHardware_VRCompatibilityCheck_Request_Pair* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Request_Pair >*
      mutable_values();
  private:
  const ::CAccountHardware_VRCompatibilityCheck_Request_Pair& _internal_values(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Request_Pair* _internal_add_values();
  public:
  const ::CAccountHardware_VRCompatibilityCheck_Request_Pair& values(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Request_Pair* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Request_Pair >&
      values() const;

  // optional string product_name = 1 [(.description) = "Name of product we\'re checking"];
  bool has_product_name() const;
  private:
  bool _internal_has_product_name() const;
  public:
  void clear_product_name();
  const std::string& product_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_name();
  PROTOBUF_NODISCARD std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);
  private:
  const std::string& _internal_product_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_name(const std::string& value);
  std::string* _internal_mutable_product_name();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_VRCompatibilityCheck_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Request_Pair > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_VRCompatibilityCheck_Response_Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_VRCompatibilityCheck_Response.Pair) */ {
 public:
  inline CAccountHardware_VRCompatibilityCheck_Response_Pair() : CAccountHardware_VRCompatibilityCheck_Response_Pair(nullptr) {}
  ~CAccountHardware_VRCompatibilityCheck_Response_Pair() override;
  explicit constexpr CAccountHardware_VRCompatibilityCheck_Response_Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_VRCompatibilityCheck_Response_Pair(const CAccountHardware_VRCompatibilityCheck_Response_Pair& from);
  CAccountHardware_VRCompatibilityCheck_Response_Pair(CAccountHardware_VRCompatibilityCheck_Response_Pair&& from) noexcept
    : CAccountHardware_VRCompatibilityCheck_Response_Pair() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_VRCompatibilityCheck_Response_Pair& operator=(const CAccountHardware_VRCompatibilityCheck_Response_Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_VRCompatibilityCheck_Response_Pair& operator=(CAccountHardware_VRCompatibilityCheck_Response_Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_VRCompatibilityCheck_Response_Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_VRCompatibilityCheck_Response_Pair* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_VRCompatibilityCheck_Response_Pair*>(
               &_CAccountHardware_VRCompatibilityCheck_Response_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CAccountHardware_VRCompatibilityCheck_Response_Pair& a, CAccountHardware_VRCompatibilityCheck_Response_Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_VRCompatibilityCheck_Response_Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_VRCompatibilityCheck_Response_Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_VRCompatibilityCheck_Response_Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_VRCompatibilityCheck_Response_Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_VRCompatibilityCheck_Response_Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_VRCompatibilityCheck_Response_Pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_VRCompatibilityCheck_Response_Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_VRCompatibilityCheck_Response.Pair";
  }
  protected:
  explicit CAccountHardware_VRCompatibilityCheck_Response_Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_VRCompatibilityCheck_Response.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay) */ {
 public:
  inline CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay() : CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay(nullptr) {}
  ~CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay() override;
  explicit constexpr CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay(const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& from);
  CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay&& from) noexcept
    : CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& operator=(const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& operator=(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay*>(
               &_CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& a, CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay";
  }
  protected:
  explicit CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImageFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // optional string name = 1 [(.description) = "Name of component (OS, RAM, GPU, etc.)"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string image = 2 [(.description) = "Name of icon to use"];
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // optional string value = 3 [(.description) = "String value to report"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_VRCompatibilityCheck_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_VRCompatibilityCheck_Response) */ {
 public:
  inline CAccountHardware_VRCompatibilityCheck_Response() : CAccountHardware_VRCompatibilityCheck_Response(nullptr) {}
  ~CAccountHardware_VRCompatibilityCheck_Response() override;
  explicit constexpr CAccountHardware_VRCompatibilityCheck_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_VRCompatibilityCheck_Response(const CAccountHardware_VRCompatibilityCheck_Response& from);
  CAccountHardware_VRCompatibilityCheck_Response(CAccountHardware_VRCompatibilityCheck_Response&& from) noexcept
    : CAccountHardware_VRCompatibilityCheck_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_VRCompatibilityCheck_Response& operator=(const CAccountHardware_VRCompatibilityCheck_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_VRCompatibilityCheck_Response& operator=(CAccountHardware_VRCompatibilityCheck_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_VRCompatibilityCheck_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_VRCompatibilityCheck_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_VRCompatibilityCheck_Response*>(
               &_CAccountHardware_VRCompatibilityCheck_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CAccountHardware_VRCompatibilityCheck_Response& a, CAccountHardware_VRCompatibilityCheck_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_VRCompatibilityCheck_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_VRCompatibilityCheck_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_VRCompatibilityCheck_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_VRCompatibilityCheck_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_VRCompatibilityCheck_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_VRCompatibilityCheck_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_VRCompatibilityCheck_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_VRCompatibilityCheck_Response";
  }
  protected:
  explicit CAccountHardware_VRCompatibilityCheck_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CAccountHardware_VRCompatibilityCheck_Response_Pair Pair;
  typedef CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay ComponentDisplay;

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
    kComponentsFieldNumber = 2,
  };
  // repeated .CAccountHardware_VRCompatibilityCheck_Response.Pair values = 1 [(.description) = "Top-level values reported to client"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::CAccountHardware_VRCompatibilityCheck_Response_Pair* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_Pair >*
      mutable_values();
  private:
  const ::CAccountHardware_VRCompatibilityCheck_Response_Pair& _internal_values(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Response_Pair* _internal_add_values();
  public:
  const ::CAccountHardware_VRCompatibilityCheck_Response_Pair& values(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Response_Pair* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_Pair >&
      values() const;

  // repeated .CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay components = 2 [(.description) = "Specific values to display"];
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay >*
      mutable_components();
  private:
  const ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& _internal_components(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* _internal_add_components();
  public:
  const ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& components(int index) const;
  ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay >&
      components() const;

  // @@protoc_insertion_point(class_scope:CAccountHardware_VRCompatibilityCheck_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_Pair > values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay > components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_RegisterValveIndexComponent_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_RegisterValveIndexComponent_Request) */ {
 public:
  inline CAccountHardware_RegisterValveIndexComponent_Request() : CAccountHardware_RegisterValveIndexComponent_Request(nullptr) {}
  ~CAccountHardware_RegisterValveIndexComponent_Request() override;
  explicit constexpr CAccountHardware_RegisterValveIndexComponent_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_RegisterValveIndexComponent_Request(const CAccountHardware_RegisterValveIndexComponent_Request& from);
  CAccountHardware_RegisterValveIndexComponent_Request(CAccountHardware_RegisterValveIndexComponent_Request&& from) noexcept
    : CAccountHardware_RegisterValveIndexComponent_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_RegisterValveIndexComponent_Request& operator=(const CAccountHardware_RegisterValveIndexComponent_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_RegisterValveIndexComponent_Request& operator=(CAccountHardware_RegisterValveIndexComponent_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_RegisterValveIndexComponent_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_RegisterValveIndexComponent_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_RegisterValveIndexComponent_Request*>(
               &_CAccountHardware_RegisterValveIndexComponent_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CAccountHardware_RegisterValveIndexComponent_Request& a, CAccountHardware_RegisterValveIndexComponent_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_RegisterValveIndexComponent_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_RegisterValveIndexComponent_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_RegisterValveIndexComponent_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_RegisterValveIndexComponent_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_RegisterValveIndexComponent_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_RegisterValveIndexComponent_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_RegisterValveIndexComponent_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_RegisterValveIndexComponent_Request";
  }
  protected:
  explicit CAccountHardware_RegisterValveIndexComponent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kManufacturerSerialNumberFieldNumber = 2,
    kComponentCodeFieldNumber = 3,
    kComponentTypeFieldNumber = 4,
    kEstimatedTimeRegisteredFieldNumber = 5,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string manufacturer_serial_number = 2;
  bool has_manufacturer_serial_number() const;
  private:
  bool _internal_has_manufacturer_serial_number() const;
  public:
  void clear_manufacturer_serial_number();
  const std::string& manufacturer_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer_serial_number();
  PROTOBUF_NODISCARD std::string* release_manufacturer_serial_number();
  void set_allocated_manufacturer_serial_number(std::string* manufacturer_serial_number);
  private:
  const std::string& _internal_manufacturer_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer_serial_number(const std::string& value);
  std::string* _internal_mutable_manufacturer_serial_number();
  public:

  // optional string component_code = 3;
  bool has_component_code() const;
  private:
  bool _internal_has_component_code() const;
  public:
  void clear_component_code();
  const std::string& component_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_code();
  PROTOBUF_NODISCARD std::string* release_component_code();
  void set_allocated_component_code(std::string* component_code);
  private:
  const std::string& _internal_component_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_code(const std::string& value);
  std::string* _internal_mutable_component_code();
  public:

  // optional .EValveIndexComponent component_type = 4 [default = k_EValveIndexComponentUnknown];
  bool has_component_type() const;
  private:
  bool _internal_has_component_type() const;
  public:
  void clear_component_type();
  ::EValveIndexComponent component_type() const;
  void set_component_type(::EValveIndexComponent value);
  private:
  ::EValveIndexComponent _internal_component_type() const;
  void _internal_set_component_type(::EValveIndexComponent value);
  public:

  // optional int32 estimated_time_registered = 5;
  bool has_estimated_time_registered() const;
  private:
  bool _internal_has_estimated_time_registered() const;
  public:
  void clear_estimated_time_registered();
  int32_t estimated_time_registered() const;
  void set_estimated_time_registered(int32_t value);
  private:
  int32_t _internal_estimated_time_registered() const;
  void _internal_set_estimated_time_registered(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_RegisterValveIndexComponent_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_code_;
  int component_type_;
  int32_t estimated_time_registered_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_RegisterValveIndexComponent_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CAccountHardware_RegisterValveIndexComponent_Response) */ {
 public:
  inline CAccountHardware_RegisterValveIndexComponent_Response() : CAccountHardware_RegisterValveIndexComponent_Response(nullptr) {}
  explicit constexpr CAccountHardware_RegisterValveIndexComponent_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_RegisterValveIndexComponent_Response(const CAccountHardware_RegisterValveIndexComponent_Response& from);
  CAccountHardware_RegisterValveIndexComponent_Response(CAccountHardware_RegisterValveIndexComponent_Response&& from) noexcept
    : CAccountHardware_RegisterValveIndexComponent_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_RegisterValveIndexComponent_Response& operator=(const CAccountHardware_RegisterValveIndexComponent_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_RegisterValveIndexComponent_Response& operator=(CAccountHardware_RegisterValveIndexComponent_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_RegisterValveIndexComponent_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_RegisterValveIndexComponent_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_RegisterValveIndexComponent_Response*>(
               &_CAccountHardware_RegisterValveIndexComponent_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CAccountHardware_RegisterValveIndexComponent_Response& a, CAccountHardware_RegisterValveIndexComponent_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_RegisterValveIndexComponent_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_RegisterValveIndexComponent_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_RegisterValveIndexComponent_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_RegisterValveIndexComponent_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CAccountHardware_RegisterValveIndexComponent_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CAccountHardware_RegisterValveIndexComponent_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_RegisterValveIndexComponent_Response";
  }
  protected:
  explicit CAccountHardware_RegisterValveIndexComponent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CAccountHardware_RegisterValveIndexComponent_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_GetSteamDeckComponents_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_GetSteamDeckComponents_Request) */ {
 public:
  inline CAccountHardware_GetSteamDeckComponents_Request() : CAccountHardware_GetSteamDeckComponents_Request(nullptr) {}
  ~CAccountHardware_GetSteamDeckComponents_Request() override;
  explicit constexpr CAccountHardware_GetSteamDeckComponents_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_GetSteamDeckComponents_Request(const CAccountHardware_GetSteamDeckComponents_Request& from);
  CAccountHardware_GetSteamDeckComponents_Request(CAccountHardware_GetSteamDeckComponents_Request&& from) noexcept
    : CAccountHardware_GetSteamDeckComponents_Request() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_GetSteamDeckComponents_Request& operator=(const CAccountHardware_GetSteamDeckComponents_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_GetSteamDeckComponents_Request& operator=(CAccountHardware_GetSteamDeckComponents_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_GetSteamDeckComponents_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_GetSteamDeckComponents_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_GetSteamDeckComponents_Request*>(
               &_CAccountHardware_GetSteamDeckComponents_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CAccountHardware_GetSteamDeckComponents_Request& a, CAccountHardware_GetSteamDeckComponents_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_GetSteamDeckComponents_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_GetSteamDeckComponents_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_GetSteamDeckComponents_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_GetSteamDeckComponents_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_GetSteamDeckComponents_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_GetSteamDeckComponents_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_GetSteamDeckComponents_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_GetSteamDeckComponents_Request";
  }
  protected:
  explicit CAccountHardware_GetSteamDeckComponents_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kControllerCodeFieldNumber = 2,
  };
  // optional string serial_number = 1;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string controller_code = 2;
  bool has_controller_code() const;
  private:
  bool _internal_has_controller_code() const;
  public:
  void clear_controller_code();
  const std::string& controller_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_code();
  PROTOBUF_NODISCARD std::string* release_controller_code();
  void set_allocated_controller_code(std::string* controller_code);
  private:
  const std::string& _internal_controller_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_code(const std::string& value);
  std::string* _internal_mutable_controller_code();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_GetSteamDeckComponents_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_code_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountHardware_GetSteamDeckComponents_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAccountHardware_GetSteamDeckComponents_Response) */ {
 public:
  inline CAccountHardware_GetSteamDeckComponents_Response() : CAccountHardware_GetSteamDeckComponents_Response(nullptr) {}
  ~CAccountHardware_GetSteamDeckComponents_Response() override;
  explicit constexpr CAccountHardware_GetSteamDeckComponents_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAccountHardware_GetSteamDeckComponents_Response(const CAccountHardware_GetSteamDeckComponents_Response& from);
  CAccountHardware_GetSteamDeckComponents_Response(CAccountHardware_GetSteamDeckComponents_Response&& from) noexcept
    : CAccountHardware_GetSteamDeckComponents_Response() {
    *this = ::std::move(from);
  }

  inline CAccountHardware_GetSteamDeckComponents_Response& operator=(const CAccountHardware_GetSteamDeckComponents_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAccountHardware_GetSteamDeckComponents_Response& operator=(CAccountHardware_GetSteamDeckComponents_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAccountHardware_GetSteamDeckComponents_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAccountHardware_GetSteamDeckComponents_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountHardware_GetSteamDeckComponents_Response*>(
               &_CAccountHardware_GetSteamDeckComponents_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CAccountHardware_GetSteamDeckComponents_Response& a, CAccountHardware_GetSteamDeckComponents_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CAccountHardware_GetSteamDeckComponents_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAccountHardware_GetSteamDeckComponents_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAccountHardware_GetSteamDeckComponents_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAccountHardware_GetSteamDeckComponents_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAccountHardware_GetSteamDeckComponents_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAccountHardware_GetSteamDeckComponents_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountHardware_GetSteamDeckComponents_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAccountHardware_GetSteamDeckComponents_Response";
  }
  protected:
  explicit CAccountHardware_GetSteamDeckComponents_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonComponentsFieldNumber = 1,
  };
  // optional string json_components = 1;
  bool has_json_components() const;
  private:
  bool _internal_has_json_components() const;
  public:
  void clear_json_components();
  const std::string& json_components() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_components(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_components();
  PROTOBUF_NODISCARD std::string* release_json_components();
  void set_allocated_json_components(std::string* json_components);
  private:
  const std::string& _internal_json_components() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_components(const std::string& value);
  std::string* _internal_mutable_json_components();
  public:

  // @@protoc_insertion_point(class_scope:CAccountHardware_GetSteamDeckComponents_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_components_;
  friend struct ::TableStruct_steammessages_5faccounthardware_2esteamclient_2eproto;
};
// ===================================================================

class AccountHardware_Stub;

class AccountHardware : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline AccountHardware() {};
 public:
  virtual ~AccountHardware();

  typedef AccountHardware_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void RegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_RegisterSteamController_Request* request,
                       ::CAccountHardware_RegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteSteamControllerRegistration(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_CompleteSteamControllerRegistration_Request* request,
                       ::CAccountHardware_CompleteSteamControllerRegistration_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryAccountsRegisteredToController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* request,
                       ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SteamControllerSetConfig_Request* request,
                       ::CAccountHardware_SteamControllerSetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SteamControllerGetConfig_Request* request,
                       ::CAccountHardware_SteamControllerGetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeRegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_DeRegisterSteamController_Request* request,
                       ::CAccountHardware_DeRegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SetPersonalizationFile_Request* request,
                       ::CAccountHardware_SetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_GetPersonalizationFile_Request* request,
                       ::CAccountHardware_GetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void VRCompatibilityCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_VRCompatibilityCheck_Request* request,
                       ::CAccountHardware_VRCompatibilityCheck_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RegisterValveIndexComponent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_RegisterValveIndexComponent_Request* request,
                       ::CAccountHardware_RegisterValveIndexComponent_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSteamDeckComponents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_GetSteamDeckComponents_Request* request,
                       ::CAccountHardware_GetSteamDeckComponents_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountHardware);
};

class AccountHardware_Stub : public AccountHardware {
 public:
  AccountHardware_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  AccountHardware_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~AccountHardware_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements AccountHardware ------------------------------------------

  void RegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_RegisterSteamController_Request* request,
                       ::CAccountHardware_RegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  void CompleteSteamControllerRegistration(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_CompleteSteamControllerRegistration_Request* request,
                       ::CAccountHardware_CompleteSteamControllerRegistration_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryAccountsRegisteredToController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_QueryAccountsRegisteredToSerial_Request* request,
                       ::CAccountHardware_QueryAccountsRegisteredToSerial_Response* response,
                       ::google::protobuf::Closure* done);
  void SetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SteamControllerSetConfig_Request* request,
                       ::CAccountHardware_SteamControllerSetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDesiredControllerConfigForApp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SteamControllerGetConfig_Request* request,
                       ::CAccountHardware_SteamControllerGetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  void DeRegisterSteamController(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_DeRegisterSteamController_Request* request,
                       ::CAccountHardware_DeRegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  void SetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_SetPersonalizationFile_Request* request,
                       ::CAccountHardware_SetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  void GetControllerPersonalizationFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_GetPersonalizationFile_Request* request,
                       ::CAccountHardware_GetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  void VRCompatibilityCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_VRCompatibilityCheck_Request* request,
                       ::CAccountHardware_VRCompatibilityCheck_Response* response,
                       ::google::protobuf::Closure* done);
  void RegisterValveIndexComponent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_RegisterValveIndexComponent_Request* request,
                       ::CAccountHardware_RegisterValveIndexComponent_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSteamDeckComponents(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CAccountHardware_GetSteamDeckComponents_Request* request,
                       ::CAccountHardware_GetSteamDeckComponents_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountHardware_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CAccountHardware_RegisterSteamController_Request

// optional string serial_number = 1;
inline bool CAccountHardware_RegisterSteamController_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterSteamController_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_RegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_RegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterSteamController_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_RegisterSteamController_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterSteamController_Request.serial_number)
}
inline std::string* CAccountHardware_RegisterSteamController_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_RegisterSteamController_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_RegisterSteamController_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_RegisterSteamController_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterSteamController_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_RegisterSteamController_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_RegisterSteamController_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_RegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_RegisterSteamController_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterSteamController_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_RegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_RegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterSteamController_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_RegisterSteamController_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterSteamController_Request.controller_code)
}
inline std::string* CAccountHardware_RegisterSteamController_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_RegisterSteamController_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_RegisterSteamController_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_RegisterSteamController_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterSteamController_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_RegisterSteamController_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_RegisterSteamController_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_RegisterSteamController_Request.controller_code)
}

// -------------------------------------------------------------------

// CAccountHardware_RegisterSteamController_Response

// -------------------------------------------------------------------

// CAccountHardware_CompleteSteamControllerRegistration_Request

// optional string serial_number = 1;
inline bool CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_CompleteSteamControllerRegistration_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_CompleteSteamControllerRegistration_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_CompleteSteamControllerRegistration_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_CompleteSteamControllerRegistration_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_CompleteSteamControllerRegistration_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_CompleteSteamControllerRegistration_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_CompleteSteamControllerRegistration_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_CompleteSteamControllerRegistration_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
}

// -------------------------------------------------------------------

// CAccountHardware_CompleteSteamControllerRegistration_Response

// -------------------------------------------------------------------

// CAccountHardware_QueryAccountsRegisteredToSerial_Request

// optional string serial_number = 1;
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_QueryAccountsRegisteredToSerial_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_QueryAccountsRegisteredToSerial_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_QueryAccountsRegisteredToSerial_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_QueryAccountsRegisteredToSerial_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_QueryAccountsRegisteredToSerial_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
}

// -------------------------------------------------------------------

// CAccountHardware_QueryAccountsRegisteredToSerial_Accounts

// optional uint32 accountid = 1;
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.accountid)
}

// optional bool registration_complete = 2;
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_has_registration_complete() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::has_registration_complete() const {
  return _internal_has_registration_complete();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::clear_registration_complete() {
  registration_complete_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_registration_complete() const {
  return registration_complete_;
}
inline bool CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::registration_complete() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
  return _internal_registration_complete();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::_internal_set_registration_complete(bool value) {
  _has_bits_[0] |= 0x00000002u;
  registration_complete_ = value;
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::set_registration_complete(bool value) {
  _internal_set_registration_complete(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
}

// -------------------------------------------------------------------

// CAccountHardware_QueryAccountsRegisteredToSerial_Response

// repeated .CAccountHardware_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
inline int CAccountHardware_QueryAccountsRegisteredToSerial_Response::_internal_accounts_size() const {
  return accounts_.size();
}
inline int CAccountHardware_QueryAccountsRegisteredToSerial_Response::accounts_size() const {
  return _internal_accounts_size();
}
inline void CAccountHardware_QueryAccountsRegisteredToSerial_Response::clear_accounts() {
  accounts_.Clear();
}
inline ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* CAccountHardware_QueryAccountsRegisteredToSerial_Response::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >*
CAccountHardware_QueryAccountsRegisteredToSerial_Response::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
  return &accounts_;
}
inline const ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& CAccountHardware_QueryAccountsRegisteredToSerial_Response::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts& CAccountHardware_QueryAccountsRegisteredToSerial_Response::accounts(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
  return _internal_accounts(index);
}
inline ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* CAccountHardware_QueryAccountsRegisteredToSerial_Response::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* CAccountHardware_QueryAccountsRegisteredToSerial_Response::add_accounts() {
  ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_QueryAccountsRegisteredToSerial_Accounts >&
CAccountHardware_QueryAccountsRegisteredToSerial_Response::accounts() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerSetConfig_ControllerConfig

// optional string appidorname = 1;
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_has_appidorname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::has_appidorname() const {
  return _internal_has_appidorname();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
  return _internal_appidorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerSetConfig_ControllerConfig::set_appidorname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::mutable_appidorname() {
  std::string* _s = _internal_mutable_appidorname();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_appidorname() const {
  return appidorname_.Get();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_set_appidorname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_mutable_appidorname() {
  _has_bits_[0] |= 0x00000001u;
  return appidorname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
  if (!_internal_has_appidorname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = appidorname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::set_allocated_appidorname(std::string* appidorname) {
  if (appidorname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appidorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appidorname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CAccountHardware_SteamControllerSetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_ControllerConfig.publishedfileid)
  return _internal_publishedfileid();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  publishedfileid_ = value;
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_has_templatename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_ControllerConfig::has_templatename() const {
  return _internal_has_templatename();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
  return _internal_templatename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerSetConfig_ControllerConfig::set_templatename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::mutable_templatename() {
  std::string* _s = _internal_mutable_templatename();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_templatename() const {
  return templatename_.Get();
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_set_templatename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::_internal_mutable_templatename() {
  _has_bits_[0] |= 0x00000002u;
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
  if (!_internal_has_templatename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = templatename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (templatename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    templatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerSetConfig_ControllerConfig::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (templatename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    templatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
}

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerSetConfig_Request

// optional string serial_number = 1;
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerSetConfig_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerSetConfig_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerSetConfig_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerSetConfig_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerSetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerSetConfig_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CAccountHardware_SteamControllerSetConfig_Request::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_SteamControllerSetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CAccountHardware_SteamControllerSetConfig_Request::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_Request.accountid)
}

// repeated .CAccountHardware_SteamControllerSetConfig_ControllerConfig configurations = 4;
inline int CAccountHardware_SteamControllerSetConfig_Request::_internal_configurations_size() const {
  return configurations_.size();
}
inline int CAccountHardware_SteamControllerSetConfig_Request::configurations_size() const {
  return _internal_configurations_size();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_configurations() {
  configurations_.Clear();
}
inline ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* CAccountHardware_SteamControllerSetConfig_Request::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerSetConfig_Request.configurations)
  return configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >*
CAccountHardware_SteamControllerSetConfig_Request::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_SteamControllerSetConfig_Request.configurations)
  return &configurations_;
}
inline const ::CAccountHardware_SteamControllerSetConfig_ControllerConfig& CAccountHardware_SteamControllerSetConfig_Request::_internal_configurations(int index) const {
  return configurations_.Get(index);
}
inline const ::CAccountHardware_SteamControllerSetConfig_ControllerConfig& CAccountHardware_SteamControllerSetConfig_Request::configurations(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.configurations)
  return _internal_configurations(index);
}
inline ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* CAccountHardware_SteamControllerSetConfig_Request::_internal_add_configurations() {
  return configurations_.Add();
}
inline ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* CAccountHardware_SteamControllerSetConfig_Request::add_configurations() {
  ::CAccountHardware_SteamControllerSetConfig_ControllerConfig* _add = _internal_add_configurations();
  // @@protoc_insertion_point(field_add:CAccountHardware_SteamControllerSetConfig_Request.configurations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerSetConfig_ControllerConfig >&
CAccountHardware_SteamControllerSetConfig_Request::configurations() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_SteamControllerSetConfig_Request.configurations)
  return configurations_;
}

// optional int32 controller_type = 5 [default = 2];
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_has_controller_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::has_controller_type() const {
  return _internal_has_controller_type();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CAccountHardware_SteamControllerSetConfig_Request::_internal_controller_type() const {
  return controller_type_;
}
inline int32_t CAccountHardware_SteamControllerSetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.controller_type)
  return _internal_controller_type();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::_internal_set_controller_type(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  controller_type_ = value;
}
inline void CAccountHardware_SteamControllerSetConfig_Request::set_controller_type(int32_t value) {
  _internal_set_controller_type(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_has_only_for_this_serial() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::has_only_for_this_serial() const {
  return _internal_has_only_for_this_serial();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::_internal_only_for_this_serial() const {
  return only_for_this_serial_;
}
inline bool CAccountHardware_SteamControllerSetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerSetConfig_Request.only_for_this_serial)
  return _internal_only_for_this_serial();
}
inline void CAccountHardware_SteamControllerSetConfig_Request::_internal_set_only_for_this_serial(bool value) {
  _has_bits_[0] |= 0x00000008u;
  only_for_this_serial_ = value;
}
inline void CAccountHardware_SteamControllerSetConfig_Request::set_only_for_this_serial(bool value) {
  _internal_set_only_for_this_serial(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerSetConfig_Request.only_for_this_serial)
}

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerSetConfig_Response

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerGetConfig_Request

// optional string serial_number = 1;
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CAccountHardware_SteamControllerGetConfig_Request::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_SteamControllerGetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  accountid_ = value;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.accountid)
}

// optional string appidorname = 4;
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_appidorname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_appidorname() const {
  return _internal_has_appidorname();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_appidorname() {
  appidorname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::appidorname() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
  return _internal_appidorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_Request::set_appidorname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::mutable_appidorname() {
  std::string* _s = _internal_mutable_appidorname();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_Request::_internal_appidorname() const {
  return appidorname_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_appidorname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::_internal_mutable_appidorname() {
  _has_bits_[0] |= 0x00000004u;
  return appidorname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_Request::release_appidorname() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
  if (!_internal_has_appidorname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = appidorname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_allocated_appidorname(std::string* appidorname) {
  if (appidorname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  appidorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appidorname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
}

// optional int32 controller_type = 5 [default = 2];
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_controller_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_controller_type() const {
  return _internal_has_controller_type();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CAccountHardware_SteamControllerGetConfig_Request::_internal_controller_type() const {
  return controller_type_;
}
inline int32_t CAccountHardware_SteamControllerGetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.controller_type)
  return _internal_controller_type();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_controller_type(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  controller_type_ = value;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_controller_type(int32_t value) {
  _internal_set_controller_type(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_has_only_for_this_serial() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::has_only_for_this_serial() const {
  return _internal_has_only_for_this_serial();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::_internal_only_for_this_serial() const {
  return only_for_this_serial_;
}
inline bool CAccountHardware_SteamControllerGetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Request.only_for_this_serial)
  return _internal_only_for_this_serial();
}
inline void CAccountHardware_SteamControllerGetConfig_Request::_internal_set_only_for_this_serial(bool value) {
  _has_bits_[0] |= 0x00000010u;
  only_for_this_serial_ = value;
}
inline void CAccountHardware_SteamControllerGetConfig_Request::set_only_for_this_serial(bool value) {
  _internal_set_only_for_this_serial(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_Request.only_for_this_serial)
}

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerGetConfig_ControllerConfig

// optional string appidorname = 1;
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_has_appidorname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::has_appidorname() const {
  return _internal_has_appidorname();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
  return _internal_appidorname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_appidorname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::mutable_appidorname() {
  std::string* _s = _internal_mutable_appidorname();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_appidorname() const {
  return appidorname_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_set_appidorname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  appidorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_mutable_appidorname() {
  _has_bits_[0] |= 0x00000001u;
  return appidorname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
  if (!_internal_has_appidorname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = appidorname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_allocated_appidorname(std::string* appidorname) {
  if (appidorname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  appidorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appidorname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appidorname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appidorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CAccountHardware_SteamControllerGetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_ControllerConfig.publishedfileid)
  return _internal_publishedfileid();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  publishedfileid_ = value;
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_has_templatename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::has_templatename() const {
  return _internal_has_templatename();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
  return _internal_templatename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_templatename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::mutable_templatename() {
  std::string* _s = _internal_mutable_templatename();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_templatename() const {
  return templatename_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_set_templatename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  templatename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_mutable_templatename() {
  _has_bits_[0] |= 0x00000002u;
  return templatename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
  if (!_internal_has_templatename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = templatename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (templatename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    templatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_allocated_templatename(std::string* templatename) {
  if (templatename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  templatename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), templatename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (templatename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    templatename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
}

// optional string serial_number = 4;
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000004u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SteamControllerGetConfig_ControllerConfig::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
}

// optional bool autosave = 5 [default = false];
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_has_autosave() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::has_autosave() const {
  return _internal_has_autosave();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::clear_autosave() {
  autosave_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_autosave() const {
  return autosave_;
}
inline bool CAccountHardware_SteamControllerGetConfig_ControllerConfig::autosave() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_ControllerConfig.autosave)
  return _internal_autosave();
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::_internal_set_autosave(bool value) {
  _has_bits_[0] |= 0x00000010u;
  autosave_ = value;
}
inline void CAccountHardware_SteamControllerGetConfig_ControllerConfig::set_autosave(bool value) {
  _internal_set_autosave(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SteamControllerGetConfig_ControllerConfig.autosave)
}

// -------------------------------------------------------------------

// CAccountHardware_SteamControllerGetConfig_Response

// repeated .CAccountHardware_SteamControllerGetConfig_ControllerConfig configurations = 1;
inline int CAccountHardware_SteamControllerGetConfig_Response::_internal_configurations_size() const {
  return configurations_.size();
}
inline int CAccountHardware_SteamControllerGetConfig_Response::configurations_size() const {
  return _internal_configurations_size();
}
inline void CAccountHardware_SteamControllerGetConfig_Response::clear_configurations() {
  configurations_.Clear();
}
inline ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* CAccountHardware_SteamControllerGetConfig_Response::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SteamControllerGetConfig_Response.configurations)
  return configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >*
CAccountHardware_SteamControllerGetConfig_Response::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_SteamControllerGetConfig_Response.configurations)
  return &configurations_;
}
inline const ::CAccountHardware_SteamControllerGetConfig_ControllerConfig& CAccountHardware_SteamControllerGetConfig_Response::_internal_configurations(int index) const {
  return configurations_.Get(index);
}
inline const ::CAccountHardware_SteamControllerGetConfig_ControllerConfig& CAccountHardware_SteamControllerGetConfig_Response::configurations(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SteamControllerGetConfig_Response.configurations)
  return _internal_configurations(index);
}
inline ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* CAccountHardware_SteamControllerGetConfig_Response::_internal_add_configurations() {
  return configurations_.Add();
}
inline ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* CAccountHardware_SteamControllerGetConfig_Response::add_configurations() {
  ::CAccountHardware_SteamControllerGetConfig_ControllerConfig* _add = _internal_add_configurations();
  // @@protoc_insertion_point(field_add:CAccountHardware_SteamControllerGetConfig_Response.configurations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_SteamControllerGetConfig_ControllerConfig >&
CAccountHardware_SteamControllerGetConfig_Response::configurations() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_SteamControllerGetConfig_Response.configurations)
  return configurations_;
}

// -------------------------------------------------------------------

// CAccountHardware_DeRegisterSteamController_Request

// optional string serial_number = 1;
inline bool CAccountHardware_DeRegisterSteamController_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_DeRegisterSteamController_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_DeRegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_DeRegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_DeRegisterSteamController_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_DeRegisterSteamController_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_DeRegisterSteamController_Request.serial_number)
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_DeRegisterSteamController_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_DeRegisterSteamController_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_DeRegisterSteamController_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_DeRegisterSteamController_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_DeRegisterSteamController_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_DeRegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_DeRegisterSteamController_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_DeRegisterSteamController_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_DeRegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_DeRegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_DeRegisterSteamController_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_DeRegisterSteamController_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_DeRegisterSteamController_Request.controller_code)
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_DeRegisterSteamController_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_DeRegisterSteamController_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_DeRegisterSteamController_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_DeRegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_DeRegisterSteamController_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_DeRegisterSteamController_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_DeRegisterSteamController_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CAccountHardware_DeRegisterSteamController_Request::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_DeRegisterSteamController_Request::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_DeRegisterSteamController_Request::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CAccountHardware_DeRegisterSteamController_Request::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_DeRegisterSteamController_Request::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_DeRegisterSteamController_Request.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_DeRegisterSteamController_Request::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CAccountHardware_DeRegisterSteamController_Request::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_DeRegisterSteamController_Request.accountid)
}

// -------------------------------------------------------------------

// CAccountHardware_DeRegisterSteamController_Response

// -------------------------------------------------------------------

// CAccountHardware_SetPersonalizationFile_Request

// optional string serial_number = 1;
inline bool CAccountHardware_SetPersonalizationFile_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_SetPersonalizationFile_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_SetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_SetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SetPersonalizationFile_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_SetPersonalizationFile_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_SetPersonalizationFile_Request.serial_number)
}
inline std::string* CAccountHardware_SetPersonalizationFile_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_SetPersonalizationFile_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_SetPersonalizationFile_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_SetPersonalizationFile_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SetPersonalizationFile_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_SetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_SetPersonalizationFile_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_SetPersonalizationFile_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_SetPersonalizationFile_Request.serial_number)
}

// optional uint64 publishedfileid = 2;
inline bool CAccountHardware_SetPersonalizationFile_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_SetPersonalizationFile_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CAccountHardware_SetPersonalizationFile_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CAccountHardware_SetPersonalizationFile_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CAccountHardware_SetPersonalizationFile_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SetPersonalizationFile_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CAccountHardware_SetPersonalizationFile_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  publishedfileid_ = value;
}
inline void CAccountHardware_SetPersonalizationFile_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SetPersonalizationFile_Request.publishedfileid)
}

// optional uint32 accountid = 3;
inline bool CAccountHardware_SetPersonalizationFile_Request::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_SetPersonalizationFile_Request::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_SetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CAccountHardware_SetPersonalizationFile_Request::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_SetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_SetPersonalizationFile_Request.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_SetPersonalizationFile_Request::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CAccountHardware_SetPersonalizationFile_Request::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_SetPersonalizationFile_Request.accountid)
}

// -------------------------------------------------------------------

// CAccountHardware_SetPersonalizationFile_Response

// -------------------------------------------------------------------

// CAccountHardware_GetPersonalizationFile_Request

// optional string serial_number = 1;
inline bool CAccountHardware_GetPersonalizationFile_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_GetPersonalizationFile_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_GetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_GetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetPersonalizationFile_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_GetPersonalizationFile_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_GetPersonalizationFile_Request.serial_number)
}
inline std::string* CAccountHardware_GetPersonalizationFile_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_GetPersonalizationFile_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_GetPersonalizationFile_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_GetPersonalizationFile_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetPersonalizationFile_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_GetPersonalizationFile_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_GetPersonalizationFile_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_GetPersonalizationFile_Request.serial_number)
}

// optional uint32 accountid = 2;
inline bool CAccountHardware_GetPersonalizationFile_Request::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_GetPersonalizationFile_Request::has_accountid() const {
  return _internal_has_accountid();
}
inline void CAccountHardware_GetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CAccountHardware_GetPersonalizationFile_Request::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CAccountHardware_GetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetPersonalizationFile_Request.accountid)
  return _internal_accountid();
}
inline void CAccountHardware_GetPersonalizationFile_Request::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CAccountHardware_GetPersonalizationFile_Request::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_GetPersonalizationFile_Request.accountid)
}

// -------------------------------------------------------------------

// CAccountHardware_GetPersonalizationFile_Response

// optional uint64 publishedfileid = 1;
inline bool CAccountHardware_GetPersonalizationFile_Response::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_GetPersonalizationFile_Response::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CAccountHardware_GetPersonalizationFile_Response::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CAccountHardware_GetPersonalizationFile_Response::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CAccountHardware_GetPersonalizationFile_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetPersonalizationFile_Response.publishedfileid)
  return _internal_publishedfileid();
}
inline void CAccountHardware_GetPersonalizationFile_Response::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CAccountHardware_GetPersonalizationFile_Response::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_GetPersonalizationFile_Response.publishedfileid)
}

// -------------------------------------------------------------------

// CAccountHardware_VRCompatibilityCheck_Request_Pair

// optional string key = 1;
inline bool CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Request_Pair::has_key() const {
  return _internal_has_key();
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request_Pair::key() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Request_Pair::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_key() const {
  return key_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::release_key() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
}

// optional string value = 2;
inline bool CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Request_Pair::has_value() const {
  return _internal_has_value();
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request_Pair::value() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Request_Pair::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_value() const {
  return value_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request_Pair::release_value() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Request_Pair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
}

// -------------------------------------------------------------------

// CAccountHardware_VRCompatibilityCheck_Request

// optional string product_name = 1 [(.description) = "Name of product we\'re checking"];
inline bool CAccountHardware_VRCompatibilityCheck_Request::_internal_has_product_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Request::has_product_name() const {
  return _internal_has_product_name();
}
inline void CAccountHardware_VRCompatibilityCheck_Request::clear_product_name() {
  product_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request::product_name() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Request.product_name)
  return _internal_product_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Request::set_product_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Request.product_name)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request::mutable_product_name() {
  std::string* _s = _internal_mutable_product_name();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Request.product_name)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Request::_internal_product_name() const {
  return product_name_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Request::_internal_set_product_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request::_internal_mutable_product_name() {
  _has_bits_[0] |= 0x00000001u;
  return product_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Request::release_product_name() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Request.product_name)
  if (!_internal_has_product_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = product_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Request::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Request.product_name)
}

// repeated .CAccountHardware_VRCompatibilityCheck_Request.Pair values = 2 [(.description) = "Values from client system probe"];
inline int CAccountHardware_VRCompatibilityCheck_Request::_internal_values_size() const {
  return values_.size();
}
inline int CAccountHardware_VRCompatibilityCheck_Request::values_size() const {
  return _internal_values_size();
}
inline void CAccountHardware_VRCompatibilityCheck_Request::clear_values() {
  values_.Clear();
}
inline ::CAccountHardware_VRCompatibilityCheck_Request_Pair* CAccountHardware_VRCompatibilityCheck_Request::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Request.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Request_Pair >*
CAccountHardware_VRCompatibilityCheck_Request::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_VRCompatibilityCheck_Request.values)
  return &values_;
}
inline const ::CAccountHardware_VRCompatibilityCheck_Request_Pair& CAccountHardware_VRCompatibilityCheck_Request::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::CAccountHardware_VRCompatibilityCheck_Request_Pair& CAccountHardware_VRCompatibilityCheck_Request::values(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Request.values)
  return _internal_values(index);
}
inline ::CAccountHardware_VRCompatibilityCheck_Request_Pair* CAccountHardware_VRCompatibilityCheck_Request::_internal_add_values() {
  return values_.Add();
}
inline ::CAccountHardware_VRCompatibilityCheck_Request_Pair* CAccountHardware_VRCompatibilityCheck_Request::add_values() {
  ::CAccountHardware_VRCompatibilityCheck_Request_Pair* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:CAccountHardware_VRCompatibilityCheck_Request.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Request_Pair >&
CAccountHardware_VRCompatibilityCheck_Request::values() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_VRCompatibilityCheck_Request.values)
  return values_;
}

// -------------------------------------------------------------------

// CAccountHardware_VRCompatibilityCheck_Response_Pair

// optional string key = 1;
inline bool CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Response_Pair::has_key() const {
  return _internal_has_key();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_Pair::key() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Response_Pair::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_key() const {
  return key_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::release_key() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
}

// optional string value = 2;
inline bool CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Response_Pair::has_value() const {
  return _internal_has_value();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_Pair::value() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Response_Pair::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_value() const {
  return value_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_Pair::release_value() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Response_Pair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
}

// -------------------------------------------------------------------

// CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay

// optional string name = 1 [(.description) = "Name of component (OS, RAM, GPU, etc.)"];
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::has_name() const {
  return _internal_has_name();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::name() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_name() const {
  return name_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::release_name() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
}

// optional string image = 2 [(.description) = "Name of icon to use"];
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::has_image() const {
  return _internal_has_image();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::clear_image() {
  image_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::image() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_image(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_image() const {
  return image_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::release_image() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
}

// optional string value = 3 [(.description) = "String value to report"];
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::has_value() const {
  return _internal_has_value();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::value() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
  return _s;
}
inline const std::string& CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_value() const {
  return value_.Get();
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::release_value() {
  // @@protoc_insertion_point(field_release:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
}

// -------------------------------------------------------------------

// CAccountHardware_VRCompatibilityCheck_Response

// repeated .CAccountHardware_VRCompatibilityCheck_Response.Pair values = 1 [(.description) = "Top-level values reported to client"];
inline int CAccountHardware_VRCompatibilityCheck_Response::_internal_values_size() const {
  return values_.size();
}
inline int CAccountHardware_VRCompatibilityCheck_Response::values_size() const {
  return _internal_values_size();
}
inline void CAccountHardware_VRCompatibilityCheck_Response::clear_values() {
  values_.Clear();
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_Pair* CAccountHardware_VRCompatibilityCheck_Response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_Pair >*
CAccountHardware_VRCompatibilityCheck_Response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_VRCompatibilityCheck_Response.values)
  return &values_;
}
inline const ::CAccountHardware_VRCompatibilityCheck_Response_Pair& CAccountHardware_VRCompatibilityCheck_Response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::CAccountHardware_VRCompatibilityCheck_Response_Pair& CAccountHardware_VRCompatibilityCheck_Response::values(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.values)
  return _internal_values(index);
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_Pair* CAccountHardware_VRCompatibilityCheck_Response::_internal_add_values() {
  return values_.Add();
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_Pair* CAccountHardware_VRCompatibilityCheck_Response::add_values() {
  ::CAccountHardware_VRCompatibilityCheck_Response_Pair* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:CAccountHardware_VRCompatibilityCheck_Response.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_Pair >&
CAccountHardware_VRCompatibilityCheck_Response::values() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_VRCompatibilityCheck_Response.values)
  return values_;
}

// repeated .CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay components = 2 [(.description) = "Specific values to display"];
inline int CAccountHardware_VRCompatibilityCheck_Response::_internal_components_size() const {
  return components_.size();
}
inline int CAccountHardware_VRCompatibilityCheck_Response::components_size() const {
  return _internal_components_size();
}
inline void CAccountHardware_VRCompatibilityCheck_Response::clear_components() {
  components_.Clear();
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* CAccountHardware_VRCompatibilityCheck_Response::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:CAccountHardware_VRCompatibilityCheck_Response.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay >*
CAccountHardware_VRCompatibilityCheck_Response::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:CAccountHardware_VRCompatibilityCheck_Response.components)
  return &components_;
}
inline const ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& CAccountHardware_VRCompatibilityCheck_Response::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay& CAccountHardware_VRCompatibilityCheck_Response::components(int index) const {
  // @@protoc_insertion_point(field_get:CAccountHardware_VRCompatibilityCheck_Response.components)
  return _internal_components(index);
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* CAccountHardware_VRCompatibilityCheck_Response::_internal_add_components() {
  return components_.Add();
}
inline ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* CAccountHardware_VRCompatibilityCheck_Response::add_components() {
  ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:CAccountHardware_VRCompatibilityCheck_Response.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay >&
CAccountHardware_VRCompatibilityCheck_Response::components() const {
  // @@protoc_insertion_point(field_list:CAccountHardware_VRCompatibilityCheck_Response.components)
  return components_;
}

// -------------------------------------------------------------------

// CAccountHardware_RegisterValveIndexComponent_Request

// optional string serial_number = 1;
inline bool CAccountHardware_RegisterValveIndexComponent_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterValveIndexComponent_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_RegisterValveIndexComponent_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
}

// optional string manufacturer_serial_number = 2;
inline bool CAccountHardware_RegisterValveIndexComponent_Request::_internal_has_manufacturer_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterValveIndexComponent_Request::has_manufacturer_serial_number() const {
  return _internal_has_manufacturer_serial_number();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::clear_manufacturer_serial_number() {
  manufacturer_serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::manufacturer_serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
  return _internal_manufacturer_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_RegisterValveIndexComponent_Request::set_manufacturer_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 manufacturer_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::mutable_manufacturer_serial_number() {
  std::string* _s = _internal_mutable_manufacturer_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
  return _s;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::_internal_manufacturer_serial_number() const {
  return manufacturer_serial_number_.Get();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::_internal_set_manufacturer_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  manufacturer_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::_internal_mutable_manufacturer_serial_number() {
  _has_bits_[0] |= 0x00000002u;
  return manufacturer_serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::release_manufacturer_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
  if (!_internal_has_manufacturer_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = manufacturer_serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::set_allocated_manufacturer_serial_number(std::string* manufacturer_serial_number) {
  if (manufacturer_serial_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  manufacturer_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer_serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
}

// optional string component_code = 3;
inline bool CAccountHardware_RegisterValveIndexComponent_Request::_internal_has_component_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterValveIndexComponent_Request::has_component_code() const {
  return _internal_has_component_code();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::clear_component_code() {
  component_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::component_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
  return _internal_component_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_RegisterValveIndexComponent_Request::set_component_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 component_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::mutable_component_code() {
  std::string* _s = _internal_mutable_component_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
  return _s;
}
inline const std::string& CAccountHardware_RegisterValveIndexComponent_Request::_internal_component_code() const {
  return component_code_.Get();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::_internal_set_component_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  component_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::_internal_mutable_component_code() {
  _has_bits_[0] |= 0x00000004u;
  return component_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_RegisterValveIndexComponent_Request::release_component_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
  if (!_internal_has_component_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = component_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::set_allocated_component_code(std::string* component_code) {
  if (component_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  component_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
}

// optional .EValveIndexComponent component_type = 4 [default = k_EValveIndexComponentUnknown];
inline bool CAccountHardware_RegisterValveIndexComponent_Request::_internal_has_component_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterValveIndexComponent_Request::has_component_type() const {
  return _internal_has_component_type();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::clear_component_type() {
  component_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EValveIndexComponent CAccountHardware_RegisterValveIndexComponent_Request::_internal_component_type() const {
  return static_cast< ::EValveIndexComponent >(component_type_);
}
inline ::EValveIndexComponent CAccountHardware_RegisterValveIndexComponent_Request::component_type() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterValveIndexComponent_Request.component_type)
  return _internal_component_type();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::_internal_set_component_type(::EValveIndexComponent value) {
  assert(::EValveIndexComponent_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  component_type_ = value;
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::set_component_type(::EValveIndexComponent value) {
  _internal_set_component_type(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterValveIndexComponent_Request.component_type)
}

// optional int32 estimated_time_registered = 5;
inline bool CAccountHardware_RegisterValveIndexComponent_Request::_internal_has_estimated_time_registered() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAccountHardware_RegisterValveIndexComponent_Request::has_estimated_time_registered() const {
  return _internal_has_estimated_time_registered();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::clear_estimated_time_registered() {
  estimated_time_registered_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CAccountHardware_RegisterValveIndexComponent_Request::_internal_estimated_time_registered() const {
  return estimated_time_registered_;
}
inline int32_t CAccountHardware_RegisterValveIndexComponent_Request::estimated_time_registered() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_RegisterValveIndexComponent_Request.estimated_time_registered)
  return _internal_estimated_time_registered();
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::_internal_set_estimated_time_registered(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  estimated_time_registered_ = value;
}
inline void CAccountHardware_RegisterValveIndexComponent_Request::set_estimated_time_registered(int32_t value) {
  _internal_set_estimated_time_registered(value);
  // @@protoc_insertion_point(field_set:CAccountHardware_RegisterValveIndexComponent_Request.estimated_time_registered)
}

// -------------------------------------------------------------------

// CAccountHardware_RegisterValveIndexComponent_Response

// -------------------------------------------------------------------

// CAccountHardware_GetSteamDeckComponents_Request

// optional string serial_number = 1;
inline bool CAccountHardware_GetSteamDeckComponents_Request::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_GetSteamDeckComponents_Request::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CAccountHardware_GetSteamDeckComponents_Request::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_GetSteamDeckComponents_Request::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
  return _s;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Request::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CAccountHardware_GetSteamDeckComponents_Request::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_GetSteamDeckComponents_Request::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CAccountHardware_GetSteamDeckComponents_Request::_internal_has_controller_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAccountHardware_GetSteamDeckComponents_Request::has_controller_code() const {
  return _internal_has_controller_code();
}
inline void CAccountHardware_GetSteamDeckComponents_Request::clear_controller_code() {
  controller_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
  return _internal_controller_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_GetSteamDeckComponents_Request::set_controller_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::mutable_controller_code() {
  std::string* _s = _internal_mutable_controller_code();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
  return _s;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Request::_internal_controller_code() const {
  return controller_code_.Get();
}
inline void CAccountHardware_GetSteamDeckComponents_Request::_internal_set_controller_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controller_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::_internal_mutable_controller_code() {
  _has_bits_[0] |= 0x00000002u;
  return controller_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
  if (!_internal_has_controller_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = controller_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_GetSteamDeckComponents_Request::set_allocated_controller_code(std::string* controller_code) {
  if (controller_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controller_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
}

// -------------------------------------------------------------------

// CAccountHardware_GetSteamDeckComponents_Response

// optional string json_components = 1;
inline bool CAccountHardware_GetSteamDeckComponents_Response::_internal_has_json_components() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAccountHardware_GetSteamDeckComponents_Response::has_json_components() const {
  return _internal_has_json_components();
}
inline void CAccountHardware_GetSteamDeckComponents_Response::clear_json_components() {
  json_components_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Response::json_components() const {
  // @@protoc_insertion_point(field_get:CAccountHardware_GetSteamDeckComponents_Response.json_components)
  return _internal_json_components();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAccountHardware_GetSteamDeckComponents_Response::set_json_components(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 json_components_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAccountHardware_GetSteamDeckComponents_Response.json_components)
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Response::mutable_json_components() {
  std::string* _s = _internal_mutable_json_components();
  // @@protoc_insertion_point(field_mutable:CAccountHardware_GetSteamDeckComponents_Response.json_components)
  return _s;
}
inline const std::string& CAccountHardware_GetSteamDeckComponents_Response::_internal_json_components() const {
  return json_components_.Get();
}
inline void CAccountHardware_GetSteamDeckComponents_Response::_internal_set_json_components(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_components_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Response::_internal_mutable_json_components() {
  _has_bits_[0] |= 0x00000001u;
  return json_components_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAccountHardware_GetSteamDeckComponents_Response::release_json_components() {
  // @@protoc_insertion_point(field_release:CAccountHardware_GetSteamDeckComponents_Response.json_components)
  if (!_internal_has_json_components()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = json_components_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_components_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_components_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAccountHardware_GetSteamDeckComponents_Response::set_allocated_json_components(std::string* json_components) {
  if (json_components != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_components_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_components,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_components_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_components_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAccountHardware_GetSteamDeckComponents_Response.json_components)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EValveIndexComponent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EValveIndexComponent>() {
  return ::EValveIndexComponent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5faccounthardware_2esteamclient_2eproto
