// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_econ.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fecon_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fecon_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fecon_2esteamclient_2eproto;
class CEconItem_Action;
struct CEconItem_ActionDefaultTypeInternal;
extern CEconItem_ActionDefaultTypeInternal _CEconItem_Action_default_instance_;
class CEconItem_Description;
struct CEconItem_DescriptionDefaultTypeInternal;
extern CEconItem_DescriptionDefaultTypeInternal _CEconItem_Description_default_instance_;
class CEconItem_DescriptionLine;
struct CEconItem_DescriptionLineDefaultTypeInternal;
extern CEconItem_DescriptionLineDefaultTypeInternal _CEconItem_DescriptionLine_default_instance_;
class CEconItem_Tag;
struct CEconItem_TagDefaultTypeInternal;
extern CEconItem_TagDefaultTypeInternal _CEconItem_Tag_default_instance_;
class CEcon_Asset;
struct CEcon_AssetDefaultTypeInternal;
extern CEcon_AssetDefaultTypeInternal _CEcon_Asset_default_instance_;
class CEcon_ClientGetItemShopOverlayAuthURL_Request;
struct CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal;
extern CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_;
class CEcon_ClientGetItemShopOverlayAuthURL_Response;
struct CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal;
extern CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_;
class CEcon_GetAssetClassInfo_Request;
struct CEcon_GetAssetClassInfo_RequestDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_RequestDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_default_instance_;
class CEcon_GetAssetClassInfo_Request_Class;
struct CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_Class_default_instance_;
class CEcon_GetAssetClassInfo_Response;
struct CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal;
extern CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal _CEcon_GetAssetClassInfo_Response_default_instance_;
class CEcon_GetInventoryItemsWithDescriptions_Request;
struct CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal;
extern CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Request_default_instance_;
class CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions;
struct CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal;
extern CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions_default_instance_;
class CEcon_GetInventoryItemsWithDescriptions_Response;
struct CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal;
extern CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Response_default_instance_;
class CEcon_GetTradeOfferAccessToken_Request;
struct CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal;
extern CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Request_default_instance_;
class CEcon_GetTradeOfferAccessToken_Response;
struct CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal;
extern CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CEconItem_Action* Arena::CreateMaybeMessage<::CEconItem_Action>(Arena*);
template<> ::CEconItem_Description* Arena::CreateMaybeMessage<::CEconItem_Description>(Arena*);
template<> ::CEconItem_DescriptionLine* Arena::CreateMaybeMessage<::CEconItem_DescriptionLine>(Arena*);
template<> ::CEconItem_Tag* Arena::CreateMaybeMessage<::CEconItem_Tag>(Arena*);
template<> ::CEcon_Asset* Arena::CreateMaybeMessage<::CEcon_Asset>(Arena*);
template<> ::CEcon_ClientGetItemShopOverlayAuthURL_Request* Arena::CreateMaybeMessage<::CEcon_ClientGetItemShopOverlayAuthURL_Request>(Arena*);
template<> ::CEcon_ClientGetItemShopOverlayAuthURL_Response* Arena::CreateMaybeMessage<::CEcon_ClientGetItemShopOverlayAuthURL_Response>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Request* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Request>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Request_Class* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Request_Class>(Arena*);
template<> ::CEcon_GetAssetClassInfo_Response* Arena::CreateMaybeMessage<::CEcon_GetAssetClassInfo_Response>(Arena*);
template<> ::CEcon_GetInventoryItemsWithDescriptions_Request* Arena::CreateMaybeMessage<::CEcon_GetInventoryItemsWithDescriptions_Request>(Arena*);
template<> ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* Arena::CreateMaybeMessage<::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions>(Arena*);
template<> ::CEcon_GetInventoryItemsWithDescriptions_Response* Arena::CreateMaybeMessage<::CEcon_GetInventoryItemsWithDescriptions_Response>(Arena*);
template<> ::CEcon_GetTradeOfferAccessToken_Request* Arena::CreateMaybeMessage<::CEcon_GetTradeOfferAccessToken_Request>(Arena*);
template<> ::CEcon_GetTradeOfferAccessToken_Response* Arena::CreateMaybeMessage<::CEcon_GetTradeOfferAccessToken_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions) */ {
 public:
  inline CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions() : CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(nullptr) {}
  ~CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions() override;
  explicit constexpr CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from);
  CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions&& from) noexcept
    : CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions() {
    *this = ::std::move(from);
  }

  inline CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& operator=(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& operator=(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions*>(
               &_CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& a, CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions";
  }
  protected:
  explicit CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetidsFieldNumber = 1,
    kCurrencyidsFieldNumber = 2,
    kTradableOnlyFieldNumber = 3,
    kMarketableOnlyFieldNumber = 4,
  };
  // repeated uint64 assetids = 1;
  int assetids_size() const;
  private:
  int _internal_assetids_size() const;
  public:
  void clear_assetids();
  private:
  uint64_t _internal_assetids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_assetids() const;
  void _internal_add_assetids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_assetids();
  public:
  uint64_t assetids(int index) const;
  void set_assetids(int index, uint64_t value);
  void add_assetids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      assetids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_assetids();

  // repeated uint32 currencyids = 2;
  int currencyids_size() const;
  private:
  int _internal_currencyids_size() const;
  public:
  void clear_currencyids();
  private:
  uint32_t _internal_currencyids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_currencyids() const;
  void _internal_add_currencyids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_currencyids();
  public:
  uint32_t currencyids(int index) const;
  void set_currencyids(int index, uint32_t value);
  void add_currencyids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      currencyids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_currencyids();

  // optional bool tradable_only = 3;
  bool has_tradable_only() const;
  private:
  bool _internal_has_tradable_only() const;
  public:
  void clear_tradable_only();
  bool tradable_only() const;
  void set_tradable_only(bool value);
  private:
  bool _internal_tradable_only() const;
  void _internal_set_tradable_only(bool value);
  public:

  // optional bool marketable_only = 4;
  bool has_marketable_only() const;
  private:
  bool _internal_has_marketable_only() const;
  public:
  void clear_marketable_only();
  bool marketable_only() const;
  void set_marketable_only(bool value);
  private:
  bool _internal_marketable_only() const;
  void _internal_set_marketable_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > assetids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > currencyids_;
  bool tradable_only_;
  bool marketable_only_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetInventoryItemsWithDescriptions_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetInventoryItemsWithDescriptions_Request) */ {
 public:
  inline CEcon_GetInventoryItemsWithDescriptions_Request() : CEcon_GetInventoryItemsWithDescriptions_Request(nullptr) {}
  ~CEcon_GetInventoryItemsWithDescriptions_Request() override;
  explicit constexpr CEcon_GetInventoryItemsWithDescriptions_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetInventoryItemsWithDescriptions_Request(const CEcon_GetInventoryItemsWithDescriptions_Request& from);
  CEcon_GetInventoryItemsWithDescriptions_Request(CEcon_GetInventoryItemsWithDescriptions_Request&& from) noexcept
    : CEcon_GetInventoryItemsWithDescriptions_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_GetInventoryItemsWithDescriptions_Request& operator=(const CEcon_GetInventoryItemsWithDescriptions_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetInventoryItemsWithDescriptions_Request& operator=(CEcon_GetInventoryItemsWithDescriptions_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetInventoryItemsWithDescriptions_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetInventoryItemsWithDescriptions_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetInventoryItemsWithDescriptions_Request*>(
               &_CEcon_GetInventoryItemsWithDescriptions_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CEcon_GetInventoryItemsWithDescriptions_Request& a, CEcon_GetInventoryItemsWithDescriptions_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetInventoryItemsWithDescriptions_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetInventoryItemsWithDescriptions_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetInventoryItemsWithDescriptions_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetInventoryItemsWithDescriptions_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetInventoryItemsWithDescriptions_Request";
  }
  protected:
  explicit CEcon_GetInventoryItemsWithDescriptions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions FilterOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 5,
    kFiltersFieldNumber = 6,
    kSteamidFieldNumber = 1,
    kContextidFieldNumber = 3,
    kAppidFieldNumber = 2,
    kGetDescriptionsFieldNumber = 4,
    kForTradeOfferVerificationFieldNumber = 10,
    kStartAssetidFieldNumber = 8,
    kCountFieldNumber = 9,
  };
  // optional string language = 5;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional .CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions filters = 6;
  bool has_filters() const;
  private:
  bool _internal_has_filters() const;
  public:
  void clear_filters();
  const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& filters() const;
  PROTOBUF_NODISCARD ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* release_filters();
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* mutable_filters();
  void set_allocated_filters(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* filters);
  private:
  const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& _internal_filters() const;
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* _internal_mutable_filters();
  public:
  void unsafe_arena_set_allocated_filters(
      ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* filters);
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* unsafe_arena_release_filters();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 contextid = 3;
  bool has_contextid() const;
  private:
  bool _internal_has_contextid() const;
  public:
  void clear_contextid();
  uint64_t contextid() const;
  void set_contextid(uint64_t value);
  private:
  uint64_t _internal_contextid() const;
  void _internal_set_contextid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool get_descriptions = 4;
  bool has_get_descriptions() const;
  private:
  bool _internal_has_get_descriptions() const;
  public:
  void clear_get_descriptions();
  bool get_descriptions() const;
  void set_get_descriptions(bool value);
  private:
  bool _internal_get_descriptions() const;
  void _internal_set_get_descriptions(bool value);
  public:

  // optional bool for_trade_offer_verification = 10;
  bool has_for_trade_offer_verification() const;
  private:
  bool _internal_has_for_trade_offer_verification() const;
  public:
  void clear_for_trade_offer_verification();
  bool for_trade_offer_verification() const;
  void set_for_trade_offer_verification(bool value);
  private:
  bool _internal_for_trade_offer_verification() const;
  void _internal_set_for_trade_offer_verification(bool value);
  public:

  // optional uint64 start_assetid = 8;
  bool has_start_assetid() const;
  private:
  bool _internal_has_start_assetid() const;
  public:
  void clear_start_assetid();
  uint64_t start_assetid() const;
  void set_start_assetid(uint64_t value);
  private:
  uint64_t _internal_start_assetid() const;
  void _internal_set_start_assetid(uint64_t value);
  public:

  // optional int32 count = 9;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetInventoryItemsWithDescriptions_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* filters_;
  uint64_t steamid_;
  uint64_t contextid_;
  uint32_t appid_;
  bool get_descriptions_;
  bool for_trade_offer_verification_;
  uint64_t start_assetid_;
  int32_t count_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_Asset) */ {
 public:
  inline CEcon_Asset() : CEcon_Asset(nullptr) {}
  ~CEcon_Asset() override;
  explicit constexpr CEcon_Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_Asset(const CEcon_Asset& from);
  CEcon_Asset(CEcon_Asset&& from) noexcept
    : CEcon_Asset() {
    *this = ::std::move(from);
  }

  inline CEcon_Asset& operator=(const CEcon_Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_Asset& operator=(CEcon_Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_Asset* internal_default_instance() {
    return reinterpret_cast<const CEcon_Asset*>(
               &_CEcon_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CEcon_Asset& a, CEcon_Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_Asset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_Asset";
  }
  protected:
  explicit CEcon_Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextidFieldNumber = 2,
    kAssetidFieldNumber = 3,
    kAppidFieldNumber = 1,
    kCurrencyidFieldNumber = 6,
    kClassidFieldNumber = 4,
    kInstanceidFieldNumber = 5,
    kAmountFieldNumber = 7,
    kEstUsdFieldNumber = 9,
    kMissingFieldNumber = 8,
  };
  // optional uint64 contextid = 2;
  bool has_contextid() const;
  private:
  bool _internal_has_contextid() const;
  public:
  void clear_contextid();
  uint64_t contextid() const;
  void set_contextid(uint64_t value);
  private:
  uint64_t _internal_contextid() const;
  void _internal_set_contextid(uint64_t value);
  public:

  // optional uint64 assetid = 3;
  bool has_assetid() const;
  private:
  bool _internal_has_assetid() const;
  public:
  void clear_assetid();
  uint64_t assetid() const;
  void set_assetid(uint64_t value);
  private:
  uint64_t _internal_assetid() const;
  void _internal_set_assetid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 currencyid = 6 [(.description) = "Set currencyid if it\'s a currency, assetid for an item"];
  bool has_currencyid() const;
  private:
  bool _internal_has_currencyid() const;
  public:
  void clear_currencyid();
  uint32_t currencyid() const;
  void set_currencyid(uint32_t value);
  private:
  uint32_t _internal_currencyid() const;
  void _internal_set_currencyid(uint32_t value);
  public:

  // optional uint64 classid = 4;
  bool has_classid() const;
  private:
  bool _internal_has_classid() const;
  public:
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // optional uint64 instanceid = 5;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // optional int64 amount = 7;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // optional int64 est_usd = 9;
  bool has_est_usd() const;
  private:
  bool _internal_has_est_usd() const;
  public:
  void clear_est_usd();
  int64_t est_usd() const;
  void set_est_usd(int64_t value);
  private:
  int64_t _internal_est_usd() const;
  void _internal_set_est_usd(int64_t value);
  public:

  // optional bool missing = 8;
  bool has_missing() const;
  private:
  bool _internal_has_missing() const;
  public:
  void clear_missing();
  bool missing() const;
  void set_missing(bool value);
  private:
  bool _internal_missing() const;
  void _internal_set_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t contextid_;
  uint64_t assetid_;
  uint32_t appid_;
  uint32_t currencyid_;
  uint64_t classid_;
  uint64_t instanceid_;
  int64_t amount_;
  int64_t est_usd_;
  bool missing_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEconItem_DescriptionLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItem_DescriptionLine) */ {
 public:
  inline CEconItem_DescriptionLine() : CEconItem_DescriptionLine(nullptr) {}
  ~CEconItem_DescriptionLine() override;
  explicit constexpr CEconItem_DescriptionLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItem_DescriptionLine(const CEconItem_DescriptionLine& from);
  CEconItem_DescriptionLine(CEconItem_DescriptionLine&& from) noexcept
    : CEconItem_DescriptionLine() {
    *this = ::std::move(from);
  }

  inline CEconItem_DescriptionLine& operator=(const CEconItem_DescriptionLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItem_DescriptionLine& operator=(CEconItem_DescriptionLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItem_DescriptionLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItem_DescriptionLine* internal_default_instance() {
    return reinterpret_cast<const CEconItem_DescriptionLine*>(
               &_CEconItem_DescriptionLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CEconItem_DescriptionLine& a, CEconItem_DescriptionLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItem_DescriptionLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItem_DescriptionLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEconItem_DescriptionLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEconItem_DescriptionLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItem_DescriptionLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItem_DescriptionLine& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_DescriptionLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItem_DescriptionLine";
  }
  protected:
  explicit CEconItem_DescriptionLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kColorFieldNumber = 3,
    kLabelFieldNumber = 4,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional string label = 4;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:CEconItem_DescriptionLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEconItem_Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItem_Action) */ {
 public:
  inline CEconItem_Action() : CEconItem_Action(nullptr) {}
  ~CEconItem_Action() override;
  explicit constexpr CEconItem_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItem_Action(const CEconItem_Action& from);
  CEconItem_Action(CEconItem_Action&& from) noexcept
    : CEconItem_Action() {
    *this = ::std::move(from);
  }

  inline CEconItem_Action& operator=(const CEconItem_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItem_Action& operator=(CEconItem_Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItem_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItem_Action* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Action*>(
               &_CEconItem_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CEconItem_Action& a, CEconItem_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItem_Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItem_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEconItem_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEconItem_Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItem_Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItem_Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItem_Action";
  }
  protected:
  explicit CEconItem_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // optional string link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const std::string& link() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_link(ArgT0&& arg0, ArgT... args);
  std::string* mutable_link();
  PROTOBUF_NODISCARD std::string* release_link();
  void set_allocated_link(std::string* link);
  private:
  const std::string& _internal_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link(const std::string& value);
  std::string* _internal_mutable_link();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:CEconItem_Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEconItem_Description final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItem_Description) */ {
 public:
  inline CEconItem_Description() : CEconItem_Description(nullptr) {}
  ~CEconItem_Description() override;
  explicit constexpr CEconItem_Description(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItem_Description(const CEconItem_Description& from);
  CEconItem_Description(CEconItem_Description&& from) noexcept
    : CEconItem_Description() {
    *this = ::std::move(from);
  }

  inline CEconItem_Description& operator=(const CEconItem_Description& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItem_Description& operator=(CEconItem_Description&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItem_Description& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItem_Description* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Description*>(
               &_CEconItem_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CEconItem_Description& a, CEconItem_Description& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItem_Description* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItem_Description* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEconItem_Description* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEconItem_Description>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItem_Description& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItem_Description& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Description* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItem_Description";
  }
  protected:
  explicit CEconItem_Description(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionsFieldNumber = 8,
    kActionsFieldNumber = 10,
    kOwnerDescriptionsFieldNumber = 11,
    kOwnerActionsFieldNumber = 12,
    kFraudwarningsFieldNumber = 13,
    kMarketActionsFieldNumber = 21,
    kTagsFieldNumber = 26,
    kBackgroundColorFieldNumber = 5,
    kIconUrlFieldNumber = 6,
    kIconUrlLargeFieldNumber = 7,
    kNameFieldNumber = 14,
    kNameColorFieldNumber = 15,
    kTypeFieldNumber = 16,
    kMarketNameFieldNumber = 17,
    kMarketHashNameFieldNumber = 18,
    kMarketFeeFieldNumber = 19,
    kItemExpirationFieldNumber = 27,
    kMarketBuyCountryRestrictionFieldNumber = 30,
    kMarketSellCountryRestrictionFieldNumber = 31,
    kContainedItemFieldNumber = 20,
    kClassidFieldNumber = 2,
    kInstanceidFieldNumber = 3,
    kAppidFieldNumber = 1,
    kCurrencyFieldNumber = 4,
    kTradableFieldNumber = 9,
    kCommodityFieldNumber = 22,
    kMarketableFieldNumber = 25,
    kMarketTradableRestrictionFieldNumber = 23,
    kMarketMarketableRestrictionFieldNumber = 24,
    kMarketFeeAppFieldNumber = 28,
  };
  // repeated .CEconItem_DescriptionLine descriptions = 8;
  int descriptions_size() const;
  private:
  int _internal_descriptions_size() const;
  public:
  void clear_descriptions();
  ::CEconItem_DescriptionLine* mutable_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >*
      mutable_descriptions();
  private:
  const ::CEconItem_DescriptionLine& _internal_descriptions(int index) const;
  ::CEconItem_DescriptionLine* _internal_add_descriptions();
  public:
  const ::CEconItem_DescriptionLine& descriptions(int index) const;
  ::CEconItem_DescriptionLine* add_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >&
      descriptions() const;

  // repeated .CEconItem_Action actions = 10;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::CEconItem_Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
      mutable_actions();
  private:
  const ::CEconItem_Action& _internal_actions(int index) const;
  ::CEconItem_Action* _internal_add_actions();
  public:
  const ::CEconItem_Action& actions(int index) const;
  ::CEconItem_Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
      actions() const;

  // repeated .CEconItem_DescriptionLine owner_descriptions = 11;
  int owner_descriptions_size() const;
  private:
  int _internal_owner_descriptions_size() const;
  public:
  void clear_owner_descriptions();
  ::CEconItem_DescriptionLine* mutable_owner_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >*
      mutable_owner_descriptions();
  private:
  const ::CEconItem_DescriptionLine& _internal_owner_descriptions(int index) const;
  ::CEconItem_DescriptionLine* _internal_add_owner_descriptions();
  public:
  const ::CEconItem_DescriptionLine& owner_descriptions(int index) const;
  ::CEconItem_DescriptionLine* add_owner_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >&
      owner_descriptions() const;

  // repeated .CEconItem_Action owner_actions = 12;
  int owner_actions_size() const;
  private:
  int _internal_owner_actions_size() const;
  public:
  void clear_owner_actions();
  ::CEconItem_Action* mutable_owner_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
      mutable_owner_actions();
  private:
  const ::CEconItem_Action& _internal_owner_actions(int index) const;
  ::CEconItem_Action* _internal_add_owner_actions();
  public:
  const ::CEconItem_Action& owner_actions(int index) const;
  ::CEconItem_Action* add_owner_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
      owner_actions() const;

  // repeated string fraudwarnings = 13;
  int fraudwarnings_size() const;
  private:
  int _internal_fraudwarnings_size() const;
  public:
  void clear_fraudwarnings();
  const std::string& fraudwarnings(int index) const;
  std::string* mutable_fraudwarnings(int index);
  void set_fraudwarnings(int index, const std::string& value);
  void set_fraudwarnings(int index, std::string&& value);
  void set_fraudwarnings(int index, const char* value);
  void set_fraudwarnings(int index, const char* value, size_t size);
  std::string* add_fraudwarnings();
  void add_fraudwarnings(const std::string& value);
  void add_fraudwarnings(std::string&& value);
  void add_fraudwarnings(const char* value);
  void add_fraudwarnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fraudwarnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fraudwarnings();
  private:
  const std::string& _internal_fraudwarnings(int index) const;
  std::string* _internal_add_fraudwarnings();
  public:

  // repeated .CEconItem_Action market_actions = 21;
  int market_actions_size() const;
  private:
  int _internal_market_actions_size() const;
  public:
  void clear_market_actions();
  ::CEconItem_Action* mutable_market_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
      mutable_market_actions();
  private:
  const ::CEconItem_Action& _internal_market_actions(int index) const;
  ::CEconItem_Action* _internal_add_market_actions();
  public:
  const ::CEconItem_Action& market_actions(int index) const;
  ::CEconItem_Action* add_market_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
      market_actions() const;

  // repeated .CEconItem_Tag tags = 26;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CEconItem_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Tag >*
      mutable_tags();
  private:
  const ::CEconItem_Tag& _internal_tags(int index) const;
  ::CEconItem_Tag* _internal_add_tags();
  public:
  const ::CEconItem_Tag& tags(int index) const;
  ::CEconItem_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Tag >&
      tags() const;

  // optional string background_color = 5;
  bool has_background_color() const;
  private:
  bool _internal_has_background_color() const;
  public:
  void clear_background_color();
  const std::string& background_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_background_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_background_color();
  PROTOBUF_NODISCARD std::string* release_background_color();
  void set_allocated_background_color(std::string* background_color);
  private:
  const std::string& _internal_background_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background_color(const std::string& value);
  std::string* _internal_mutable_background_color();
  public:

  // optional string icon_url = 6;
  bool has_icon_url() const;
  private:
  bool _internal_has_icon_url() const;
  public:
  void clear_icon_url();
  const std::string& icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);
  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(const std::string& value);
  std::string* _internal_mutable_icon_url();
  public:

  // optional string icon_url_large = 7;
  bool has_icon_url_large() const;
  private:
  bool _internal_has_icon_url_large() const;
  public:
  void clear_icon_url_large();
  const std::string& icon_url_large() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url_large(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url_large();
  PROTOBUF_NODISCARD std::string* release_icon_url_large();
  void set_allocated_icon_url_large(std::string* icon_url_large);
  private:
  const std::string& _internal_icon_url_large() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url_large(const std::string& value);
  std::string* _internal_mutable_icon_url_large();
  public:

  // optional string name = 14;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string name_color = 15;
  bool has_name_color() const;
  private:
  bool _internal_has_name_color() const;
  public:
  void clear_name_color();
  const std::string& name_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_color();
  PROTOBUF_NODISCARD std::string* release_name_color();
  void set_allocated_name_color(std::string* name_color);
  private:
  const std::string& _internal_name_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_color(const std::string& value);
  std::string* _internal_mutable_name_color();
  public:

  // optional string type = 16;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string market_name = 17;
  bool has_market_name() const;
  private:
  bool _internal_has_market_name() const;
  public:
  void clear_market_name();
  const std::string& market_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_name();
  PROTOBUF_NODISCARD std::string* release_market_name();
  void set_allocated_market_name(std::string* market_name);
  private:
  const std::string& _internal_market_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_name(const std::string& value);
  std::string* _internal_mutable_market_name();
  public:

  // optional string market_hash_name = 18;
  bool has_market_hash_name() const;
  private:
  bool _internal_has_market_hash_name() const;
  public:
  void clear_market_hash_name();
  const std::string& market_hash_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_hash_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_hash_name();
  PROTOBUF_NODISCARD std::string* release_market_hash_name();
  void set_allocated_market_hash_name(std::string* market_hash_name);
  private:
  const std::string& _internal_market_hash_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_hash_name(const std::string& value);
  std::string* _internal_mutable_market_hash_name();
  public:

  // optional string market_fee = 19;
  bool has_market_fee() const;
  private:
  bool _internal_has_market_fee() const;
  public:
  void clear_market_fee();
  const std::string& market_fee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_fee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_fee();
  PROTOBUF_NODISCARD std::string* release_market_fee();
  void set_allocated_market_fee(std::string* market_fee);
  private:
  const std::string& _internal_market_fee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_fee(const std::string& value);
  std::string* _internal_mutable_market_fee();
  public:

  // optional string item_expiration = 27;
  bool has_item_expiration() const;
  private:
  bool _internal_has_item_expiration() const;
  public:
  void clear_item_expiration();
  const std::string& item_expiration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_expiration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_expiration();
  PROTOBUF_NODISCARD std::string* release_item_expiration();
  void set_allocated_item_expiration(std::string* item_expiration);
  private:
  const std::string& _internal_item_expiration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_expiration(const std::string& value);
  std::string* _internal_mutable_item_expiration();
  public:

  // optional string market_buy_country_restriction = 30;
  bool has_market_buy_country_restriction() const;
  private:
  bool _internal_has_market_buy_country_restriction() const;
  public:
  void clear_market_buy_country_restriction();
  const std::string& market_buy_country_restriction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_buy_country_restriction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_buy_country_restriction();
  PROTOBUF_NODISCARD std::string* release_market_buy_country_restriction();
  void set_allocated_market_buy_country_restriction(std::string* market_buy_country_restriction);
  private:
  const std::string& _internal_market_buy_country_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_buy_country_restriction(const std::string& value);
  std::string* _internal_mutable_market_buy_country_restriction();
  public:

  // optional string market_sell_country_restriction = 31;
  bool has_market_sell_country_restriction() const;
  private:
  bool _internal_has_market_sell_country_restriction() const;
  public:
  void clear_market_sell_country_restriction();
  const std::string& market_sell_country_restriction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_sell_country_restriction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_sell_country_restriction();
  PROTOBUF_NODISCARD std::string* release_market_sell_country_restriction();
  void set_allocated_market_sell_country_restriction(std::string* market_sell_country_restriction);
  private:
  const std::string& _internal_market_sell_country_restriction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_sell_country_restriction(const std::string& value);
  std::string* _internal_mutable_market_sell_country_restriction();
  public:

  // optional .CEconItem_Description contained_item = 20;
  bool has_contained_item() const;
  private:
  bool _internal_has_contained_item() const;
  public:
  void clear_contained_item();
  const ::CEconItem_Description& contained_item() const;
  PROTOBUF_NODISCARD ::CEconItem_Description* release_contained_item();
  ::CEconItem_Description* mutable_contained_item();
  void set_allocated_contained_item(::CEconItem_Description* contained_item);
  private:
  const ::CEconItem_Description& _internal_contained_item() const;
  ::CEconItem_Description* _internal_mutable_contained_item();
  public:
  void unsafe_arena_set_allocated_contained_item(
      ::CEconItem_Description* contained_item);
  ::CEconItem_Description* unsafe_arena_release_contained_item();

  // optional uint64 classid = 2;
  bool has_classid() const;
  private:
  bool _internal_has_classid() const;
  public:
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // optional uint64 instanceid = 3;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // optional int32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // optional bool currency = 4;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  bool currency() const;
  void set_currency(bool value);
  private:
  bool _internal_currency() const;
  void _internal_set_currency(bool value);
  public:

  // optional bool tradable = 9;
  bool has_tradable() const;
  private:
  bool _internal_has_tradable() const;
  public:
  void clear_tradable();
  bool tradable() const;
  void set_tradable(bool value);
  private:
  bool _internal_tradable() const;
  void _internal_set_tradable(bool value);
  public:

  // optional bool commodity = 22;
  bool has_commodity() const;
  private:
  bool _internal_has_commodity() const;
  public:
  void clear_commodity();
  bool commodity() const;
  void set_commodity(bool value);
  private:
  bool _internal_commodity() const;
  void _internal_set_commodity(bool value);
  public:

  // optional bool marketable = 25;
  bool has_marketable() const;
  private:
  bool _internal_has_marketable() const;
  public:
  void clear_marketable();
  bool marketable() const;
  void set_marketable(bool value);
  private:
  bool _internal_marketable() const;
  void _internal_set_marketable(bool value);
  public:

  // optional int32 market_tradable_restriction = 23;
  bool has_market_tradable_restriction() const;
  private:
  bool _internal_has_market_tradable_restriction() const;
  public:
  void clear_market_tradable_restriction();
  int32_t market_tradable_restriction() const;
  void set_market_tradable_restriction(int32_t value);
  private:
  int32_t _internal_market_tradable_restriction() const;
  void _internal_set_market_tradable_restriction(int32_t value);
  public:

  // optional int32 market_marketable_restriction = 24;
  bool has_market_marketable_restriction() const;
  private:
  bool _internal_has_market_marketable_restriction() const;
  public:
  void clear_market_marketable_restriction();
  int32_t market_marketable_restriction() const;
  void set_market_marketable_restriction(int32_t value);
  private:
  int32_t _internal_market_marketable_restriction() const;
  void _internal_set_market_marketable_restriction(int32_t value);
  public:

  // optional int32 market_fee_app = 28;
  bool has_market_fee_app() const;
  private:
  bool _internal_has_market_fee_app() const;
  public:
  void clear_market_fee_app();
  int32_t market_fee_app() const;
  void set_market_fee_app(int32_t value);
  private:
  int32_t _internal_market_fee_app() const;
  void _internal_set_market_fee_app(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEconItem_Description)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine > descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine > owner_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action > owner_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fraudwarnings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action > market_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_large_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_hash_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_expiration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_buy_country_restriction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_sell_country_restriction_;
  ::CEconItem_Description* contained_item_;
  uint64_t classid_;
  uint64_t instanceid_;
  int32_t appid_;
  bool currency_;
  bool tradable_;
  bool commodity_;
  bool marketable_;
  int32_t market_tradable_restriction_;
  int32_t market_marketable_restriction_;
  int32_t market_fee_app_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEconItem_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItem_Tag) */ {
 public:
  inline CEconItem_Tag() : CEconItem_Tag(nullptr) {}
  ~CEconItem_Tag() override;
  explicit constexpr CEconItem_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItem_Tag(const CEconItem_Tag& from);
  CEconItem_Tag(CEconItem_Tag&& from) noexcept
    : CEconItem_Tag() {
    *this = ::std::move(from);
  }

  inline CEconItem_Tag& operator=(const CEconItem_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItem_Tag& operator=(CEconItem_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItem_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItem_Tag* internal_default_instance() {
    return reinterpret_cast<const CEconItem_Tag*>(
               &_CEconItem_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CEconItem_Tag& a, CEconItem_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItem_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItem_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEconItem_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEconItem_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItem_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItem_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItem_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItem_Tag";
  }
  protected:
  explicit CEconItem_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 2,
    kInternalNameFieldNumber = 3,
    kLocalizedCategoryNameFieldNumber = 4,
    kLocalizedTagNameFieldNumber = 5,
    kColorFieldNumber = 6,
    kAppidFieldNumber = 1,
  };
  // optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // optional string internal_name = 3 [(.description) = "The internal name of the tag"];
  bool has_internal_name() const;
  private:
  bool _internal_has_internal_name() const;
  public:
  void clear_internal_name();
  const std::string& internal_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_name();
  PROTOBUF_NODISCARD std::string* release_internal_name();
  void set_allocated_internal_name(std::string* internal_name);
  private:
  const std::string& _internal_internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_name(const std::string& value);
  std::string* _internal_mutable_internal_name();
  public:

  // optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
  bool has_localized_category_name() const;
  private:
  bool _internal_has_localized_category_name() const;
  public:
  void clear_localized_category_name();
  const std::string& localized_category_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_category_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_category_name();
  PROTOBUF_NODISCARD std::string* release_localized_category_name();
  void set_allocated_localized_category_name(std::string* localized_category_name);
  private:
  const std::string& _internal_localized_category_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_category_name(const std::string& value);
  std::string* _internal_mutable_localized_category_name();
  public:

  // optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
  bool has_localized_tag_name() const;
  private:
  bool _internal_has_localized_tag_name() const;
  public:
  void clear_localized_tag_name();
  const std::string& localized_tag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localized_tag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localized_tag_name();
  PROTOBUF_NODISCARD std::string* release_localized_tag_name();
  void set_allocated_localized_tag_name(std::string* localized_tag_name);
  private:
  const std::string& _internal_localized_tag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localized_tag_name(const std::string& value);
  std::string* _internal_mutable_localized_tag_name();
  public:

  // optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional uint32 appid = 1 [(.description) = "The app that contains the item"];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEconItem_Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_category_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_tag_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetInventoryItemsWithDescriptions_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetInventoryItemsWithDescriptions_Response) */ {
 public:
  inline CEcon_GetInventoryItemsWithDescriptions_Response() : CEcon_GetInventoryItemsWithDescriptions_Response(nullptr) {}
  ~CEcon_GetInventoryItemsWithDescriptions_Response() override;
  explicit constexpr CEcon_GetInventoryItemsWithDescriptions_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetInventoryItemsWithDescriptions_Response(const CEcon_GetInventoryItemsWithDescriptions_Response& from);
  CEcon_GetInventoryItemsWithDescriptions_Response(CEcon_GetInventoryItemsWithDescriptions_Response&& from) noexcept
    : CEcon_GetInventoryItemsWithDescriptions_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_GetInventoryItemsWithDescriptions_Response& operator=(const CEcon_GetInventoryItemsWithDescriptions_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetInventoryItemsWithDescriptions_Response& operator=(CEcon_GetInventoryItemsWithDescriptions_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetInventoryItemsWithDescriptions_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetInventoryItemsWithDescriptions_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetInventoryItemsWithDescriptions_Response*>(
               &_CEcon_GetInventoryItemsWithDescriptions_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CEcon_GetInventoryItemsWithDescriptions_Response& a, CEcon_GetInventoryItemsWithDescriptions_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetInventoryItemsWithDescriptions_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetInventoryItemsWithDescriptions_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetInventoryItemsWithDescriptions_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetInventoryItemsWithDescriptions_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetInventoryItemsWithDescriptions_Response";
  }
  protected:
  explicit CEcon_GetInventoryItemsWithDescriptions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
    kDescriptionsFieldNumber = 2,
    kMissingAssetsFieldNumber = 3,
    kLastAssetidFieldNumber = 5,
    kMoreItemsFieldNumber = 4,
    kTotalInventoryCountFieldNumber = 6,
  };
  // repeated .CEcon_Asset assets = 1;
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::CEcon_Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >*
      mutable_assets();
  private:
  const ::CEcon_Asset& _internal_assets(int index) const;
  ::CEcon_Asset* _internal_add_assets();
  public:
  const ::CEcon_Asset& assets(int index) const;
  ::CEcon_Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >&
      assets() const;

  // repeated .CEconItem_Description descriptions = 2;
  int descriptions_size() const;
  private:
  int _internal_descriptions_size() const;
  public:
  void clear_descriptions();
  ::CEconItem_Description* mutable_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >*
      mutable_descriptions();
  private:
  const ::CEconItem_Description& _internal_descriptions(int index) const;
  ::CEconItem_Description* _internal_add_descriptions();
  public:
  const ::CEconItem_Description& descriptions(int index) const;
  ::CEconItem_Description* add_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >&
      descriptions() const;

  // repeated .CEcon_Asset missing_assets = 3 [(.description) = "This list of assets in the original list we could not find in the users inventory"];
  int missing_assets_size() const;
  private:
  int _internal_missing_assets_size() const;
  public:
  void clear_missing_assets();
  ::CEcon_Asset* mutable_missing_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >*
      mutable_missing_assets();
  private:
  const ::CEcon_Asset& _internal_missing_assets(int index) const;
  ::CEcon_Asset* _internal_add_missing_assets();
  public:
  const ::CEcon_Asset& missing_assets(int index) const;
  ::CEcon_Asset* add_missing_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >&
      missing_assets() const;

  // optional uint64 last_assetid = 5;
  bool has_last_assetid() const;
  private:
  bool _internal_has_last_assetid() const;
  public:
  void clear_last_assetid();
  uint64_t last_assetid() const;
  void set_last_assetid(uint64_t value);
  private:
  uint64_t _internal_last_assetid() const;
  void _internal_set_last_assetid(uint64_t value);
  public:

  // optional bool more_items = 4;
  bool has_more_items() const;
  private:
  bool _internal_has_more_items() const;
  public:
  void clear_more_items();
  bool more_items() const;
  void set_more_items(bool value);
  private:
  bool _internal_more_items() const;
  void _internal_set_more_items(bool value);
  public:

  // optional uint32 total_inventory_count = 6;
  bool has_total_inventory_count() const;
  private:
  bool _internal_has_total_inventory_count() const;
  public:
  void clear_total_inventory_count();
  uint32_t total_inventory_count() const;
  void set_total_inventory_count(uint32_t value);
  private:
  uint32_t _internal_total_inventory_count() const;
  void _internal_set_total_inventory_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetInventoryItemsWithDescriptions_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset > assets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description > descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset > missing_assets_;
  uint64_t last_assetid_;
  bool more_items_;
  uint32_t total_inventory_count_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetTradeOfferAccessToken_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetTradeOfferAccessToken_Request) */ {
 public:
  inline CEcon_GetTradeOfferAccessToken_Request() : CEcon_GetTradeOfferAccessToken_Request(nullptr) {}
  ~CEcon_GetTradeOfferAccessToken_Request() override;
  explicit constexpr CEcon_GetTradeOfferAccessToken_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetTradeOfferAccessToken_Request(const CEcon_GetTradeOfferAccessToken_Request& from);
  CEcon_GetTradeOfferAccessToken_Request(CEcon_GetTradeOfferAccessToken_Request&& from) noexcept
    : CEcon_GetTradeOfferAccessToken_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_GetTradeOfferAccessToken_Request& operator=(const CEcon_GetTradeOfferAccessToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetTradeOfferAccessToken_Request& operator=(CEcon_GetTradeOfferAccessToken_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetTradeOfferAccessToken_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetTradeOfferAccessToken_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetTradeOfferAccessToken_Request*>(
               &_CEcon_GetTradeOfferAccessToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CEcon_GetTradeOfferAccessToken_Request& a, CEcon_GetTradeOfferAccessToken_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetTradeOfferAccessToken_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetTradeOfferAccessToken_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetTradeOfferAccessToken_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetTradeOfferAccessToken_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetTradeOfferAccessToken_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetTradeOfferAccessToken_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetTradeOfferAccessToken_Request";
  }
  protected:
  explicit CEcon_GetTradeOfferAccessToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateNewTokenFieldNumber = 1,
  };
  // optional bool generate_new_token = 1;
  bool has_generate_new_token() const;
  private:
  bool _internal_has_generate_new_token() const;
  public:
  void clear_generate_new_token();
  bool generate_new_token() const;
  void set_generate_new_token(bool value);
  private:
  bool _internal_generate_new_token() const;
  void _internal_set_generate_new_token(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetTradeOfferAccessToken_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool generate_new_token_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetTradeOfferAccessToken_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetTradeOfferAccessToken_Response) */ {
 public:
  inline CEcon_GetTradeOfferAccessToken_Response() : CEcon_GetTradeOfferAccessToken_Response(nullptr) {}
  ~CEcon_GetTradeOfferAccessToken_Response() override;
  explicit constexpr CEcon_GetTradeOfferAccessToken_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetTradeOfferAccessToken_Response(const CEcon_GetTradeOfferAccessToken_Response& from);
  CEcon_GetTradeOfferAccessToken_Response(CEcon_GetTradeOfferAccessToken_Response&& from) noexcept
    : CEcon_GetTradeOfferAccessToken_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_GetTradeOfferAccessToken_Response& operator=(const CEcon_GetTradeOfferAccessToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetTradeOfferAccessToken_Response& operator=(CEcon_GetTradeOfferAccessToken_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetTradeOfferAccessToken_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetTradeOfferAccessToken_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetTradeOfferAccessToken_Response*>(
               &_CEcon_GetTradeOfferAccessToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CEcon_GetTradeOfferAccessToken_Response& a, CEcon_GetTradeOfferAccessToken_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetTradeOfferAccessToken_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetTradeOfferAccessToken_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetTradeOfferAccessToken_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetTradeOfferAccessToken_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetTradeOfferAccessToken_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetTradeOfferAccessToken_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetTradeOfferAccessToken_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetTradeOfferAccessToken_Response";
  }
  protected:
  explicit CEcon_GetTradeOfferAccessToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeOfferAccessTokenFieldNumber = 1,
  };
  // optional string trade_offer_access_token = 1;
  bool has_trade_offer_access_token() const;
  private:
  bool _internal_has_trade_offer_access_token() const;
  public:
  void clear_trade_offer_access_token();
  const std::string& trade_offer_access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_offer_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_offer_access_token();
  PROTOBUF_NODISCARD std::string* release_trade_offer_access_token();
  void set_allocated_trade_offer_access_token(std::string* trade_offer_access_token);
  private:
  const std::string& _internal_trade_offer_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_offer_access_token(const std::string& value);
  std::string* _internal_mutable_trade_offer_access_token();
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetTradeOfferAccessToken_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_offer_access_token_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_ClientGetItemShopOverlayAuthURL_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_ClientGetItemShopOverlayAuthURL_Request) */ {
 public:
  inline CEcon_ClientGetItemShopOverlayAuthURL_Request() : CEcon_ClientGetItemShopOverlayAuthURL_Request(nullptr) {}
  ~CEcon_ClientGetItemShopOverlayAuthURL_Request() override;
  explicit constexpr CEcon_ClientGetItemShopOverlayAuthURL_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_ClientGetItemShopOverlayAuthURL_Request(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);
  CEcon_ClientGetItemShopOverlayAuthURL_Request(CEcon_ClientGetItemShopOverlayAuthURL_Request&& from) noexcept
    : CEcon_ClientGetItemShopOverlayAuthURL_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_ClientGetItemShopOverlayAuthURL_Request& operator=(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_ClientGetItemShopOverlayAuthURL_Request& operator=(CEcon_ClientGetItemShopOverlayAuthURL_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_ClientGetItemShopOverlayAuthURL_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_ClientGetItemShopOverlayAuthURL_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Request*>(
               &_CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CEcon_ClientGetItemShopOverlayAuthURL_Request& a, CEcon_ClientGetItemShopOverlayAuthURL_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_ClientGetItemShopOverlayAuthURL_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_ClientGetItemShopOverlayAuthURL_Request";
  }
  protected:
  explicit CEcon_ClientGetItemShopOverlayAuthURL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnUrlFieldNumber = 1,
  };
  // optional string return_url = 1;
  bool has_return_url() const;
  private:
  bool _internal_has_return_url() const;
  public:
  void clear_return_url();
  const std::string& return_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_return_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_return_url();
  PROTOBUF_NODISCARD std::string* release_return_url();
  void set_allocated_return_url(std::string* return_url);
  private:
  const std::string& _internal_return_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_return_url(const std::string& value);
  std::string* _internal_mutable_return_url();
  public:

  // @@protoc_insertion_point(class_scope:CEcon_ClientGetItemShopOverlayAuthURL_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_url_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_ClientGetItemShopOverlayAuthURL_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_ClientGetItemShopOverlayAuthURL_Response) */ {
 public:
  inline CEcon_ClientGetItemShopOverlayAuthURL_Response() : CEcon_ClientGetItemShopOverlayAuthURL_Response(nullptr) {}
  ~CEcon_ClientGetItemShopOverlayAuthURL_Response() override;
  explicit constexpr CEcon_ClientGetItemShopOverlayAuthURL_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_ClientGetItemShopOverlayAuthURL_Response(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);
  CEcon_ClientGetItemShopOverlayAuthURL_Response(CEcon_ClientGetItemShopOverlayAuthURL_Response&& from) noexcept
    : CEcon_ClientGetItemShopOverlayAuthURL_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_ClientGetItemShopOverlayAuthURL_Response& operator=(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_ClientGetItemShopOverlayAuthURL_Response& operator=(CEcon_ClientGetItemShopOverlayAuthURL_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_ClientGetItemShopOverlayAuthURL_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_ClientGetItemShopOverlayAuthURL_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Response*>(
               &_CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CEcon_ClientGetItemShopOverlayAuthURL_Response& a, CEcon_ClientGetItemShopOverlayAuthURL_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_ClientGetItemShopOverlayAuthURL_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_ClientGetItemShopOverlayAuthURL_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_ClientGetItemShopOverlayAuthURL_Response";
  }
  protected:
  explicit CEcon_ClientGetItemShopOverlayAuthURL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:CEcon_ClientGetItemShopOverlayAuthURL_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Request_Class final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Request.Class) */ {
 public:
  inline CEcon_GetAssetClassInfo_Request_Class() : CEcon_GetAssetClassInfo_Request_Class(nullptr) {}
  ~CEcon_GetAssetClassInfo_Request_Class() override;
  explicit constexpr CEcon_GetAssetClassInfo_Request_Class(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetAssetClassInfo_Request_Class(const CEcon_GetAssetClassInfo_Request_Class& from);
  CEcon_GetAssetClassInfo_Request_Class(CEcon_GetAssetClassInfo_Request_Class&& from) noexcept
    : CEcon_GetAssetClassInfo_Request_Class() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Request_Class& operator=(const CEcon_GetAssetClassInfo_Request_Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetAssetClassInfo_Request_Class& operator=(CEcon_GetAssetClassInfo_Request_Class&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetAssetClassInfo_Request_Class& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetAssetClassInfo_Request_Class* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Request_Class*>(
               &_CEcon_GetAssetClassInfo_Request_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CEcon_GetAssetClassInfo_Request_Class& a, CEcon_GetAssetClassInfo_Request_Class& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetAssetClassInfo_Request_Class* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetAssetClassInfo_Request_Class* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetAssetClassInfo_Request_Class* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request_Class>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetAssetClassInfo_Request_Class& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetAssetClassInfo_Request_Class& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Request_Class* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetAssetClassInfo_Request.Class";
  }
  protected:
  explicit CEcon_GetAssetClassInfo_Request_Class(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassidFieldNumber = 1,
    kInstanceidFieldNumber = 2,
  };
  // optional uint64 classid = 1;
  bool has_classid() const;
  private:
  bool _internal_has_classid() const;
  public:
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // optional uint64 instanceid = 2;
  bool has_instanceid() const;
  private:
  bool _internal_has_instanceid() const;
  public:
  void clear_instanceid();
  uint64_t instanceid() const;
  void set_instanceid(uint64_t value);
  private:
  uint64_t _internal_instanceid() const;
  void _internal_set_instanceid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Request.Class)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t classid_;
  uint64_t instanceid_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Request) */ {
 public:
  inline CEcon_GetAssetClassInfo_Request() : CEcon_GetAssetClassInfo_Request(nullptr) {}
  ~CEcon_GetAssetClassInfo_Request() override;
  explicit constexpr CEcon_GetAssetClassInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetAssetClassInfo_Request(const CEcon_GetAssetClassInfo_Request& from);
  CEcon_GetAssetClassInfo_Request(CEcon_GetAssetClassInfo_Request&& from) noexcept
    : CEcon_GetAssetClassInfo_Request() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Request& operator=(const CEcon_GetAssetClassInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetAssetClassInfo_Request& operator=(CEcon_GetAssetClassInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetAssetClassInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetAssetClassInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Request*>(
               &_CEcon_GetAssetClassInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CEcon_GetAssetClassInfo_Request& a, CEcon_GetAssetClassInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetAssetClassInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetAssetClassInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetAssetClassInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetAssetClassInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetAssetClassInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetAssetClassInfo_Request";
  }
  protected:
  explicit CEcon_GetAssetClassInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CEcon_GetAssetClassInfo_Request_Class Class;

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 3,
    kLanguageFieldNumber = 1,
    kAppidFieldNumber = 2,
    kHighPriFieldNumber = 4,
  };
  // repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::CEcon_GetAssetClassInfo_Request_Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >*
      mutable_classes();
  private:
  const ::CEcon_GetAssetClassInfo_Request_Class& _internal_classes(int index) const;
  ::CEcon_GetAssetClassInfo_Request_Class* _internal_add_classes();
  public:
  const ::CEcon_GetAssetClassInfo_Request_Class& classes(int index) const;
  ::CEcon_GetAssetClassInfo_Request_Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >&
      classes() const;

  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool high_pri = 4;
  bool has_high_pri() const;
  private:
  bool _internal_has_high_pri() const;
  public:
  void clear_high_pri();
  bool high_pri() const;
  void set_high_pri(bool value);
  private:
  bool _internal_high_pri() const;
  void _internal_set_high_pri(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class > classes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  uint32_t appid_;
  bool high_pri_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CEcon_GetAssetClassInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEcon_GetAssetClassInfo_Response) */ {
 public:
  inline CEcon_GetAssetClassInfo_Response() : CEcon_GetAssetClassInfo_Response(nullptr) {}
  ~CEcon_GetAssetClassInfo_Response() override;
  explicit constexpr CEcon_GetAssetClassInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEcon_GetAssetClassInfo_Response(const CEcon_GetAssetClassInfo_Response& from);
  CEcon_GetAssetClassInfo_Response(CEcon_GetAssetClassInfo_Response&& from) noexcept
    : CEcon_GetAssetClassInfo_Response() {
    *this = ::std::move(from);
  }

  inline CEcon_GetAssetClassInfo_Response& operator=(const CEcon_GetAssetClassInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEcon_GetAssetClassInfo_Response& operator=(CEcon_GetAssetClassInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEcon_GetAssetClassInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEcon_GetAssetClassInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CEcon_GetAssetClassInfo_Response*>(
               &_CEcon_GetAssetClassInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CEcon_GetAssetClassInfo_Response& a, CEcon_GetAssetClassInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CEcon_GetAssetClassInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEcon_GetAssetClassInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CEcon_GetAssetClassInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CEcon_GetAssetClassInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEcon_GetAssetClassInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEcon_GetAssetClassInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEcon_GetAssetClassInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEcon_GetAssetClassInfo_Response";
  }
  protected:
  explicit CEcon_GetAssetClassInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionsFieldNumber = 1,
  };
  // repeated .CEconItem_Description descriptions = 1;
  int descriptions_size() const;
  private:
  int _internal_descriptions_size() const;
  public:
  void clear_descriptions();
  ::CEconItem_Description* mutable_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >*
      mutable_descriptions();
  private:
  const ::CEconItem_Description& _internal_descriptions(int index) const;
  ::CEconItem_Description* _internal_add_descriptions();
  public:
  const ::CEconItem_Description& descriptions(int index) const;
  ::CEconItem_Description* add_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >&
      descriptions() const;

  // @@protoc_insertion_point(class_scope:CEcon_GetAssetClassInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description > descriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fecon_2esteamclient_2eproto;
};
// ===================================================================

class Econ_Stub;

class Econ : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Econ() {};
 public:
  virtual ~Econ();

  typedef Econ_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetInventoryItemsWithDescriptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetInventoryItemsWithDescriptions_Request* request,
                       ::CEcon_GetInventoryItemsWithDescriptions_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTradeOfferAccessToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetTradeOfferAccessToken_Request* request,
                       ::CEcon_GetTradeOfferAccessToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetItemShopOverlayAuthURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_ClientGetItemShopOverlayAuthURL_Request* request,
                       ::CEcon_ClientGetItemShopOverlayAuthURL_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAssetClassInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetAssetClassInfo_Request* request,
                       ::CEcon_GetAssetClassInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Econ);
};

class Econ_Stub : public Econ {
 public:
  Econ_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Econ_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Econ_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Econ ------------------------------------------

  void GetInventoryItemsWithDescriptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetInventoryItemsWithDescriptions_Request* request,
                       ::CEcon_GetInventoryItemsWithDescriptions_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTradeOfferAccessToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetTradeOfferAccessToken_Request* request,
                       ::CEcon_GetTradeOfferAccessToken_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetItemShopOverlayAuthURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_ClientGetItemShopOverlayAuthURL_Request* request,
                       ::CEcon_ClientGetItemShopOverlayAuthURL_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAssetClassInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CEcon_GetAssetClassInfo_Request* request,
                       ::CEcon_GetAssetClassInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Econ_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions

// repeated uint64 assetids = 1;
inline int CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_assetids_size() const {
  return assetids_.size();
}
inline int CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::assetids_size() const {
  return _internal_assetids_size();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::clear_assetids() {
  assetids_.Clear();
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_assetids(int index) const {
  return assetids_.Get(index);
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::assetids(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.assetids)
  return _internal_assetids(index);
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::set_assetids(int index, uint64_t value) {
  assetids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.assetids)
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_add_assetids(uint64_t value) {
  assetids_.Add(value);
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::add_assetids(uint64_t value) {
  _internal_add_assetids(value);
  // @@protoc_insertion_point(field_add:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.assetids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_assetids() const {
  return assetids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::assetids() const {
  // @@protoc_insertion_point(field_list:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.assetids)
  return _internal_assetids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_mutable_assetids() {
  return &assetids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::mutable_assetids() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.assetids)
  return _internal_mutable_assetids();
}

// repeated uint32 currencyids = 2;
inline int CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_currencyids_size() const {
  return currencyids_.size();
}
inline int CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::currencyids_size() const {
  return _internal_currencyids_size();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::clear_currencyids() {
  currencyids_.Clear();
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_currencyids(int index) const {
  return currencyids_.Get(index);
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::currencyids(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.currencyids)
  return _internal_currencyids(index);
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::set_currencyids(int index, uint32_t value) {
  currencyids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.currencyids)
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_add_currencyids(uint32_t value) {
  currencyids_.Add(value);
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::add_currencyids(uint32_t value) {
  _internal_add_currencyids(value);
  // @@protoc_insertion_point(field_add:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.currencyids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_currencyids() const {
  return currencyids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::currencyids() const {
  // @@protoc_insertion_point(field_list:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.currencyids)
  return _internal_currencyids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_mutable_currencyids() {
  return &currencyids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::mutable_currencyids() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.currencyids)
  return _internal_mutable_currencyids();
}

// optional bool tradable_only = 3;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_has_tradable_only() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::has_tradable_only() const {
  return _internal_has_tradable_only();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::clear_tradable_only() {
  tradable_only_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_tradable_only() const {
  return tradable_only_;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::tradable_only() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.tradable_only)
  return _internal_tradable_only();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_set_tradable_only(bool value) {
  _has_bits_[0] |= 0x00000001u;
  tradable_only_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::set_tradable_only(bool value) {
  _internal_set_tradable_only(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.tradable_only)
}

// optional bool marketable_only = 4;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_has_marketable_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::has_marketable_only() const {
  return _internal_has_marketable_only();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::clear_marketable_only() {
  marketable_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_marketable_only() const {
  return marketable_only_;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::marketable_only() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.marketable_only)
  return _internal_marketable_only();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_internal_set_marketable_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  marketable_only_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::set_marketable_only(bool value) {
  _internal_set_marketable_only(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions.marketable_only)
}

// -------------------------------------------------------------------

// CEcon_GetInventoryItemsWithDescriptions_Request

// optional fixed64 steamid = 1;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.steamid)
  return _internal_steamid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.steamid)
}

// optional uint32 appid = 2;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Request::appid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.appid)
  return _internal_appid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.appid)
}

// optional uint64 contextid = 3;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_contextid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_contextid() const {
  return _internal_has_contextid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_contextid() {
  contextid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::_internal_contextid() const {
  return contextid_;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::contextid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.contextid)
  return _internal_contextid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_contextid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  contextid_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_contextid(uint64_t value) {
  _internal_set_contextid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.contextid)
}

// optional bool get_descriptions = 4;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_get_descriptions() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_get_descriptions() const {
  return _internal_has_get_descriptions();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_get_descriptions() {
  get_descriptions_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_get_descriptions() const {
  return get_descriptions_;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::get_descriptions() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.get_descriptions)
  return _internal_get_descriptions();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_get_descriptions(bool value) {
  _has_bits_[0] |= 0x00000020u;
  get_descriptions_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_get_descriptions(bool value) {
  _internal_set_get_descriptions(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.get_descriptions)
}

// optional bool for_trade_offer_verification = 10;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_for_trade_offer_verification() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_for_trade_offer_verification() const {
  return _internal_has_for_trade_offer_verification();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_for_trade_offer_verification() {
  for_trade_offer_verification_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_for_trade_offer_verification() const {
  return for_trade_offer_verification_;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::for_trade_offer_verification() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.for_trade_offer_verification)
  return _internal_for_trade_offer_verification();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_for_trade_offer_verification(bool value) {
  _has_bits_[0] |= 0x00000040u;
  for_trade_offer_verification_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_for_trade_offer_verification(bool value) {
  _internal_set_for_trade_offer_verification(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.for_trade_offer_verification)
}

// optional string language = 5;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_language() const {
  return _internal_has_language();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEcon_GetInventoryItemsWithDescriptions_Request::language() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEcon_GetInventoryItemsWithDescriptions_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.language)
}
inline std::string* CEcon_GetInventoryItemsWithDescriptions_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CEcon_GetInventoryItemsWithDescriptions_Request.language)
  return _s;
}
inline const std::string& CEcon_GetInventoryItemsWithDescriptions_Request::_internal_language() const {
  return language_.Get();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEcon_GetInventoryItemsWithDescriptions_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEcon_GetInventoryItemsWithDescriptions_Request::release_language() {
  // @@protoc_insertion_point(field_release:CEcon_GetInventoryItemsWithDescriptions_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetInventoryItemsWithDescriptions_Request.language)
}

// optional .CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions filters = 6;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_filters() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || filters_ != nullptr);
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_filters() const {
  return _internal_has_filters();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_filters() {
  if (filters_ != nullptr) filters_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& CEcon_GetInventoryItemsWithDescriptions_Request::_internal_filters() const {
  const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* p = filters_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions&>(
      ::_CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions_default_instance_);
}
inline const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& CEcon_GetInventoryItemsWithDescriptions_Request::filters() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.filters)
  return _internal_filters();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::unsafe_arena_set_allocated_filters(
    ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* filters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filters_);
  }
  filters_ = filters;
  if (filters) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CEcon_GetInventoryItemsWithDescriptions_Request.filters)
}
inline ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* CEcon_GetInventoryItemsWithDescriptions_Request::release_filters() {
  _has_bits_[0] &= ~0x00000002u;
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* temp = filters_;
  filters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* CEcon_GetInventoryItemsWithDescriptions_Request::unsafe_arena_release_filters() {
  // @@protoc_insertion_point(field_release:CEcon_GetInventoryItemsWithDescriptions_Request.filters)
  _has_bits_[0] &= ~0x00000002u;
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* temp = filters_;
  filters_ = nullptr;
  return temp;
}
inline ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* CEcon_GetInventoryItemsWithDescriptions_Request::_internal_mutable_filters() {
  _has_bits_[0] |= 0x00000002u;
  if (filters_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions>(GetArenaForAllocation());
    filters_ = p;
  }
  return filters_;
}
inline ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* CEcon_GetInventoryItemsWithDescriptions_Request::mutable_filters() {
  ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* _msg = _internal_mutable_filters();
  // @@protoc_insertion_point(field_mutable:CEcon_GetInventoryItemsWithDescriptions_Request.filters)
  return _msg;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_allocated_filters(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* filters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filters_;
  }
  if (filters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions>::GetOwningArena(filters);
    if (message_arena != submessage_arena) {
      filters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filters_ = filters;
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetInventoryItemsWithDescriptions_Request.filters)
}

// optional uint64 start_assetid = 8;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_start_assetid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_start_assetid() const {
  return _internal_has_start_assetid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_start_assetid() {
  start_assetid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::_internal_start_assetid() const {
  return start_assetid_;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Request::start_assetid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.start_assetid)
  return _internal_start_assetid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_start_assetid(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  start_assetid_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_start_assetid(uint64_t value) {
  _internal_set_start_assetid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.start_assetid)
}

// optional int32 count = 9;
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Request::has_count() const {
  return _internal_has_count();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CEcon_GetInventoryItemsWithDescriptions_Request::_internal_count() const {
  return count_;
}
inline int32_t CEcon_GetInventoryItemsWithDescriptions_Request::count() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Request.count)
  return _internal_count();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  count_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Request::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Request.count)
}

// -------------------------------------------------------------------

// CEcon_Asset

// optional uint32 appid = 1;
inline bool CEcon_Asset::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEcon_Asset::has_appid() const {
  return _internal_has_appid();
}
inline void CEcon_Asset::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CEcon_Asset::_internal_appid() const {
  return appid_;
}
inline uint32_t CEcon_Asset::appid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.appid)
  return _internal_appid();
}
inline void CEcon_Asset::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CEcon_Asset::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.appid)
}

// optional uint64 contextid = 2;
inline bool CEcon_Asset::_internal_has_contextid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_Asset::has_contextid() const {
  return _internal_has_contextid();
}
inline void CEcon_Asset::clear_contextid() {
  contextid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CEcon_Asset::_internal_contextid() const {
  return contextid_;
}
inline uint64_t CEcon_Asset::contextid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.contextid)
  return _internal_contextid();
}
inline void CEcon_Asset::_internal_set_contextid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  contextid_ = value;
}
inline void CEcon_Asset::set_contextid(uint64_t value) {
  _internal_set_contextid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.contextid)
}

// optional uint64 assetid = 3;
inline bool CEcon_Asset::_internal_has_assetid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEcon_Asset::has_assetid() const {
  return _internal_has_assetid();
}
inline void CEcon_Asset::clear_assetid() {
  assetid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CEcon_Asset::_internal_assetid() const {
  return assetid_;
}
inline uint64_t CEcon_Asset::assetid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.assetid)
  return _internal_assetid();
}
inline void CEcon_Asset::_internal_set_assetid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  assetid_ = value;
}
inline void CEcon_Asset::set_assetid(uint64_t value) {
  _internal_set_assetid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.assetid)
}

// optional uint64 classid = 4;
inline bool CEcon_Asset::_internal_has_classid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEcon_Asset::has_classid() const {
  return _internal_has_classid();
}
inline void CEcon_Asset::clear_classid() {
  classid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CEcon_Asset::_internal_classid() const {
  return classid_;
}
inline uint64_t CEcon_Asset::classid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.classid)
  return _internal_classid();
}
inline void CEcon_Asset::_internal_set_classid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  classid_ = value;
}
inline void CEcon_Asset::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.classid)
}

// optional uint64 instanceid = 5;
inline bool CEcon_Asset::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEcon_Asset::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CEcon_Asset::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CEcon_Asset::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CEcon_Asset::instanceid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.instanceid)
  return _internal_instanceid();
}
inline void CEcon_Asset::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  instanceid_ = value;
}
inline void CEcon_Asset::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.instanceid)
}

// optional uint32 currencyid = 6 [(.description) = "Set currencyid if it\'s a currency, assetid for an item"];
inline bool CEcon_Asset::_internal_has_currencyid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEcon_Asset::has_currencyid() const {
  return _internal_has_currencyid();
}
inline void CEcon_Asset::clear_currencyid() {
  currencyid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CEcon_Asset::_internal_currencyid() const {
  return currencyid_;
}
inline uint32_t CEcon_Asset::currencyid() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.currencyid)
  return _internal_currencyid();
}
inline void CEcon_Asset::_internal_set_currencyid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  currencyid_ = value;
}
inline void CEcon_Asset::set_currencyid(uint32_t value) {
  _internal_set_currencyid(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.currencyid)
}

// optional int64 amount = 7;
inline bool CEcon_Asset::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CEcon_Asset::has_amount() const {
  return _internal_has_amount();
}
inline void CEcon_Asset::clear_amount() {
  amount_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t CEcon_Asset::_internal_amount() const {
  return amount_;
}
inline int64_t CEcon_Asset::amount() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.amount)
  return _internal_amount();
}
inline void CEcon_Asset::_internal_set_amount(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  amount_ = value;
}
inline void CEcon_Asset::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.amount)
}

// optional bool missing = 8;
inline bool CEcon_Asset::_internal_has_missing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CEcon_Asset::has_missing() const {
  return _internal_has_missing();
}
inline void CEcon_Asset::clear_missing() {
  missing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CEcon_Asset::_internal_missing() const {
  return missing_;
}
inline bool CEcon_Asset::missing() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.missing)
  return _internal_missing();
}
inline void CEcon_Asset::_internal_set_missing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  missing_ = value;
}
inline void CEcon_Asset::set_missing(bool value) {
  _internal_set_missing(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.missing)
}

// optional int64 est_usd = 9;
inline bool CEcon_Asset::_internal_has_est_usd() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CEcon_Asset::has_est_usd() const {
  return _internal_has_est_usd();
}
inline void CEcon_Asset::clear_est_usd() {
  est_usd_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t CEcon_Asset::_internal_est_usd() const {
  return est_usd_;
}
inline int64_t CEcon_Asset::est_usd() const {
  // @@protoc_insertion_point(field_get:CEcon_Asset.est_usd)
  return _internal_est_usd();
}
inline void CEcon_Asset::_internal_set_est_usd(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  est_usd_ = value;
}
inline void CEcon_Asset::set_est_usd(int64_t value) {
  _internal_set_est_usd(value);
  // @@protoc_insertion_point(field_set:CEcon_Asset.est_usd)
}

// -------------------------------------------------------------------

// CEconItem_DescriptionLine

// optional string type = 1;
inline bool CEconItem_DescriptionLine::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItem_DescriptionLine::has_type() const {
  return _internal_has_type();
}
inline void CEconItem_DescriptionLine::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEconItem_DescriptionLine::type() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_DescriptionLine::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.type)
}
inline std::string* CEconItem_DescriptionLine::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.type)
  return _s;
}
inline const std::string& CEconItem_DescriptionLine::_internal_type() const {
  return type_.Get();
}
inline void CEconItem_DescriptionLine::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::release_type() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_DescriptionLine::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.type)
}

// optional string value = 2;
inline bool CEconItem_DescriptionLine::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItem_DescriptionLine::has_value() const {
  return _internal_has_value();
}
inline void CEconItem_DescriptionLine::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CEconItem_DescriptionLine::value() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_DescriptionLine::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.value)
}
inline std::string* CEconItem_DescriptionLine::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.value)
  return _s;
}
inline const std::string& CEconItem_DescriptionLine::_internal_value() const {
  return value_.Get();
}
inline void CEconItem_DescriptionLine::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::release_value() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_DescriptionLine::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.value)
}

// optional string color = 3;
inline bool CEconItem_DescriptionLine::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEconItem_DescriptionLine::has_color() const {
  return _internal_has_color();
}
inline void CEconItem_DescriptionLine::clear_color() {
  color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CEconItem_DescriptionLine::color() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_DescriptionLine::set_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.color)
}
inline std::string* CEconItem_DescriptionLine::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.color)
  return _s;
}
inline const std::string& CEconItem_DescriptionLine::_internal_color() const {
  return color_.Get();
}
inline void CEconItem_DescriptionLine::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000004u;
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::release_color() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_DescriptionLine::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.color)
}

// optional string label = 4;
inline bool CEconItem_DescriptionLine::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEconItem_DescriptionLine::has_label() const {
  return _internal_has_label();
}
inline void CEconItem_DescriptionLine::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CEconItem_DescriptionLine::label() const {
  // @@protoc_insertion_point(field_get:CEconItem_DescriptionLine.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_DescriptionLine::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_DescriptionLine.label)
}
inline std::string* CEconItem_DescriptionLine::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:CEconItem_DescriptionLine.label)
  return _s;
}
inline const std::string& CEconItem_DescriptionLine::_internal_label() const {
  return label_.Get();
}
inline void CEconItem_DescriptionLine::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000008u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_DescriptionLine::release_label() {
  // @@protoc_insertion_point(field_release:CEconItem_DescriptionLine.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_DescriptionLine::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_DescriptionLine.label)
}

// -------------------------------------------------------------------

// CEconItem_Action

// optional string link = 1;
inline bool CEconItem_Action::_internal_has_link() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItem_Action::has_link() const {
  return _internal_has_link();
}
inline void CEconItem_Action::clear_link() {
  link_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEconItem_Action::link() const {
  // @@protoc_insertion_point(field_get:CEconItem_Action.link)
  return _internal_link();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Action::set_link(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Action.link)
}
inline std::string* CEconItem_Action::mutable_link() {
  std::string* _s = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:CEconItem_Action.link)
  return _s;
}
inline const std::string& CEconItem_Action::_internal_link() const {
  return link_.Get();
}
inline void CEconItem_Action::_internal_set_link(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Action::_internal_mutable_link() {
  _has_bits_[0] |= 0x00000001u;
  return link_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Action::release_link() {
  // @@protoc_insertion_point(field_release:CEconItem_Action.link)
  if (!_internal_has_link()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = link_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Action::set_allocated_link(std::string* link) {
  if (link != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  link_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (link_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Action.link)
}

// optional string name = 2;
inline bool CEconItem_Action::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItem_Action::has_name() const {
  return _internal_has_name();
}
inline void CEconItem_Action::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CEconItem_Action::name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Action.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Action::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Action.name)
}
inline std::string* CEconItem_Action::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Action.name)
  return _s;
}
inline const std::string& CEconItem_Action::_internal_name() const {
  return name_.Get();
}
inline void CEconItem_Action::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Action::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Action::release_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Action.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Action::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Action.name)
}

// -------------------------------------------------------------------

// CEconItem_Description

// optional int32 appid = 1;
inline bool CEconItem_Description::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_appid() const {
  return _internal_has_appid();
}
inline void CEconItem_Description::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t CEconItem_Description::_internal_appid() const {
  return appid_;
}
inline int32_t CEconItem_Description::appid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.appid)
  return _internal_appid();
}
inline void CEconItem_Description::_internal_set_appid(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  appid_ = value;
}
inline void CEconItem_Description::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.appid)
}

// optional uint64 classid = 2;
inline bool CEconItem_Description::_internal_has_classid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_classid() const {
  return _internal_has_classid();
}
inline void CEconItem_Description::clear_classid() {
  classid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CEconItem_Description::_internal_classid() const {
  return classid_;
}
inline uint64_t CEconItem_Description::classid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.classid)
  return _internal_classid();
}
inline void CEconItem_Description::_internal_set_classid(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  classid_ = value;
}
inline void CEconItem_Description::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.classid)
}

// optional uint64 instanceid = 3;
inline bool CEconItem_Description::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CEconItem_Description::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CEconItem_Description::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CEconItem_Description::instanceid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.instanceid)
  return _internal_instanceid();
}
inline void CEconItem_Description::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  instanceid_ = value;
}
inline void CEconItem_Description::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.instanceid)
}

// optional bool currency = 4;
inline bool CEconItem_Description::_internal_has_currency() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_currency() const {
  return _internal_has_currency();
}
inline void CEconItem_Description::clear_currency() {
  currency_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CEconItem_Description::_internal_currency() const {
  return currency_;
}
inline bool CEconItem_Description::currency() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.currency)
  return _internal_currency();
}
inline void CEconItem_Description::_internal_set_currency(bool value) {
  _has_bits_[0] |= 0x00010000u;
  currency_ = value;
}
inline void CEconItem_Description::set_currency(bool value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.currency)
}

// optional string background_color = 5;
inline bool CEconItem_Description::_internal_has_background_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItem_Description::has_background_color() const {
  return _internal_has_background_color();
}
inline void CEconItem_Description::clear_background_color() {
  background_color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEconItem_Description::background_color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.background_color)
  return _internal_background_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_background_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 background_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.background_color)
}
inline std::string* CEconItem_Description::mutable_background_color() {
  std::string* _s = _internal_mutable_background_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.background_color)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_background_color() const {
  return background_color_.Get();
}
inline void CEconItem_Description::_internal_set_background_color(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  background_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_background_color() {
  _has_bits_[0] |= 0x00000001u;
  return background_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_background_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.background_color)
  if (!_internal_has_background_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = background_color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (background_color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    background_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_background_color(std::string* background_color) {
  if (background_color != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), background_color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (background_color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    background_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.background_color)
}

// optional string icon_url = 6;
inline bool CEconItem_Description::_internal_has_icon_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItem_Description::has_icon_url() const {
  return _internal_has_icon_url();
}
inline void CEconItem_Description::clear_icon_url() {
  icon_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CEconItem_Description::icon_url() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.icon_url)
  return _internal_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_icon_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.icon_url)
}
inline std::string* CEconItem_Description::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.icon_url)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_icon_url() const {
  return icon_url_.Get();
}
inline void CEconItem_Description::_internal_set_icon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_icon_url() {
  _has_bits_[0] |= 0x00000002u;
  return icon_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_icon_url() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.icon_url)
  if (!_internal_has_icon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = icon_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.icon_url)
}

// optional string icon_url_large = 7;
inline bool CEconItem_Description::_internal_has_icon_url_large() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEconItem_Description::has_icon_url_large() const {
  return _internal_has_icon_url_large();
}
inline void CEconItem_Description::clear_icon_url_large() {
  icon_url_large_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CEconItem_Description::icon_url_large() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.icon_url_large)
  return _internal_icon_url_large();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_icon_url_large(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_url_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.icon_url_large)
}
inline std::string* CEconItem_Description::mutable_icon_url_large() {
  std::string* _s = _internal_mutable_icon_url_large();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.icon_url_large)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_icon_url_large() const {
  return icon_url_large_.Get();
}
inline void CEconItem_Description::_internal_set_icon_url_large(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_url_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_icon_url_large() {
  _has_bits_[0] |= 0x00000004u;
  return icon_url_large_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_icon_url_large() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.icon_url_large)
  if (!_internal_has_icon_url_large()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_url_large_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_large_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_url_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_icon_url_large(std::string* icon_url_large) {
  if (icon_url_large != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_url_large_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_url_large,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_url_large_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_url_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.icon_url_large)
}

// repeated .CEconItem_DescriptionLine descriptions = 8;
inline int CEconItem_Description::_internal_descriptions_size() const {
  return descriptions_.size();
}
inline int CEconItem_Description::descriptions_size() const {
  return _internal_descriptions_size();
}
inline void CEconItem_Description::clear_descriptions() {
  descriptions_.Clear();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.descriptions)
  return descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >*
CEconItem_Description::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.descriptions)
  return &descriptions_;
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::_internal_descriptions(int index) const {
  return descriptions_.Get(index);
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.descriptions)
  return _internal_descriptions(index);
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::_internal_add_descriptions() {
  return descriptions_.Add();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::add_descriptions() {
  ::CEconItem_DescriptionLine* _add = _internal_add_descriptions();
  // @@protoc_insertion_point(field_add:CEconItem_Description.descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >&
CEconItem_Description::descriptions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.descriptions)
  return descriptions_;
}

// optional bool tradable = 9;
inline bool CEconItem_Description::_internal_has_tradable() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_tradable() const {
  return _internal_has_tradable();
}
inline void CEconItem_Description::clear_tradable() {
  tradable_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CEconItem_Description::_internal_tradable() const {
  return tradable_;
}
inline bool CEconItem_Description::tradable() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.tradable)
  return _internal_tradable();
}
inline void CEconItem_Description::_internal_set_tradable(bool value) {
  _has_bits_[0] |= 0x00020000u;
  tradable_ = value;
}
inline void CEconItem_Description::set_tradable(bool value) {
  _internal_set_tradable(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.tradable)
}

// repeated .CEconItem_Action actions = 10;
inline int CEconItem_Description::_internal_actions_size() const {
  return actions_.size();
}
inline int CEconItem_Description::actions_size() const {
  return _internal_actions_size();
}
inline void CEconItem_Description::clear_actions() {
  actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.actions)
  return &actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::CEconItem_Action& CEconItem_Description::actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.actions)
  return _internal_actions(index);
}
inline ::CEconItem_Action* CEconItem_Description::_internal_add_actions() {
  return actions_.Add();
}
inline ::CEconItem_Action* CEconItem_Description::add_actions() {
  ::CEconItem_Action* _add = _internal_add_actions();
  // @@protoc_insertion_point(field_add:CEconItem_Description.actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.actions)
  return actions_;
}

// repeated .CEconItem_DescriptionLine owner_descriptions = 11;
inline int CEconItem_Description::_internal_owner_descriptions_size() const {
  return owner_descriptions_.size();
}
inline int CEconItem_Description::owner_descriptions_size() const {
  return _internal_owner_descriptions_size();
}
inline void CEconItem_Description::clear_owner_descriptions() {
  owner_descriptions_.Clear();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::mutable_owner_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.owner_descriptions)
  return owner_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >*
CEconItem_Description::mutable_owner_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.owner_descriptions)
  return &owner_descriptions_;
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::_internal_owner_descriptions(int index) const {
  return owner_descriptions_.Get(index);
}
inline const ::CEconItem_DescriptionLine& CEconItem_Description::owner_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.owner_descriptions)
  return _internal_owner_descriptions(index);
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::_internal_add_owner_descriptions() {
  return owner_descriptions_.Add();
}
inline ::CEconItem_DescriptionLine* CEconItem_Description::add_owner_descriptions() {
  ::CEconItem_DescriptionLine* _add = _internal_add_owner_descriptions();
  // @@protoc_insertion_point(field_add:CEconItem_Description.owner_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_DescriptionLine >&
CEconItem_Description::owner_descriptions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.owner_descriptions)
  return owner_descriptions_;
}

// repeated .CEconItem_Action owner_actions = 12;
inline int CEconItem_Description::_internal_owner_actions_size() const {
  return owner_actions_.size();
}
inline int CEconItem_Description::owner_actions_size() const {
  return _internal_owner_actions_size();
}
inline void CEconItem_Description::clear_owner_actions() {
  owner_actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_owner_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.owner_actions)
  return owner_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_owner_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.owner_actions)
  return &owner_actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::_internal_owner_actions(int index) const {
  return owner_actions_.Get(index);
}
inline const ::CEconItem_Action& CEconItem_Description::owner_actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.owner_actions)
  return _internal_owner_actions(index);
}
inline ::CEconItem_Action* CEconItem_Description::_internal_add_owner_actions() {
  return owner_actions_.Add();
}
inline ::CEconItem_Action* CEconItem_Description::add_owner_actions() {
  ::CEconItem_Action* _add = _internal_add_owner_actions();
  // @@protoc_insertion_point(field_add:CEconItem_Description.owner_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::owner_actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.owner_actions)
  return owner_actions_;
}

// repeated string fraudwarnings = 13;
inline int CEconItem_Description::_internal_fraudwarnings_size() const {
  return fraudwarnings_.size();
}
inline int CEconItem_Description::fraudwarnings_size() const {
  return _internal_fraudwarnings_size();
}
inline void CEconItem_Description::clear_fraudwarnings() {
  fraudwarnings_.Clear();
}
inline std::string* CEconItem_Description::add_fraudwarnings() {
  std::string* _s = _internal_add_fraudwarnings();
  // @@protoc_insertion_point(field_add_mutable:CEconItem_Description.fraudwarnings)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_fraudwarnings(int index) const {
  return fraudwarnings_.Get(index);
}
inline const std::string& CEconItem_Description::fraudwarnings(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.fraudwarnings)
  return _internal_fraudwarnings(index);
}
inline std::string* CEconItem_Description::mutable_fraudwarnings(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.fraudwarnings)
  return fraudwarnings_.Mutable(index);
}
inline void CEconItem_Description::set_fraudwarnings(int index, const std::string& value) {
  fraudwarnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::set_fraudwarnings(int index, std::string&& value) {
  fraudwarnings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::set_fraudwarnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fraudwarnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::set_fraudwarnings(int index, const char* value, size_t size) {
  fraudwarnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CEconItem_Description.fraudwarnings)
}
inline std::string* CEconItem_Description::_internal_add_fraudwarnings() {
  return fraudwarnings_.Add();
}
inline void CEconItem_Description::add_fraudwarnings(const std::string& value) {
  fraudwarnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::add_fraudwarnings(std::string&& value) {
  fraudwarnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::add_fraudwarnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fraudwarnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CEconItem_Description.fraudwarnings)
}
inline void CEconItem_Description::add_fraudwarnings(const char* value, size_t size) {
  fraudwarnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CEconItem_Description.fraudwarnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CEconItem_Description::fraudwarnings() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.fraudwarnings)
  return fraudwarnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CEconItem_Description::mutable_fraudwarnings() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.fraudwarnings)
  return &fraudwarnings_;
}

// optional string name = 14;
inline bool CEconItem_Description::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEconItem_Description::has_name() const {
  return _internal_has_name();
}
inline void CEconItem_Description::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CEconItem_Description::name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.name)
}
inline std::string* CEconItem_Description::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.name)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_name() const {
  return name_.Get();
}
inline void CEconItem_Description::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000008u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.name)
}

// optional string name_color = 15;
inline bool CEconItem_Description::_internal_has_name_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEconItem_Description::has_name_color() const {
  return _internal_has_name_color();
}
inline void CEconItem_Description::clear_name_color() {
  name_color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CEconItem_Description::name_color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.name_color)
  return _internal_name_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_name_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.name_color)
}
inline std::string* CEconItem_Description::mutable_name_color() {
  std::string* _s = _internal_mutable_name_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.name_color)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_name_color() const {
  return name_color_.Get();
}
inline void CEconItem_Description::_internal_set_name_color(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_name_color() {
  _has_bits_[0] |= 0x00000010u;
  return name_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_name_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.name_color)
  if (!_internal_has_name_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = name_color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_name_color(std::string* name_color) {
  if (name_color != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.name_color)
}

// optional string type = 16;
inline bool CEconItem_Description::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEconItem_Description::has_type() const {
  return _internal_has_type();
}
inline void CEconItem_Description::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CEconItem_Description::type() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.type)
}
inline std::string* CEconItem_Description::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.type)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_type() const {
  return type_.Get();
}
inline void CEconItem_Description::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000020u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_type() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.type)
}

// optional string market_name = 17;
inline bool CEconItem_Description::_internal_has_market_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_name() const {
  return _internal_has_market_name();
}
inline void CEconItem_Description::clear_market_name() {
  market_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CEconItem_Description::market_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_name)
  return _internal_market_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_market_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 market_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_name)
}
inline std::string* CEconItem_Description::mutable_market_name() {
  std::string* _s = _internal_mutable_market_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_name)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_market_name() const {
  return market_name_.Get();
}
inline void CEconItem_Description::_internal_set_market_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  market_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_market_name() {
  _has_bits_[0] |= 0x00000040u;
  return market_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_market_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_name)
  if (!_internal_has_market_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = market_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_market_name(std::string* market_name) {
  if (market_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  market_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_name)
}

// optional string market_hash_name = 18;
inline bool CEconItem_Description::_internal_has_market_hash_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_hash_name() const {
  return _internal_has_market_hash_name();
}
inline void CEconItem_Description::clear_market_hash_name() {
  market_hash_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CEconItem_Description::market_hash_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_hash_name)
  return _internal_market_hash_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_market_hash_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 market_hash_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_hash_name)
}
inline std::string* CEconItem_Description::mutable_market_hash_name() {
  std::string* _s = _internal_mutable_market_hash_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_hash_name)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_market_hash_name() const {
  return market_hash_name_.Get();
}
inline void CEconItem_Description::_internal_set_market_hash_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  market_hash_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_market_hash_name() {
  _has_bits_[0] |= 0x00000080u;
  return market_hash_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_market_hash_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_hash_name)
  if (!_internal_has_market_hash_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = market_hash_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_hash_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_hash_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_market_hash_name(std::string* market_hash_name) {
  if (market_hash_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  market_hash_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_hash_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_hash_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_hash_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_hash_name)
}

// optional string market_fee = 19;
inline bool CEconItem_Description::_internal_has_market_fee() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_fee() const {
  return _internal_has_market_fee();
}
inline void CEconItem_Description::clear_market_fee() {
  market_fee_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CEconItem_Description::market_fee() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_fee)
  return _internal_market_fee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_market_fee(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 market_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_fee)
}
inline std::string* CEconItem_Description::mutable_market_fee() {
  std::string* _s = _internal_mutable_market_fee();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_fee)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_market_fee() const {
  return market_fee_.Get();
}
inline void CEconItem_Description::_internal_set_market_fee(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  market_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_market_fee() {
  _has_bits_[0] |= 0x00000100u;
  return market_fee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_market_fee() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_fee)
  if (!_internal_has_market_fee()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = market_fee_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_fee_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_market_fee(std::string* market_fee) {
  if (market_fee != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  market_fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_fee,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_fee_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_fee)
}

// optional int32 market_fee_app = 28;
inline bool CEconItem_Description::_internal_has_market_fee_app() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_fee_app() const {
  return _internal_has_market_fee_app();
}
inline void CEconItem_Description::clear_market_fee_app() {
  market_fee_app_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline int32_t CEconItem_Description::_internal_market_fee_app() const {
  return market_fee_app_;
}
inline int32_t CEconItem_Description::market_fee_app() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_fee_app)
  return _internal_market_fee_app();
}
inline void CEconItem_Description::_internal_set_market_fee_app(int32_t value) {
  _has_bits_[0] |= 0x00400000u;
  market_fee_app_ = value;
}
inline void CEconItem_Description::set_market_fee_app(int32_t value) {
  _internal_set_market_fee_app(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_fee_app)
}

// optional .CEconItem_Description contained_item = 20;
inline bool CEconItem_Description::_internal_has_contained_item() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || contained_item_ != nullptr);
  return value;
}
inline bool CEconItem_Description::has_contained_item() const {
  return _internal_has_contained_item();
}
inline void CEconItem_Description::clear_contained_item() {
  if (contained_item_ != nullptr) contained_item_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::CEconItem_Description& CEconItem_Description::_internal_contained_item() const {
  const ::CEconItem_Description* p = contained_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEconItem_Description&>(
      ::_CEconItem_Description_default_instance_);
}
inline const ::CEconItem_Description& CEconItem_Description::contained_item() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.contained_item)
  return _internal_contained_item();
}
inline void CEconItem_Description::unsafe_arena_set_allocated_contained_item(
    ::CEconItem_Description* contained_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contained_item_);
  }
  contained_item_ = contained_item;
  if (contained_item) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CEconItem_Description.contained_item)
}
inline ::CEconItem_Description* CEconItem_Description::release_contained_item() {
  _has_bits_[0] &= ~0x00001000u;
  ::CEconItem_Description* temp = contained_item_;
  contained_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEconItem_Description* CEconItem_Description::unsafe_arena_release_contained_item() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.contained_item)
  _has_bits_[0] &= ~0x00001000u;
  ::CEconItem_Description* temp = contained_item_;
  contained_item_ = nullptr;
  return temp;
}
inline ::CEconItem_Description* CEconItem_Description::_internal_mutable_contained_item() {
  _has_bits_[0] |= 0x00001000u;
  if (contained_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEconItem_Description>(GetArenaForAllocation());
    contained_item_ = p;
  }
  return contained_item_;
}
inline ::CEconItem_Description* CEconItem_Description::mutable_contained_item() {
  ::CEconItem_Description* _msg = _internal_mutable_contained_item();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.contained_item)
  return _msg;
}
inline void CEconItem_Description::set_allocated_contained_item(::CEconItem_Description* contained_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete contained_item_;
  }
  if (contained_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEconItem_Description>::GetOwningArena(contained_item);
    if (message_arena != submessage_arena) {
      contained_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contained_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  contained_item_ = contained_item;
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.contained_item)
}

// repeated .CEconItem_Action market_actions = 21;
inline int CEconItem_Description::_internal_market_actions_size() const {
  return market_actions_.size();
}
inline int CEconItem_Description::market_actions_size() const {
  return _internal_market_actions_size();
}
inline void CEconItem_Description::clear_market_actions() {
  market_actions_.Clear();
}
inline ::CEconItem_Action* CEconItem_Description::mutable_market_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_actions)
  return market_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >*
CEconItem_Description::mutable_market_actions() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.market_actions)
  return &market_actions_;
}
inline const ::CEconItem_Action& CEconItem_Description::_internal_market_actions(int index) const {
  return market_actions_.Get(index);
}
inline const ::CEconItem_Action& CEconItem_Description::market_actions(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_actions)
  return _internal_market_actions(index);
}
inline ::CEconItem_Action* CEconItem_Description::_internal_add_market_actions() {
  return market_actions_.Add();
}
inline ::CEconItem_Action* CEconItem_Description::add_market_actions() {
  ::CEconItem_Action* _add = _internal_add_market_actions();
  // @@protoc_insertion_point(field_add:CEconItem_Description.market_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Action >&
CEconItem_Description::market_actions() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.market_actions)
  return market_actions_;
}

// optional bool commodity = 22;
inline bool CEconItem_Description::_internal_has_commodity() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_commodity() const {
  return _internal_has_commodity();
}
inline void CEconItem_Description::clear_commodity() {
  commodity_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CEconItem_Description::_internal_commodity() const {
  return commodity_;
}
inline bool CEconItem_Description::commodity() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.commodity)
  return _internal_commodity();
}
inline void CEconItem_Description::_internal_set_commodity(bool value) {
  _has_bits_[0] |= 0x00040000u;
  commodity_ = value;
}
inline void CEconItem_Description::set_commodity(bool value) {
  _internal_set_commodity(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.commodity)
}

// optional int32 market_tradable_restriction = 23;
inline bool CEconItem_Description::_internal_has_market_tradable_restriction() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_tradable_restriction() const {
  return _internal_has_market_tradable_restriction();
}
inline void CEconItem_Description::clear_market_tradable_restriction() {
  market_tradable_restriction_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline int32_t CEconItem_Description::_internal_market_tradable_restriction() const {
  return market_tradable_restriction_;
}
inline int32_t CEconItem_Description::market_tradable_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_tradable_restriction)
  return _internal_market_tradable_restriction();
}
inline void CEconItem_Description::_internal_set_market_tradable_restriction(int32_t value) {
  _has_bits_[0] |= 0x00100000u;
  market_tradable_restriction_ = value;
}
inline void CEconItem_Description::set_market_tradable_restriction(int32_t value) {
  _internal_set_market_tradable_restriction(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_tradable_restriction)
}

// optional int32 market_marketable_restriction = 24;
inline bool CEconItem_Description::_internal_has_market_marketable_restriction() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_marketable_restriction() const {
  return _internal_has_market_marketable_restriction();
}
inline void CEconItem_Description::clear_market_marketable_restriction() {
  market_marketable_restriction_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline int32_t CEconItem_Description::_internal_market_marketable_restriction() const {
  return market_marketable_restriction_;
}
inline int32_t CEconItem_Description::market_marketable_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_marketable_restriction)
  return _internal_market_marketable_restriction();
}
inline void CEconItem_Description::_internal_set_market_marketable_restriction(int32_t value) {
  _has_bits_[0] |= 0x00200000u;
  market_marketable_restriction_ = value;
}
inline void CEconItem_Description::set_market_marketable_restriction(int32_t value) {
  _internal_set_market_marketable_restriction(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_marketable_restriction)
}

// optional bool marketable = 25;
inline bool CEconItem_Description::_internal_has_marketable() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CEconItem_Description::has_marketable() const {
  return _internal_has_marketable();
}
inline void CEconItem_Description::clear_marketable() {
  marketable_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CEconItem_Description::_internal_marketable() const {
  return marketable_;
}
inline bool CEconItem_Description::marketable() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.marketable)
  return _internal_marketable();
}
inline void CEconItem_Description::_internal_set_marketable(bool value) {
  _has_bits_[0] |= 0x00080000u;
  marketable_ = value;
}
inline void CEconItem_Description::set_marketable(bool value) {
  _internal_set_marketable(value);
  // @@protoc_insertion_point(field_set:CEconItem_Description.marketable)
}

// repeated .CEconItem_Tag tags = 26;
inline int CEconItem_Description::_internal_tags_size() const {
  return tags_.size();
}
inline int CEconItem_Description::tags_size() const {
  return _internal_tags_size();
}
inline void CEconItem_Description::clear_tags() {
  tags_.Clear();
}
inline ::CEconItem_Tag* CEconItem_Description::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Tag >*
CEconItem_Description::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CEconItem_Description.tags)
  return &tags_;
}
inline const ::CEconItem_Tag& CEconItem_Description::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CEconItem_Tag& CEconItem_Description::tags(int index) const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.tags)
  return _internal_tags(index);
}
inline ::CEconItem_Tag* CEconItem_Description::_internal_add_tags() {
  return tags_.Add();
}
inline ::CEconItem_Tag* CEconItem_Description::add_tags() {
  ::CEconItem_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:CEconItem_Description.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Tag >&
CEconItem_Description::tags() const {
  // @@protoc_insertion_point(field_list:CEconItem_Description.tags)
  return tags_;
}

// optional string item_expiration = 27;
inline bool CEconItem_Description::_internal_has_item_expiration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CEconItem_Description::has_item_expiration() const {
  return _internal_has_item_expiration();
}
inline void CEconItem_Description::clear_item_expiration() {
  item_expiration_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CEconItem_Description::item_expiration() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.item_expiration)
  return _internal_item_expiration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_item_expiration(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 item_expiration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.item_expiration)
}
inline std::string* CEconItem_Description::mutable_item_expiration() {
  std::string* _s = _internal_mutable_item_expiration();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.item_expiration)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_item_expiration() const {
  return item_expiration_.Get();
}
inline void CEconItem_Description::_internal_set_item_expiration(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  item_expiration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_item_expiration() {
  _has_bits_[0] |= 0x00000200u;
  return item_expiration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_item_expiration() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.item_expiration)
  if (!_internal_has_item_expiration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = item_expiration_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_expiration_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_item_expiration(std::string* item_expiration) {
  if (item_expiration != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  item_expiration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_expiration,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (item_expiration_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    item_expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.item_expiration)
}

// optional string market_buy_country_restriction = 30;
inline bool CEconItem_Description::_internal_has_market_buy_country_restriction() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_buy_country_restriction() const {
  return _internal_has_market_buy_country_restriction();
}
inline void CEconItem_Description::clear_market_buy_country_restriction() {
  market_buy_country_restriction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CEconItem_Description::market_buy_country_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_buy_country_restriction)
  return _internal_market_buy_country_restriction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_market_buy_country_restriction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 market_buy_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_buy_country_restriction)
}
inline std::string* CEconItem_Description::mutable_market_buy_country_restriction() {
  std::string* _s = _internal_mutable_market_buy_country_restriction();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_buy_country_restriction)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_market_buy_country_restriction() const {
  return market_buy_country_restriction_.Get();
}
inline void CEconItem_Description::_internal_set_market_buy_country_restriction(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  market_buy_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_market_buy_country_restriction() {
  _has_bits_[0] |= 0x00000400u;
  return market_buy_country_restriction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_market_buy_country_restriction() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_buy_country_restriction)
  if (!_internal_has_market_buy_country_restriction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = market_buy_country_restriction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_buy_country_restriction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_buy_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_market_buy_country_restriction(std::string* market_buy_country_restriction) {
  if (market_buy_country_restriction != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  market_buy_country_restriction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_buy_country_restriction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_buy_country_restriction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_buy_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_buy_country_restriction)
}

// optional string market_sell_country_restriction = 31;
inline bool CEconItem_Description::_internal_has_market_sell_country_restriction() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CEconItem_Description::has_market_sell_country_restriction() const {
  return _internal_has_market_sell_country_restriction();
}
inline void CEconItem_Description::clear_market_sell_country_restriction() {
  market_sell_country_restriction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& CEconItem_Description::market_sell_country_restriction() const {
  // @@protoc_insertion_point(field_get:CEconItem_Description.market_sell_country_restriction)
  return _internal_market_sell_country_restriction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Description::set_market_sell_country_restriction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 market_sell_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Description.market_sell_country_restriction)
}
inline std::string* CEconItem_Description::mutable_market_sell_country_restriction() {
  std::string* _s = _internal_mutable_market_sell_country_restriction();
  // @@protoc_insertion_point(field_mutable:CEconItem_Description.market_sell_country_restriction)
  return _s;
}
inline const std::string& CEconItem_Description::_internal_market_sell_country_restriction() const {
  return market_sell_country_restriction_.Get();
}
inline void CEconItem_Description::_internal_set_market_sell_country_restriction(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  market_sell_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::_internal_mutable_market_sell_country_restriction() {
  _has_bits_[0] |= 0x00000800u;
  return market_sell_country_restriction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Description::release_market_sell_country_restriction() {
  // @@protoc_insertion_point(field_release:CEconItem_Description.market_sell_country_restriction)
  if (!_internal_has_market_sell_country_restriction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = market_sell_country_restriction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_sell_country_restriction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_sell_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Description::set_allocated_market_sell_country_restriction(std::string* market_sell_country_restriction) {
  if (market_sell_country_restriction != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  market_sell_country_restriction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_sell_country_restriction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (market_sell_country_restriction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    market_sell_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Description.market_sell_country_restriction)
}

// -------------------------------------------------------------------

// CEconItem_Tag

// optional uint32 appid = 1 [(.description) = "The app that contains the item"];
inline bool CEconItem_Tag::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_appid() const {
  return _internal_has_appid();
}
inline void CEconItem_Tag::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CEconItem_Tag::_internal_appid() const {
  return appid_;
}
inline uint32_t CEconItem_Tag::appid() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.appid)
  return _internal_appid();
}
inline void CEconItem_Tag::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CEconItem_Tag::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEconItem_Tag.appid)
}

// optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
inline bool CEconItem_Tag::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_category() const {
  return _internal_has_category();
}
inline void CEconItem_Tag::clear_category() {
  category_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEconItem_Tag::category() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Tag::set_category(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Tag.category)
}
inline std::string* CEconItem_Tag::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.category)
  return _s;
}
inline const std::string& CEconItem_Tag::_internal_category() const {
  return category_.Get();
}
inline void CEconItem_Tag::_internal_set_category(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::_internal_mutable_category() {
  _has_bits_[0] |= 0x00000001u;
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::release_category() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = category_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Tag::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (category_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.category)
}

// optional string internal_name = 3 [(.description) = "The internal name of the tag"];
inline bool CEconItem_Tag::_internal_has_internal_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_internal_name() const {
  return _internal_has_internal_name();
}
inline void CEconItem_Tag::clear_internal_name() {
  internal_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CEconItem_Tag::internal_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.internal_name)
  return _internal_internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Tag::set_internal_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Tag.internal_name)
}
inline std::string* CEconItem_Tag::mutable_internal_name() {
  std::string* _s = _internal_mutable_internal_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.internal_name)
  return _s;
}
inline const std::string& CEconItem_Tag::_internal_internal_name() const {
  return internal_name_.Get();
}
inline void CEconItem_Tag::_internal_set_internal_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::_internal_mutable_internal_name() {
  _has_bits_[0] |= 0x00000002u;
  return internal_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::release_internal_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.internal_name)
  if (!_internal_has_internal_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = internal_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Tag::set_allocated_internal_name(std::string* internal_name) {
  if (internal_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  internal_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.internal_name)
}

// optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
inline bool CEconItem_Tag::_internal_has_localized_category_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_localized_category_name() const {
  return _internal_has_localized_category_name();
}
inline void CEconItem_Tag::clear_localized_category_name() {
  localized_category_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CEconItem_Tag::localized_category_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.localized_category_name)
  return _internal_localized_category_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Tag::set_localized_category_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 localized_category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Tag.localized_category_name)
}
inline std::string* CEconItem_Tag::mutable_localized_category_name() {
  std::string* _s = _internal_mutable_localized_category_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.localized_category_name)
  return _s;
}
inline const std::string& CEconItem_Tag::_internal_localized_category_name() const {
  return localized_category_name_.Get();
}
inline void CEconItem_Tag::_internal_set_localized_category_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  localized_category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::_internal_mutable_localized_category_name() {
  _has_bits_[0] |= 0x00000004u;
  return localized_category_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::release_localized_category_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.localized_category_name)
  if (!_internal_has_localized_category_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = localized_category_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_category_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_category_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Tag::set_allocated_localized_category_name(std::string* localized_category_name) {
  if (localized_category_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  localized_category_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_category_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_category_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_category_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.localized_category_name)
}

// optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
inline bool CEconItem_Tag::_internal_has_localized_tag_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_localized_tag_name() const {
  return _internal_has_localized_tag_name();
}
inline void CEconItem_Tag::clear_localized_tag_name() {
  localized_tag_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CEconItem_Tag::localized_tag_name() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.localized_tag_name)
  return _internal_localized_tag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Tag::set_localized_tag_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 localized_tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Tag.localized_tag_name)
}
inline std::string* CEconItem_Tag::mutable_localized_tag_name() {
  std::string* _s = _internal_mutable_localized_tag_name();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.localized_tag_name)
  return _s;
}
inline const std::string& CEconItem_Tag::_internal_localized_tag_name() const {
  return localized_tag_name_.Get();
}
inline void CEconItem_Tag::_internal_set_localized_tag_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  localized_tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::_internal_mutable_localized_tag_name() {
  _has_bits_[0] |= 0x00000008u;
  return localized_tag_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::release_localized_tag_name() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.localized_tag_name)
  if (!_internal_has_localized_tag_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = localized_tag_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_tag_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Tag::set_allocated_localized_tag_name(std::string* localized_tag_name) {
  if (localized_tag_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  localized_tag_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_tag_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localized_tag_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    localized_tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.localized_tag_name)
}

// optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
inline bool CEconItem_Tag::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEconItem_Tag::has_color() const {
  return _internal_has_color();
}
inline void CEconItem_Tag::clear_color() {
  color_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CEconItem_Tag::color() const {
  // @@protoc_insertion_point(field_get:CEconItem_Tag.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItem_Tag::set_color(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItem_Tag.color)
}
inline std::string* CEconItem_Tag::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:CEconItem_Tag.color)
  return _s;
}
inline const std::string& CEconItem_Tag::_internal_color() const {
  return color_.Get();
}
inline void CEconItem_Tag::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000010u;
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItem_Tag::release_color() {
  // @@protoc_insertion_point(field_release:CEconItem_Tag.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEconItem_Tag::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEconItem_Tag.color)
}

// -------------------------------------------------------------------

// CEcon_GetInventoryItemsWithDescriptions_Response

// repeated .CEcon_Asset assets = 1;
inline int CEcon_GetInventoryItemsWithDescriptions_Response::_internal_assets_size() const {
  return assets_.size();
}
inline int CEcon_GetInventoryItemsWithDescriptions_Response::assets_size() const {
  return _internal_assets_size();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_assets() {
  assets_.Clear();
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetInventoryItemsWithDescriptions_Response.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >*
CEcon_GetInventoryItemsWithDescriptions_Response::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetInventoryItemsWithDescriptions_Response.assets)
  return &assets_;
}
inline const ::CEcon_Asset& CEcon_GetInventoryItemsWithDescriptions_Response::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::CEcon_Asset& CEcon_GetInventoryItemsWithDescriptions_Response::assets(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.assets)
  return _internal_assets(index);
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::_internal_add_assets() {
  return assets_.Add();
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::add_assets() {
  ::CEcon_Asset* _add = _internal_add_assets();
  // @@protoc_insertion_point(field_add:CEcon_GetInventoryItemsWithDescriptions_Response.assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >&
CEcon_GetInventoryItemsWithDescriptions_Response::assets() const {
  // @@protoc_insertion_point(field_list:CEcon_GetInventoryItemsWithDescriptions_Response.assets)
  return assets_;
}

// repeated .CEconItem_Description descriptions = 2;
inline int CEcon_GetInventoryItemsWithDescriptions_Response::_internal_descriptions_size() const {
  return descriptions_.size();
}
inline int CEcon_GetInventoryItemsWithDescriptions_Response::descriptions_size() const {
  return _internal_descriptions_size();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_descriptions() {
  descriptions_.Clear();
}
inline ::CEconItem_Description* CEcon_GetInventoryItemsWithDescriptions_Response::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetInventoryItemsWithDescriptions_Response.descriptions)
  return descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >*
CEcon_GetInventoryItemsWithDescriptions_Response::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetInventoryItemsWithDescriptions_Response.descriptions)
  return &descriptions_;
}
inline const ::CEconItem_Description& CEcon_GetInventoryItemsWithDescriptions_Response::_internal_descriptions(int index) const {
  return descriptions_.Get(index);
}
inline const ::CEconItem_Description& CEcon_GetInventoryItemsWithDescriptions_Response::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.descriptions)
  return _internal_descriptions(index);
}
inline ::CEconItem_Description* CEcon_GetInventoryItemsWithDescriptions_Response::_internal_add_descriptions() {
  return descriptions_.Add();
}
inline ::CEconItem_Description* CEcon_GetInventoryItemsWithDescriptions_Response::add_descriptions() {
  ::CEconItem_Description* _add = _internal_add_descriptions();
  // @@protoc_insertion_point(field_add:CEcon_GetInventoryItemsWithDescriptions_Response.descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >&
CEcon_GetInventoryItemsWithDescriptions_Response::descriptions() const {
  // @@protoc_insertion_point(field_list:CEcon_GetInventoryItemsWithDescriptions_Response.descriptions)
  return descriptions_;
}

// repeated .CEcon_Asset missing_assets = 3 [(.description) = "This list of assets in the original list we could not find in the users inventory"];
inline int CEcon_GetInventoryItemsWithDescriptions_Response::_internal_missing_assets_size() const {
  return missing_assets_.size();
}
inline int CEcon_GetInventoryItemsWithDescriptions_Response::missing_assets_size() const {
  return _internal_missing_assets_size();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_missing_assets() {
  missing_assets_.Clear();
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::mutable_missing_assets(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets)
  return missing_assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >*
CEcon_GetInventoryItemsWithDescriptions_Response::mutable_missing_assets() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets)
  return &missing_assets_;
}
inline const ::CEcon_Asset& CEcon_GetInventoryItemsWithDescriptions_Response::_internal_missing_assets(int index) const {
  return missing_assets_.Get(index);
}
inline const ::CEcon_Asset& CEcon_GetInventoryItemsWithDescriptions_Response::missing_assets(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets)
  return _internal_missing_assets(index);
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::_internal_add_missing_assets() {
  return missing_assets_.Add();
}
inline ::CEcon_Asset* CEcon_GetInventoryItemsWithDescriptions_Response::add_missing_assets() {
  ::CEcon_Asset* _add = _internal_add_missing_assets();
  // @@protoc_insertion_point(field_add:CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_Asset >&
CEcon_GetInventoryItemsWithDescriptions_Response::missing_assets() const {
  // @@protoc_insertion_point(field_list:CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets)
  return missing_assets_;
}

// optional bool more_items = 4;
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::_internal_has_more_items() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::has_more_items() const {
  return _internal_has_more_items();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_more_items() {
  more_items_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::_internal_more_items() const {
  return more_items_;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::more_items() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.more_items)
  return _internal_more_items();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::_internal_set_more_items(bool value) {
  _has_bits_[0] |= 0x00000002u;
  more_items_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::set_more_items(bool value) {
  _internal_set_more_items(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Response.more_items)
}

// optional uint64 last_assetid = 5;
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::_internal_has_last_assetid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::has_last_assetid() const {
  return _internal_has_last_assetid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_last_assetid() {
  last_assetid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Response::_internal_last_assetid() const {
  return last_assetid_;
}
inline uint64_t CEcon_GetInventoryItemsWithDescriptions_Response::last_assetid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.last_assetid)
  return _internal_last_assetid();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::_internal_set_last_assetid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_assetid_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::set_last_assetid(uint64_t value) {
  _internal_set_last_assetid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Response.last_assetid)
}

// optional uint32 total_inventory_count = 6;
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::_internal_has_total_inventory_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEcon_GetInventoryItemsWithDescriptions_Response::has_total_inventory_count() const {
  return _internal_has_total_inventory_count();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::clear_total_inventory_count() {
  total_inventory_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Response::_internal_total_inventory_count() const {
  return total_inventory_count_;
}
inline uint32_t CEcon_GetInventoryItemsWithDescriptions_Response::total_inventory_count() const {
  // @@protoc_insertion_point(field_get:CEcon_GetInventoryItemsWithDescriptions_Response.total_inventory_count)
  return _internal_total_inventory_count();
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::_internal_set_total_inventory_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  total_inventory_count_ = value;
}
inline void CEcon_GetInventoryItemsWithDescriptions_Response::set_total_inventory_count(uint32_t value) {
  _internal_set_total_inventory_count(value);
  // @@protoc_insertion_point(field_set:CEcon_GetInventoryItemsWithDescriptions_Response.total_inventory_count)
}

// -------------------------------------------------------------------

// CEcon_GetTradeOfferAccessToken_Request

// optional bool generate_new_token = 1;
inline bool CEcon_GetTradeOfferAccessToken_Request::_internal_has_generate_new_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetTradeOfferAccessToken_Request::has_generate_new_token() const {
  return _internal_has_generate_new_token();
}
inline void CEcon_GetTradeOfferAccessToken_Request::clear_generate_new_token() {
  generate_new_token_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CEcon_GetTradeOfferAccessToken_Request::_internal_generate_new_token() const {
  return generate_new_token_;
}
inline bool CEcon_GetTradeOfferAccessToken_Request::generate_new_token() const {
  // @@protoc_insertion_point(field_get:CEcon_GetTradeOfferAccessToken_Request.generate_new_token)
  return _internal_generate_new_token();
}
inline void CEcon_GetTradeOfferAccessToken_Request::_internal_set_generate_new_token(bool value) {
  _has_bits_[0] |= 0x00000001u;
  generate_new_token_ = value;
}
inline void CEcon_GetTradeOfferAccessToken_Request::set_generate_new_token(bool value) {
  _internal_set_generate_new_token(value);
  // @@protoc_insertion_point(field_set:CEcon_GetTradeOfferAccessToken_Request.generate_new_token)
}

// -------------------------------------------------------------------

// CEcon_GetTradeOfferAccessToken_Response

// optional string trade_offer_access_token = 1;
inline bool CEcon_GetTradeOfferAccessToken_Response::_internal_has_trade_offer_access_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetTradeOfferAccessToken_Response::has_trade_offer_access_token() const {
  return _internal_has_trade_offer_access_token();
}
inline void CEcon_GetTradeOfferAccessToken_Response::clear_trade_offer_access_token() {
  trade_offer_access_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEcon_GetTradeOfferAccessToken_Response::trade_offer_access_token() const {
  // @@protoc_insertion_point(field_get:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  return _internal_trade_offer_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEcon_GetTradeOfferAccessToken_Response::set_trade_offer_access_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 trade_offer_access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}
inline std::string* CEcon_GetTradeOfferAccessToken_Response::mutable_trade_offer_access_token() {
  std::string* _s = _internal_mutable_trade_offer_access_token();
  // @@protoc_insertion_point(field_mutable:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  return _s;
}
inline const std::string& CEcon_GetTradeOfferAccessToken_Response::_internal_trade_offer_access_token() const {
  return trade_offer_access_token_.Get();
}
inline void CEcon_GetTradeOfferAccessToken_Response::_internal_set_trade_offer_access_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trade_offer_access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEcon_GetTradeOfferAccessToken_Response::_internal_mutable_trade_offer_access_token() {
  _has_bits_[0] |= 0x00000001u;
  return trade_offer_access_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEcon_GetTradeOfferAccessToken_Response::release_trade_offer_access_token() {
  // @@protoc_insertion_point(field_release:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
  if (!_internal_has_trade_offer_access_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = trade_offer_access_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_offer_access_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_offer_access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEcon_GetTradeOfferAccessToken_Response::set_allocated_trade_offer_access_token(std::string* trade_offer_access_token) {
  if (trade_offer_access_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trade_offer_access_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_offer_access_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_offer_access_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_offer_access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token)
}

// -------------------------------------------------------------------

// CEcon_ClientGetItemShopOverlayAuthURL_Request

// optional string return_url = 1;
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Request::_internal_has_return_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Request::has_return_url() const {
  return _internal_has_return_url();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::clear_return_url() {
  return_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEcon_ClientGetItemShopOverlayAuthURL_Request::return_url() const {
  // @@protoc_insertion_point(field_get:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  return _internal_return_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_return_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 return_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Request::mutable_return_url() {
  std::string* _s = _internal_mutable_return_url();
  // @@protoc_insertion_point(field_mutable:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  return _s;
}
inline const std::string& CEcon_ClientGetItemShopOverlayAuthURL_Request::_internal_return_url() const {
  return return_url_.Get();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::_internal_set_return_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  return_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Request::_internal_mutable_return_url() {
  _has_bits_[0] |= 0x00000001u;
  return return_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Request::release_return_url() {
  // @@protoc_insertion_point(field_release:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
  if (!_internal_has_return_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = return_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (return_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    return_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::set_allocated_return_url(std::string* return_url) {
  if (return_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  return_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), return_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (return_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    return_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url)
}

// -------------------------------------------------------------------

// CEcon_ClientGetItemShopOverlayAuthURL_Response

// optional string url = 1;
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Response::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_ClientGetItemShopOverlayAuthURL_Response::has_url() const {
  return _internal_has_url();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEcon_ClientGetItemShopOverlayAuthURL_Response::url() const {
  // @@protoc_insertion_point(field_get:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Response::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  return _s;
}
inline const std::string& CEcon_ClientGetItemShopOverlayAuthURL_Response::_internal_url() const {
  return url_.Get();
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Response::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEcon_ClientGetItemShopOverlayAuthURL_Response::release_url() {
  // @@protoc_insertion_point(field_release:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEcon_ClientGetItemShopOverlayAuthURL_Response.url)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Request_Class

// optional uint64 classid = 1;
inline bool CEcon_GetAssetClassInfo_Request_Class::_internal_has_classid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetAssetClassInfo_Request_Class::has_classid() const {
  return _internal_has_classid();
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_classid() {
  classid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CEcon_GetAssetClassInfo_Request_Class::_internal_classid() const {
  return classid_;
}
inline uint64_t CEcon_GetAssetClassInfo_Request_Class::classid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.Class.classid)
  return _internal_classid();
}
inline void CEcon_GetAssetClassInfo_Request_Class::_internal_set_classid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  classid_ = value;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.Class.classid)
}

// optional uint64 instanceid = 2;
inline bool CEcon_GetAssetClassInfo_Request_Class::_internal_has_instanceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEcon_GetAssetClassInfo_Request_Class::has_instanceid() const {
  return _internal_has_instanceid();
}
inline void CEcon_GetAssetClassInfo_Request_Class::clear_instanceid() {
  instanceid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CEcon_GetAssetClassInfo_Request_Class::_internal_instanceid() const {
  return instanceid_;
}
inline uint64_t CEcon_GetAssetClassInfo_Request_Class::instanceid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.Class.instanceid)
  return _internal_instanceid();
}
inline void CEcon_GetAssetClassInfo_Request_Class::_internal_set_instanceid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  instanceid_ = value;
}
inline void CEcon_GetAssetClassInfo_Request_Class::set_instanceid(uint64_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.Class.instanceid)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Request

// optional string language = 1;
inline bool CEcon_GetAssetClassInfo_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEcon_GetAssetClassInfo_Request::has_language() const {
  return _internal_has_language();
}
inline void CEcon_GetAssetClassInfo_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEcon_GetAssetClassInfo_Request::language() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEcon_GetAssetClassInfo_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.language)
}
inline std::string* CEcon_GetAssetClassInfo_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Request.language)
  return _s;
}
inline const std::string& CEcon_GetAssetClassInfo_Request::_internal_language() const {
  return language_.Get();
}
inline void CEcon_GetAssetClassInfo_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEcon_GetAssetClassInfo_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEcon_GetAssetClassInfo_Request::release_language() {
  // @@protoc_insertion_point(field_release:CEcon_GetAssetClassInfo_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CEcon_GetAssetClassInfo_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CEcon_GetAssetClassInfo_Request.language)
}

// optional uint32 appid = 2;
inline bool CEcon_GetAssetClassInfo_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEcon_GetAssetClassInfo_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CEcon_GetAssetClassInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CEcon_GetAssetClassInfo_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CEcon_GetAssetClassInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.appid)
  return _internal_appid();
}
inline void CEcon_GetAssetClassInfo_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CEcon_GetAssetClassInfo_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.appid)
}

// repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
inline int CEcon_GetAssetClassInfo_Request::_internal_classes_size() const {
  return classes_.size();
}
inline int CEcon_GetAssetClassInfo_Request::classes_size() const {
  return _internal_classes_size();
}
inline void CEcon_GetAssetClassInfo_Request::clear_classes() {
  classes_.Clear();
}
inline ::CEcon_GetAssetClassInfo_Request_Class* CEcon_GetAssetClassInfo_Request::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Request.classes)
  return classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >*
CEcon_GetAssetClassInfo_Request::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetAssetClassInfo_Request.classes)
  return &classes_;
}
inline const ::CEcon_GetAssetClassInfo_Request_Class& CEcon_GetAssetClassInfo_Request::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline const ::CEcon_GetAssetClassInfo_Request_Class& CEcon_GetAssetClassInfo_Request::classes(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.classes)
  return _internal_classes(index);
}
inline ::CEcon_GetAssetClassInfo_Request_Class* CEcon_GetAssetClassInfo_Request::_internal_add_classes() {
  return classes_.Add();
}
inline ::CEcon_GetAssetClassInfo_Request_Class* CEcon_GetAssetClassInfo_Request::add_classes() {
  ::CEcon_GetAssetClassInfo_Request_Class* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:CEcon_GetAssetClassInfo_Request.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEcon_GetAssetClassInfo_Request_Class >&
CEcon_GetAssetClassInfo_Request::classes() const {
  // @@protoc_insertion_point(field_list:CEcon_GetAssetClassInfo_Request.classes)
  return classes_;
}

// optional bool high_pri = 4;
inline bool CEcon_GetAssetClassInfo_Request::_internal_has_high_pri() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEcon_GetAssetClassInfo_Request::has_high_pri() const {
  return _internal_has_high_pri();
}
inline void CEcon_GetAssetClassInfo_Request::clear_high_pri() {
  high_pri_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CEcon_GetAssetClassInfo_Request::_internal_high_pri() const {
  return high_pri_;
}
inline bool CEcon_GetAssetClassInfo_Request::high_pri() const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Request.high_pri)
  return _internal_high_pri();
}
inline void CEcon_GetAssetClassInfo_Request::_internal_set_high_pri(bool value) {
  _has_bits_[0] |= 0x00000004u;
  high_pri_ = value;
}
inline void CEcon_GetAssetClassInfo_Request::set_high_pri(bool value) {
  _internal_set_high_pri(value);
  // @@protoc_insertion_point(field_set:CEcon_GetAssetClassInfo_Request.high_pri)
}

// -------------------------------------------------------------------

// CEcon_GetAssetClassInfo_Response

// repeated .CEconItem_Description descriptions = 1;
inline int CEcon_GetAssetClassInfo_Response::_internal_descriptions_size() const {
  return descriptions_.size();
}
inline int CEcon_GetAssetClassInfo_Response::descriptions_size() const {
  return _internal_descriptions_size();
}
inline void CEcon_GetAssetClassInfo_Response::clear_descriptions() {
  descriptions_.Clear();
}
inline ::CEconItem_Description* CEcon_GetAssetClassInfo_Response::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >*
CEcon_GetAssetClassInfo_Response::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CEcon_GetAssetClassInfo_Response.descriptions)
  return &descriptions_;
}
inline const ::CEconItem_Description& CEcon_GetAssetClassInfo_Response::_internal_descriptions(int index) const {
  return descriptions_.Get(index);
}
inline const ::CEconItem_Description& CEcon_GetAssetClassInfo_Response::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CEcon_GetAssetClassInfo_Response.descriptions)
  return _internal_descriptions(index);
}
inline ::CEconItem_Description* CEcon_GetAssetClassInfo_Response::_internal_add_descriptions() {
  return descriptions_.Add();
}
inline ::CEconItem_Description* CEcon_GetAssetClassInfo_Response::add_descriptions() {
  ::CEconItem_Description* _add = _internal_add_descriptions();
  // @@protoc_insertion_point(field_add:CEcon_GetAssetClassInfo_Response.descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItem_Description >&
CEcon_GetAssetClassInfo_Response::descriptions() const {
  // @@protoc_insertion_point(field_list:CEcon_GetAssetClassInfo_Response.descriptions)
  return descriptions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fecon_2esteamclient_2eproto
