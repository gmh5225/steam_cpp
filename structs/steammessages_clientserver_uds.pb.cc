// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_uds.proto

#include "steammessages_clientserver_uds.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_remote_(uint64_t{0u})
  , appid_(0){}
struct CMsgClientUDSP2PSessionStartedDefaultTypeInternal {
  constexpr CMsgClientUDSP2PSessionStartedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUDSP2PSessionStartedDefaultTypeInternal() {}
  union {
    CMsgClientUDSP2PSessionStarted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUDSP2PSessionStartedDefaultTypeInternal _CMsgClientUDSP2PSessionStarted_default_instance_;
constexpr CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_remote_(uint64_t{0u})
  , appid_(0)
  , session_length_sec_(0)
  , session_error_(0)
  , nattype_(0)
  , bytes_recv_(0)
  , bytes_sent_(0)
  , bytes_sent_relay_(0)
  , bytes_recv_relay_(0)
  , time_to_connect_ms_(0){}
struct CMsgClientUDSP2PSessionEndedDefaultTypeInternal {
  constexpr CMsgClientUDSP2PSessionEndedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUDSP2PSessionEndedDefaultTypeInternal() {}
  union {
    CMsgClientUDSP2PSessionEnded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUDSP2PSessionEndedDefaultTypeInternal _CMsgClientUDSP2PSessionEnded_default_instance_;
constexpr CMsgClientGetClientDetails::CMsgClientGetClientDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientGetClientDetailsDefaultTypeInternal {
  constexpr CMsgClientGetClientDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientDetailsDefaultTypeInternal() {}
  union {
    CMsgClientGetClientDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientDetailsDefaultTypeInternal _CMsgClientGetClientDetails_default_instance_;
constexpr CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , time_running_sec_(0u){}
struct CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal {
  constexpr CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal() {}
  union {
    CMsgClientGetClientDetailsResponse_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientDetailsResponse_GameDefaultTypeInternal _CMsgClientGetClientDetailsResponse_Game_default_instance_;
constexpr CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_running_()
  , os_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_public_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_private_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , package_version_(0u)
  , protocol_version_(0u)
  , bytes_available_(uint64_t{0u})
  , clientcomm_version_(0u){}
struct CMsgClientGetClientDetailsResponseDefaultTypeInternal {
  constexpr CMsgClientGetClientDetailsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetClientDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientDetailsResponseDefaultTypeInternal _CMsgClientGetClientDetailsResponse_default_instance_;
constexpr CMsgClientGetClientAppList::CMsgClientGetClientAppList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : media_(false)
  , tools_(false)
  , games_(false)
  , only_installed_(false)
  , only_changing_(false)
  , comics_(false)
  , include_client_info_(false){}
struct CMsgClientGetClientAppListDefaultTypeInternal {
  constexpr CMsgClientGetClientAppListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientAppListDefaultTypeInternal() {}
  union {
    CMsgClientGetClientAppList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientAppListDefaultTypeInternal _CMsgClientGetClientAppList_default_instance_;
constexpr CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , installed_(false){}
struct CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal {
  constexpr CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal() {}
  union {
    CMsgClientGetClientAppListResponse_App_DLC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientAppListResponse_App_DLCDefaultTypeInternal _CMsgClientGetClientAppListResponse_App_DLC_default_instance_;
constexpr CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dlcs_()
  , category_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , favorite_(false)
  , installed_(false)
  , auto_update_(false)
  , download_paused_(false)
  , bytes_downloaded_(uint64_t{0u})
  , bytes_to_download_(uint64_t{0u})
  , bytes_download_rate_(0u)
  , num_downloading_(0u)
  , bytes_staged_(uint64_t{0u})
  , num_paused_(0u)
  , changing_(false)
  , available_on_platform_(false)
  , uninstalling_(false)
  , bytes_to_stage_(uint64_t{0u})
  , bytes_required_(uint64_t{0u})
  , source_buildid_(0u)
  , target_buildid_(0u)
  , estimated_seconds_remaining_(0u)
  , queue_position_(0)
  , rt_time_scheduled_(0u){}
struct CMsgClientGetClientAppListResponse_AppDefaultTypeInternal {
  constexpr CMsgClientGetClientAppListResponse_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientAppListResponse_AppDefaultTypeInternal() {}
  union {
    CMsgClientGetClientAppListResponse_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientAppListResponse_AppDefaultTypeInternal _CMsgClientGetClientAppListResponse_App_default_instance_;
constexpr CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , client_info_(nullptr)
  , bytes_available_(uint64_t{0u}){}
struct CMsgClientGetClientAppListResponseDefaultTypeInternal {
  constexpr CMsgClientGetClientAppListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClientAppListResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetClientAppListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClientAppListResponseDefaultTypeInternal _CMsgClientGetClientAppListResponse_default_instance_;
constexpr CMsgClientInstallClientApp::CMsgClientInstallClientApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CMsgClientInstallClientAppDefaultTypeInternal {
  constexpr CMsgClientInstallClientAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientInstallClientAppDefaultTypeInternal() {}
  union {
    CMsgClientInstallClientApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientInstallClientAppDefaultTypeInternal _CMsgClientInstallClientApp_default_instance_;
constexpr CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgClientInstallClientAppResponseDefaultTypeInternal {
  constexpr CMsgClientInstallClientAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientInstallClientAppResponseDefaultTypeInternal() {}
  union {
    CMsgClientInstallClientAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientInstallClientAppResponseDefaultTypeInternal _CMsgClientInstallClientAppResponse_default_instance_;
constexpr CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CMsgClientUninstallClientAppDefaultTypeInternal {
  constexpr CMsgClientUninstallClientAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUninstallClientAppDefaultTypeInternal() {}
  union {
    CMsgClientUninstallClientApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUninstallClientAppDefaultTypeInternal _CMsgClientUninstallClientApp_default_instance_;
constexpr CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgClientUninstallClientAppResponseDefaultTypeInternal {
  constexpr CMsgClientUninstallClientAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUninstallClientAppResponseDefaultTypeInternal() {}
  union {
    CMsgClientUninstallClientAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUninstallClientAppResponseDefaultTypeInternal _CMsgClientUninstallClientAppResponse_default_instance_;
constexpr CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , update_(false){}
struct CMsgClientSetClientAppUpdateStateDefaultTypeInternal {
  constexpr CMsgClientSetClientAppUpdateStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSetClientAppUpdateStateDefaultTypeInternal() {}
  union {
    CMsgClientSetClientAppUpdateState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSetClientAppUpdateStateDefaultTypeInternal _CMsgClientSetClientAppUpdateState_default_instance_;
constexpr CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal {
  constexpr CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal() {}
  union {
    CMsgClientSetClientAppUpdateStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSetClientAppUpdateStateResponseDefaultTypeInternal _CMsgClientSetClientAppUpdateStateResponse_default_instance_;
constexpr CMsgClientEnableOrDisableDownloads::CMsgClientEnableOrDisableDownloads(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct CMsgClientEnableOrDisableDownloadsDefaultTypeInternal {
  constexpr CMsgClientEnableOrDisableDownloadsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEnableOrDisableDownloadsDefaultTypeInternal() {}
  union {
    CMsgClientEnableOrDisableDownloads _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEnableOrDisableDownloadsDefaultTypeInternal _CMsgClientEnableOrDisableDownloads_default_instance_;
constexpr CMsgClientEnableOrDisableDownloadsResponse::CMsgClientEnableOrDisableDownloadsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgClientEnableOrDisableDownloadsResponseDefaultTypeInternal {
  constexpr CMsgClientEnableOrDisableDownloadsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEnableOrDisableDownloadsResponseDefaultTypeInternal() {}
  union {
    CMsgClientEnableOrDisableDownloadsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEnableOrDisableDownloadsResponseDefaultTypeInternal _CMsgClientEnableOrDisableDownloadsResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5fuds_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fuds_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5fuds_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionStarted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionStarted, steamid_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionStarted, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, steamid_remote_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, session_length_sec_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, session_error_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, nattype_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, bytes_recv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, bytes_sent_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, bytes_recv_relay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUDSP2PSessionEnded, time_to_connect_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse_Game, extra_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse_Game, time_running_sec_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, package_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, os_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, ip_public_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, ip_private_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, games_running_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, bytes_available_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientDetailsResponse, clientcomm_version_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, media_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, tools_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, only_installed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, only_changing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, comics_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppList, include_client_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App_DLC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App_DLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App_DLC, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App_DLC, installed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, category_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, app_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, favorite_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, installed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, auto_update_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_to_download_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_download_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, dlcs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, download_paused_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, num_downloading_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, num_paused_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, changing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, available_on_platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_staged_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_to_stage_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, bytes_required_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, source_buildid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, target_buildid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, estimated_seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, queue_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, uninstalling_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse_App, rt_time_scheduled_),
  2,
  0,
  1,
  3,
  4,
  5,
  7,
  8,
  9,
  ~0u,
  6,
  10,
  12,
  13,
  14,
  11,
  16,
  17,
  18,
  19,
  20,
  21,
  15,
  22,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse, apps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse, bytes_available_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClientAppListResponse, client_info_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientApp, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientAppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientInstallClientAppResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientApp, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientAppResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUninstallClientAppResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateState, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateState, update_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateStateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetClientAppUpdateStateResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloads, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloads, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloads, enable_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloadsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloadsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEnableOrDisableDownloadsResponse, result_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgClientUDSP2PSessionStarted)},
  { 10, 26, -1, sizeof(::CMsgClientUDSP2PSessionEnded)},
  { 36, -1, -1, sizeof(::CMsgClientGetClientDetails)},
  { 42, 51, -1, sizeof(::CMsgClientGetClientDetailsResponse_Game)},
  { 54, 69, -1, sizeof(::CMsgClientGetClientDetailsResponse)},
  { 78, 91, -1, sizeof(::CMsgClientGetClientAppList)},
  { 98, 106, -1, sizeof(::CMsgClientGetClientAppListResponse_App_DLC)},
  { 108, 138, -1, sizeof(::CMsgClientGetClientAppListResponse_App)},
  { 162, 171, -1, sizeof(::CMsgClientGetClientAppListResponse)},
  { 174, 181, -1, sizeof(::CMsgClientInstallClientApp)},
  { 182, 189, -1, sizeof(::CMsgClientInstallClientAppResponse)},
  { 190, 197, -1, sizeof(::CMsgClientUninstallClientApp)},
  { 198, 205, -1, sizeof(::CMsgClientUninstallClientAppResponse)},
  { 206, 214, -1, sizeof(::CMsgClientSetClientAppUpdateState)},
  { 216, 223, -1, sizeof(::CMsgClientSetClientAppUpdateStateResponse)},
  { 224, 231, -1, sizeof(::CMsgClientEnableOrDisableDownloads)},
  { 232, 239, -1, sizeof(::CMsgClientEnableOrDisableDownloadsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUDSP2PSessionStarted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUDSP2PSessionEnded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientDetailsResponse_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientAppList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientAppListResponse_App_DLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientAppListResponse_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClientAppListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientInstallClientApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientInstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUninstallClientApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUninstallClientAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSetClientAppUpdateState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSetClientAppUpdateStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEnableOrDisableDownloads_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEnableOrDisableDownloadsResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fuds_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_clientserver_uds.proto\032\030"
  "steammessages_base.proto\"G\n\036CMsgClientUD"
  "SP2PSessionStarted\022\026\n\016steamid_remote\030\001 \001"
  "(\006\022\r\n\005appid\030\002 \001(\005\"\201\002\n\034CMsgClientUDSP2PSe"
  "ssionEnded\022\026\n\016steamid_remote\030\001 \001(\006\022\r\n\005ap"
  "pid\030\002 \001(\005\022\032\n\022session_length_sec\030\003 \001(\005\022\025\n"
  "\rsession_error\030\004 \001(\005\022\017\n\007nattype\030\005 \001(\005\022\022\n"
  "\nbytes_recv\030\006 \001(\005\022\022\n\nbytes_sent\030\007 \001(\005\022\030\n"
  "\020bytes_sent_relay\030\010 \001(\005\022\030\n\020bytes_recv_re"
  "lay\030\t \001(\005\022\032\n\022time_to_connect_ms\030\n \001(\005\"\034\n"
  "\032CMsgClientGetClientDetails\"\333\002\n\"CMsgClie"
  "ntGetClientDetailsResponse\022\027\n\017package_ve"
  "rsion\030\001 \001(\r\022\n\n\002os\030\002 \001(\t\022\024\n\014machine_name\030"
  "\003 \001(\t\022\021\n\tip_public\030\004 \001(\t\022\022\n\nip_private\030\005"
  " \001(\t\022\?\n\rgames_running\030\006 \003(\0132(.CMsgClient"
  "GetClientDetailsResponse.Game\022\027\n\017bytes_a"
  "vailable\030\007 \001(\004\022\030\n\020protocol_version\030\010 \001(\r"
  "\022\032\n\022clientcomm_version\030\t \001(\r\032C\n\004Game\022\r\n\005"
  "appid\030\001 \001(\r\022\022\n\nextra_info\030\002 \001(\t\022\030\n\020time_"
  "running_sec\030\003 \001(\r\"\245\001\n\032CMsgClientGetClien"
  "tAppList\022\r\n\005media\030\001 \001(\010\022\r\n\005tools\030\002 \001(\010\022\r"
  "\n\005games\030\003 \001(\010\022\026\n\016only_installed\030\004 \001(\010\022\025\n"
  "\ronly_changing\030\005 \001(\010\022\016\n\006comics\030\006 \001(\010\022\033\n\023"
  "include_client_info\030\007 \001(\010\"\264\006\n\"CMsgClient"
  "GetClientAppListResponse\0225\n\004apps\030\001 \003(\0132\'"
  ".CMsgClientGetClientAppListResponse.App\022"
  "\027\n\017bytes_available\030\002 \001(\004\0228\n\013client_info\030"
  "\003 \001(\0132#.CMsgClientGetClientDetailsRespon"
  "se\032\203\005\n\003App\022\r\n\005appid\030\001 \001(\r\022\020\n\010category\030\002 "
  "\001(\t\022\020\n\010app_type\030\n \001(\t\022\020\n\010favorite\030\003 \001(\010\022"
  "\021\n\tinstalled\030\004 \001(\010\022\023\n\013auto_update\030\005 \001(\010\022"
  "\030\n\020bytes_downloaded\030\006 \001(\004\022\031\n\021bytes_to_do"
  "wnload\030\007 \001(\004\022\033\n\023bytes_download_rate\030\010 \001("
  "\r\0229\n\004dlcs\030\t \003(\0132+.CMsgClientGetClientApp"
  "ListResponse.App.DLC\022\027\n\017download_paused\030"
  "\013 \001(\010\022\027\n\017num_downloading\030\014 \001(\r\022\022\n\nnum_pa"
  "used\030\r \001(\r\022\020\n\010changing\030\016 \001(\010\022\035\n\025availabl"
  "e_on_platform\030\017 \001(\010\022\024\n\014bytes_staged\030\020 \001("
  "\004\022\026\n\016bytes_to_stage\030\021 \001(\004\022\026\n\016bytes_requi"
  "red\030\022 \001(\004\022\026\n\016source_buildid\030\023 \001(\r\022\026\n\016tar"
  "get_buildid\030\024 \001(\r\022#\n\033estimated_seconds_r"
  "emaining\030\025 \001(\r\022\026\n\016queue_position\030\026 \001(\005\022\024"
  "\n\014uninstalling\030\027 \001(\010\022\031\n\021rt_time_schedule"
  "d\030\030 \001(\r\032\'\n\003DLC\022\r\n\005appid\030\001 \001(\r\022\021\n\tinstall"
  "ed\030\002 \001(\010\"+\n\032CMsgClientInstallClientApp\022\r"
  "\n\005appid\030\001 \001(\r\"4\n\"CMsgClientInstallClient"
  "AppResponse\022\016\n\006result\030\001 \001(\r\"-\n\034CMsgClien"
  "tUninstallClientApp\022\r\n\005appid\030\001 \001(\r\"6\n$CM"
  "sgClientUninstallClientAppResponse\022\016\n\006re"
  "sult\030\001 \001(\r\"B\n!CMsgClientSetClientAppUpda"
  "teState\022\r\n\005appid\030\001 \001(\r\022\016\n\006update\030\002 \001(\010\";"
  "\n)CMsgClientSetClientAppUpdateStateRespo"
  "nse\022\016\n\006result\030\001 \001(\r\"4\n\"CMsgClientEnableO"
  "rDisableDownloads\022\016\n\006enable\030\001 \001(\010\"<\n*CMs"
  "gClientEnableOrDisableDownloadsResponse\022"
  "\016\n\006result\030\001 \001(\rB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fuds_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fuds_2eproto = {
  false, false, 2222, descriptor_table_protodef_steammessages_5fclientserver_5fuds_2eproto, "steammessages_clientserver_uds.proto", 
  &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once, descriptor_table_steammessages_5fclientserver_5fuds_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fuds_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fuds_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fuds_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fuds_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5fuds_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fuds_2eproto(&descriptor_table_steammessages_5fclientserver_5fuds_2eproto);

// ===================================================================

class CMsgClientUDSP2PSessionStarted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUDSP2PSessionStarted>()._has_bits_);
  static void set_has_steamid_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUDSP2PSessionStarted)
}
CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(const CMsgClientUDSP2PSessionStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUDSP2PSessionStarted)
}

inline void CMsgClientUDSP2PSessionStarted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_remote_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
}

CMsgClientUDSP2PSessionStarted::~CMsgClientUDSP2PSessionStarted() {
  // @@protoc_insertion_point(destructor:CMsgClientUDSP2PSessionStarted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUDSP2PSessionStarted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUDSP2PSessionStarted::ArenaDtor(void* object) {
  CMsgClientUDSP2PSessionStarted* _this = reinterpret_cast< CMsgClientUDSP2PSessionStarted* >(object);
  (void)_this;
}
void CMsgClientUDSP2PSessionStarted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUDSP2PSessionStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUDSP2PSessionStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUDSP2PSessionStarted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_remote_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_remote_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUDSP2PSessionStarted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_remote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_remote(&has_bits);
          steamid_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUDSP2PSessionStarted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUDSP2PSessionStarted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUDSP2PSessionStarted)
  return target;
}

size_t CMsgClientUDSP2PSessionStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUDSP2PSessionStarted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_remote = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUDSP2PSessionStarted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUDSP2PSessionStarted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUDSP2PSessionStarted::GetClassData() const { return &_class_data_; }

void CMsgClientUDSP2PSessionStarted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUDSP2PSessionStarted *>(to)->MergeFrom(
      static_cast<const CMsgClientUDSP2PSessionStarted &>(from));
}


void CMsgClientUDSP2PSessionStarted::MergeFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUDSP2PSessionStarted)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const CMsgClientUDSP2PSessionStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUDSP2PSessionStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionStarted::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionStarted::InternalSwap(CMsgClientUDSP2PSessionStarted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, appid_)
      + sizeof(CMsgClientUDSP2PSessionStarted::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUDSP2PSessionStarted, steamid_remote_)>(
          reinterpret_cast<char*>(&steamid_remote_),
          reinterpret_cast<char*>(&other->steamid_remote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUDSP2PSessionStarted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[0]);
}

// ===================================================================

class CMsgClientUDSP2PSessionEnded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUDSP2PSessionEnded>()._has_bits_);
  static void set_has_steamid_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_length_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nattype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bytes_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bytes_sent_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_recv_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_to_connect_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUDSP2PSessionEnded)
}
CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(const CMsgClientUDSP2PSessionEnded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_remote_, &from.steamid_remote_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_connect_ms_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(time_to_connect_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUDSP2PSessionEnded)
}

inline void CMsgClientUDSP2PSessionEnded::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_remote_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_to_connect_ms_) -
    reinterpret_cast<char*>(&steamid_remote_)) + sizeof(time_to_connect_ms_));
}

CMsgClientUDSP2PSessionEnded::~CMsgClientUDSP2PSessionEnded() {
  // @@protoc_insertion_point(destructor:CMsgClientUDSP2PSessionEnded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUDSP2PSessionEnded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUDSP2PSessionEnded::ArenaDtor(void* object) {
  CMsgClientUDSP2PSessionEnded* _this = reinterpret_cast< CMsgClientUDSP2PSessionEnded* >(object);
  (void)_this;
}
void CMsgClientUDSP2PSessionEnded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUDSP2PSessionEnded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUDSP2PSessionEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUDSP2PSessionEnded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_remote_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_sent_relay_) -
        reinterpret_cast<char*>(&steamid_remote_)) + sizeof(bytes_sent_relay_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&bytes_recv_relay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_to_connect_ms_) -
        reinterpret_cast<char*>(&bytes_recv_relay_)) + sizeof(time_to_connect_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUDSP2PSessionEnded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_remote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_remote(&has_bits);
          steamid_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_length_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_session_length_sec(&has_bits);
          session_length_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 session_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_session_error(&has_bits);
          session_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nattype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_nattype(&has_bits);
          nattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bytes_recv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bytes_recv(&has_bits);
          bytes_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bytes_sent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bytes_sent(&has_bits);
          bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bytes_sent_relay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_sent_relay(&has_bits);
          bytes_sent_relay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bytes_recv_relay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_recv_relay(&has_bits);
          bytes_recv_relay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_to_connect_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_time_to_connect_ms(&has_bits);
          time_to_connect_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUDSP2PSessionEnded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUDSP2PSessionEnded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_remote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_remote(), target);
  }

  // optional int32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional int32 session_length_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_session_length_sec(), target);
  }

  // optional int32 session_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_session_error(), target);
  }

  // optional int32 nattype = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nattype(), target);
  }

  // optional int32 bytes_recv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bytes_recv(), target);
  }

  // optional int32 bytes_sent = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bytes_sent(), target);
  }

  // optional int32 bytes_sent_relay = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bytes_sent_relay(), target);
  }

  // optional int32 bytes_recv_relay = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_bytes_recv_relay(), target);
  }

  // optional int32 time_to_connect_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_time_to_connect_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUDSP2PSessionEnded)
  return target;
}

size_t CMsgClientUDSP2PSessionEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUDSP2PSessionEnded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steamid_remote = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional int32 session_length_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_session_length_sec());
    }

    // optional int32 session_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_session_error());
    }

    // optional int32 nattype = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nattype());
    }

    // optional int32 bytes_recv = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bytes_recv());
    }

    // optional int32 bytes_sent = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bytes_sent());
    }

    // optional int32 bytes_sent_relay = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bytes_sent_relay());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 bytes_recv_relay = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bytes_recv_relay());
    }

    // optional int32 time_to_connect_ms = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time_to_connect_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUDSP2PSessionEnded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUDSP2PSessionEnded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUDSP2PSessionEnded::GetClassData() const { return &_class_data_; }

void CMsgClientUDSP2PSessionEnded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUDSP2PSessionEnded *>(to)->MergeFrom(
      static_cast<const CMsgClientUDSP2PSessionEnded &>(from));
}


void CMsgClientUDSP2PSessionEnded::MergeFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUDSP2PSessionEnded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_remote_ = from.steamid_remote_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_length_sec_ = from.session_length_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_error_ = from.session_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      nattype_ = from.nattype_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_recv_ = from.bytes_recv_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_sent_ = from.bytes_sent_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_sent_relay_ = from.bytes_sent_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_recv_relay_ = from.bytes_recv_relay_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_to_connect_ms_ = from.time_to_connect_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const CMsgClientUDSP2PSessionEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUDSP2PSessionEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionEnded::IsInitialized() const {
  return true;
}

void CMsgClientUDSP2PSessionEnded::InternalSwap(CMsgClientUDSP2PSessionEnded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, time_to_connect_ms_)
      + sizeof(CMsgClientUDSP2PSessionEnded::time_to_connect_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUDSP2PSessionEnded, steamid_remote_)>(
          reinterpret_cast<char*>(&steamid_remote_),
          reinterpret_cast<char*>(&other->steamid_remote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUDSP2PSessionEnded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[1]);
}

// ===================================================================

class CMsgClientGetClientDetails::_Internal {
 public:
};

CMsgClientGetClientDetails::CMsgClientGetClientDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientDetails)
}
CMsgClientGetClientDetails::CMsgClientGetClientDetails(const CMsgClientGetClientDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientDetails)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientDetails::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[2]);
}

// ===================================================================

class CMsgClientGetClientDetailsResponse_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientDetailsResponse_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_running_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientDetailsResponse.Game)
}
CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(const CMsgClientGetClientDetailsResponse_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extra_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra_info()) {
    extra_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_running_sec_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientDetailsResponse.Game)
}

inline void CMsgClientGetClientDetailsResponse_Game::SharedCtor() {
extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extra_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_running_sec_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
}

CMsgClientGetClientDetailsResponse_Game::~CMsgClientGetClientDetailsResponse_Game() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientDetailsResponse.Game)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientDetailsResponse_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extra_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse_Game::ArenaDtor(void* object) {
  CMsgClientGetClientDetailsResponse_Game* _this = reinterpret_cast< CMsgClientGetClientDetailsResponse_Game* >(object);
  (void)_this;
}
void CMsgClientGetClientDetailsResponse_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientDetailsResponse_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientDetailsResponse_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientDetailsResponse.Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extra_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_running_sec_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(time_running_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientDetailsResponse_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extra_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extra_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientDetailsResponse.Game.extra_info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_running_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_running_sec(&has_bits);
          time_running_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientDetailsResponse_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientDetailsResponse.Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string extra_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extra_info().data(), static_cast<int>(this->_internal_extra_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientDetailsResponse.Game.extra_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extra_info(), target);
  }

  // optional uint32 time_running_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_running_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientDetailsResponse.Game)
  return target;
}

size_t CMsgClientGetClientDetailsResponse_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientDetailsResponse.Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string extra_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extra_info());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 time_running_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_running_sec());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientDetailsResponse_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientDetailsResponse_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientDetailsResponse_Game::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientDetailsResponse_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientDetailsResponse_Game *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientDetailsResponse_Game &>(from));
}


void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientDetailsResponse.Game)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extra_info(from._internal_extra_info());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_running_sec_ = from.time_running_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientDetailsResponse.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse_Game::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse_Game::InternalSwap(CMsgClientGetClientDetailsResponse_Game* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_info_, lhs_arena,
      &other->extra_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, time_running_sec_)
      + sizeof(CMsgClientGetClientDetailsResponse_Game::time_running_sec_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientDetailsResponse_Game, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientDetailsResponse_Game::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[3]);
}

// ===================================================================

class CMsgClientGetClientDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientDetailsResponse>()._has_bits_);
  static void set_has_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip_public(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ip_private(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_available(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clientcomm_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  games_running_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientDetailsResponse)
}
CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(const CMsgClientGetClientDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      games_running_(from.games_running_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os()) {
    os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os(), 
      GetArenaForAllocation());
  }
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  ip_public_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_public_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip_public()) {
    ip_public_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_public(), 
      GetArenaForAllocation());
  }
  ip_private_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_private_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip_private()) {
    ip_private_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_private(), 
      GetArenaForAllocation());
  }
  ::memcpy(&package_version_, &from.package_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientcomm_version_) -
    reinterpret_cast<char*>(&package_version_)) + sizeof(clientcomm_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientDetailsResponse)
}

inline void CMsgClientGetClientDetailsResponse::SharedCtor() {
os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_public_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_public_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_private_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_private_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&package_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientcomm_version_) -
    reinterpret_cast<char*>(&package_version_)) + sizeof(clientcomm_version_));
}

CMsgClientGetClientDetailsResponse::~CMsgClientGetClientDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientDetailsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_public_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_private_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientDetailsResponse::ArenaDtor(void* object) {
  CMsgClientGetClientDetailsResponse* _this = reinterpret_cast< CMsgClientGetClientDetailsResponse* >(object);
  (void)_this;
}
void CMsgClientGetClientDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_running_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      os_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ip_public_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ip_private_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&package_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientcomm_version_) -
        reinterpret_cast<char*>(&package_version_)) + sizeof(clientcomm_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 package_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_package_version(&has_bits);
          package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string os = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientDetailsResponse.os");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientDetailsResponse.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip_public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip_public();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientDetailsResponse.ip_public");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip_private = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip_private();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientDetailsResponse.ip_private");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientGetClientDetailsResponse.Game games_running = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games_running(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_available = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bytes_available(&has_bits);
          bytes_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clientcomm_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_clientcomm_version(&has_bits);
          clientcomm_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_version(), target);
  }

  // optional string os = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientDetailsResponse.os");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_os(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientDetailsResponse.machine_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine_name(), target);
  }

  // optional string ip_public = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_public().data(), static_cast<int>(this->_internal_ip_public().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientDetailsResponse.ip_public");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip_public(), target);
  }

  // optional string ip_private = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_private().data(), static_cast<int>(this->_internal_ip_private().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientDetailsResponse.ip_private");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip_private(), target);
  }

  // repeated .CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_running_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_games_running(i), target, stream);
  }

  // optional uint64 bytes_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_bytes_available(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_protocol_version(), target);
  }

  // optional uint32 clientcomm_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_clientcomm_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientDetailsResponse)
  return target;
}

size_t CMsgClientGetClientDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGetClientDetailsResponse.Game games_running = 6;
  total_size += 1UL * this->_internal_games_running_size();
  for (const auto& msg : this->games_running_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string os = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string ip_public = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_public());
    }

    // optional string ip_private = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_private());
    }

    // optional uint32 package_version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package_version());
    }

    // optional uint32 protocol_version = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_version());
    }

    // optional uint64 bytes_available = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_available());
    }

    // optional uint32 clientcomm_version = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_clientcomm_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientDetailsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientDetailsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientDetailsResponse &>(from));
}


void CMsgClientGetClientDetailsResponse::MergeFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  games_running_.MergeFrom(from.games_running_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_os(from._internal_os());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ip_public(from._internal_ip_public());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ip_private(from._internal_ip_private());
    }
    if (cached_has_bits & 0x00000010u) {
      package_version_ = from.package_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_available_ = from.bytes_available_;
    }
    if (cached_has_bits & 0x00000080u) {
      clientcomm_version_ = from.clientcomm_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const CMsgClientGetClientDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientDetailsResponse::InternalSwap(CMsgClientGetClientDetailsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  games_running_.InternalSwap(&other->games_running_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_public_, lhs_arena,
      &other->ip_public_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_private_, lhs_arena,
      &other->ip_private_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, clientcomm_version_)
      + sizeof(CMsgClientGetClientDetailsResponse::clientcomm_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientDetailsResponse, package_version_)>(
          reinterpret_cast<char*>(&package_version_),
          reinterpret_cast<char*>(&other->package_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientDetailsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[4]);
}

// ===================================================================

class CMsgClientGetClientAppList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientAppList>()._has_bits_);
  static void set_has_media(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tools(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_games(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_only_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_only_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_comics(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_include_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientGetClientAppList::CMsgClientGetClientAppList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientAppList)
}
CMsgClientGetClientAppList::CMsgClientGetClientAppList(const CMsgClientGetClientAppList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&media_, &from.media_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_client_info_) -
    reinterpret_cast<char*>(&media_)) + sizeof(include_client_info_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientAppList)
}

inline void CMsgClientGetClientAppList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&media_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_client_info_) -
    reinterpret_cast<char*>(&media_)) + sizeof(include_client_info_));
}

CMsgClientGetClientAppList::~CMsgClientGetClientAppList() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientAppList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientAppList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetClientAppList::ArenaDtor(void* object) {
  CMsgClientGetClientAppList* _this = reinterpret_cast< CMsgClientGetClientAppList* >(object);
  (void)_this;
}
void CMsgClientGetClientAppList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientAppList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientAppList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientAppList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&media_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_client_info_) -
        reinterpret_cast<char*>(&media_)) + sizeof(include_client_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientAppList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool media = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_media(&has_bits);
          media_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tools = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tools(&has_bits);
          tools_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool games = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_games(&has_bits);
          games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_installed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_only_installed(&has_bits);
          only_installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_changing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_only_changing(&has_bits);
          only_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool comics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_comics(&has_bits);
          comics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_client_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_include_client_info(&has_bits);
          include_client_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientAppList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientAppList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool media = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_media(), target);
  }

  // optional bool tools = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tools(), target);
  }

  // optional bool games = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_games(), target);
  }

  // optional bool only_installed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_only_installed(), target);
  }

  // optional bool only_changing = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_only_changing(), target);
  }

  // optional bool comics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_comics(), target);
  }

  // optional bool include_client_info = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_include_client_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientAppList)
  return target;
}

size_t CMsgClientGetClientAppList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientAppList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool media = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool tools = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool games = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool only_installed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool only_changing = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool comics = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool include_client_info = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientAppList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientAppList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientAppList::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientAppList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientAppList *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientAppList &>(from));
}


void CMsgClientGetClientAppList::MergeFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientAppList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000002u) {
      tools_ = from.tools_;
    }
    if (cached_has_bits & 0x00000004u) {
      games_ = from.games_;
    }
    if (cached_has_bits & 0x00000008u) {
      only_installed_ = from.only_installed_;
    }
    if (cached_has_bits & 0x00000010u) {
      only_changing_ = from.only_changing_;
    }
    if (cached_has_bits & 0x00000020u) {
      comics_ = from.comics_;
    }
    if (cached_has_bits & 0x00000040u) {
      include_client_info_ = from.include_client_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientAppList::CopyFrom(const CMsgClientGetClientAppList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientAppList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppList::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppList::InternalSwap(CMsgClientGetClientAppList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppList, include_client_info_)
      + sizeof(CMsgClientGetClientAppList::include_client_info_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppList, media_)>(
          reinterpret_cast<char*>(&media_),
          reinterpret_cast<char*>(&other->media_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientAppList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[5]);
}

// ===================================================================

class CMsgClientGetClientAppListResponse_App_DLC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientAppListResponse_App_DLC>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientAppListResponse.App.DLC)
}
CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(const CMsgClientGetClientAppListResponse_App_DLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&installed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientAppListResponse.App.DLC)
}

inline void CMsgClientGetClientAppListResponse_App_DLC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&installed_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
}

CMsgClientGetClientAppListResponse_App_DLC::~CMsgClientGetClientAppListResponse_App_DLC() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientAppListResponse.App.DLC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientAppListResponse_App_DLC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetClientAppListResponse_App_DLC::ArenaDtor(void* object) {
  CMsgClientGetClientAppListResponse_App_DLC* _this = reinterpret_cast< CMsgClientGetClientAppListResponse_App_DLC* >(object);
  (void)_this;
}
void CMsgClientGetClientAppListResponse_App_DLC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientAppListResponse_App_DLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientAppListResponse_App_DLC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientAppListResponse.App.DLC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&installed_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(installed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientAppListResponse_App_DLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_installed(&has_bits);
          installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientAppListResponse_App_DLC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientAppListResponse.App.DLC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool installed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_installed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientAppListResponse.App.DLC)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App_DLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientAppListResponse.App.DLC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool installed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientAppListResponse_App_DLC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientAppListResponse_App_DLC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientAppListResponse_App_DLC::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientAppListResponse_App_DLC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientAppListResponse_App_DLC *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientAppListResponse_App_DLC &>(from));
}


void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientAppListResponse.App.DLC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      installed_ = from.installed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientAppListResponse.App.DLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App_DLC::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App_DLC::InternalSwap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, installed_)
      + sizeof(CMsgClientGetClientAppListResponse_App_DLC::installed_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App_DLC, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientAppListResponse_App_DLC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[6]);
}

// ===================================================================

class CMsgClientGetClientAppListResponse_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientAppListResponse_App>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_favorite(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_auto_update(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_to_download(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_download_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_download_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_downloading(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_available_on_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bytes_staged(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bytes_to_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bytes_required(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_source_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_target_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_estimated_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_queue_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_uninstalling(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rt_time_scheduled(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dlcs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientAppListResponse.App)
}
CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(const CMsgClientGetClientAppListResponse_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dlcs_(from.dlcs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category(), 
      GetArenaForAllocation());
  }
  app_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_type()) {
    app_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rt_time_scheduled_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(rt_time_scheduled_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientAppListResponse.App)
}

inline void CMsgClientGetClientAppListResponse_App::SharedCtor() {
category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rt_time_scheduled_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(rt_time_scheduled_));
}

CMsgClientGetClientAppListResponse_App::~CMsgClientGetClientAppListResponse_App() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientAppListResponse.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientAppListResponse_App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetClientAppListResponse_App::ArenaDtor(void* object) {
  CMsgClientGetClientAppListResponse_App* _this = reinterpret_cast< CMsgClientGetClientAppListResponse_App* >(object);
  (void)_this;
}
void CMsgClientGetClientAppListResponse_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientAppListResponse_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientAppListResponse_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientAppListResponse.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dlcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      app_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_downloaded_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(bytes_downloaded_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bytes_to_download_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uninstalling_) -
        reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(uninstalling_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&bytes_to_stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_time_scheduled_) -
        reinterpret_cast<char*>(&bytes_to_stage_)) + sizeof(rt_time_scheduled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientAppListResponse_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientAppListResponse.App.category");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool favorite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_favorite(&has_bits);
          favorite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool installed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_installed(&has_bits);
          installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_auto_update(&has_bits);
          auto_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_to_download = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bytes_to_download(&has_bits);
          bytes_to_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bytes_download_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_download_rate(&has_bits);
          bytes_download_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string app_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_app_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetClientAppListResponse.App.app_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_paused = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_download_paused(&has_bits);
          download_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_downloading = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_num_downloading(&has_bits);
          num_downloading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_paused = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_num_paused(&has_bits);
          num_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool changing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_changing(&has_bits);
          changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool available_on_platform = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_available_on_platform(&has_bits);
          available_on_platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_staged = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bytes_staged(&has_bits);
          bytes_staged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_to_stage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_bytes_to_stage(&has_bits);
          bytes_to_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_required = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_bytes_required(&has_bits);
          bytes_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_buildid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_source_buildid(&has_bits);
          source_buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_buildid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_target_buildid(&has_bits);
          target_buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 estimated_seconds_remaining = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_estimated_seconds_remaining(&has_bits);
          estimated_seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 queue_position = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_queue_position(&has_bits);
          queue_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uninstalling = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_uninstalling(&has_bits);
          uninstalling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_time_scheduled = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_rt_time_scheduled(&has_bits);
          rt_time_scheduled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientAppListResponse_App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientAppListResponse.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientAppListResponse.App.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // optional bool favorite = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_favorite(), target);
  }

  // optional bool installed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_installed(), target);
  }

  // optional bool auto_update = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_update(), target);
  }

  // optional uint64 bytes_downloaded = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_downloaded(), target);
  }

  // optional uint64 bytes_to_download = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_bytes_to_download(), target);
  }

  // optional uint32 bytes_download_rate = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bytes_download_rate(), target);
  }

  // repeated .CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_dlcs(i), target, stream);
  }

  // optional string app_type = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_type().data(), static_cast<int>(this->_internal_app_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetClientAppListResponse.App.app_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_app_type(), target);
  }

  // optional bool download_paused = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_download_paused(), target);
  }

  // optional uint32 num_downloading = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_num_downloading(), target);
  }

  // optional uint32 num_paused = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_num_paused(), target);
  }

  // optional bool changing = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_changing(), target);
  }

  // optional bool available_on_platform = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_available_on_platform(), target);
  }

  // optional uint64 bytes_staged = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_bytes_staged(), target);
  }

  // optional uint64 bytes_to_stage = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bytes_to_stage(), target);
  }

  // optional uint64 bytes_required = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_bytes_required(), target);
  }

  // optional uint32 source_buildid = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_source_buildid(), target);
  }

  // optional uint32 target_buildid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_target_buildid(), target);
  }

  // optional uint32 estimated_seconds_remaining = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_estimated_seconds_remaining(), target);
  }

  // optional int32 queue_position = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_queue_position(), target);
  }

  // optional bool uninstalling = 23;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_uninstalling(), target);
  }

  // optional uint32 rt_time_scheduled = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_rt_time_scheduled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientAppListResponse.App)
  return target;
}

size_t CMsgClientGetClientAppListResponse_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientAppListResponse.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  total_size += 1UL * this->_internal_dlcs_size();
  for (const auto& msg : this->dlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string category = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional string app_type = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_type());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool favorite = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool installed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool auto_update = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool download_paused = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 bytes_downloaded = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_downloaded());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 bytes_to_download = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_download());
    }

    // optional uint32 bytes_download_rate = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bytes_download_rate());
    }

    // optional uint32 num_downloading = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_downloading());
    }

    // optional uint64 bytes_staged = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bytes_staged());
    }

    // optional uint32 num_paused = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_paused());
    }

    // optional bool changing = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool available_on_platform = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool uninstalling = 23;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint64 bytes_to_stage = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bytes_to_stage());
    }

    // optional uint64 bytes_required = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bytes_required());
    }

    // optional uint32 source_buildid = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_buildid());
    }

    // optional uint32 target_buildid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_buildid());
    }

    // optional uint32 estimated_seconds_remaining = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_estimated_seconds_remaining());
    }

    // optional int32 queue_position = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_queue_position());
    }

    // optional uint32 rt_time_scheduled = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_time_scheduled());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientAppListResponse_App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientAppListResponse_App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientAppListResponse_App::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientAppListResponse_App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientAppListResponse_App *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientAppListResponse_App &>(from));
}


void CMsgClientGetClientAppListResponse_App::MergeFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientAppListResponse.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dlcs_.MergeFrom(from.dlcs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_app_type(from._internal_app_type());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      favorite_ = from.favorite_;
    }
    if (cached_has_bits & 0x00000010u) {
      installed_ = from.installed_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_update_ = from.auto_update_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_paused_ = from.download_paused_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_to_download_ = from.bytes_to_download_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_download_rate_ = from.bytes_download_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_downloading_ = from.num_downloading_;
    }
    if (cached_has_bits & 0x00000800u) {
      bytes_staged_ = from.bytes_staged_;
    }
    if (cached_has_bits & 0x00001000u) {
      num_paused_ = from.num_paused_;
    }
    if (cached_has_bits & 0x00002000u) {
      changing_ = from.changing_;
    }
    if (cached_has_bits & 0x00004000u) {
      available_on_platform_ = from.available_on_platform_;
    }
    if (cached_has_bits & 0x00008000u) {
      uninstalling_ = from.uninstalling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      bytes_to_stage_ = from.bytes_to_stage_;
    }
    if (cached_has_bits & 0x00020000u) {
      bytes_required_ = from.bytes_required_;
    }
    if (cached_has_bits & 0x00040000u) {
      source_buildid_ = from.source_buildid_;
    }
    if (cached_has_bits & 0x00080000u) {
      target_buildid_ = from.target_buildid_;
    }
    if (cached_has_bits & 0x00100000u) {
      estimated_seconds_remaining_ = from.estimated_seconds_remaining_;
    }
    if (cached_has_bits & 0x00200000u) {
      queue_position_ = from.queue_position_;
    }
    if (cached_has_bits & 0x00400000u) {
      rt_time_scheduled_ = from.rt_time_scheduled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const CMsgClientGetClientAppListResponse_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientAppListResponse.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse_App::InternalSwap(CMsgClientGetClientAppListResponse_App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dlcs_.InternalSwap(&other->dlcs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &category_, lhs_arena,
      &other->category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_type_, lhs_arena,
      &other->app_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, rt_time_scheduled_)
      + sizeof(CMsgClientGetClientAppListResponse_App::rt_time_scheduled_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse_App, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientAppListResponse_App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[7]);
}

// ===================================================================

class CMsgClientGetClientAppListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClientAppListResponse>()._has_bits_);
  static void set_has_bytes_available(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientGetClientDetailsResponse& client_info(const CMsgClientGetClientAppListResponse* msg);
  static void set_has_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientGetClientDetailsResponse&
CMsgClientGetClientAppListResponse::_Internal::client_info(const CMsgClientGetClientAppListResponse* msg) {
  return *msg->client_info_;
}
CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClientAppListResponse)
}
CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(const CMsgClientGetClientAppListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_info()) {
    client_info_ = new ::CMsgClientGetClientDetailsResponse(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  bytes_available_ = from.bytes_available_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClientAppListResponse)
}

inline void CMsgClientGetClientAppListResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_available_) -
    reinterpret_cast<char*>(&client_info_)) + sizeof(bytes_available_));
}

CMsgClientGetClientAppListResponse::~CMsgClientGetClientAppListResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClientAppListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClientAppListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_info_;
}

void CMsgClientGetClientAppListResponse::ArenaDtor(void* object) {
  CMsgClientGetClientAppListResponse* _this = reinterpret_cast< CMsgClientGetClientAppListResponse* >(object);
  (void)_this;
}
void CMsgClientGetClientAppListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClientAppListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClientAppListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClientAppListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(client_info_ != nullptr);
    client_info_->Clear();
  }
  bytes_available_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClientAppListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientGetClientAppListResponse.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bytes_available(&has_bits);
          bytes_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientGetClientDetailsResponse client_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClientAppListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClientAppListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientGetClientAppListResponse.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_available = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_available(), target);
  }

  // optional .CMsgClientGetClientDetailsResponse client_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClientAppListResponse)
  return target;
}

size_t CMsgClientGetClientAppListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClientAppListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGetClientAppListResponse.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientGetClientDetailsResponse client_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_info_);
    }

    // optional uint64 bytes_available = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_available());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClientAppListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClientAppListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClientAppListResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetClientAppListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClientAppListResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClientAppListResponse &>(from));
}


void CMsgClientGetClientAppListResponse::MergeFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClientAppListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_client_info()->::CMsgClientGetClientDetailsResponse::MergeFrom(from._internal_client_info());
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_available_ = from.bytes_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClientAppListResponse::CopyFrom(const CMsgClientGetClientAppListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClientAppListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClientAppListResponse::InternalSwap(CMsgClientGetClientAppListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse, bytes_available_)
      + sizeof(CMsgClientGetClientAppListResponse::bytes_available_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetClientAppListResponse, client_info_)>(
          reinterpret_cast<char*>(&client_info_),
          reinterpret_cast<char*>(&other->client_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClientAppListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[8]);
}

// ===================================================================

class CMsgClientInstallClientApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientInstallClientApp>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientInstallClientApp::CMsgClientInstallClientApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientInstallClientApp)
}
CMsgClientInstallClientApp::CMsgClientInstallClientApp(const CMsgClientInstallClientApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientInstallClientApp)
}

inline void CMsgClientInstallClientApp::SharedCtor() {
appid_ = 0u;
}

CMsgClientInstallClientApp::~CMsgClientInstallClientApp() {
  // @@protoc_insertion_point(destructor:CMsgClientInstallClientApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientInstallClientApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientInstallClientApp::ArenaDtor(void* object) {
  CMsgClientInstallClientApp* _this = reinterpret_cast< CMsgClientInstallClientApp* >(object);
  (void)_this;
}
void CMsgClientInstallClientApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientInstallClientApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientInstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientInstallClientApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientInstallClientApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientInstallClientApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientInstallClientApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientInstallClientApp)
  return target;
}

size_t CMsgClientInstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientInstallClientApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientInstallClientApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientInstallClientApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientInstallClientApp::GetClassData() const { return &_class_data_; }

void CMsgClientInstallClientApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientInstallClientApp *>(to)->MergeFrom(
      static_cast<const CMsgClientInstallClientApp &>(from));
}


void CMsgClientInstallClientApp::MergeFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientInstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientInstallClientApp::CopyFrom(const CMsgClientInstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientInstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientApp::InternalSwap(CMsgClientInstallClientApp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientInstallClientApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[9]);
}

// ===================================================================

class CMsgClientInstallClientAppResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientInstallClientAppResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientInstallClientAppResponse)
}
CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(const CMsgClientInstallClientAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientInstallClientAppResponse)
}

inline void CMsgClientInstallClientAppResponse::SharedCtor() {
result_ = 0u;
}

CMsgClientInstallClientAppResponse::~CMsgClientInstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientInstallClientAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientInstallClientAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientInstallClientAppResponse::ArenaDtor(void* object) {
  CMsgClientInstallClientAppResponse* _this = reinterpret_cast< CMsgClientInstallClientAppResponse* >(object);
  (void)_this;
}
void CMsgClientInstallClientAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientInstallClientAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientInstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientInstallClientAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientInstallClientAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientInstallClientAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientInstallClientAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientInstallClientAppResponse)
  return target;
}

size_t CMsgClientInstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientInstallClientAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientInstallClientAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientInstallClientAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientInstallClientAppResponse::GetClassData() const { return &_class_data_; }

void CMsgClientInstallClientAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientInstallClientAppResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientInstallClientAppResponse &>(from));
}


void CMsgClientInstallClientAppResponse::MergeFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientInstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientInstallClientAppResponse::CopyFrom(const CMsgClientInstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientInstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientInstallClientAppResponse::InternalSwap(CMsgClientInstallClientAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientInstallClientAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[10]);
}

// ===================================================================

class CMsgClientUninstallClientApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUninstallClientApp>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUninstallClientApp)
}
CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(const CMsgClientUninstallClientApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUninstallClientApp)
}

inline void CMsgClientUninstallClientApp::SharedCtor() {
appid_ = 0u;
}

CMsgClientUninstallClientApp::~CMsgClientUninstallClientApp() {
  // @@protoc_insertion_point(destructor:CMsgClientUninstallClientApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUninstallClientApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUninstallClientApp::ArenaDtor(void* object) {
  CMsgClientUninstallClientApp* _this = reinterpret_cast< CMsgClientUninstallClientApp* >(object);
  (void)_this;
}
void CMsgClientUninstallClientApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUninstallClientApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUninstallClientApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUninstallClientApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUninstallClientApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUninstallClientApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUninstallClientApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUninstallClientApp)
  return target;
}

size_t CMsgClientUninstallClientApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUninstallClientApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUninstallClientApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUninstallClientApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUninstallClientApp::GetClassData() const { return &_class_data_; }

void CMsgClientUninstallClientApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUninstallClientApp *>(to)->MergeFrom(
      static_cast<const CMsgClientUninstallClientApp &>(from));
}


void CMsgClientUninstallClientApp::MergeFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUninstallClientApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUninstallClientApp::CopyFrom(const CMsgClientUninstallClientApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUninstallClientApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientApp::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientApp::InternalSwap(CMsgClientUninstallClientApp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUninstallClientApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[11]);
}

// ===================================================================

class CMsgClientUninstallClientAppResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUninstallClientAppResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUninstallClientAppResponse)
}
CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(const CMsgClientUninstallClientAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUninstallClientAppResponse)
}

inline void CMsgClientUninstallClientAppResponse::SharedCtor() {
result_ = 0u;
}

CMsgClientUninstallClientAppResponse::~CMsgClientUninstallClientAppResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUninstallClientAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUninstallClientAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUninstallClientAppResponse::ArenaDtor(void* object) {
  CMsgClientUninstallClientAppResponse* _this = reinterpret_cast< CMsgClientUninstallClientAppResponse* >(object);
  (void)_this;
}
void CMsgClientUninstallClientAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUninstallClientAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUninstallClientAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUninstallClientAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUninstallClientAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUninstallClientAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUninstallClientAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUninstallClientAppResponse)
  return target;
}

size_t CMsgClientUninstallClientAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUninstallClientAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUninstallClientAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUninstallClientAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUninstallClientAppResponse::GetClassData() const { return &_class_data_; }

void CMsgClientUninstallClientAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUninstallClientAppResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientUninstallClientAppResponse &>(from));
}


void CMsgClientUninstallClientAppResponse::MergeFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUninstallClientAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const CMsgClientUninstallClientAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUninstallClientAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientAppResponse::IsInitialized() const {
  return true;
}

void CMsgClientUninstallClientAppResponse::InternalSwap(CMsgClientUninstallClientAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUninstallClientAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[12]);
}

// ===================================================================

class CMsgClientSetClientAppUpdateState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSetClientAppUpdateState>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSetClientAppUpdateState)
}
CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(const CMsgClientSetClientAppUpdateState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(update_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSetClientAppUpdateState)
}

inline void CMsgClientSetClientAppUpdateState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(update_));
}

CMsgClientSetClientAppUpdateState::~CMsgClientSetClientAppUpdateState() {
  // @@protoc_insertion_point(destructor:CMsgClientSetClientAppUpdateState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSetClientAppUpdateState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSetClientAppUpdateState::ArenaDtor(void* object) {
  CMsgClientSetClientAppUpdateState* _this = reinterpret_cast< CMsgClientSetClientAppUpdateState* >(object);
  (void)_this;
}
void CMsgClientSetClientAppUpdateState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSetClientAppUpdateState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSetClientAppUpdateState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSetClientAppUpdateState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSetClientAppUpdateState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_update(&has_bits);
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSetClientAppUpdateState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSetClientAppUpdateState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSetClientAppUpdateState)
  return target;
}

size_t CMsgClientSetClientAppUpdateState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSetClientAppUpdateState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool update = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSetClientAppUpdateState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSetClientAppUpdateState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSetClientAppUpdateState::GetClassData() const { return &_class_data_; }

void CMsgClientSetClientAppUpdateState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSetClientAppUpdateState *>(to)->MergeFrom(
      static_cast<const CMsgClientSetClientAppUpdateState &>(from));
}


void CMsgClientSetClientAppUpdateState::MergeFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSetClientAppUpdateState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_ = from.update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const CMsgClientSetClientAppUpdateState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSetClientAppUpdateState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateState::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateState::InternalSwap(CMsgClientSetClientAppUpdateState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, update_)
      + sizeof(CMsgClientSetClientAppUpdateState::update_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSetClientAppUpdateState, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSetClientAppUpdateState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[13]);
}

// ===================================================================

class CMsgClientSetClientAppUpdateStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSetClientAppUpdateStateResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSetClientAppUpdateStateResponse)
}
CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(const CMsgClientSetClientAppUpdateStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSetClientAppUpdateStateResponse)
}

inline void CMsgClientSetClientAppUpdateStateResponse::SharedCtor() {
result_ = 0u;
}

CMsgClientSetClientAppUpdateStateResponse::~CMsgClientSetClientAppUpdateStateResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSetClientAppUpdateStateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSetClientAppUpdateStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSetClientAppUpdateStateResponse::ArenaDtor(void* object) {
  CMsgClientSetClientAppUpdateStateResponse* _this = reinterpret_cast< CMsgClientSetClientAppUpdateStateResponse* >(object);
  (void)_this;
}
void CMsgClientSetClientAppUpdateStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSetClientAppUpdateStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSetClientAppUpdateStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSetClientAppUpdateStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSetClientAppUpdateStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSetClientAppUpdateStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSetClientAppUpdateStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSetClientAppUpdateStateResponse)
  return target;
}

size_t CMsgClientSetClientAppUpdateStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSetClientAppUpdateStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSetClientAppUpdateStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSetClientAppUpdateStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSetClientAppUpdateStateResponse::GetClassData() const { return &_class_data_; }

void CMsgClientSetClientAppUpdateStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSetClientAppUpdateStateResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientSetClientAppUpdateStateResponse &>(from));
}


void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSetClientAppUpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSetClientAppUpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateStateResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetClientAppUpdateStateResponse::InternalSwap(CMsgClientSetClientAppUpdateStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSetClientAppUpdateStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[14]);
}

// ===================================================================

class CMsgClientEnableOrDisableDownloads::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEnableOrDisableDownloads>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientEnableOrDisableDownloads::CMsgClientEnableOrDisableDownloads(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEnableOrDisableDownloads)
}
CMsgClientEnableOrDisableDownloads::CMsgClientEnableOrDisableDownloads(const CMsgClientEnableOrDisableDownloads& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientEnableOrDisableDownloads)
}

inline void CMsgClientEnableOrDisableDownloads::SharedCtor() {
enable_ = false;
}

CMsgClientEnableOrDisableDownloads::~CMsgClientEnableOrDisableDownloads() {
  // @@protoc_insertion_point(destructor:CMsgClientEnableOrDisableDownloads)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEnableOrDisableDownloads::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientEnableOrDisableDownloads::ArenaDtor(void* object) {
  CMsgClientEnableOrDisableDownloads* _this = reinterpret_cast< CMsgClientEnableOrDisableDownloads* >(object);
  (void)_this;
}
void CMsgClientEnableOrDisableDownloads::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEnableOrDisableDownloads::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEnableOrDisableDownloads::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEnableOrDisableDownloads)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEnableOrDisableDownloads::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEnableOrDisableDownloads::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEnableOrDisableDownloads)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEnableOrDisableDownloads)
  return target;
}

size_t CMsgClientEnableOrDisableDownloads::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEnableOrDisableDownloads)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEnableOrDisableDownloads::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEnableOrDisableDownloads::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEnableOrDisableDownloads::GetClassData() const { return &_class_data_; }

void CMsgClientEnableOrDisableDownloads::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEnableOrDisableDownloads *>(to)->MergeFrom(
      static_cast<const CMsgClientEnableOrDisableDownloads &>(from));
}


void CMsgClientEnableOrDisableDownloads::MergeFrom(const CMsgClientEnableOrDisableDownloads& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEnableOrDisableDownloads)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEnableOrDisableDownloads::CopyFrom(const CMsgClientEnableOrDisableDownloads& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEnableOrDisableDownloads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEnableOrDisableDownloads::IsInitialized() const {
  return true;
}

void CMsgClientEnableOrDisableDownloads::InternalSwap(CMsgClientEnableOrDisableDownloads* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEnableOrDisableDownloads::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[15]);
}

// ===================================================================

class CMsgClientEnableOrDisableDownloadsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEnableOrDisableDownloadsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientEnableOrDisableDownloadsResponse::CMsgClientEnableOrDisableDownloadsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEnableOrDisableDownloadsResponse)
}
CMsgClientEnableOrDisableDownloadsResponse::CMsgClientEnableOrDisableDownloadsResponse(const CMsgClientEnableOrDisableDownloadsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientEnableOrDisableDownloadsResponse)
}

inline void CMsgClientEnableOrDisableDownloadsResponse::SharedCtor() {
result_ = 0u;
}

CMsgClientEnableOrDisableDownloadsResponse::~CMsgClientEnableOrDisableDownloadsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientEnableOrDisableDownloadsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEnableOrDisableDownloadsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientEnableOrDisableDownloadsResponse::ArenaDtor(void* object) {
  CMsgClientEnableOrDisableDownloadsResponse* _this = reinterpret_cast< CMsgClientEnableOrDisableDownloadsResponse* >(object);
  (void)_this;
}
void CMsgClientEnableOrDisableDownloadsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEnableOrDisableDownloadsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEnableOrDisableDownloadsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEnableOrDisableDownloadsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEnableOrDisableDownloadsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEnableOrDisableDownloadsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEnableOrDisableDownloadsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEnableOrDisableDownloadsResponse)
  return target;
}

size_t CMsgClientEnableOrDisableDownloadsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEnableOrDisableDownloadsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEnableOrDisableDownloadsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEnableOrDisableDownloadsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEnableOrDisableDownloadsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientEnableOrDisableDownloadsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEnableOrDisableDownloadsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientEnableOrDisableDownloadsResponse &>(from));
}


void CMsgClientEnableOrDisableDownloadsResponse::MergeFrom(const CMsgClientEnableOrDisableDownloadsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEnableOrDisableDownloadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEnableOrDisableDownloadsResponse::CopyFrom(const CMsgClientEnableOrDisableDownloadsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEnableOrDisableDownloadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEnableOrDisableDownloadsResponse::IsInitialized() const {
  return true;
}

void CMsgClientEnableOrDisableDownloadsResponse::InternalSwap(CMsgClientEnableOrDisableDownloadsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEnableOrDisableDownloadsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fuds_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fuds_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientUDSP2PSessionStarted* Arena::CreateMaybeMessage< ::CMsgClientUDSP2PSessionStarted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUDSP2PSessionStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUDSP2PSessionEnded* Arena::CreateMaybeMessage< ::CMsgClientUDSP2PSessionEnded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUDSP2PSessionEnded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientDetails* Arena::CreateMaybeMessage< ::CMsgClientGetClientDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientDetailsResponse_Game* Arena::CreateMaybeMessage< ::CMsgClientGetClientDetailsResponse_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientDetailsResponse_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientDetailsResponse* Arena::CreateMaybeMessage< ::CMsgClientGetClientDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientAppList* Arena::CreateMaybeMessage< ::CMsgClientGetClientAppList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientAppList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientAppListResponse_App_DLC* Arena::CreateMaybeMessage< ::CMsgClientGetClientAppListResponse_App_DLC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientAppListResponse_App_DLC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientAppListResponse_App* Arena::CreateMaybeMessage< ::CMsgClientGetClientAppListResponse_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientAppListResponse_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClientAppListResponse* Arena::CreateMaybeMessage< ::CMsgClientGetClientAppListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClientAppListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientInstallClientApp* Arena::CreateMaybeMessage< ::CMsgClientInstallClientApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientInstallClientApp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientInstallClientAppResponse* Arena::CreateMaybeMessage< ::CMsgClientInstallClientAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientInstallClientAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUninstallClientApp* Arena::CreateMaybeMessage< ::CMsgClientUninstallClientApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUninstallClientApp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUninstallClientAppResponse* Arena::CreateMaybeMessage< ::CMsgClientUninstallClientAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUninstallClientAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSetClientAppUpdateState* Arena::CreateMaybeMessage< ::CMsgClientSetClientAppUpdateState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSetClientAppUpdateState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSetClientAppUpdateStateResponse* Arena::CreateMaybeMessage< ::CMsgClientSetClientAppUpdateStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSetClientAppUpdateStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEnableOrDisableDownloads* Arena::CreateMaybeMessage< ::CMsgClientEnableOrDisableDownloads >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEnableOrDisableDownloads >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEnableOrDisableDownloadsResponse* Arena::CreateMaybeMessage< ::CMsgClientEnableOrDisableDownloadsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEnableOrDisableDownloadsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
