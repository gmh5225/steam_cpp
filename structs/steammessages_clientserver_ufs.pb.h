// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_ufs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5fufs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5fufs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fufs_2eproto;
class CMsgClientUFSDeleteFileRequest;
struct CMsgClientUFSDeleteFileRequestDefaultTypeInternal;
extern CMsgClientUFSDeleteFileRequestDefaultTypeInternal _CMsgClientUFSDeleteFileRequest_default_instance_;
class CMsgClientUFSDeleteFileResponse;
struct CMsgClientUFSDeleteFileResponseDefaultTypeInternal;
extern CMsgClientUFSDeleteFileResponseDefaultTypeInternal _CMsgClientUFSDeleteFileResponse_default_instance_;
class CMsgClientUFSDownloadRequest;
struct CMsgClientUFSDownloadRequestDefaultTypeInternal;
extern CMsgClientUFSDownloadRequestDefaultTypeInternal _CMsgClientUFSDownloadRequest_default_instance_;
class CMsgClientUFSDownloadResponse;
struct CMsgClientUFSDownloadResponseDefaultTypeInternal;
extern CMsgClientUFSDownloadResponseDefaultTypeInternal _CMsgClientUFSDownloadResponse_default_instance_;
class CMsgClientUFSFileChunk;
struct CMsgClientUFSFileChunkDefaultTypeInternal;
extern CMsgClientUFSFileChunkDefaultTypeInternal _CMsgClientUFSFileChunk_default_instance_;
class CMsgClientUFSGetFileListForApp;
struct CMsgClientUFSGetFileListForAppDefaultTypeInternal;
extern CMsgClientUFSGetFileListForAppDefaultTypeInternal _CMsgClientUFSGetFileListForApp_default_instance_;
class CMsgClientUFSGetFileListForAppResponse;
struct CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal;
extern CMsgClientUFSGetFileListForAppResponseDefaultTypeInternal _CMsgClientUFSGetFileListForAppResponse_default_instance_;
class CMsgClientUFSGetFileListForAppResponse_File;
struct CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal;
extern CMsgClientUFSGetFileListForAppResponse_FileDefaultTypeInternal _CMsgClientUFSGetFileListForAppResponse_File_default_instance_;
class CMsgClientUFSGetSingleFileInfo;
struct CMsgClientUFSGetSingleFileInfoDefaultTypeInternal;
extern CMsgClientUFSGetSingleFileInfoDefaultTypeInternal _CMsgClientUFSGetSingleFileInfo_default_instance_;
class CMsgClientUFSGetSingleFileInfoResponse;
struct CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal;
extern CMsgClientUFSGetSingleFileInfoResponseDefaultTypeInternal _CMsgClientUFSGetSingleFileInfoResponse_default_instance_;
class CMsgClientUFSGetUGCDetails;
struct CMsgClientUFSGetUGCDetailsDefaultTypeInternal;
extern CMsgClientUFSGetUGCDetailsDefaultTypeInternal _CMsgClientUFSGetUGCDetails_default_instance_;
class CMsgClientUFSGetUGCDetailsResponse;
struct CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal;
extern CMsgClientUFSGetUGCDetailsResponseDefaultTypeInternal _CMsgClientUFSGetUGCDetailsResponse_default_instance_;
class CMsgClientUFSLoginRequest;
struct CMsgClientUFSLoginRequestDefaultTypeInternal;
extern CMsgClientUFSLoginRequestDefaultTypeInternal _CMsgClientUFSLoginRequest_default_instance_;
class CMsgClientUFSLoginResponse;
struct CMsgClientUFSLoginResponseDefaultTypeInternal;
extern CMsgClientUFSLoginResponseDefaultTypeInternal _CMsgClientUFSLoginResponse_default_instance_;
class CMsgClientUFSShareFile;
struct CMsgClientUFSShareFileDefaultTypeInternal;
extern CMsgClientUFSShareFileDefaultTypeInternal _CMsgClientUFSShareFile_default_instance_;
class CMsgClientUFSShareFileResponse;
struct CMsgClientUFSShareFileResponseDefaultTypeInternal;
extern CMsgClientUFSShareFileResponseDefaultTypeInternal _CMsgClientUFSShareFileResponse_default_instance_;
class CMsgClientUFSTransferHeartbeat;
struct CMsgClientUFSTransferHeartbeatDefaultTypeInternal;
extern CMsgClientUFSTransferHeartbeatDefaultTypeInternal _CMsgClientUFSTransferHeartbeat_default_instance_;
class CMsgClientUFSUploadCommit;
struct CMsgClientUFSUploadCommitDefaultTypeInternal;
extern CMsgClientUFSUploadCommitDefaultTypeInternal _CMsgClientUFSUploadCommit_default_instance_;
class CMsgClientUFSUploadCommitResponse;
struct CMsgClientUFSUploadCommitResponseDefaultTypeInternal;
extern CMsgClientUFSUploadCommitResponseDefaultTypeInternal _CMsgClientUFSUploadCommitResponse_default_instance_;
class CMsgClientUFSUploadCommitResponse_File;
struct CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal;
extern CMsgClientUFSUploadCommitResponse_FileDefaultTypeInternal _CMsgClientUFSUploadCommitResponse_File_default_instance_;
class CMsgClientUFSUploadCommit_File;
struct CMsgClientUFSUploadCommit_FileDefaultTypeInternal;
extern CMsgClientUFSUploadCommit_FileDefaultTypeInternal _CMsgClientUFSUploadCommit_File_default_instance_;
class CMsgClientUFSUploadFileFinished;
struct CMsgClientUFSUploadFileFinishedDefaultTypeInternal;
extern CMsgClientUFSUploadFileFinishedDefaultTypeInternal _CMsgClientUFSUploadFileFinished_default_instance_;
class CMsgClientUFSUploadFileRequest;
struct CMsgClientUFSUploadFileRequestDefaultTypeInternal;
extern CMsgClientUFSUploadFileRequestDefaultTypeInternal _CMsgClientUFSUploadFileRequest_default_instance_;
class CMsgClientUFSUploadFileResponse;
struct CMsgClientUFSUploadFileResponseDefaultTypeInternal;
extern CMsgClientUFSUploadFileResponseDefaultTypeInternal _CMsgClientUFSUploadFileResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientUFSDeleteFileRequest* Arena::CreateMaybeMessage<::CMsgClientUFSDeleteFileRequest>(Arena*);
template<> ::CMsgClientUFSDeleteFileResponse* Arena::CreateMaybeMessage<::CMsgClientUFSDeleteFileResponse>(Arena*);
template<> ::CMsgClientUFSDownloadRequest* Arena::CreateMaybeMessage<::CMsgClientUFSDownloadRequest>(Arena*);
template<> ::CMsgClientUFSDownloadResponse* Arena::CreateMaybeMessage<::CMsgClientUFSDownloadResponse>(Arena*);
template<> ::CMsgClientUFSFileChunk* Arena::CreateMaybeMessage<::CMsgClientUFSFileChunk>(Arena*);
template<> ::CMsgClientUFSGetFileListForApp* Arena::CreateMaybeMessage<::CMsgClientUFSGetFileListForApp>(Arena*);
template<> ::CMsgClientUFSGetFileListForAppResponse* Arena::CreateMaybeMessage<::CMsgClientUFSGetFileListForAppResponse>(Arena*);
template<> ::CMsgClientUFSGetFileListForAppResponse_File* Arena::CreateMaybeMessage<::CMsgClientUFSGetFileListForAppResponse_File>(Arena*);
template<> ::CMsgClientUFSGetSingleFileInfo* Arena::CreateMaybeMessage<::CMsgClientUFSGetSingleFileInfo>(Arena*);
template<> ::CMsgClientUFSGetSingleFileInfoResponse* Arena::CreateMaybeMessage<::CMsgClientUFSGetSingleFileInfoResponse>(Arena*);
template<> ::CMsgClientUFSGetUGCDetails* Arena::CreateMaybeMessage<::CMsgClientUFSGetUGCDetails>(Arena*);
template<> ::CMsgClientUFSGetUGCDetailsResponse* Arena::CreateMaybeMessage<::CMsgClientUFSGetUGCDetailsResponse>(Arena*);
template<> ::CMsgClientUFSLoginRequest* Arena::CreateMaybeMessage<::CMsgClientUFSLoginRequest>(Arena*);
template<> ::CMsgClientUFSLoginResponse* Arena::CreateMaybeMessage<::CMsgClientUFSLoginResponse>(Arena*);
template<> ::CMsgClientUFSShareFile* Arena::CreateMaybeMessage<::CMsgClientUFSShareFile>(Arena*);
template<> ::CMsgClientUFSShareFileResponse* Arena::CreateMaybeMessage<::CMsgClientUFSShareFileResponse>(Arena*);
template<> ::CMsgClientUFSTransferHeartbeat* Arena::CreateMaybeMessage<::CMsgClientUFSTransferHeartbeat>(Arena*);
template<> ::CMsgClientUFSUploadCommit* Arena::CreateMaybeMessage<::CMsgClientUFSUploadCommit>(Arena*);
template<> ::CMsgClientUFSUploadCommitResponse* Arena::CreateMaybeMessage<::CMsgClientUFSUploadCommitResponse>(Arena*);
template<> ::CMsgClientUFSUploadCommitResponse_File* Arena::CreateMaybeMessage<::CMsgClientUFSUploadCommitResponse_File>(Arena*);
template<> ::CMsgClientUFSUploadCommit_File* Arena::CreateMaybeMessage<::CMsgClientUFSUploadCommit_File>(Arena*);
template<> ::CMsgClientUFSUploadFileFinished* Arena::CreateMaybeMessage<::CMsgClientUFSUploadFileFinished>(Arena*);
template<> ::CMsgClientUFSUploadFileRequest* Arena::CreateMaybeMessage<::CMsgClientUFSUploadFileRequest>(Arena*);
template<> ::CMsgClientUFSUploadFileResponse* Arena::CreateMaybeMessage<::CMsgClientUFSUploadFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientUFSUploadFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadFileRequest) */ {
 public:
  inline CMsgClientUFSUploadFileRequest() : CMsgClientUFSUploadFileRequest(nullptr) {}
  ~CMsgClientUFSUploadFileRequest() override;
  explicit constexpr CMsgClientUFSUploadFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadFileRequest(const CMsgClientUFSUploadFileRequest& from);
  CMsgClientUFSUploadFileRequest(CMsgClientUFSUploadFileRequest&& from) noexcept
    : CMsgClientUFSUploadFileRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadFileRequest& operator=(const CMsgClientUFSUploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadFileRequest& operator=(CMsgClientUFSUploadFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadFileRequest*>(
               &_CMsgClientUFSUploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientUFSUploadFileRequest& a, CMsgClientUFSUploadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadFileRequest";
  }
  protected:
  explicit CMsgClientUFSUploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 4,
    kFileNameFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kTimeStampFieldNumber = 5,
    kRawFileSizeFieldNumber = 3,
    kPlatformsToSyncDeprecatedFieldNumber = 7,
    kCellIdFieldNumber = 9,
    kCanEncryptFieldNumber = 10,
    kPlatformsToSyncFieldNumber = 8,
  };
  // optional bytes sha_file = 4;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional string file_name = 6;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 file_size = 2;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 5;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional uint32 raw_file_size = 3;
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional uint32 platforms_to_sync_deprecated = 7;
  bool has_platforms_to_sync_deprecated() const;
  private:
  bool _internal_has_platforms_to_sync_deprecated() const;
  public:
  void clear_platforms_to_sync_deprecated();
  uint32_t platforms_to_sync_deprecated() const;
  void set_platforms_to_sync_deprecated(uint32_t value);
  private:
  uint32_t _internal_platforms_to_sync_deprecated() const;
  void _internal_set_platforms_to_sync_deprecated(uint32_t value);
  public:

  // optional uint32 cell_id = 9;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional bool can_encrypt = 10;
  bool has_can_encrypt() const;
  private:
  bool _internal_has_can_encrypt() const;
  public:
  void clear_can_encrypt();
  bool can_encrypt() const;
  void set_can_encrypt(bool value);
  private:
  bool _internal_can_encrypt() const;
  void _internal_set_can_encrypt(bool value);
  public:

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  bool has_platforms_to_sync() const;
  private:
  bool _internal_has_platforms_to_sync() const;
  public:
  void clear_platforms_to_sync();
  uint32_t platforms_to_sync() const;
  void set_platforms_to_sync(uint32_t value);
  private:
  uint32_t _internal_platforms_to_sync() const;
  void _internal_set_platforms_to_sync(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  uint32_t file_size_;
  uint64_t time_stamp_;
  uint32_t raw_file_size_;
  uint32_t platforms_to_sync_deprecated_;
  uint32_t cell_id_;
  bool can_encrypt_;
  uint32_t platforms_to_sync_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadFileResponse) */ {
 public:
  inline CMsgClientUFSUploadFileResponse() : CMsgClientUFSUploadFileResponse(nullptr) {}
  ~CMsgClientUFSUploadFileResponse() override;
  explicit constexpr CMsgClientUFSUploadFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadFileResponse(const CMsgClientUFSUploadFileResponse& from);
  CMsgClientUFSUploadFileResponse(CMsgClientUFSUploadFileResponse&& from) noexcept
    : CMsgClientUFSUploadFileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadFileResponse& operator=(const CMsgClientUFSUploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadFileResponse& operator=(CMsgClientUFSUploadFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadFileResponse*>(
               &_CMsgClientUFSUploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientUFSUploadFileResponse& a, CMsgClientUFSUploadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadFileResponse";
  }
  protected:
  explicit CMsgClientUFSUploadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 2,
    kHttpHostFieldNumber = 4,
    kHttpUrlFieldNumber = 5,
    kKvHeadersFieldNumber = 6,
    kUseHttpFieldNumber = 3,
    kUseHttpsFieldNumber = 7,
    kEncryptFileFieldNumber = 8,
    kEresultFieldNumber = 1,
  };
  // optional bytes sha_file = 2;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional string http_host = 4;
  bool has_http_host() const;
  private:
  bool _internal_has_http_host() const;
  public:
  void clear_http_host();
  const std::string& http_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_host();
  PROTOBUF_NODISCARD std::string* release_http_host();
  void set_allocated_http_host(std::string* http_host);
  private:
  const std::string& _internal_http_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_host(const std::string& value);
  std::string* _internal_mutable_http_host();
  public:

  // optional string http_url = 5;
  bool has_http_url() const;
  private:
  bool _internal_has_http_url() const;
  public:
  void clear_http_url();
  const std::string& http_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_url();
  PROTOBUF_NODISCARD std::string* release_http_url();
  void set_allocated_http_url(std::string* http_url);
  private:
  const std::string& _internal_http_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_url(const std::string& value);
  std::string* _internal_mutable_http_url();
  public:

  // optional bytes kv_headers = 6;
  bool has_kv_headers() const;
  private:
  bool _internal_has_kv_headers() const;
  public:
  void clear_kv_headers();
  const std::string& kv_headers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kv_headers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kv_headers();
  PROTOBUF_NODISCARD std::string* release_kv_headers();
  void set_allocated_kv_headers(std::string* kv_headers);
  private:
  const std::string& _internal_kv_headers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_headers(const std::string& value);
  std::string* _internal_mutable_kv_headers();
  public:

  // optional bool use_http = 3;
  bool has_use_http() const;
  private:
  bool _internal_has_use_http() const;
  public:
  void clear_use_http();
  bool use_http() const;
  void set_use_http(bool value);
  private:
  bool _internal_use_http() const;
  void _internal_set_use_http(bool value);
  public:

  // optional bool use_https = 7;
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // optional bool encrypt_file = 8;
  bool has_encrypt_file() const;
  private:
  bool _internal_has_encrypt_file() const;
  public:
  void clear_encrypt_file();
  bool encrypt_file() const;
  void set_encrypt_file(bool value);
  private:
  bool _internal_encrypt_file() const;
  void _internal_set_encrypt_file(bool value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_headers_;
  bool use_http_;
  bool use_https_;
  bool encrypt_file_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadCommit_File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadCommit.File) */ {
 public:
  inline CMsgClientUFSUploadCommit_File() : CMsgClientUFSUploadCommit_File(nullptr) {}
  ~CMsgClientUFSUploadCommit_File() override;
  explicit constexpr CMsgClientUFSUploadCommit_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadCommit_File(const CMsgClientUFSUploadCommit_File& from);
  CMsgClientUFSUploadCommit_File(CMsgClientUFSUploadCommit_File&& from) noexcept
    : CMsgClientUFSUploadCommit_File() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadCommit_File& operator=(const CMsgClientUFSUploadCommit_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadCommit_File& operator=(CMsgClientUFSUploadCommit_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadCommit_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadCommit_File* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadCommit_File*>(
               &_CMsgClientUFSUploadCommit_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientUFSUploadCommit_File& a, CMsgClientUFSUploadCommit_File& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadCommit_File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadCommit_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadCommit_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadCommit_File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadCommit_File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadCommit_File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadCommit_File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadCommit.File";
  }
  protected:
  explicit CMsgClientUFSUploadCommit_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 3,
    kFileNameFieldNumber = 5,
    kAppIdFieldNumber = 2,
    kCubFileFieldNumber = 4,
    kEresultFieldNumber = 1,
  };
  // optional bytes sha_file = 3;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional string file_name = 5;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 cub_file = 4;
  bool has_cub_file() const;
  private:
  bool _internal_has_cub_file() const;
  public:
  void clear_cub_file();
  uint32_t cub_file() const;
  void set_cub_file(uint32_t value);
  private:
  uint32_t _internal_cub_file() const;
  void _internal_set_cub_file(uint32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadCommit.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  uint32_t cub_file_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadCommit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadCommit) */ {
 public:
  inline CMsgClientUFSUploadCommit() : CMsgClientUFSUploadCommit(nullptr) {}
  ~CMsgClientUFSUploadCommit() override;
  explicit constexpr CMsgClientUFSUploadCommit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadCommit(const CMsgClientUFSUploadCommit& from);
  CMsgClientUFSUploadCommit(CMsgClientUFSUploadCommit&& from) noexcept
    : CMsgClientUFSUploadCommit() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadCommit& operator=(const CMsgClientUFSUploadCommit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadCommit& operator=(CMsgClientUFSUploadCommit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadCommit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadCommit* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadCommit*>(
               &_CMsgClientUFSUploadCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientUFSUploadCommit& a, CMsgClientUFSUploadCommit& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadCommit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadCommit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadCommit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadCommit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadCommit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadCommit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadCommit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadCommit";
  }
  protected:
  explicit CMsgClientUFSUploadCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientUFSUploadCommit_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .CMsgClientUFSUploadCommit.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CMsgClientUFSUploadCommit_File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommit_File >*
      mutable_files();
  private:
  const ::CMsgClientUFSUploadCommit_File& _internal_files(int index) const;
  ::CMsgClientUFSUploadCommit_File* _internal_add_files();
  public:
  const ::CMsgClientUFSUploadCommit_File& files(int index) const;
  ::CMsgClientUFSUploadCommit_File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommit_File >&
      files() const;

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadCommit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommit_File > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadCommitResponse_File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadCommitResponse.File) */ {
 public:
  inline CMsgClientUFSUploadCommitResponse_File() : CMsgClientUFSUploadCommitResponse_File(nullptr) {}
  ~CMsgClientUFSUploadCommitResponse_File() override;
  explicit constexpr CMsgClientUFSUploadCommitResponse_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadCommitResponse_File(const CMsgClientUFSUploadCommitResponse_File& from);
  CMsgClientUFSUploadCommitResponse_File(CMsgClientUFSUploadCommitResponse_File&& from) noexcept
    : CMsgClientUFSUploadCommitResponse_File() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadCommitResponse_File& operator=(const CMsgClientUFSUploadCommitResponse_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadCommitResponse_File& operator=(CMsgClientUFSUploadCommitResponse_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadCommitResponse_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadCommitResponse_File* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadCommitResponse_File*>(
               &_CMsgClientUFSUploadCommitResponse_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientUFSUploadCommitResponse_File& a, CMsgClientUFSUploadCommitResponse_File& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadCommitResponse_File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadCommitResponse_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadCommitResponse_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadCommitResponse_File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadCommitResponse_File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadCommitResponse_File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadCommitResponse_File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadCommitResponse.File";
  }
  protected:
  explicit CMsgClientUFSUploadCommitResponse_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 3,
    kAppIdFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional bytes sha_file = 3;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadCommitResponse.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  uint32_t app_id_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadCommitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadCommitResponse) */ {
 public:
  inline CMsgClientUFSUploadCommitResponse() : CMsgClientUFSUploadCommitResponse(nullptr) {}
  ~CMsgClientUFSUploadCommitResponse() override;
  explicit constexpr CMsgClientUFSUploadCommitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadCommitResponse(const CMsgClientUFSUploadCommitResponse& from);
  CMsgClientUFSUploadCommitResponse(CMsgClientUFSUploadCommitResponse&& from) noexcept
    : CMsgClientUFSUploadCommitResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadCommitResponse& operator=(const CMsgClientUFSUploadCommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadCommitResponse& operator=(CMsgClientUFSUploadCommitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadCommitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadCommitResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadCommitResponse*>(
               &_CMsgClientUFSUploadCommitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientUFSUploadCommitResponse& a, CMsgClientUFSUploadCommitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadCommitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadCommitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadCommitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadCommitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadCommitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadCommitResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadCommitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadCommitResponse";
  }
  protected:
  explicit CMsgClientUFSUploadCommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientUFSUploadCommitResponse_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .CMsgClientUFSUploadCommitResponse.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CMsgClientUFSUploadCommitResponse_File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommitResponse_File >*
      mutable_files();
  private:
  const ::CMsgClientUFSUploadCommitResponse_File& _internal_files(int index) const;
  ::CMsgClientUFSUploadCommitResponse_File* _internal_add_files();
  public:
  const ::CMsgClientUFSUploadCommitResponse_File& files(int index) const;
  ::CMsgClientUFSUploadCommitResponse_File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommitResponse_File >&
      files() const;

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadCommitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommitResponse_File > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSFileChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSFileChunk) */ {
 public:
  inline CMsgClientUFSFileChunk() : CMsgClientUFSFileChunk(nullptr) {}
  ~CMsgClientUFSFileChunk() override;
  explicit constexpr CMsgClientUFSFileChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSFileChunk(const CMsgClientUFSFileChunk& from);
  CMsgClientUFSFileChunk(CMsgClientUFSFileChunk&& from) noexcept
    : CMsgClientUFSFileChunk() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSFileChunk& operator=(const CMsgClientUFSFileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSFileChunk& operator=(CMsgClientUFSFileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSFileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSFileChunk* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSFileChunk*>(
               &_CMsgClientUFSFileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientUFSFileChunk& a, CMsgClientUFSFileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSFileChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSFileChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSFileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSFileChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSFileChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSFileChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSFileChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSFileChunk";
  }
  protected:
  explicit CMsgClientUFSFileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 1,
    kDataFieldNumber = 3,
    kFileStartFieldNumber = 2,
  };
  // optional bytes sha_file = 1;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 file_start = 2;
  bool has_file_start() const;
  private:
  bool _internal_has_file_start() const;
  public:
  void clear_file_start();
  uint32_t file_start() const;
  void set_file_start(uint32_t value);
  private:
  uint32_t _internal_file_start() const;
  void _internal_set_file_start(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSFileChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t file_start_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSTransferHeartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgClientUFSTransferHeartbeat) */ {
 public:
  inline CMsgClientUFSTransferHeartbeat() : CMsgClientUFSTransferHeartbeat(nullptr) {}
  explicit constexpr CMsgClientUFSTransferHeartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSTransferHeartbeat(const CMsgClientUFSTransferHeartbeat& from);
  CMsgClientUFSTransferHeartbeat(CMsgClientUFSTransferHeartbeat&& from) noexcept
    : CMsgClientUFSTransferHeartbeat() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSTransferHeartbeat& operator=(const CMsgClientUFSTransferHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSTransferHeartbeat& operator=(CMsgClientUFSTransferHeartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSTransferHeartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSTransferHeartbeat* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSTransferHeartbeat*>(
               &_CMsgClientUFSTransferHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientUFSTransferHeartbeat& a, CMsgClientUFSTransferHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSTransferHeartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSTransferHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSTransferHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSTransferHeartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgClientUFSTransferHeartbeat& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgClientUFSTransferHeartbeat& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSTransferHeartbeat";
  }
  protected:
  explicit CMsgClientUFSTransferHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientUFSTransferHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSUploadFileFinished final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSUploadFileFinished) */ {
 public:
  inline CMsgClientUFSUploadFileFinished() : CMsgClientUFSUploadFileFinished(nullptr) {}
  ~CMsgClientUFSUploadFileFinished() override;
  explicit constexpr CMsgClientUFSUploadFileFinished(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSUploadFileFinished(const CMsgClientUFSUploadFileFinished& from);
  CMsgClientUFSUploadFileFinished(CMsgClientUFSUploadFileFinished&& from) noexcept
    : CMsgClientUFSUploadFileFinished() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSUploadFileFinished& operator=(const CMsgClientUFSUploadFileFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSUploadFileFinished& operator=(CMsgClientUFSUploadFileFinished&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSUploadFileFinished& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSUploadFileFinished* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSUploadFileFinished*>(
               &_CMsgClientUFSUploadFileFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientUFSUploadFileFinished& a, CMsgClientUFSUploadFileFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSUploadFileFinished* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSUploadFileFinished* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSUploadFileFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSUploadFileFinished>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSUploadFileFinished& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSUploadFileFinished& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSUploadFileFinished* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSUploadFileFinished";
  }
  protected:
  explicit CMsgClientUFSUploadFileFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional bytes sha_file = 2;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSUploadFileFinished)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSDeleteFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSDeleteFileRequest) */ {
 public:
  inline CMsgClientUFSDeleteFileRequest() : CMsgClientUFSDeleteFileRequest(nullptr) {}
  ~CMsgClientUFSDeleteFileRequest() override;
  explicit constexpr CMsgClientUFSDeleteFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSDeleteFileRequest(const CMsgClientUFSDeleteFileRequest& from);
  CMsgClientUFSDeleteFileRequest(CMsgClientUFSDeleteFileRequest&& from) noexcept
    : CMsgClientUFSDeleteFileRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSDeleteFileRequest& operator=(const CMsgClientUFSDeleteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSDeleteFileRequest& operator=(CMsgClientUFSDeleteFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSDeleteFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSDeleteFileRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSDeleteFileRequest*>(
               &_CMsgClientUFSDeleteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgClientUFSDeleteFileRequest& a, CMsgClientUFSDeleteFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSDeleteFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSDeleteFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSDeleteFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSDeleteFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSDeleteFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSDeleteFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSDeleteFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSDeleteFileRequest";
  }
  protected:
  explicit CMsgClientUFSDeleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kIsExplicitDeleteFieldNumber = 3,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool is_explicit_delete = 3;
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSDeleteFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  bool is_explicit_delete_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSDeleteFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSDeleteFileResponse) */ {
 public:
  inline CMsgClientUFSDeleteFileResponse() : CMsgClientUFSDeleteFileResponse(nullptr) {}
  ~CMsgClientUFSDeleteFileResponse() override;
  explicit constexpr CMsgClientUFSDeleteFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSDeleteFileResponse(const CMsgClientUFSDeleteFileResponse& from);
  CMsgClientUFSDeleteFileResponse(CMsgClientUFSDeleteFileResponse&& from) noexcept
    : CMsgClientUFSDeleteFileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSDeleteFileResponse& operator=(const CMsgClientUFSDeleteFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSDeleteFileResponse& operator=(CMsgClientUFSDeleteFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSDeleteFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSDeleteFileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSDeleteFileResponse*>(
               &_CMsgClientUFSDeleteFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgClientUFSDeleteFileResponse& a, CMsgClientUFSDeleteFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSDeleteFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSDeleteFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSDeleteFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSDeleteFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSDeleteFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSDeleteFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSDeleteFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSDeleteFileResponse";
  }
  protected:
  explicit CMsgClientUFSDeleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSDeleteFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetFileListForApp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetFileListForApp) */ {
 public:
  inline CMsgClientUFSGetFileListForApp() : CMsgClientUFSGetFileListForApp(nullptr) {}
  ~CMsgClientUFSGetFileListForApp() override;
  explicit constexpr CMsgClientUFSGetFileListForApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetFileListForApp(const CMsgClientUFSGetFileListForApp& from);
  CMsgClientUFSGetFileListForApp(CMsgClientUFSGetFileListForApp&& from) noexcept
    : CMsgClientUFSGetFileListForApp() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetFileListForApp& operator=(const CMsgClientUFSGetFileListForApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetFileListForApp& operator=(CMsgClientUFSGetFileListForApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetFileListForApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetFileListForApp* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetFileListForApp*>(
               &_CMsgClientUFSGetFileListForApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgClientUFSGetFileListForApp& a, CMsgClientUFSGetFileListForApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetFileListForApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetFileListForApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetFileListForApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetFileListForApp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetFileListForApp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetFileListForApp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetFileListForApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetFileListForApp";
  }
  protected:
  explicit CMsgClientUFSGetFileListForApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsToQueryFieldNumber = 1,
    kSendPathPrefixesFieldNumber = 2,
  };
  // repeated uint32 apps_to_query = 1;
  int apps_to_query_size() const;
  private:
  int _internal_apps_to_query_size() const;
  public:
  void clear_apps_to_query();
  private:
  uint32_t _internal_apps_to_query(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_apps_to_query() const;
  void _internal_add_apps_to_query(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_apps_to_query();
  public:
  uint32_t apps_to_query(int index) const;
  void set_apps_to_query(int index, uint32_t value);
  void add_apps_to_query(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      apps_to_query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_apps_to_query();

  // optional bool send_path_prefixes = 2;
  bool has_send_path_prefixes() const;
  private:
  bool _internal_has_send_path_prefixes() const;
  public:
  void clear_send_path_prefixes();
  bool send_path_prefixes() const;
  void set_send_path_prefixes(bool value);
  private:
  bool _internal_send_path_prefixes() const;
  void _internal_set_send_path_prefixes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetFileListForApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > apps_to_query_;
  bool send_path_prefixes_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetFileListForAppResponse_File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetFileListForAppResponse.File) */ {
 public:
  inline CMsgClientUFSGetFileListForAppResponse_File() : CMsgClientUFSGetFileListForAppResponse_File(nullptr) {}
  ~CMsgClientUFSGetFileListForAppResponse_File() override;
  explicit constexpr CMsgClientUFSGetFileListForAppResponse_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetFileListForAppResponse_File(const CMsgClientUFSGetFileListForAppResponse_File& from);
  CMsgClientUFSGetFileListForAppResponse_File(CMsgClientUFSGetFileListForAppResponse_File&& from) noexcept
    : CMsgClientUFSGetFileListForAppResponse_File() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetFileListForAppResponse_File& operator=(const CMsgClientUFSGetFileListForAppResponse_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetFileListForAppResponse_File& operator=(CMsgClientUFSGetFileListForAppResponse_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetFileListForAppResponse_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetFileListForAppResponse_File* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetFileListForAppResponse_File*>(
               &_CMsgClientUFSGetFileListForAppResponse_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgClientUFSGetFileListForAppResponse_File& a, CMsgClientUFSGetFileListForAppResponse_File& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetFileListForAppResponse_File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetFileListForAppResponse_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetFileListForAppResponse_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetFileListForAppResponse_File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetFileListForAppResponse_File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetFileListForAppResponse_File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetFileListForAppResponse_File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetFileListForAppResponse.File";
  }
  protected:
  explicit CMsgClientUFSGetFileListForAppResponse_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kShaFileFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kRawFileSizeFieldNumber = 5,
    kTimeStampFieldNumber = 4,
    kIsExplicitDeleteFieldNumber = 6,
    kPlatformsToSyncFieldNumber = 7,
    kPathPrefixIndexFieldNumber = 8,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional bytes sha_file = 3;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 raw_file_size = 5;
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional bool is_explicit_delete = 6;
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional uint32 platforms_to_sync = 7;
  bool has_platforms_to_sync() const;
  private:
  bool _internal_has_platforms_to_sync() const;
  public:
  void clear_platforms_to_sync();
  uint32_t platforms_to_sync() const;
  void set_platforms_to_sync(uint32_t value);
  private:
  uint32_t _internal_platforms_to_sync() const;
  void _internal_set_platforms_to_sync(uint32_t value);
  public:

  // optional uint32 path_prefix_index = 8;
  bool has_path_prefix_index() const;
  private:
  bool _internal_has_path_prefix_index() const;
  public:
  void clear_path_prefix_index();
  uint32_t path_prefix_index() const;
  void set_path_prefix_index(uint32_t value);
  private:
  uint32_t _internal_path_prefix_index() const;
  void _internal_set_path_prefix_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetFileListForAppResponse.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  uint32_t app_id_;
  uint32_t raw_file_size_;
  uint64_t time_stamp_;
  bool is_explicit_delete_;
  uint32_t platforms_to_sync_;
  uint32_t path_prefix_index_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetFileListForAppResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetFileListForAppResponse) */ {
 public:
  inline CMsgClientUFSGetFileListForAppResponse() : CMsgClientUFSGetFileListForAppResponse(nullptr) {}
  ~CMsgClientUFSGetFileListForAppResponse() override;
  explicit constexpr CMsgClientUFSGetFileListForAppResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetFileListForAppResponse(const CMsgClientUFSGetFileListForAppResponse& from);
  CMsgClientUFSGetFileListForAppResponse(CMsgClientUFSGetFileListForAppResponse&& from) noexcept
    : CMsgClientUFSGetFileListForAppResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetFileListForAppResponse& operator=(const CMsgClientUFSGetFileListForAppResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetFileListForAppResponse& operator=(CMsgClientUFSGetFileListForAppResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetFileListForAppResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetFileListForAppResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetFileListForAppResponse*>(
               &_CMsgClientUFSGetFileListForAppResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientUFSGetFileListForAppResponse& a, CMsgClientUFSGetFileListForAppResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetFileListForAppResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetFileListForAppResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetFileListForAppResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetFileListForAppResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetFileListForAppResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetFileListForAppResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetFileListForAppResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetFileListForAppResponse";
  }
  protected:
  explicit CMsgClientUFSGetFileListForAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientUFSGetFileListForAppResponse_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kPathPrefixesFieldNumber = 2,
  };
  // repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CMsgClientUFSGetFileListForAppResponse_File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSGetFileListForAppResponse_File >*
      mutable_files();
  private:
  const ::CMsgClientUFSGetFileListForAppResponse_File& _internal_files(int index) const;
  ::CMsgClientUFSGetFileListForAppResponse_File* _internal_add_files();
  public:
  const ::CMsgClientUFSGetFileListForAppResponse_File& files(int index) const;
  ::CMsgClientUFSGetFileListForAppResponse_File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSGetFileListForAppResponse_File >&
      files() const;

  // repeated string path_prefixes = 2;
  int path_prefixes_size() const;
  private:
  int _internal_path_prefixes_size() const;
  public:
  void clear_path_prefixes();
  const std::string& path_prefixes(int index) const;
  std::string* mutable_path_prefixes(int index);
  void set_path_prefixes(int index, const std::string& value);
  void set_path_prefixes(int index, std::string&& value);
  void set_path_prefixes(int index, const char* value);
  void set_path_prefixes(int index, const char* value, size_t size);
  std::string* add_path_prefixes();
  void add_path_prefixes(const std::string& value);
  void add_path_prefixes(std::string&& value);
  void add_path_prefixes(const char* value);
  void add_path_prefixes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& path_prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_path_prefixes();
  private:
  const std::string& _internal_path_prefixes(int index) const;
  std::string* _internal_add_path_prefixes();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetFileListForAppResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSGetFileListForAppResponse_File > files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> path_prefixes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSDownloadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSDownloadRequest) */ {
 public:
  inline CMsgClientUFSDownloadRequest() : CMsgClientUFSDownloadRequest(nullptr) {}
  ~CMsgClientUFSDownloadRequest() override;
  explicit constexpr CMsgClientUFSDownloadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSDownloadRequest(const CMsgClientUFSDownloadRequest& from);
  CMsgClientUFSDownloadRequest(CMsgClientUFSDownloadRequest&& from) noexcept
    : CMsgClientUFSDownloadRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSDownloadRequest& operator=(const CMsgClientUFSDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSDownloadRequest& operator=(CMsgClientUFSDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSDownloadRequest*>(
               &_CMsgClientUFSDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientUFSDownloadRequest& a, CMsgClientUFSDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSDownloadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSDownloadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSDownloadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSDownloadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSDownloadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSDownloadRequest";
  }
  protected:
  explicit CMsgClientUFSDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kCanHandleHttpFieldNumber = 3,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool can_handle_http = 3;
  bool has_can_handle_http() const;
  private:
  bool _internal_has_can_handle_http() const;
  public:
  void clear_can_handle_http();
  bool can_handle_http() const;
  void set_can_handle_http(bool value);
  private:
  bool _internal_can_handle_http() const;
  void _internal_set_can_handle_http(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  bool can_handle_http_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSDownloadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSDownloadResponse) */ {
 public:
  inline CMsgClientUFSDownloadResponse() : CMsgClientUFSDownloadResponse(nullptr) {}
  ~CMsgClientUFSDownloadResponse() override;
  explicit constexpr CMsgClientUFSDownloadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSDownloadResponse(const CMsgClientUFSDownloadResponse& from);
  CMsgClientUFSDownloadResponse(CMsgClientUFSDownloadResponse&& from) noexcept
    : CMsgClientUFSDownloadResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSDownloadResponse& operator=(const CMsgClientUFSDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSDownloadResponse& operator=(CMsgClientUFSDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSDownloadResponse*>(
               &_CMsgClientUFSDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientUFSDownloadResponse& a, CMsgClientUFSDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSDownloadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSDownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSDownloadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSDownloadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSDownloadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSDownloadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSDownloadResponse";
  }
  protected:
  explicit CMsgClientUFSDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFileFieldNumber = 5,
    kHttpHostFieldNumber = 9,
    kHttpUrlFieldNumber = 10,
    kKvHeadersFieldNumber = 11,
    kAppIdFieldNumber = 2,
    kFileSizeFieldNumber = 3,
    kTimeStampFieldNumber = 6,
    kRawFileSizeFieldNumber = 4,
    kIsExplicitDeleteFieldNumber = 7,
    kUseHttpFieldNumber = 8,
    kUseHttpsFieldNumber = 12,
    kEncryptedFieldNumber = 13,
    kEresultFieldNumber = 1,
  };
  // optional bytes sha_file = 5;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional string http_host = 9;
  bool has_http_host() const;
  private:
  bool _internal_has_http_host() const;
  public:
  void clear_http_host();
  const std::string& http_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_host();
  PROTOBUF_NODISCARD std::string* release_http_host();
  void set_allocated_http_host(std::string* http_host);
  private:
  const std::string& _internal_http_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_host(const std::string& value);
  std::string* _internal_mutable_http_host();
  public:

  // optional string http_url = 10;
  bool has_http_url() const;
  private:
  bool _internal_has_http_url() const;
  public:
  void clear_http_url();
  const std::string& http_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_url();
  PROTOBUF_NODISCARD std::string* release_http_url();
  void set_allocated_http_url(std::string* http_url);
  private:
  const std::string& _internal_http_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_url(const std::string& value);
  std::string* _internal_mutable_http_url();
  public:

  // optional bytes kv_headers = 11;
  bool has_kv_headers() const;
  private:
  bool _internal_has_kv_headers() const;
  public:
  void clear_kv_headers();
  const std::string& kv_headers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kv_headers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kv_headers();
  PROTOBUF_NODISCARD std::string* release_kv_headers();
  void set_allocated_kv_headers(std::string* kv_headers);
  private:
  const std::string& _internal_kv_headers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_headers(const std::string& value);
  std::string* _internal_mutable_kv_headers();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 file_size = 3;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 6;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional uint32 raw_file_size = 4;
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional bool is_explicit_delete = 7;
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional bool use_http = 8;
  bool has_use_http() const;
  private:
  bool _internal_has_use_http() const;
  public:
  void clear_use_http();
  bool use_http() const;
  void set_use_http(bool value);
  private:
  bool _internal_use_http() const;
  void _internal_set_use_http(bool value);
  public:

  // optional bool use_https = 12;
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // optional bool encrypted = 13;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSDownloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_headers_;
  uint32_t app_id_;
  uint32_t file_size_;
  uint64_t time_stamp_;
  uint32_t raw_file_size_;
  bool is_explicit_delete_;
  bool use_http_;
  bool use_https_;
  bool encrypted_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSLoginRequest) */ {
 public:
  inline CMsgClientUFSLoginRequest() : CMsgClientUFSLoginRequest(nullptr) {}
  ~CMsgClientUFSLoginRequest() override;
  explicit constexpr CMsgClientUFSLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSLoginRequest(const CMsgClientUFSLoginRequest& from);
  CMsgClientUFSLoginRequest(CMsgClientUFSLoginRequest&& from) noexcept
    : CMsgClientUFSLoginRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSLoginRequest& operator=(const CMsgClientUFSLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSLoginRequest& operator=(CMsgClientUFSLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSLoginRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSLoginRequest*>(
               &_CMsgClientUFSLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientUFSLoginRequest& a, CMsgClientUFSLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSLoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSLoginRequest";
  }
  protected:
  explicit CMsgClientUFSLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 3,
    kAmSessionTokenFieldNumber = 2,
    kProtocolVersionFieldNumber = 1,
  };
  // repeated uint32 apps = 3;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  private:
  uint32_t _internal_apps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_apps() const;
  void _internal_add_apps(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_apps();
  public:
  uint32_t apps(int index) const;
  void set_apps(int index, uint32_t value);
  void add_apps(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      apps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_apps();

  // optional uint64 am_session_token = 2;
  bool has_am_session_token() const;
  private:
  bool _internal_has_am_session_token() const;
  public:
  void clear_am_session_token();
  uint64_t am_session_token() const;
  void set_am_session_token(uint64_t value);
  private:
  uint64_t _internal_am_session_token() const;
  void _internal_set_am_session_token(uint64_t value);
  public:

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  uint32_t protocol_version() const;
  void set_protocol_version(uint32_t value);
  private:
  uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > apps_;
  uint64_t am_session_token_;
  uint32_t protocol_version_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSLoginResponse) */ {
 public:
  inline CMsgClientUFSLoginResponse() : CMsgClientUFSLoginResponse(nullptr) {}
  ~CMsgClientUFSLoginResponse() override;
  explicit constexpr CMsgClientUFSLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSLoginResponse(const CMsgClientUFSLoginResponse& from);
  CMsgClientUFSLoginResponse(CMsgClientUFSLoginResponse&& from) noexcept
    : CMsgClientUFSLoginResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSLoginResponse& operator=(const CMsgClientUFSLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSLoginResponse& operator=(CMsgClientUFSLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSLoginResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSLoginResponse*>(
               &_CMsgClientUFSLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgClientUFSLoginResponse& a, CMsgClientUFSLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSLoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSLoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSLoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSLoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSLoginResponse";
  }
  protected:
  explicit CMsgClientUFSLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetUGCDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetUGCDetails) */ {
 public:
  inline CMsgClientUFSGetUGCDetails() : CMsgClientUFSGetUGCDetails(nullptr) {}
  ~CMsgClientUFSGetUGCDetails() override;
  explicit constexpr CMsgClientUFSGetUGCDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from);
  CMsgClientUFSGetUGCDetails(CMsgClientUFSGetUGCDetails&& from) noexcept
    : CMsgClientUFSGetUGCDetails() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetUGCDetails& operator=(const CMsgClientUFSGetUGCDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetUGCDetails& operator=(CMsgClientUFSGetUGCDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetUGCDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetUGCDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetUGCDetails*>(
               &_CMsgClientUFSGetUGCDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgClientUFSGetUGCDetails& a, CMsgClientUFSGetUGCDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetUGCDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetUGCDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetUGCDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetUGCDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetUGCDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetUGCDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetUGCDetails";
  }
  protected:
  explicit CMsgClientUFSGetUGCDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHcontentFieldNumber = 1,
  };
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  bool has_hcontent() const;
  private:
  bool _internal_has_hcontent() const;
  public:
  void clear_hcontent();
  uint64_t hcontent() const;
  void set_hcontent(uint64_t value);
  private:
  uint64_t _internal_hcontent() const;
  void _internal_set_hcontent(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetUGCDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t hcontent_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetUGCDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetUGCDetailsResponse) */ {
 public:
  inline CMsgClientUFSGetUGCDetailsResponse() : CMsgClientUFSGetUGCDetailsResponse(nullptr) {}
  ~CMsgClientUFSGetUGCDetailsResponse() override;
  explicit constexpr CMsgClientUFSGetUGCDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from);
  CMsgClientUFSGetUGCDetailsResponse(CMsgClientUFSGetUGCDetailsResponse&& from) noexcept
    : CMsgClientUFSGetUGCDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetUGCDetailsResponse& operator=(const CMsgClientUFSGetUGCDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetUGCDetailsResponse& operator=(CMsgClientUFSGetUGCDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetUGCDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetUGCDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetUGCDetailsResponse*>(
               &_CMsgClientUFSGetUGCDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientUFSGetUGCDetailsResponse& a, CMsgClientUFSGetUGCDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetUGCDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetUGCDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetUGCDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetUGCDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetUGCDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetUGCDetailsResponse";
  }
  protected:
  explicit CMsgClientUFSGetUGCDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kRangecheckHostFieldNumber = 8,
    kFileEncodedSha1FieldNumber = 9,
    kAppIdFieldNumber = 3,
    kFileSizeFieldNumber = 6,
    kSteamidCreatorFieldNumber = 5,
    kCompressedFileSizeFieldNumber = 7,
    kEresultFieldNumber = 1,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 4;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string rangecheck_host = 8;
  bool has_rangecheck_host() const;
  private:
  bool _internal_has_rangecheck_host() const;
  public:
  void clear_rangecheck_host();
  const std::string& rangecheck_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rangecheck_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rangecheck_host();
  PROTOBUF_NODISCARD std::string* release_rangecheck_host();
  void set_allocated_rangecheck_host(std::string* rangecheck_host);
  private:
  const std::string& _internal_rangecheck_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rangecheck_host(const std::string& value);
  std::string* _internal_mutable_rangecheck_host();
  public:

  // optional string file_encoded_sha1 = 9;
  bool has_file_encoded_sha1() const;
  private:
  bool _internal_has_file_encoded_sha1() const;
  public:
  void clear_file_encoded_sha1();
  const std::string& file_encoded_sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_encoded_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_encoded_sha1();
  PROTOBUF_NODISCARD std::string* release_file_encoded_sha1();
  void set_allocated_file_encoded_sha1(std::string* file_encoded_sha1);
  private:
  const std::string& _internal_file_encoded_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_encoded_sha1(const std::string& value);
  std::string* _internal_mutable_file_encoded_sha1();
  public:

  // optional uint32 app_id = 3;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 file_size = 6;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional fixed64 steamid_creator = 5;
  bool has_steamid_creator() const;
  private:
  bool _internal_has_steamid_creator() const;
  public:
  void clear_steamid_creator();
  uint64_t steamid_creator() const;
  void set_steamid_creator(uint64_t value);
  private:
  uint64_t _internal_steamid_creator() const;
  void _internal_set_steamid_creator(uint64_t value);
  public:

  // optional uint32 compressed_file_size = 7;
  bool has_compressed_file_size() const;
  private:
  bool _internal_has_compressed_file_size() const;
  public:
  void clear_compressed_file_size();
  uint32_t compressed_file_size() const;
  void set_compressed_file_size(uint32_t value);
  private:
  uint32_t _internal_compressed_file_size() const;
  void _internal_set_compressed_file_size(uint32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetUGCDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rangecheck_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_encoded_sha1_;
  uint32_t app_id_;
  uint32_t file_size_;
  uint64_t steamid_creator_;
  uint32_t compressed_file_size_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetSingleFileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetSingleFileInfo) */ {
 public:
  inline CMsgClientUFSGetSingleFileInfo() : CMsgClientUFSGetSingleFileInfo(nullptr) {}
  ~CMsgClientUFSGetSingleFileInfo() override;
  explicit constexpr CMsgClientUFSGetSingleFileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from);
  CMsgClientUFSGetSingleFileInfo(CMsgClientUFSGetSingleFileInfo&& from) noexcept
    : CMsgClientUFSGetSingleFileInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetSingleFileInfo& operator=(const CMsgClientUFSGetSingleFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetSingleFileInfo& operator=(CMsgClientUFSGetSingleFileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetSingleFileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetSingleFileInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetSingleFileInfo*>(
               &_CMsgClientUFSGetSingleFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientUFSGetSingleFileInfo& a, CMsgClientUFSGetSingleFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetSingleFileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetSingleFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetSingleFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetSingleFileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetSingleFileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetSingleFileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetSingleFileInfo";
  }
  protected:
  explicit CMsgClientUFSGetSingleFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetSingleFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSGetSingleFileInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSGetSingleFileInfoResponse) */ {
 public:
  inline CMsgClientUFSGetSingleFileInfoResponse() : CMsgClientUFSGetSingleFileInfoResponse(nullptr) {}
  ~CMsgClientUFSGetSingleFileInfoResponse() override;
  explicit constexpr CMsgClientUFSGetSingleFileInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from);
  CMsgClientUFSGetSingleFileInfoResponse(CMsgClientUFSGetSingleFileInfoResponse&& from) noexcept
    : CMsgClientUFSGetSingleFileInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSGetSingleFileInfoResponse& operator=(const CMsgClientUFSGetSingleFileInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSGetSingleFileInfoResponse& operator=(CMsgClientUFSGetSingleFileInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSGetSingleFileInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSGetSingleFileInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSGetSingleFileInfoResponse*>(
               &_CMsgClientUFSGetSingleFileInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientUFSGetSingleFileInfoResponse& a, CMsgClientUFSGetSingleFileInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSGetSingleFileInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSGetSingleFileInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSGetSingleFileInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSGetSingleFileInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSGetSingleFileInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSGetSingleFileInfoResponse";
  }
  protected:
  explicit CMsgClientUFSGetSingleFileInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kShaFileFieldNumber = 4,
    kAppIdFieldNumber = 2,
    kRawFileSizeFieldNumber = 6,
    kTimeStampFieldNumber = 5,
    kIsExplicitDeleteFieldNumber = 7,
    kEresultFieldNumber = 1,
  };
  // optional string file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional bytes sha_file = 4;
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 raw_file_size = 6;
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 5;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional bool is_explicit_delete = 7;
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSGetSingleFileInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  uint32_t app_id_;
  uint32_t raw_file_size_;
  uint64_t time_stamp_;
  bool is_explicit_delete_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSShareFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSShareFile) */ {
 public:
  inline CMsgClientUFSShareFile() : CMsgClientUFSShareFile(nullptr) {}
  ~CMsgClientUFSShareFile() override;
  explicit constexpr CMsgClientUFSShareFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from);
  CMsgClientUFSShareFile(CMsgClientUFSShareFile&& from) noexcept
    : CMsgClientUFSShareFile() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSShareFile& operator=(const CMsgClientUFSShareFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSShareFile& operator=(CMsgClientUFSShareFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSShareFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSShareFile* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSShareFile*>(
               &_CMsgClientUFSShareFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientUFSShareFile& a, CMsgClientUFSShareFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSShareFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSShareFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSShareFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSShareFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSShareFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSShareFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSShareFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSShareFile";
  }
  protected:
  explicit CMsgClientUFSShareFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSShareFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientUFSShareFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientUFSShareFileResponse) */ {
 public:
  inline CMsgClientUFSShareFileResponse() : CMsgClientUFSShareFileResponse(nullptr) {}
  ~CMsgClientUFSShareFileResponse() override;
  explicit constexpr CMsgClientUFSShareFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from);
  CMsgClientUFSShareFileResponse(CMsgClientUFSShareFileResponse&& from) noexcept
    : CMsgClientUFSShareFileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientUFSShareFileResponse& operator=(const CMsgClientUFSShareFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientUFSShareFileResponse& operator=(CMsgClientUFSShareFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientUFSShareFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientUFSShareFileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientUFSShareFileResponse*>(
               &_CMsgClientUFSShareFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgClientUFSShareFileResponse& a, CMsgClientUFSShareFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientUFSShareFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientUFSShareFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientUFSShareFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientUFSShareFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientUFSShareFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientUFSShareFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientUFSShareFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientUFSShareFileResponse";
  }
  protected:
  explicit CMsgClientUFSShareFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
    kHcontentFieldNumber = 2,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  bool has_hcontent() const;
  private:
  bool _internal_has_hcontent() const;
  public:
  void clear_hcontent();
  uint64_t hcontent() const;
  void set_hcontent(uint64_t value);
  private:
  uint64_t _internal_hcontent() const;
  void _internal_set_hcontent(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientUFSShareFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t eresult_;
  uint64_t hcontent_;
  friend struct ::TableStruct_steammessages_5fclientserver_5fufs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientUFSUploadFileRequest

// optional uint32 app_id = 1;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSUploadFileRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.app_id)
}

// optional uint32 file_size = 2;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_file_size() const {
  return _internal_has_file_size();
}
inline void CMsgClientUFSUploadFileRequest::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.file_size)
  return _internal_file_size();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.file_size)
}

// optional uint32 raw_file_size = 3;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CMsgClientUFSUploadFileRequest::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.raw_file_size)
  return _internal_raw_file_size();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  raw_file_size_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.raw_file_size)
}

// optional bytes sha_file = 4;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSUploadFileRequest::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSUploadFileRequest::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileRequest::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.sha_file)
}
inline std::string* CMsgClientUFSUploadFileRequest::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileRequest.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileRequest::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileRequest::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileRequest::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileRequest.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileRequest::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileRequest.sha_file)
}

// optional uint64 time_stamp = 5;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CMsgClientUFSUploadFileRequest::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientUFSUploadFileRequest::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CMsgClientUFSUploadFileRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.time_stamp)
  return _internal_time_stamp();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.time_stamp)
}

// optional string file_name = 6;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSUploadFileRequest::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSUploadFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileRequest::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.file_name)
}
inline std::string* CMsgClientUFSUploadFileRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileRequest.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileRequest::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000002u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileRequest.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileRequest.file_name)
}

// optional uint32 platforms_to_sync_deprecated = 7;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_platforms_to_sync_deprecated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_platforms_to_sync_deprecated() const {
  return _internal_has_platforms_to_sync_deprecated();
}
inline void CMsgClientUFSUploadFileRequest::clear_platforms_to_sync_deprecated() {
  platforms_to_sync_deprecated_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_platforms_to_sync_deprecated() const {
  return platforms_to_sync_deprecated_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::platforms_to_sync_deprecated() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.platforms_to_sync_deprecated)
  return _internal_platforms_to_sync_deprecated();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_platforms_to_sync_deprecated(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  platforms_to_sync_deprecated_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_platforms_to_sync_deprecated(uint32_t value) {
  _internal_set_platforms_to_sync_deprecated(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.platforms_to_sync_deprecated)
}

// optional uint32 platforms_to_sync = 8 [default = 4294967295];
inline bool CMsgClientUFSUploadFileRequest::_internal_has_platforms_to_sync() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_platforms_to_sync() const {
  return _internal_has_platforms_to_sync();
}
inline void CMsgClientUFSUploadFileRequest::clear_platforms_to_sync() {
  platforms_to_sync_ = 4294967295u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_platforms_to_sync() const {
  return platforms_to_sync_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.platforms_to_sync)
  return _internal_platforms_to_sync();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_platforms_to_sync(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  platforms_to_sync_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_platforms_to_sync(uint32_t value) {
  _internal_set_platforms_to_sync(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.platforms_to_sync)
}

// optional uint32 cell_id = 9;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientUFSUploadFileRequest::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientUFSUploadFileRequest::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CMsgClientUFSUploadFileRequest::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  cell_id_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.cell_id)
}

// optional bool can_encrypt = 10;
inline bool CMsgClientUFSUploadFileRequest::_internal_has_can_encrypt() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileRequest::has_can_encrypt() const {
  return _internal_has_can_encrypt();
}
inline void CMsgClientUFSUploadFileRequest::clear_can_encrypt() {
  can_encrypt_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgClientUFSUploadFileRequest::_internal_can_encrypt() const {
  return can_encrypt_;
}
inline bool CMsgClientUFSUploadFileRequest::can_encrypt() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileRequest.can_encrypt)
  return _internal_can_encrypt();
}
inline void CMsgClientUFSUploadFileRequest::_internal_set_can_encrypt(bool value) {
  _has_bits_[0] |= 0x00000100u;
  can_encrypt_ = value;
}
inline void CMsgClientUFSUploadFileRequest::set_can_encrypt(bool value) {
  _internal_set_can_encrypt(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileRequest.can_encrypt)
}

// -------------------------------------------------------------------

// CMsgClientUFSUploadFileResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSUploadFileResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSUploadFileResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgClientUFSUploadFileResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSUploadFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  eresult_ = value;
}
inline void CMsgClientUFSUploadFileResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.eresult)
}

// optional bytes sha_file = 2;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSUploadFileResponse::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSUploadFileResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileResponse::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.sha_file)
}
inline std::string* CMsgClientUFSUploadFileResponse::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileResponse.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileResponse::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileResponse.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileResponse::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileResponse.sha_file)
}

// optional bool use_http = 3;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_use_http() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_use_http() const {
  return _internal_has_use_http();
}
inline void CMsgClientUFSUploadFileResponse::clear_use_http() {
  use_http_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientUFSUploadFileResponse::_internal_use_http() const {
  return use_http_;
}
inline bool CMsgClientUFSUploadFileResponse::use_http() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.use_http)
  return _internal_use_http();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_use_http(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_http_ = value;
}
inline void CMsgClientUFSUploadFileResponse::set_use_http(bool value) {
  _internal_set_use_http(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.use_http)
}

// optional string http_host = 4;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_http_host() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_http_host() const {
  return _internal_has_http_host();
}
inline void CMsgClientUFSUploadFileResponse::clear_http_host() {
  http_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSUploadFileResponse::http_host() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.http_host)
  return _internal_http_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileResponse::set_http_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.http_host)
}
inline std::string* CMsgClientUFSUploadFileResponse::mutable_http_host() {
  std::string* _s = _internal_mutable_http_host();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileResponse.http_host)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileResponse::_internal_http_host() const {
  return http_host_.Get();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_http_host(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::_internal_mutable_http_host() {
  _has_bits_[0] |= 0x00000002u;
  return http_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::release_http_host() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileResponse.http_host)
  if (!_internal_has_http_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = http_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileResponse::set_allocated_http_host(std::string* http_host) {
  if (http_host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  http_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileResponse.http_host)
}

// optional string http_url = 5;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_http_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_http_url() const {
  return _internal_has_http_url();
}
inline void CMsgClientUFSUploadFileResponse::clear_http_url() {
  http_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientUFSUploadFileResponse::http_url() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.http_url)
  return _internal_http_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileResponse::set_http_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.http_url)
}
inline std::string* CMsgClientUFSUploadFileResponse::mutable_http_url() {
  std::string* _s = _internal_mutable_http_url();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileResponse.http_url)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileResponse::_internal_http_url() const {
  return http_url_.Get();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_http_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::_internal_mutable_http_url() {
  _has_bits_[0] |= 0x00000004u;
  return http_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::release_http_url() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileResponse.http_url)
  if (!_internal_has_http_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = http_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileResponse::set_allocated_http_url(std::string* http_url) {
  if (http_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  http_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileResponse.http_url)
}

// optional bytes kv_headers = 6;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_kv_headers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_kv_headers() const {
  return _internal_has_kv_headers();
}
inline void CMsgClientUFSUploadFileResponse::clear_kv_headers() {
  kv_headers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientUFSUploadFileResponse::kv_headers() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.kv_headers)
  return _internal_kv_headers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileResponse::set_kv_headers(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 kv_headers_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.kv_headers)
}
inline std::string* CMsgClientUFSUploadFileResponse::mutable_kv_headers() {
  std::string* _s = _internal_mutable_kv_headers();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileResponse.kv_headers)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileResponse::_internal_kv_headers() const {
  return kv_headers_.Get();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_kv_headers(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  kv_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::_internal_mutable_kv_headers() {
  _has_bits_[0] |= 0x00000008u;
  return kv_headers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileResponse::release_kv_headers() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileResponse.kv_headers)
  if (!_internal_has_kv_headers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = kv_headers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_headers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileResponse::set_allocated_kv_headers(std::string* kv_headers) {
  if (kv_headers != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  kv_headers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kv_headers,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_headers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileResponse.kv_headers)
}

// optional bool use_https = 7;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_use_https() const {
  return _internal_has_use_https();
}
inline void CMsgClientUFSUploadFileResponse::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientUFSUploadFileResponse::_internal_use_https() const {
  return use_https_;
}
inline bool CMsgClientUFSUploadFileResponse::use_https() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.use_https)
  return _internal_use_https();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_https_ = value;
}
inline void CMsgClientUFSUploadFileResponse::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.use_https)
}

// optional bool encrypt_file = 8;
inline bool CMsgClientUFSUploadFileResponse::_internal_has_encrypt_file() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileResponse::has_encrypt_file() const {
  return _internal_has_encrypt_file();
}
inline void CMsgClientUFSUploadFileResponse::clear_encrypt_file() {
  encrypt_file_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgClientUFSUploadFileResponse::_internal_encrypt_file() const {
  return encrypt_file_;
}
inline bool CMsgClientUFSUploadFileResponse::encrypt_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileResponse.encrypt_file)
  return _internal_encrypt_file();
}
inline void CMsgClientUFSUploadFileResponse::_internal_set_encrypt_file(bool value) {
  _has_bits_[0] |= 0x00000040u;
  encrypt_file_ = value;
}
inline void CMsgClientUFSUploadFileResponse::set_encrypt_file(bool value) {
  _internal_set_encrypt_file(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileResponse.encrypt_file)
}

// -------------------------------------------------------------------

// CMsgClientUFSUploadCommit_File

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSUploadCommit_File::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommit_File::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSUploadCommit_File::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgClientUFSUploadCommit_File::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSUploadCommit_File::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.File.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSUploadCommit_File::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  eresult_ = value;
}
inline void CMsgClientUFSUploadCommit_File::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommit.File.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientUFSUploadCommit_File::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommit_File::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSUploadCommit_File::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientUFSUploadCommit_File::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSUploadCommit_File::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.File.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSUploadCommit_File::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientUFSUploadCommit_File::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommit.File.app_id)
}

// optional bytes sha_file = 3;
inline bool CMsgClientUFSUploadCommit_File::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommit_File::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSUploadCommit_File::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSUploadCommit_File::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.File.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadCommit_File::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommit.File.sha_file)
}
inline std::string* CMsgClientUFSUploadCommit_File::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadCommit.File.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSUploadCommit_File::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSUploadCommit_File::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommit_File::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommit_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadCommit.File.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadCommit_File::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadCommit.File.sha_file)
}

// optional uint32 cub_file = 4;
inline bool CMsgClientUFSUploadCommit_File::_internal_has_cub_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommit_File::has_cub_file() const {
  return _internal_has_cub_file();
}
inline void CMsgClientUFSUploadCommit_File::clear_cub_file() {
  cub_file_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientUFSUploadCommit_File::_internal_cub_file() const {
  return cub_file_;
}
inline uint32_t CMsgClientUFSUploadCommit_File::cub_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.File.cub_file)
  return _internal_cub_file();
}
inline void CMsgClientUFSUploadCommit_File::_internal_set_cub_file(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cub_file_ = value;
}
inline void CMsgClientUFSUploadCommit_File::set_cub_file(uint32_t value) {
  _internal_set_cub_file(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommit.File.cub_file)
}

// optional string file_name = 5;
inline bool CMsgClientUFSUploadCommit_File::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommit_File::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSUploadCommit_File::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSUploadCommit_File::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.File.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadCommit_File::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommit.File.file_name)
}
inline std::string* CMsgClientUFSUploadCommit_File::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadCommit.File.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSUploadCommit_File::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSUploadCommit_File::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommit_File::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000002u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommit_File::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadCommit.File.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadCommit_File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadCommit.File.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSUploadCommit

// repeated .CMsgClientUFSUploadCommit.File files = 1;
inline int CMsgClientUFSUploadCommit::_internal_files_size() const {
  return files_.size();
}
inline int CMsgClientUFSUploadCommit::files_size() const {
  return _internal_files_size();
}
inline void CMsgClientUFSUploadCommit::clear_files() {
  files_.Clear();
}
inline ::CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadCommit.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommit_File >*
CMsgClientUFSUploadCommit::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSUploadCommit.files)
  return &files_;
}
inline const ::CMsgClientUFSUploadCommit_File& CMsgClientUFSUploadCommit::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CMsgClientUFSUploadCommit_File& CMsgClientUFSUploadCommit::files(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommit.files)
  return _internal_files(index);
}
inline ::CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit::_internal_add_files() {
  return files_.Add();
}
inline ::CMsgClientUFSUploadCommit_File* CMsgClientUFSUploadCommit::add_files() {
  ::CMsgClientUFSUploadCommit_File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CMsgClientUFSUploadCommit.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommit_File >&
CMsgClientUFSUploadCommit::files() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSUploadCommit.files)
  return files_;
}

// -------------------------------------------------------------------

// CMsgClientUFSUploadCommitResponse_File

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSUploadCommitResponse_File::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommitResponse_File::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSUploadCommitResponse_File::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientUFSUploadCommitResponse_File::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSUploadCommitResponse_File::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommitResponse.File.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSUploadCommitResponse_File::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientUFSUploadCommitResponse_File::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommitResponse.File.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientUFSUploadCommitResponse_File::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommitResponse_File::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSUploadCommitResponse_File::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSUploadCommitResponse_File::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSUploadCommitResponse_File::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommitResponse.File.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSUploadCommitResponse_File::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSUploadCommitResponse_File::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommitResponse.File.app_id)
}

// optional bytes sha_file = 3;
inline bool CMsgClientUFSUploadCommitResponse_File::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadCommitResponse_File::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSUploadCommitResponse_File::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSUploadCommitResponse_File::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommitResponse.File.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadCommitResponse_File::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadCommitResponse.File.sha_file)
}
inline std::string* CMsgClientUFSUploadCommitResponse_File::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadCommitResponse.File.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSUploadCommitResponse_File::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSUploadCommitResponse_File::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommitResponse_File::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadCommitResponse_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadCommitResponse.File.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadCommitResponse_File::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadCommitResponse.File.sha_file)
}

// -------------------------------------------------------------------

// CMsgClientUFSUploadCommitResponse

// repeated .CMsgClientUFSUploadCommitResponse.File files = 1;
inline int CMsgClientUFSUploadCommitResponse::_internal_files_size() const {
  return files_.size();
}
inline int CMsgClientUFSUploadCommitResponse::files_size() const {
  return _internal_files_size();
}
inline void CMsgClientUFSUploadCommitResponse::clear_files() {
  files_.Clear();
}
inline ::CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadCommitResponse.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommitResponse_File >*
CMsgClientUFSUploadCommitResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSUploadCommitResponse.files)
  return &files_;
}
inline const ::CMsgClientUFSUploadCommitResponse_File& CMsgClientUFSUploadCommitResponse::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CMsgClientUFSUploadCommitResponse_File& CMsgClientUFSUploadCommitResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadCommitResponse.files)
  return _internal_files(index);
}
inline ::CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse::_internal_add_files() {
  return files_.Add();
}
inline ::CMsgClientUFSUploadCommitResponse_File* CMsgClientUFSUploadCommitResponse::add_files() {
  ::CMsgClientUFSUploadCommitResponse_File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CMsgClientUFSUploadCommitResponse.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSUploadCommitResponse_File >&
CMsgClientUFSUploadCommitResponse::files() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSUploadCommitResponse.files)
  return files_;
}

// -------------------------------------------------------------------

// CMsgClientUFSFileChunk

// optional bytes sha_file = 1;
inline bool CMsgClientUFSFileChunk::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSFileChunk::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSFileChunk::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSFileChunk::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSFileChunk.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSFileChunk::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSFileChunk.sha_file)
}
inline std::string* CMsgClientUFSFileChunk::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSFileChunk.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSFileChunk::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSFileChunk::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSFileChunk::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSFileChunk::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSFileChunk.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSFileChunk::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSFileChunk.sha_file)
}

// optional uint32 file_start = 2;
inline bool CMsgClientUFSFileChunk::_internal_has_file_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSFileChunk::has_file_start() const {
  return _internal_has_file_start();
}
inline void CMsgClientUFSFileChunk::clear_file_start() {
  file_start_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientUFSFileChunk::_internal_file_start() const {
  return file_start_;
}
inline uint32_t CMsgClientUFSFileChunk::file_start() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSFileChunk.file_start)
  return _internal_file_start();
}
inline void CMsgClientUFSFileChunk::_internal_set_file_start(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  file_start_ = value;
}
inline void CMsgClientUFSFileChunk::set_file_start(uint32_t value) {
  _internal_set_file_start(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSFileChunk.file_start)
}

// optional bytes data = 3;
inline bool CMsgClientUFSFileChunk::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSFileChunk::has_data() const {
  return _internal_has_data();
}
inline void CMsgClientUFSFileChunk::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSFileChunk::data() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSFileChunk.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSFileChunk::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSFileChunk.data)
}
inline std::string* CMsgClientUFSFileChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSFileChunk.data)
  return _s;
}
inline const std::string& CMsgClientUFSFileChunk::_internal_data() const {
  return data_.Get();
}
inline void CMsgClientUFSFileChunk::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSFileChunk::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSFileChunk::release_data() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSFileChunk.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSFileChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSFileChunk.data)
}

// -------------------------------------------------------------------

// CMsgClientUFSTransferHeartbeat

// -------------------------------------------------------------------

// CMsgClientUFSUploadFileFinished

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSUploadFileFinished::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileFinished::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSUploadFileFinished::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientUFSUploadFileFinished::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSUploadFileFinished::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileFinished.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSUploadFileFinished::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientUFSUploadFileFinished::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileFinished.eresult)
}

// optional bytes sha_file = 2;
inline bool CMsgClientUFSUploadFileFinished::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSUploadFileFinished::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSUploadFileFinished::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSUploadFileFinished::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSUploadFileFinished.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSUploadFileFinished::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSUploadFileFinished.sha_file)
}
inline std::string* CMsgClientUFSUploadFileFinished::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSUploadFileFinished.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSUploadFileFinished::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSUploadFileFinished::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileFinished::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSUploadFileFinished::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSUploadFileFinished.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSUploadFileFinished::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSUploadFileFinished.sha_file)
}

// -------------------------------------------------------------------

// CMsgClientUFSDeleteFileRequest

// optional uint32 app_id = 1;
inline bool CMsgClientUFSDeleteFileRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSDeleteFileRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSDeleteFileRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSDeleteFileRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSDeleteFileRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDeleteFileRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSDeleteFileRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSDeleteFileRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDeleteFileRequest.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSDeleteFileRequest::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSDeleteFileRequest::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSDeleteFileRequest::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSDeleteFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDeleteFileRequest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDeleteFileRequest::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDeleteFileRequest.file_name)
}
inline std::string* CMsgClientUFSDeleteFileRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDeleteFileRequest.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSDeleteFileRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSDeleteFileRequest::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDeleteFileRequest::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDeleteFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDeleteFileRequest.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDeleteFileRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDeleteFileRequest.file_name)
}

// optional bool is_explicit_delete = 3;
inline bool CMsgClientUFSDeleteFileRequest::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSDeleteFileRequest::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CMsgClientUFSDeleteFileRequest::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientUFSDeleteFileRequest::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CMsgClientUFSDeleteFileRequest::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDeleteFileRequest.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CMsgClientUFSDeleteFileRequest::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_explicit_delete_ = value;
}
inline void CMsgClientUFSDeleteFileRequest::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDeleteFileRequest.is_explicit_delete)
}

// -------------------------------------------------------------------

// CMsgClientUFSDeleteFileResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSDeleteFileResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSDeleteFileResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSDeleteFileResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientUFSDeleteFileResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSDeleteFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDeleteFileResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSDeleteFileResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientUFSDeleteFileResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDeleteFileResponse.eresult)
}

// optional string file_name = 2;
inline bool CMsgClientUFSDeleteFileResponse::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSDeleteFileResponse::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSDeleteFileResponse::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSDeleteFileResponse::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDeleteFileResponse.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDeleteFileResponse::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDeleteFileResponse.file_name)
}
inline std::string* CMsgClientUFSDeleteFileResponse::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDeleteFileResponse.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSDeleteFileResponse::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSDeleteFileResponse::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDeleteFileResponse::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDeleteFileResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDeleteFileResponse.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDeleteFileResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDeleteFileResponse.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetFileListForApp

// repeated uint32 apps_to_query = 1;
inline int CMsgClientUFSGetFileListForApp::_internal_apps_to_query_size() const {
  return apps_to_query_.size();
}
inline int CMsgClientUFSGetFileListForApp::apps_to_query_size() const {
  return _internal_apps_to_query_size();
}
inline void CMsgClientUFSGetFileListForApp::clear_apps_to_query() {
  apps_to_query_.Clear();
}
inline uint32_t CMsgClientUFSGetFileListForApp::_internal_apps_to_query(int index) const {
  return apps_to_query_.Get(index);
}
inline uint32_t CMsgClientUFSGetFileListForApp::apps_to_query(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForApp.apps_to_query)
  return _internal_apps_to_query(index);
}
inline void CMsgClientUFSGetFileListForApp::set_apps_to_query(int index, uint32_t value) {
  apps_to_query_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForApp.apps_to_query)
}
inline void CMsgClientUFSGetFileListForApp::_internal_add_apps_to_query(uint32_t value) {
  apps_to_query_.Add(value);
}
inline void CMsgClientUFSGetFileListForApp::add_apps_to_query(uint32_t value) {
  _internal_add_apps_to_query(value);
  // @@protoc_insertion_point(field_add:CMsgClientUFSGetFileListForApp.apps_to_query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientUFSGetFileListForApp::_internal_apps_to_query() const {
  return apps_to_query_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientUFSGetFileListForApp::apps_to_query() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSGetFileListForApp.apps_to_query)
  return _internal_apps_to_query();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientUFSGetFileListForApp::_internal_mutable_apps_to_query() {
  return &apps_to_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientUFSGetFileListForApp::mutable_apps_to_query() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSGetFileListForApp.apps_to_query)
  return _internal_mutable_apps_to_query();
}

// optional bool send_path_prefixes = 2;
inline bool CMsgClientUFSGetFileListForApp::_internal_has_send_path_prefixes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForApp::has_send_path_prefixes() const {
  return _internal_has_send_path_prefixes();
}
inline void CMsgClientUFSGetFileListForApp::clear_send_path_prefixes() {
  send_path_prefixes_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientUFSGetFileListForApp::_internal_send_path_prefixes() const {
  return send_path_prefixes_;
}
inline bool CMsgClientUFSGetFileListForApp::send_path_prefixes() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForApp.send_path_prefixes)
  return _internal_send_path_prefixes();
}
inline void CMsgClientUFSGetFileListForApp::_internal_set_send_path_prefixes(bool value) {
  _has_bits_[0] |= 0x00000001u;
  send_path_prefixes_ = value;
}
inline void CMsgClientUFSGetFileListForApp::set_send_path_prefixes(bool value) {
  _internal_set_send_path_prefixes(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForApp.send_path_prefixes)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetFileListForAppResponse_File

// optional uint32 app_id = 1;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse_File::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetFileListForAppResponse_File::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.file_name)
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetFileListForAppResponse.File.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse_File::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetFileListForAppResponse.File.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetFileListForAppResponse.File.file_name)
}

// optional bytes sha_file = 3;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse_File::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetFileListForAppResponse_File::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse_File::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000002u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetFileListForAppResponse_File::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetFileListForAppResponse.File.sha_file)
}

// optional uint64 time_stamp = 4;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientUFSGetFileListForAppResponse_File::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CMsgClientUFSGetFileListForAppResponse_File::time_stamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.time_stamp)
  return _internal_time_stamp();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.time_stamp)
}

// optional uint32 raw_file_size = 5;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.raw_file_size)
  return _internal_raw_file_size();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  raw_file_size_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.raw_file_size)
}

// optional bool is_explicit_delete = 6;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_explicit_delete_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.is_explicit_delete)
}

// optional uint32 platforms_to_sync = 7;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_platforms_to_sync() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_platforms_to_sync() const {
  return _internal_has_platforms_to_sync();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_platforms_to_sync() {
  platforms_to_sync_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::_internal_platforms_to_sync() const {
  return platforms_to_sync_;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.platforms_to_sync)
  return _internal_platforms_to_sync();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_platforms_to_sync(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  platforms_to_sync_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_platforms_to_sync(uint32_t value) {
  _internal_set_platforms_to_sync(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.platforms_to_sync)
}

// optional uint32 path_prefix_index = 8;
inline bool CMsgClientUFSGetFileListForAppResponse_File::_internal_has_path_prefix_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSGetFileListForAppResponse_File::has_path_prefix_index() const {
  return _internal_has_path_prefix_index();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::clear_path_prefix_index() {
  path_prefix_index_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::_internal_path_prefix_index() const {
  return path_prefix_index_;
}
inline uint32_t CMsgClientUFSGetFileListForAppResponse_File::path_prefix_index() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.File.path_prefix_index)
  return _internal_path_prefix_index();
}
inline void CMsgClientUFSGetFileListForAppResponse_File::_internal_set_path_prefix_index(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  path_prefix_index_ = value;
}
inline void CMsgClientUFSGetFileListForAppResponse_File::set_path_prefix_index(uint32_t value) {
  _internal_set_path_prefix_index(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.File.path_prefix_index)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetFileListForAppResponse

// repeated .CMsgClientUFSGetFileListForAppResponse.File files = 1;
inline int CMsgClientUFSGetFileListForAppResponse::_internal_files_size() const {
  return files_.size();
}
inline int CMsgClientUFSGetFileListForAppResponse::files_size() const {
  return _internal_files_size();
}
inline void CMsgClientUFSGetFileListForAppResponse::clear_files() {
  files_.Clear();
}
inline ::CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetFileListForAppResponse.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSGetFileListForAppResponse_File >*
CMsgClientUFSGetFileListForAppResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSGetFileListForAppResponse.files)
  return &files_;
}
inline const ::CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.files)
  return _internal_files(index);
}
inline ::CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse::_internal_add_files() {
  return files_.Add();
}
inline ::CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse::add_files() {
  ::CMsgClientUFSGetFileListForAppResponse_File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CMsgClientUFSGetFileListForAppResponse.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientUFSGetFileListForAppResponse_File >&
CMsgClientUFSGetFileListForAppResponse::files() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSGetFileListForAppResponse.files)
  return files_;
}

// repeated string path_prefixes = 2;
inline int CMsgClientUFSGetFileListForAppResponse::_internal_path_prefixes_size() const {
  return path_prefixes_.size();
}
inline int CMsgClientUFSGetFileListForAppResponse::path_prefixes_size() const {
  return _internal_path_prefixes_size();
}
inline void CMsgClientUFSGetFileListForAppResponse::clear_path_prefixes() {
  path_prefixes_.Clear();
}
inline std::string* CMsgClientUFSGetFileListForAppResponse::add_path_prefixes() {
  std::string* _s = _internal_add_path_prefixes();
  // @@protoc_insertion_point(field_add_mutable:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return _s;
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse::_internal_path_prefixes(int index) const {
  return path_prefixes_.Get(index);
}
inline const std::string& CMsgClientUFSGetFileListForAppResponse::path_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return _internal_path_prefixes(index);
}
inline std::string* CMsgClientUFSGetFileListForAppResponse::mutable_path_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_.Mutable(index);
}
inline void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const std::string& value) {
  path_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, std::string&& value) {
  path_prefixes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::set_path_prefixes(int index, const char* value, size_t size) {
  path_prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline std::string* CMsgClientUFSGetFileListForAppResponse::_internal_add_path_prefixes() {
  return path_prefixes_.Add();
}
inline void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const std::string& value) {
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(std::string&& value) {
  path_prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline void CMsgClientUFSGetFileListForAppResponse::add_path_prefixes(const char* value, size_t size) {
  path_prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgClientUFSGetFileListForAppResponse::path_prefixes() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return path_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgClientUFSGetFileListForAppResponse::mutable_path_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSGetFileListForAppResponse.path_prefixes)
  return &path_prefixes_;
}

// -------------------------------------------------------------------

// CMsgClientUFSDownloadRequest

// optional uint32 app_id = 1;
inline bool CMsgClientUFSDownloadRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSDownloadRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSDownloadRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSDownloadRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSDownloadRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSDownloadRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadRequest.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSDownloadRequest::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadRequest::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSDownloadRequest::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSDownloadRequest::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadRequest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDownloadRequest::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadRequest.file_name)
}
inline std::string* CMsgClientUFSDownloadRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDownloadRequest.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSDownloadRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSDownloadRequest::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadRequest::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDownloadRequest.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDownloadRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDownloadRequest.file_name)
}

// optional bool can_handle_http = 3;
inline bool CMsgClientUFSDownloadRequest::_internal_has_can_handle_http() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadRequest::has_can_handle_http() const {
  return _internal_has_can_handle_http();
}
inline void CMsgClientUFSDownloadRequest::clear_can_handle_http() {
  can_handle_http_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientUFSDownloadRequest::_internal_can_handle_http() const {
  return can_handle_http_;
}
inline bool CMsgClientUFSDownloadRequest::can_handle_http() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadRequest.can_handle_http)
  return _internal_can_handle_http();
}
inline void CMsgClientUFSDownloadRequest::_internal_set_can_handle_http(bool value) {
  _has_bits_[0] |= 0x00000004u;
  can_handle_http_ = value;
}
inline void CMsgClientUFSDownloadRequest::set_can_handle_http(bool value) {
  _internal_set_can_handle_http(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadRequest.can_handle_http)
}

// -------------------------------------------------------------------

// CMsgClientUFSDownloadResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSDownloadResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSDownloadResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t CMsgClientUFSDownloadResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSDownloadResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  eresult_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientUFSDownloadResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSDownloadResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientUFSDownloadResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSDownloadResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.app_id)
}

// optional uint32 file_size = 3;
inline bool CMsgClientUFSDownloadResponse::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_file_size() const {
  return _internal_has_file_size();
}
inline void CMsgClientUFSDownloadResponse::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientUFSDownloadResponse::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CMsgClientUFSDownloadResponse::file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.file_size)
  return _internal_file_size();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  file_size_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.file_size)
}

// optional uint32 raw_file_size = 4;
inline bool CMsgClientUFSDownloadResponse::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CMsgClientUFSDownloadResponse::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientUFSDownloadResponse::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CMsgClientUFSDownloadResponse::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.raw_file_size)
  return _internal_raw_file_size();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  raw_file_size_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.raw_file_size)
}

// optional bytes sha_file = 5;
inline bool CMsgClientUFSDownloadResponse::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSDownloadResponse::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSDownloadResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDownloadResponse::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.sha_file)
}
inline std::string* CMsgClientUFSDownloadResponse::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDownloadResponse.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSDownloadResponse::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDownloadResponse.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDownloadResponse::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDownloadResponse.sha_file)
}

// optional uint64 time_stamp = 6;
inline bool CMsgClientUFSDownloadResponse::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CMsgClientUFSDownloadResponse::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientUFSDownloadResponse::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CMsgClientUFSDownloadResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.time_stamp)
  return _internal_time_stamp();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  time_stamp_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.time_stamp)
}

// optional bool is_explicit_delete = 7;
inline bool CMsgClientUFSDownloadResponse::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CMsgClientUFSDownloadResponse::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgClientUFSDownloadResponse::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CMsgClientUFSDownloadResponse::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_explicit_delete_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.is_explicit_delete)
}

// optional bool use_http = 8;
inline bool CMsgClientUFSDownloadResponse::_internal_has_use_http() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_use_http() const {
  return _internal_has_use_http();
}
inline void CMsgClientUFSDownloadResponse::clear_use_http() {
  use_http_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgClientUFSDownloadResponse::_internal_use_http() const {
  return use_http_;
}
inline bool CMsgClientUFSDownloadResponse::use_http() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.use_http)
  return _internal_use_http();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_use_http(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_http_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_use_http(bool value) {
  _internal_set_use_http(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.use_http)
}

// optional string http_host = 9;
inline bool CMsgClientUFSDownloadResponse::_internal_has_http_host() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_http_host() const {
  return _internal_has_http_host();
}
inline void CMsgClientUFSDownloadResponse::clear_http_host() {
  http_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSDownloadResponse::http_host() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.http_host)
  return _internal_http_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDownloadResponse::set_http_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.http_host)
}
inline std::string* CMsgClientUFSDownloadResponse::mutable_http_host() {
  std::string* _s = _internal_mutable_http_host();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDownloadResponse.http_host)
  return _s;
}
inline const std::string& CMsgClientUFSDownloadResponse::_internal_http_host() const {
  return http_host_.Get();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_http_host(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::_internal_mutable_http_host() {
  _has_bits_[0] |= 0x00000002u;
  return http_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::release_http_host() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDownloadResponse.http_host)
  if (!_internal_has_http_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = http_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDownloadResponse::set_allocated_http_host(std::string* http_host) {
  if (http_host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  http_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDownloadResponse.http_host)
}

// optional string http_url = 10;
inline bool CMsgClientUFSDownloadResponse::_internal_has_http_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_http_url() const {
  return _internal_has_http_url();
}
inline void CMsgClientUFSDownloadResponse::clear_http_url() {
  http_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientUFSDownloadResponse::http_url() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.http_url)
  return _internal_http_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDownloadResponse::set_http_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.http_url)
}
inline std::string* CMsgClientUFSDownloadResponse::mutable_http_url() {
  std::string* _s = _internal_mutable_http_url();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDownloadResponse.http_url)
  return _s;
}
inline const std::string& CMsgClientUFSDownloadResponse::_internal_http_url() const {
  return http_url_.Get();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_http_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  http_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::_internal_mutable_http_url() {
  _has_bits_[0] |= 0x00000004u;
  return http_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::release_http_url() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDownloadResponse.http_url)
  if (!_internal_has_http_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = http_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDownloadResponse::set_allocated_http_url(std::string* http_url) {
  if (http_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  http_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDownloadResponse.http_url)
}

// optional bytes kv_headers = 11;
inline bool CMsgClientUFSDownloadResponse::_internal_has_kv_headers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_kv_headers() const {
  return _internal_has_kv_headers();
}
inline void CMsgClientUFSDownloadResponse::clear_kv_headers() {
  kv_headers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientUFSDownloadResponse::kv_headers() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.kv_headers)
  return _internal_kv_headers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSDownloadResponse::set_kv_headers(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 kv_headers_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.kv_headers)
}
inline std::string* CMsgClientUFSDownloadResponse::mutable_kv_headers() {
  std::string* _s = _internal_mutable_kv_headers();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSDownloadResponse.kv_headers)
  return _s;
}
inline const std::string& CMsgClientUFSDownloadResponse::_internal_kv_headers() const {
  return kv_headers_.Get();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_kv_headers(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  kv_headers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::_internal_mutable_kv_headers() {
  _has_bits_[0] |= 0x00000008u;
  return kv_headers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSDownloadResponse::release_kv_headers() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSDownloadResponse.kv_headers)
  if (!_internal_has_kv_headers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = kv_headers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_headers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSDownloadResponse::set_allocated_kv_headers(std::string* kv_headers) {
  if (kv_headers != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  kv_headers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kv_headers,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_headers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_headers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSDownloadResponse.kv_headers)
}

// optional bool use_https = 12;
inline bool CMsgClientUFSDownloadResponse::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_use_https() const {
  return _internal_has_use_https();
}
inline void CMsgClientUFSDownloadResponse::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgClientUFSDownloadResponse::_internal_use_https() const {
  return use_https_;
}
inline bool CMsgClientUFSDownloadResponse::use_https() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.use_https)
  return _internal_use_https();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_https_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.use_https)
}

// optional bool encrypted = 13;
inline bool CMsgClientUFSDownloadResponse::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientUFSDownloadResponse::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void CMsgClientUFSDownloadResponse::clear_encrypted() {
  encrypted_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgClientUFSDownloadResponse::_internal_encrypted() const {
  return encrypted_;
}
inline bool CMsgClientUFSDownloadResponse::encrypted() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSDownloadResponse.encrypted)
  return _internal_encrypted();
}
inline void CMsgClientUFSDownloadResponse::_internal_set_encrypted(bool value) {
  _has_bits_[0] |= 0x00000800u;
  encrypted_ = value;
}
inline void CMsgClientUFSDownloadResponse::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSDownloadResponse.encrypted)
}

// -------------------------------------------------------------------

// CMsgClientUFSLoginRequest

// optional uint32 protocol_version = 1;
inline bool CMsgClientUFSLoginRequest::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSLoginRequest::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void CMsgClientUFSLoginRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSLoginRequest::_internal_protocol_version() const {
  return protocol_version_;
}
inline uint32_t CMsgClientUFSLoginRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSLoginRequest.protocol_version)
  return _internal_protocol_version();
}
inline void CMsgClientUFSLoginRequest::_internal_set_protocol_version(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_version_ = value;
}
inline void CMsgClientUFSLoginRequest::set_protocol_version(uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSLoginRequest.protocol_version)
}

// optional uint64 am_session_token = 2;
inline bool CMsgClientUFSLoginRequest::_internal_has_am_session_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSLoginRequest::has_am_session_token() const {
  return _internal_has_am_session_token();
}
inline void CMsgClientUFSLoginRequest::clear_am_session_token() {
  am_session_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientUFSLoginRequest::_internal_am_session_token() const {
  return am_session_token_;
}
inline uint64_t CMsgClientUFSLoginRequest::am_session_token() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSLoginRequest.am_session_token)
  return _internal_am_session_token();
}
inline void CMsgClientUFSLoginRequest::_internal_set_am_session_token(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  am_session_token_ = value;
}
inline void CMsgClientUFSLoginRequest::set_am_session_token(uint64_t value) {
  _internal_set_am_session_token(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSLoginRequest.am_session_token)
}

// repeated uint32 apps = 3;
inline int CMsgClientUFSLoginRequest::_internal_apps_size() const {
  return apps_.size();
}
inline int CMsgClientUFSLoginRequest::apps_size() const {
  return _internal_apps_size();
}
inline void CMsgClientUFSLoginRequest::clear_apps() {
  apps_.Clear();
}
inline uint32_t CMsgClientUFSLoginRequest::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline uint32_t CMsgClientUFSLoginRequest::apps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSLoginRequest.apps)
  return _internal_apps(index);
}
inline void CMsgClientUFSLoginRequest::set_apps(int index, uint32_t value) {
  apps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSLoginRequest.apps)
}
inline void CMsgClientUFSLoginRequest::_internal_add_apps(uint32_t value) {
  apps_.Add(value);
}
inline void CMsgClientUFSLoginRequest::add_apps(uint32_t value) {
  _internal_add_apps(value);
  // @@protoc_insertion_point(field_add:CMsgClientUFSLoginRequest.apps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientUFSLoginRequest::_internal_apps() const {
  return apps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientUFSLoginRequest::apps() const {
  // @@protoc_insertion_point(field_list:CMsgClientUFSLoginRequest.apps)
  return _internal_apps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientUFSLoginRequest::_internal_mutable_apps() {
  return &apps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientUFSLoginRequest::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientUFSLoginRequest.apps)
  return _internal_mutable_apps();
}

// -------------------------------------------------------------------

// CMsgClientUFSLoginResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSLoginResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSLoginResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSLoginResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgClientUFSLoginResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSLoginResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSLoginResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSLoginResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientUFSLoginResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSLoginResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetUGCDetails

// optional fixed64 hcontent = 1 [default = 18446744073709551615];
inline bool CMsgClientUFSGetUGCDetails::_internal_has_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetails::has_hcontent() const {
  return _internal_has_hcontent();
}
inline void CMsgClientUFSGetUGCDetails::clear_hcontent() {
  hcontent_ = uint64_t{18446744073709551615u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientUFSGetUGCDetails::_internal_hcontent() const {
  return hcontent_;
}
inline uint64_t CMsgClientUFSGetUGCDetails::hcontent() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetails.hcontent)
  return _internal_hcontent();
}
inline void CMsgClientUFSGetUGCDetails::_internal_set_hcontent(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  hcontent_ = value;
}
inline void CMsgClientUFSGetUGCDetails::set_hcontent(uint64_t value) {
  _internal_set_hcontent(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetails.hcontent)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetUGCDetailsResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgClientUFSGetUGCDetailsResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSGetUGCDetailsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  eresult_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.eresult)
}

// optional string url = 2;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_url() const {
  return _internal_has_url();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::url() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetUGCDetailsResponse::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.url)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.url)
  return _s;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_url() const {
  return url_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_url() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.url)
}

// optional uint32 app_id = 3;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.app_id)
}

// optional string filename = 4;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_filename() const {
  return _internal_has_filename();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::filename() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetUGCDetailsResponse::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.filename)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.filename)
  return _s;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_filename() const {
  return filename_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_filename() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.filename)
}

// optional fixed64 steamid_creator = 5;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_steamid_creator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_steamid_creator() const {
  return _internal_has_steamid_creator();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_steamid_creator() {
  steamid_creator_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientUFSGetUGCDetailsResponse::_internal_steamid_creator() const {
  return steamid_creator_;
}
inline uint64_t CMsgClientUFSGetUGCDetailsResponse::steamid_creator() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
  return _internal_steamid_creator();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_steamid_creator(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_creator_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_steamid_creator(uint64_t value) {
  _internal_set_steamid_creator(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.steamid_creator)
}

// optional uint32 file_size = 6;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_file_size() const {
  return _internal_has_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.file_size)
  return _internal_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  file_size_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.file_size)
}

// optional uint32 compressed_file_size = 7;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_compressed_file_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_compressed_file_size() const {
  return _internal_has_compressed_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_compressed_file_size() {
  compressed_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::_internal_compressed_file_size() const {
  return compressed_file_size_;
}
inline uint32_t CMsgClientUFSGetUGCDetailsResponse::compressed_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
  return _internal_compressed_file_size();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_compressed_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  compressed_file_size_ = value;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_compressed_file_size(uint32_t value) {
  _internal_set_compressed_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.compressed_file_size)
}

// optional string rangecheck_host = 8;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_rangecheck_host() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_rangecheck_host() const {
  return _internal_has_rangecheck_host();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_rangecheck_host() {
  rangecheck_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::rangecheck_host() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  return _internal_rangecheck_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetUGCDetailsResponse::set_rangecheck_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 rangecheck_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_rangecheck_host() {
  std::string* _s = _internal_mutable_rangecheck_host();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  return _s;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_rangecheck_host() const {
  return rangecheck_host_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_rangecheck_host(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  rangecheck_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_rangecheck_host() {
  _has_bits_[0] |= 0x00000004u;
  return rangecheck_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_rangecheck_host() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
  if (!_internal_has_rangecheck_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = rangecheck_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rangecheck_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rangecheck_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_rangecheck_host(std::string* rangecheck_host) {
  if (rangecheck_host != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rangecheck_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rangecheck_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rangecheck_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rangecheck_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.rangecheck_host)
}

// optional string file_encoded_sha1 = 9;
inline bool CMsgClientUFSGetUGCDetailsResponse::_internal_has_file_encoded_sha1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSGetUGCDetailsResponse::has_file_encoded_sha1() const {
  return _internal_has_file_encoded_sha1();
}
inline void CMsgClientUFSGetUGCDetailsResponse::clear_file_encoded_sha1() {
  file_encoded_sha1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::file_encoded_sha1() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return _internal_file_encoded_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetUGCDetailsResponse::set_file_encoded_sha1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::mutable_file_encoded_sha1() {
  std::string* _s = _internal_mutable_file_encoded_sha1();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  return _s;
}
inline const std::string& CMsgClientUFSGetUGCDetailsResponse::_internal_file_encoded_sha1() const {
  return file_encoded_sha1_.Get();
}
inline void CMsgClientUFSGetUGCDetailsResponse::_internal_set_file_encoded_sha1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  file_encoded_sha1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::_internal_mutable_file_encoded_sha1() {
  _has_bits_[0] |= 0x00000008u;
  return file_encoded_sha1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetUGCDetailsResponse::release_file_encoded_sha1() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
  if (!_internal_has_file_encoded_sha1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = file_encoded_sha1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_encoded_sha1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_encoded_sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetUGCDetailsResponse::set_allocated_file_encoded_sha1(std::string* file_encoded_sha1) {
  if (file_encoded_sha1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  file_encoded_sha1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_encoded_sha1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_encoded_sha1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_encoded_sha1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetUGCDetailsResponse.file_encoded_sha1)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetSingleFileInfo

// optional uint32 app_id = 1;
inline bool CMsgClientUFSGetSingleFileInfo::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetSingleFileInfo::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSGetSingleFileInfo::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSGetSingleFileInfo::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfo.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetSingleFileInfo::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSGetSingleFileInfo::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfo.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSGetSingleFileInfo::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfo::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSGetSingleFileInfo::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetSingleFileInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfo.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfo.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSGetSingleFileInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSGetSingleFileInfo::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfo::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfo.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetSingleFileInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfo.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSGetSingleFileInfoResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgClientUFSGetSingleFileInfoResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSGetSingleFileInfoResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  eresult_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.eresult)
}

// optional uint32 app_id = 2;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientUFSGetSingleFileInfoResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSGetSingleFileInfoResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.app_id)
}

// optional string file_name = 3;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetSingleFileInfoResponse::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfoResponse.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfoResponse.file_name)
}

// optional bytes sha_file = 4;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::sha_file() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSGetSingleFileInfoResponse::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  return _s;
}
inline const std::string& CMsgClientUFSGetSingleFileInfoResponse::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000002u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSGetSingleFileInfoResponse::release_sha_file() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSGetSingleFileInfoResponse.sha_file)
}

// optional uint64 time_stamp = 5;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgClientUFSGetSingleFileInfoResponse::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CMsgClientUFSGetSingleFileInfoResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
  return _internal_time_stamp();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.time_stamp)
}

// optional uint32 raw_file_size = 6;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientUFSGetSingleFileInfoResponse::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CMsgClientUFSGetSingleFileInfoResponse::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
  return _internal_raw_file_size();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  raw_file_size_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.raw_file_size)
}

// optional bool is_explicit_delete = 7;
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CMsgClientUFSGetSingleFileInfoResponse::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CMsgClientUFSGetSingleFileInfoResponse::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_explicit_delete_ = value;
}
inline void CMsgClientUFSGetSingleFileInfoResponse::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSGetSingleFileInfoResponse.is_explicit_delete)
}

// -------------------------------------------------------------------

// CMsgClientUFSShareFile

// optional uint32 app_id = 1;
inline bool CMsgClientUFSShareFile::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFile::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientUFSShareFile::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientUFSShareFile::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientUFSShareFile::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFile.app_id)
  return _internal_app_id();
}
inline void CMsgClientUFSShareFile::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientUFSShareFile::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFile.app_id)
}

// optional string file_name = 2;
inline bool CMsgClientUFSShareFile::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFile::has_file_name() const {
  return _internal_has_file_name();
}
inline void CMsgClientUFSShareFile::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientUFSShareFile::file_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFile.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientUFSShareFile::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFile.file_name)
}
inline std::string* CMsgClientUFSShareFile::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientUFSShareFile.file_name)
  return _s;
}
inline const std::string& CMsgClientUFSShareFile::_internal_file_name() const {
  return file_name_.Get();
}
inline void CMsgClientUFSShareFile::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSShareFile::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientUFSShareFile::release_file_name() {
  // @@protoc_insertion_point(field_release:CMsgClientUFSShareFile.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientUFSShareFile::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientUFSShareFile.file_name)
}

// -------------------------------------------------------------------

// CMsgClientUFSShareFileResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientUFSShareFileResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFileResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientUFSShareFileResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgClientUFSShareFileResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientUFSShareFileResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFileResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientUFSShareFileResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientUFSShareFileResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFileResponse.eresult)
}

// optional fixed64 hcontent = 2 [default = 18446744073709551615];
inline bool CMsgClientUFSShareFileResponse::_internal_has_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientUFSShareFileResponse::has_hcontent() const {
  return _internal_has_hcontent();
}
inline void CMsgClientUFSShareFileResponse::clear_hcontent() {
  hcontent_ = uint64_t{18446744073709551615u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientUFSShareFileResponse::_internal_hcontent() const {
  return hcontent_;
}
inline uint64_t CMsgClientUFSShareFileResponse::hcontent() const {
  // @@protoc_insertion_point(field_get:CMsgClientUFSShareFileResponse.hcontent)
  return _internal_hcontent();
}
inline void CMsgClientUFSShareFileResponse::_internal_set_hcontent(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  hcontent_ = value;
}
inline void CMsgClientUFSShareFileResponse::set_hcontent(uint64_t value) {
  _internal_set_hcontent(value);
  // @@protoc_insertion_point(field_set:CMsgClientUFSShareFileResponse.hcontent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5fufs_2eproto
