// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "enums.pb.h"
#include "steammessages_client_objects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fcloud_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[59]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamclient_2eproto;
class CCloud_AppCloudStateChange_Notification;
struct CCloud_AppCloudStateChange_NotificationDefaultTypeInternal;
extern CCloud_AppCloudStateChange_NotificationDefaultTypeInternal _CCloud_AppCloudStateChange_Notification_default_instance_;
class CCloud_AppExitSyncDone_Notification;
struct CCloud_AppExitSyncDone_NotificationDefaultTypeInternal;
extern CCloud_AppExitSyncDone_NotificationDefaultTypeInternal _CCloud_AppExitSyncDone_Notification_default_instance_;
class CCloud_AppFileInfo;
struct CCloud_AppFileInfoDefaultTypeInternal;
extern CCloud_AppFileInfoDefaultTypeInternal _CCloud_AppFileInfo_default_instance_;
class CCloud_AppLaunchIntent_Request;
struct CCloud_AppLaunchIntent_RequestDefaultTypeInternal;
extern CCloud_AppLaunchIntent_RequestDefaultTypeInternal _CCloud_AppLaunchIntent_Request_default_instance_;
class CCloud_AppLaunchIntent_Response;
struct CCloud_AppLaunchIntent_ResponseDefaultTypeInternal;
extern CCloud_AppLaunchIntent_ResponseDefaultTypeInternal _CCloud_AppLaunchIntent_Response_default_instance_;
class CCloud_AppSessionResume_Request;
struct CCloud_AppSessionResume_RequestDefaultTypeInternal;
extern CCloud_AppSessionResume_RequestDefaultTypeInternal _CCloud_AppSessionResume_Request_default_instance_;
class CCloud_AppSessionResume_Response;
struct CCloud_AppSessionResume_ResponseDefaultTypeInternal;
extern CCloud_AppSessionResume_ResponseDefaultTypeInternal _CCloud_AppSessionResume_Response_default_instance_;
class CCloud_AppSessionSuspend_Request;
struct CCloud_AppSessionSuspend_RequestDefaultTypeInternal;
extern CCloud_AppSessionSuspend_RequestDefaultTypeInternal _CCloud_AppSessionSuspend_Request_default_instance_;
class CCloud_AppSessionSuspend_Response;
struct CCloud_AppSessionSuspend_ResponseDefaultTypeInternal;
extern CCloud_AppSessionSuspend_ResponseDefaultTypeInternal _CCloud_AppSessionSuspend_Response_default_instance_;
class CCloud_BeginAppUploadBatch_Request;
struct CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal;
extern CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal _CCloud_BeginAppUploadBatch_Request_default_instance_;
class CCloud_BeginAppUploadBatch_Response;
struct CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal;
extern CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal _CCloud_BeginAppUploadBatch_Response_default_instance_;
class CCloud_BeginHTTPUpload_Request;
struct CCloud_BeginHTTPUpload_RequestDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_RequestDefaultTypeInternal _CCloud_BeginHTTPUpload_Request_default_instance_;
class CCloud_BeginHTTPUpload_Response;
struct CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_default_instance_;
class CCloud_BeginHTTPUpload_Response_HTTPHeaders;
struct CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal;
extern CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
class CCloud_BeginUGCUpload_Request;
struct CCloud_BeginUGCUpload_RequestDefaultTypeInternal;
extern CCloud_BeginUGCUpload_RequestDefaultTypeInternal _CCloud_BeginUGCUpload_Request_default_instance_;
class CCloud_BeginUGCUpload_Response;
struct CCloud_BeginUGCUpload_ResponseDefaultTypeInternal;
extern CCloud_BeginUGCUpload_ResponseDefaultTypeInternal _CCloud_BeginUGCUpload_Response_default_instance_;
class CCloud_BeginUGCUpload_Response_HTTPHeaders;
struct CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal;
extern CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal _CCloud_BeginUGCUpload_Response_HTTPHeaders_default_instance_;
class CCloud_CDNReport_Notification;
struct CCloud_CDNReport_NotificationDefaultTypeInternal;
extern CCloud_CDNReport_NotificationDefaultTypeInternal _CCloud_CDNReport_Notification_default_instance_;
class CCloud_ClientBeginFileUpload_Request;
struct CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal;
extern CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal _CCloud_ClientBeginFileUpload_Request_default_instance_;
class CCloud_ClientBeginFileUpload_Response;
struct CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal;
extern CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal _CCloud_ClientBeginFileUpload_Response_default_instance_;
class CCloud_ClientCommitFileUpload_Request;
struct CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal;
extern CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal _CCloud_ClientCommitFileUpload_Request_default_instance_;
class CCloud_ClientCommitFileUpload_Response;
struct CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal;
extern CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal _CCloud_ClientCommitFileUpload_Response_default_instance_;
class CCloud_ClientConflictResolution_Notification;
struct CCloud_ClientConflictResolution_NotificationDefaultTypeInternal;
extern CCloud_ClientConflictResolution_NotificationDefaultTypeInternal _CCloud_ClientConflictResolution_Notification_default_instance_;
class CCloud_ClientDeleteFile_Request;
struct CCloud_ClientDeleteFile_RequestDefaultTypeInternal;
extern CCloud_ClientDeleteFile_RequestDefaultTypeInternal _CCloud_ClientDeleteFile_Request_default_instance_;
class CCloud_ClientDeleteFile_Response;
struct CCloud_ClientDeleteFile_ResponseDefaultTypeInternal;
extern CCloud_ClientDeleteFile_ResponseDefaultTypeInternal _CCloud_ClientDeleteFile_Response_default_instance_;
class CCloud_ClientFileDownload_Request;
struct CCloud_ClientFileDownload_RequestDefaultTypeInternal;
extern CCloud_ClientFileDownload_RequestDefaultTypeInternal _CCloud_ClientFileDownload_Request_default_instance_;
class CCloud_ClientFileDownload_Response;
struct CCloud_ClientFileDownload_ResponseDefaultTypeInternal;
extern CCloud_ClientFileDownload_ResponseDefaultTypeInternal _CCloud_ClientFileDownload_Response_default_instance_;
class CCloud_ClientFileDownload_Response_HTTPHeaders;
struct CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal;
extern CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
class CCloud_ClientGetAppQuotaUsage_Request;
struct CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal;
extern CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal _CCloud_ClientGetAppQuotaUsage_Request_default_instance_;
class CCloud_ClientGetAppQuotaUsage_Response;
struct CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal;
extern CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal _CCloud_ClientGetAppQuotaUsage_Response_default_instance_;
class CCloud_ClientLogUploadCheck_Notification;
struct CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal;
extern CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal _CCloud_ClientLogUploadCheck_Notification_default_instance_;
class CCloud_ClientLogUploadComplete_Notification;
struct CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal;
extern CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal _CCloud_ClientLogUploadComplete_Notification_default_instance_;
class CCloud_ClientLogUploadRequest_Notification;
struct CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal;
extern CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal _CCloud_ClientLogUploadRequest_Notification_default_instance_;
class CCloud_CommitHTTPUpload_Request;
struct CCloud_CommitHTTPUpload_RequestDefaultTypeInternal;
extern CCloud_CommitHTTPUpload_RequestDefaultTypeInternal _CCloud_CommitHTTPUpload_Request_default_instance_;
class CCloud_CommitHTTPUpload_Response;
struct CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal;
extern CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal _CCloud_CommitHTTPUpload_Response_default_instance_;
class CCloud_CommitUGCUpload_Request;
struct CCloud_CommitUGCUpload_RequestDefaultTypeInternal;
extern CCloud_CommitUGCUpload_RequestDefaultTypeInternal _CCloud_CommitUGCUpload_Request_default_instance_;
class CCloud_CommitUGCUpload_Response;
struct CCloud_CommitUGCUpload_ResponseDefaultTypeInternal;
extern CCloud_CommitUGCUpload_ResponseDefaultTypeInternal _CCloud_CommitUGCUpload_Response_default_instance_;
class CCloud_CompleteAppUploadBatch_Notification;
struct CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal;
extern CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Notification_default_instance_;
class CCloud_CompleteAppUploadBatch_Request;
struct CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal;
extern CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Request_default_instance_;
class CCloud_CompleteAppUploadBatch_Response;
struct CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal;
extern CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Response_default_instance_;
class CCloud_Delete_Request;
struct CCloud_Delete_RequestDefaultTypeInternal;
extern CCloud_Delete_RequestDefaultTypeInternal _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_Response;
struct CCloud_Delete_ResponseDefaultTypeInternal;
extern CCloud_Delete_ResponseDefaultTypeInternal _CCloud_Delete_Response_default_instance_;
class CCloud_EnumerateUserApps_Request;
struct CCloud_EnumerateUserApps_RequestDefaultTypeInternal;
extern CCloud_EnumerateUserApps_RequestDefaultTypeInternal _CCloud_EnumerateUserApps_Request_default_instance_;
class CCloud_EnumerateUserApps_Response;
struct CCloud_EnumerateUserApps_ResponseDefaultTypeInternal;
extern CCloud_EnumerateUserApps_ResponseDefaultTypeInternal _CCloud_EnumerateUserApps_Response_default_instance_;
class CCloud_EnumerateUserApps_Response_Apps;
struct CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal;
extern CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal _CCloud_EnumerateUserApps_Response_Apps_default_instance_;
class CCloud_EnumerateUserFiles_Request;
struct CCloud_EnumerateUserFiles_RequestDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_RequestDefaultTypeInternal _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_Response;
struct CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_ExternalStorageTransferReport_Notification;
struct CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal;
extern CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal _CCloud_ExternalStorageTransferReport_Notification_default_instance_;
class CCloud_GetAppFileChangelist_Request;
struct CCloud_GetAppFileChangelist_RequestDefaultTypeInternal;
extern CCloud_GetAppFileChangelist_RequestDefaultTypeInternal _CCloud_GetAppFileChangelist_Request_default_instance_;
class CCloud_GetAppFileChangelist_Response;
struct CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal;
extern CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal _CCloud_GetAppFileChangelist_Response_default_instance_;
class CCloud_GetClientEncryptionKey_Request;
struct CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal;
extern CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal _CCloud_GetClientEncryptionKey_Request_default_instance_;
class CCloud_GetClientEncryptionKey_Response;
struct CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal;
extern CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal _CCloud_GetClientEncryptionKey_Response_default_instance_;
class CCloud_GetFileDetails_Request;
struct CCloud_GetFileDetails_RequestDefaultTypeInternal;
extern CCloud_GetFileDetails_RequestDefaultTypeInternal _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_GetFileDetails_Response;
struct CCloud_GetFileDetails_ResponseDefaultTypeInternal;
extern CCloud_GetFileDetails_ResponseDefaultTypeInternal _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_GetUploadServerInfo_Request;
struct CCloud_GetUploadServerInfo_RequestDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_RequestDefaultTypeInternal _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_Response;
struct CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_UserFile;
struct CCloud_UserFileDefaultTypeInternal;
extern CCloud_UserFileDefaultTypeInternal _CCloud_UserFile_default_instance_;
class ClientCloudFileUploadBlockDetails;
struct ClientCloudFileUploadBlockDetailsDefaultTypeInternal;
extern ClientCloudFileUploadBlockDetailsDefaultTypeInternal _ClientCloudFileUploadBlockDetails_default_instance_;
class ClientCloudFileUploadBlockDetails_HTTPHeaders;
struct ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal;
extern ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCloud_AppCloudStateChange_Notification* Arena::CreateMaybeMessage<::CCloud_AppCloudStateChange_Notification>(Arena*);
template<> ::CCloud_AppExitSyncDone_Notification* Arena::CreateMaybeMessage<::CCloud_AppExitSyncDone_Notification>(Arena*);
template<> ::CCloud_AppFileInfo* Arena::CreateMaybeMessage<::CCloud_AppFileInfo>(Arena*);
template<> ::CCloud_AppLaunchIntent_Request* Arena::CreateMaybeMessage<::CCloud_AppLaunchIntent_Request>(Arena*);
template<> ::CCloud_AppLaunchIntent_Response* Arena::CreateMaybeMessage<::CCloud_AppLaunchIntent_Response>(Arena*);
template<> ::CCloud_AppSessionResume_Request* Arena::CreateMaybeMessage<::CCloud_AppSessionResume_Request>(Arena*);
template<> ::CCloud_AppSessionResume_Response* Arena::CreateMaybeMessage<::CCloud_AppSessionResume_Response>(Arena*);
template<> ::CCloud_AppSessionSuspend_Request* Arena::CreateMaybeMessage<::CCloud_AppSessionSuspend_Request>(Arena*);
template<> ::CCloud_AppSessionSuspend_Response* Arena::CreateMaybeMessage<::CCloud_AppSessionSuspend_Response>(Arena*);
template<> ::CCloud_BeginAppUploadBatch_Request* Arena::CreateMaybeMessage<::CCloud_BeginAppUploadBatch_Request>(Arena*);
template<> ::CCloud_BeginAppUploadBatch_Response* Arena::CreateMaybeMessage<::CCloud_BeginAppUploadBatch_Response>(Arena*);
template<> ::CCloud_BeginHTTPUpload_Request* Arena::CreateMaybeMessage<::CCloud_BeginHTTPUpload_Request>(Arena*);
template<> ::CCloud_BeginHTTPUpload_Response* Arena::CreateMaybeMessage<::CCloud_BeginHTTPUpload_Response>(Arena*);
template<> ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage<::CCloud_BeginHTTPUpload_Response_HTTPHeaders>(Arena*);
template<> ::CCloud_BeginUGCUpload_Request* Arena::CreateMaybeMessage<::CCloud_BeginUGCUpload_Request>(Arena*);
template<> ::CCloud_BeginUGCUpload_Response* Arena::CreateMaybeMessage<::CCloud_BeginUGCUpload_Response>(Arena*);
template<> ::CCloud_BeginUGCUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage<::CCloud_BeginUGCUpload_Response_HTTPHeaders>(Arena*);
template<> ::CCloud_CDNReport_Notification* Arena::CreateMaybeMessage<::CCloud_CDNReport_Notification>(Arena*);
template<> ::CCloud_ClientBeginFileUpload_Request* Arena::CreateMaybeMessage<::CCloud_ClientBeginFileUpload_Request>(Arena*);
template<> ::CCloud_ClientBeginFileUpload_Response* Arena::CreateMaybeMessage<::CCloud_ClientBeginFileUpload_Response>(Arena*);
template<> ::CCloud_ClientCommitFileUpload_Request* Arena::CreateMaybeMessage<::CCloud_ClientCommitFileUpload_Request>(Arena*);
template<> ::CCloud_ClientCommitFileUpload_Response* Arena::CreateMaybeMessage<::CCloud_ClientCommitFileUpload_Response>(Arena*);
template<> ::CCloud_ClientConflictResolution_Notification* Arena::CreateMaybeMessage<::CCloud_ClientConflictResolution_Notification>(Arena*);
template<> ::CCloud_ClientDeleteFile_Request* Arena::CreateMaybeMessage<::CCloud_ClientDeleteFile_Request>(Arena*);
template<> ::CCloud_ClientDeleteFile_Response* Arena::CreateMaybeMessage<::CCloud_ClientDeleteFile_Response>(Arena*);
template<> ::CCloud_ClientFileDownload_Request* Arena::CreateMaybeMessage<::CCloud_ClientFileDownload_Request>(Arena*);
template<> ::CCloud_ClientFileDownload_Response* Arena::CreateMaybeMessage<::CCloud_ClientFileDownload_Response>(Arena*);
template<> ::CCloud_ClientFileDownload_Response_HTTPHeaders* Arena::CreateMaybeMessage<::CCloud_ClientFileDownload_Response_HTTPHeaders>(Arena*);
template<> ::CCloud_ClientGetAppQuotaUsage_Request* Arena::CreateMaybeMessage<::CCloud_ClientGetAppQuotaUsage_Request>(Arena*);
template<> ::CCloud_ClientGetAppQuotaUsage_Response* Arena::CreateMaybeMessage<::CCloud_ClientGetAppQuotaUsage_Response>(Arena*);
template<> ::CCloud_ClientLogUploadCheck_Notification* Arena::CreateMaybeMessage<::CCloud_ClientLogUploadCheck_Notification>(Arena*);
template<> ::CCloud_ClientLogUploadComplete_Notification* Arena::CreateMaybeMessage<::CCloud_ClientLogUploadComplete_Notification>(Arena*);
template<> ::CCloud_ClientLogUploadRequest_Notification* Arena::CreateMaybeMessage<::CCloud_ClientLogUploadRequest_Notification>(Arena*);
template<> ::CCloud_CommitHTTPUpload_Request* Arena::CreateMaybeMessage<::CCloud_CommitHTTPUpload_Request>(Arena*);
template<> ::CCloud_CommitHTTPUpload_Response* Arena::CreateMaybeMessage<::CCloud_CommitHTTPUpload_Response>(Arena*);
template<> ::CCloud_CommitUGCUpload_Request* Arena::CreateMaybeMessage<::CCloud_CommitUGCUpload_Request>(Arena*);
template<> ::CCloud_CommitUGCUpload_Response* Arena::CreateMaybeMessage<::CCloud_CommitUGCUpload_Response>(Arena*);
template<> ::CCloud_CompleteAppUploadBatch_Notification* Arena::CreateMaybeMessage<::CCloud_CompleteAppUploadBatch_Notification>(Arena*);
template<> ::CCloud_CompleteAppUploadBatch_Request* Arena::CreateMaybeMessage<::CCloud_CompleteAppUploadBatch_Request>(Arena*);
template<> ::CCloud_CompleteAppUploadBatch_Response* Arena::CreateMaybeMessage<::CCloud_CompleteAppUploadBatch_Response>(Arena*);
template<> ::CCloud_Delete_Request* Arena::CreateMaybeMessage<::CCloud_Delete_Request>(Arena*);
template<> ::CCloud_Delete_Response* Arena::CreateMaybeMessage<::CCloud_Delete_Response>(Arena*);
template<> ::CCloud_EnumerateUserApps_Request* Arena::CreateMaybeMessage<::CCloud_EnumerateUserApps_Request>(Arena*);
template<> ::CCloud_EnumerateUserApps_Response* Arena::CreateMaybeMessage<::CCloud_EnumerateUserApps_Response>(Arena*);
template<> ::CCloud_EnumerateUserApps_Response_Apps* Arena::CreateMaybeMessage<::CCloud_EnumerateUserApps_Response_Apps>(Arena*);
template<> ::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage<::CCloud_EnumerateUserFiles_Request>(Arena*);
template<> ::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage<::CCloud_EnumerateUserFiles_Response>(Arena*);
template<> ::CCloud_ExternalStorageTransferReport_Notification* Arena::CreateMaybeMessage<::CCloud_ExternalStorageTransferReport_Notification>(Arena*);
template<> ::CCloud_GetAppFileChangelist_Request* Arena::CreateMaybeMessage<::CCloud_GetAppFileChangelist_Request>(Arena*);
template<> ::CCloud_GetAppFileChangelist_Response* Arena::CreateMaybeMessage<::CCloud_GetAppFileChangelist_Response>(Arena*);
template<> ::CCloud_GetClientEncryptionKey_Request* Arena::CreateMaybeMessage<::CCloud_GetClientEncryptionKey_Request>(Arena*);
template<> ::CCloud_GetClientEncryptionKey_Response* Arena::CreateMaybeMessage<::CCloud_GetClientEncryptionKey_Response>(Arena*);
template<> ::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage<::CCloud_GetFileDetails_Request>(Arena*);
template<> ::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage<::CCloud_GetFileDetails_Response>(Arena*);
template<> ::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage<::CCloud_GetUploadServerInfo_Request>(Arena*);
template<> ::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage<::CCloud_GetUploadServerInfo_Response>(Arena*);
template<> ::CCloud_UserFile* Arena::CreateMaybeMessage<::CCloud_UserFile>(Arena*);
template<> ::ClientCloudFileUploadBlockDetails* Arena::CreateMaybeMessage<::ClientCloudFileUploadBlockDetails>(Arena*);
template<> ::ClientCloudFileUploadBlockDetails_HTTPHeaders* Arena::CreateMaybeMessage<::ClientCloudFileUploadBlockDetails_HTTPHeaders>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CCloud_ClientLogUploadCheck_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientLogUploadCheck_Notification) */ {
 public:
  inline CCloud_ClientLogUploadCheck_Notification() : CCloud_ClientLogUploadCheck_Notification(nullptr) {}
  ~CCloud_ClientLogUploadCheck_Notification() override;
  explicit constexpr CCloud_ClientLogUploadCheck_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientLogUploadCheck_Notification(const CCloud_ClientLogUploadCheck_Notification& from);
  CCloud_ClientLogUploadCheck_Notification(CCloud_ClientLogUploadCheck_Notification&& from) noexcept
    : CCloud_ClientLogUploadCheck_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientLogUploadCheck_Notification& operator=(const CCloud_ClientLogUploadCheck_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientLogUploadCheck_Notification& operator=(CCloud_ClientLogUploadCheck_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientLogUploadCheck_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientLogUploadCheck_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientLogUploadCheck_Notification*>(
               &_CCloud_ClientLogUploadCheck_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCloud_ClientLogUploadCheck_Notification& a, CCloud_ClientLogUploadCheck_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientLogUploadCheck_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientLogUploadCheck_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientLogUploadCheck_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientLogUploadCheck_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientLogUploadCheck_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientLogUploadCheck_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientLogUploadCheck_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientLogUploadCheck_Notification";
  }
  protected:
  explicit CCloud_ClientLogUploadCheck_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // optional uint64 client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientLogUploadCheck_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t client_id_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientLogUploadComplete_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientLogUploadComplete_Notification) */ {
 public:
  inline CCloud_ClientLogUploadComplete_Notification() : CCloud_ClientLogUploadComplete_Notification(nullptr) {}
  ~CCloud_ClientLogUploadComplete_Notification() override;
  explicit constexpr CCloud_ClientLogUploadComplete_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientLogUploadComplete_Notification(const CCloud_ClientLogUploadComplete_Notification& from);
  CCloud_ClientLogUploadComplete_Notification(CCloud_ClientLogUploadComplete_Notification&& from) noexcept
    : CCloud_ClientLogUploadComplete_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientLogUploadComplete_Notification& operator=(const CCloud_ClientLogUploadComplete_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientLogUploadComplete_Notification& operator=(CCloud_ClientLogUploadComplete_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientLogUploadComplete_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientLogUploadComplete_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientLogUploadComplete_Notification*>(
               &_CCloud_ClientLogUploadComplete_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCloud_ClientLogUploadComplete_Notification& a, CCloud_ClientLogUploadComplete_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientLogUploadComplete_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientLogUploadComplete_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientLogUploadComplete_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientLogUploadComplete_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientLogUploadComplete_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientLogUploadComplete_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientLogUploadComplete_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientLogUploadComplete_Notification";
  }
  protected:
  explicit CCloud_ClientLogUploadComplete_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // optional uint64 client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint64 request_id = 2;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientLogUploadComplete_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t client_id_;
  uint64_t request_id_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetUploadServerInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetUploadServerInfo_Request) */ {
 public:
  inline CCloud_GetUploadServerInfo_Request() : CCloud_GetUploadServerInfo_Request(nullptr) {}
  ~CCloud_GetUploadServerInfo_Request() override;
  explicit constexpr CCloud_GetUploadServerInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from);
  CCloud_GetUploadServerInfo_Request(CCloud_GetUploadServerInfo_Request&& from) noexcept
    : CCloud_GetUploadServerInfo_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Request& operator=(const CCloud_GetUploadServerInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetUploadServerInfo_Request& operator=(CCloud_GetUploadServerInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetUploadServerInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetUploadServerInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Request*>(
               &_CCloud_GetUploadServerInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCloud_GetUploadServerInfo_Request& a, CCloud_GetUploadServerInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetUploadServerInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetUploadServerInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetUploadServerInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetUploadServerInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetUploadServerInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetUploadServerInfo_Request";
  }
  protected:
  explicit CCloud_GetUploadServerInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetUploadServerInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetUploadServerInfo_Response) */ {
 public:
  inline CCloud_GetUploadServerInfo_Response() : CCloud_GetUploadServerInfo_Response(nullptr) {}
  ~CCloud_GetUploadServerInfo_Response() override;
  explicit constexpr CCloud_GetUploadServerInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from);
  CCloud_GetUploadServerInfo_Response(CCloud_GetUploadServerInfo_Response&& from) noexcept
    : CCloud_GetUploadServerInfo_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Response& operator=(const CCloud_GetUploadServerInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetUploadServerInfo_Response& operator=(CCloud_GetUploadServerInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetUploadServerInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetUploadServerInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Response*>(
               &_CCloud_GetUploadServerInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCloud_GetUploadServerInfo_Response& a, CCloud_GetUploadServerInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetUploadServerInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetUploadServerInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetUploadServerInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetUploadServerInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetUploadServerInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetUploadServerInfo_Response";
  }
  protected:
  explicit CCloud_GetUploadServerInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerUrlFieldNumber = 1,
  };
  // optional string server_url = 1;
  bool has_server_url() const;
  private:
  bool _internal_has_server_url() const;
  public:
  void clear_server_url();
  const std::string& server_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_url();
  PROTOBUF_NODISCARD std::string* release_server_url();
  void set_allocated_server_url(std::string* server_url);
  private:
  const std::string& _internal_server_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_url(const std::string& value);
  std::string* _internal_mutable_server_url();
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_url_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginHTTPUpload_Request) */ {
 public:
  inline CCloud_BeginHTTPUpload_Request() : CCloud_BeginHTTPUpload_Request(nullptr) {}
  ~CCloud_BeginHTTPUpload_Request() override;
  explicit constexpr CCloud_BeginHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginHTTPUpload_Request(const CCloud_BeginHTTPUpload_Request& from);
  CCloud_BeginHTTPUpload_Request(CCloud_BeginHTTPUpload_Request&& from) noexcept
    : CCloud_BeginHTTPUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Request& operator=(const CCloud_BeginHTTPUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginHTTPUpload_Request& operator=(CCloud_BeginHTTPUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginHTTPUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginHTTPUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Request*>(
               &_CCloud_BeginHTTPUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCloud_BeginHTTPUpload_Request& a, CCloud_BeginHTTPUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginHTTPUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginHTTPUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginHTTPUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginHTTPUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginHTTPUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginHTTPUpload_Request";
  }
  protected:
  explicit CCloud_BeginHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformsToSyncFieldNumber = 6,
    kRequestHeadersNamesFieldNumber = 7,
    kRequestHeadersValuesFieldNumber = 8,
    kFilenameFieldNumber = 3,
    kFileShaFieldNumber = 4,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kUploadBatchIdFieldNumber = 9,
    kIsPublicFieldNumber = 5,
  };
  // repeated string platforms_to_sync = 6 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  int platforms_to_sync_size() const;
  private:
  int _internal_platforms_to_sync_size() const;
  public:
  void clear_platforms_to_sync();
  const std::string& platforms_to_sync(int index) const;
  std::string* mutable_platforms_to_sync(int index);
  void set_platforms_to_sync(int index, const std::string& value);
  void set_platforms_to_sync(int index, std::string&& value);
  void set_platforms_to_sync(int index, const char* value);
  void set_platforms_to_sync(int index, const char* value, size_t size);
  std::string* add_platforms_to_sync();
  void add_platforms_to_sync(const std::string& value);
  void add_platforms_to_sync(std::string&& value);
  void add_platforms_to_sync(const char* value);
  void add_platforms_to_sync(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& platforms_to_sync() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_platforms_to_sync();
  private:
  const std::string& _internal_platforms_to_sync(int index) const;
  std::string* _internal_add_platforms_to_sync();
  public:

  // repeated string request_headers_names = 7 [(.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  int request_headers_names_size() const;
  private:
  int _internal_request_headers_names_size() const;
  public:
  void clear_request_headers_names();
  const std::string& request_headers_names(int index) const;
  std::string* mutable_request_headers_names(int index);
  void set_request_headers_names(int index, const std::string& value);
  void set_request_headers_names(int index, std::string&& value);
  void set_request_headers_names(int index, const char* value);
  void set_request_headers_names(int index, const char* value, size_t size);
  std::string* add_request_headers_names();
  void add_request_headers_names(const std::string& value);
  void add_request_headers_names(std::string&& value);
  void add_request_headers_names(const char* value);
  void add_request_headers_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_headers_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_headers_names();
  private:
  const std::string& _internal_request_headers_names(int index) const;
  std::string* _internal_add_request_headers_names();
  public:

  // repeated string request_headers_values = 8 [(.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  int request_headers_values_size() const;
  private:
  int _internal_request_headers_values_size() const;
  public:
  void clear_request_headers_values();
  const std::string& request_headers_values(int index) const;
  std::string* mutable_request_headers_values(int index);
  void set_request_headers_values(int index, const std::string& value);
  void set_request_headers_values(int index, std::string&& value);
  void set_request_headers_values(int index, const char* value);
  void set_request_headers_values(int index, const char* value, size_t size);
  std::string* add_request_headers_values();
  void add_request_headers_values(const std::string& value);
  void add_request_headers_values(std::string&& value);
  void add_request_headers_values(const char* value);
  void add_request_headers_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& request_headers_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_request_headers_values();
  private:
  const std::string& _internal_request_headers_values(int index) const;
  std::string* _internal_add_request_headers_values();
  public:

  // optional string filename = 3 [(.description) = "Name of the file to store in the cloud."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_size = 2 [(.description) = "Original file size in bytes."];
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 upload_batch_id = 9 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
  bool has_upload_batch_id() const;
  private:
  bool _internal_has_upload_batch_id() const;
  public:
  void clear_upload_batch_id();
  uint64_t upload_batch_id() const;
  void set_upload_batch_id(uint64_t value);
  private:
  uint64_t _internal_upload_batch_id() const;
  void _internal_set_upload_batch_id(uint64_t value);
  public:

  // optional bool is_public = 5 [(.description) = "True if the file should be marked public on the UFS, false otherwise."];
  bool has_is_public() const;
  private:
  bool _internal_has_is_public() const;
  public:
  void clear_is_public();
  bool is_public() const;
  void set_is_public(bool value);
  private:
  bool _internal_is_public() const;
  void _internal_set_is_public(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> platforms_to_sync_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_headers_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> request_headers_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  uint32_t appid_;
  uint32_t file_size_;
  uint64_t upload_batch_id_;
  bool is_public_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Response_HTTPHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginHTTPUpload_Response.HTTPHeaders) */ {
 public:
  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders() : CCloud_BeginHTTPUpload_Response_HTTPHeaders(nullptr) {}
  ~CCloud_BeginHTTPUpload_Response_HTTPHeaders() override;
  explicit constexpr CCloud_BeginHTTPUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginHTTPUpload_Response_HTTPHeaders(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);
  CCloud_BeginHTTPUpload_Response_HTTPHeaders(CCloud_BeginHTTPUpload_Response_HTTPHeaders&& from) noexcept
    : CCloud_BeginHTTPUpload_Response_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders& operator=(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginHTTPUpload_Response_HTTPHeaders& operator=(CCloud_BeginHTTPUpload_Response_HTTPHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginHTTPUpload_Response_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginHTTPUpload_Response_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Response_HTTPHeaders*>(
               &_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders& a, CCloud_BeginHTTPUpload_Response_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginHTTPUpload_Response_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response_HTTPHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginHTTPUpload_Response.HTTPHeaders";
  }
  protected:
  explicit CCloud_BeginHTTPUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginHTTPUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginHTTPUpload_Response) */ {
 public:
  inline CCloud_BeginHTTPUpload_Response() : CCloud_BeginHTTPUpload_Response(nullptr) {}
  ~CCloud_BeginHTTPUpload_Response() override;
  explicit constexpr CCloud_BeginHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginHTTPUpload_Response(const CCloud_BeginHTTPUpload_Response& from);
  CCloud_BeginHTTPUpload_Response(CCloud_BeginHTTPUpload_Response&& from) noexcept
    : CCloud_BeginHTTPUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginHTTPUpload_Response& operator=(const CCloud_BeginHTTPUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginHTTPUpload_Response& operator=(CCloud_BeginHTTPUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginHTTPUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginHTTPUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginHTTPUpload_Response*>(
               &_CCloud_BeginHTTPUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCloud_BeginHTTPUpload_Response& a, CCloud_BeginHTTPUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginHTTPUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginHTTPUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginHTTPUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginHTTPUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginHTTPUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginHTTPUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginHTTPUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginHTTPUpload_Response";
  }
  protected:
  explicit CCloud_BeginHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_BeginHTTPUpload_Response_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 6,
    kUrlHostFieldNumber = 3,
    kUrlPathFieldNumber = 4,
    kUgcidFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kUseHttpsFieldNumber = 5,
  };
  // repeated .CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::CCloud_BeginHTTPUpload_Response_HTTPHeaders& _internal_request_headers(int index) const;
  ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::CCloud_BeginHTTPUpload_Response_HTTPHeaders& request_headers(int index) const;
  ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 3 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_host();
  PROTOBUF_NODISCARD std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 4 [(.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional fixed64 ugcid = 1 [(.description) = "UGC ID of the uploaded file."];
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  uint64_t ugcid() const;
  void set_ugcid(uint64_t value);
  private:
  uint64_t _internal_ugcid() const;
  void _internal_set_ugcid(uint64_t value);
  public:

  // optional fixed32 timestamp = 2 [(.description) = "Server timestamp of file."];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional bool use_https = 5 [(.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginHTTPUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  uint64_t ugcid_;
  uint32_t timestamp_;
  bool use_https_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitHTTPUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CommitHTTPUpload_Request) */ {
 public:
  inline CCloud_CommitHTTPUpload_Request() : CCloud_CommitHTTPUpload_Request(nullptr) {}
  ~CCloud_CommitHTTPUpload_Request() override;
  explicit constexpr CCloud_CommitHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CommitHTTPUpload_Request(const CCloud_CommitHTTPUpload_Request& from);
  CCloud_CommitHTTPUpload_Request(CCloud_CommitHTTPUpload_Request&& from) noexcept
    : CCloud_CommitHTTPUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitHTTPUpload_Request& operator=(const CCloud_CommitHTTPUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CommitHTTPUpload_Request& operator=(CCloud_CommitHTTPUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CommitHTTPUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CommitHTTPUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitHTTPUpload_Request*>(
               &_CCloud_CommitHTTPUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCloud_CommitHTTPUpload_Request& a, CCloud_CommitHTTPUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CommitHTTPUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CommitHTTPUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CommitHTTPUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CommitHTTPUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CommitHTTPUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitHTTPUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CommitHTTPUpload_Request";
  }
  protected:
  explicit CCloud_CommitHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileShaFieldNumber = 3,
    kFilenameFieldNumber = 4,
    kTransferSucceededFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional string file_sha = 3 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  bool has_transfer_succeeded() const;
  private:
  bool _internal_has_transfer_succeeded() const;
  public:
  void clear_transfer_succeeded();
  bool transfer_succeeded() const;
  void set_transfer_succeeded(bool value);
  private:
  bool _internal_transfer_succeeded() const;
  void _internal_set_transfer_succeeded(bool value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CommitHTTPUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  bool transfer_succeeded_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitHTTPUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CommitHTTPUpload_Response) */ {
 public:
  inline CCloud_CommitHTTPUpload_Response() : CCloud_CommitHTTPUpload_Response(nullptr) {}
  ~CCloud_CommitHTTPUpload_Response() override;
  explicit constexpr CCloud_CommitHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CommitHTTPUpload_Response(const CCloud_CommitHTTPUpload_Response& from);
  CCloud_CommitHTTPUpload_Response(CCloud_CommitHTTPUpload_Response&& from) noexcept
    : CCloud_CommitHTTPUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitHTTPUpload_Response& operator=(const CCloud_CommitHTTPUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CommitHTTPUpload_Response& operator=(CCloud_CommitHTTPUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CommitHTTPUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CommitHTTPUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitHTTPUpload_Response*>(
               &_CCloud_CommitHTTPUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCloud_CommitHTTPUpload_Response& a, CCloud_CommitHTTPUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CommitHTTPUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CommitHTTPUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CommitHTTPUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CommitHTTPUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CommitHTTPUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CommitHTTPUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitHTTPUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CommitHTTPUpload_Response";
  }
  protected:
  explicit CCloud_CommitHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileCommittedFieldNumber = 1,
  };
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  bool has_file_committed() const;
  private:
  bool _internal_has_file_committed() const;
  public:
  void clear_file_committed();
  bool file_committed() const;
  void set_file_committed(bool value);
  private:
  bool _internal_file_committed() const;
  void _internal_set_file_committed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CommitHTTPUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool file_committed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginUGCUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginUGCUpload_Request) */ {
 public:
  inline CCloud_BeginUGCUpload_Request() : CCloud_BeginUGCUpload_Request(nullptr) {}
  ~CCloud_BeginUGCUpload_Request() override;
  explicit constexpr CCloud_BeginUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginUGCUpload_Request(const CCloud_BeginUGCUpload_Request& from);
  CCloud_BeginUGCUpload_Request(CCloud_BeginUGCUpload_Request&& from) noexcept
    : CCloud_BeginUGCUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginUGCUpload_Request& operator=(const CCloud_BeginUGCUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginUGCUpload_Request& operator=(CCloud_BeginUGCUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginUGCUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginUGCUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginUGCUpload_Request*>(
               &_CCloud_BeginUGCUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCloud_BeginUGCUpload_Request& a, CCloud_BeginUGCUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginUGCUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginUGCUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginUGCUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginUGCUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginUGCUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginUGCUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginUGCUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginUGCUpload_Request";
  }
  protected:
  explicit CCloud_BeginUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kFileShaFieldNumber = 4,
    kContentTypeFieldNumber = 5,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 2,
  };
  // optional string filename = 3 [(.description) = "Name of the file."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional string content_type = 5 [(.description) = "MIME content type of the file"];
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // optional uint32 appid = 1 [(.description) = "App ID this UGC belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_size = 2 [(.description) = "File size in bytes."];
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginUGCUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  uint32_t appid_;
  uint32_t file_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginUGCUpload_Response_HTTPHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginUGCUpload_Response.HTTPHeaders) */ {
 public:
  inline CCloud_BeginUGCUpload_Response_HTTPHeaders() : CCloud_BeginUGCUpload_Response_HTTPHeaders(nullptr) {}
  ~CCloud_BeginUGCUpload_Response_HTTPHeaders() override;
  explicit constexpr CCloud_BeginUGCUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginUGCUpload_Response_HTTPHeaders(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from);
  CCloud_BeginUGCUpload_Response_HTTPHeaders(CCloud_BeginUGCUpload_Response_HTTPHeaders&& from) noexcept
    : CCloud_BeginUGCUpload_Response_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginUGCUpload_Response_HTTPHeaders& operator=(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginUGCUpload_Response_HTTPHeaders& operator=(CCloud_BeginUGCUpload_Response_HTTPHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginUGCUpload_Response_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginUGCUpload_Response_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginUGCUpload_Response_HTTPHeaders*>(
               &_CCloud_BeginUGCUpload_Response_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCloud_BeginUGCUpload_Response_HTTPHeaders& a, CCloud_BeginUGCUpload_Response_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginUGCUpload_Response_HTTPHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginUGCUpload_Response_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginUGCUpload_Response_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginUGCUpload_Response_HTTPHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginUGCUpload_Response_HTTPHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginUGCUpload_Response.HTTPHeaders";
  }
  protected:
  explicit CCloud_BeginUGCUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginUGCUpload_Response.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginUGCUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginUGCUpload_Response) */ {
 public:
  inline CCloud_BeginUGCUpload_Response() : CCloud_BeginUGCUpload_Response(nullptr) {}
  ~CCloud_BeginUGCUpload_Response() override;
  explicit constexpr CCloud_BeginUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginUGCUpload_Response(const CCloud_BeginUGCUpload_Response& from);
  CCloud_BeginUGCUpload_Response(CCloud_BeginUGCUpload_Response&& from) noexcept
    : CCloud_BeginUGCUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginUGCUpload_Response& operator=(const CCloud_BeginUGCUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginUGCUpload_Response& operator=(CCloud_BeginUGCUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginUGCUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginUGCUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginUGCUpload_Response*>(
               &_CCloud_BeginUGCUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCloud_BeginUGCUpload_Response& a, CCloud_BeginUGCUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginUGCUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginUGCUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginUGCUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginUGCUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginUGCUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginUGCUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginUGCUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginUGCUpload_Response";
  }
  protected:
  explicit CCloud_BeginUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_BeginUGCUpload_Response_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 7,
    kUrlHostFieldNumber = 4,
    kUrlPathFieldNumber = 5,
    kUgcidFieldNumber = 2,
    kStorageSystemFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kUseHttpsFieldNumber = 6,
  };
  // repeated .CCloud_BeginUGCUpload_Response.HTTPHeaders request_headers = 7 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::CCloud_BeginUGCUpload_Response_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::CCloud_BeginUGCUpload_Response_HTTPHeaders& _internal_request_headers(int index) const;
  ::CCloud_BeginUGCUpload_Response_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::CCloud_BeginUGCUpload_Response_HTTPHeaders& request_headers(int index) const;
  ::CCloud_BeginUGCUpload_Response_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 4 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_host();
  PROTOBUF_NODISCARD std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 5 [(.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional fixed64 ugcid = 2 [(.description) = "UGC ID of the uploaded file."];
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  uint64_t ugcid() const;
  void set_ugcid(uint64_t value);
  private:
  uint64_t _internal_ugcid() const;
  void _internal_set_ugcid(uint64_t value);
  public:

  // optional .EPublishedFileStorageSystem storage_system = 1 [default = k_EPublishedFileStorageSystemInvalid, (.description) = "UGC Storage system chosen for this file"];
  bool has_storage_system() const;
  private:
  bool _internal_has_storage_system() const;
  public:
  void clear_storage_system();
  ::EPublishedFileStorageSystem storage_system() const;
  void set_storage_system(::EPublishedFileStorageSystem value);
  private:
  ::EPublishedFileStorageSystem _internal_storage_system() const;
  void _internal_set_storage_system(::EPublishedFileStorageSystem value);
  public:

  // optional fixed32 timestamp = 3 [(.description) = "Server timestamp of file."];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional bool use_https = 6 [(.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginUGCUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginUGCUpload_Response_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  uint64_t ugcid_;
  int storage_system_;
  uint32_t timestamp_;
  bool use_https_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitUGCUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CommitUGCUpload_Request) */ {
 public:
  inline CCloud_CommitUGCUpload_Request() : CCloud_CommitUGCUpload_Request(nullptr) {}
  ~CCloud_CommitUGCUpload_Request() override;
  explicit constexpr CCloud_CommitUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CommitUGCUpload_Request(const CCloud_CommitUGCUpload_Request& from);
  CCloud_CommitUGCUpload_Request(CCloud_CommitUGCUpload_Request&& from) noexcept
    : CCloud_CommitUGCUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitUGCUpload_Request& operator=(const CCloud_CommitUGCUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CommitUGCUpload_Request& operator=(CCloud_CommitUGCUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CommitUGCUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CommitUGCUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitUGCUpload_Request*>(
               &_CCloud_CommitUGCUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCloud_CommitUGCUpload_Request& a, CCloud_CommitUGCUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CommitUGCUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CommitUGCUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CommitUGCUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CommitUGCUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CommitUGCUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CommitUGCUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitUGCUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CommitUGCUpload_Request";
  }
  protected:
  explicit CCloud_CommitUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransferSucceededFieldNumber = 1,
    kAppidFieldNumber = 2,
    kUgcidFieldNumber = 3,
  };
  // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginUGCUpload), false if a failure occurred."];
  bool has_transfer_succeeded() const;
  private:
  bool _internal_has_transfer_succeeded() const;
  public:
  void clear_transfer_succeeded();
  bool transfer_succeeded() const;
  void set_transfer_succeeded(bool value);
  private:
  bool _internal_transfer_succeeded() const;
  void _internal_set_transfer_succeeded(bool value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginUGCUpload."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional fixed64 ugcid = 3 [(.description) = "UGC ID of the uploaded file."];
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  uint64_t ugcid() const;
  void set_ugcid(uint64_t value);
  private:
  uint64_t _internal_ugcid() const;
  void _internal_set_ugcid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CommitUGCUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool transfer_succeeded_;
  uint32_t appid_;
  uint64_t ugcid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CommitUGCUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CommitUGCUpload_Response) */ {
 public:
  inline CCloud_CommitUGCUpload_Response() : CCloud_CommitUGCUpload_Response(nullptr) {}
  ~CCloud_CommitUGCUpload_Response() override;
  explicit constexpr CCloud_CommitUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CommitUGCUpload_Response(const CCloud_CommitUGCUpload_Response& from);
  CCloud_CommitUGCUpload_Response(CCloud_CommitUGCUpload_Response&& from) noexcept
    : CCloud_CommitUGCUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_CommitUGCUpload_Response& operator=(const CCloud_CommitUGCUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CommitUGCUpload_Response& operator=(CCloud_CommitUGCUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CommitUGCUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CommitUGCUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_CommitUGCUpload_Response*>(
               &_CCloud_CommitUGCUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CCloud_CommitUGCUpload_Response& a, CCloud_CommitUGCUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CommitUGCUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CommitUGCUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CommitUGCUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CommitUGCUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CommitUGCUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CommitUGCUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CommitUGCUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CommitUGCUpload_Response";
  }
  protected:
  explicit CCloud_CommitUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileCommittedFieldNumber = 1,
  };
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  bool has_file_committed() const;
  private:
  bool _internal_has_file_committed() const;
  public:
  void clear_file_committed();
  bool file_committed() const;
  void set_file_committed(bool value);
  private:
  bool _internal_file_committed() const;
  void _internal_set_file_committed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CommitUGCUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool file_committed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetFileDetails_Request) */ {
 public:
  inline CCloud_GetFileDetails_Request() : CCloud_GetFileDetails_Request(nullptr) {}
  ~CCloud_GetFileDetails_Request() override;
  explicit constexpr CCloud_GetFileDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from);
  CCloud_GetFileDetails_Request(CCloud_GetFileDetails_Request&& from) noexcept
    : CCloud_GetFileDetails_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Request& operator=(const CCloud_GetFileDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetFileDetails_Request& operator=(CCloud_GetFileDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetFileDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetFileDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Request*>(
               &_CCloud_GetFileDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CCloud_GetFileDetails_Request& a, CCloud_GetFileDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetFileDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetFileDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetFileDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetFileDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetFileDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetFileDetails_Request";
  }
  protected:
  explicit CCloud_GetFileDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUgcidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  uint64_t ugcid() const;
  void set_ugcid(uint64_t value);
  private:
  uint64_t _internal_ugcid() const;
  void _internal_set_ugcid(uint64_t value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t ugcid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_UserFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_UserFile) */ {
 public:
  inline CCloud_UserFile() : CCloud_UserFile(nullptr) {}
  ~CCloud_UserFile() override;
  explicit constexpr CCloud_UserFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_UserFile(const CCloud_UserFile& from);
  CCloud_UserFile(CCloud_UserFile&& from) noexcept
    : CCloud_UserFile() {
    *this = ::std::move(from);
  }

  inline CCloud_UserFile& operator=(const CCloud_UserFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_UserFile& operator=(CCloud_UserFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_UserFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_UserFile* internal_default_instance() {
    return reinterpret_cast<const CCloud_UserFile*>(
               &_CCloud_UserFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CCloud_UserFile& a, CCloud_UserFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_UserFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_UserFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_UserFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_UserFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_UserFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_UserFile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_UserFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_UserFile";
  }
  protected:
  explicit CCloud_UserFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformsToSyncFieldNumber = 9,
    kFilenameFieldNumber = 3,
    kUrlFieldNumber = 6,
    kFileShaFieldNumber = 10,
    kUgcidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 5,
    kTimestampFieldNumber = 4,
    kSteamidCreatorFieldNumber = 7,
    kFlagsFieldNumber = 8,
  };
  // repeated string platforms_to_sync = 9 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  int platforms_to_sync_size() const;
  private:
  int _internal_platforms_to_sync_size() const;
  public:
  void clear_platforms_to_sync();
  const std::string& platforms_to_sync(int index) const;
  std::string* mutable_platforms_to_sync(int index);
  void set_platforms_to_sync(int index, const std::string& value);
  void set_platforms_to_sync(int index, std::string&& value);
  void set_platforms_to_sync(int index, const char* value);
  void set_platforms_to_sync(int index, const char* value, size_t size);
  std::string* add_platforms_to_sync();
  void add_platforms_to_sync(const std::string& value);
  void add_platforms_to_sync(std::string&& value);
  void add_platforms_to_sync(const char* value);
  void add_platforms_to_sync(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& platforms_to_sync() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_platforms_to_sync();
  private:
  const std::string& _internal_platforms_to_sync(int index) const;
  std::string* _internal_add_platforms_to_sync();
  public:

  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string url = 6;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string file_sha = 10 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional uint64 ugcid = 2;
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  uint64_t ugcid() const;
  void set_ugcid(uint64_t value);
  private:
  uint64_t _internal_ugcid() const;
  void _internal_set_ugcid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_size = 5;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional fixed64 steamid_creator = 7;
  bool has_steamid_creator() const;
  private:
  bool _internal_has_steamid_creator() const;
  public:
  void clear_steamid_creator();
  uint64_t steamid_creator() const;
  void set_steamid_creator(uint64_t value);
  private:
  uint64_t _internal_steamid_creator() const;
  void _internal_set_steamid_creator(uint64_t value);
  public:

  // optional uint32 flags = 8;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_UserFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> platforms_to_sync_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  uint64_t ugcid_;
  uint32_t appid_;
  uint32_t file_size_;
  uint64_t timestamp_;
  uint64_t steamid_creator_;
  uint32_t flags_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetFileDetails_Response) */ {
 public:
  inline CCloud_GetFileDetails_Response() : CCloud_GetFileDetails_Response(nullptr) {}
  ~CCloud_GetFileDetails_Response() override;
  explicit constexpr CCloud_GetFileDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from);
  CCloud_GetFileDetails_Response(CCloud_GetFileDetails_Response&& from) noexcept
    : CCloud_GetFileDetails_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Response& operator=(const CCloud_GetFileDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetFileDetails_Response& operator=(CCloud_GetFileDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetFileDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetFileDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Response*>(
               &_CCloud_GetFileDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CCloud_GetFileDetails_Response& a, CCloud_GetFileDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetFileDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetFileDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetFileDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetFileDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetFileDetails_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetFileDetails_Response";
  }
  protected:
  explicit CCloud_GetFileDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // optional .CCloud_UserFile details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::CCloud_UserFile& details() const;
  PROTOBUF_NODISCARD ::CCloud_UserFile* release_details();
  ::CCloud_UserFile* mutable_details();
  void set_allocated_details(::CCloud_UserFile* details);
  private:
  const ::CCloud_UserFile& _internal_details() const;
  ::CCloud_UserFile* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::CCloud_UserFile* details);
  ::CCloud_UserFile* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CCloud_UserFile* details_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserFiles_Request) */ {
 public:
  inline CCloud_EnumerateUserFiles_Request() : CCloud_EnumerateUserFiles_Request(nullptr) {}
  ~CCloud_EnumerateUserFiles_Request() override;
  explicit constexpr CCloud_EnumerateUserFiles_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from);
  CCloud_EnumerateUserFiles_Request(CCloud_EnumerateUserFiles_Request&& from) noexcept
    : CCloud_EnumerateUserFiles_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Request& operator=(const CCloud_EnumerateUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserFiles_Request& operator=(CCloud_EnumerateUserFiles_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_EnumerateUserFiles_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Request*>(
               &_CCloud_EnumerateUserFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CCloud_EnumerateUserFiles_Request& a, CCloud_EnumerateUserFiles_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserFiles_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserFiles_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_EnumerateUserFiles_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_EnumerateUserFiles_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_EnumerateUserFiles_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserFiles_Request";
  }
  protected:
  explicit CCloud_EnumerateUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kExtendedDetailsFieldNumber = 2,
    kCountFieldNumber = 3,
    kStartIndexFieldNumber = 4,
  };
  // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  bool has_extended_details() const;
  private:
  bool _internal_has_extended_details() const;
  public:
  void clear_extended_details();
  bool extended_details() const;
  void set_extended_details(bool value);
  private:
  bool _internal_extended_details() const;
  void _internal_set_extended_details(bool value);
  public:

  // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  bool has_start_index() const;
  private:
  bool _internal_has_start_index() const;
  public:
  void clear_start_index();
  uint32_t start_index() const;
  void set_start_index(uint32_t value);
  private:
  uint32_t _internal_start_index() const;
  void _internal_set_start_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  bool extended_details_;
  uint32_t count_;
  uint32_t start_index_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserFiles_Response) */ {
 public:
  inline CCloud_EnumerateUserFiles_Response() : CCloud_EnumerateUserFiles_Response(nullptr) {}
  ~CCloud_EnumerateUserFiles_Response() override;
  explicit constexpr CCloud_EnumerateUserFiles_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from);
  CCloud_EnumerateUserFiles_Response(CCloud_EnumerateUserFiles_Response&& from) noexcept
    : CCloud_EnumerateUserFiles_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Response& operator=(const CCloud_EnumerateUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserFiles_Response& operator=(CCloud_EnumerateUserFiles_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_EnumerateUserFiles_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Response*>(
               &_CCloud_EnumerateUserFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CCloud_EnumerateUserFiles_Response& a, CCloud_EnumerateUserFiles_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserFiles_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserFiles_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_EnumerateUserFiles_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_EnumerateUserFiles_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_EnumerateUserFiles_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserFiles_Response";
  }
  protected:
  explicit CCloud_EnumerateUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kTotalFilesFieldNumber = 2,
  };
  // repeated .CCloud_UserFile files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CCloud_UserFile* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >*
      mutable_files();
  private:
  const ::CCloud_UserFile& _internal_files(int index) const;
  ::CCloud_UserFile* _internal_add_files();
  public:
  const ::CCloud_UserFile& files(int index) const;
  ::CCloud_UserFile* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >&
      files() const;

  // optional uint32 total_files = 2;
  bool has_total_files() const;
  private:
  bool _internal_has_total_files() const;
  public:
  void clear_total_files();
  uint32_t total_files() const;
  void set_total_files(uint32_t value);
  private:
  uint32_t _internal_total_files() const;
  void _internal_set_total_files(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile > files_;
  uint32_t total_files_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_Delete_Request) */ {
 public:
  inline CCloud_Delete_Request() : CCloud_Delete_Request(nullptr) {}
  ~CCloud_Delete_Request() override;
  explicit constexpr CCloud_Delete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_Delete_Request(const CCloud_Delete_Request& from);
  CCloud_Delete_Request(CCloud_Delete_Request&& from) noexcept
    : CCloud_Delete_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Request& operator=(const CCloud_Delete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_Delete_Request& operator=(CCloud_Delete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_Delete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_Delete_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Request*>(
               &_CCloud_Delete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CCloud_Delete_Request& a, CCloud_Delete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_Delete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_Delete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_Delete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_Delete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_Delete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_Delete_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_Delete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_Delete_Request";
  }
  protected:
  explicit CCloud_Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kUploadBatchIdFieldNumber = 3,
    kAppidFieldNumber = 2,
  };
  // optional string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint64 upload_batch_id = 3 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
  bool has_upload_batch_id() const;
  private:
  bool _internal_has_upload_batch_id() const;
  public:
  void clear_upload_batch_id();
  uint64_t upload_batch_id() const;
  void set_upload_batch_id(uint64_t value);
  private:
  uint64_t _internal_upload_batch_id() const;
  void _internal_set_upload_batch_id(uint64_t value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_Delete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint64_t upload_batch_id_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_Delete_Response) */ {
 public:
  inline CCloud_Delete_Response() : CCloud_Delete_Response(nullptr) {}
  explicit constexpr CCloud_Delete_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_Delete_Response(const CCloud_Delete_Response& from);
  CCloud_Delete_Response(CCloud_Delete_Response&& from) noexcept
    : CCloud_Delete_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Response& operator=(const CCloud_Delete_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_Delete_Response& operator=(CCloud_Delete_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_Delete_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_Delete_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Response*>(
               &_CCloud_Delete_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CCloud_Delete_Response& a, CCloud_Delete_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_Delete_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_Delete_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_Delete_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_Delete_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_Delete_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_Delete_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_Delete_Response";
  }
  protected:
  explicit CCloud_Delete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_Delete_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetClientEncryptionKey_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_GetClientEncryptionKey_Request) */ {
 public:
  inline CCloud_GetClientEncryptionKey_Request() : CCloud_GetClientEncryptionKey_Request(nullptr) {}
  explicit constexpr CCloud_GetClientEncryptionKey_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetClientEncryptionKey_Request(const CCloud_GetClientEncryptionKey_Request& from);
  CCloud_GetClientEncryptionKey_Request(CCloud_GetClientEncryptionKey_Request&& from) noexcept
    : CCloud_GetClientEncryptionKey_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetClientEncryptionKey_Request& operator=(const CCloud_GetClientEncryptionKey_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetClientEncryptionKey_Request& operator=(CCloud_GetClientEncryptionKey_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetClientEncryptionKey_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetClientEncryptionKey_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetClientEncryptionKey_Request*>(
               &_CCloud_GetClientEncryptionKey_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CCloud_GetClientEncryptionKey_Request& a, CCloud_GetClientEncryptionKey_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetClientEncryptionKey_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetClientEncryptionKey_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetClientEncryptionKey_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_GetClientEncryptionKey_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_GetClientEncryptionKey_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetClientEncryptionKey_Request";
  }
  protected:
  explicit CCloud_GetClientEncryptionKey_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_GetClientEncryptionKey_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetClientEncryptionKey_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetClientEncryptionKey_Response) */ {
 public:
  inline CCloud_GetClientEncryptionKey_Response() : CCloud_GetClientEncryptionKey_Response(nullptr) {}
  ~CCloud_GetClientEncryptionKey_Response() override;
  explicit constexpr CCloud_GetClientEncryptionKey_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetClientEncryptionKey_Response(const CCloud_GetClientEncryptionKey_Response& from);
  CCloud_GetClientEncryptionKey_Response(CCloud_GetClientEncryptionKey_Response&& from) noexcept
    : CCloud_GetClientEncryptionKey_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetClientEncryptionKey_Response& operator=(const CCloud_GetClientEncryptionKey_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetClientEncryptionKey_Response& operator=(CCloud_GetClientEncryptionKey_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetClientEncryptionKey_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetClientEncryptionKey_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetClientEncryptionKey_Response*>(
               &_CCloud_GetClientEncryptionKey_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CCloud_GetClientEncryptionKey_Response& a, CCloud_GetClientEncryptionKey_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetClientEncryptionKey_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetClientEncryptionKey_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetClientEncryptionKey_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetClientEncryptionKey_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetClientEncryptionKey_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetClientEncryptionKey_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetClientEncryptionKey_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetClientEncryptionKey_Response";
  }
  protected:
  explicit CCloud_GetClientEncryptionKey_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kCrcFieldNumber = 2,
  };
  // optional bytes key = 1 [(.description) = "AES-256 encryption key"];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional int32 crc = 2 [(.description) = "CRC of key"];
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  int32_t crc() const;
  void set_crc(int32_t value);
  private:
  int32_t _internal_crc() const;
  void _internal_set_crc(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetClientEncryptionKey_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int32_t crc_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CDNReport_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CDNReport_Notification) */ {
 public:
  inline CCloud_CDNReport_Notification() : CCloud_CDNReport_Notification(nullptr) {}
  ~CCloud_CDNReport_Notification() override;
  explicit constexpr CCloud_CDNReport_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CDNReport_Notification(const CCloud_CDNReport_Notification& from);
  CCloud_CDNReport_Notification(CCloud_CDNReport_Notification&& from) noexcept
    : CCloud_CDNReport_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_CDNReport_Notification& operator=(const CCloud_CDNReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CDNReport_Notification& operator=(CCloud_CDNReport_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CDNReport_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CDNReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_CDNReport_Notification*>(
               &_CCloud_CDNReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CCloud_CDNReport_Notification& a, CCloud_CDNReport_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CDNReport_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CDNReport_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CDNReport_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CDNReport_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CDNReport_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CDNReport_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CDNReport_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CDNReport_Notification";
  }
  protected:
  explicit CCloud_CDNReport_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kSteamidFieldNumber = 1,
    kSuccessFieldNumber = 3,
    kHttpStatusCodeFieldNumber = 4,
    kExpectedBytesFieldNumber = 5,
    kReceivedBytesFieldNumber = 6,
    kDurationFieldNumber = 7,
  };
  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional uint32 http_status_code = 4;
  bool has_http_status_code() const;
  private:
  bool _internal_has_http_status_code() const;
  public:
  void clear_http_status_code();
  uint32_t http_status_code() const;
  void set_http_status_code(uint32_t value);
  private:
  uint32_t _internal_http_status_code() const;
  void _internal_set_http_status_code(uint32_t value);
  public:

  // optional uint64 expected_bytes = 5;
  bool has_expected_bytes() const;
  private:
  bool _internal_has_expected_bytes() const;
  public:
  void clear_expected_bytes();
  uint64_t expected_bytes() const;
  void set_expected_bytes(uint64_t value);
  private:
  uint64_t _internal_expected_bytes() const;
  void _internal_set_expected_bytes(uint64_t value);
  public:

  // optional uint64 received_bytes = 6;
  bool has_received_bytes() const;
  private:
  bool _internal_has_received_bytes() const;
  public:
  void clear_received_bytes();
  uint64_t received_bytes() const;
  void set_received_bytes(uint64_t value);
  private:
  uint64_t _internal_received_bytes() const;
  void _internal_set_received_bytes(uint64_t value);
  public:

  // optional uint32 duration = 7;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CDNReport_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint64_t steamid_;
  bool success_;
  uint32_t http_status_code_;
  uint64_t expected_bytes_;
  uint64_t received_bytes_;
  uint32_t duration_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ExternalStorageTransferReport_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ExternalStorageTransferReport_Notification) */ {
 public:
  inline CCloud_ExternalStorageTransferReport_Notification() : CCloud_ExternalStorageTransferReport_Notification(nullptr) {}
  ~CCloud_ExternalStorageTransferReport_Notification() override;
  explicit constexpr CCloud_ExternalStorageTransferReport_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ExternalStorageTransferReport_Notification(const CCloud_ExternalStorageTransferReport_Notification& from);
  CCloud_ExternalStorageTransferReport_Notification(CCloud_ExternalStorageTransferReport_Notification&& from) noexcept
    : CCloud_ExternalStorageTransferReport_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ExternalStorageTransferReport_Notification& operator=(const CCloud_ExternalStorageTransferReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ExternalStorageTransferReport_Notification& operator=(CCloud_ExternalStorageTransferReport_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ExternalStorageTransferReport_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ExternalStorageTransferReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ExternalStorageTransferReport_Notification*>(
               &_CCloud_ExternalStorageTransferReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CCloud_ExternalStorageTransferReport_Notification& a, CCloud_ExternalStorageTransferReport_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ExternalStorageTransferReport_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ExternalStorageTransferReport_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ExternalStorageTransferReport_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ExternalStorageTransferReport_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ExternalStorageTransferReport_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ExternalStorageTransferReport_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ExternalStorageTransferReport_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ExternalStorageTransferReport_Notification";
  }
  protected:
  explicit CCloud_ExternalStorageTransferReport_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPathFieldNumber = 2,
    kBytesExpectedFieldNumber = 6,
    kHttpStatusCodeFieldNumber = 5,
    kIsUploadFieldNumber = 3,
    kSuccessFieldNumber = 4,
    kProxiedFieldNumber = 10,
    kIpv6LocalFieldNumber = 11,
    kBytesActualFieldNumber = 7,
    kDurationMsFieldNumber = 8,
    kCellidFieldNumber = 9,
    kIpv6RemoteFieldNumber = 12,
    kTimeToConnectMsFieldNumber = 13,
    kTimeToSendReqMsFieldNumber = 14,
    kTimeToFirstByteMsFieldNumber = 15,
    kTimeToLastByteMsFieldNumber = 16,
  };
  // optional string host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint64 bytes_expected = 6;
  bool has_bytes_expected() const;
  private:
  bool _internal_has_bytes_expected() const;
  public:
  void clear_bytes_expected();
  uint64_t bytes_expected() const;
  void set_bytes_expected(uint64_t value);
  private:
  uint64_t _internal_bytes_expected() const;
  void _internal_set_bytes_expected(uint64_t value);
  public:

  // optional uint32 http_status_code = 5;
  bool has_http_status_code() const;
  private:
  bool _internal_has_http_status_code() const;
  public:
  void clear_http_status_code();
  uint32_t http_status_code() const;
  void set_http_status_code(uint32_t value);
  private:
  uint32_t _internal_http_status_code() const;
  void _internal_set_http_status_code(uint32_t value);
  public:

  // optional bool is_upload = 3;
  bool has_is_upload() const;
  private:
  bool _internal_has_is_upload() const;
  public:
  void clear_is_upload();
  bool is_upload() const;
  void set_is_upload(bool value);
  private:
  bool _internal_is_upload() const;
  void _internal_set_is_upload(bool value);
  public:

  // optional bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional bool proxied = 10;
  bool has_proxied() const;
  private:
  bool _internal_has_proxied() const;
  public:
  void clear_proxied();
  bool proxied() const;
  void set_proxied(bool value);
  private:
  bool _internal_proxied() const;
  void _internal_set_proxied(bool value);
  public:

  // optional bool ipv6_local = 11;
  bool has_ipv6_local() const;
  private:
  bool _internal_has_ipv6_local() const;
  public:
  void clear_ipv6_local();
  bool ipv6_local() const;
  void set_ipv6_local(bool value);
  private:
  bool _internal_ipv6_local() const;
  void _internal_set_ipv6_local(bool value);
  public:

  // optional uint64 bytes_actual = 7;
  bool has_bytes_actual() const;
  private:
  bool _internal_has_bytes_actual() const;
  public:
  void clear_bytes_actual();
  uint64_t bytes_actual() const;
  void set_bytes_actual(uint64_t value);
  private:
  uint64_t _internal_bytes_actual() const;
  void _internal_set_bytes_actual(uint64_t value);
  public:

  // optional uint32 duration_ms = 8;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  uint32_t duration_ms() const;
  void set_duration_ms(uint32_t value);
  private:
  uint32_t _internal_duration_ms() const;
  void _internal_set_duration_ms(uint32_t value);
  public:

  // optional uint32 cellid = 9;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // optional bool ipv6_remote = 12;
  bool has_ipv6_remote() const;
  private:
  bool _internal_has_ipv6_remote() const;
  public:
  void clear_ipv6_remote();
  bool ipv6_remote() const;
  void set_ipv6_remote(bool value);
  private:
  bool _internal_ipv6_remote() const;
  void _internal_set_ipv6_remote(bool value);
  public:

  // optional uint32 time_to_connect_ms = 13;
  bool has_time_to_connect_ms() const;
  private:
  bool _internal_has_time_to_connect_ms() const;
  public:
  void clear_time_to_connect_ms();
  uint32_t time_to_connect_ms() const;
  void set_time_to_connect_ms(uint32_t value);
  private:
  uint32_t _internal_time_to_connect_ms() const;
  void _internal_set_time_to_connect_ms(uint32_t value);
  public:

  // optional uint32 time_to_send_req_ms = 14;
  bool has_time_to_send_req_ms() const;
  private:
  bool _internal_has_time_to_send_req_ms() const;
  public:
  void clear_time_to_send_req_ms();
  uint32_t time_to_send_req_ms() const;
  void set_time_to_send_req_ms(uint32_t value);
  private:
  uint32_t _internal_time_to_send_req_ms() const;
  void _internal_set_time_to_send_req_ms(uint32_t value);
  public:

  // optional uint32 time_to_first_byte_ms = 15;
  bool has_time_to_first_byte_ms() const;
  private:
  bool _internal_has_time_to_first_byte_ms() const;
  public:
  void clear_time_to_first_byte_ms();
  uint32_t time_to_first_byte_ms() const;
  void set_time_to_first_byte_ms(uint32_t value);
  private:
  uint32_t _internal_time_to_first_byte_ms() const;
  void _internal_set_time_to_first_byte_ms(uint32_t value);
  public:

  // optional uint32 time_to_last_byte_ms = 16;
  bool has_time_to_last_byte_ms() const;
  private:
  bool _internal_has_time_to_last_byte_ms() const;
  public:
  void clear_time_to_last_byte_ms();
  uint32_t time_to_last_byte_ms() const;
  void set_time_to_last_byte_ms(uint32_t value);
  private:
  uint32_t _internal_time_to_last_byte_ms() const;
  void _internal_set_time_to_last_byte_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ExternalStorageTransferReport_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  uint64_t bytes_expected_;
  uint32_t http_status_code_;
  bool is_upload_;
  bool success_;
  bool proxied_;
  bool ipv6_local_;
  uint64_t bytes_actual_;
  uint32_t duration_ms_;
  uint32_t cellid_;
  bool ipv6_remote_;
  uint32_t time_to_connect_ms_;
  uint32_t time_to_send_req_ms_;
  uint32_t time_to_first_byte_ms_;
  uint32_t time_to_last_byte_ms_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginAppUploadBatch_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginAppUploadBatch_Request) */ {
 public:
  inline CCloud_BeginAppUploadBatch_Request() : CCloud_BeginAppUploadBatch_Request(nullptr) {}
  ~CCloud_BeginAppUploadBatch_Request() override;
  explicit constexpr CCloud_BeginAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginAppUploadBatch_Request(const CCloud_BeginAppUploadBatch_Request& from);
  CCloud_BeginAppUploadBatch_Request(CCloud_BeginAppUploadBatch_Request&& from) noexcept
    : CCloud_BeginAppUploadBatch_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginAppUploadBatch_Request& operator=(const CCloud_BeginAppUploadBatch_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginAppUploadBatch_Request& operator=(CCloud_BeginAppUploadBatch_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginAppUploadBatch_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginAppUploadBatch_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginAppUploadBatch_Request*>(
               &_CCloud_BeginAppUploadBatch_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CCloud_BeginAppUploadBatch_Request& a, CCloud_BeginAppUploadBatch_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginAppUploadBatch_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginAppUploadBatch_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginAppUploadBatch_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginAppUploadBatch_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginAppUploadBatch_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginAppUploadBatch_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginAppUploadBatch_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginAppUploadBatch_Request";
  }
  protected:
  explicit CCloud_BeginAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesToUploadFieldNumber = 3,
    kFilesToDeleteFieldNumber = 4,
    kMachineNameFieldNumber = 2,
    kClientIdFieldNumber = 5,
    kAppBuildIdFieldNumber = 6,
    kAppidFieldNumber = 1,
  };
  // repeated string files_to_upload = 3 [(.description) = "Filenames of files to upload in this batch"];
  int files_to_upload_size() const;
  private:
  int _internal_files_to_upload_size() const;
  public:
  void clear_files_to_upload();
  const std::string& files_to_upload(int index) const;
  std::string* mutable_files_to_upload(int index);
  void set_files_to_upload(int index, const std::string& value);
  void set_files_to_upload(int index, std::string&& value);
  void set_files_to_upload(int index, const char* value);
  void set_files_to_upload(int index, const char* value, size_t size);
  std::string* add_files_to_upload();
  void add_files_to_upload(const std::string& value);
  void add_files_to_upload(std::string&& value);
  void add_files_to_upload(const char* value);
  void add_files_to_upload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files_to_upload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files_to_upload();
  private:
  const std::string& _internal_files_to_upload(int index) const;
  std::string* _internal_add_files_to_upload();
  public:

  // repeated string files_to_delete = 4 [(.description) = "Filenames of files to delete in this batch"];
  int files_to_delete_size() const;
  private:
  int _internal_files_to_delete_size() const;
  public:
  void clear_files_to_delete();
  const std::string& files_to_delete(int index) const;
  std::string* mutable_files_to_delete(int index);
  void set_files_to_delete(int index, const std::string& value);
  void set_files_to_delete(int index, std::string&& value);
  void set_files_to_delete(int index, const char* value);
  void set_files_to_delete(int index, const char* value, size_t size);
  std::string* add_files_to_delete();
  void add_files_to_delete(const std::string& value);
  void add_files_to_delete(std::string&& value);
  void add_files_to_delete(const char* value);
  void add_files_to_delete(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files_to_delete() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files_to_delete();
  private:
  const std::string& _internal_files_to_delete(int index) const;
  std::string* _internal_add_files_to_delete();
  public:

  // optional string machine_name = 2 [(.description) = "Client machine name (may be user\'s alias)."];
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional uint64 client_id = 5 [(.description) = "Client ID number"];
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint64 app_build_id = 6 [(.description) = "Current local build of the app which made these changes"];
  bool has_app_build_id() const;
  private:
  bool _internal_has_app_build_id() const;
  public:
  void clear_app_build_id();
  uint64_t app_build_id() const;
  void set_app_build_id(uint64_t value);
  private:
  uint64_t _internal_app_build_id() const;
  void _internal_set_app_build_id(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginAppUploadBatch_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_to_upload_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_to_delete_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  uint64_t client_id_;
  uint64_t app_build_id_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_BeginAppUploadBatch_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_BeginAppUploadBatch_Response) */ {
 public:
  inline CCloud_BeginAppUploadBatch_Response() : CCloud_BeginAppUploadBatch_Response(nullptr) {}
  ~CCloud_BeginAppUploadBatch_Response() override;
  explicit constexpr CCloud_BeginAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_BeginAppUploadBatch_Response(const CCloud_BeginAppUploadBatch_Response& from);
  CCloud_BeginAppUploadBatch_Response(CCloud_BeginAppUploadBatch_Response&& from) noexcept
    : CCloud_BeginAppUploadBatch_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_BeginAppUploadBatch_Response& operator=(const CCloud_BeginAppUploadBatch_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_BeginAppUploadBatch_Response& operator=(CCloud_BeginAppUploadBatch_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_BeginAppUploadBatch_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_BeginAppUploadBatch_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_BeginAppUploadBatch_Response*>(
               &_CCloud_BeginAppUploadBatch_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CCloud_BeginAppUploadBatch_Response& a, CCloud_BeginAppUploadBatch_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_BeginAppUploadBatch_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_BeginAppUploadBatch_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_BeginAppUploadBatch_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_BeginAppUploadBatch_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_BeginAppUploadBatch_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_BeginAppUploadBatch_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_BeginAppUploadBatch_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_BeginAppUploadBatch_Response";
  }
  protected:
  explicit CCloud_BeginAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 1,
    kAppChangeNumberFieldNumber = 4,
  };
  // optional uint64 batch_id = 1 [(.description) = "ID of this batch."];
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  uint64_t batch_id() const;
  void set_batch_id(uint64_t value);
  private:
  uint64_t _internal_batch_id() const;
  void _internal_set_batch_id(uint64_t value);
  public:

  // optional uint64 app_change_number = 4 [(.description) = "New App Change Number"];
  bool has_app_change_number() const;
  private:
  bool _internal_has_app_change_number() const;
  public:
  void clear_app_change_number();
  uint64_t app_change_number() const;
  void set_app_change_number(uint64_t value);
  private:
  uint64_t _internal_app_change_number() const;
  void _internal_set_app_change_number(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_BeginAppUploadBatch_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t batch_id_;
  uint64_t app_change_number_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CompleteAppUploadBatch_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CompleteAppUploadBatch_Notification) */ {
 public:
  inline CCloud_CompleteAppUploadBatch_Notification() : CCloud_CompleteAppUploadBatch_Notification(nullptr) {}
  ~CCloud_CompleteAppUploadBatch_Notification() override;
  explicit constexpr CCloud_CompleteAppUploadBatch_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CompleteAppUploadBatch_Notification(const CCloud_CompleteAppUploadBatch_Notification& from);
  CCloud_CompleteAppUploadBatch_Notification(CCloud_CompleteAppUploadBatch_Notification&& from) noexcept
    : CCloud_CompleteAppUploadBatch_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_CompleteAppUploadBatch_Notification& operator=(const CCloud_CompleteAppUploadBatch_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CompleteAppUploadBatch_Notification& operator=(CCloud_CompleteAppUploadBatch_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CompleteAppUploadBatch_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CompleteAppUploadBatch_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_CompleteAppUploadBatch_Notification*>(
               &_CCloud_CompleteAppUploadBatch_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CCloud_CompleteAppUploadBatch_Notification& a, CCloud_CompleteAppUploadBatch_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CompleteAppUploadBatch_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CompleteAppUploadBatch_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CompleteAppUploadBatch_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CompleteAppUploadBatch_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CompleteAppUploadBatch_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CompleteAppUploadBatch_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CompleteAppUploadBatch_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CompleteAppUploadBatch_Notification";
  }
  protected:
  explicit CCloud_CompleteAppUploadBatch_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 2,
    kAppidFieldNumber = 1,
    kBatchEresultFieldNumber = 3,
  };
  // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  uint64_t batch_id() const;
  void set_batch_id(uint64_t value);
  private:
  uint64_t _internal_batch_id() const;
  void _internal_set_batch_id(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
  bool has_batch_eresult() const;
  private:
  bool _internal_has_batch_eresult() const;
  public:
  void clear_batch_eresult();
  uint32_t batch_eresult() const;
  void set_batch_eresult(uint32_t value);
  private:
  uint32_t _internal_batch_eresult() const;
  void _internal_set_batch_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CompleteAppUploadBatch_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t batch_id_;
  uint32_t appid_;
  uint32_t batch_eresult_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CompleteAppUploadBatch_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_CompleteAppUploadBatch_Request) */ {
 public:
  inline CCloud_CompleteAppUploadBatch_Request() : CCloud_CompleteAppUploadBatch_Request(nullptr) {}
  ~CCloud_CompleteAppUploadBatch_Request() override;
  explicit constexpr CCloud_CompleteAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CompleteAppUploadBatch_Request(const CCloud_CompleteAppUploadBatch_Request& from);
  CCloud_CompleteAppUploadBatch_Request(CCloud_CompleteAppUploadBatch_Request&& from) noexcept
    : CCloud_CompleteAppUploadBatch_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_CompleteAppUploadBatch_Request& operator=(const CCloud_CompleteAppUploadBatch_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CompleteAppUploadBatch_Request& operator=(CCloud_CompleteAppUploadBatch_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CompleteAppUploadBatch_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CompleteAppUploadBatch_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_CompleteAppUploadBatch_Request*>(
               &_CCloud_CompleteAppUploadBatch_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CCloud_CompleteAppUploadBatch_Request& a, CCloud_CompleteAppUploadBatch_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CompleteAppUploadBatch_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CompleteAppUploadBatch_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CompleteAppUploadBatch_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CompleteAppUploadBatch_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_CompleteAppUploadBatch_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_CompleteAppUploadBatch_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_CompleteAppUploadBatch_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CompleteAppUploadBatch_Request";
  }
  protected:
  explicit CCloud_CompleteAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 2,
    kAppidFieldNumber = 1,
    kBatchEresultFieldNumber = 3,
  };
  // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
  bool has_batch_id() const;
  private:
  bool _internal_has_batch_id() const;
  public:
  void clear_batch_id();
  uint64_t batch_id() const;
  void set_batch_id(uint64_t value);
  private:
  uint64_t _internal_batch_id() const;
  void _internal_set_batch_id(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
  bool has_batch_eresult() const;
  private:
  bool _internal_has_batch_eresult() const;
  public:
  void clear_batch_eresult();
  uint32_t batch_eresult() const;
  void set_batch_eresult(uint32_t value);
  private:
  uint32_t _internal_batch_eresult() const;
  void _internal_set_batch_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_CompleteAppUploadBatch_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t batch_id_;
  uint32_t appid_;
  uint32_t batch_eresult_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_CompleteAppUploadBatch_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_CompleteAppUploadBatch_Response) */ {
 public:
  inline CCloud_CompleteAppUploadBatch_Response() : CCloud_CompleteAppUploadBatch_Response(nullptr) {}
  explicit constexpr CCloud_CompleteAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_CompleteAppUploadBatch_Response(const CCloud_CompleteAppUploadBatch_Response& from);
  CCloud_CompleteAppUploadBatch_Response(CCloud_CompleteAppUploadBatch_Response&& from) noexcept
    : CCloud_CompleteAppUploadBatch_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_CompleteAppUploadBatch_Response& operator=(const CCloud_CompleteAppUploadBatch_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_CompleteAppUploadBatch_Response& operator=(CCloud_CompleteAppUploadBatch_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_CompleteAppUploadBatch_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_CompleteAppUploadBatch_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_CompleteAppUploadBatch_Response*>(
               &_CCloud_CompleteAppUploadBatch_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CCloud_CompleteAppUploadBatch_Response& a, CCloud_CompleteAppUploadBatch_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_CompleteAppUploadBatch_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_CompleteAppUploadBatch_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_CompleteAppUploadBatch_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_CompleteAppUploadBatch_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_CompleteAppUploadBatch_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_CompleteAppUploadBatch_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_CompleteAppUploadBatch_Response";
  }
  protected:
  explicit CCloud_CompleteAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_CompleteAppUploadBatch_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientBeginFileUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientBeginFileUpload_Request) */ {
 public:
  inline CCloud_ClientBeginFileUpload_Request() : CCloud_ClientBeginFileUpload_Request(nullptr) {}
  ~CCloud_ClientBeginFileUpload_Request() override;
  explicit constexpr CCloud_ClientBeginFileUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientBeginFileUpload_Request(const CCloud_ClientBeginFileUpload_Request& from);
  CCloud_ClientBeginFileUpload_Request(CCloud_ClientBeginFileUpload_Request&& from) noexcept
    : CCloud_ClientBeginFileUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientBeginFileUpload_Request& operator=(const CCloud_ClientBeginFileUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientBeginFileUpload_Request& operator=(CCloud_ClientBeginFileUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientBeginFileUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientBeginFileUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientBeginFileUpload_Request*>(
               &_CCloud_ClientBeginFileUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CCloud_ClientBeginFileUpload_Request& a, CCloud_ClientBeginFileUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientBeginFileUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientBeginFileUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientBeginFileUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientBeginFileUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientBeginFileUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientBeginFileUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientBeginFileUpload_Request";
  }
  protected:
  explicit CCloud_ClientBeginFileUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileShaFieldNumber = 4,
    kFilenameFieldNumber = 6,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kTimeStampFieldNumber = 5,
    kRawFileSizeFieldNumber = 3,
    kCellIdFieldNumber = 9,
    kCanEncryptFieldNumber = 10,
    kIsSharedFileFieldNumber = 11,
    kDeprecatedRealmFieldNumber = 12,
    kUploadBatchIdFieldNumber = 13,
    kPlatformsToSyncFieldNumber = 7,
  };
  // optional bytes file_sha = 4 [(.description) = "SHA-1 of raw file."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional string filename = 6 [(.description) = "Name of the file to store in the cloud."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in Cloud."];
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file."];
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional uint32 raw_file_size = 3 [(.description) = "file size before any compression and/or encryption."];
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional uint32 cell_id = 9 [(.description) = "Client\'s cell ID so we can pick storage location."];
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional bool can_encrypt = 10 [(.description) = "if true, client can encrypt the file before uploading it"];
  bool has_can_encrypt() const;
  private:
  bool _internal_has_can_encrypt() const;
  public:
  void clear_can_encrypt();
  bool can_encrypt() const;
  void set_can_encrypt(bool value);
  private:
  bool _internal_can_encrypt() const;
  void _internal_set_can_encrypt(bool value);
  public:

  // optional bool is_shared_file = 11 [(.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  bool has_is_shared_file() const;
  private:
  bool _internal_has_is_shared_file() const;
  public:
  void clear_is_shared_file();
  bool is_shared_file() const;
  void set_is_shared_file(bool value);
  private:
  bool _internal_is_shared_file() const;
  void _internal_set_is_shared_file(bool value);
  public:

  // optional uint32 deprecated_realm = 12 [(.description) = "unused"];
  bool has_deprecated_realm() const;
  private:
  bool _internal_has_deprecated_realm() const;
  public:
  void clear_deprecated_realm();
  uint32_t deprecated_realm() const;
  void set_deprecated_realm(uint32_t value);
  private:
  uint32_t _internal_deprecated_realm() const;
  void _internal_set_deprecated_realm(uint32_t value);
  public:

  // optional uint64 upload_batch_id = 13 [(.description) = "ID of this batch."];
  bool has_upload_batch_id() const;
  private:
  bool _internal_has_upload_batch_id() const;
  public:
  void clear_upload_batch_id();
  uint64_t upload_batch_id() const;
  void set_upload_batch_id(uint64_t value);
  private:
  uint64_t _internal_upload_batch_id() const;
  void _internal_set_upload_batch_id(uint64_t value);
  public:

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  bool has_platforms_to_sync() const;
  private:
  bool _internal_has_platforms_to_sync() const;
  public:
  void clear_platforms_to_sync();
  uint32_t platforms_to_sync() const;
  void set_platforms_to_sync(uint32_t value);
  private:
  uint32_t _internal_platforms_to_sync() const;
  void _internal_set_platforms_to_sync(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientBeginFileUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t appid_;
  uint32_t file_size_;
  uint64_t time_stamp_;
  uint32_t raw_file_size_;
  uint32_t cell_id_;
  bool can_encrypt_;
  bool is_shared_file_;
  uint32_t deprecated_realm_;
  uint64_t upload_batch_id_;
  uint32_t platforms_to_sync_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ClientCloudFileUploadBlockDetails_HTTPHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCloudFileUploadBlockDetails.HTTPHeaders) */ {
 public:
  inline ClientCloudFileUploadBlockDetails_HTTPHeaders() : ClientCloudFileUploadBlockDetails_HTTPHeaders(nullptr) {}
  ~ClientCloudFileUploadBlockDetails_HTTPHeaders() override;
  explicit constexpr ClientCloudFileUploadBlockDetails_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCloudFileUploadBlockDetails_HTTPHeaders(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);
  ClientCloudFileUploadBlockDetails_HTTPHeaders(ClientCloudFileUploadBlockDetails_HTTPHeaders&& from) noexcept
    : ClientCloudFileUploadBlockDetails_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline ClientCloudFileUploadBlockDetails_HTTPHeaders& operator=(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCloudFileUploadBlockDetails_HTTPHeaders& operator=(ClientCloudFileUploadBlockDetails_HTTPHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientCloudFileUploadBlockDetails_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCloudFileUploadBlockDetails_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const ClientCloudFileUploadBlockDetails_HTTPHeaders*>(
               &_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ClientCloudFileUploadBlockDetails_HTTPHeaders& a, ClientCloudFileUploadBlockDetails_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCloudFileUploadBlockDetails_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails_HTTPHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCloudFileUploadBlockDetails.HTTPHeaders";
  }
  protected:
  explicit ClientCloudFileUploadBlockDetails_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:ClientCloudFileUploadBlockDetails.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class ClientCloudFileUploadBlockDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientCloudFileUploadBlockDetails) */ {
 public:
  inline ClientCloudFileUploadBlockDetails() : ClientCloudFileUploadBlockDetails(nullptr) {}
  ~ClientCloudFileUploadBlockDetails() override;
  explicit constexpr ClientCloudFileUploadBlockDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCloudFileUploadBlockDetails(const ClientCloudFileUploadBlockDetails& from);
  ClientCloudFileUploadBlockDetails(ClientCloudFileUploadBlockDetails&& from) noexcept
    : ClientCloudFileUploadBlockDetails() {
    *this = ::std::move(from);
  }

  inline ClientCloudFileUploadBlockDetails& operator=(const ClientCloudFileUploadBlockDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCloudFileUploadBlockDetails& operator=(ClientCloudFileUploadBlockDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientCloudFileUploadBlockDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCloudFileUploadBlockDetails* internal_default_instance() {
    return reinterpret_cast<const ClientCloudFileUploadBlockDetails*>(
               &_ClientCloudFileUploadBlockDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ClientCloudFileUploadBlockDetails& a, ClientCloudFileUploadBlockDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientCloudFileUploadBlockDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCloudFileUploadBlockDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCloudFileUploadBlockDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCloudFileUploadBlockDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientCloudFileUploadBlockDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientCloudFileUploadBlockDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCloudFileUploadBlockDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientCloudFileUploadBlockDetails";
  }
  protected:
  explicit ClientCloudFileUploadBlockDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientCloudFileUploadBlockDetails_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 5,
    kUrlHostFieldNumber = 1,
    kUrlPathFieldNumber = 2,
    kExplicitBodyDataFieldNumber = 8,
    kHttpMethodFieldNumber = 4,
    kUseHttpsFieldNumber = 3,
    kMayParallelizeFieldNumber = 9,
    kBlockOffsetFieldNumber = 6,
    kBlockLengthFieldNumber = 7,
  };
  // repeated .ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::ClientCloudFileUploadBlockDetails_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::ClientCloudFileUploadBlockDetails_HTTPHeaders& _internal_request_headers(int index) const;
  ::ClientCloudFileUploadBlockDetails_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::ClientCloudFileUploadBlockDetails_HTTPHeaders& request_headers(int index) const;
  ::ClientCloudFileUploadBlockDetails_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 1 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_host();
  PROTOBUF_NODISCARD std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 2 [(.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional bytes explicit_body_data = 8 [(.description) = "explicit body data to use, instead of file data, for this block"];
  bool has_explicit_body_data() const;
  private:
  bool _internal_has_explicit_body_data() const;
  public:
  void clear_explicit_body_data();
  const std::string& explicit_body_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explicit_body_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explicit_body_data();
  PROTOBUF_NODISCARD std::string* release_explicit_body_data();
  void set_allocated_explicit_body_data(std::string* explicit_body_data);
  private:
  const std::string& _internal_explicit_body_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explicit_body_data(const std::string& value);
  std::string* _internal_mutable_explicit_body_data();
  public:

  // optional int32 http_method = 4 [(.description) = "EHTTPMethod to use for this block."];
  bool has_http_method() const;
  private:
  bool _internal_has_http_method() const;
  public:
  void clear_http_method();
  int32_t http_method() const;
  void set_http_method(int32_t value);
  private:
  int32_t _internal_http_method() const;
  void _internal_set_http_method(int32_t value);
  public:

  // optional bool use_https = 3 [(.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // optional bool may_parallelize = 9 [(.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  bool has_may_parallelize() const;
  private:
  bool _internal_has_may_parallelize() const;
  public:
  void clear_may_parallelize();
  bool may_parallelize() const;
  void set_may_parallelize(bool value);
  private:
  bool _internal_may_parallelize() const;
  void _internal_set_may_parallelize(bool value);
  public:

  // optional uint64 block_offset = 6 [(.description) = "offset of file block to upload"];
  bool has_block_offset() const;
  private:
  bool _internal_has_block_offset() const;
  public:
  void clear_block_offset();
  uint64_t block_offset() const;
  void set_block_offset(uint64_t value);
  private:
  uint64_t _internal_block_offset() const;
  void _internal_set_block_offset(uint64_t value);
  public:

  // optional uint32 block_length = 7 [(.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  bool has_block_length() const;
  private:
  bool _internal_has_block_length() const;
  public:
  void clear_block_length();
  uint32_t block_length() const;
  void set_block_length(uint32_t value);
  private:
  uint32_t _internal_block_length() const;
  void _internal_set_block_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientCloudFileUploadBlockDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explicit_body_data_;
  int32_t http_method_;
  bool use_https_;
  bool may_parallelize_;
  uint64_t block_offset_;
  uint32_t block_length_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientBeginFileUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientBeginFileUpload_Response) */ {
 public:
  inline CCloud_ClientBeginFileUpload_Response() : CCloud_ClientBeginFileUpload_Response(nullptr) {}
  ~CCloud_ClientBeginFileUpload_Response() override;
  explicit constexpr CCloud_ClientBeginFileUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientBeginFileUpload_Response(const CCloud_ClientBeginFileUpload_Response& from);
  CCloud_ClientBeginFileUpload_Response(CCloud_ClientBeginFileUpload_Response&& from) noexcept
    : CCloud_ClientBeginFileUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientBeginFileUpload_Response& operator=(const CCloud_ClientBeginFileUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientBeginFileUpload_Response& operator=(CCloud_ClientBeginFileUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientBeginFileUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientBeginFileUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientBeginFileUpload_Response*>(
               &_CCloud_ClientBeginFileUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CCloud_ClientBeginFileUpload_Response& a, CCloud_ClientBeginFileUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientBeginFileUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientBeginFileUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientBeginFileUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientBeginFileUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientBeginFileUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientBeginFileUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientBeginFileUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientBeginFileUpload_Response";
  }
  protected:
  explicit CCloud_ClientBeginFileUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRequestsFieldNumber = 2,
    kEncryptFileFieldNumber = 1,
  };
  // repeated .ClientCloudFileUploadBlockDetails block_requests = 2 [(.description) = "HTTP requests to make to perform upload"];
  int block_requests_size() const;
  private:
  int _internal_block_requests_size() const;
  public:
  void clear_block_requests();
  ::ClientCloudFileUploadBlockDetails* mutable_block_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails >*
      mutable_block_requests();
  private:
  const ::ClientCloudFileUploadBlockDetails& _internal_block_requests(int index) const;
  ::ClientCloudFileUploadBlockDetails* _internal_add_block_requests();
  public:
  const ::ClientCloudFileUploadBlockDetails& block_requests(int index) const;
  ::ClientCloudFileUploadBlockDetails* add_block_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails >&
      block_requests() const;

  // optional bool encrypt_file = 1 [(.description) = "If true, the file should be encrypted by the client before upload"];
  bool has_encrypt_file() const;
  private:
  bool _internal_has_encrypt_file() const;
  public:
  void clear_encrypt_file();
  bool encrypt_file() const;
  void set_encrypt_file(bool value);
  private:
  bool _internal_encrypt_file() const;
  void _internal_set_encrypt_file(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientBeginFileUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails > block_requests_;
  bool encrypt_file_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientCommitFileUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientCommitFileUpload_Request) */ {
 public:
  inline CCloud_ClientCommitFileUpload_Request() : CCloud_ClientCommitFileUpload_Request(nullptr) {}
  ~CCloud_ClientCommitFileUpload_Request() override;
  explicit constexpr CCloud_ClientCommitFileUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientCommitFileUpload_Request(const CCloud_ClientCommitFileUpload_Request& from);
  CCloud_ClientCommitFileUpload_Request(CCloud_ClientCommitFileUpload_Request&& from) noexcept
    : CCloud_ClientCommitFileUpload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientCommitFileUpload_Request& operator=(const CCloud_ClientCommitFileUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientCommitFileUpload_Request& operator=(CCloud_ClientCommitFileUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientCommitFileUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientCommitFileUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientCommitFileUpload_Request*>(
               &_CCloud_ClientCommitFileUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CCloud_ClientCommitFileUpload_Request& a, CCloud_ClientCommitFileUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientCommitFileUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientCommitFileUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientCommitFileUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientCommitFileUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientCommitFileUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientCommitFileUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientCommitFileUpload_Request";
  }
  protected:
  explicit CCloud_ClientCommitFileUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileShaFieldNumber = 3,
    kFilenameFieldNumber = 4,
    kTransferSucceededFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional bytes file_sha = 3 [(.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  bool has_file_sha() const;
  private:
  bool _internal_has_file_sha() const;
  public:
  void clear_file_sha();
  const std::string& file_sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_sha();
  PROTOBUF_NODISCARD std::string* release_file_sha();
  void set_allocated_file_sha(std::string* file_sha);
  private:
  const std::string& _internal_file_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_sha(const std::string& value);
  std::string* _internal_mutable_file_sha();
  public:

  // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bool transfer_succeeded = 1 [(.description) = "True if all block uploads succeeded, false if any of them failed."];
  bool has_transfer_succeeded() const;
  private:
  bool _internal_has_transfer_succeeded() const;
  public:
  void clear_transfer_succeeded();
  bool transfer_succeeded() const;
  void set_transfer_succeeded(bool value);
  private:
  bool _internal_transfer_succeeded() const;
  void _internal_set_transfer_succeeded(bool value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientCommitFileUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  bool transfer_succeeded_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientCommitFileUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientCommitFileUpload_Response) */ {
 public:
  inline CCloud_ClientCommitFileUpload_Response() : CCloud_ClientCommitFileUpload_Response(nullptr) {}
  ~CCloud_ClientCommitFileUpload_Response() override;
  explicit constexpr CCloud_ClientCommitFileUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientCommitFileUpload_Response(const CCloud_ClientCommitFileUpload_Response& from);
  CCloud_ClientCommitFileUpload_Response(CCloud_ClientCommitFileUpload_Response&& from) noexcept
    : CCloud_ClientCommitFileUpload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientCommitFileUpload_Response& operator=(const CCloud_ClientCommitFileUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientCommitFileUpload_Response& operator=(CCloud_ClientCommitFileUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientCommitFileUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientCommitFileUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientCommitFileUpload_Response*>(
               &_CCloud_ClientCommitFileUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CCloud_ClientCommitFileUpload_Response& a, CCloud_ClientCommitFileUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientCommitFileUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientCommitFileUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientCommitFileUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientCommitFileUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientCommitFileUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientCommitFileUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientCommitFileUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientCommitFileUpload_Response";
  }
  protected:
  explicit CCloud_ClientCommitFileUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileCommittedFieldNumber = 1,
  };
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  bool has_file_committed() const;
  private:
  bool _internal_has_file_committed() const;
  public:
  void clear_file_committed();
  bool file_committed() const;
  void set_file_committed(bool value);
  private:
  bool _internal_file_committed() const;
  void _internal_set_file_committed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientCommitFileUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool file_committed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientFileDownload_Request) */ {
 public:
  inline CCloud_ClientFileDownload_Request() : CCloud_ClientFileDownload_Request(nullptr) {}
  ~CCloud_ClientFileDownload_Request() override;
  explicit constexpr CCloud_ClientFileDownload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientFileDownload_Request(const CCloud_ClientFileDownload_Request& from);
  CCloud_ClientFileDownload_Request(CCloud_ClientFileDownload_Request&& from) noexcept
    : CCloud_ClientFileDownload_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Request& operator=(const CCloud_ClientFileDownload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientFileDownload_Request& operator=(CCloud_ClientFileDownload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientFileDownload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientFileDownload_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Request*>(
               &_CCloud_ClientFileDownload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CCloud_ClientFileDownload_Request& a, CCloud_ClientFileDownload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientFileDownload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientFileDownload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientFileDownload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientFileDownload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientFileDownload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientFileDownload_Request";
  }
  protected:
  explicit CCloud_ClientFileDownload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kAppidFieldNumber = 1,
    kRealmFieldNumber = 3,
  };
  // optional string filename = 2 [(.description) = "Filename of the file."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 appid = 1 [(.description) = "App ID the file is part of."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 realm = 3 [(.description) = "Steam Realm"];
  bool has_realm() const;
  private:
  bool _internal_has_realm() const;
  public:
  void clear_realm();
  uint32_t realm() const;
  void set_realm(uint32_t value);
  private:
  uint32_t _internal_realm() const;
  void _internal_set_realm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t appid_;
  uint32_t realm_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Response_HTTPHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientFileDownload_Response.HTTPHeaders) */ {
 public:
  inline CCloud_ClientFileDownload_Response_HTTPHeaders() : CCloud_ClientFileDownload_Response_HTTPHeaders(nullptr) {}
  ~CCloud_ClientFileDownload_Response_HTTPHeaders() override;
  explicit constexpr CCloud_ClientFileDownload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientFileDownload_Response_HTTPHeaders(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);
  CCloud_ClientFileDownload_Response_HTTPHeaders(CCloud_ClientFileDownload_Response_HTTPHeaders&& from) noexcept
    : CCloud_ClientFileDownload_Response_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Response_HTTPHeaders& operator=(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientFileDownload_Response_HTTPHeaders& operator=(CCloud_ClientFileDownload_Response_HTTPHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientFileDownload_Response_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientFileDownload_Response_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Response_HTTPHeaders*>(
               &_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CCloud_ClientFileDownload_Response_HTTPHeaders& a, CCloud_ClientFileDownload_Response_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientFileDownload_Response_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response_HTTPHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientFileDownload_Response.HTTPHeaders";
  }
  protected:
  explicit CCloud_ClientFileDownload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Response.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientFileDownload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientFileDownload_Response) */ {
 public:
  inline CCloud_ClientFileDownload_Response() : CCloud_ClientFileDownload_Response(nullptr) {}
  ~CCloud_ClientFileDownload_Response() override;
  explicit constexpr CCloud_ClientFileDownload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientFileDownload_Response(const CCloud_ClientFileDownload_Response& from);
  CCloud_ClientFileDownload_Response(CCloud_ClientFileDownload_Response&& from) noexcept
    : CCloud_ClientFileDownload_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientFileDownload_Response& operator=(const CCloud_ClientFileDownload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientFileDownload_Response& operator=(CCloud_ClientFileDownload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientFileDownload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientFileDownload_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientFileDownload_Response*>(
               &_CCloud_ClientFileDownload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CCloud_ClientFileDownload_Response& a, CCloud_ClientFileDownload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientFileDownload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientFileDownload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientFileDownload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientFileDownload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientFileDownload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientFileDownload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientFileDownload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientFileDownload_Response";
  }
  protected:
  explicit CCloud_ClientFileDownload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_ClientFileDownload_Response_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 10,
    kShaFileFieldNumber = 4,
    kUrlHostFieldNumber = 7,
    kUrlPathFieldNumber = 8,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kTimeStampFieldNumber = 5,
    kRawFileSizeFieldNumber = 3,
    kIsExplicitDeleteFieldNumber = 6,
    kUseHttpsFieldNumber = 9,
    kEncryptedFieldNumber = 11,
  };
  // repeated .CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.description) = "Name-value pairs to be sent in HTTP GET request."];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::CCloud_ClientFileDownload_Response_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_ClientFileDownload_Response_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::CCloud_ClientFileDownload_Response_HTTPHeaders& _internal_request_headers(int index) const;
  ::CCloud_ClientFileDownload_Response_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::CCloud_ClientFileDownload_Response_HTTPHeaders& request_headers(int index) const;
  ::CCloud_ClientFileDownload_Response_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_ClientFileDownload_Response_HTTPHeaders >&
      request_headers() const;

  // optional bytes sha_file = 4 [(.description) = "SHA of file"];
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional string url_host = 7 [(.description) = "Host to GET the file from"];
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_host();
  PROTOBUF_NODISCARD std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 8 [(.description) = "Path on that host to use, including URL parameters if any"];
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional uint32 appid = 1 [(.description) = "Application the file belongs to"];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in the Cloud"];
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file"];
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional uint32 raw_file_size = 3 [(.description) = "file size when decompressed and/or decrypted"];
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional bool is_explicit_delete = 6 [(.description) = "True if this is an explicitly deleted file"];
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional bool use_https = 9 [(.description) = "If set, use HTTPS, else use HTTP"];
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // optional bool encrypted = 11;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientFileDownload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_ClientFileDownload_Response_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  uint32_t appid_;
  uint32_t file_size_;
  uint64_t time_stamp_;
  uint32_t raw_file_size_;
  bool is_explicit_delete_;
  bool use_https_;
  bool encrypted_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientDeleteFile_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientDeleteFile_Request) */ {
 public:
  inline CCloud_ClientDeleteFile_Request() : CCloud_ClientDeleteFile_Request(nullptr) {}
  ~CCloud_ClientDeleteFile_Request() override;
  explicit constexpr CCloud_ClientDeleteFile_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientDeleteFile_Request(const CCloud_ClientDeleteFile_Request& from);
  CCloud_ClientDeleteFile_Request(CCloud_ClientDeleteFile_Request&& from) noexcept
    : CCloud_ClientDeleteFile_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientDeleteFile_Request& operator=(const CCloud_ClientDeleteFile_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientDeleteFile_Request& operator=(CCloud_ClientDeleteFile_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientDeleteFile_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientDeleteFile_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientDeleteFile_Request*>(
               &_CCloud_ClientDeleteFile_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CCloud_ClientDeleteFile_Request& a, CCloud_ClientDeleteFile_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientDeleteFile_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientDeleteFile_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientDeleteFile_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientDeleteFile_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientDeleteFile_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientDeleteFile_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientDeleteFile_Request";
  }
  protected:
  explicit CCloud_ClientDeleteFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kAppidFieldNumber = 1,
    kIsExplicitDeleteFieldNumber = 3,
    kUploadBatchIdFieldNumber = 4,
  };
  // optional string filename = 2 [(.description) = "Filename of file."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being deleted."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool is_explicit_delete = 3 [(.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  bool has_is_explicit_delete() const;
  private:
  bool _internal_has_is_explicit_delete() const;
  public:
  void clear_is_explicit_delete();
  bool is_explicit_delete() const;
  void set_is_explicit_delete(bool value);
  private:
  bool _internal_is_explicit_delete() const;
  void _internal_set_is_explicit_delete(bool value);
  public:

  // optional uint64 upload_batch_id = 4 [(.description) = "ID of this batch."];
  bool has_upload_batch_id() const;
  private:
  bool _internal_has_upload_batch_id() const;
  public:
  void clear_upload_batch_id();
  uint64_t upload_batch_id() const;
  void set_upload_batch_id(uint64_t value);
  private:
  uint64_t _internal_upload_batch_id() const;
  void _internal_set_upload_batch_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientDeleteFile_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  uint32_t appid_;
  bool is_explicit_delete_;
  uint64_t upload_batch_id_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientDeleteFile_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_ClientDeleteFile_Response) */ {
 public:
  inline CCloud_ClientDeleteFile_Response() : CCloud_ClientDeleteFile_Response(nullptr) {}
  explicit constexpr CCloud_ClientDeleteFile_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientDeleteFile_Response(const CCloud_ClientDeleteFile_Response& from);
  CCloud_ClientDeleteFile_Response(CCloud_ClientDeleteFile_Response&& from) noexcept
    : CCloud_ClientDeleteFile_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientDeleteFile_Response& operator=(const CCloud_ClientDeleteFile_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientDeleteFile_Response& operator=(CCloud_ClientDeleteFile_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientDeleteFile_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientDeleteFile_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientDeleteFile_Response*>(
               &_CCloud_ClientDeleteFile_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CCloud_ClientDeleteFile_Response& a, CCloud_ClientDeleteFile_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientDeleteFile_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientDeleteFile_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientDeleteFile_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientDeleteFile_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_ClientDeleteFile_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_ClientDeleteFile_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientDeleteFile_Response";
  }
  protected:
  explicit CCloud_ClientDeleteFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_ClientDeleteFile_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientConflictResolution_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientConflictResolution_Notification) */ {
 public:
  inline CCloud_ClientConflictResolution_Notification() : CCloud_ClientConflictResolution_Notification(nullptr) {}
  ~CCloud_ClientConflictResolution_Notification() override;
  explicit constexpr CCloud_ClientConflictResolution_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientConflictResolution_Notification(const CCloud_ClientConflictResolution_Notification& from);
  CCloud_ClientConflictResolution_Notification(CCloud_ClientConflictResolution_Notification&& from) noexcept
    : CCloud_ClientConflictResolution_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientConflictResolution_Notification& operator=(const CCloud_ClientConflictResolution_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientConflictResolution_Notification& operator=(CCloud_ClientConflictResolution_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientConflictResolution_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientConflictResolution_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientConflictResolution_Notification*>(
               &_CCloud_ClientConflictResolution_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CCloud_ClientConflictResolution_Notification& a, CCloud_ClientConflictResolution_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientConflictResolution_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientConflictResolution_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientConflictResolution_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientConflictResolution_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientConflictResolution_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientConflictResolution_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientConflictResolution_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientConflictResolution_Notification";
  }
  protected:
  explicit CCloud_ClientConflictResolution_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kChoseLocalFilesFieldNumber = 2,
  };
  // optional uint32 appid = 1 [(.description) = "App ID for which the conflict was resolved."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool chose_local_files = 2 [(.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  bool has_chose_local_files() const;
  private:
  bool _internal_has_chose_local_files() const;
  public:
  void clear_chose_local_files();
  bool chose_local_files() const;
  void set_chose_local_files(bool value);
  private:
  bool _internal_chose_local_files() const;
  void _internal_set_chose_local_files(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientConflictResolution_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  bool chose_local_files_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserApps_Request) */ {
 public:
  inline CCloud_EnumerateUserApps_Request() : CCloud_EnumerateUserApps_Request(nullptr) {}
  explicit constexpr CCloud_EnumerateUserApps_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserApps_Request(const CCloud_EnumerateUserApps_Request& from);
  CCloud_EnumerateUserApps_Request(CCloud_EnumerateUserApps_Request&& from) noexcept
    : CCloud_EnumerateUserApps_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Request& operator=(const CCloud_EnumerateUserApps_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserApps_Request& operator=(CCloud_EnumerateUserApps_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_EnumerateUserApps_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserApps_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Request*>(
               &_CCloud_EnumerateUserApps_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CCloud_EnumerateUserApps_Request& a, CCloud_EnumerateUserApps_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserApps_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserApps_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_EnumerateUserApps_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_EnumerateUserApps_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_EnumerateUserApps_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserApps_Request";
  }
  protected:
  explicit CCloud_EnumerateUserApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Response_Apps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserApps_Response.Apps) */ {
 public:
  inline CCloud_EnumerateUserApps_Response_Apps() : CCloud_EnumerateUserApps_Response_Apps(nullptr) {}
  ~CCloud_EnumerateUserApps_Response_Apps() override;
  explicit constexpr CCloud_EnumerateUserApps_Response_Apps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserApps_Response_Apps(const CCloud_EnumerateUserApps_Response_Apps& from);
  CCloud_EnumerateUserApps_Response_Apps(CCloud_EnumerateUserApps_Response_Apps&& from) noexcept
    : CCloud_EnumerateUserApps_Response_Apps() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Response_Apps& operator=(const CCloud_EnumerateUserApps_Response_Apps& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserApps_Response_Apps& operator=(CCloud_EnumerateUserApps_Response_Apps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_EnumerateUserApps_Response_Apps& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserApps_Response_Apps* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Response_Apps*>(
               &_CCloud_EnumerateUserApps_Response_Apps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CCloud_EnumerateUserApps_Response_Apps& a, CCloud_EnumerateUserApps_Response_Apps& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserApps_Response_Apps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserApps_Response_Apps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_EnumerateUserApps_Response_Apps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response_Apps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_EnumerateUserApps_Response_Apps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_EnumerateUserApps_Response_Apps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserApps_Response_Apps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserApps_Response.Apps";
  }
  protected:
  explicit CCloud_EnumerateUserApps_Response_Apps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kTotalcountFieldNumber = 2,
    kTotalsizeFieldNumber = 3,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional int32 totalcount = 2;
  bool has_totalcount() const;
  private:
  bool _internal_has_totalcount() const;
  public:
  void clear_totalcount();
  int32_t totalcount() const;
  void set_totalcount(int32_t value);
  private:
  int32_t _internal_totalcount() const;
  void _internal_set_totalcount(int32_t value);
  public:

  // optional int64 totalsize = 3;
  bool has_totalsize() const;
  private:
  bool _internal_has_totalsize() const;
  public:
  void clear_totalsize();
  int64_t totalsize() const;
  void set_totalsize(int64_t value);
  private:
  int64_t _internal_totalsize() const;
  void _internal_set_totalsize(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Response.Apps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  int32_t totalcount_;
  int64_t totalsize_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserApps_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserApps_Response) */ {
 public:
  inline CCloud_EnumerateUserApps_Response() : CCloud_EnumerateUserApps_Response(nullptr) {}
  ~CCloud_EnumerateUserApps_Response() override;
  explicit constexpr CCloud_EnumerateUserApps_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserApps_Response(const CCloud_EnumerateUserApps_Response& from);
  CCloud_EnumerateUserApps_Response(CCloud_EnumerateUserApps_Response&& from) noexcept
    : CCloud_EnumerateUserApps_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserApps_Response& operator=(const CCloud_EnumerateUserApps_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserApps_Response& operator=(CCloud_EnumerateUserApps_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_EnumerateUserApps_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserApps_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserApps_Response*>(
               &_CCloud_EnumerateUserApps_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CCloud_EnumerateUserApps_Response& a, CCloud_EnumerateUserApps_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserApps_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserApps_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_EnumerateUserApps_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserApps_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_EnumerateUserApps_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_EnumerateUserApps_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserApps_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserApps_Response";
  }
  protected:
  explicit CCloud_EnumerateUserApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCloud_EnumerateUserApps_Response_Apps Apps;

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .CCloud_EnumerateUserApps_Response.Apps apps = 1;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::CCloud_EnumerateUserApps_Response_Apps* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_EnumerateUserApps_Response_Apps >*
      mutable_apps();
  private:
  const ::CCloud_EnumerateUserApps_Response_Apps& _internal_apps(int index) const;
  ::CCloud_EnumerateUserApps_Response_Apps* _internal_add_apps();
  public:
  const ::CCloud_EnumerateUserApps_Response_Apps& apps(int index) const;
  ::CCloud_EnumerateUserApps_Response_Apps* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_EnumerateUserApps_Response_Apps >&
      apps() const;

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserApps_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_EnumerateUserApps_Response_Apps > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetAppFileChangelist_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetAppFileChangelist_Request) */ {
 public:
  inline CCloud_GetAppFileChangelist_Request() : CCloud_GetAppFileChangelist_Request(nullptr) {}
  ~CCloud_GetAppFileChangelist_Request() override;
  explicit constexpr CCloud_GetAppFileChangelist_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetAppFileChangelist_Request(const CCloud_GetAppFileChangelist_Request& from);
  CCloud_GetAppFileChangelist_Request(CCloud_GetAppFileChangelist_Request&& from) noexcept
    : CCloud_GetAppFileChangelist_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetAppFileChangelist_Request& operator=(const CCloud_GetAppFileChangelist_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetAppFileChangelist_Request& operator=(CCloud_GetAppFileChangelist_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetAppFileChangelist_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetAppFileChangelist_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetAppFileChangelist_Request*>(
               &_CCloud_GetAppFileChangelist_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CCloud_GetAppFileChangelist_Request& a, CCloud_GetAppFileChangelist_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetAppFileChangelist_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetAppFileChangelist_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetAppFileChangelist_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetAppFileChangelist_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetAppFileChangelist_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetAppFileChangelist_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetAppFileChangelist_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetAppFileChangelist_Request";
  }
  protected:
  explicit CCloud_GetAppFileChangelist_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncedChangeNumberFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 synced_change_number = 2 [(.description) = "Change Number to which local machine was last successfully synced"];
  bool has_synced_change_number() const;
  private:
  bool _internal_has_synced_change_number() const;
  public:
  void clear_synced_change_number();
  uint64_t synced_change_number() const;
  void set_synced_change_number(uint64_t value);
  private:
  uint64_t _internal_synced_change_number() const;
  void _internal_set_synced_change_number(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App ID"];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetAppFileChangelist_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t synced_change_number_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppFileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppFileInfo) */ {
 public:
  inline CCloud_AppFileInfo() : CCloud_AppFileInfo(nullptr) {}
  ~CCloud_AppFileInfo() override;
  explicit constexpr CCloud_AppFileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppFileInfo(const CCloud_AppFileInfo& from);
  CCloud_AppFileInfo(CCloud_AppFileInfo&& from) noexcept
    : CCloud_AppFileInfo() {
    *this = ::std::move(from);
  }

  inline CCloud_AppFileInfo& operator=(const CCloud_AppFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppFileInfo& operator=(CCloud_AppFileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppFileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppFileInfo* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppFileInfo*>(
               &_CCloud_AppFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CCloud_AppFileInfo& a, CCloud_AppFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppFileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppFileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppFileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppFileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppFileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppFileInfo";
  }
  protected:
  explicit CCloud_AppFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kShaFileFieldNumber = 2,
    kTimeStampFieldNumber = 3,
    kRawFileSizeFieldNumber = 4,
    kPersistStateFieldNumber = 5,
    kPlatformsToSyncFieldNumber = 6,
    kPathPrefixIndexFieldNumber = 7,
    kMachineNameIndexFieldNumber = 8,
  };
  // optional string file_name = 1 [(.description) = "unqualified filename"];
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional bytes sha_file = 2 [(.description) = "SHA of file"];
  bool has_sha_file() const;
  private:
  bool _internal_has_sha_file() const;
  public:
  void clear_sha_file();
  const std::string& sha_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_file();
  PROTOBUF_NODISCARD std::string* release_sha_file();
  void set_allocated_sha_file(std::string* sha_file);
  private:
  const std::string& _internal_sha_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_file(const std::string& value);
  std::string* _internal_mutable_sha_file();
  public:

  // optional uint64 time_stamp = 3 [(.description) = "server timestamp of last modification"];
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional uint32 raw_file_size = 4 [(.description) = "size of raw file"];
  bool has_raw_file_size() const;
  private:
  bool _internal_has_raw_file_size() const;
  public:
  void clear_raw_file_size();
  uint32_t raw_file_size() const;
  void set_raw_file_size(uint32_t value);
  private:
  uint32_t _internal_raw_file_size() const;
  void _internal_set_raw_file_size(uint32_t value);
  public:

  // optional .ECloudStoragePersistState persist_state = 5 [default = k_ECloudStoragePersistStatePersisted, (.description) = "current persist state of the file"];
  bool has_persist_state() const;
  private:
  bool _internal_has_persist_state() const;
  public:
  void clear_persist_state();
  ::ECloudStoragePersistState persist_state() const;
  void set_persist_state(::ECloudStoragePersistState value);
  private:
  ::ECloudStoragePersistState _internal_persist_state() const;
  void _internal_set_persist_state(::ECloudStoragePersistState value);
  public:

  // optional uint32 platforms_to_sync = 6 [(.description) = "ERemoteStoragePlatform bits"];
  bool has_platforms_to_sync() const;
  private:
  bool _internal_has_platforms_to_sync() const;
  public:
  void clear_platforms_to_sync();
  uint32_t platforms_to_sync() const;
  void set_platforms_to_sync(uint32_t value);
  private:
  uint32_t _internal_platforms_to_sync() const;
  void _internal_set_platforms_to_sync(uint32_t value);
  public:

  // optional uint32 path_prefix_index = 7 [(.description) = "index into string table of path prefixes"];
  bool has_path_prefix_index() const;
  private:
  bool _internal_has_path_prefix_index() const;
  public:
  void clear_path_prefix_index();
  uint32_t path_prefix_index() const;
  void set_path_prefix_index(uint32_t value);
  private:
  uint32_t _internal_path_prefix_index() const;
  void _internal_set_path_prefix_index(uint32_t value);
  public:

  // optional uint32 machine_name_index = 8 [(.description) = "what machine last modified this file"];
  bool has_machine_name_index() const;
  private:
  bool _internal_has_machine_name_index() const;
  public:
  void clear_machine_name_index();
  uint32_t machine_name_index() const;
  void set_machine_name_index(uint32_t value);
  private:
  uint32_t _internal_machine_name_index() const;
  void _internal_set_machine_name_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_file_;
  uint64_t time_stamp_;
  uint32_t raw_file_size_;
  int persist_state_;
  uint32_t platforms_to_sync_;
  uint32_t path_prefix_index_;
  uint32_t machine_name_index_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetAppFileChangelist_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetAppFileChangelist_Response) */ {
 public:
  inline CCloud_GetAppFileChangelist_Response() : CCloud_GetAppFileChangelist_Response(nullptr) {}
  ~CCloud_GetAppFileChangelist_Response() override;
  explicit constexpr CCloud_GetAppFileChangelist_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetAppFileChangelist_Response(const CCloud_GetAppFileChangelist_Response& from);
  CCloud_GetAppFileChangelist_Response(CCloud_GetAppFileChangelist_Response&& from) noexcept
    : CCloud_GetAppFileChangelist_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetAppFileChangelist_Response& operator=(const CCloud_GetAppFileChangelist_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetAppFileChangelist_Response& operator=(CCloud_GetAppFileChangelist_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_GetAppFileChangelist_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetAppFileChangelist_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetAppFileChangelist_Response*>(
               &_CCloud_GetAppFileChangelist_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CCloud_GetAppFileChangelist_Response& a, CCloud_GetAppFileChangelist_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetAppFileChangelist_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetAppFileChangelist_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_GetAppFileChangelist_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_GetAppFileChangelist_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_GetAppFileChangelist_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_GetAppFileChangelist_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetAppFileChangelist_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetAppFileChangelist_Response";
  }
  protected:
  explicit CCloud_GetAppFileChangelist_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kPathPrefixesFieldNumber = 4,
    kMachineNamesFieldNumber = 5,
    kCurrentChangeNumberFieldNumber = 1,
    kAppBuildidHwmFieldNumber = 6,
    kIsOnlyDeltaFieldNumber = 3,
  };
  // repeated .CCloud_AppFileInfo files = 2 [(.description) = "List of files; may be the full list of extant/deleted files, or just a delta from the client list"];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CCloud_AppFileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_AppFileInfo >*
      mutable_files();
  private:
  const ::CCloud_AppFileInfo& _internal_files(int index) const;
  ::CCloud_AppFileInfo* _internal_add_files();
  public:
  const ::CCloud_AppFileInfo& files(int index) const;
  ::CCloud_AppFileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_AppFileInfo >&
      files() const;

  // repeated string path_prefixes = 4 [(.description) = "string table of path prefixes"];
  int path_prefixes_size() const;
  private:
  int _internal_path_prefixes_size() const;
  public:
  void clear_path_prefixes();
  const std::string& path_prefixes(int index) const;
  std::string* mutable_path_prefixes(int index);
  void set_path_prefixes(int index, const std::string& value);
  void set_path_prefixes(int index, std::string&& value);
  void set_path_prefixes(int index, const char* value);
  void set_path_prefixes(int index, const char* value, size_t size);
  std::string* add_path_prefixes();
  void add_path_prefixes(const std::string& value);
  void add_path_prefixes(std::string&& value);
  void add_path_prefixes(const char* value);
  void add_path_prefixes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& path_prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_path_prefixes();
  private:
  const std::string& _internal_path_prefixes(int index) const;
  std::string* _internal_add_path_prefixes();
  public:

  // repeated string machine_names = 5 [(.description) = "string table of machine names"];
  int machine_names_size() const;
  private:
  int _internal_machine_names_size() const;
  public:
  void clear_machine_names();
  const std::string& machine_names(int index) const;
  std::string* mutable_machine_names(int index);
  void set_machine_names(int index, const std::string& value);
  void set_machine_names(int index, std::string&& value);
  void set_machine_names(int index, const char* value);
  void set_machine_names(int index, const char* value, size_t size);
  std::string* add_machine_names();
  void add_machine_names(const std::string& value);
  void add_machine_names(std::string&& value);
  void add_machine_names(const char* value);
  void add_machine_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& machine_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_machine_names();
  private:
  const std::string& _internal_machine_names(int index) const;
  std::string* _internal_add_machine_names();
  public:

  // optional uint64 current_change_number = 1 [(.description) = "Change Number current on server"];
  bool has_current_change_number() const;
  private:
  bool _internal_has_current_change_number() const;
  public:
  void clear_current_change_number();
  uint64_t current_change_number() const;
  void set_current_change_number(uint64_t value);
  private:
  uint64_t _internal_current_change_number() const;
  void _internal_set_current_change_number(uint64_t value);
  public:

  // optional uint64 app_buildid_hwm = 6 [(.description) = "highest app build ID which has uploaded data"];
  bool has_app_buildid_hwm() const;
  private:
  bool _internal_has_app_buildid_hwm() const;
  public:
  void clear_app_buildid_hwm();
  uint64_t app_buildid_hwm() const;
  void set_app_buildid_hwm(uint64_t value);
  private:
  uint64_t _internal_app_buildid_hwm() const;
  void _internal_set_app_buildid_hwm(uint64_t value);
  public:

  // optional bool is_only_delta = 3 [(.description) = "If true, \'files\' omits any files that have not changed since client\'s change ID"];
  bool has_is_only_delta() const;
  private:
  bool _internal_has_is_only_delta() const;
  public:
  void clear_is_only_delta();
  bool is_only_delta() const;
  void set_is_only_delta(bool value);
  private:
  bool _internal_is_only_delta() const;
  void _internal_set_is_only_delta(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetAppFileChangelist_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_AppFileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> path_prefixes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> machine_names_;
  uint64_t current_change_number_;
  uint64_t app_buildid_hwm_;
  bool is_only_delta_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppSessionSuspend_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppSessionSuspend_Request) */ {
 public:
  inline CCloud_AppSessionSuspend_Request() : CCloud_AppSessionSuspend_Request(nullptr) {}
  ~CCloud_AppSessionSuspend_Request() override;
  explicit constexpr CCloud_AppSessionSuspend_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppSessionSuspend_Request(const CCloud_AppSessionSuspend_Request& from);
  CCloud_AppSessionSuspend_Request(CCloud_AppSessionSuspend_Request&& from) noexcept
    : CCloud_AppSessionSuspend_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_AppSessionSuspend_Request& operator=(const CCloud_AppSessionSuspend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppSessionSuspend_Request& operator=(CCloud_AppSessionSuspend_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppSessionSuspend_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppSessionSuspend_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppSessionSuspend_Request*>(
               &_CCloud_AppSessionSuspend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CCloud_AppSessionSuspend_Request& a, CCloud_AppSessionSuspend_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppSessionSuspend_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppSessionSuspend_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppSessionSuspend_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppSessionSuspend_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppSessionSuspend_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppSessionSuspend_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppSessionSuspend_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppSessionSuspend_Request";
  }
  protected:
  explicit CCloud_AppSessionSuspend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 3,
    kClientIdFieldNumber = 2,
    kAppidFieldNumber = 1,
    kCloudSyncCompletedFieldNumber = 4,
  };
  // optional string machine_name = 3;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional uint64 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool cloud_sync_completed = 4;
  bool has_cloud_sync_completed() const;
  private:
  bool _internal_has_cloud_sync_completed() const;
  public:
  void clear_cloud_sync_completed();
  bool cloud_sync_completed() const;
  void set_cloud_sync_completed(bool value);
  private:
  bool _internal_cloud_sync_completed() const;
  void _internal_set_cloud_sync_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppSessionSuspend_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  uint64_t client_id_;
  uint32_t appid_;
  bool cloud_sync_completed_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppSessionSuspend_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_AppSessionSuspend_Response) */ {
 public:
  inline CCloud_AppSessionSuspend_Response() : CCloud_AppSessionSuspend_Response(nullptr) {}
  explicit constexpr CCloud_AppSessionSuspend_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppSessionSuspend_Response(const CCloud_AppSessionSuspend_Response& from);
  CCloud_AppSessionSuspend_Response(CCloud_AppSessionSuspend_Response&& from) noexcept
    : CCloud_AppSessionSuspend_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_AppSessionSuspend_Response& operator=(const CCloud_AppSessionSuspend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppSessionSuspend_Response& operator=(CCloud_AppSessionSuspend_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppSessionSuspend_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppSessionSuspend_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppSessionSuspend_Response*>(
               &_CCloud_AppSessionSuspend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CCloud_AppSessionSuspend_Response& a, CCloud_AppSessionSuspend_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppSessionSuspend_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppSessionSuspend_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppSessionSuspend_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppSessionSuspend_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_AppSessionSuspend_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_AppSessionSuspend_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppSessionSuspend_Response";
  }
  protected:
  explicit CCloud_AppSessionSuspend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_AppSessionSuspend_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppSessionResume_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppSessionResume_Request) */ {
 public:
  inline CCloud_AppSessionResume_Request() : CCloud_AppSessionResume_Request(nullptr) {}
  ~CCloud_AppSessionResume_Request() override;
  explicit constexpr CCloud_AppSessionResume_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppSessionResume_Request(const CCloud_AppSessionResume_Request& from);
  CCloud_AppSessionResume_Request(CCloud_AppSessionResume_Request&& from) noexcept
    : CCloud_AppSessionResume_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_AppSessionResume_Request& operator=(const CCloud_AppSessionResume_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppSessionResume_Request& operator=(CCloud_AppSessionResume_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppSessionResume_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppSessionResume_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppSessionResume_Request*>(
               &_CCloud_AppSessionResume_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CCloud_AppSessionResume_Request& a, CCloud_AppSessionResume_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppSessionResume_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppSessionResume_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppSessionResume_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppSessionResume_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppSessionResume_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppSessionResume_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppSessionResume_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppSessionResume_Request";
  }
  protected:
  explicit CCloud_AppSessionResume_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppSessionResume_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t client_id_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppSessionResume_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCloud_AppSessionResume_Response) */ {
 public:
  inline CCloud_AppSessionResume_Response() : CCloud_AppSessionResume_Response(nullptr) {}
  explicit constexpr CCloud_AppSessionResume_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppSessionResume_Response(const CCloud_AppSessionResume_Response& from);
  CCloud_AppSessionResume_Response(CCloud_AppSessionResume_Response&& from) noexcept
    : CCloud_AppSessionResume_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_AppSessionResume_Response& operator=(const CCloud_AppSessionResume_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppSessionResume_Response& operator=(CCloud_AppSessionResume_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppSessionResume_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppSessionResume_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppSessionResume_Response*>(
               &_CCloud_AppSessionResume_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CCloud_AppSessionResume_Response& a, CCloud_AppSessionResume_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppSessionResume_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppSessionResume_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppSessionResume_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppSessionResume_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCloud_AppSessionResume_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCloud_AppSessionResume_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppSessionResume_Response";
  }
  protected:
  explicit CCloud_AppSessionResume_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_AppSessionResume_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppLaunchIntent_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppLaunchIntent_Request) */ {
 public:
  inline CCloud_AppLaunchIntent_Request() : CCloud_AppLaunchIntent_Request(nullptr) {}
  ~CCloud_AppLaunchIntent_Request() override;
  explicit constexpr CCloud_AppLaunchIntent_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppLaunchIntent_Request(const CCloud_AppLaunchIntent_Request& from);
  CCloud_AppLaunchIntent_Request(CCloud_AppLaunchIntent_Request&& from) noexcept
    : CCloud_AppLaunchIntent_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_AppLaunchIntent_Request& operator=(const CCloud_AppLaunchIntent_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppLaunchIntent_Request& operator=(CCloud_AppLaunchIntent_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppLaunchIntent_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppLaunchIntent_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppLaunchIntent_Request*>(
               &_CCloud_AppLaunchIntent_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CCloud_AppLaunchIntent_Request& a, CCloud_AppLaunchIntent_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppLaunchIntent_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppLaunchIntent_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppLaunchIntent_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppLaunchIntent_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppLaunchIntent_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppLaunchIntent_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppLaunchIntent_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppLaunchIntent_Request";
  }
  protected:
  explicit CCloud_AppLaunchIntent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 3,
    kClientIdFieldNumber = 2,
    kAppidFieldNumber = 1,
    kIgnorePendingOperationsFieldNumber = 4,
  };
  // optional string machine_name = 3;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional uint64 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool ignore_pending_operations = 4;
  bool has_ignore_pending_operations() const;
  private:
  bool _internal_has_ignore_pending_operations() const;
  public:
  void clear_ignore_pending_operations();
  bool ignore_pending_operations() const;
  void set_ignore_pending_operations(bool value);
  private:
  bool _internal_ignore_pending_operations() const;
  void _internal_set_ignore_pending_operations(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppLaunchIntent_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  uint64_t client_id_;
  uint32_t appid_;
  bool ignore_pending_operations_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppLaunchIntent_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppLaunchIntent_Response) */ {
 public:
  inline CCloud_AppLaunchIntent_Response() : CCloud_AppLaunchIntent_Response(nullptr) {}
  ~CCloud_AppLaunchIntent_Response() override;
  explicit constexpr CCloud_AppLaunchIntent_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppLaunchIntent_Response(const CCloud_AppLaunchIntent_Response& from);
  CCloud_AppLaunchIntent_Response(CCloud_AppLaunchIntent_Response&& from) noexcept
    : CCloud_AppLaunchIntent_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_AppLaunchIntent_Response& operator=(const CCloud_AppLaunchIntent_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppLaunchIntent_Response& operator=(CCloud_AppLaunchIntent_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppLaunchIntent_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppLaunchIntent_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppLaunchIntent_Response*>(
               &_CCloud_AppLaunchIntent_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CCloud_AppLaunchIntent_Response& a, CCloud_AppLaunchIntent_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppLaunchIntent_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppLaunchIntent_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppLaunchIntent_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppLaunchIntent_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppLaunchIntent_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppLaunchIntent_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppLaunchIntent_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppLaunchIntent_Response";
  }
  protected:
  explicit CCloud_AppLaunchIntent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingRemoteOperationsFieldNumber = 1,
  };
  // repeated .CCloud_PendingRemoteOperation pending_remote_operations = 1 [(.description) = "pending remote operations you should be aware of"];
  int pending_remote_operations_size() const;
  private:
  int _internal_pending_remote_operations_size() const;
  public:
  void clear_pending_remote_operations();
  ::CCloud_PendingRemoteOperation* mutable_pending_remote_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >*
      mutable_pending_remote_operations();
  private:
  const ::CCloud_PendingRemoteOperation& _internal_pending_remote_operations(int index) const;
  ::CCloud_PendingRemoteOperation* _internal_add_pending_remote_operations();
  public:
  const ::CCloud_PendingRemoteOperation& pending_remote_operations(int index) const;
  ::CCloud_PendingRemoteOperation* add_pending_remote_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >&
      pending_remote_operations() const;

  // @@protoc_insertion_point(class_scope:CCloud_AppLaunchIntent_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation > pending_remote_operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppExitSyncDone_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppExitSyncDone_Notification) */ {
 public:
  inline CCloud_AppExitSyncDone_Notification() : CCloud_AppExitSyncDone_Notification(nullptr) {}
  ~CCloud_AppExitSyncDone_Notification() override;
  explicit constexpr CCloud_AppExitSyncDone_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppExitSyncDone_Notification(const CCloud_AppExitSyncDone_Notification& from);
  CCloud_AppExitSyncDone_Notification(CCloud_AppExitSyncDone_Notification&& from) noexcept
    : CCloud_AppExitSyncDone_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_AppExitSyncDone_Notification& operator=(const CCloud_AppExitSyncDone_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppExitSyncDone_Notification& operator=(CCloud_AppExitSyncDone_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppExitSyncDone_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppExitSyncDone_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppExitSyncDone_Notification*>(
               &_CCloud_AppExitSyncDone_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CCloud_AppExitSyncDone_Notification& a, CCloud_AppExitSyncDone_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppExitSyncDone_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppExitSyncDone_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppExitSyncDone_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppExitSyncDone_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppExitSyncDone_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppExitSyncDone_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppExitSyncDone_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppExitSyncDone_Notification";
  }
  protected:
  explicit CCloud_AppExitSyncDone_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 2,
    kAppidFieldNumber = 1,
    kUploadsCompletedFieldNumber = 3,
    kUploadsRequiredFieldNumber = 4,
  };
  // optional uint64 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool uploads_completed = 3;
  bool has_uploads_completed() const;
  private:
  bool _internal_has_uploads_completed() const;
  public:
  void clear_uploads_completed();
  bool uploads_completed() const;
  void set_uploads_completed(bool value);
  private:
  bool _internal_uploads_completed() const;
  void _internal_set_uploads_completed(bool value);
  public:

  // optional bool uploads_required = 4;
  bool has_uploads_required() const;
  private:
  bool _internal_has_uploads_required() const;
  public:
  void clear_uploads_required();
  bool uploads_required() const;
  void set_uploads_required(bool value);
  private:
  bool _internal_uploads_required() const;
  void _internal_set_uploads_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppExitSyncDone_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t client_id_;
  uint32_t appid_;
  bool uploads_completed_;
  bool uploads_required_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientGetAppQuotaUsage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientGetAppQuotaUsage_Request) */ {
 public:
  inline CCloud_ClientGetAppQuotaUsage_Request() : CCloud_ClientGetAppQuotaUsage_Request(nullptr) {}
  ~CCloud_ClientGetAppQuotaUsage_Request() override;
  explicit constexpr CCloud_ClientGetAppQuotaUsage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientGetAppQuotaUsage_Request(const CCloud_ClientGetAppQuotaUsage_Request& from);
  CCloud_ClientGetAppQuotaUsage_Request(CCloud_ClientGetAppQuotaUsage_Request&& from) noexcept
    : CCloud_ClientGetAppQuotaUsage_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientGetAppQuotaUsage_Request& operator=(const CCloud_ClientGetAppQuotaUsage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientGetAppQuotaUsage_Request& operator=(CCloud_ClientGetAppQuotaUsage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientGetAppQuotaUsage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientGetAppQuotaUsage_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientGetAppQuotaUsage_Request*>(
               &_CCloud_ClientGetAppQuotaUsage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CCloud_ClientGetAppQuotaUsage_Request& a, CCloud_ClientGetAppQuotaUsage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientGetAppQuotaUsage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientGetAppQuotaUsage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientGetAppQuotaUsage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientGetAppQuotaUsage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientGetAppQuotaUsage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientGetAppQuotaUsage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientGetAppQuotaUsage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientGetAppQuotaUsage_Request";
  }
  protected:
  explicit CCloud_ClientGetAppQuotaUsage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientGetAppQuotaUsage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientGetAppQuotaUsage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientGetAppQuotaUsage_Response) */ {
 public:
  inline CCloud_ClientGetAppQuotaUsage_Response() : CCloud_ClientGetAppQuotaUsage_Response(nullptr) {}
  ~CCloud_ClientGetAppQuotaUsage_Response() override;
  explicit constexpr CCloud_ClientGetAppQuotaUsage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientGetAppQuotaUsage_Response(const CCloud_ClientGetAppQuotaUsage_Response& from);
  CCloud_ClientGetAppQuotaUsage_Response(CCloud_ClientGetAppQuotaUsage_Response&& from) noexcept
    : CCloud_ClientGetAppQuotaUsage_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientGetAppQuotaUsage_Response& operator=(const CCloud_ClientGetAppQuotaUsage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientGetAppQuotaUsage_Response& operator=(CCloud_ClientGetAppQuotaUsage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientGetAppQuotaUsage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientGetAppQuotaUsage_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientGetAppQuotaUsage_Response*>(
               &_CCloud_ClientGetAppQuotaUsage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CCloud_ClientGetAppQuotaUsage_Response& a, CCloud_ClientGetAppQuotaUsage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientGetAppQuotaUsage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientGetAppQuotaUsage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientGetAppQuotaUsage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientGetAppQuotaUsage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientGetAppQuotaUsage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientGetAppQuotaUsage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientGetAppQuotaUsage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientGetAppQuotaUsage_Response";
  }
  protected:
  explicit CCloud_ClientGetAppQuotaUsage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistingBytesFieldNumber = 2,
    kExistingFilesFieldNumber = 1,
    kMaxNumFilesFieldNumber = 3,
    kMaxNumBytesFieldNumber = 4,
  };
  // optional uint64 existing_bytes = 2;
  bool has_existing_bytes() const;
  private:
  bool _internal_has_existing_bytes() const;
  public:
  void clear_existing_bytes();
  uint64_t existing_bytes() const;
  void set_existing_bytes(uint64_t value);
  private:
  uint64_t _internal_existing_bytes() const;
  void _internal_set_existing_bytes(uint64_t value);
  public:

  // optional uint32 existing_files = 1;
  bool has_existing_files() const;
  private:
  bool _internal_has_existing_files() const;
  public:
  void clear_existing_files();
  uint32_t existing_files() const;
  void set_existing_files(uint32_t value);
  private:
  uint32_t _internal_existing_files() const;
  void _internal_set_existing_files(uint32_t value);
  public:

  // optional uint32 max_num_files = 3;
  bool has_max_num_files() const;
  private:
  bool _internal_has_max_num_files() const;
  public:
  void clear_max_num_files();
  uint32_t max_num_files() const;
  void set_max_num_files(uint32_t value);
  private:
  uint32_t _internal_max_num_files() const;
  void _internal_set_max_num_files(uint32_t value);
  public:

  // optional uint64 max_num_bytes = 4;
  bool has_max_num_bytes() const;
  private:
  bool _internal_has_max_num_bytes() const;
  public:
  void clear_max_num_bytes();
  uint64_t max_num_bytes() const;
  void set_max_num_bytes(uint64_t value);
  private:
  uint64_t _internal_max_num_bytes() const;
  void _internal_set_max_num_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientGetAppQuotaUsage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t existing_bytes_;
  uint32_t existing_files_;
  uint32_t max_num_files_;
  uint64_t max_num_bytes_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_AppCloudStateChange_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_AppCloudStateChange_Notification) */ {
 public:
  inline CCloud_AppCloudStateChange_Notification() : CCloud_AppCloudStateChange_Notification(nullptr) {}
  ~CCloud_AppCloudStateChange_Notification() override;
  explicit constexpr CCloud_AppCloudStateChange_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_AppCloudStateChange_Notification(const CCloud_AppCloudStateChange_Notification& from);
  CCloud_AppCloudStateChange_Notification(CCloud_AppCloudStateChange_Notification&& from) noexcept
    : CCloud_AppCloudStateChange_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_AppCloudStateChange_Notification& operator=(const CCloud_AppCloudStateChange_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_AppCloudStateChange_Notification& operator=(CCloud_AppCloudStateChange_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_AppCloudStateChange_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_AppCloudStateChange_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_AppCloudStateChange_Notification*>(
               &_CCloud_AppCloudStateChange_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CCloud_AppCloudStateChange_Notification& a, CCloud_AppCloudStateChange_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_AppCloudStateChange_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_AppCloudStateChange_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_AppCloudStateChange_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_AppCloudStateChange_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_AppCloudStateChange_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_AppCloudStateChange_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_AppCloudStateChange_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_AppCloudStateChange_Notification";
  }
  protected:
  explicit CCloud_AppCloudStateChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppChangeNumberFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 app_change_number = 2 [(.description) = "New App Change Number"];
  bool has_app_change_number() const;
  private:
  bool _internal_has_app_change_number() const;
  public:
  void clear_app_change_number();
  uint64_t app_change_number() const;
  void set_app_change_number(uint64_t value);
  private:
  uint64_t _internal_app_change_number() const;
  void _internal_set_app_change_number(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App which has had a change in cloud state"];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_AppCloudStateChange_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t app_change_number_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCloud_ClientLogUploadRequest_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_ClientLogUploadRequest_Notification) */ {
 public:
  inline CCloud_ClientLogUploadRequest_Notification() : CCloud_ClientLogUploadRequest_Notification(nullptr) {}
  ~CCloud_ClientLogUploadRequest_Notification() override;
  explicit constexpr CCloud_ClientLogUploadRequest_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_ClientLogUploadRequest_Notification(const CCloud_ClientLogUploadRequest_Notification& from);
  CCloud_ClientLogUploadRequest_Notification(CCloud_ClientLogUploadRequest_Notification&& from) noexcept
    : CCloud_ClientLogUploadRequest_Notification() {
    *this = ::std::move(from);
  }

  inline CCloud_ClientLogUploadRequest_Notification& operator=(const CCloud_ClientLogUploadRequest_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_ClientLogUploadRequest_Notification& operator=(CCloud_ClientLogUploadRequest_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_ClientLogUploadRequest_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_ClientLogUploadRequest_Notification* internal_default_instance() {
    return reinterpret_cast<const CCloud_ClientLogUploadRequest_Notification*>(
               &_CCloud_ClientLogUploadRequest_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CCloud_ClientLogUploadRequest_Notification& a, CCloud_ClientLogUploadRequest_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_ClientLogUploadRequest_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_ClientLogUploadRequest_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_ClientLogUploadRequest_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_ClientLogUploadRequest_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_ClientLogUploadRequest_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_ClientLogUploadRequest_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_ClientLogUploadRequest_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_ClientLogUploadRequest_Notification";
  }
  protected:
  explicit CCloud_ClientLogUploadRequest_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // optional uint64 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_ClientLogUploadRequest_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t request_id_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamclient_2eproto;
};
// ===================================================================

class Cloud_Stub;

class Cloud : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Cloud() {};
 public:
  virtual ~Cloud();

  typedef Cloud_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ClientLogUploadCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadCheck_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientLogUploadComplete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadComplete_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUploadServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetUploadServerInfo_Request* request,
                       ::CCloud_GetUploadServerInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void BeginHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginHTTPUpload_Request* request,
                       ::CCloud_BeginHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CommitHTTPUpload_Request* request,
                       ::CCloud_CommitHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void BeginUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginUGCUpload_Request* request,
                       ::CCloud_BeginUGCUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CommitUGCUpload_Request* request,
                       ::CCloud_CommitUGCUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFileDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetFileDetails_Request* request,
                       ::CCloud_GetFileDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_EnumerateUserFiles_Request* request,
                       ::CCloud_EnumerateUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_Delete_Request* request,
                       ::CCloud_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetClientEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetClientEncryptionKey_Request* request,
                       ::CCloud_GetClientEncryptionKey_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CDNReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CDNReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ExternalStorageTransferReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ExternalStorageTransferReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BeginAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginAppUploadBatch_Request* request,
                       ::CCloud_BeginAppUploadBatch_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CompleteAppUploadBatch_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteAppUploadBatchBlocking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CompleteAppUploadBatch_Request* request,
                       ::CCloud_CompleteAppUploadBatch_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientBeginFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientBeginFileUpload_Request* request,
                       ::CCloud_ClientBeginFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientCommitFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientCommitFileUpload_Request* request,
                       ::CCloud_ClientCommitFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientFileDownload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientFileDownload_Request* request,
                       ::CCloud_ClientFileDownload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientDeleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientDeleteFile_Request* request,
                       ::CCloud_ClientDeleteFile_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientConflictResolution(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientConflictResolution_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void EnumerateUserApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_EnumerateUserApps_Request* request,
                       ::CCloud_EnumerateUserApps_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAppFileChangelist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetAppFileChangelist_Request* request,
                       ::CCloud_GetAppFileChangelist_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SuspendAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppSessionSuspend_Request* request,
                       ::CCloud_AppSessionSuspend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ResumeAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppSessionResume_Request* request,
                       ::CCloud_AppSessionResume_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SignalAppLaunchIntent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppLaunchIntent_Request* request,
                       ::CCloud_AppLaunchIntent_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SignalAppExitSyncDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppExitSyncDone_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetAppQuotaUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientGetAppQuotaUsage_Request* request,
                       ::CCloud_ClientGetAppQuotaUsage_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Cloud);
};

class Cloud_Stub : public Cloud {
 public:
  Cloud_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Cloud_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Cloud_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Cloud ------------------------------------------

  void ClientLogUploadCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadCheck_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientLogUploadComplete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadComplete_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUploadServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetUploadServerInfo_Request* request,
                       ::CCloud_GetUploadServerInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void BeginHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginHTTPUpload_Request* request,
                       ::CCloud_BeginHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CommitHTTPUpload_Request* request,
                       ::CCloud_CommitHTTPUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void BeginUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginUGCUpload_Request* request,
                       ::CCloud_BeginUGCUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CommitUGCUpload_Request* request,
                       ::CCloud_CommitUGCUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFileDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetFileDetails_Request* request,
                       ::CCloud_GetFileDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void EnumerateUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_EnumerateUserFiles_Request* request,
                       ::CCloud_EnumerateUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_Delete_Request* request,
                       ::CCloud_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  void GetClientEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetClientEncryptionKey_Request* request,
                       ::CCloud_GetClientEncryptionKey_Response* response,
                       ::google::protobuf::Closure* done);
  void CDNReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CDNReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ExternalStorageTransferReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ExternalStorageTransferReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void BeginAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_BeginAppUploadBatch_Request* request,
                       ::CCloud_BeginAppUploadBatch_Response* response,
                       ::google::protobuf::Closure* done);
  void CompleteAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CompleteAppUploadBatch_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void CompleteAppUploadBatchBlocking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_CompleteAppUploadBatch_Request* request,
                       ::CCloud_CompleteAppUploadBatch_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientBeginFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientBeginFileUpload_Request* request,
                       ::CCloud_ClientBeginFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientCommitFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientCommitFileUpload_Request* request,
                       ::CCloud_ClientCommitFileUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientFileDownload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientFileDownload_Request* request,
                       ::CCloud_ClientFileDownload_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientDeleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientDeleteFile_Request* request,
                       ::CCloud_ClientDeleteFile_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientConflictResolution(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientConflictResolution_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void EnumerateUserApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_EnumerateUserApps_Request* request,
                       ::CCloud_EnumerateUserApps_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAppFileChangelist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_GetAppFileChangelist_Request* request,
                       ::CCloud_GetAppFileChangelist_Response* response,
                       ::google::protobuf::Closure* done);
  void SuspendAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppSessionSuspend_Request* request,
                       ::CCloud_AppSessionSuspend_Response* response,
                       ::google::protobuf::Closure* done);
  void ResumeAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppSessionResume_Request* request,
                       ::CCloud_AppSessionResume_Response* response,
                       ::google::protobuf::Closure* done);
  void SignalAppLaunchIntent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppLaunchIntent_Request* request,
                       ::CCloud_AppLaunchIntent_Response* response,
                       ::google::protobuf::Closure* done);
  void SignalAppExitSyncDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppExitSyncDone_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientGetAppQuotaUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientGetAppQuotaUsage_Request* request,
                       ::CCloud_ClientGetAppQuotaUsage_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Cloud_Stub);
};


// -------------------------------------------------------------------

class CloudClient_Stub;

class CloudClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CloudClient() {};
 public:
  virtual ~CloudClient();

  typedef CloudClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyAppStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppCloudStateChange_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientLogUploadRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadRequest_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CloudClient);
};

class CloudClient_Stub : public CloudClient {
 public:
  CloudClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CloudClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CloudClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CloudClient ------------------------------------------

  void NotifyAppStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_AppCloudStateChange_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientLogUploadRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCloud_ClientLogUploadRequest_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CloudClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCloud_ClientLogUploadCheck_Notification

// optional uint64 client_id = 1;
inline bool CCloud_ClientLogUploadCheck_Notification::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientLogUploadCheck_Notification::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_ClientLogUploadCheck_Notification::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_ClientLogUploadCheck_Notification::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_ClientLogUploadCheck_Notification::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientLogUploadCheck_Notification.client_id)
  return _internal_client_id();
}
inline void CCloud_ClientLogUploadCheck_Notification::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void CCloud_ClientLogUploadCheck_Notification::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientLogUploadCheck_Notification.client_id)
}

// -------------------------------------------------------------------

// CCloud_ClientLogUploadComplete_Notification

// optional uint64 client_id = 1;
inline bool CCloud_ClientLogUploadComplete_Notification::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientLogUploadComplete_Notification::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_ClientLogUploadComplete_Notification::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_ClientLogUploadComplete_Notification::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_ClientLogUploadComplete_Notification::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientLogUploadComplete_Notification.client_id)
  return _internal_client_id();
}
inline void CCloud_ClientLogUploadComplete_Notification::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void CCloud_ClientLogUploadComplete_Notification::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientLogUploadComplete_Notification.client_id)
}

// optional uint64 request_id = 2;
inline bool CCloud_ClientLogUploadComplete_Notification::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientLogUploadComplete_Notification::has_request_id() const {
  return _internal_has_request_id();
}
inline void CCloud_ClientLogUploadComplete_Notification::clear_request_id() {
  request_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_ClientLogUploadComplete_Notification::_internal_request_id() const {
  return request_id_;
}
inline uint64_t CCloud_ClientLogUploadComplete_Notification::request_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientLogUploadComplete_Notification.request_id)
  return _internal_request_id();
}
inline void CCloud_ClientLogUploadComplete_Notification::_internal_set_request_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
}
inline void CCloud_ClientLogUploadComplete_Notification::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientLogUploadComplete_Notification.request_id)
}

// -------------------------------------------------------------------

// CCloud_GetUploadServerInfo_Request

// optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
inline bool CCloud_GetUploadServerInfo_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetUploadServerInfo_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_GetUploadServerInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_GetUploadServerInfo_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_GetUploadServerInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetUploadServerInfo_Request.appid)
  return _internal_appid();
}
inline void CCloud_GetUploadServerInfo_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_GetUploadServerInfo_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetUploadServerInfo_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_GetUploadServerInfo_Response

// optional string server_url = 1;
inline bool CCloud_GetUploadServerInfo_Response::_internal_has_server_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetUploadServerInfo_Response::has_server_url() const {
  return _internal_has_server_url();
}
inline void CCloud_GetUploadServerInfo_Response::clear_server_url() {
  server_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_GetUploadServerInfo_Response::server_url() const {
  // @@protoc_insertion_point(field_get:CCloud_GetUploadServerInfo_Response.server_url)
  return _internal_server_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_GetUploadServerInfo_Response::set_server_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_GetUploadServerInfo_Response.server_url)
}
inline std::string* CCloud_GetUploadServerInfo_Response::mutable_server_url() {
  std::string* _s = _internal_mutable_server_url();
  // @@protoc_insertion_point(field_mutable:CCloud_GetUploadServerInfo_Response.server_url)
  return _s;
}
inline const std::string& CCloud_GetUploadServerInfo_Response::_internal_server_url() const {
  return server_url_.Get();
}
inline void CCloud_GetUploadServerInfo_Response::_internal_set_server_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_GetUploadServerInfo_Response::_internal_mutable_server_url() {
  _has_bits_[0] |= 0x00000001u;
  return server_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_GetUploadServerInfo_Response::release_server_url() {
  // @@protoc_insertion_point(field_release:CCloud_GetUploadServerInfo_Response.server_url)
  if (!_internal_has_server_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = server_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_GetUploadServerInfo_Response::set_allocated_server_url(std::string* server_url) {
  if (server_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_GetUploadServerInfo_Response.server_url)
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Request

// optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_BeginHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_BeginHTTPUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_BeginHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CCloud_BeginHTTPUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.description) = "Original file size in bytes."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_BeginHTTPUpload_Request::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CCloud_BeginHTTPUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.file_size)
  return _internal_file_size();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CCloud_BeginHTTPUpload_Request::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.file_size)
}

// optional string filename = 3 [(.description) = "Name of the file to store in the cloud."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_BeginHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.filename)
}
inline std::string* CCloud_BeginHTTPUpload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Request.filename)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Request.filename)
}

// optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_BeginHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Request::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.file_sha)
}
inline std::string* CCloud_BeginHTTPUpload_Request::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Request.file_sha)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Request::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000002u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Request.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Request::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Request.file_sha)
}

// optional bool is_public = 5 [(.description) = "True if the file should be marked public on the UFS, false otherwise."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_is_public() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_is_public() const {
  return _internal_has_is_public();
}
inline void CCloud_BeginHTTPUpload_Request::clear_is_public() {
  is_public_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCloud_BeginHTTPUpload_Request::_internal_is_public() const {
  return is_public_;
}
inline bool CCloud_BeginHTTPUpload_Request::is_public() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.is_public)
  return _internal_is_public();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_is_public(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_public_ = value;
}
inline void CCloud_BeginHTTPUpload_Request::set_is_public(bool value) {
  _internal_set_is_public(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.is_public)
}

// repeated string platforms_to_sync = 6 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
inline int CCloud_BeginHTTPUpload_Request::_internal_platforms_to_sync_size() const {
  return platforms_to_sync_.size();
}
inline int CCloud_BeginHTTPUpload_Request::platforms_to_sync_size() const {
  return _internal_platforms_to_sync_size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_.Clear();
}
inline std::string* CCloud_BeginHTTPUpload_Request::add_platforms_to_sync() {
  std::string* _s = _internal_add_platforms_to_sync();
  // @@protoc_insertion_point(field_add_mutable:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::_internal_platforms_to_sync(int index) const {
  return platforms_to_sync_.Get(index);
}
inline const std::string& CCloud_BeginHTTPUpload_Request::platforms_to_sync(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return _internal_platforms_to_sync(index);
}
inline std::string* CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const std::string& value) {
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, std::string&& value) {
  platforms_to_sync_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value, size_t size) {
  platforms_to_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline std::string* CCloud_BeginHTTPUpload_Request::_internal_add_platforms_to_sync() {
  return platforms_to_sync_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const std::string& value) {
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(std::string&& value) {
  platforms_to_sync_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value, size_t size) {
  platforms_to_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_BeginHTTPUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return &platforms_to_sync_;
}

// repeated string request_headers_names = 7 [(.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
inline int CCloud_BeginHTTPUpload_Request::_internal_request_headers_names_size() const {
  return request_headers_names_.size();
}
inline int CCloud_BeginHTTPUpload_Request::request_headers_names_size() const {
  return _internal_request_headers_names_size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_request_headers_names() {
  request_headers_names_.Clear();
}
inline std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_names() {
  std::string* _s = _internal_add_request_headers_names();
  // @@protoc_insertion_point(field_add_mutable:CCloud_BeginHTTPUpload_Request.request_headers_names)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::_internal_request_headers_names(int index) const {
  return request_headers_names_.Get(index);
}
inline const std::string& CCloud_BeginHTTPUpload_Request::request_headers_names(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.request_headers_names)
  return _internal_request_headers_names(index);
}
inline std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_names(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const std::string& value) {
  request_headers_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, std::string&& value) {
  request_headers_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value, size_t size) {
  request_headers_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline std::string* CCloud_BeginHTTPUpload_Request::_internal_add_request_headers_names() {
  return request_headers_names_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const std::string& value) {
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(std::string&& value) {
  request_headers_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value, size_t size) {
  request_headers_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_BeginHTTPUpload_Request.request_headers_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_names() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_names() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginHTTPUpload_Request.request_headers_names)
  return &request_headers_names_;
}

// repeated string request_headers_values = 8 [(.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
inline int CCloud_BeginHTTPUpload_Request::_internal_request_headers_values_size() const {
  return request_headers_values_.size();
}
inline int CCloud_BeginHTTPUpload_Request::request_headers_values_size() const {
  return _internal_request_headers_values_size();
}
inline void CCloud_BeginHTTPUpload_Request::clear_request_headers_values() {
  request_headers_values_.Clear();
}
inline std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_values() {
  std::string* _s = _internal_add_request_headers_values();
  // @@protoc_insertion_point(field_add_mutable:CCloud_BeginHTTPUpload_Request.request_headers_values)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Request::_internal_request_headers_values(int index) const {
  return request_headers_values_.Get(index);
}
inline const std::string& CCloud_BeginHTTPUpload_Request::request_headers_values(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.request_headers_values)
  return _internal_request_headers_values(index);
}
inline std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_values(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Mutable(index);
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const std::string& value) {
  request_headers_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, std::string&& value) {
  request_headers_values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value, size_t size) {
  request_headers_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline std::string* CCloud_BeginHTTPUpload_Request::_internal_add_request_headers_values() {
  return request_headers_values_.Add();
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const std::string& value) {
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(std::string&& value) {
  request_headers_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value, size_t size) {
  request_headers_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_BeginHTTPUpload_Request.request_headers_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_values() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_values() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginHTTPUpload_Request.request_headers_values)
  return &request_headers_values_;
}

// optional uint64 upload_batch_id = 9 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
inline bool CCloud_BeginHTTPUpload_Request::_internal_has_upload_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Request::has_upload_batch_id() const {
  return _internal_has_upload_batch_id();
}
inline void CCloud_BeginHTTPUpload_Request::clear_upload_batch_id() {
  upload_batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CCloud_BeginHTTPUpload_Request::_internal_upload_batch_id() const {
  return upload_batch_id_;
}
inline uint64_t CCloud_BeginHTTPUpload_Request::upload_batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Request.upload_batch_id)
  return _internal_upload_batch_id();
}
inline void CCloud_BeginHTTPUpload_Request::_internal_set_upload_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  upload_batch_id_ = value;
}
inline void CCloud_BeginHTTPUpload_Request::set_upload_batch_id(uint64_t value) {
  _internal_set_upload_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Request.upload_batch_id)
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Response_HTTPHeaders

// optional string name = 1;
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CCloud_BeginHTTPUpload_Response

// optional fixed64 ugcid = 1 [(.description) = "UGC ID of the uploaded file."];
inline bool CCloud_BeginHTTPUpload_Response::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_BeginHTTPUpload_Response::clear_ugcid() {
  ugcid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_BeginHTTPUpload_Response::_internal_ugcid() const {
  return ugcid_;
}
inline uint64_t CCloud_BeginHTTPUpload_Response::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.ugcid)
  return _internal_ugcid();
}
inline void CCloud_BeginHTTPUpload_Response::_internal_set_ugcid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
}
inline void CCloud_BeginHTTPUpload_Response::set_ugcid(uint64_t value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.ugcid)
}

// optional fixed32 timestamp = 2 [(.description) = "Server timestamp of file."];
inline bool CCloud_BeginHTTPUpload_Response::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CCloud_BeginHTTPUpload_Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_BeginHTTPUpload_Response::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CCloud_BeginHTTPUpload_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.timestamp)
  return _internal_timestamp();
}
inline void CCloud_BeginHTTPUpload_Response::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void CCloud_BeginHTTPUpload_Response::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.timestamp)
}

// optional string url_host = 3 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool CCloud_BeginHTTPUpload_Response::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response::has_url_host() const {
  return _internal_has_url_host();
}
inline void CCloud_BeginHTTPUpload_Response::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginHTTPUpload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.url_host)
  return _internal_url_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Response::set_url_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.url_host)
}
inline std::string* CCloud_BeginHTTPUpload_Response::mutable_url_host() {
  std::string* _s = _internal_mutable_url_host();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Response.url_host)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Response::_internal_url_host() const {
  return url_host_.Get();
}
inline void CCloud_BeginHTTPUpload_Response::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Response.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Response::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Response.url_host)
}

// optional string url_path = 4 [(.description) = "Relative path on server to which file should be uploaded."];
inline bool CCloud_BeginHTTPUpload_Response::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response::has_url_path() const {
  return _internal_has_url_path();
}
inline void CCloud_BeginHTTPUpload_Response::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginHTTPUpload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginHTTPUpload_Response::set_url_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.url_path)
}
inline std::string* CCloud_BeginHTTPUpload_Response::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Response.url_path)
  return _s;
}
inline const std::string& CCloud_BeginHTTPUpload_Response::_internal_url_path() const {
  return url_path_.Get();
}
inline void CCloud_BeginHTTPUpload_Response::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginHTTPUpload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:CCloud_BeginHTTPUpload_Response.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginHTTPUpload_Response::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginHTTPUpload_Response.url_path)
}

// optional bool use_https = 5 [(.description) = "If true, use https, otherwise use http."];
inline bool CCloud_BeginHTTPUpload_Response::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_BeginHTTPUpload_Response::has_use_https() const {
  return _internal_has_use_https();
}
inline void CCloud_BeginHTTPUpload_Response::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCloud_BeginHTTPUpload_Response::_internal_use_https() const {
  return use_https_;
}
inline bool CCloud_BeginHTTPUpload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.use_https)
  return _internal_use_https();
}
inline void CCloud_BeginHTTPUpload_Response::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_https_ = value;
}
inline void CCloud_BeginHTTPUpload_Response::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginHTTPUpload_Response.use_https)
}

// repeated .CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int CCloud_BeginHTTPUpload_Response::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int CCloud_BeginHTTPUpload_Response::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void CCloud_BeginHTTPUpload_Response::clear_request_headers() {
  request_headers_.Clear();
}
inline ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >*
CCloud_BeginHTTPUpload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginHTTPUpload_Response.request_headers)
  return &request_headers_;
}
inline const ::CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginHTTPUpload_Response.request_headers)
  return _internal_request_headers(index);
}
inline ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::add_request_headers() {
  ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* _add = _internal_add_request_headers();
  // @@protoc_insertion_point(field_add:CCloud_BeginHTTPUpload_Response.request_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >&
CCloud_BeginHTTPUpload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_;
}

// -------------------------------------------------------------------

// CCloud_CommitHTTPUpload_Request

// optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
inline bool CCloud_CommitHTTPUpload_Request::_internal_has_transfer_succeeded() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_CommitHTTPUpload_Request::has_transfer_succeeded() const {
  return _internal_has_transfer_succeeded();
}
inline void CCloud_CommitHTTPUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_CommitHTTPUpload_Request::_internal_transfer_succeeded() const {
  return transfer_succeeded_;
}
inline bool CCloud_CommitHTTPUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitHTTPUpload_Request.transfer_succeeded)
  return _internal_transfer_succeeded();
}
inline void CCloud_CommitHTTPUpload_Request::_internal_set_transfer_succeeded(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_succeeded_ = value;
}
inline void CCloud_CommitHTTPUpload_Request::set_transfer_succeeded(bool value) {
  _internal_set_transfer_succeeded(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitHTTPUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
inline bool CCloud_CommitHTTPUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_CommitHTTPUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_CommitHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_CommitHTTPUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_CommitHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitHTTPUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_CommitHTTPUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_CommitHTTPUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitHTTPUpload_Request.appid)
}

// optional string file_sha = 3 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
inline bool CCloud_CommitHTTPUpload_Request::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CommitHTTPUpload_Request::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_CommitHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_CommitHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitHTTPUpload_Request.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_CommitHTTPUpload_Request::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_CommitHTTPUpload_Request.file_sha)
}
inline std::string* CCloud_CommitHTTPUpload_Request::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_CommitHTTPUpload_Request.file_sha)
  return _s;
}
inline const std::string& CCloud_CommitHTTPUpload_Request::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_CommitHTTPUpload_Request::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_CommitHTTPUpload_Request::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_CommitHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_CommitHTTPUpload_Request.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_CommitHTTPUpload_Request::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_CommitHTTPUpload_Request.file_sha)
}

// optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
inline bool CCloud_CommitHTTPUpload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_CommitHTTPUpload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_CommitHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_CommitHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitHTTPUpload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_CommitHTTPUpload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_CommitHTTPUpload_Request.filename)
}
inline std::string* CCloud_CommitHTTPUpload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_CommitHTTPUpload_Request.filename)
  return _s;
}
inline const std::string& CCloud_CommitHTTPUpload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_CommitHTTPUpload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_CommitHTTPUpload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_CommitHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_CommitHTTPUpload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_CommitHTTPUpload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_CommitHTTPUpload_Request.filename)
}

// -------------------------------------------------------------------

// CCloud_CommitHTTPUpload_Response

// optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
inline bool CCloud_CommitHTTPUpload_Response::_internal_has_file_committed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CommitHTTPUpload_Response::has_file_committed() const {
  return _internal_has_file_committed();
}
inline void CCloud_CommitHTTPUpload_Response::clear_file_committed() {
  file_committed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_CommitHTTPUpload_Response::_internal_file_committed() const {
  return file_committed_;
}
inline bool CCloud_CommitHTTPUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitHTTPUpload_Response.file_committed)
  return _internal_file_committed();
}
inline void CCloud_CommitHTTPUpload_Response::_internal_set_file_committed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  file_committed_ = value;
}
inline void CCloud_CommitHTTPUpload_Response::set_file_committed(bool value) {
  _internal_set_file_committed(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitHTTPUpload_Response.file_committed)
}

// -------------------------------------------------------------------

// CCloud_BeginUGCUpload_Request

// optional uint32 appid = 1 [(.description) = "App ID this UGC belongs to."];
inline bool CCloud_BeginUGCUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_BeginUGCUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_BeginUGCUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_BeginUGCUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_BeginUGCUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_BeginUGCUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.description) = "File size in bytes."];
inline bool CCloud_BeginUGCUpload_Request::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Request::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_BeginUGCUpload_Request::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCloud_BeginUGCUpload_Request::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CCloud_BeginUGCUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Request.file_size)
  return _internal_file_size();
}
inline void CCloud_BeginUGCUpload_Request::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  file_size_ = value;
}
inline void CCloud_BeginUGCUpload_Request::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Request.file_size)
}

// optional string filename = 3 [(.description) = "Name of the file."];
inline bool CCloud_BeginUGCUpload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_BeginUGCUpload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginUGCUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Request.filename)
}
inline std::string* CCloud_BeginUGCUpload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Request.filename)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_BeginUGCUpload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Request.filename)
}

// optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
inline bool CCloud_BeginUGCUpload_Request::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Request::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_BeginUGCUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginUGCUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Request.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Request::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Request.file_sha)
}
inline std::string* CCloud_BeginUGCUpload_Request::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Request.file_sha)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Request::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_BeginUGCUpload_Request::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000002u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Request.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Request::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Request.file_sha)
}

// optional string content_type = 5 [(.description) = "MIME content type of the file"];
inline bool CCloud_BeginUGCUpload_Request::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Request::has_content_type() const {
  return _internal_has_content_type();
}
inline void CCloud_BeginUGCUpload_Request::clear_content_type() {
  content_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCloud_BeginUGCUpload_Request::content_type() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Request.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Request::set_content_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Request.content_type)
}
inline std::string* CCloud_BeginUGCUpload_Request::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Request.content_type)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Request::_internal_content_type() const {
  return content_type_.Get();
}
inline void CCloud_BeginUGCUpload_Request::_internal_set_content_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::_internal_mutable_content_type() {
  _has_bits_[0] |= 0x00000004u;
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Request::release_content_type() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Request.content_type)
  if (!_internal_has_content_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = content_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Request::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Request.content_type)
}

// -------------------------------------------------------------------

// CCloud_BeginUGCUpload_Response_HTTPHeaders

// optional string name = 1;
inline bool CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginUGCUpload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.HTTPHeaders.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Response_HTTPHeaders::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.HTTPHeaders.name)
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Response.HTTPHeaders.name)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Response.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Response.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginUGCUpload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.HTTPHeaders.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Response_HTTPHeaders::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.HTTPHeaders.value)
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Response.HTTPHeaders.value)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Response.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Response.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CCloud_BeginUGCUpload_Response

// optional .EPublishedFileStorageSystem storage_system = 1 [default = k_EPublishedFileStorageSystemInvalid, (.description) = "UGC Storage system chosen for this file"];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_storage_system() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_storage_system() const {
  return _internal_has_storage_system();
}
inline void CCloud_BeginUGCUpload_Response::clear_storage_system() {
  storage_system_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EPublishedFileStorageSystem CCloud_BeginUGCUpload_Response::_internal_storage_system() const {
  return static_cast< ::EPublishedFileStorageSystem >(storage_system_);
}
inline ::EPublishedFileStorageSystem CCloud_BeginUGCUpload_Response::storage_system() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.storage_system)
  return _internal_storage_system();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_storage_system(::EPublishedFileStorageSystem value) {
  assert(::EPublishedFileStorageSystem_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  storage_system_ = value;
}
inline void CCloud_BeginUGCUpload_Response::set_storage_system(::EPublishedFileStorageSystem value) {
  _internal_set_storage_system(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.storage_system)
}

// optional fixed64 ugcid = 2 [(.description) = "UGC ID of the uploaded file."];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_BeginUGCUpload_Response::clear_ugcid() {
  ugcid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_BeginUGCUpload_Response::_internal_ugcid() const {
  return ugcid_;
}
inline uint64_t CCloud_BeginUGCUpload_Response::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.ugcid)
  return _internal_ugcid();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_ugcid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
}
inline void CCloud_BeginUGCUpload_Response::set_ugcid(uint64_t value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.ugcid)
}

// optional fixed32 timestamp = 3 [(.description) = "Server timestamp of file."];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CCloud_BeginUGCUpload_Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCloud_BeginUGCUpload_Response::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CCloud_BeginUGCUpload_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.timestamp)
  return _internal_timestamp();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void CCloud_BeginUGCUpload_Response::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.timestamp)
}

// optional string url_host = 4 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_url_host() const {
  return _internal_has_url_host();
}
inline void CCloud_BeginUGCUpload_Response::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginUGCUpload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.url_host)
  return _internal_url_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Response::set_url_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.url_host)
}
inline std::string* CCloud_BeginUGCUpload_Response::mutable_url_host() {
  std::string* _s = _internal_mutable_url_host();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Response.url_host)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Response::_internal_url_host() const {
  return url_host_.Get();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Response.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Response::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Response.url_host)
}

// optional string url_path = 5 [(.description) = "Relative path on server to which file should be uploaded."];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_url_path() const {
  return _internal_has_url_path();
}
inline void CCloud_BeginUGCUpload_Response::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_BeginUGCUpload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginUGCUpload_Response::set_url_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.url_path)
}
inline std::string* CCloud_BeginUGCUpload_Response::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Response.url_path)
  return _s;
}
inline const std::string& CCloud_BeginUGCUpload_Response::_internal_url_path() const {
  return url_path_.Get();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginUGCUpload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:CCloud_BeginUGCUpload_Response.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginUGCUpload_Response::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginUGCUpload_Response.url_path)
}

// optional bool use_https = 6 [(.description) = "If true, use https, otherwise use http."];
inline bool CCloud_BeginUGCUpload_Response::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_BeginUGCUpload_Response::has_use_https() const {
  return _internal_has_use_https();
}
inline void CCloud_BeginUGCUpload_Response::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCloud_BeginUGCUpload_Response::_internal_use_https() const {
  return use_https_;
}
inline bool CCloud_BeginUGCUpload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.use_https)
  return _internal_use_https();
}
inline void CCloud_BeginUGCUpload_Response::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_https_ = value;
}
inline void CCloud_BeginUGCUpload_Response::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginUGCUpload_Response.use_https)
}

// repeated .CCloud_BeginUGCUpload_Response.HTTPHeaders request_headers = 7 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int CCloud_BeginUGCUpload_Response::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int CCloud_BeginUGCUpload_Response::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void CCloud_BeginUGCUpload_Response::clear_request_headers() {
  request_headers_.Clear();
}
inline ::CCloud_BeginUGCUpload_Response_HTTPHeaders* CCloud_BeginUGCUpload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginUGCUpload_Response.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >*
CCloud_BeginUGCUpload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginUGCUpload_Response.request_headers)
  return &request_headers_;
}
inline const ::CCloud_BeginUGCUpload_Response_HTTPHeaders& CCloud_BeginUGCUpload_Response::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::CCloud_BeginUGCUpload_Response_HTTPHeaders& CCloud_BeginUGCUpload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginUGCUpload_Response.request_headers)
  return _internal_request_headers(index);
}
inline ::CCloud_BeginUGCUpload_Response_HTTPHeaders* CCloud_BeginUGCUpload_Response::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::CCloud_BeginUGCUpload_Response_HTTPHeaders* CCloud_BeginUGCUpload_Response::add_request_headers() {
  ::CCloud_BeginUGCUpload_Response_HTTPHeaders* _add = _internal_add_request_headers();
  // @@protoc_insertion_point(field_add:CCloud_BeginUGCUpload_Response.request_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >&
CCloud_BeginUGCUpload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginUGCUpload_Response.request_headers)
  return request_headers_;
}

// -------------------------------------------------------------------

// CCloud_CommitUGCUpload_Request

// optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginUGCUpload), false if a failure occurred."];
inline bool CCloud_CommitUGCUpload_Request::_internal_has_transfer_succeeded() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CommitUGCUpload_Request::has_transfer_succeeded() const {
  return _internal_has_transfer_succeeded();
}
inline void CCloud_CommitUGCUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_CommitUGCUpload_Request::_internal_transfer_succeeded() const {
  return transfer_succeeded_;
}
inline bool CCloud_CommitUGCUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitUGCUpload_Request.transfer_succeeded)
  return _internal_transfer_succeeded();
}
inline void CCloud_CommitUGCUpload_Request::_internal_set_transfer_succeeded(bool value) {
  _has_bits_[0] |= 0x00000001u;
  transfer_succeeded_ = value;
}
inline void CCloud_CommitUGCUpload_Request::set_transfer_succeeded(bool value) {
  _internal_set_transfer_succeeded(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitUGCUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginUGCUpload."];
inline bool CCloud_CommitUGCUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_CommitUGCUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_CommitUGCUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_CommitUGCUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_CommitUGCUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitUGCUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_CommitUGCUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_CommitUGCUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitUGCUpload_Request.appid)
}

// optional fixed64 ugcid = 3 [(.description) = "UGC ID of the uploaded file."];
inline bool CCloud_CommitUGCUpload_Request::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_CommitUGCUpload_Request::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_CommitUGCUpload_Request::clear_ugcid() {
  ugcid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_CommitUGCUpload_Request::_internal_ugcid() const {
  return ugcid_;
}
inline uint64_t CCloud_CommitUGCUpload_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitUGCUpload_Request.ugcid)
  return _internal_ugcid();
}
inline void CCloud_CommitUGCUpload_Request::_internal_set_ugcid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
}
inline void CCloud_CommitUGCUpload_Request::set_ugcid(uint64_t value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitUGCUpload_Request.ugcid)
}

// -------------------------------------------------------------------

// CCloud_CommitUGCUpload_Response

// optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
inline bool CCloud_CommitUGCUpload_Response::_internal_has_file_committed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CommitUGCUpload_Response::has_file_committed() const {
  return _internal_has_file_committed();
}
inline void CCloud_CommitUGCUpload_Response::clear_file_committed() {
  file_committed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_CommitUGCUpload_Response::_internal_file_committed() const {
  return file_committed_;
}
inline bool CCloud_CommitUGCUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:CCloud_CommitUGCUpload_Response.file_committed)
  return _internal_file_committed();
}
inline void CCloud_CommitUGCUpload_Response::_internal_set_file_committed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  file_committed_ = value;
}
inline void CCloud_CommitUGCUpload_Response::set_file_committed(bool value) {
  _internal_set_file_committed(value);
  // @@protoc_insertion_point(field_set:CCloud_CommitUGCUpload_Response.file_committed)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Request

// optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
inline bool CCloud_GetFileDetails_Request::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetFileDetails_Request::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_GetFileDetails_Request::clear_ugcid() {
  ugcid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_GetFileDetails_Request::_internal_ugcid() const {
  return ugcid_;
}
inline uint64_t CCloud_GetFileDetails_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Request.ugcid)
  return _internal_ugcid();
}
inline void CCloud_GetFileDetails_Request::_internal_set_ugcid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ugcid_ = value;
}
inline void CCloud_GetFileDetails_Request::set_ugcid(uint64_t value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetFileDetails_Request.ugcid)
}

// optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
inline bool CCloud_GetFileDetails_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_GetFileDetails_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_GetFileDetails_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_GetFileDetails_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_GetFileDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Request.appid)
  return _internal_appid();
}
inline void CCloud_GetFileDetails_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_GetFileDetails_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetFileDetails_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_UserFile

// optional uint32 appid = 1;
inline bool CCloud_UserFile::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_UserFile::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCloud_UserFile::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_UserFile::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.appid)
  return _internal_appid();
}
inline void CCloud_UserFile::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CCloud_UserFile::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.appid)
}

// optional uint64 ugcid = 2;
inline bool CCloud_UserFile::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_UserFile::clear_ugcid() {
  ugcid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCloud_UserFile::_internal_ugcid() const {
  return ugcid_;
}
inline uint64_t CCloud_UserFile::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.ugcid)
  return _internal_ugcid();
}
inline void CCloud_UserFile::_internal_set_ugcid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  ugcid_ = value;
}
inline void CCloud_UserFile::set_ugcid(uint64_t value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.ugcid)
}

// optional string filename = 3;
inline bool CCloud_UserFile::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_UserFile::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_UserFile::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_UserFile::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_UserFile.filename)
}
inline std::string* CCloud_UserFile::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.filename)
  return _s;
}
inline const std::string& CCloud_UserFile::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_UserFile::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_UserFile.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_UserFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_UserFile.filename)
}

// optional uint64 timestamp = 4;
inline bool CCloud_UserFile::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CCloud_UserFile::clear_timestamp() {
  timestamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CCloud_UserFile::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t CCloud_UserFile::timestamp() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.timestamp)
  return _internal_timestamp();
}
inline void CCloud_UserFile::_internal_set_timestamp(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
}
inline void CCloud_UserFile::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.timestamp)
}

// optional uint32 file_size = 5;
inline bool CCloud_UserFile::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_UserFile::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CCloud_UserFile::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CCloud_UserFile::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.file_size)
  return _internal_file_size();
}
inline void CCloud_UserFile::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  file_size_ = value;
}
inline void CCloud_UserFile::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.file_size)
}

// optional string url = 6;
inline bool CCloud_UserFile::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_url() const {
  return _internal_has_url();
}
inline void CCloud_UserFile::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_UserFile::url() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_UserFile::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_UserFile.url)
}
inline std::string* CCloud_UserFile::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.url)
  return _s;
}
inline const std::string& CCloud_UserFile::_internal_url() const {
  return url_.Get();
}
inline void CCloud_UserFile::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::release_url() {
  // @@protoc_insertion_point(field_release:CCloud_UserFile.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_UserFile::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_UserFile.url)
}

// optional fixed64 steamid_creator = 7;
inline bool CCloud_UserFile::_internal_has_steamid_creator() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_steamid_creator() const {
  return _internal_has_steamid_creator();
}
inline void CCloud_UserFile::clear_steamid_creator() {
  steamid_creator_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CCloud_UserFile::_internal_steamid_creator() const {
  return steamid_creator_;
}
inline uint64_t CCloud_UserFile::steamid_creator() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.steamid_creator)
  return _internal_steamid_creator();
}
inline void CCloud_UserFile::_internal_set_steamid_creator(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  steamid_creator_ = value;
}
inline void CCloud_UserFile::set_steamid_creator(uint64_t value) {
  _internal_set_steamid_creator(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.steamid_creator)
}

// optional uint32 flags = 8;
inline bool CCloud_UserFile::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_flags() const {
  return _internal_has_flags();
}
inline void CCloud_UserFile::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CCloud_UserFile::_internal_flags() const {
  return flags_;
}
inline uint32_t CCloud_UserFile::flags() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.flags)
  return _internal_flags();
}
inline void CCloud_UserFile::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  flags_ = value;
}
inline void CCloud_UserFile::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.flags)
}

// repeated string platforms_to_sync = 9 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
inline int CCloud_UserFile::_internal_platforms_to_sync_size() const {
  return platforms_to_sync_.size();
}
inline int CCloud_UserFile::platforms_to_sync_size() const {
  return _internal_platforms_to_sync_size();
}
inline void CCloud_UserFile::clear_platforms_to_sync() {
  platforms_to_sync_.Clear();
}
inline std::string* CCloud_UserFile::add_platforms_to_sync() {
  std::string* _s = _internal_add_platforms_to_sync();
  // @@protoc_insertion_point(field_add_mutable:CCloud_UserFile.platforms_to_sync)
  return _s;
}
inline const std::string& CCloud_UserFile::_internal_platforms_to_sync(int index) const {
  return platforms_to_sync_.Get(index);
}
inline const std::string& CCloud_UserFile::platforms_to_sync(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.platforms_to_sync)
  return _internal_platforms_to_sync(index);
}
inline std::string* CCloud_UserFile::mutable_platforms_to_sync(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.platforms_to_sync)
  return platforms_to_sync_.Mutable(index);
}
inline void CCloud_UserFile::set_platforms_to_sync(int index, const std::string& value) {
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::set_platforms_to_sync(int index, std::string&& value) {
  platforms_to_sync_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::set_platforms_to_sync(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::set_platforms_to_sync(int index, const char* value, size_t size) {
  platforms_to_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_UserFile.platforms_to_sync)
}
inline std::string* CCloud_UserFile::_internal_add_platforms_to_sync() {
  return platforms_to_sync_.Add();
}
inline void CCloud_UserFile::add_platforms_to_sync(const std::string& value) {
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::add_platforms_to_sync(std::string&& value) {
  platforms_to_sync_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::add_platforms_to_sync(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_UserFile.platforms_to_sync)
}
inline void CCloud_UserFile::add_platforms_to_sync(const char* value, size_t size) {
  platforms_to_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_UserFile.platforms_to_sync)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_UserFile::platforms_to_sync() const {
  // @@protoc_insertion_point(field_list:CCloud_UserFile.platforms_to_sync)
  return platforms_to_sync_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_UserFile::mutable_platforms_to_sync() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_UserFile.platforms_to_sync)
  return &platforms_to_sync_;
}

// optional string file_sha = 10 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
inline bool CCloud_UserFile::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_UserFile::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCloud_UserFile::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_UserFile::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_UserFile.file_sha)
}
inline std::string* CCloud_UserFile::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.file_sha)
  return _s;
}
inline const std::string& CCloud_UserFile::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_UserFile::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000004u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_UserFile::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_UserFile.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_UserFile::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_UserFile.file_sha)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Response

// optional .CCloud_UserFile details = 1;
inline bool CCloud_GetFileDetails_Response::_internal_has_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || details_ != nullptr);
  return value;
}
inline bool CCloud_GetFileDetails_Response::has_details() const {
  return _internal_has_details();
}
inline void CCloud_GetFileDetails_Response::clear_details() {
  if (details_ != nullptr) details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CCloud_UserFile& CCloud_GetFileDetails_Response::_internal_details() const {
  const ::CCloud_UserFile* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CCloud_UserFile&>(
      ::_CCloud_UserFile_default_instance_);
}
inline const ::CCloud_UserFile& CCloud_GetFileDetails_Response::details() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Response.details)
  return _internal_details();
}
inline void CCloud_GetFileDetails_Response::unsafe_arena_set_allocated_details(
    ::CCloud_UserFile* details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCloud_GetFileDetails_Response.details)
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::release_details() {
  _has_bits_[0] &= ~0x00000001u;
  ::CCloud_UserFile* temp = details_;
  details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:CCloud_GetFileDetails_Response.details)
  _has_bits_[0] &= ~0x00000001u;
  ::CCloud_UserFile* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::_internal_mutable_details() {
  _has_bits_[0] |= 0x00000001u;
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CCloud_UserFile>(GetArenaForAllocation());
    details_ = p;
  }
  return details_;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::mutable_details() {
  ::CCloud_UserFile* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:CCloud_GetFileDetails_Response.details)
  return _msg;
}
inline void CCloud_GetFileDetails_Response::set_allocated_details(::CCloud_UserFile* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CCloud_UserFile>::GetOwningArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:CCloud_GetFileDetails_Response.details)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Request

// optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_EnumerateUserFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.appid)
  return _internal_appid();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.appid)
}

// optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_extended_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_extended_details() const {
  return _internal_has_extended_details();
}
inline void CCloud_EnumerateUserFiles_Request::clear_extended_details() {
  extended_details_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CCloud_EnumerateUserFiles_Request::_internal_extended_details() const {
  return extended_details_;
}
inline bool CCloud_EnumerateUserFiles_Request::extended_details() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.extended_details)
  return _internal_extended_details();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_extended_details(bool value) {
  _has_bits_[0] |= 0x00000002u;
  extended_details_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_extended_details(bool value) {
  _internal_set_extended_details(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.extended_details)
}

// optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_count() const {
  return _internal_has_count();
}
inline void CCloud_EnumerateUserFiles_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::_internal_count() const {
  return count_;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::count() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.count)
  return _internal_count();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.count)
}

// optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_start_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_start_index() const {
  return _internal_has_start_index();
}
inline void CCloud_EnumerateUserFiles_Request::clear_start_index() {
  start_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::_internal_start_index() const {
  return start_index_;
}
inline uint32_t CCloud_EnumerateUserFiles_Request::start_index() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.start_index)
  return _internal_start_index();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_start_index(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  start_index_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_start_index(uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.start_index)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Response

// repeated .CCloud_UserFile files = 1;
inline int CCloud_EnumerateUserFiles_Response::_internal_files_size() const {
  return files_.size();
}
inline int CCloud_EnumerateUserFiles_Response::files_size() const {
  return _internal_files_size();
}
inline void CCloud_EnumerateUserFiles_Response::clear_files() {
  files_.Clear();
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_EnumerateUserFiles_Response.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >*
CCloud_EnumerateUserFiles_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_EnumerateUserFiles_Response.files)
  return &files_;
}
inline const ::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Response.files)
  return _internal_files(index);
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::_internal_add_files() {
  return files_.Add();
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::add_files() {
  ::CCloud_UserFile* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CCloud_EnumerateUserFiles_Response.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >&
CCloud_EnumerateUserFiles_Response::files() const {
  // @@protoc_insertion_point(field_list:CCloud_EnumerateUserFiles_Response.files)
  return files_;
}

// optional uint32 total_files = 2;
inline bool CCloud_EnumerateUserFiles_Response::_internal_has_total_files() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Response::has_total_files() const {
  return _internal_has_total_files();
}
inline void CCloud_EnumerateUserFiles_Response::clear_total_files() {
  total_files_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_EnumerateUserFiles_Response::_internal_total_files() const {
  return total_files_;
}
inline uint32_t CCloud_EnumerateUserFiles_Response::total_files() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Response.total_files)
  return _internal_total_files();
}
inline void CCloud_EnumerateUserFiles_Response::_internal_set_total_files(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  total_files_ = value;
}
inline void CCloud_EnumerateUserFiles_Response::set_total_files(uint32_t value) {
  _internal_set_total_files(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Response.total_files)
}

// -------------------------------------------------------------------

// CCloud_Delete_Request

// optional string filename = 1;
inline bool CCloud_Delete_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_Delete_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_Delete_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_Delete_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_Delete_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_Delete_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_Delete_Request.filename)
}
inline std::string* CCloud_Delete_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_Delete_Request.filename)
  return _s;
}
inline const std::string& CCloud_Delete_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_Delete_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_Delete_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_Delete_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_Delete_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_Delete_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_Delete_Request.filename)
}

// optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
inline bool CCloud_Delete_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_Delete_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_Delete_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_Delete_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_Delete_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_Delete_Request.appid)
  return _internal_appid();
}
inline void CCloud_Delete_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CCloud_Delete_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_Delete_Request.appid)
}

// optional uint64 upload_batch_id = 3 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
inline bool CCloud_Delete_Request::_internal_has_upload_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_Delete_Request::has_upload_batch_id() const {
  return _internal_has_upload_batch_id();
}
inline void CCloud_Delete_Request::clear_upload_batch_id() {
  upload_batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_Delete_Request::_internal_upload_batch_id() const {
  return upload_batch_id_;
}
inline uint64_t CCloud_Delete_Request::upload_batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_Delete_Request.upload_batch_id)
  return _internal_upload_batch_id();
}
inline void CCloud_Delete_Request::_internal_set_upload_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  upload_batch_id_ = value;
}
inline void CCloud_Delete_Request::set_upload_batch_id(uint64_t value) {
  _internal_set_upload_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_Delete_Request.upload_batch_id)
}

// -------------------------------------------------------------------

// CCloud_Delete_Response

// -------------------------------------------------------------------

// CCloud_GetClientEncryptionKey_Request

// -------------------------------------------------------------------

// CCloud_GetClientEncryptionKey_Response

// optional bytes key = 1 [(.description) = "AES-256 encryption key"];
inline bool CCloud_GetClientEncryptionKey_Response::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetClientEncryptionKey_Response::has_key() const {
  return _internal_has_key();
}
inline void CCloud_GetClientEncryptionKey_Response::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_GetClientEncryptionKey_Response::key() const {
  // @@protoc_insertion_point(field_get:CCloud_GetClientEncryptionKey_Response.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_GetClientEncryptionKey_Response::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_GetClientEncryptionKey_Response.key)
}
inline std::string* CCloud_GetClientEncryptionKey_Response::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CCloud_GetClientEncryptionKey_Response.key)
  return _s;
}
inline const std::string& CCloud_GetClientEncryptionKey_Response::_internal_key() const {
  return key_.Get();
}
inline void CCloud_GetClientEncryptionKey_Response::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_GetClientEncryptionKey_Response::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_GetClientEncryptionKey_Response::release_key() {
  // @@protoc_insertion_point(field_release:CCloud_GetClientEncryptionKey_Response.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_GetClientEncryptionKey_Response::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_GetClientEncryptionKey_Response.key)
}

// optional int32 crc = 2 [(.description) = "CRC of key"];
inline bool CCloud_GetClientEncryptionKey_Response::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_GetClientEncryptionKey_Response::has_crc() const {
  return _internal_has_crc();
}
inline void CCloud_GetClientEncryptionKey_Response::clear_crc() {
  crc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCloud_GetClientEncryptionKey_Response::_internal_crc() const {
  return crc_;
}
inline int32_t CCloud_GetClientEncryptionKey_Response::crc() const {
  // @@protoc_insertion_point(field_get:CCloud_GetClientEncryptionKey_Response.crc)
  return _internal_crc();
}
inline void CCloud_GetClientEncryptionKey_Response::_internal_set_crc(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  crc_ = value;
}
inline void CCloud_GetClientEncryptionKey_Response::set_crc(int32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CCloud_GetClientEncryptionKey_Response.crc)
}

// -------------------------------------------------------------------

// CCloud_CDNReport_Notification

// optional fixed64 steamid = 1;
inline bool CCloud_CDNReport_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CCloud_CDNReport_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_CDNReport_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CCloud_CDNReport_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.steamid)
  return _internal_steamid();
}
inline void CCloud_CDNReport_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CCloud_CDNReport_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.steamid)
}

// optional string url = 2;
inline bool CCloud_CDNReport_Notification::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_url() const {
  return _internal_has_url();
}
inline void CCloud_CDNReport_Notification::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_CDNReport_Notification::url() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_CDNReport_Notification::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.url)
}
inline std::string* CCloud_CDNReport_Notification::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CCloud_CDNReport_Notification.url)
  return _s;
}
inline const std::string& CCloud_CDNReport_Notification::_internal_url() const {
  return url_.Get();
}
inline void CCloud_CDNReport_Notification::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_CDNReport_Notification::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_CDNReport_Notification::release_url() {
  // @@protoc_insertion_point(field_release:CCloud_CDNReport_Notification.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_CDNReport_Notification::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_CDNReport_Notification.url)
}

// optional bool success = 3;
inline bool CCloud_CDNReport_Notification::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_success() const {
  return _internal_has_success();
}
inline void CCloud_CDNReport_Notification::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_CDNReport_Notification::_internal_success() const {
  return success_;
}
inline bool CCloud_CDNReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.success)
  return _internal_success();
}
inline void CCloud_CDNReport_Notification::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void CCloud_CDNReport_Notification::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.success)
}

// optional uint32 http_status_code = 4;
inline bool CCloud_CDNReport_Notification::_internal_has_http_status_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_http_status_code() const {
  return _internal_has_http_status_code();
}
inline void CCloud_CDNReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_CDNReport_Notification::_internal_http_status_code() const {
  return http_status_code_;
}
inline uint32_t CCloud_CDNReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.http_status_code)
  return _internal_http_status_code();
}
inline void CCloud_CDNReport_Notification::_internal_set_http_status_code(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  http_status_code_ = value;
}
inline void CCloud_CDNReport_Notification::set_http_status_code(uint32_t value) {
  _internal_set_http_status_code(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.http_status_code)
}

// optional uint64 expected_bytes = 5;
inline bool CCloud_CDNReport_Notification::_internal_has_expected_bytes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_expected_bytes() const {
  return _internal_has_expected_bytes();
}
inline void CCloud_CDNReport_Notification::clear_expected_bytes() {
  expected_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CCloud_CDNReport_Notification::_internal_expected_bytes() const {
  return expected_bytes_;
}
inline uint64_t CCloud_CDNReport_Notification::expected_bytes() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.expected_bytes)
  return _internal_expected_bytes();
}
inline void CCloud_CDNReport_Notification::_internal_set_expected_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  expected_bytes_ = value;
}
inline void CCloud_CDNReport_Notification::set_expected_bytes(uint64_t value) {
  _internal_set_expected_bytes(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.expected_bytes)
}

// optional uint64 received_bytes = 6;
inline bool CCloud_CDNReport_Notification::_internal_has_received_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_received_bytes() const {
  return _internal_has_received_bytes();
}
inline void CCloud_CDNReport_Notification::clear_received_bytes() {
  received_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CCloud_CDNReport_Notification::_internal_received_bytes() const {
  return received_bytes_;
}
inline uint64_t CCloud_CDNReport_Notification::received_bytes() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.received_bytes)
  return _internal_received_bytes();
}
inline void CCloud_CDNReport_Notification::_internal_set_received_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  received_bytes_ = value;
}
inline void CCloud_CDNReport_Notification::set_received_bytes(uint64_t value) {
  _internal_set_received_bytes(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.received_bytes)
}

// optional uint32 duration = 7;
inline bool CCloud_CDNReport_Notification::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_CDNReport_Notification::has_duration() const {
  return _internal_has_duration();
}
inline void CCloud_CDNReport_Notification::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCloud_CDNReport_Notification::_internal_duration() const {
  return duration_;
}
inline uint32_t CCloud_CDNReport_Notification::duration() const {
  // @@protoc_insertion_point(field_get:CCloud_CDNReport_Notification.duration)
  return _internal_duration();
}
inline void CCloud_CDNReport_Notification::_internal_set_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  duration_ = value;
}
inline void CCloud_CDNReport_Notification::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CCloud_CDNReport_Notification.duration)
}

// -------------------------------------------------------------------

// CCloud_ExternalStorageTransferReport_Notification

// optional string host = 1;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_host() const {
  return _internal_has_host();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_host() {
  host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ExternalStorageTransferReport_Notification::host() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ExternalStorageTransferReport_Notification::set_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.host)
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:CCloud_ExternalStorageTransferReport_Notification.host)
  return _s;
}
inline const std::string& CCloud_ExternalStorageTransferReport_Notification::_internal_host() const {
  return host_.Get();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::release_host() {
  // @@protoc_insertion_point(field_release:CCloud_ExternalStorageTransferReport_Notification.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ExternalStorageTransferReport_Notification.host)
}

// optional string path = 2;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_path() const {
  return _internal_has_path();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_ExternalStorageTransferReport_Notification::path() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ExternalStorageTransferReport_Notification::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.path)
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CCloud_ExternalStorageTransferReport_Notification.path)
  return _s;
}
inline const std::string& CCloud_ExternalStorageTransferReport_Notification::_internal_path() const {
  return path_.Get();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ExternalStorageTransferReport_Notification::release_path() {
  // @@protoc_insertion_point(field_release:CCloud_ExternalStorageTransferReport_Notification.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ExternalStorageTransferReport_Notification.path)
}

// optional bool is_upload = 3;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_is_upload() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_is_upload() const {
  return _internal_has_is_upload();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_is_upload() {
  is_upload_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_is_upload() const {
  return is_upload_;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::is_upload() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.is_upload)
  return _internal_is_upload();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_is_upload(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_upload_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_is_upload(bool value) {
  _internal_set_is_upload(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.is_upload)
}

// optional bool success = 4;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_success() const {
  return _internal_has_success();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_success() const {
  return success_;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.success)
  return _internal_success();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000020u;
  success_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.success)
}

// optional uint32 http_status_code = 5;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_http_status_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_http_status_code() const {
  return _internal_has_http_status_code();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_http_status_code() const {
  return http_status_code_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.http_status_code)
  return _internal_http_status_code();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_http_status_code(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  http_status_code_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_http_status_code(uint32_t value) {
  _internal_set_http_status_code(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.http_status_code)
}

// optional uint64 bytes_expected = 6;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_bytes_expected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_expected() const {
  return _internal_has_bytes_expected();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_expected() {
  bytes_expected_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_ExternalStorageTransferReport_Notification::_internal_bytes_expected() const {
  return bytes_expected_;
}
inline uint64_t CCloud_ExternalStorageTransferReport_Notification::bytes_expected() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
  return _internal_bytes_expected();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_bytes_expected(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  bytes_expected_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_bytes_expected(uint64_t value) {
  _internal_set_bytes_expected(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
}

// optional uint64 bytes_actual = 7;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_bytes_actual() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_actual() const {
  return _internal_has_bytes_actual();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_actual() {
  bytes_actual_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CCloud_ExternalStorageTransferReport_Notification::_internal_bytes_actual() const {
  return bytes_actual_;
}
inline uint64_t CCloud_ExternalStorageTransferReport_Notification::bytes_actual() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
  return _internal_bytes_actual();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_bytes_actual(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  bytes_actual_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_bytes_actual(uint64_t value) {
  _internal_set_bytes_actual(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
}

// optional uint32 duration_ms = 8;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_duration_ms() {
  duration_ms_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_duration_ms() const {
  return duration_ms_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::duration_ms() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.duration_ms)
  return _internal_duration_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_duration_ms(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  duration_ms_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_duration_ms(uint32_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.duration_ms)
}

// optional uint32 cellid = 9;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_cellid() const {
  return _internal_has_cellid();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.cellid)
  return _internal_cellid();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  cellid_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.cellid)
}

// optional bool proxied = 10;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_proxied() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_proxied() const {
  return _internal_has_proxied();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_proxied() {
  proxied_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_proxied() const {
  return proxied_;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::proxied() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.proxied)
  return _internal_proxied();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_proxied(bool value) {
  _has_bits_[0] |= 0x00000040u;
  proxied_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_proxied(bool value) {
  _internal_set_proxied(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.proxied)
}

// optional bool ipv6_local = 11;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_ipv6_local() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_ipv6_local() const {
  return _internal_has_ipv6_local();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_ipv6_local() {
  ipv6_local_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_ipv6_local() const {
  return ipv6_local_;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::ipv6_local() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.ipv6_local)
  return _internal_ipv6_local();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_ipv6_local(bool value) {
  _has_bits_[0] |= 0x00000080u;
  ipv6_local_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_ipv6_local(bool value) {
  _internal_set_ipv6_local(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.ipv6_local)
}

// optional bool ipv6_remote = 12;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_ipv6_remote() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_ipv6_remote() const {
  return _internal_has_ipv6_remote();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_ipv6_remote() {
  ipv6_remote_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_ipv6_remote() const {
  return ipv6_remote_;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::ipv6_remote() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.ipv6_remote)
  return _internal_ipv6_remote();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_ipv6_remote(bool value) {
  _has_bits_[0] |= 0x00000800u;
  ipv6_remote_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_ipv6_remote(bool value) {
  _internal_set_ipv6_remote(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.ipv6_remote)
}

// optional uint32 time_to_connect_ms = 13;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_time_to_connect_ms() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_time_to_connect_ms() const {
  return _internal_has_time_to_connect_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_time_to_connect_ms() {
  time_to_connect_ms_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_time_to_connect_ms() const {
  return time_to_connect_ms_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::time_to_connect_ms() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.time_to_connect_ms)
  return _internal_time_to_connect_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_time_to_connect_ms(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  time_to_connect_ms_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_time_to_connect_ms(uint32_t value) {
  _internal_set_time_to_connect_ms(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.time_to_connect_ms)
}

// optional uint32 time_to_send_req_ms = 14;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_time_to_send_req_ms() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_time_to_send_req_ms() const {
  return _internal_has_time_to_send_req_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_time_to_send_req_ms() {
  time_to_send_req_ms_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_time_to_send_req_ms() const {
  return time_to_send_req_ms_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::time_to_send_req_ms() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.time_to_send_req_ms)
  return _internal_time_to_send_req_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_time_to_send_req_ms(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  time_to_send_req_ms_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_time_to_send_req_ms(uint32_t value) {
  _internal_set_time_to_send_req_ms(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.time_to_send_req_ms)
}

// optional uint32 time_to_first_byte_ms = 15;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_time_to_first_byte_ms() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_time_to_first_byte_ms() const {
  return _internal_has_time_to_first_byte_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_time_to_first_byte_ms() {
  time_to_first_byte_ms_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_time_to_first_byte_ms() const {
  return time_to_first_byte_ms_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::time_to_first_byte_ms() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.time_to_first_byte_ms)
  return _internal_time_to_first_byte_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_time_to_first_byte_ms(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  time_to_first_byte_ms_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_time_to_first_byte_ms(uint32_t value) {
  _internal_set_time_to_first_byte_ms(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.time_to_first_byte_ms)
}

// optional uint32 time_to_last_byte_ms = 16;
inline bool CCloud_ExternalStorageTransferReport_Notification::_internal_has_time_to_last_byte_ms() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CCloud_ExternalStorageTransferReport_Notification::has_time_to_last_byte_ms() const {
  return _internal_has_time_to_last_byte_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::clear_time_to_last_byte_ms() {
  time_to_last_byte_ms_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::_internal_time_to_last_byte_ms() const {
  return time_to_last_byte_ms_;
}
inline uint32_t CCloud_ExternalStorageTransferReport_Notification::time_to_last_byte_ms() const {
  // @@protoc_insertion_point(field_get:CCloud_ExternalStorageTransferReport_Notification.time_to_last_byte_ms)
  return _internal_time_to_last_byte_ms();
}
inline void CCloud_ExternalStorageTransferReport_Notification::_internal_set_time_to_last_byte_ms(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  time_to_last_byte_ms_ = value;
}
inline void CCloud_ExternalStorageTransferReport_Notification::set_time_to_last_byte_ms(uint32_t value) {
  _internal_set_time_to_last_byte_ms(value);
  // @@protoc_insertion_point(field_set:CCloud_ExternalStorageTransferReport_Notification.time_to_last_byte_ms)
}

// -------------------------------------------------------------------

// CCloud_BeginAppUploadBatch_Request

// optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
inline bool CCloud_BeginAppUploadBatch_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_BeginAppUploadBatch_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_BeginAppUploadBatch_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.appid)
  return _internal_appid();
}
inline void CCloud_BeginAppUploadBatch_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_BeginAppUploadBatch_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.appid)
}

// optional string machine_name = 2 [(.description) = "Client machine name (may be user\'s alias)."];
inline bool CCloud_BeginAppUploadBatch_Request::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Request::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::machine_name() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_BeginAppUploadBatch_Request::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.machine_name)
}
inline std::string* CCloud_BeginAppUploadBatch_Request::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CCloud_BeginAppUploadBatch_Request.machine_name)
  return _s;
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CCloud_BeginAppUploadBatch_Request::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_BeginAppUploadBatch_Request::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_BeginAppUploadBatch_Request::release_machine_name() {
  // @@protoc_insertion_point(field_release:CCloud_BeginAppUploadBatch_Request.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_BeginAppUploadBatch_Request::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_BeginAppUploadBatch_Request.machine_name)
}

// repeated string files_to_upload = 3 [(.description) = "Filenames of files to upload in this batch"];
inline int CCloud_BeginAppUploadBatch_Request::_internal_files_to_upload_size() const {
  return files_to_upload_.size();
}
inline int CCloud_BeginAppUploadBatch_Request::files_to_upload_size() const {
  return _internal_files_to_upload_size();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_files_to_upload() {
  files_to_upload_.Clear();
}
inline std::string* CCloud_BeginAppUploadBatch_Request::add_files_to_upload() {
  std::string* _s = _internal_add_files_to_upload();
  // @@protoc_insertion_point(field_add_mutable:CCloud_BeginAppUploadBatch_Request.files_to_upload)
  return _s;
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::_internal_files_to_upload(int index) const {
  return files_to_upload_.Get(index);
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::files_to_upload(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.files_to_upload)
  return _internal_files_to_upload(index);
}
inline std::string* CCloud_BeginAppUploadBatch_Request::mutable_files_to_upload(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginAppUploadBatch_Request.files_to_upload)
  return files_to_upload_.Mutable(index);
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_upload(int index, const std::string& value) {
  files_to_upload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_upload(int index, std::string&& value) {
  files_to_upload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_upload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_to_upload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_upload(int index, const char* value, size_t size) {
  files_to_upload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline std::string* CCloud_BeginAppUploadBatch_Request::_internal_add_files_to_upload() {
  return files_to_upload_.Add();
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_upload(const std::string& value) {
  files_to_upload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_upload(std::string&& value) {
  files_to_upload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_upload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_to_upload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_upload(const char* value, size_t size) {
  files_to_upload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_BeginAppUploadBatch_Request.files_to_upload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_BeginAppUploadBatch_Request::files_to_upload() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginAppUploadBatch_Request.files_to_upload)
  return files_to_upload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_BeginAppUploadBatch_Request::mutable_files_to_upload() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginAppUploadBatch_Request.files_to_upload)
  return &files_to_upload_;
}

// repeated string files_to_delete = 4 [(.description) = "Filenames of files to delete in this batch"];
inline int CCloud_BeginAppUploadBatch_Request::_internal_files_to_delete_size() const {
  return files_to_delete_.size();
}
inline int CCloud_BeginAppUploadBatch_Request::files_to_delete_size() const {
  return _internal_files_to_delete_size();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_files_to_delete() {
  files_to_delete_.Clear();
}
inline std::string* CCloud_BeginAppUploadBatch_Request::add_files_to_delete() {
  std::string* _s = _internal_add_files_to_delete();
  // @@protoc_insertion_point(field_add_mutable:CCloud_BeginAppUploadBatch_Request.files_to_delete)
  return _s;
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::_internal_files_to_delete(int index) const {
  return files_to_delete_.Get(index);
}
inline const std::string& CCloud_BeginAppUploadBatch_Request::files_to_delete(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.files_to_delete)
  return _internal_files_to_delete(index);
}
inline std::string* CCloud_BeginAppUploadBatch_Request::mutable_files_to_delete(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_BeginAppUploadBatch_Request.files_to_delete)
  return files_to_delete_.Mutable(index);
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_delete(int index, const std::string& value) {
  files_to_delete_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_delete(int index, std::string&& value) {
  files_to_delete_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_delete(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_to_delete_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::set_files_to_delete(int index, const char* value, size_t size) {
  files_to_delete_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline std::string* CCloud_BeginAppUploadBatch_Request::_internal_add_files_to_delete() {
  return files_to_delete_.Add();
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_delete(const std::string& value) {
  files_to_delete_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_delete(std::string&& value) {
  files_to_delete_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_delete(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_to_delete_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline void CCloud_BeginAppUploadBatch_Request::add_files_to_delete(const char* value, size_t size) {
  files_to_delete_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_BeginAppUploadBatch_Request.files_to_delete)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_BeginAppUploadBatch_Request::files_to_delete() const {
  // @@protoc_insertion_point(field_list:CCloud_BeginAppUploadBatch_Request.files_to_delete)
  return files_to_delete_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_BeginAppUploadBatch_Request::mutable_files_to_delete() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_BeginAppUploadBatch_Request.files_to_delete)
  return &files_to_delete_;
}

// optional uint64 client_id = 5 [(.description) = "Client ID number"];
inline bool CCloud_BeginAppUploadBatch_Request::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Request::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_BeginAppUploadBatch_Request::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_BeginAppUploadBatch_Request::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.client_id)
  return _internal_client_id();
}
inline void CCloud_BeginAppUploadBatch_Request::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void CCloud_BeginAppUploadBatch_Request::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.client_id)
}

// optional uint64 app_build_id = 6 [(.description) = "Current local build of the app which made these changes"];
inline bool CCloud_BeginAppUploadBatch_Request::_internal_has_app_build_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Request::has_app_build_id() const {
  return _internal_has_app_build_id();
}
inline void CCloud_BeginAppUploadBatch_Request::clear_app_build_id() {
  app_build_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_BeginAppUploadBatch_Request::_internal_app_build_id() const {
  return app_build_id_;
}
inline uint64_t CCloud_BeginAppUploadBatch_Request::app_build_id() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Request.app_build_id)
  return _internal_app_build_id();
}
inline void CCloud_BeginAppUploadBatch_Request::_internal_set_app_build_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_build_id_ = value;
}
inline void CCloud_BeginAppUploadBatch_Request::set_app_build_id(uint64_t value) {
  _internal_set_app_build_id(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Request.app_build_id)
}

// -------------------------------------------------------------------

// CCloud_BeginAppUploadBatch_Response

// optional uint64 batch_id = 1 [(.description) = "ID of this batch."];
inline bool CCloud_BeginAppUploadBatch_Response::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Response::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void CCloud_BeginAppUploadBatch_Response::clear_batch_id() {
  batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_BeginAppUploadBatch_Response::_internal_batch_id() const {
  return batch_id_;
}
inline uint64_t CCloud_BeginAppUploadBatch_Response::batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Response.batch_id)
  return _internal_batch_id();
}
inline void CCloud_BeginAppUploadBatch_Response::_internal_set_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  batch_id_ = value;
}
inline void CCloud_BeginAppUploadBatch_Response::set_batch_id(uint64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Response.batch_id)
}

// optional uint64 app_change_number = 4 [(.description) = "New App Change Number"];
inline bool CCloud_BeginAppUploadBatch_Response::_internal_has_app_change_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_BeginAppUploadBatch_Response::has_app_change_number() const {
  return _internal_has_app_change_number();
}
inline void CCloud_BeginAppUploadBatch_Response::clear_app_change_number() {
  app_change_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_BeginAppUploadBatch_Response::_internal_app_change_number() const {
  return app_change_number_;
}
inline uint64_t CCloud_BeginAppUploadBatch_Response::app_change_number() const {
  // @@protoc_insertion_point(field_get:CCloud_BeginAppUploadBatch_Response.app_change_number)
  return _internal_app_change_number();
}
inline void CCloud_BeginAppUploadBatch_Response::_internal_set_app_change_number(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_change_number_ = value;
}
inline void CCloud_BeginAppUploadBatch_Response::set_app_change_number(uint64_t value) {
  _internal_set_app_change_number(value);
  // @@protoc_insertion_point(field_set:CCloud_BeginAppUploadBatch_Response.app_change_number)
}

// -------------------------------------------------------------------

// CCloud_CompleteAppUploadBatch_Notification

// optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
inline bool CCloud_CompleteAppUploadBatch_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_CompleteAppUploadBatch_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Notification.appid)
  return _internal_appid();
}
inline void CCloud_CompleteAppUploadBatch_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Notification.appid)
}

// optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
inline bool CCloud_CompleteAppUploadBatch_Notification::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Notification::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void CCloud_CompleteAppUploadBatch_Notification::clear_batch_id() {
  batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_CompleteAppUploadBatch_Notification::_internal_batch_id() const {
  return batch_id_;
}
inline uint64_t CCloud_CompleteAppUploadBatch_Notification::batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Notification.batch_id)
  return _internal_batch_id();
}
inline void CCloud_CompleteAppUploadBatch_Notification::_internal_set_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  batch_id_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Notification::set_batch_id(uint64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Notification.batch_id)
}

// optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
inline bool CCloud_CompleteAppUploadBatch_Notification::_internal_has_batch_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Notification::has_batch_eresult() const {
  return _internal_has_batch_eresult();
}
inline void CCloud_CompleteAppUploadBatch_Notification::clear_batch_eresult() {
  batch_eresult_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Notification::_internal_batch_eresult() const {
  return batch_eresult_;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Notification::batch_eresult() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Notification.batch_eresult)
  return _internal_batch_eresult();
}
inline void CCloud_CompleteAppUploadBatch_Notification::_internal_set_batch_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  batch_eresult_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Notification::set_batch_eresult(uint32_t value) {
  _internal_set_batch_eresult(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Notification.batch_eresult)
}

// -------------------------------------------------------------------

// CCloud_CompleteAppUploadBatch_Request

// optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
inline bool CCloud_CompleteAppUploadBatch_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_CompleteAppUploadBatch_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Request.appid)
  return _internal_appid();
}
inline void CCloud_CompleteAppUploadBatch_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Request.appid)
}

// optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
inline bool CCloud_CompleteAppUploadBatch_Request::_internal_has_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Request::has_batch_id() const {
  return _internal_has_batch_id();
}
inline void CCloud_CompleteAppUploadBatch_Request::clear_batch_id() {
  batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_CompleteAppUploadBatch_Request::_internal_batch_id() const {
  return batch_id_;
}
inline uint64_t CCloud_CompleteAppUploadBatch_Request::batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Request.batch_id)
  return _internal_batch_id();
}
inline void CCloud_CompleteAppUploadBatch_Request::_internal_set_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  batch_id_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Request::set_batch_id(uint64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Request.batch_id)
}

// optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
inline bool CCloud_CompleteAppUploadBatch_Request::_internal_has_batch_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_CompleteAppUploadBatch_Request::has_batch_eresult() const {
  return _internal_has_batch_eresult();
}
inline void CCloud_CompleteAppUploadBatch_Request::clear_batch_eresult() {
  batch_eresult_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Request::_internal_batch_eresult() const {
  return batch_eresult_;
}
inline uint32_t CCloud_CompleteAppUploadBatch_Request::batch_eresult() const {
  // @@protoc_insertion_point(field_get:CCloud_CompleteAppUploadBatch_Request.batch_eresult)
  return _internal_batch_eresult();
}
inline void CCloud_CompleteAppUploadBatch_Request::_internal_set_batch_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  batch_eresult_ = value;
}
inline void CCloud_CompleteAppUploadBatch_Request::set_batch_eresult(uint32_t value) {
  _internal_set_batch_eresult(value);
  // @@protoc_insertion_point(field_set:CCloud_CompleteAppUploadBatch_Request.batch_eresult)
}

// -------------------------------------------------------------------

// CCloud_CompleteAppUploadBatch_Response

// -------------------------------------------------------------------

// CCloud_ClientBeginFileUpload_Request

// optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in Cloud."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.file_size)
  return _internal_file_size();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.file_size)
}

// optional uint32 raw_file_size = 3 [(.description) = "file size before any compression and/or encryption."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.raw_file_size)
  return _internal_raw_file_size();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  raw_file_size_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.raw_file_size)
}

// optional bytes file_sha = 4 [(.description) = "SHA-1 of raw file."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientBeginFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientBeginFileUpload_Request::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.file_sha)
}
inline std::string* CCloud_ClientBeginFileUpload_Request::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientBeginFileUpload_Request.file_sha)
  return _s;
}
inline const std::string& CCloud_ClientBeginFileUpload_Request::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientBeginFileUpload_Request::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientBeginFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_ClientBeginFileUpload_Request.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientBeginFileUpload_Request::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientBeginFileUpload_Request.file_sha)
}

// optional uint64 time_stamp = 5 [(.description) = "Timestamp of file."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CCloud_ClientBeginFileUpload_Request::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CCloud_ClientBeginFileUpload_Request::time_stamp() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.time_stamp)
  return _internal_time_stamp();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_stamp_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.time_stamp)
}

// optional string filename = 6 [(.description) = "Name of the file to store in the cloud."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_ClientBeginFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientBeginFileUpload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.filename)
}
inline std::string* CCloud_ClientBeginFileUpload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientBeginFileUpload_Request.filename)
  return _s;
}
inline const std::string& CCloud_ClientBeginFileUpload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientBeginFileUpload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientBeginFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_ClientBeginFileUpload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientBeginFileUpload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientBeginFileUpload_Request.filename)
}

// optional uint32 platforms_to_sync = 7 [default = 4294967295];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_platforms_to_sync() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_platforms_to_sync() const {
  return _internal_has_platforms_to_sync();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_ = 4294967295u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_platforms_to_sync() const {
  return platforms_to_sync_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
  return _internal_platforms_to_sync();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_platforms_to_sync(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  platforms_to_sync_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_platforms_to_sync(uint32_t value) {
  _internal_set_platforms_to_sync(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
}

// optional uint32 cell_id = 9 [(.description) = "Client\'s cell ID so we can pick storage location."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::cell_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.cell_id)
  return _internal_cell_id();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  cell_id_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.cell_id)
}

// optional bool can_encrypt = 10 [(.description) = "if true, client can encrypt the file before uploading it"];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_can_encrypt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_can_encrypt() const {
  return _internal_has_can_encrypt();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_can_encrypt() {
  can_encrypt_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCloud_ClientBeginFileUpload_Request::_internal_can_encrypt() const {
  return can_encrypt_;
}
inline bool CCloud_ClientBeginFileUpload_Request::can_encrypt() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.can_encrypt)
  return _internal_can_encrypt();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_can_encrypt(bool value) {
  _has_bits_[0] |= 0x00000080u;
  can_encrypt_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_can_encrypt(bool value) {
  _internal_set_can_encrypt(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.can_encrypt)
}

// optional bool is_shared_file = 11 [(.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_is_shared_file() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_is_shared_file() const {
  return _internal_has_is_shared_file();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_is_shared_file() {
  is_shared_file_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCloud_ClientBeginFileUpload_Request::_internal_is_shared_file() const {
  return is_shared_file_;
}
inline bool CCloud_ClientBeginFileUpload_Request::is_shared_file() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.is_shared_file)
  return _internal_is_shared_file();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_is_shared_file(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_shared_file_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_is_shared_file(bool value) {
  _internal_set_is_shared_file(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.is_shared_file)
}

// optional uint32 deprecated_realm = 12 [(.description) = "unused"];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_deprecated_realm() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_deprecated_realm() const {
  return _internal_has_deprecated_realm();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_deprecated_realm() {
  deprecated_realm_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::_internal_deprecated_realm() const {
  return deprecated_realm_;
}
inline uint32_t CCloud_ClientBeginFileUpload_Request::deprecated_realm() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.deprecated_realm)
  return _internal_deprecated_realm();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_deprecated_realm(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  deprecated_realm_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_deprecated_realm(uint32_t value) {
  _internal_set_deprecated_realm(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.deprecated_realm)
}

// optional uint64 upload_batch_id = 13 [(.description) = "ID of this batch."];
inline bool CCloud_ClientBeginFileUpload_Request::_internal_has_upload_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Request::has_upload_batch_id() const {
  return _internal_has_upload_batch_id();
}
inline void CCloud_ClientBeginFileUpload_Request::clear_upload_batch_id() {
  upload_batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CCloud_ClientBeginFileUpload_Request::_internal_upload_batch_id() const {
  return upload_batch_id_;
}
inline uint64_t CCloud_ClientBeginFileUpload_Request::upload_batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Request.upload_batch_id)
  return _internal_upload_batch_id();
}
inline void CCloud_ClientBeginFileUpload_Request::_internal_set_upload_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  upload_batch_id_ = value;
}
inline void CCloud_ClientBeginFileUpload_Request::set_upload_batch_id(uint64_t value) {
  _internal_set_upload_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Request.upload_batch_id)
}

// -------------------------------------------------------------------

// ClientCloudFileUploadBlockDetails_HTTPHeaders

// optional string name = 1;
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return _s;
}
inline const std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}

// optional string value = 2;
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return _s;
}
inline const std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// ClientCloudFileUploadBlockDetails

// optional string url_host = 1 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_url_host() const {
  return _internal_has_url_host();
}
inline void ClientCloudFileUploadBlockDetails::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientCloudFileUploadBlockDetails::url_host() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.url_host)
  return _internal_url_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCloudFileUploadBlockDetails::set_url_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.url_host)
}
inline std::string* ClientCloudFileUploadBlockDetails::mutable_url_host() {
  std::string* _s = _internal_mutable_url_host();
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.url_host)
  return _s;
}
inline const std::string& ClientCloudFileUploadBlockDetails::_internal_url_host() const {
  return url_host_.Get();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::release_url_host() {
  // @@protoc_insertion_point(field_release:ClientCloudFileUploadBlockDetails.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientCloudFileUploadBlockDetails.url_host)
}

// optional string url_path = 2 [(.description) = "Relative path on server to which file should be uploaded."];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_url_path() const {
  return _internal_has_url_path();
}
inline void ClientCloudFileUploadBlockDetails::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientCloudFileUploadBlockDetails::url_path() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCloudFileUploadBlockDetails::set_url_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.url_path)
}
inline std::string* ClientCloudFileUploadBlockDetails::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.url_path)
  return _s;
}
inline const std::string& ClientCloudFileUploadBlockDetails::_internal_url_path() const {
  return url_path_.Get();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::release_url_path() {
  // @@protoc_insertion_point(field_release:ClientCloudFileUploadBlockDetails.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientCloudFileUploadBlockDetails.url_path)
}

// optional bool use_https = 3 [(.description) = "If true, use https, otherwise use http."];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_use_https() const {
  return _internal_has_use_https();
}
inline void ClientCloudFileUploadBlockDetails::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ClientCloudFileUploadBlockDetails::_internal_use_https() const {
  return use_https_;
}
inline bool ClientCloudFileUploadBlockDetails::use_https() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.use_https)
  return _internal_use_https();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_https_ = value;
}
inline void ClientCloudFileUploadBlockDetails::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.use_https)
}

// optional int32 http_method = 4 [(.description) = "EHTTPMethod to use for this block."];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_http_method() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_http_method() const {
  return _internal_has_http_method();
}
inline void ClientCloudFileUploadBlockDetails::clear_http_method() {
  http_method_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ClientCloudFileUploadBlockDetails::_internal_http_method() const {
  return http_method_;
}
inline int32_t ClientCloudFileUploadBlockDetails::http_method() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.http_method)
  return _internal_http_method();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_http_method(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  http_method_ = value;
}
inline void ClientCloudFileUploadBlockDetails::set_http_method(int32_t value) {
  _internal_set_http_method(value);
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.http_method)
}

// repeated .ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int ClientCloudFileUploadBlockDetails::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int ClientCloudFileUploadBlockDetails::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void ClientCloudFileUploadBlockDetails::clear_request_headers() {
  request_headers_.Clear();
}
inline ::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >*
ClientCloudFileUploadBlockDetails::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:ClientCloudFileUploadBlockDetails.request_headers)
  return &request_headers_;
}
inline const ::ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.request_headers)
  return _internal_request_headers(index);
}
inline ::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::add_request_headers() {
  ::ClientCloudFileUploadBlockDetails_HTTPHeaders* _add = _internal_add_request_headers();
  // @@protoc_insertion_point(field_add:ClientCloudFileUploadBlockDetails.request_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >&
ClientCloudFileUploadBlockDetails::request_headers() const {
  // @@protoc_insertion_point(field_list:ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_;
}

// optional uint64 block_offset = 6 [(.description) = "offset of file block to upload"];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_block_offset() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_block_offset() const {
  return _internal_has_block_offset();
}
inline void ClientCloudFileUploadBlockDetails::clear_block_offset() {
  block_offset_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t ClientCloudFileUploadBlockDetails::_internal_block_offset() const {
  return block_offset_;
}
inline uint64_t ClientCloudFileUploadBlockDetails::block_offset() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.block_offset)
  return _internal_block_offset();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_block_offset(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  block_offset_ = value;
}
inline void ClientCloudFileUploadBlockDetails::set_block_offset(uint64_t value) {
  _internal_set_block_offset(value);
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.block_offset)
}

// optional uint32 block_length = 7 [(.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_block_length() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_block_length() const {
  return _internal_has_block_length();
}
inline void ClientCloudFileUploadBlockDetails::clear_block_length() {
  block_length_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ClientCloudFileUploadBlockDetails::_internal_block_length() const {
  return block_length_;
}
inline uint32_t ClientCloudFileUploadBlockDetails::block_length() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.block_length)
  return _internal_block_length();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_block_length(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  block_length_ = value;
}
inline void ClientCloudFileUploadBlockDetails::set_block_length(uint32_t value) {
  _internal_set_block_length(value);
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.block_length)
}

// optional bytes explicit_body_data = 8 [(.description) = "explicit body data to use, instead of file data, for this block"];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_explicit_body_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_explicit_body_data() const {
  return _internal_has_explicit_body_data();
}
inline void ClientCloudFileUploadBlockDetails::clear_explicit_body_data() {
  explicit_body_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientCloudFileUploadBlockDetails::explicit_body_data() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.explicit_body_data)
  return _internal_explicit_body_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCloudFileUploadBlockDetails::set_explicit_body_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 explicit_body_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.explicit_body_data)
}
inline std::string* ClientCloudFileUploadBlockDetails::mutable_explicit_body_data() {
  std::string* _s = _internal_mutable_explicit_body_data();
  // @@protoc_insertion_point(field_mutable:ClientCloudFileUploadBlockDetails.explicit_body_data)
  return _s;
}
inline const std::string& ClientCloudFileUploadBlockDetails::_internal_explicit_body_data() const {
  return explicit_body_data_.Get();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_explicit_body_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::_internal_mutable_explicit_body_data() {
  _has_bits_[0] |= 0x00000004u;
  return explicit_body_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientCloudFileUploadBlockDetails::release_explicit_body_data() {
  // @@protoc_insertion_point(field_release:ClientCloudFileUploadBlockDetails.explicit_body_data)
  if (!_internal_has_explicit_body_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = explicit_body_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_body_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_body_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCloudFileUploadBlockDetails::set_allocated_explicit_body_data(std::string* explicit_body_data) {
  if (explicit_body_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  explicit_body_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explicit_body_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_body_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_body_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientCloudFileUploadBlockDetails.explicit_body_data)
}

// optional bool may_parallelize = 9 [(.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
inline bool ClientCloudFileUploadBlockDetails::_internal_has_may_parallelize() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientCloudFileUploadBlockDetails::has_may_parallelize() const {
  return _internal_has_may_parallelize();
}
inline void ClientCloudFileUploadBlockDetails::clear_may_parallelize() {
  may_parallelize_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ClientCloudFileUploadBlockDetails::_internal_may_parallelize() const {
  return may_parallelize_;
}
inline bool ClientCloudFileUploadBlockDetails::may_parallelize() const {
  // @@protoc_insertion_point(field_get:ClientCloudFileUploadBlockDetails.may_parallelize)
  return _internal_may_parallelize();
}
inline void ClientCloudFileUploadBlockDetails::_internal_set_may_parallelize(bool value) {
  _has_bits_[0] |= 0x00000020u;
  may_parallelize_ = value;
}
inline void ClientCloudFileUploadBlockDetails::set_may_parallelize(bool value) {
  _internal_set_may_parallelize(value);
  // @@protoc_insertion_point(field_set:ClientCloudFileUploadBlockDetails.may_parallelize)
}

// -------------------------------------------------------------------

// CCloud_ClientBeginFileUpload_Response

// optional bool encrypt_file = 1 [(.description) = "If true, the file should be encrypted by the client before upload"];
inline bool CCloud_ClientBeginFileUpload_Response::_internal_has_encrypt_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientBeginFileUpload_Response::has_encrypt_file() const {
  return _internal_has_encrypt_file();
}
inline void CCloud_ClientBeginFileUpload_Response::clear_encrypt_file() {
  encrypt_file_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_ClientBeginFileUpload_Response::_internal_encrypt_file() const {
  return encrypt_file_;
}
inline bool CCloud_ClientBeginFileUpload_Response::encrypt_file() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Response.encrypt_file)
  return _internal_encrypt_file();
}
inline void CCloud_ClientBeginFileUpload_Response::_internal_set_encrypt_file(bool value) {
  _has_bits_[0] |= 0x00000001u;
  encrypt_file_ = value;
}
inline void CCloud_ClientBeginFileUpload_Response::set_encrypt_file(bool value) {
  _internal_set_encrypt_file(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientBeginFileUpload_Response.encrypt_file)
}

// repeated .ClientCloudFileUploadBlockDetails block_requests = 2 [(.description) = "HTTP requests to make to perform upload"];
inline int CCloud_ClientBeginFileUpload_Response::_internal_block_requests_size() const {
  return block_requests_.size();
}
inline int CCloud_ClientBeginFileUpload_Response::block_requests_size() const {
  return _internal_block_requests_size();
}
inline void CCloud_ClientBeginFileUpload_Response::clear_block_requests() {
  block_requests_.Clear();
}
inline ::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::mutable_block_requests(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails >*
CCloud_ClientBeginFileUpload_Response::mutable_block_requests() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_ClientBeginFileUpload_Response.block_requests)
  return &block_requests_;
}
inline const ::ClientCloudFileUploadBlockDetails& CCloud_ClientBeginFileUpload_Response::_internal_block_requests(int index) const {
  return block_requests_.Get(index);
}
inline const ::ClientCloudFileUploadBlockDetails& CCloud_ClientBeginFileUpload_Response::block_requests(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_ClientBeginFileUpload_Response.block_requests)
  return _internal_block_requests(index);
}
inline ::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::_internal_add_block_requests() {
  return block_requests_.Add();
}
inline ::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::add_block_requests() {
  ::ClientCloudFileUploadBlockDetails* _add = _internal_add_block_requests();
  // @@protoc_insertion_point(field_add:CCloud_ClientBeginFileUpload_Response.block_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientCloudFileUploadBlockDetails >&
CCloud_ClientBeginFileUpload_Response::block_requests() const {
  // @@protoc_insertion_point(field_list:CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_;
}

// -------------------------------------------------------------------

// CCloud_ClientCommitFileUpload_Request

// optional bool transfer_succeeded = 1 [(.description) = "True if all block uploads succeeded, false if any of them failed."];
inline bool CCloud_ClientCommitFileUpload_Request::_internal_has_transfer_succeeded() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientCommitFileUpload_Request::has_transfer_succeeded() const {
  return _internal_has_transfer_succeeded();
}
inline void CCloud_ClientCommitFileUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_ClientCommitFileUpload_Request::_internal_transfer_succeeded() const {
  return transfer_succeeded_;
}
inline bool CCloud_ClientCommitFileUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
  return _internal_transfer_succeeded();
}
inline void CCloud_ClientCommitFileUpload_Request::_internal_set_transfer_succeeded(bool value) {
  _has_bits_[0] |= 0x00000004u;
  transfer_succeeded_ = value;
}
inline void CCloud_ClientCommitFileUpload_Request::set_transfer_succeeded(bool value) {
  _internal_set_transfer_succeeded(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
inline bool CCloud_ClientCommitFileUpload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ClientCommitFileUpload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientCommitFileUpload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_ClientCommitFileUpload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientCommitFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientCommitFileUpload_Request.appid)
  return _internal_appid();
}
inline void CCloud_ClientCommitFileUpload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_ClientCommitFileUpload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientCommitFileUpload_Request.appid)
}

// optional bytes file_sha = 3 [(.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
inline bool CCloud_ClientCommitFileUpload_Request::_internal_has_file_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientCommitFileUpload_Request::has_file_sha() const {
  return _internal_has_file_sha();
}
inline void CCloud_ClientCommitFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientCommitFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientCommitFileUpload_Request.file_sha)
  return _internal_file_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientCommitFileUpload_Request::set_file_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientCommitFileUpload_Request.file_sha)
}
inline std::string* CCloud_ClientCommitFileUpload_Request::mutable_file_sha() {
  std::string* _s = _internal_mutable_file_sha();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientCommitFileUpload_Request.file_sha)
  return _s;
}
inline const std::string& CCloud_ClientCommitFileUpload_Request::_internal_file_sha() const {
  return file_sha_.Get();
}
inline void CCloud_ClientCommitFileUpload_Request::_internal_set_file_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientCommitFileUpload_Request::_internal_mutable_file_sha() {
  _has_bits_[0] |= 0x00000001u;
  return file_sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientCommitFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:CCloud_ClientCommitFileUpload_Request.file_sha)
  if (!_internal_has_file_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientCommitFileUpload_Request::set_allocated_file_sha(std::string* file_sha) {
  if (file_sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientCommitFileUpload_Request.file_sha)
}

// optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
inline bool CCloud_ClientCommitFileUpload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientCommitFileUpload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_ClientCommitFileUpload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_ClientCommitFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientCommitFileUpload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientCommitFileUpload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientCommitFileUpload_Request.filename)
}
inline std::string* CCloud_ClientCommitFileUpload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientCommitFileUpload_Request.filename)
  return _s;
}
inline const std::string& CCloud_ClientCommitFileUpload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_ClientCommitFileUpload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientCommitFileUpload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientCommitFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_ClientCommitFileUpload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientCommitFileUpload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientCommitFileUpload_Request.filename)
}

// -------------------------------------------------------------------

// CCloud_ClientCommitFileUpload_Response

// optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
inline bool CCloud_ClientCommitFileUpload_Response::_internal_has_file_committed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientCommitFileUpload_Response::has_file_committed() const {
  return _internal_has_file_committed();
}
inline void CCloud_ClientCommitFileUpload_Response::clear_file_committed() {
  file_committed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCloud_ClientCommitFileUpload_Response::_internal_file_committed() const {
  return file_committed_;
}
inline bool CCloud_ClientCommitFileUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientCommitFileUpload_Response.file_committed)
  return _internal_file_committed();
}
inline void CCloud_ClientCommitFileUpload_Response::_internal_set_file_committed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  file_committed_ = value;
}
inline void CCloud_ClientCommitFileUpload_Response::set_file_committed(bool value) {
  _internal_set_file_committed(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientCommitFileUpload_Response.file_committed)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Request

// optional uint32 appid = 1 [(.description) = "App ID the file is part of."];
inline bool CCloud_ClientFileDownload_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientFileDownload_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_ClientFileDownload_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientFileDownload_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Request.appid)
  return _internal_appid();
}
inline void CCloud_ClientFileDownload_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_ClientFileDownload_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Request.appid)
}

// optional string filename = 2 [(.description) = "Filename of the file."];
inline bool CCloud_ClientFileDownload_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_ClientFileDownload_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientFileDownload_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Request.filename)
}
inline std::string* CCloud_ClientFileDownload_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Request.filename)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_ClientFileDownload_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Request.filename)
}

// optional uint32 realm = 3 [(.description) = "Steam Realm"];
inline bool CCloud_ClientFileDownload_Request::_internal_has_realm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Request::has_realm() const {
  return _internal_has_realm();
}
inline void CCloud_ClientFileDownload_Request::clear_realm() {
  realm_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_ClientFileDownload_Request::_internal_realm() const {
  return realm_;
}
inline uint32_t CCloud_ClientFileDownload_Request::realm() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Request.realm)
  return _internal_realm();
}
inline void CCloud_ClientFileDownload_Request::_internal_set_realm(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  realm_ = value;
}
inline void CCloud_ClientFileDownload_Request::set_realm(uint32_t value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Request.realm)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Response_HTTPHeaders

// optional string name = 1;
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}

// optional string value = 2;
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CCloud_ClientFileDownload_Response

// optional uint32 appid = 1 [(.description) = "Application the file belongs to"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientFileDownload_Response::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_ClientFileDownload_Response::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientFileDownload_Response::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.appid)
  return _internal_appid();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.appid)
}

// optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in the Cloud"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_ClientFileDownload_Response::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCloud_ClientFileDownload_Response::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CCloud_ClientFileDownload_Response::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.file_size)
  return _internal_file_size();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  file_size_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.file_size)
}

// optional uint32 raw_file_size = 3 [(.description) = "file size when decompressed and/or decrypted"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CCloud_ClientFileDownload_Response::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCloud_ClientFileDownload_Response::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CCloud_ClientFileDownload_Response::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.raw_file_size)
  return _internal_raw_file_size();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  raw_file_size_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.raw_file_size)
}

// optional bytes sha_file = 4 [(.description) = "SHA of file"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CCloud_ClientFileDownload_Response::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientFileDownload_Response::sha_file() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Response::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.sha_file)
}
inline std::string* CCloud_ClientFileDownload_Response::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.sha_file)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Response::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000001u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::release_sha_file() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Response.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Response::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Response.sha_file)
}

// optional uint64 time_stamp = 5 [(.description) = "Timestamp of file"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CCloud_ClientFileDownload_Response::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CCloud_ClientFileDownload_Response::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CCloud_ClientFileDownload_Response::time_stamp() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.time_stamp)
  return _internal_time_stamp();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  time_stamp_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.time_stamp)
}

// optional bool is_explicit_delete = 6 [(.description) = "True if this is an explicitly deleted file"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CCloud_ClientFileDownload_Response::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCloud_ClientFileDownload_Response::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CCloud_ClientFileDownload_Response::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_explicit_delete_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.is_explicit_delete)
}

// optional string url_host = 7 [(.description) = "Host to GET the file from"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_url_host() const {
  return _internal_has_url_host();
}
inline void CCloud_ClientFileDownload_Response::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_ClientFileDownload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.url_host)
  return _internal_url_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Response::set_url_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.url_host)
}
inline std::string* CCloud_ClientFileDownload_Response::mutable_url_host() {
  std::string* _s = _internal_mutable_url_host();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.url_host)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Response::_internal_url_host() const {
  return url_host_.Get();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000002u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Response.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Response::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Response.url_host)
}

// optional string url_path = 8 [(.description) = "Path on that host to use, including URL parameters if any"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_url_path() const {
  return _internal_has_url_path();
}
inline void CCloud_ClientFileDownload_Response::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCloud_ClientFileDownload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientFileDownload_Response::set_url_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.url_path)
}
inline std::string* CCloud_ClientFileDownload_Response::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.url_path)
  return _s;
}
inline const std::string& CCloud_ClientFileDownload_Response::_internal_url_path() const {
  return url_path_.Get();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000004u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientFileDownload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:CCloud_ClientFileDownload_Response.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientFileDownload_Response::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientFileDownload_Response.url_path)
}

// optional bool use_https = 9 [(.description) = "If set, use HTTPS, else use HTTP"];
inline bool CCloud_ClientFileDownload_Response::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_use_https() const {
  return _internal_has_use_https();
}
inline void CCloud_ClientFileDownload_Response::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCloud_ClientFileDownload_Response::_internal_use_https() const {
  return use_https_;
}
inline bool CCloud_ClientFileDownload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.use_https)
  return _internal_use_https();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000100u;
  use_https_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.use_https)
}

// repeated .CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.description) = "Name-value pairs to be sent in HTTP GET request."];
inline int CCloud_ClientFileDownload_Response::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int CCloud_ClientFileDownload_Response::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void CCloud_ClientFileDownload_Response::clear_request_headers() {
  request_headers_.Clear();
}
inline ::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_ClientFileDownload_Response_HTTPHeaders >*
CCloud_ClientFileDownload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_ClientFileDownload_Response.request_headers)
  return &request_headers_;
}
inline const ::CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.request_headers)
  return _internal_request_headers(index);
}
inline ::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::add_request_headers() {
  ::CCloud_ClientFileDownload_Response_HTTPHeaders* _add = _internal_add_request_headers();
  // @@protoc_insertion_point(field_add:CCloud_ClientFileDownload_Response.request_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_ClientFileDownload_Response_HTTPHeaders >&
CCloud_ClientFileDownload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_;
}

// optional bool encrypted = 11;
inline bool CCloud_ClientFileDownload_Response::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCloud_ClientFileDownload_Response::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void CCloud_ClientFileDownload_Response::clear_encrypted() {
  encrypted_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CCloud_ClientFileDownload_Response::_internal_encrypted() const {
  return encrypted_;
}
inline bool CCloud_ClientFileDownload_Response::encrypted() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientFileDownload_Response.encrypted)
  return _internal_encrypted();
}
inline void CCloud_ClientFileDownload_Response::_internal_set_encrypted(bool value) {
  _has_bits_[0] |= 0x00000200u;
  encrypted_ = value;
}
inline void CCloud_ClientFileDownload_Response::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientFileDownload_Response.encrypted)
}

// -------------------------------------------------------------------

// CCloud_ClientDeleteFile_Request

// optional uint32 appid = 1 [(.description) = "App ID for which the file is being deleted."];
inline bool CCloud_ClientDeleteFile_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientDeleteFile_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientDeleteFile_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_ClientDeleteFile_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientDeleteFile_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientDeleteFile_Request.appid)
  return _internal_appid();
}
inline void CCloud_ClientDeleteFile_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_ClientDeleteFile_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientDeleteFile_Request.appid)
}

// optional string filename = 2 [(.description) = "Filename of file."];
inline bool CCloud_ClientDeleteFile_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientDeleteFile_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_ClientDeleteFile_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_ClientDeleteFile_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientDeleteFile_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_ClientDeleteFile_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_ClientDeleteFile_Request.filename)
}
inline std::string* CCloud_ClientDeleteFile_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCloud_ClientDeleteFile_Request.filename)
  return _s;
}
inline const std::string& CCloud_ClientDeleteFile_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_ClientDeleteFile_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_ClientDeleteFile_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_ClientDeleteFile_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_ClientDeleteFile_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_ClientDeleteFile_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_ClientDeleteFile_Request.filename)
}

// optional bool is_explicit_delete = 3 [(.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
inline bool CCloud_ClientDeleteFile_Request::_internal_has_is_explicit_delete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientDeleteFile_Request::has_is_explicit_delete() const {
  return _internal_has_is_explicit_delete();
}
inline void CCloud_ClientDeleteFile_Request::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_ClientDeleteFile_Request::_internal_is_explicit_delete() const {
  return is_explicit_delete_;
}
inline bool CCloud_ClientDeleteFile_Request::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientDeleteFile_Request.is_explicit_delete)
  return _internal_is_explicit_delete();
}
inline void CCloud_ClientDeleteFile_Request::_internal_set_is_explicit_delete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_explicit_delete_ = value;
}
inline void CCloud_ClientDeleteFile_Request::set_is_explicit_delete(bool value) {
  _internal_set_is_explicit_delete(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientDeleteFile_Request.is_explicit_delete)
}

// optional uint64 upload_batch_id = 4 [(.description) = "ID of this batch."];
inline bool CCloud_ClientDeleteFile_Request::_internal_has_upload_batch_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ClientDeleteFile_Request::has_upload_batch_id() const {
  return _internal_has_upload_batch_id();
}
inline void CCloud_ClientDeleteFile_Request::clear_upload_batch_id() {
  upload_batch_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCloud_ClientDeleteFile_Request::_internal_upload_batch_id() const {
  return upload_batch_id_;
}
inline uint64_t CCloud_ClientDeleteFile_Request::upload_batch_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientDeleteFile_Request.upload_batch_id)
  return _internal_upload_batch_id();
}
inline void CCloud_ClientDeleteFile_Request::_internal_set_upload_batch_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  upload_batch_id_ = value;
}
inline void CCloud_ClientDeleteFile_Request::set_upload_batch_id(uint64_t value) {
  _internal_set_upload_batch_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientDeleteFile_Request.upload_batch_id)
}

// -------------------------------------------------------------------

// CCloud_ClientDeleteFile_Response

// -------------------------------------------------------------------

// CCloud_ClientConflictResolution_Notification

// optional uint32 appid = 1 [(.description) = "App ID for which the conflict was resolved."];
inline bool CCloud_ClientConflictResolution_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientConflictResolution_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientConflictResolution_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_ClientConflictResolution_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientConflictResolution_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientConflictResolution_Notification.appid)
  return _internal_appid();
}
inline void CCloud_ClientConflictResolution_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_ClientConflictResolution_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientConflictResolution_Notification.appid)
}

// optional bool chose_local_files = 2 [(.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
inline bool CCloud_ClientConflictResolution_Notification::_internal_has_chose_local_files() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientConflictResolution_Notification::has_chose_local_files() const {
  return _internal_has_chose_local_files();
}
inline void CCloud_ClientConflictResolution_Notification::clear_chose_local_files() {
  chose_local_files_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CCloud_ClientConflictResolution_Notification::_internal_chose_local_files() const {
  return chose_local_files_;
}
inline bool CCloud_ClientConflictResolution_Notification::chose_local_files() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientConflictResolution_Notification.chose_local_files)
  return _internal_chose_local_files();
}
inline void CCloud_ClientConflictResolution_Notification::_internal_set_chose_local_files(bool value) {
  _has_bits_[0] |= 0x00000002u;
  chose_local_files_ = value;
}
inline void CCloud_ClientConflictResolution_Notification::set_chose_local_files(bool value) {
  _internal_set_chose_local_files(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientConflictResolution_Notification.chose_local_files)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Request

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Response_Apps

// optional uint32 appid = 1;
inline bool CCloud_EnumerateUserApps_Response_Apps::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserApps_Response_Apps::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_EnumerateUserApps_Response_Apps::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_EnumerateUserApps_Response_Apps::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserApps_Response.Apps.appid)
  return _internal_appid();
}
inline void CCloud_EnumerateUserApps_Response_Apps::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserApps_Response.Apps.appid)
}

// optional int32 totalcount = 2;
inline bool CCloud_EnumerateUserApps_Response_Apps::_internal_has_totalcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserApps_Response_Apps::has_totalcount() const {
  return _internal_has_totalcount();
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_totalcount() {
  totalcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCloud_EnumerateUserApps_Response_Apps::_internal_totalcount() const {
  return totalcount_;
}
inline int32_t CCloud_EnumerateUserApps_Response_Apps::totalcount() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserApps_Response.Apps.totalcount)
  return _internal_totalcount();
}
inline void CCloud_EnumerateUserApps_Response_Apps::_internal_set_totalcount(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  totalcount_ = value;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_totalcount(int32_t value) {
  _internal_set_totalcount(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserApps_Response.Apps.totalcount)
}

// optional int64 totalsize = 3;
inline bool CCloud_EnumerateUserApps_Response_Apps::_internal_has_totalsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserApps_Response_Apps::has_totalsize() const {
  return _internal_has_totalsize();
}
inline void CCloud_EnumerateUserApps_Response_Apps::clear_totalsize() {
  totalsize_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CCloud_EnumerateUserApps_Response_Apps::_internal_totalsize() const {
  return totalsize_;
}
inline int64_t CCloud_EnumerateUserApps_Response_Apps::totalsize() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserApps_Response.Apps.totalsize)
  return _internal_totalsize();
}
inline void CCloud_EnumerateUserApps_Response_Apps::_internal_set_totalsize(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  totalsize_ = value;
}
inline void CCloud_EnumerateUserApps_Response_Apps::set_totalsize(int64_t value) {
  _internal_set_totalsize(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserApps_Response.Apps.totalsize)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserApps_Response

// repeated .CCloud_EnumerateUserApps_Response.Apps apps = 1;
inline int CCloud_EnumerateUserApps_Response::_internal_apps_size() const {
  return apps_.size();
}
inline int CCloud_EnumerateUserApps_Response::apps_size() const {
  return _internal_apps_size();
}
inline void CCloud_EnumerateUserApps_Response::clear_apps() {
  apps_.Clear();
}
inline ::CCloud_EnumerateUserApps_Response_Apps* CCloud_EnumerateUserApps_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_EnumerateUserApps_Response.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_EnumerateUserApps_Response_Apps >*
CCloud_EnumerateUserApps_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_EnumerateUserApps_Response.apps)
  return &apps_;
}
inline const ::CCloud_EnumerateUserApps_Response_Apps& CCloud_EnumerateUserApps_Response::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::CCloud_EnumerateUserApps_Response_Apps& CCloud_EnumerateUserApps_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserApps_Response.apps)
  return _internal_apps(index);
}
inline ::CCloud_EnumerateUserApps_Response_Apps* CCloud_EnumerateUserApps_Response::_internal_add_apps() {
  return apps_.Add();
}
inline ::CCloud_EnumerateUserApps_Response_Apps* CCloud_EnumerateUserApps_Response::add_apps() {
  ::CCloud_EnumerateUserApps_Response_Apps* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:CCloud_EnumerateUserApps_Response.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_EnumerateUserApps_Response_Apps >&
CCloud_EnumerateUserApps_Response::apps() const {
  // @@protoc_insertion_point(field_list:CCloud_EnumerateUserApps_Response.apps)
  return apps_;
}

// -------------------------------------------------------------------

// CCloud_GetAppFileChangelist_Request

// optional uint32 appid = 1 [(.description) = "App ID"];
inline bool CCloud_GetAppFileChangelist_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_GetAppFileChangelist_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_GetAppFileChangelist_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_GetAppFileChangelist_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_GetAppFileChangelist_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Request.appid)
  return _internal_appid();
}
inline void CCloud_GetAppFileChangelist_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_GetAppFileChangelist_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Request.appid)
}

// optional uint64 synced_change_number = 2 [(.description) = "Change Number to which local machine was last successfully synced"];
inline bool CCloud_GetAppFileChangelist_Request::_internal_has_synced_change_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetAppFileChangelist_Request::has_synced_change_number() const {
  return _internal_has_synced_change_number();
}
inline void CCloud_GetAppFileChangelist_Request::clear_synced_change_number() {
  synced_change_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_GetAppFileChangelist_Request::_internal_synced_change_number() const {
  return synced_change_number_;
}
inline uint64_t CCloud_GetAppFileChangelist_Request::synced_change_number() const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Request.synced_change_number)
  return _internal_synced_change_number();
}
inline void CCloud_GetAppFileChangelist_Request::_internal_set_synced_change_number(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  synced_change_number_ = value;
}
inline void CCloud_GetAppFileChangelist_Request::set_synced_change_number(uint64_t value) {
  _internal_set_synced_change_number(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Request.synced_change_number)
}

// -------------------------------------------------------------------

// CCloud_AppFileInfo

// optional string file_name = 1 [(.description) = "unqualified filename"];
inline bool CCloud_AppFileInfo::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_file_name() const {
  return _internal_has_file_name();
}
inline void CCloud_AppFileInfo::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_AppFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_AppFileInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.file_name)
}
inline std::string* CCloud_AppFileInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CCloud_AppFileInfo.file_name)
  return _s;
}
inline const std::string& CCloud_AppFileInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void CCloud_AppFileInfo::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_AppFileInfo::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_AppFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:CCloud_AppFileInfo.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_AppFileInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_AppFileInfo.file_name)
}

// optional bytes sha_file = 2 [(.description) = "SHA of file"];
inline bool CCloud_AppFileInfo::_internal_has_sha_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_sha_file() const {
  return _internal_has_sha_file();
}
inline void CCloud_AppFileInfo::clear_sha_file() {
  sha_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_AppFileInfo::sha_file() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.sha_file)
  return _internal_sha_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_AppFileInfo::set_sha_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.sha_file)
}
inline std::string* CCloud_AppFileInfo::mutable_sha_file() {
  std::string* _s = _internal_mutable_sha_file();
  // @@protoc_insertion_point(field_mutable:CCloud_AppFileInfo.sha_file)
  return _s;
}
inline const std::string& CCloud_AppFileInfo::_internal_sha_file() const {
  return sha_file_.Get();
}
inline void CCloud_AppFileInfo::_internal_set_sha_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_AppFileInfo::_internal_mutable_sha_file() {
  _has_bits_[0] |= 0x00000002u;
  return sha_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_AppFileInfo::release_sha_file() {
  // @@protoc_insertion_point(field_release:CCloud_AppFileInfo.sha_file)
  if (!_internal_has_sha_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_AppFileInfo::set_allocated_sha_file(std::string* sha_file) {
  if (sha_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_AppFileInfo.sha_file)
}

// optional uint64 time_stamp = 3 [(.description) = "server timestamp of last modification"];
inline bool CCloud_AppFileInfo::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void CCloud_AppFileInfo::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCloud_AppFileInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t CCloud_AppFileInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.time_stamp)
  return _internal_time_stamp();
}
inline void CCloud_AppFileInfo::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_stamp_ = value;
}
inline void CCloud_AppFileInfo::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.time_stamp)
}

// optional uint32 raw_file_size = 4 [(.description) = "size of raw file"];
inline bool CCloud_AppFileInfo::_internal_has_raw_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_raw_file_size() const {
  return _internal_has_raw_file_size();
}
inline void CCloud_AppFileInfo::clear_raw_file_size() {
  raw_file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCloud_AppFileInfo::_internal_raw_file_size() const {
  return raw_file_size_;
}
inline uint32_t CCloud_AppFileInfo::raw_file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.raw_file_size)
  return _internal_raw_file_size();
}
inline void CCloud_AppFileInfo::_internal_set_raw_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  raw_file_size_ = value;
}
inline void CCloud_AppFileInfo::set_raw_file_size(uint32_t value) {
  _internal_set_raw_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.raw_file_size)
}

// optional .ECloudStoragePersistState persist_state = 5 [default = k_ECloudStoragePersistStatePersisted, (.description) = "current persist state of the file"];
inline bool CCloud_AppFileInfo::_internal_has_persist_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_persist_state() const {
  return _internal_has_persist_state();
}
inline void CCloud_AppFileInfo::clear_persist_state() {
  persist_state_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ECloudStoragePersistState CCloud_AppFileInfo::_internal_persist_state() const {
  return static_cast< ::ECloudStoragePersistState >(persist_state_);
}
inline ::ECloudStoragePersistState CCloud_AppFileInfo::persist_state() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.persist_state)
  return _internal_persist_state();
}
inline void CCloud_AppFileInfo::_internal_set_persist_state(::ECloudStoragePersistState value) {
  assert(::ECloudStoragePersistState_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  persist_state_ = value;
}
inline void CCloud_AppFileInfo::set_persist_state(::ECloudStoragePersistState value) {
  _internal_set_persist_state(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.persist_state)
}

// optional uint32 platforms_to_sync = 6 [(.description) = "ERemoteStoragePlatform bits"];
inline bool CCloud_AppFileInfo::_internal_has_platforms_to_sync() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_platforms_to_sync() const {
  return _internal_has_platforms_to_sync();
}
inline void CCloud_AppFileInfo::clear_platforms_to_sync() {
  platforms_to_sync_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CCloud_AppFileInfo::_internal_platforms_to_sync() const {
  return platforms_to_sync_;
}
inline uint32_t CCloud_AppFileInfo::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.platforms_to_sync)
  return _internal_platforms_to_sync();
}
inline void CCloud_AppFileInfo::_internal_set_platforms_to_sync(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  platforms_to_sync_ = value;
}
inline void CCloud_AppFileInfo::set_platforms_to_sync(uint32_t value) {
  _internal_set_platforms_to_sync(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.platforms_to_sync)
}

// optional uint32 path_prefix_index = 7 [(.description) = "index into string table of path prefixes"];
inline bool CCloud_AppFileInfo::_internal_has_path_prefix_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_path_prefix_index() const {
  return _internal_has_path_prefix_index();
}
inline void CCloud_AppFileInfo::clear_path_prefix_index() {
  path_prefix_index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CCloud_AppFileInfo::_internal_path_prefix_index() const {
  return path_prefix_index_;
}
inline uint32_t CCloud_AppFileInfo::path_prefix_index() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.path_prefix_index)
  return _internal_path_prefix_index();
}
inline void CCloud_AppFileInfo::_internal_set_path_prefix_index(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  path_prefix_index_ = value;
}
inline void CCloud_AppFileInfo::set_path_prefix_index(uint32_t value) {
  _internal_set_path_prefix_index(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.path_prefix_index)
}

// optional uint32 machine_name_index = 8 [(.description) = "what machine last modified this file"];
inline bool CCloud_AppFileInfo::_internal_has_machine_name_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCloud_AppFileInfo::has_machine_name_index() const {
  return _internal_has_machine_name_index();
}
inline void CCloud_AppFileInfo::clear_machine_name_index() {
  machine_name_index_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CCloud_AppFileInfo::_internal_machine_name_index() const {
  return machine_name_index_;
}
inline uint32_t CCloud_AppFileInfo::machine_name_index() const {
  // @@protoc_insertion_point(field_get:CCloud_AppFileInfo.machine_name_index)
  return _internal_machine_name_index();
}
inline void CCloud_AppFileInfo::_internal_set_machine_name_index(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  machine_name_index_ = value;
}
inline void CCloud_AppFileInfo::set_machine_name_index(uint32_t value) {
  _internal_set_machine_name_index(value);
  // @@protoc_insertion_point(field_set:CCloud_AppFileInfo.machine_name_index)
}

// -------------------------------------------------------------------

// CCloud_GetAppFileChangelist_Response

// optional uint64 current_change_number = 1 [(.description) = "Change Number current on server"];
inline bool CCloud_GetAppFileChangelist_Response::_internal_has_current_change_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetAppFileChangelist_Response::has_current_change_number() const {
  return _internal_has_current_change_number();
}
inline void CCloud_GetAppFileChangelist_Response::clear_current_change_number() {
  current_change_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_GetAppFileChangelist_Response::_internal_current_change_number() const {
  return current_change_number_;
}
inline uint64_t CCloud_GetAppFileChangelist_Response::current_change_number() const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.current_change_number)
  return _internal_current_change_number();
}
inline void CCloud_GetAppFileChangelist_Response::_internal_set_current_change_number(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  current_change_number_ = value;
}
inline void CCloud_GetAppFileChangelist_Response::set_current_change_number(uint64_t value) {
  _internal_set_current_change_number(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.current_change_number)
}

// repeated .CCloud_AppFileInfo files = 2 [(.description) = "List of files; may be the full list of extant/deleted files, or just a delta from the client list"];
inline int CCloud_GetAppFileChangelist_Response::_internal_files_size() const {
  return files_.size();
}
inline int CCloud_GetAppFileChangelist_Response::files_size() const {
  return _internal_files_size();
}
inline void CCloud_GetAppFileChangelist_Response::clear_files() {
  files_.Clear();
}
inline ::CCloud_AppFileInfo* CCloud_GetAppFileChangelist_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_GetAppFileChangelist_Response.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_AppFileInfo >*
CCloud_GetAppFileChangelist_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_GetAppFileChangelist_Response.files)
  return &files_;
}
inline const ::CCloud_AppFileInfo& CCloud_GetAppFileChangelist_Response::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CCloud_AppFileInfo& CCloud_GetAppFileChangelist_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.files)
  return _internal_files(index);
}
inline ::CCloud_AppFileInfo* CCloud_GetAppFileChangelist_Response::_internal_add_files() {
  return files_.Add();
}
inline ::CCloud_AppFileInfo* CCloud_GetAppFileChangelist_Response::add_files() {
  ::CCloud_AppFileInfo* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CCloud_GetAppFileChangelist_Response.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_AppFileInfo >&
CCloud_GetAppFileChangelist_Response::files() const {
  // @@protoc_insertion_point(field_list:CCloud_GetAppFileChangelist_Response.files)
  return files_;
}

// optional bool is_only_delta = 3 [(.description) = "If true, \'files\' omits any files that have not changed since client\'s change ID"];
inline bool CCloud_GetAppFileChangelist_Response::_internal_has_is_only_delta() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_GetAppFileChangelist_Response::has_is_only_delta() const {
  return _internal_has_is_only_delta();
}
inline void CCloud_GetAppFileChangelist_Response::clear_is_only_delta() {
  is_only_delta_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_GetAppFileChangelist_Response::_internal_is_only_delta() const {
  return is_only_delta_;
}
inline bool CCloud_GetAppFileChangelist_Response::is_only_delta() const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.is_only_delta)
  return _internal_is_only_delta();
}
inline void CCloud_GetAppFileChangelist_Response::_internal_set_is_only_delta(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_only_delta_ = value;
}
inline void CCloud_GetAppFileChangelist_Response::set_is_only_delta(bool value) {
  _internal_set_is_only_delta(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.is_only_delta)
}

// repeated string path_prefixes = 4 [(.description) = "string table of path prefixes"];
inline int CCloud_GetAppFileChangelist_Response::_internal_path_prefixes_size() const {
  return path_prefixes_.size();
}
inline int CCloud_GetAppFileChangelist_Response::path_prefixes_size() const {
  return _internal_path_prefixes_size();
}
inline void CCloud_GetAppFileChangelist_Response::clear_path_prefixes() {
  path_prefixes_.Clear();
}
inline std::string* CCloud_GetAppFileChangelist_Response::add_path_prefixes() {
  std::string* _s = _internal_add_path_prefixes();
  // @@protoc_insertion_point(field_add_mutable:CCloud_GetAppFileChangelist_Response.path_prefixes)
  return _s;
}
inline const std::string& CCloud_GetAppFileChangelist_Response::_internal_path_prefixes(int index) const {
  return path_prefixes_.Get(index);
}
inline const std::string& CCloud_GetAppFileChangelist_Response::path_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.path_prefixes)
  return _internal_path_prefixes(index);
}
inline std::string* CCloud_GetAppFileChangelist_Response::mutable_path_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_GetAppFileChangelist_Response.path_prefixes)
  return path_prefixes_.Mutable(index);
}
inline void CCloud_GetAppFileChangelist_Response::set_path_prefixes(int index, const std::string& value) {
  path_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::set_path_prefixes(int index, std::string&& value) {
  path_prefixes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::set_path_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::set_path_prefixes(int index, const char* value, size_t size) {
  path_prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline std::string* CCloud_GetAppFileChangelist_Response::_internal_add_path_prefixes() {
  return path_prefixes_.Add();
}
inline void CCloud_GetAppFileChangelist_Response::add_path_prefixes(const std::string& value) {
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::add_path_prefixes(std::string&& value) {
  path_prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::add_path_prefixes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline void CCloud_GetAppFileChangelist_Response::add_path_prefixes(const char* value, size_t size) {
  path_prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_GetAppFileChangelist_Response.path_prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_GetAppFileChangelist_Response::path_prefixes() const {
  // @@protoc_insertion_point(field_list:CCloud_GetAppFileChangelist_Response.path_prefixes)
  return path_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_GetAppFileChangelist_Response::mutable_path_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_GetAppFileChangelist_Response.path_prefixes)
  return &path_prefixes_;
}

// repeated string machine_names = 5 [(.description) = "string table of machine names"];
inline int CCloud_GetAppFileChangelist_Response::_internal_machine_names_size() const {
  return machine_names_.size();
}
inline int CCloud_GetAppFileChangelist_Response::machine_names_size() const {
  return _internal_machine_names_size();
}
inline void CCloud_GetAppFileChangelist_Response::clear_machine_names() {
  machine_names_.Clear();
}
inline std::string* CCloud_GetAppFileChangelist_Response::add_machine_names() {
  std::string* _s = _internal_add_machine_names();
  // @@protoc_insertion_point(field_add_mutable:CCloud_GetAppFileChangelist_Response.machine_names)
  return _s;
}
inline const std::string& CCloud_GetAppFileChangelist_Response::_internal_machine_names(int index) const {
  return machine_names_.Get(index);
}
inline const std::string& CCloud_GetAppFileChangelist_Response::machine_names(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.machine_names)
  return _internal_machine_names(index);
}
inline std::string* CCloud_GetAppFileChangelist_Response::mutable_machine_names(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_GetAppFileChangelist_Response.machine_names)
  return machine_names_.Mutable(index);
}
inline void CCloud_GetAppFileChangelist_Response::set_machine_names(int index, const std::string& value) {
  machine_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::set_machine_names(int index, std::string&& value) {
  machine_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::set_machine_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  machine_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::set_machine_names(int index, const char* value, size_t size) {
  machine_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline std::string* CCloud_GetAppFileChangelist_Response::_internal_add_machine_names() {
  return machine_names_.Add();
}
inline void CCloud_GetAppFileChangelist_Response::add_machine_names(const std::string& value) {
  machine_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::add_machine_names(std::string&& value) {
  machine_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::add_machine_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  machine_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline void CCloud_GetAppFileChangelist_Response::add_machine_names(const char* value, size_t size) {
  machine_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCloud_GetAppFileChangelist_Response.machine_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCloud_GetAppFileChangelist_Response::machine_names() const {
  // @@protoc_insertion_point(field_list:CCloud_GetAppFileChangelist_Response.machine_names)
  return machine_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCloud_GetAppFileChangelist_Response::mutable_machine_names() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_GetAppFileChangelist_Response.machine_names)
  return &machine_names_;
}

// optional uint64 app_buildid_hwm = 6 [(.description) = "highest app build ID which has uploaded data"];
inline bool CCloud_GetAppFileChangelist_Response::_internal_has_app_buildid_hwm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_GetAppFileChangelist_Response::has_app_buildid_hwm() const {
  return _internal_has_app_buildid_hwm();
}
inline void CCloud_GetAppFileChangelist_Response::clear_app_buildid_hwm() {
  app_buildid_hwm_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_GetAppFileChangelist_Response::_internal_app_buildid_hwm() const {
  return app_buildid_hwm_;
}
inline uint64_t CCloud_GetAppFileChangelist_Response::app_buildid_hwm() const {
  // @@protoc_insertion_point(field_get:CCloud_GetAppFileChangelist_Response.app_buildid_hwm)
  return _internal_app_buildid_hwm();
}
inline void CCloud_GetAppFileChangelist_Response::_internal_set_app_buildid_hwm(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_buildid_hwm_ = value;
}
inline void CCloud_GetAppFileChangelist_Response::set_app_buildid_hwm(uint64_t value) {
  _internal_set_app_buildid_hwm(value);
  // @@protoc_insertion_point(field_set:CCloud_GetAppFileChangelist_Response.app_buildid_hwm)
}

// -------------------------------------------------------------------

// CCloud_AppSessionSuspend_Request

// optional uint32 appid = 1;
inline bool CCloud_AppSessionSuspend_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_AppSessionSuspend_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_AppSessionSuspend_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_AppSessionSuspend_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_AppSessionSuspend_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionSuspend_Request.appid)
  return _internal_appid();
}
inline void CCloud_AppSessionSuspend_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CCloud_AppSessionSuspend_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_AppSessionSuspend_Request.appid)
}

// optional uint64 client_id = 2;
inline bool CCloud_AppSessionSuspend_Request::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppSessionSuspend_Request::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_AppSessionSuspend_Request::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_AppSessionSuspend_Request::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_AppSessionSuspend_Request::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionSuspend_Request.client_id)
  return _internal_client_id();
}
inline void CCloud_AppSessionSuspend_Request::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void CCloud_AppSessionSuspend_Request::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_AppSessionSuspend_Request.client_id)
}

// optional string machine_name = 3;
inline bool CCloud_AppSessionSuspend_Request::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppSessionSuspend_Request::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CCloud_AppSessionSuspend_Request::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_AppSessionSuspend_Request::machine_name() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionSuspend_Request.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_AppSessionSuspend_Request::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_AppSessionSuspend_Request.machine_name)
}
inline std::string* CCloud_AppSessionSuspend_Request::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CCloud_AppSessionSuspend_Request.machine_name)
  return _s;
}
inline const std::string& CCloud_AppSessionSuspend_Request::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CCloud_AppSessionSuspend_Request::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_AppSessionSuspend_Request::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_AppSessionSuspend_Request::release_machine_name() {
  // @@protoc_insertion_point(field_release:CCloud_AppSessionSuspend_Request.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_AppSessionSuspend_Request::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_AppSessionSuspend_Request.machine_name)
}

// optional bool cloud_sync_completed = 4;
inline bool CCloud_AppSessionSuspend_Request::_internal_has_cloud_sync_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_AppSessionSuspend_Request::has_cloud_sync_completed() const {
  return _internal_has_cloud_sync_completed();
}
inline void CCloud_AppSessionSuspend_Request::clear_cloud_sync_completed() {
  cloud_sync_completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCloud_AppSessionSuspend_Request::_internal_cloud_sync_completed() const {
  return cloud_sync_completed_;
}
inline bool CCloud_AppSessionSuspend_Request::cloud_sync_completed() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionSuspend_Request.cloud_sync_completed)
  return _internal_cloud_sync_completed();
}
inline void CCloud_AppSessionSuspend_Request::_internal_set_cloud_sync_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  cloud_sync_completed_ = value;
}
inline void CCloud_AppSessionSuspend_Request::set_cloud_sync_completed(bool value) {
  _internal_set_cloud_sync_completed(value);
  // @@protoc_insertion_point(field_set:CCloud_AppSessionSuspend_Request.cloud_sync_completed)
}

// -------------------------------------------------------------------

// CCloud_AppSessionSuspend_Response

// -------------------------------------------------------------------

// CCloud_AppSessionResume_Request

// optional uint32 appid = 1;
inline bool CCloud_AppSessionResume_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppSessionResume_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_AppSessionResume_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_AppSessionResume_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_AppSessionResume_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionResume_Request.appid)
  return _internal_appid();
}
inline void CCloud_AppSessionResume_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_AppSessionResume_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_AppSessionResume_Request.appid)
}

// optional uint64 client_id = 2;
inline bool CCloud_AppSessionResume_Request::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppSessionResume_Request::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_AppSessionResume_Request::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_AppSessionResume_Request::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_AppSessionResume_Request::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_AppSessionResume_Request.client_id)
  return _internal_client_id();
}
inline void CCloud_AppSessionResume_Request::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void CCloud_AppSessionResume_Request::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_AppSessionResume_Request.client_id)
}

// -------------------------------------------------------------------

// CCloud_AppSessionResume_Response

// -------------------------------------------------------------------

// CCloud_AppLaunchIntent_Request

// optional uint32 appid = 1;
inline bool CCloud_AppLaunchIntent_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_AppLaunchIntent_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_AppLaunchIntent_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_AppLaunchIntent_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_AppLaunchIntent_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_AppLaunchIntent_Request.appid)
  return _internal_appid();
}
inline void CCloud_AppLaunchIntent_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CCloud_AppLaunchIntent_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_AppLaunchIntent_Request.appid)
}

// optional uint64 client_id = 2;
inline bool CCloud_AppLaunchIntent_Request::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppLaunchIntent_Request::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_AppLaunchIntent_Request::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCloud_AppLaunchIntent_Request::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_AppLaunchIntent_Request::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_AppLaunchIntent_Request.client_id)
  return _internal_client_id();
}
inline void CCloud_AppLaunchIntent_Request::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void CCloud_AppLaunchIntent_Request::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_AppLaunchIntent_Request.client_id)
}

// optional string machine_name = 3;
inline bool CCloud_AppLaunchIntent_Request::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppLaunchIntent_Request::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CCloud_AppLaunchIntent_Request::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_AppLaunchIntent_Request::machine_name() const {
  // @@protoc_insertion_point(field_get:CCloud_AppLaunchIntent_Request.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_AppLaunchIntent_Request::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_AppLaunchIntent_Request.machine_name)
}
inline std::string* CCloud_AppLaunchIntent_Request::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CCloud_AppLaunchIntent_Request.machine_name)
  return _s;
}
inline const std::string& CCloud_AppLaunchIntent_Request::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CCloud_AppLaunchIntent_Request::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_AppLaunchIntent_Request::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_AppLaunchIntent_Request::release_machine_name() {
  // @@protoc_insertion_point(field_release:CCloud_AppLaunchIntent_Request.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_AppLaunchIntent_Request::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_AppLaunchIntent_Request.machine_name)
}

// optional bool ignore_pending_operations = 4;
inline bool CCloud_AppLaunchIntent_Request::_internal_has_ignore_pending_operations() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_AppLaunchIntent_Request::has_ignore_pending_operations() const {
  return _internal_has_ignore_pending_operations();
}
inline void CCloud_AppLaunchIntent_Request::clear_ignore_pending_operations() {
  ignore_pending_operations_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCloud_AppLaunchIntent_Request::_internal_ignore_pending_operations() const {
  return ignore_pending_operations_;
}
inline bool CCloud_AppLaunchIntent_Request::ignore_pending_operations() const {
  // @@protoc_insertion_point(field_get:CCloud_AppLaunchIntent_Request.ignore_pending_operations)
  return _internal_ignore_pending_operations();
}
inline void CCloud_AppLaunchIntent_Request::_internal_set_ignore_pending_operations(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ignore_pending_operations_ = value;
}
inline void CCloud_AppLaunchIntent_Request::set_ignore_pending_operations(bool value) {
  _internal_set_ignore_pending_operations(value);
  // @@protoc_insertion_point(field_set:CCloud_AppLaunchIntent_Request.ignore_pending_operations)
}

// -------------------------------------------------------------------

// CCloud_AppLaunchIntent_Response

// repeated .CCloud_PendingRemoteOperation pending_remote_operations = 1 [(.description) = "pending remote operations you should be aware of"];
inline int CCloud_AppLaunchIntent_Response::_internal_pending_remote_operations_size() const {
  return pending_remote_operations_.size();
}
inline int CCloud_AppLaunchIntent_Response::pending_remote_operations_size() const {
  return _internal_pending_remote_operations_size();
}
inline ::CCloud_PendingRemoteOperation* CCloud_AppLaunchIntent_Response::mutable_pending_remote_operations(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_AppLaunchIntent_Response.pending_remote_operations)
  return pending_remote_operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >*
CCloud_AppLaunchIntent_Response::mutable_pending_remote_operations() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_AppLaunchIntent_Response.pending_remote_operations)
  return &pending_remote_operations_;
}
inline const ::CCloud_PendingRemoteOperation& CCloud_AppLaunchIntent_Response::_internal_pending_remote_operations(int index) const {
  return pending_remote_operations_.Get(index);
}
inline const ::CCloud_PendingRemoteOperation& CCloud_AppLaunchIntent_Response::pending_remote_operations(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_AppLaunchIntent_Response.pending_remote_operations)
  return _internal_pending_remote_operations(index);
}
inline ::CCloud_PendingRemoteOperation* CCloud_AppLaunchIntent_Response::_internal_add_pending_remote_operations() {
  return pending_remote_operations_.Add();
}
inline ::CCloud_PendingRemoteOperation* CCloud_AppLaunchIntent_Response::add_pending_remote_operations() {
  ::CCloud_PendingRemoteOperation* _add = _internal_add_pending_remote_operations();
  // @@protoc_insertion_point(field_add:CCloud_AppLaunchIntent_Response.pending_remote_operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >&
CCloud_AppLaunchIntent_Response::pending_remote_operations() const {
  // @@protoc_insertion_point(field_list:CCloud_AppLaunchIntent_Response.pending_remote_operations)
  return pending_remote_operations_;
}

// -------------------------------------------------------------------

// CCloud_AppExitSyncDone_Notification

// optional uint32 appid = 1;
inline bool CCloud_AppExitSyncDone_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppExitSyncDone_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_AppExitSyncDone_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_AppExitSyncDone_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_AppExitSyncDone_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_AppExitSyncDone_Notification.appid)
  return _internal_appid();
}
inline void CCloud_AppExitSyncDone_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_AppExitSyncDone_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_AppExitSyncDone_Notification.appid)
}

// optional uint64 client_id = 2;
inline bool CCloud_AppExitSyncDone_Notification::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppExitSyncDone_Notification::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_AppExitSyncDone_Notification::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_AppExitSyncDone_Notification::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_AppExitSyncDone_Notification::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_AppExitSyncDone_Notification.client_id)
  return _internal_client_id();
}
inline void CCloud_AppExitSyncDone_Notification::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void CCloud_AppExitSyncDone_Notification::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_AppExitSyncDone_Notification.client_id)
}

// optional bool uploads_completed = 3;
inline bool CCloud_AppExitSyncDone_Notification::_internal_has_uploads_completed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_AppExitSyncDone_Notification::has_uploads_completed() const {
  return _internal_has_uploads_completed();
}
inline void CCloud_AppExitSyncDone_Notification::clear_uploads_completed() {
  uploads_completed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CCloud_AppExitSyncDone_Notification::_internal_uploads_completed() const {
  return uploads_completed_;
}
inline bool CCloud_AppExitSyncDone_Notification::uploads_completed() const {
  // @@protoc_insertion_point(field_get:CCloud_AppExitSyncDone_Notification.uploads_completed)
  return _internal_uploads_completed();
}
inline void CCloud_AppExitSyncDone_Notification::_internal_set_uploads_completed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  uploads_completed_ = value;
}
inline void CCloud_AppExitSyncDone_Notification::set_uploads_completed(bool value) {
  _internal_set_uploads_completed(value);
  // @@protoc_insertion_point(field_set:CCloud_AppExitSyncDone_Notification.uploads_completed)
}

// optional bool uploads_required = 4;
inline bool CCloud_AppExitSyncDone_Notification::_internal_has_uploads_required() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_AppExitSyncDone_Notification::has_uploads_required() const {
  return _internal_has_uploads_required();
}
inline void CCloud_AppExitSyncDone_Notification::clear_uploads_required() {
  uploads_required_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCloud_AppExitSyncDone_Notification::_internal_uploads_required() const {
  return uploads_required_;
}
inline bool CCloud_AppExitSyncDone_Notification::uploads_required() const {
  // @@protoc_insertion_point(field_get:CCloud_AppExitSyncDone_Notification.uploads_required)
  return _internal_uploads_required();
}
inline void CCloud_AppExitSyncDone_Notification::_internal_set_uploads_required(bool value) {
  _has_bits_[0] |= 0x00000008u;
  uploads_required_ = value;
}
inline void CCloud_AppExitSyncDone_Notification::set_uploads_required(bool value) {
  _internal_set_uploads_required(value);
  // @@protoc_insertion_point(field_set:CCloud_AppExitSyncDone_Notification.uploads_required)
}

// -------------------------------------------------------------------

// CCloud_ClientGetAppQuotaUsage_Request

// optional uint32 appid = 1;
inline bool CCloud_ClientGetAppQuotaUsage_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientGetAppQuotaUsage_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_ClientGetAppQuotaUsage_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientGetAppQuotaUsage_Request.appid)
  return _internal_appid();
}
inline void CCloud_ClientGetAppQuotaUsage_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_ClientGetAppQuotaUsage_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientGetAppQuotaUsage_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_ClientGetAppQuotaUsage_Response

// optional uint32 existing_files = 1;
inline bool CCloud_ClientGetAppQuotaUsage_Response::_internal_has_existing_files() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_ClientGetAppQuotaUsage_Response::has_existing_files() const {
  return _internal_has_existing_files();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::clear_existing_files() {
  existing_files_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Response::_internal_existing_files() const {
  return existing_files_;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Response::existing_files() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientGetAppQuotaUsage_Response.existing_files)
  return _internal_existing_files();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::_internal_set_existing_files(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  existing_files_ = value;
}
inline void CCloud_ClientGetAppQuotaUsage_Response::set_existing_files(uint32_t value) {
  _internal_set_existing_files(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientGetAppQuotaUsage_Response.existing_files)
}

// optional uint64 existing_bytes = 2;
inline bool CCloud_ClientGetAppQuotaUsage_Response::_internal_has_existing_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientGetAppQuotaUsage_Response::has_existing_bytes() const {
  return _internal_has_existing_bytes();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::clear_existing_bytes() {
  existing_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_ClientGetAppQuotaUsage_Response::_internal_existing_bytes() const {
  return existing_bytes_;
}
inline uint64_t CCloud_ClientGetAppQuotaUsage_Response::existing_bytes() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientGetAppQuotaUsage_Response.existing_bytes)
  return _internal_existing_bytes();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::_internal_set_existing_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  existing_bytes_ = value;
}
inline void CCloud_ClientGetAppQuotaUsage_Response::set_existing_bytes(uint64_t value) {
  _internal_set_existing_bytes(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientGetAppQuotaUsage_Response.existing_bytes)
}

// optional uint32 max_num_files = 3;
inline bool CCloud_ClientGetAppQuotaUsage_Response::_internal_has_max_num_files() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_ClientGetAppQuotaUsage_Response::has_max_num_files() const {
  return _internal_has_max_num_files();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::clear_max_num_files() {
  max_num_files_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Response::_internal_max_num_files() const {
  return max_num_files_;
}
inline uint32_t CCloud_ClientGetAppQuotaUsage_Response::max_num_files() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientGetAppQuotaUsage_Response.max_num_files)
  return _internal_max_num_files();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::_internal_set_max_num_files(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  max_num_files_ = value;
}
inline void CCloud_ClientGetAppQuotaUsage_Response::set_max_num_files(uint32_t value) {
  _internal_set_max_num_files(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientGetAppQuotaUsage_Response.max_num_files)
}

// optional uint64 max_num_bytes = 4;
inline bool CCloud_ClientGetAppQuotaUsage_Response::_internal_has_max_num_bytes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_ClientGetAppQuotaUsage_Response::has_max_num_bytes() const {
  return _internal_has_max_num_bytes();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::clear_max_num_bytes() {
  max_num_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCloud_ClientGetAppQuotaUsage_Response::_internal_max_num_bytes() const {
  return max_num_bytes_;
}
inline uint64_t CCloud_ClientGetAppQuotaUsage_Response::max_num_bytes() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientGetAppQuotaUsage_Response.max_num_bytes)
  return _internal_max_num_bytes();
}
inline void CCloud_ClientGetAppQuotaUsage_Response::_internal_set_max_num_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  max_num_bytes_ = value;
}
inline void CCloud_ClientGetAppQuotaUsage_Response::set_max_num_bytes(uint64_t value) {
  _internal_set_max_num_bytes(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientGetAppQuotaUsage_Response.max_num_bytes)
}

// -------------------------------------------------------------------

// CCloud_AppCloudStateChange_Notification

// optional uint32 appid = 1 [(.description) = "App which has had a change in cloud state"];
inline bool CCloud_AppCloudStateChange_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_AppCloudStateChange_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_AppCloudStateChange_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCloud_AppCloudStateChange_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CCloud_AppCloudStateChange_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_AppCloudStateChange_Notification.appid)
  return _internal_appid();
}
inline void CCloud_AppCloudStateChange_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_AppCloudStateChange_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_AppCloudStateChange_Notification.appid)
}

// optional uint64 app_change_number = 2 [(.description) = "New App Change Number"];
inline bool CCloud_AppCloudStateChange_Notification::_internal_has_app_change_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_AppCloudStateChange_Notification::has_app_change_number() const {
  return _internal_has_app_change_number();
}
inline void CCloud_AppCloudStateChange_Notification::clear_app_change_number() {
  app_change_number_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_AppCloudStateChange_Notification::_internal_app_change_number() const {
  return app_change_number_;
}
inline uint64_t CCloud_AppCloudStateChange_Notification::app_change_number() const {
  // @@protoc_insertion_point(field_get:CCloud_AppCloudStateChange_Notification.app_change_number)
  return _internal_app_change_number();
}
inline void CCloud_AppCloudStateChange_Notification::_internal_set_app_change_number(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_change_number_ = value;
}
inline void CCloud_AppCloudStateChange_Notification::set_app_change_number(uint64_t value) {
  _internal_set_app_change_number(value);
  // @@protoc_insertion_point(field_set:CCloud_AppCloudStateChange_Notification.app_change_number)
}

// -------------------------------------------------------------------

// CCloud_ClientLogUploadRequest_Notification

// optional uint64 request_id = 1;
inline bool CCloud_ClientLogUploadRequest_Notification::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_ClientLogUploadRequest_Notification::has_request_id() const {
  return _internal_has_request_id();
}
inline void CCloud_ClientLogUploadRequest_Notification::clear_request_id() {
  request_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCloud_ClientLogUploadRequest_Notification::_internal_request_id() const {
  return request_id_;
}
inline uint64_t CCloud_ClientLogUploadRequest_Notification::request_id() const {
  // @@protoc_insertion_point(field_get:CCloud_ClientLogUploadRequest_Notification.request_id)
  return _internal_request_id();
}
inline void CCloud_ClientLogUploadRequest_Notification::_internal_set_request_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
}
inline void CCloud_ClientLogUploadRequest_Notification::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CCloud_ClientLogUploadRequest_Notification.request_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamclient_2eproto
