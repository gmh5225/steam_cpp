// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_timedtrial.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftimedtrial_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftimedtrial_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5ftimedtrial_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ftimedtrial_2esteamclient_2eproto;
class CTimedTrial_GetTimeRemaining_Request;
struct CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal;
extern CTimedTrial_GetTimeRemaining_RequestDefaultTypeInternal _CTimedTrial_GetTimeRemaining_Request_default_instance_;
class CTimedTrial_GetTimeRemaining_Response;
struct CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal;
extern CTimedTrial_GetTimeRemaining_ResponseDefaultTypeInternal _CTimedTrial_GetTimeRemaining_Response_default_instance_;
class CTimedTrial_RecordPlaytime_Request;
struct CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal;
extern CTimedTrial_RecordPlaytime_RequestDefaultTypeInternal _CTimedTrial_RecordPlaytime_Request_default_instance_;
class CTimedTrial_RecordPlaytime_Response;
struct CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal;
extern CTimedTrial_RecordPlaytime_ResponseDefaultTypeInternal _CTimedTrial_RecordPlaytime_Response_default_instance_;
class CTimedTrial_ResetPlaytime_Request;
struct CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal;
extern CTimedTrial_ResetPlaytime_RequestDefaultTypeInternal _CTimedTrial_ResetPlaytime_Request_default_instance_;
class CTimedTrial_ResetPlaytime_Response;
struct CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal;
extern CTimedTrial_ResetPlaytime_ResponseDefaultTypeInternal _CTimedTrial_ResetPlaytime_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CTimedTrial_GetTimeRemaining_Request* Arena::CreateMaybeMessage<::CTimedTrial_GetTimeRemaining_Request>(Arena*);
template<> ::CTimedTrial_GetTimeRemaining_Response* Arena::CreateMaybeMessage<::CTimedTrial_GetTimeRemaining_Response>(Arena*);
template<> ::CTimedTrial_RecordPlaytime_Request* Arena::CreateMaybeMessage<::CTimedTrial_RecordPlaytime_Request>(Arena*);
template<> ::CTimedTrial_RecordPlaytime_Response* Arena::CreateMaybeMessage<::CTimedTrial_RecordPlaytime_Response>(Arena*);
template<> ::CTimedTrial_ResetPlaytime_Request* Arena::CreateMaybeMessage<::CTimedTrial_ResetPlaytime_Request>(Arena*);
template<> ::CTimedTrial_ResetPlaytime_Response* Arena::CreateMaybeMessage<::CTimedTrial_ResetPlaytime_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CTimedTrial_GetTimeRemaining_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_GetTimeRemaining_Request) */ {
 public:
  inline CTimedTrial_GetTimeRemaining_Request() : CTimedTrial_GetTimeRemaining_Request(nullptr) {}
  ~CTimedTrial_GetTimeRemaining_Request() override;
  explicit constexpr CTimedTrial_GetTimeRemaining_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_GetTimeRemaining_Request(const CTimedTrial_GetTimeRemaining_Request& from);
  CTimedTrial_GetTimeRemaining_Request(CTimedTrial_GetTimeRemaining_Request&& from) noexcept
    : CTimedTrial_GetTimeRemaining_Request() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_GetTimeRemaining_Request& operator=(const CTimedTrial_GetTimeRemaining_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_GetTimeRemaining_Request& operator=(CTimedTrial_GetTimeRemaining_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_GetTimeRemaining_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_GetTimeRemaining_Request* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_GetTimeRemaining_Request*>(
               &_CTimedTrial_GetTimeRemaining_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTimedTrial_GetTimeRemaining_Request& a, CTimedTrial_GetTimeRemaining_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_GetTimeRemaining_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_GetTimeRemaining_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_GetTimeRemaining_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_GetTimeRemaining_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_GetTimeRemaining_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_GetTimeRemaining_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_GetTimeRemaining_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_GetTimeRemaining_Request";
  }
  protected:
  explicit CTimedTrial_GetTimeRemaining_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_GetTimeRemaining_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTimedTrial_GetTimeRemaining_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_GetTimeRemaining_Response) */ {
 public:
  inline CTimedTrial_GetTimeRemaining_Response() : CTimedTrial_GetTimeRemaining_Response(nullptr) {}
  ~CTimedTrial_GetTimeRemaining_Response() override;
  explicit constexpr CTimedTrial_GetTimeRemaining_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_GetTimeRemaining_Response(const CTimedTrial_GetTimeRemaining_Response& from);
  CTimedTrial_GetTimeRemaining_Response(CTimedTrial_GetTimeRemaining_Response&& from) noexcept
    : CTimedTrial_GetTimeRemaining_Response() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_GetTimeRemaining_Response& operator=(const CTimedTrial_GetTimeRemaining_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_GetTimeRemaining_Response& operator=(CTimedTrial_GetTimeRemaining_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_GetTimeRemaining_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_GetTimeRemaining_Response* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_GetTimeRemaining_Response*>(
               &_CTimedTrial_GetTimeRemaining_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CTimedTrial_GetTimeRemaining_Response& a, CTimedTrial_GetTimeRemaining_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_GetTimeRemaining_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_GetTimeRemaining_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_GetTimeRemaining_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_GetTimeRemaining_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_GetTimeRemaining_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_GetTimeRemaining_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_GetTimeRemaining_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_GetTimeRemaining_Response";
  }
  protected:
  explicit CTimedTrial_GetTimeRemaining_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsPlayedFieldNumber = 1,
    kSecondsAllowedFieldNumber = 2,
    kPackageidFieldNumber = 3,
    kMastersubAppidFieldNumber = 4,
  };
  // optional uint32 seconds_played = 1;
  bool has_seconds_played() const;
  private:
  bool _internal_has_seconds_played() const;
  public:
  void clear_seconds_played();
  uint32_t seconds_played() const;
  void set_seconds_played(uint32_t value);
  private:
  uint32_t _internal_seconds_played() const;
  void _internal_set_seconds_played(uint32_t value);
  public:

  // optional uint32 seconds_allowed = 2;
  bool has_seconds_allowed() const;
  private:
  bool _internal_has_seconds_allowed() const;
  public:
  void clear_seconds_allowed();
  uint32_t seconds_allowed() const;
  void set_seconds_allowed(uint32_t value);
  private:
  uint32_t _internal_seconds_allowed() const;
  void _internal_set_seconds_allowed(uint32_t value);
  public:

  // optional uint32 packageid = 3;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  uint32_t packageid() const;
  void set_packageid(uint32_t value);
  private:
  uint32_t _internal_packageid() const;
  void _internal_set_packageid(uint32_t value);
  public:

  // optional uint32 mastersub_appid = 4;
  bool has_mastersub_appid() const;
  private:
  bool _internal_has_mastersub_appid() const;
  public:
  void clear_mastersub_appid();
  uint32_t mastersub_appid() const;
  void set_mastersub_appid(uint32_t value);
  private:
  uint32_t _internal_mastersub_appid() const;
  void _internal_set_mastersub_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_GetTimeRemaining_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t seconds_played_;
  uint32_t seconds_allowed_;
  uint32_t packageid_;
  uint32_t mastersub_appid_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTimedTrial_RecordPlaytime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_RecordPlaytime_Request) */ {
 public:
  inline CTimedTrial_RecordPlaytime_Request() : CTimedTrial_RecordPlaytime_Request(nullptr) {}
  ~CTimedTrial_RecordPlaytime_Request() override;
  explicit constexpr CTimedTrial_RecordPlaytime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_RecordPlaytime_Request(const CTimedTrial_RecordPlaytime_Request& from);
  CTimedTrial_RecordPlaytime_Request(CTimedTrial_RecordPlaytime_Request&& from) noexcept
    : CTimedTrial_RecordPlaytime_Request() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_RecordPlaytime_Request& operator=(const CTimedTrial_RecordPlaytime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_RecordPlaytime_Request& operator=(CTimedTrial_RecordPlaytime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_RecordPlaytime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_RecordPlaytime_Request* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_RecordPlaytime_Request*>(
               &_CTimedTrial_RecordPlaytime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CTimedTrial_RecordPlaytime_Request& a, CTimedTrial_RecordPlaytime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_RecordPlaytime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_RecordPlaytime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_RecordPlaytime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_RecordPlaytime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_RecordPlaytime_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_RecordPlaytime_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_RecordPlaytime_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_RecordPlaytime_Request";
  }
  protected:
  explicit CTimedTrial_RecordPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kSecondsPlayedFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 seconds_played = 2;
  bool has_seconds_played() const;
  private:
  bool _internal_has_seconds_played() const;
  public:
  void clear_seconds_played();
  uint32_t seconds_played() const;
  void set_seconds_played(uint32_t value);
  private:
  uint32_t _internal_seconds_played() const;
  void _internal_set_seconds_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_RecordPlaytime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t seconds_played_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTimedTrial_RecordPlaytime_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_RecordPlaytime_Response) */ {
 public:
  inline CTimedTrial_RecordPlaytime_Response() : CTimedTrial_RecordPlaytime_Response(nullptr) {}
  ~CTimedTrial_RecordPlaytime_Response() override;
  explicit constexpr CTimedTrial_RecordPlaytime_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_RecordPlaytime_Response(const CTimedTrial_RecordPlaytime_Response& from);
  CTimedTrial_RecordPlaytime_Response(CTimedTrial_RecordPlaytime_Response&& from) noexcept
    : CTimedTrial_RecordPlaytime_Response() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_RecordPlaytime_Response& operator=(const CTimedTrial_RecordPlaytime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_RecordPlaytime_Response& operator=(CTimedTrial_RecordPlaytime_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_RecordPlaytime_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_RecordPlaytime_Response* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_RecordPlaytime_Response*>(
               &_CTimedTrial_RecordPlaytime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CTimedTrial_RecordPlaytime_Response& a, CTimedTrial_RecordPlaytime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_RecordPlaytime_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_RecordPlaytime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_RecordPlaytime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_RecordPlaytime_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_RecordPlaytime_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_RecordPlaytime_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_RecordPlaytime_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_RecordPlaytime_Response";
  }
  protected:
  explicit CTimedTrial_RecordPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsPlayedFieldNumber = 1,
    kSecondsAllowedFieldNumber = 2,
  };
  // optional uint32 seconds_played = 1;
  bool has_seconds_played() const;
  private:
  bool _internal_has_seconds_played() const;
  public:
  void clear_seconds_played();
  uint32_t seconds_played() const;
  void set_seconds_played(uint32_t value);
  private:
  uint32_t _internal_seconds_played() const;
  void _internal_set_seconds_played(uint32_t value);
  public:

  // optional uint32 seconds_allowed = 2;
  bool has_seconds_allowed() const;
  private:
  bool _internal_has_seconds_allowed() const;
  public:
  void clear_seconds_allowed();
  uint32_t seconds_allowed() const;
  void set_seconds_allowed(uint32_t value);
  private:
  uint32_t _internal_seconds_allowed() const;
  void _internal_set_seconds_allowed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_RecordPlaytime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t seconds_played_;
  uint32_t seconds_allowed_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTimedTrial_ResetPlaytime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_ResetPlaytime_Request) */ {
 public:
  inline CTimedTrial_ResetPlaytime_Request() : CTimedTrial_ResetPlaytime_Request(nullptr) {}
  ~CTimedTrial_ResetPlaytime_Request() override;
  explicit constexpr CTimedTrial_ResetPlaytime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_ResetPlaytime_Request(const CTimedTrial_ResetPlaytime_Request& from);
  CTimedTrial_ResetPlaytime_Request(CTimedTrial_ResetPlaytime_Request&& from) noexcept
    : CTimedTrial_ResetPlaytime_Request() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_ResetPlaytime_Request& operator=(const CTimedTrial_ResetPlaytime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_ResetPlaytime_Request& operator=(CTimedTrial_ResetPlaytime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_ResetPlaytime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_ResetPlaytime_Request* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_ResetPlaytime_Request*>(
               &_CTimedTrial_ResetPlaytime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CTimedTrial_ResetPlaytime_Request& a, CTimedTrial_ResetPlaytime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_ResetPlaytime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_ResetPlaytime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_ResetPlaytime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_ResetPlaytime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_ResetPlaytime_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_ResetPlaytime_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_ResetPlaytime_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_ResetPlaytime_Request";
  }
  protected:
  explicit CTimedTrial_ResetPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_ResetPlaytime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CTimedTrial_ResetPlaytime_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTimedTrial_ResetPlaytime_Response) */ {
 public:
  inline CTimedTrial_ResetPlaytime_Response() : CTimedTrial_ResetPlaytime_Response(nullptr) {}
  ~CTimedTrial_ResetPlaytime_Response() override;
  explicit constexpr CTimedTrial_ResetPlaytime_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CTimedTrial_ResetPlaytime_Response(const CTimedTrial_ResetPlaytime_Response& from);
  CTimedTrial_ResetPlaytime_Response(CTimedTrial_ResetPlaytime_Response&& from) noexcept
    : CTimedTrial_ResetPlaytime_Response() {
    *this = ::std::move(from);
  }

  inline CTimedTrial_ResetPlaytime_Response& operator=(const CTimedTrial_ResetPlaytime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTimedTrial_ResetPlaytime_Response& operator=(CTimedTrial_ResetPlaytime_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CTimedTrial_ResetPlaytime_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CTimedTrial_ResetPlaytime_Response* internal_default_instance() {
    return reinterpret_cast<const CTimedTrial_ResetPlaytime_Response*>(
               &_CTimedTrial_ResetPlaytime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CTimedTrial_ResetPlaytime_Response& a, CTimedTrial_ResetPlaytime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CTimedTrial_ResetPlaytime_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CTimedTrial_ResetPlaytime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CTimedTrial_ResetPlaytime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CTimedTrial_ResetPlaytime_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CTimedTrial_ResetPlaytime_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CTimedTrial_ResetPlaytime_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTimedTrial_ResetPlaytime_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTimedTrial_ResetPlaytime_Response";
  }
  protected:
  explicit CTimedTrial_ResetPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsPlayedFieldNumber = 1,
    kSecondsAllowedFieldNumber = 2,
  };
  // optional uint32 seconds_played = 1;
  bool has_seconds_played() const;
  private:
  bool _internal_has_seconds_played() const;
  public:
  void clear_seconds_played();
  uint32_t seconds_played() const;
  void set_seconds_played(uint32_t value);
  private:
  uint32_t _internal_seconds_played() const;
  void _internal_set_seconds_played(uint32_t value);
  public:

  // optional uint32 seconds_allowed = 2;
  bool has_seconds_allowed() const;
  private:
  bool _internal_has_seconds_allowed() const;
  public:
  void clear_seconds_allowed();
  uint32_t seconds_allowed() const;
  void set_seconds_allowed(uint32_t value);
  private:
  uint32_t _internal_seconds_allowed() const;
  void _internal_set_seconds_allowed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CTimedTrial_ResetPlaytime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t seconds_played_;
  uint32_t seconds_allowed_;
  friend struct ::TableStruct_steammessages_5ftimedtrial_2esteamclient_2eproto;
};
// ===================================================================

class TimedTrial_Stub;

class TimedTrial : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TimedTrial() {};
 public:
  virtual ~TimedTrial();

  typedef TimedTrial_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetTimeRemaining(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_GetTimeRemaining_Request* request,
                       ::CTimedTrial_GetTimeRemaining_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RecordPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_RecordPlaytime_Request* request,
                       ::CTimedTrial_RecordPlaytime_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ResetPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_ResetPlaytime_Request* request,
                       ::CTimedTrial_ResetPlaytime_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TimedTrial);
};

class TimedTrial_Stub : public TimedTrial {
 public:
  TimedTrial_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TimedTrial_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TimedTrial_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TimedTrial ------------------------------------------

  void GetTimeRemaining(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_GetTimeRemaining_Request* request,
                       ::CTimedTrial_GetTimeRemaining_Response* response,
                       ::google::protobuf::Closure* done);
  void RecordPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_RecordPlaytime_Request* request,
                       ::CTimedTrial_RecordPlaytime_Response* response,
                       ::google::protobuf::Closure* done);
  void ResetPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CTimedTrial_ResetPlaytime_Request* request,
                       ::CTimedTrial_ResetPlaytime_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TimedTrial_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTimedTrial_GetTimeRemaining_Request

// optional uint32 appid = 1;
inline bool CTimedTrial_GetTimeRemaining_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_GetTimeRemaining_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CTimedTrial_GetTimeRemaining_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Request::appid() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_GetTimeRemaining_Request.appid)
  return _internal_appid();
}
inline void CTimedTrial_GetTimeRemaining_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CTimedTrial_GetTimeRemaining_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_GetTimeRemaining_Request.appid)
}

// -------------------------------------------------------------------

// CTimedTrial_GetTimeRemaining_Response

// optional uint32 seconds_played = 1;
inline bool CTimedTrial_GetTimeRemaining_Response::_internal_has_seconds_played() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_GetTimeRemaining_Response::has_seconds_played() const {
  return _internal_has_seconds_played();
}
inline void CTimedTrial_GetTimeRemaining_Response::clear_seconds_played() {
  seconds_played_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::_internal_seconds_played() const {
  return seconds_played_;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::seconds_played() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_GetTimeRemaining_Response.seconds_played)
  return _internal_seconds_played();
}
inline void CTimedTrial_GetTimeRemaining_Response::_internal_set_seconds_played(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_played_ = value;
}
inline void CTimedTrial_GetTimeRemaining_Response::set_seconds_played(uint32_t value) {
  _internal_set_seconds_played(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_GetTimeRemaining_Response.seconds_played)
}

// optional uint32 seconds_allowed = 2;
inline bool CTimedTrial_GetTimeRemaining_Response::_internal_has_seconds_allowed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTimedTrial_GetTimeRemaining_Response::has_seconds_allowed() const {
  return _internal_has_seconds_allowed();
}
inline void CTimedTrial_GetTimeRemaining_Response::clear_seconds_allowed() {
  seconds_allowed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::_internal_seconds_allowed() const {
  return seconds_allowed_;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::seconds_allowed() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_GetTimeRemaining_Response.seconds_allowed)
  return _internal_seconds_allowed();
}
inline void CTimedTrial_GetTimeRemaining_Response::_internal_set_seconds_allowed(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_allowed_ = value;
}
inline void CTimedTrial_GetTimeRemaining_Response::set_seconds_allowed(uint32_t value) {
  _internal_set_seconds_allowed(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_GetTimeRemaining_Response.seconds_allowed)
}

// optional uint32 packageid = 3;
inline bool CTimedTrial_GetTimeRemaining_Response::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CTimedTrial_GetTimeRemaining_Response::has_packageid() const {
  return _internal_has_packageid();
}
inline void CTimedTrial_GetTimeRemaining_Response::clear_packageid() {
  packageid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::_internal_packageid() const {
  return packageid_;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::packageid() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_GetTimeRemaining_Response.packageid)
  return _internal_packageid();
}
inline void CTimedTrial_GetTimeRemaining_Response::_internal_set_packageid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  packageid_ = value;
}
inline void CTimedTrial_GetTimeRemaining_Response::set_packageid(uint32_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_GetTimeRemaining_Response.packageid)
}

// optional uint32 mastersub_appid = 4;
inline bool CTimedTrial_GetTimeRemaining_Response::_internal_has_mastersub_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CTimedTrial_GetTimeRemaining_Response::has_mastersub_appid() const {
  return _internal_has_mastersub_appid();
}
inline void CTimedTrial_GetTimeRemaining_Response::clear_mastersub_appid() {
  mastersub_appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::_internal_mastersub_appid() const {
  return mastersub_appid_;
}
inline uint32_t CTimedTrial_GetTimeRemaining_Response::mastersub_appid() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_GetTimeRemaining_Response.mastersub_appid)
  return _internal_mastersub_appid();
}
inline void CTimedTrial_GetTimeRemaining_Response::_internal_set_mastersub_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  mastersub_appid_ = value;
}
inline void CTimedTrial_GetTimeRemaining_Response::set_mastersub_appid(uint32_t value) {
  _internal_set_mastersub_appid(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_GetTimeRemaining_Response.mastersub_appid)
}

// -------------------------------------------------------------------

// CTimedTrial_RecordPlaytime_Request

// optional uint32 appid = 1;
inline bool CTimedTrial_RecordPlaytime_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_RecordPlaytime_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CTimedTrial_RecordPlaytime_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_RecordPlaytime_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CTimedTrial_RecordPlaytime_Request::appid() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_RecordPlaytime_Request.appid)
  return _internal_appid();
}
inline void CTimedTrial_RecordPlaytime_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CTimedTrial_RecordPlaytime_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_RecordPlaytime_Request.appid)
}

// optional uint32 seconds_played = 2;
inline bool CTimedTrial_RecordPlaytime_Request::_internal_has_seconds_played() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTimedTrial_RecordPlaytime_Request::has_seconds_played() const {
  return _internal_has_seconds_played();
}
inline void CTimedTrial_RecordPlaytime_Request::clear_seconds_played() {
  seconds_played_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CTimedTrial_RecordPlaytime_Request::_internal_seconds_played() const {
  return seconds_played_;
}
inline uint32_t CTimedTrial_RecordPlaytime_Request::seconds_played() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_RecordPlaytime_Request.seconds_played)
  return _internal_seconds_played();
}
inline void CTimedTrial_RecordPlaytime_Request::_internal_set_seconds_played(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_played_ = value;
}
inline void CTimedTrial_RecordPlaytime_Request::set_seconds_played(uint32_t value) {
  _internal_set_seconds_played(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_RecordPlaytime_Request.seconds_played)
}

// -------------------------------------------------------------------

// CTimedTrial_RecordPlaytime_Response

// optional uint32 seconds_played = 1;
inline bool CTimedTrial_RecordPlaytime_Response::_internal_has_seconds_played() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_RecordPlaytime_Response::has_seconds_played() const {
  return _internal_has_seconds_played();
}
inline void CTimedTrial_RecordPlaytime_Response::clear_seconds_played() {
  seconds_played_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_RecordPlaytime_Response::_internal_seconds_played() const {
  return seconds_played_;
}
inline uint32_t CTimedTrial_RecordPlaytime_Response::seconds_played() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_RecordPlaytime_Response.seconds_played)
  return _internal_seconds_played();
}
inline void CTimedTrial_RecordPlaytime_Response::_internal_set_seconds_played(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_played_ = value;
}
inline void CTimedTrial_RecordPlaytime_Response::set_seconds_played(uint32_t value) {
  _internal_set_seconds_played(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_RecordPlaytime_Response.seconds_played)
}

// optional uint32 seconds_allowed = 2;
inline bool CTimedTrial_RecordPlaytime_Response::_internal_has_seconds_allowed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTimedTrial_RecordPlaytime_Response::has_seconds_allowed() const {
  return _internal_has_seconds_allowed();
}
inline void CTimedTrial_RecordPlaytime_Response::clear_seconds_allowed() {
  seconds_allowed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CTimedTrial_RecordPlaytime_Response::_internal_seconds_allowed() const {
  return seconds_allowed_;
}
inline uint32_t CTimedTrial_RecordPlaytime_Response::seconds_allowed() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_RecordPlaytime_Response.seconds_allowed)
  return _internal_seconds_allowed();
}
inline void CTimedTrial_RecordPlaytime_Response::_internal_set_seconds_allowed(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_allowed_ = value;
}
inline void CTimedTrial_RecordPlaytime_Response::set_seconds_allowed(uint32_t value) {
  _internal_set_seconds_allowed(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_RecordPlaytime_Response.seconds_allowed)
}

// -------------------------------------------------------------------

// CTimedTrial_ResetPlaytime_Request

// optional uint32 appid = 1;
inline bool CTimedTrial_ResetPlaytime_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_ResetPlaytime_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CTimedTrial_ResetPlaytime_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_ResetPlaytime_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CTimedTrial_ResetPlaytime_Request::appid() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_ResetPlaytime_Request.appid)
  return _internal_appid();
}
inline void CTimedTrial_ResetPlaytime_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CTimedTrial_ResetPlaytime_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_ResetPlaytime_Request.appid)
}

// -------------------------------------------------------------------

// CTimedTrial_ResetPlaytime_Response

// optional uint32 seconds_played = 1;
inline bool CTimedTrial_ResetPlaytime_Response::_internal_has_seconds_played() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CTimedTrial_ResetPlaytime_Response::has_seconds_played() const {
  return _internal_has_seconds_played();
}
inline void CTimedTrial_ResetPlaytime_Response::clear_seconds_played() {
  seconds_played_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CTimedTrial_ResetPlaytime_Response::_internal_seconds_played() const {
  return seconds_played_;
}
inline uint32_t CTimedTrial_ResetPlaytime_Response::seconds_played() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_ResetPlaytime_Response.seconds_played)
  return _internal_seconds_played();
}
inline void CTimedTrial_ResetPlaytime_Response::_internal_set_seconds_played(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_played_ = value;
}
inline void CTimedTrial_ResetPlaytime_Response::set_seconds_played(uint32_t value) {
  _internal_set_seconds_played(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_ResetPlaytime_Response.seconds_played)
}

// optional uint32 seconds_allowed = 2;
inline bool CTimedTrial_ResetPlaytime_Response::_internal_has_seconds_allowed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CTimedTrial_ResetPlaytime_Response::has_seconds_allowed() const {
  return _internal_has_seconds_allowed();
}
inline void CTimedTrial_ResetPlaytime_Response::clear_seconds_allowed() {
  seconds_allowed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CTimedTrial_ResetPlaytime_Response::_internal_seconds_allowed() const {
  return seconds_allowed_;
}
inline uint32_t CTimedTrial_ResetPlaytime_Response::seconds_allowed() const {
  // @@protoc_insertion_point(field_get:CTimedTrial_ResetPlaytime_Response.seconds_allowed)
  return _internal_seconds_allowed();
}
inline void CTimedTrial_ResetPlaytime_Response::_internal_set_seconds_allowed(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_allowed_ = value;
}
inline void CTimedTrial_ResetPlaytime_Response::set_seconds_allowed(uint32_t value) {
  _internal_set_seconds_allowed(value);
  // @@protoc_insertion_point(field_set:CTimedTrial_ResetPlaytime_Response.seconds_allowed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5ftimedtrial_2esteamclient_2eproto
