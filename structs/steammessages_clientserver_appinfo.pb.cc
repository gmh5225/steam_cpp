// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_appinfo.proto

#include "steammessages_clientserver_appinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_changenumber_(0u)
  , send_changelist_(false){}
struct CMsgClientAppInfoUpdateDefaultTypeInternal {
  constexpr CMsgClientAppInfoUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAppInfoUpdateDefaultTypeInternal() {}
  union {
    CMsgClientAppInfoUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAppInfoUpdateDefaultTypeInternal _CMsgClientAppInfoUpdate_default_instance_;
constexpr CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , current_change_number_(0u)
  , force_full_update_(false){}
struct CMsgClientAppInfoChangesDefaultTypeInternal {
  constexpr CMsgClientAppInfoChangesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAppInfoChangesDefaultTypeInternal() {}
  union {
    CMsgClientAppInfoChanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAppInfoChangesDefaultTypeInternal _CMsgClientAppInfoChanges_default_instance_;
constexpr CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_crc_()
  , app_id_(0u)
  , section_flags_(0u){}
struct CMsgClientAppInfoRequest_AppDefaultTypeInternal {
  constexpr CMsgClientAppInfoRequest_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAppInfoRequest_AppDefaultTypeInternal() {}
  union {
    CMsgClientAppInfoRequest_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAppInfoRequest_AppDefaultTypeInternal _CMsgClientAppInfoRequest_App_default_instance_;
constexpr CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , supports_batches_(false){}
struct CMsgClientAppInfoRequestDefaultTypeInternal {
  constexpr CMsgClientAppInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAppInfoRequestDefaultTypeInternal() {}
  union {
    CMsgClientAppInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAppInfoRequestDefaultTypeInternal _CMsgClientAppInfoRequest_default_instance_;
constexpr CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : since_change_number_(0u)
  , send_app_info_changes_(false)
  , send_package_info_changes_(false)
  , num_app_info_cached_(0u)
  , num_package_info_cached_(0u){}
struct CMsgClientPICSChangesSinceRequestDefaultTypeInternal {
  constexpr CMsgClientPICSChangesSinceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSChangesSinceRequestDefaultTypeInternal() {}
  union {
    CMsgClientPICSChangesSinceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSChangesSinceRequestDefaultTypeInternal _CMsgClientPICSChangesSinceRequest_default_instance_;
constexpr CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packageid_(0u)
  , change_number_(0u)
  , needs_token_(false){}
struct CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal {
  constexpr CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal() {}
  union {
    CMsgClientPICSChangesSinceResponse_PackageChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSChangesSinceResponse_PackageChangeDefaultTypeInternal _CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_;
constexpr CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , change_number_(0u)
  , needs_token_(false){}
struct CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal {
  constexpr CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal() {}
  union {
    CMsgClientPICSChangesSinceResponse_AppChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSChangesSinceResponse_AppChangeDefaultTypeInternal _CMsgClientPICSChangesSinceResponse_AppChange_default_instance_;
constexpr CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_changes_()
  , app_changes_()
  , current_change_number_(0u)
  , since_change_number_(0u)
  , force_full_update_(false)
  , force_full_app_update_(false)
  , force_full_package_update_(false){}
struct CMsgClientPICSChangesSinceResponseDefaultTypeInternal {
  constexpr CMsgClientPICSChangesSinceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSChangesSinceResponseDefaultTypeInternal() {}
  union {
    CMsgClientPICSChangesSinceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSChangesSinceResponseDefaultTypeInternal _CMsgClientPICSChangesSinceResponse_default_instance_;
constexpr CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_token_(uint64_t{0u})
  , appid_(0u)
  , only_public_obsolete_(false){}
struct CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoRequest_AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoRequest_AppInfoDefaultTypeInternal _CMsgClientPICSProductInfoRequest_AppInfo_default_instance_;
constexpr CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_token_(uint64_t{0u})
  , packageid_(0u){}
struct CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoRequest_PackageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoRequest_PackageInfoDefaultTypeInternal _CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_;
constexpr CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packages_()
  , apps_()
  , num_prev_failed_(0u)
  , obsolete_supports_package_tokens_(0u)
  , meta_data_only_(false)
  , single_response_(false)
  , sequence_number_(0u){}
struct CMsgClientPICSProductInfoRequestDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoRequestDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoRequestDefaultTypeInternal _CMsgClientPICSProductInfoRequest_default_instance_;
constexpr CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , change_number_(0u)
  , missing_token_(false)
  , only_public_(false)
  , size_(0u){}
struct CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoResponse_AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoResponse_AppInfoDefaultTypeInternal _CMsgClientPICSProductInfoResponse_AppInfo_default_instance_;
constexpr CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , packageid_(0u)
  , change_number_(0u)
  , missing_token_(false)
  , size_(0u){}
struct CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoResponse_PackageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoResponse_PackageInfoDefaultTypeInternal _CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_;
constexpr CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , unknown_appids_()
  , packages_()
  , unknown_packageids_()
  , http_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meta_data_only_(false)
  , response_pending_(false)
  , http_min_size_(0u){}
struct CMsgClientPICSProductInfoResponseDefaultTypeInternal {
  constexpr CMsgClientPICSProductInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSProductInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientPICSProductInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSProductInfoResponseDefaultTypeInternal _CMsgClientPICSProductInfoResponse_default_instance_;
constexpr CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packageids_()
  , appids_(){}
struct CMsgClientPICSAccessTokenRequestDefaultTypeInternal {
  constexpr CMsgClientPICSAccessTokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSAccessTokenRequestDefaultTypeInternal() {}
  union {
    CMsgClientPICSAccessTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSAccessTokenRequestDefaultTypeInternal _CMsgClientPICSAccessTokenRequest_default_instance_;
constexpr CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_token_(uint64_t{0u})
  , packageid_(0u){}
struct CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal {
  constexpr CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal() {}
  union {
    CMsgClientPICSAccessTokenResponse_PackageToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSAccessTokenResponse_PackageTokenDefaultTypeInternal _CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_;
constexpr CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_token_(uint64_t{0u})
  , appid_(0u){}
struct CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal {
  constexpr CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal() {}
  union {
    CMsgClientPICSAccessTokenResponse_AppToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSAccessTokenResponse_AppTokenDefaultTypeInternal _CMsgClientPICSAccessTokenResponse_AppToken_default_instance_;
constexpr CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_access_tokens_()
  , package_denied_tokens_()
  , app_access_tokens_()
  , app_denied_tokens_(){}
struct CMsgClientPICSAccessTokenResponseDefaultTypeInternal {
  constexpr CMsgClientPICSAccessTokenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPICSAccessTokenResponseDefaultTypeInternal() {}
  union {
    CMsgClientPICSAccessTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPICSAccessTokenResponseDefaultTypeInternal _CMsgClientPICSAccessTokenResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5fappinfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5fappinfo_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5fappinfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoUpdate, last_changenumber_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoUpdate, send_changelist_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoChanges, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoChanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoChanges, current_change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoChanges, force_full_update_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoChanges, appids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest_App, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest_App, section_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest_App, section_crc_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAppInfoRequest, supports_batches_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, since_change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, send_app_info_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, send_package_info_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, num_app_info_cached_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceRequest, num_package_info_cached_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_PackageChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_PackageChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_PackageChange, packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_PackageChange, change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_PackageChange, needs_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_AppChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_AppChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_AppChange, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_AppChange, change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse_AppChange, needs_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, current_change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, since_change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, force_full_update_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, package_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, app_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, force_full_app_update_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSChangesSinceResponse, force_full_package_update_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_AppInfo, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_AppInfo, access_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_AppInfo, only_public_obsolete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_PackageInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_PackageInfo, packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest_PackageInfo, access_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, packages_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, meta_data_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, num_prev_failed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, obsolete_supports_package_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoRequest, single_response_),
  ~0u,
  ~0u,
  2,
  0,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, missing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, sha_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, buffer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, only_public_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_AppInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, change_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, missing_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, sha_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, buffer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse_PackageInfo, size_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, apps_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, unknown_appids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, packages_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, unknown_packageids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, meta_data_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, response_pending_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, http_min_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSProductInfoResponse, http_host_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenRequest, packageids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenRequest, appids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_PackageToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_PackageToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_PackageToken, packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_PackageToken, access_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_AppToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_AppToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_AppToken, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse_AppToken, access_token_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse, package_access_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse, package_denied_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse, app_access_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPICSAccessTokenResponse, app_denied_tokens_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgClientAppInfoUpdate)},
  { 10, 19, -1, sizeof(::CMsgClientAppInfoChanges)},
  { 22, 31, -1, sizeof(::CMsgClientAppInfoRequest_App)},
  { 34, 42, -1, sizeof(::CMsgClientAppInfoRequest)},
  { 44, 55, -1, sizeof(::CMsgClientPICSChangesSinceRequest)},
  { 60, 69, -1, sizeof(::CMsgClientPICSChangesSinceResponse_PackageChange)},
  { 72, 81, -1, sizeof(::CMsgClientPICSChangesSinceResponse_AppChange)},
  { 84, 97, -1, sizeof(::CMsgClientPICSChangesSinceResponse)},
  { 104, 113, -1, sizeof(::CMsgClientPICSProductInfoRequest_AppInfo)},
  { 116, 124, -1, sizeof(::CMsgClientPICSProductInfoRequest_PackageInfo)},
  { 126, 139, -1, sizeof(::CMsgClientPICSProductInfoRequest)},
  { 146, 159, -1, sizeof(::CMsgClientPICSProductInfoResponse_AppInfo)},
  { 166, 178, -1, sizeof(::CMsgClientPICSProductInfoResponse_PackageInfo)},
  { 184, 198, -1, sizeof(::CMsgClientPICSProductInfoResponse)},
  { 206, -1, -1, sizeof(::CMsgClientPICSAccessTokenRequest)},
  { 214, 222, -1, sizeof(::CMsgClientPICSAccessTokenResponse_PackageToken)},
  { 224, 232, -1, sizeof(::CMsgClientPICSAccessTokenResponse_AppToken)},
  { 234, -1, -1, sizeof(::CMsgClientPICSAccessTokenResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAppInfoUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAppInfoChanges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAppInfoRequest_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAppInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSChangesSinceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSChangesSinceResponse_PackageChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSChangesSinceResponse_AppChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSChangesSinceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoRequest_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoRequest_PackageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoResponse_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoResponse_PackageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSProductInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSAccessTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSAccessTokenResponse_PackageToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSAccessTokenResponse_AppToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPICSAccessTokenResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5fappinfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_clientserver_appinfo.pro"
  "to\032\030steammessages_base.proto\"M\n\027CMsgClie"
  "ntAppInfoUpdate\022\031\n\021last_changenumber\030\001 \001"
  "(\r\022\027\n\017send_changelist\030\002 \001(\010\"d\n\030CMsgClien"
  "tAppInfoChanges\022\035\n\025current_change_number"
  "\030\001 \001(\r\022\031\n\021force_full_update\030\002 \001(\010\022\016\n\006app"
  "IDs\030\003 \003(\r\"\253\001\n\030CMsgClientAppInfoRequest\022+"
  "\n\004apps\030\001 \003(\0132\035.CMsgClientAppInfoRequest."
  "App\022\037\n\020supports_batches\030\002 \001(\010:\005false\032A\n\003"
  "App\022\016\n\006app_id\030\001 \001(\r\022\025\n\rsection_flags\030\002 \001"
  "(\r\022\023\n\013section_CRC\030\003 \003(\r\"\300\001\n!CMsgClientPI"
  "CSChangesSinceRequest\022\033\n\023since_change_nu"
  "mber\030\001 \001(\r\022\035\n\025send_app_info_changes\030\002 \001("
  "\010\022!\n\031send_package_info_changes\030\003 \001(\010\022\033\n\023"
  "num_app_info_cached\030\004 \001(\r\022\037\n\027num_package"
  "_info_cached\030\005 \001(\r\"\345\003\n\"CMsgClientPICSCha"
  "ngesSinceResponse\022\035\n\025current_change_numb"
  "er\030\001 \001(\r\022\033\n\023since_change_number\030\002 \001(\r\022\031\n"
  "\021force_full_update\030\003 \001(\010\022J\n\017package_chan"
  "ges\030\004 \003(\01321.CMsgClientPICSChangesSinceRe"
  "sponse.PackageChange\022B\n\013app_changes\030\005 \003("
  "\0132-.CMsgClientPICSChangesSinceResponse.A"
  "ppChange\022\035\n\025force_full_app_update\030\006 \001(\010\022"
  "!\n\031force_full_package_update\030\007 \001(\010\032N\n\rPa"
  "ckageChange\022\021\n\tpackageid\030\001 \001(\r\022\025\n\rchange"
  "_number\030\002 \001(\r\022\023\n\013needs_token\030\003 \001(\010\032F\n\tAp"
  "pChange\022\r\n\005appid\030\001 \001(\r\022\025\n\rchange_number\030"
  "\002 \001(\r\022\023\n\013needs_token\030\003 \001(\010\"\257\003\n CMsgClien"
  "tPICSProductInfoRequest\022\?\n\010packages\030\001 \003("
  "\0132-.CMsgClientPICSProductInfoRequest.Pac"
  "kageInfo\0227\n\004apps\030\002 \003(\0132).CMsgClientPICSP"
  "roductInfoRequest.AppInfo\022\026\n\016meta_data_o"
  "nly\030\003 \001(\010\022\027\n\017num_prev_failed\030\004 \001(\r\022(\n OB"
  "SOLETE_supports_package_tokens\030\005 \001(\r\022\027\n\017"
  "sequence_number\030\006 \001(\r\022\027\n\017single_response"
  "\030\007 \001(\010\032L\n\007AppInfo\022\r\n\005appid\030\001 \001(\r\022\024\n\014acce"
  "ss_token\030\002 \001(\004\022\034\n\024only_public_obsolete\030\003"
  " \001(\010\0326\n\013PackageInfo\022\021\n\tpackageid\030\001 \001(\r\022\024"
  "\n\014access_token\030\002 \001(\004\"\271\004\n!CMsgClientPICSP"
  "roductInfoResponse\0228\n\004apps\030\001 \003(\0132*.CMsgC"
  "lientPICSProductInfoResponse.AppInfo\022\026\n\016"
  "unknown_appids\030\002 \003(\r\022@\n\010packages\030\003 \003(\0132."
  ".CMsgClientPICSProductInfoResponse.Packa"
  "geInfo\022\032\n\022unknown_packageids\030\004 \003(\r\022\026\n\016me"
  "ta_data_only\030\005 \001(\010\022\030\n\020response_pending\030\006"
  " \001(\010\022\025\n\rhttp_min_size\030\007 \001(\r\022\021\n\thttp_host"
  "\030\010 \001(\t\032\206\001\n\007AppInfo\022\r\n\005appid\030\001 \001(\r\022\025\n\rcha"
  "nge_number\030\002 \001(\r\022\025\n\rmissing_token\030\003 \001(\010\022"
  "\013\n\003sha\030\004 \001(\014\022\016\n\006buffer\030\005 \001(\014\022\023\n\013only_pub"
  "lic\030\006 \001(\010\022\014\n\004size\030\007 \001(\r\032y\n\013PackageInfo\022\021"
  "\n\tpackageid\030\001 \001(\r\022\025\n\rchange_number\030\002 \001(\r"
  "\022\025\n\rmissing_token\030\003 \001(\010\022\013\n\003sha\030\004 \001(\014\022\016\n\006"
  "buffer\030\005 \001(\014\022\014\n\004size\030\006 \001(\r:\004\210\265\030\000\"F\n CMsg"
  "ClientPICSAccessTokenRequest\022\022\n\npackagei"
  "ds\030\001 \003(\r\022\016\n\006appids\030\002 \003(\r\"\337\002\n!CMsgClientP"
  "ICSAccessTokenResponse\022N\n\025package_access"
  "_tokens\030\001 \003(\0132/.CMsgClientPICSAccessToke"
  "nResponse.PackageToken\022\035\n\025package_denied"
  "_tokens\030\002 \003(\r\022F\n\021app_access_tokens\030\003 \003(\013"
  "2+.CMsgClientPICSAccessTokenResponse.App"
  "Token\022\031\n\021app_denied_tokens\030\004 \003(\r\0327\n\014Pack"
  "ageToken\022\021\n\tpackageid\030\001 \001(\r\022\024\n\014access_to"
  "ken\030\002 \001(\004\032/\n\010AppToken\022\r\n\005appid\030\001 \001(\r\022\024\n\014"
  "access_token\030\002 \001(\004B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto = {
  false, false, 2545, descriptor_table_protodef_steammessages_5fclientserver_5fappinfo_2eproto, "steammessages_clientserver_appinfo.proto", 
  &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once, descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5fappinfo_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5fappinfo_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5fappinfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5fappinfo_2eproto(&descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto);

// ===================================================================

class CMsgClientAppInfoUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAppInfoUpdate>()._has_bits_);
  static void set_has_last_changenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_changelist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAppInfoUpdate)
}
CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(const CMsgClientAppInfoUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_changenumber_, &from.last_changenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_changelist_) -
    reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAppInfoUpdate)
}

inline void CMsgClientAppInfoUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_changenumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&send_changelist_) -
    reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
}

CMsgClientAppInfoUpdate::~CMsgClientAppInfoUpdate() {
  // @@protoc_insertion_point(destructor:CMsgClientAppInfoUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAppInfoUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAppInfoUpdate::ArenaDtor(void* object) {
  CMsgClientAppInfoUpdate* _this = reinterpret_cast< CMsgClientAppInfoUpdate* >(object);
  (void)_this;
}
void CMsgClientAppInfoUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAppInfoUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAppInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAppInfoUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&last_changenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_changelist_) -
        reinterpret_cast<char*>(&last_changenumber_)) + sizeof(send_changelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAppInfoUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 last_changenumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_changenumber(&has_bits);
          last_changenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_changelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_send_changelist(&has_bits);
          send_changelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAppInfoUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAppInfoUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_changenumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_changenumber(), target);
  }

  // optional bool send_changelist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_send_changelist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAppInfoUpdate)
  return target;
}

size_t CMsgClientAppInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAppInfoUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 last_changenumber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_changenumber());
    }

    // optional bool send_changelist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAppInfoUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAppInfoUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAppInfoUpdate::GetClassData() const { return &_class_data_; }

void CMsgClientAppInfoUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAppInfoUpdate *>(to)->MergeFrom(
      static_cast<const CMsgClientAppInfoUpdate &>(from));
}


void CMsgClientAppInfoUpdate::MergeFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAppInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_changenumber_ = from.last_changenumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_changelist_ = from.send_changelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAppInfoUpdate::CopyFrom(const CMsgClientAppInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAppInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoUpdate::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoUpdate::InternalSwap(CMsgClientAppInfoUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoUpdate, send_changelist_)
      + sizeof(CMsgClientAppInfoUpdate::send_changelist_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoUpdate, last_changenumber_)>(
          reinterpret_cast<char*>(&last_changenumber_),
          reinterpret_cast<char*>(&other->last_changenumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAppInfoUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[0]);
}

// ===================================================================

class CMsgClientAppInfoChanges::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAppInfoChanges>()._has_bits_);
  static void set_has_current_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_full_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAppInfoChanges)
}
CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(const CMsgClientAppInfoChanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_full_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAppInfoChanges)
}

inline void CMsgClientAppInfoChanges::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_full_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
}

CMsgClientAppInfoChanges::~CMsgClientAppInfoChanges() {
  // @@protoc_insertion_point(destructor:CMsgClientAppInfoChanges)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAppInfoChanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAppInfoChanges::ArenaDtor(void* object) {
  CMsgClientAppInfoChanges* _this = reinterpret_cast< CMsgClientAppInfoChanges* >(object);
  (void)_this;
}
void CMsgClientAppInfoChanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAppInfoChanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAppInfoChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAppInfoChanges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&current_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_full_update_) -
        reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAppInfoChanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 current_change_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_current_change_number(&has_bits);
          current_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_full_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_force_full_update(&has_bits);
          force_full_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAppInfoChanges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAppInfoChanges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_change_number(), target);
  }

  // optional bool force_full_update = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_full_update(), target);
  }

  // repeated uint32 appIDs = 3;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAppInfoChanges)
  return target;
}

size_t CMsgClientAppInfoChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAppInfoChanges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appIDs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 current_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_change_number());
    }

    // optional bool force_full_update = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAppInfoChanges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAppInfoChanges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAppInfoChanges::GetClassData() const { return &_class_data_; }

void CMsgClientAppInfoChanges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAppInfoChanges *>(to)->MergeFrom(
      static_cast<const CMsgClientAppInfoChanges &>(from));
}


void CMsgClientAppInfoChanges::MergeFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAppInfoChanges)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_full_update_ = from.force_full_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAppInfoChanges::CopyFrom(const CMsgClientAppInfoChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAppInfoChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoChanges::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoChanges::InternalSwap(CMsgClientAppInfoChanges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoChanges, force_full_update_)
      + sizeof(CMsgClientAppInfoChanges::force_full_update_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoChanges, current_change_number_)>(
          reinterpret_cast<char*>(&current_change_number_),
          reinterpret_cast<char*>(&other->current_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAppInfoChanges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[1]);
}

// ===================================================================

class CMsgClientAppInfoRequest_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAppInfoRequest_App>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_section_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  section_crc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAppInfoRequest.App)
}
CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(const CMsgClientAppInfoRequest_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      section_crc_(from.section_crc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&section_flags_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAppInfoRequest.App)
}

inline void CMsgClientAppInfoRequest_App::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&section_flags_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
}

CMsgClientAppInfoRequest_App::~CMsgClientAppInfoRequest_App() {
  // @@protoc_insertion_point(destructor:CMsgClientAppInfoRequest.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAppInfoRequest_App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAppInfoRequest_App::ArenaDtor(void* object) {
  CMsgClientAppInfoRequest_App* _this = reinterpret_cast< CMsgClientAppInfoRequest_App* >(object);
  (void)_this;
}
void CMsgClientAppInfoRequest_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAppInfoRequest_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAppInfoRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAppInfoRequest.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_crc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&section_flags_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(section_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAppInfoRequest_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_section_flags(&has_bits);
          section_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 section_CRC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_section_crc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_section_crc(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAppInfoRequest_App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAppInfoRequest.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 section_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_section_flags(), target);
  }

  // repeated uint32 section_CRC = 3;
  for (int i = 0, n = this->_internal_section_crc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_section_crc(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAppInfoRequest.App)
  return target;
}

size_t CMsgClientAppInfoRequest_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAppInfoRequest.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 section_CRC = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->section_crc_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_section_crc_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 section_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_section_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAppInfoRequest_App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAppInfoRequest_App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAppInfoRequest_App::GetClassData() const { return &_class_data_; }

void CMsgClientAppInfoRequest_App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAppInfoRequest_App *>(to)->MergeFrom(
      static_cast<const CMsgClientAppInfoRequest_App &>(from));
}


void CMsgClientAppInfoRequest_App::MergeFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAppInfoRequest.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  section_crc_.MergeFrom(from.section_crc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      section_flags_ = from.section_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAppInfoRequest_App::CopyFrom(const CMsgClientAppInfoRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAppInfoRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest_App::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest_App::InternalSwap(CMsgClientAppInfoRequest_App* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_crc_.InternalSwap(&other->section_crc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoRequest_App, section_flags_)
      + sizeof(CMsgClientAppInfoRequest_App::section_flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAppInfoRequest_App, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAppInfoRequest_App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[2]);
}

// ===================================================================

class CMsgClientAppInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAppInfoRequest>()._has_bits_);
  static void set_has_supports_batches(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAppInfoRequest)
}
CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(const CMsgClientAppInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  supports_batches_ = from.supports_batches_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAppInfoRequest)
}

inline void CMsgClientAppInfoRequest::SharedCtor() {
supports_batches_ = false;
}

CMsgClientAppInfoRequest::~CMsgClientAppInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientAppInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAppInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAppInfoRequest::ArenaDtor(void* object) {
  CMsgClientAppInfoRequest* _this = reinterpret_cast< CMsgClientAppInfoRequest* >(object);
  (void)_this;
}
void CMsgClientAppInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAppInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAppInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAppInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  supports_batches_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAppInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientAppInfoRequest.App apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_batches = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_supports_batches(&has_bits);
          supports_batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAppInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAppInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientAppInfoRequest.App apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool supports_batches = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_supports_batches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAppInfoRequest)
  return target;
}

size_t CMsgClientAppInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAppInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientAppInfoRequest.App apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool supports_batches = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAppInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAppInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAppInfoRequest::GetClassData() const { return &_class_data_; }

void CMsgClientAppInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAppInfoRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientAppInfoRequest &>(from));
}


void CMsgClientAppInfoRequest::MergeFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAppInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from._internal_has_supports_batches()) {
    _internal_set_supports_batches(from._internal_supports_batches());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAppInfoRequest::CopyFrom(const CMsgClientAppInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAppInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientAppInfoRequest::InternalSwap(CMsgClientAppInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  swap(supports_batches_, other->supports_batches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAppInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[3]);
}

// ===================================================================

class CMsgClientPICSChangesSinceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSChangesSinceRequest>()._has_bits_);
  static void set_has_since_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_app_info_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_send_package_info_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_app_info_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_package_info_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSChangesSinceRequest)
}
CMsgClientPICSChangesSinceRequest::CMsgClientPICSChangesSinceRequest(const CMsgClientPICSChangesSinceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&since_change_number_, &from.since_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_package_info_cached_) -
    reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSChangesSinceRequest)
}

inline void CMsgClientPICSChangesSinceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&since_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_package_info_cached_) -
    reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
}

CMsgClientPICSChangesSinceRequest::~CMsgClientPICSChangesSinceRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSChangesSinceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSChangesSinceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSChangesSinceRequest::ArenaDtor(void* object) {
  CMsgClientPICSChangesSinceRequest* _this = reinterpret_cast< CMsgClientPICSChangesSinceRequest* >(object);
  (void)_this;
}
void CMsgClientPICSChangesSinceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSChangesSinceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSChangesSinceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSChangesSinceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&since_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_package_info_cached_) -
        reinterpret_cast<char*>(&since_change_number_)) + sizeof(num_package_info_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSChangesSinceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 since_change_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_since_change_number(&has_bits);
          since_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_app_info_changes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_send_app_info_changes(&has_bits);
          send_app_info_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_package_info_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_send_package_info_changes(&has_bits);
          send_package_info_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_app_info_cached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_app_info_cached(&has_bits);
          num_app_info_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_package_info_cached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_package_info_cached(&has_bits);
          num_package_info_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSChangesSinceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSChangesSinceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 since_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_since_change_number(), target);
  }

  // optional bool send_app_info_changes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_send_app_info_changes(), target);
  }

  // optional bool send_package_info_changes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_send_package_info_changes(), target);
  }

  // optional uint32 num_app_info_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_app_info_cached(), target);
  }

  // optional uint32 num_package_info_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_package_info_cached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSChangesSinceRequest)
  return target;
}

size_t CMsgClientPICSChangesSinceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSChangesSinceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 since_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_since_change_number());
    }

    // optional bool send_app_info_changes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool send_package_info_changes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_app_info_cached = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_app_info_cached());
    }

    // optional uint32 num_package_info_cached = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_package_info_cached());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSChangesSinceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSChangesSinceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSChangesSinceRequest::GetClassData() const { return &_class_data_; }

void CMsgClientPICSChangesSinceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSChangesSinceRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSChangesSinceRequest &>(from));
}


void CMsgClientPICSChangesSinceRequest::MergeFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSChangesSinceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      send_app_info_changes_ = from.send_app_info_changes_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_package_info_changes_ = from.send_package_info_changes_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_app_info_cached_ = from.num_app_info_cached_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_package_info_cached_ = from.num_package_info_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSChangesSinceRequest::CopyFrom(const CMsgClientPICSChangesSinceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSChangesSinceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceRequest::InternalSwap(CMsgClientPICSChangesSinceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, num_package_info_cached_)
      + sizeof(CMsgClientPICSChangesSinceRequest::num_package_info_cached_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceRequest, since_change_number_)>(
          reinterpret_cast<char*>(&since_change_number_),
          reinterpret_cast<char*>(&other->since_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSChangesSinceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[4]);
}

// ===================================================================

class CMsgClientPICSChangesSinceResponse_PackageChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSChangesSinceResponse_PackageChange>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needs_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSChangesSinceResponse.PackageChange)
}
CMsgClientPICSChangesSinceResponse_PackageChange::CMsgClientPICSChangesSinceResponse_PackageChange(const CMsgClientPICSChangesSinceResponse_PackageChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSChangesSinceResponse.PackageChange)
}

inline void CMsgClientPICSChangesSinceResponse_PackageChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_PackageChange::~CMsgClientPICSChangesSinceResponse_PackageChange() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSChangesSinceResponse.PackageChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSChangesSinceResponse_PackageChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSChangesSinceResponse_PackageChange::ArenaDtor(void* object) {
  CMsgClientPICSChangesSinceResponse_PackageChange* _this = reinterpret_cast< CMsgClientPICSChangesSinceResponse_PackageChange* >(object);
  (void)_this;
}
void CMsgClientPICSChangesSinceResponse_PackageChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSChangesSinceResponse_PackageChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSChangesSinceResponse_PackageChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSChangesSinceResponse.PackageChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_token_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSChangesSinceResponse_PackageChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 change_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_change_number(&has_bits);
          change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_needs_token(&has_bits);
          needs_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSChangesSinceResponse_PackageChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSChangesSinceResponse.PackageChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_needs_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSChangesSinceResponse.PackageChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_PackageChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSChangesSinceResponse.PackageChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_change_number());
    }

    // optional bool needs_token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSChangesSinceResponse_PackageChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSChangesSinceResponse_PackageChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSChangesSinceResponse_PackageChange::GetClassData() const { return &_class_data_; }

void CMsgClientPICSChangesSinceResponse_PackageChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSChangesSinceResponse_PackageChange *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSChangesSinceResponse_PackageChange &>(from));
}


void CMsgClientPICSChangesSinceResponse_PackageChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSChangesSinceResponse.PackageChange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSChangesSinceResponse_PackageChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_PackageChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSChangesSinceResponse.PackageChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_PackageChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_PackageChange::InternalSwap(CMsgClientPICSChangesSinceResponse_PackageChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, needs_token_)
      + sizeof(CMsgClientPICSChangesSinceResponse_PackageChange::needs_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_PackageChange, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSChangesSinceResponse_PackageChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[5]);
}

// ===================================================================

class CMsgClientPICSChangesSinceResponse_AppChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSChangesSinceResponse_AppChange>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needs_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSChangesSinceResponse.AppChange)
}
CMsgClientPICSChangesSinceResponse_AppChange::CMsgClientPICSChangesSinceResponse_AppChange(const CMsgClientPICSChangesSinceResponse_AppChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSChangesSinceResponse.AppChange)
}

inline void CMsgClientPICSChangesSinceResponse_AppChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&needs_token_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
}

CMsgClientPICSChangesSinceResponse_AppChange::~CMsgClientPICSChangesSinceResponse_AppChange() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSChangesSinceResponse.AppChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSChangesSinceResponse_AppChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSChangesSinceResponse_AppChange::ArenaDtor(void* object) {
  CMsgClientPICSChangesSinceResponse_AppChange* _this = reinterpret_cast< CMsgClientPICSChangesSinceResponse_AppChange* >(object);
  (void)_this;
}
void CMsgClientPICSChangesSinceResponse_AppChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSChangesSinceResponse_AppChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSChangesSinceResponse_AppChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSChangesSinceResponse.AppChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needs_token_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(needs_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSChangesSinceResponse_AppChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 change_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_change_number(&has_bits);
          change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_needs_token(&has_bits);
          needs_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSChangesSinceResponse_AppChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSChangesSinceResponse.AppChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_number(), target);
  }

  // optional bool needs_token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_needs_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSChangesSinceResponse.AppChange)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse_AppChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSChangesSinceResponse.AppChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_change_number());
    }

    // optional bool needs_token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSChangesSinceResponse_AppChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSChangesSinceResponse_AppChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSChangesSinceResponse_AppChange::GetClassData() const { return &_class_data_; }

void CMsgClientPICSChangesSinceResponse_AppChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSChangesSinceResponse_AppChange *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSChangesSinceResponse_AppChange &>(from));
}


void CMsgClientPICSChangesSinceResponse_AppChange::MergeFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSChangesSinceResponse.AppChange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_token_ = from.needs_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSChangesSinceResponse_AppChange::CopyFrom(const CMsgClientPICSChangesSinceResponse_AppChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSChangesSinceResponse.AppChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse_AppChange::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse_AppChange::InternalSwap(CMsgClientPICSChangesSinceResponse_AppChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, needs_token_)
      + sizeof(CMsgClientPICSChangesSinceResponse_AppChange::needs_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse_AppChange, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSChangesSinceResponse_AppChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[6]);
}

// ===================================================================

class CMsgClientPICSChangesSinceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSChangesSinceResponse>()._has_bits_);
  static void set_has_current_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_since_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_full_update(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_force_full_app_update(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_force_full_package_update(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  package_changes_(arena),
  app_changes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSChangesSinceResponse)
}
CMsgClientPICSChangesSinceResponse::CMsgClientPICSChangesSinceResponse(const CMsgClientPICSChangesSinceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      package_changes_(from.package_changes_),
      app_changes_(from.app_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_full_package_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSChangesSinceResponse)
}

inline void CMsgClientPICSChangesSinceResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_full_package_update_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
}

CMsgClientPICSChangesSinceResponse::~CMsgClientPICSChangesSinceResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSChangesSinceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSChangesSinceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSChangesSinceResponse::ArenaDtor(void* object) {
  CMsgClientPICSChangesSinceResponse* _this = reinterpret_cast< CMsgClientPICSChangesSinceResponse* >(object);
  (void)_this;
}
void CMsgClientPICSChangesSinceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSChangesSinceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSChangesSinceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSChangesSinceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_changes_.Clear();
  app_changes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&current_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_full_package_update_) -
        reinterpret_cast<char*>(&current_change_number_)) + sizeof(force_full_package_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSChangesSinceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 current_change_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_current_change_number(&has_bits);
          current_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 since_change_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_since_change_number(&has_bits);
          since_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_full_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_force_full_update(&has_bits);
          force_full_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool force_full_app_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_force_full_app_update(&has_bits);
          force_full_app_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_full_package_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_force_full_package_update(&has_bits);
          force_full_package_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSChangesSinceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSChangesSinceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_change_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_change_number(), target);
  }

  // optional uint32 since_change_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_since_change_number(), target);
  }

  // optional bool force_full_update = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_force_full_update(), target);
  }

  // repeated .CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_package_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_package_changes(i), target, stream);
  }

  // repeated .CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_app_changes(i), target, stream);
  }

  // optional bool force_full_app_update = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_force_full_app_update(), target);
  }

  // optional bool force_full_package_update = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_force_full_package_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSChangesSinceResponse)
  return target;
}

size_t CMsgClientPICSChangesSinceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSChangesSinceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPICSChangesSinceResponse.PackageChange package_changes = 4;
  total_size += 1UL * this->_internal_package_changes_size();
  for (const auto& msg : this->package_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientPICSChangesSinceResponse.AppChange app_changes = 5;
  total_size += 1UL * this->_internal_app_changes_size();
  for (const auto& msg : this->app_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 current_change_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_change_number());
    }

    // optional uint32 since_change_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_since_change_number());
    }

    // optional bool force_full_update = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool force_full_app_update = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool force_full_package_update = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSChangesSinceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSChangesSinceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSChangesSinceResponse::GetClassData() const { return &_class_data_; }

void CMsgClientPICSChangesSinceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSChangesSinceResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSChangesSinceResponse &>(from));
}


void CMsgClientPICSChangesSinceResponse::MergeFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSChangesSinceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  package_changes_.MergeFrom(from.package_changes_);
  app_changes_.MergeFrom(from.app_changes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      since_change_number_ = from.since_change_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_full_update_ = from.force_full_update_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_full_app_update_ = from.force_full_app_update_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_full_package_update_ = from.force_full_package_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSChangesSinceResponse::CopyFrom(const CMsgClientPICSChangesSinceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSChangesSinceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSChangesSinceResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSChangesSinceResponse::InternalSwap(CMsgClientPICSChangesSinceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_changes_.InternalSwap(&other->package_changes_);
  app_changes_.InternalSwap(&other->app_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, force_full_package_update_)
      + sizeof(CMsgClientPICSChangesSinceResponse::force_full_package_update_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSChangesSinceResponse, current_change_number_)>(
          reinterpret_cast<char*>(&current_change_number_),
          reinterpret_cast<char*>(&other->current_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSChangesSinceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[7]);
}

// ===================================================================

class CMsgClientPICSProductInfoRequest_AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoRequest_AppInfo>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_only_public_obsolete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoRequest.AppInfo)
}
CMsgClientPICSProductInfoRequest_AppInfo::CMsgClientPICSProductInfoRequest_AppInfo(const CMsgClientPICSProductInfoRequest_AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_public_obsolete_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_obsolete_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoRequest.AppInfo)
}

inline void CMsgClientPICSProductInfoRequest_AppInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&only_public_obsolete_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_obsolete_));
}

CMsgClientPICSProductInfoRequest_AppInfo::~CMsgClientPICSProductInfoRequest_AppInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoRequest.AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoRequest_AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSProductInfoRequest_AppInfo::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoRequest_AppInfo* _this = reinterpret_cast< CMsgClientPICSProductInfoRequest_AppInfo* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoRequest_AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoRequest_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoRequest_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoRequest.AppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_public_obsolete_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(only_public_obsolete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoRequest_AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_public_obsolete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_only_public_obsolete(&has_bits);
          only_public_obsolete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoRequest_AppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoRequest.AppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_access_token(), target);
  }

  // optional bool only_public_obsolete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_only_public_obsolete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoRequest.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoRequest.AppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_access_token());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool only_public_obsolete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoRequest_AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoRequest_AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoRequest_AppInfo::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoRequest_AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoRequest_AppInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoRequest_AppInfo &>(from));
}


void CMsgClientPICSProductInfoRequest_AppInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoRequest.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      only_public_obsolete_ = from.only_public_obsolete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoRequest_AppInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoRequest.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_AppInfo::InternalSwap(CMsgClientPICSProductInfoRequest_AppInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, only_public_obsolete_)
      + sizeof(CMsgClientPICSProductInfoRequest_AppInfo::only_public_obsolete_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_AppInfo, access_token_)>(
          reinterpret_cast<char*>(&access_token_),
          reinterpret_cast<char*>(&other->access_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoRequest_AppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[8]);
}

// ===================================================================

class CMsgClientPICSProductInfoRequest_PackageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoRequest_PackageInfo>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoRequest.PackageInfo)
}
CMsgClientPICSProductInfoRequest_PackageInfo::CMsgClientPICSProductInfoRequest_PackageInfo(const CMsgClientPICSProductInfoRequest_PackageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoRequest.PackageInfo)
}

inline void CMsgClientPICSProductInfoRequest_PackageInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
}

CMsgClientPICSProductInfoRequest_PackageInfo::~CMsgClientPICSProductInfoRequest_PackageInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoRequest.PackageInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoRequest_PackageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSProductInfoRequest_PackageInfo::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoRequest_PackageInfo* _this = reinterpret_cast< CMsgClientPICSProductInfoRequest_PackageInfo* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoRequest_PackageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoRequest_PackageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoRequest_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoRequest.PackageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoRequest_PackageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoRequest_PackageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoRequest.PackageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoRequest.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoRequest_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoRequest.PackageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_access_token());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoRequest_PackageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoRequest_PackageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoRequest_PackageInfo::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoRequest_PackageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoRequest_PackageInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoRequest_PackageInfo &>(from));
}


void CMsgClientPICSProductInfoRequest_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoRequest.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoRequest_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoRequest_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoRequest.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest_PackageInfo::InternalSwap(CMsgClientPICSProductInfoRequest_PackageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, packageid_)
      + sizeof(CMsgClientPICSProductInfoRequest_PackageInfo::packageid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest_PackageInfo, access_token_)>(
          reinterpret_cast<char*>(&access_token_),
          reinterpret_cast<char*>(&other->access_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoRequest_PackageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[9]);
}

// ===================================================================

class CMsgClientPICSProductInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoRequest>()._has_bits_);
  static void set_has_meta_data_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_prev_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obsolete_supports_package_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_single_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packages_(arena),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoRequest)
}
CMsgClientPICSProductInfoRequest::CMsgClientPICSProductInfoRequest(const CMsgClientPICSProductInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packages_(from.packages_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_prev_failed_, &from.num_prev_failed_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&num_prev_failed_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoRequest)
}

inline void CMsgClientPICSProductInfoRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_prev_failed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&num_prev_failed_)) + sizeof(sequence_number_));
}

CMsgClientPICSProductInfoRequest::~CMsgClientPICSProductInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSProductInfoRequest::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoRequest* _this = reinterpret_cast< CMsgClientPICSProductInfoRequest* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&num_prev_failed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&num_prev_failed_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool meta_data_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_meta_data_only(&has_bits);
          meta_data_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_prev_failed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_prev_failed(&has_bits);
          num_prev_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 OBSOLETE_supports_package_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_obsolete_supports_package_tokens(&has_bits);
          obsolete_supports_package_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool single_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_single_response(&has_bits);
          single_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_packages(i), target, stream);
  }

  // repeated .CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_meta_data_only(), target);
  }

  // optional uint32 num_prev_failed = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_prev_failed(), target);
  }

  // optional uint32 OBSOLETE_supports_package_tokens = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_obsolete_supports_package_tokens(), target);
  }

  // optional uint32 sequence_number = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sequence_number(), target);
  }

  // optional bool single_response = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_single_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoRequest)
  return target;
}

size_t CMsgClientPICSProductInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPICSProductInfoRequest.PackageInfo packages = 1;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientPICSProductInfoRequest.AppInfo apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 num_prev_failed = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_prev_failed());
    }

    // optional uint32 OBSOLETE_supports_package_tokens = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_obsolete_supports_package_tokens());
    }

    // optional bool meta_data_only = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool single_response = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 sequence_number = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoRequest::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoRequest &>(from));
}


void CMsgClientPICSProductInfoRequest::MergeFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      num_prev_failed_ = from.num_prev_failed_;
    }
    if (cached_has_bits & 0x00000002u) {
      obsolete_supports_package_tokens_ = from.obsolete_supports_package_tokens_;
    }
    if (cached_has_bits & 0x00000004u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      single_response_ = from.single_response_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoRequest::CopyFrom(const CMsgClientPICSProductInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoRequest::InternalSwap(CMsgClientPICSProductInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packages_.InternalSwap(&other->packages_);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, sequence_number_)
      + sizeof(CMsgClientPICSProductInfoRequest::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoRequest, num_prev_failed_)>(
          reinterpret_cast<char*>(&num_prev_failed_),
          reinterpret_cast<char*>(&other->num_prev_failed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[10]);
}

// ===================================================================

class CMsgClientPICSProductInfoResponse_AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoResponse_AppInfo>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_missing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_only_public(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoResponse.AppInfo)
}
CMsgClientPICSProductInfoResponse_AppInfo::CMsgClientPICSProductInfoResponse_AppInfo(const CMsgClientPICSProductInfoResponse_AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buffer()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoResponse.AppInfo)
}

inline void CMsgClientPICSProductInfoResponse_AppInfo::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_AppInfo::~CMsgClientPICSProductInfoResponse_AppInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoResponse.AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoResponse_AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_AppInfo::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoResponse_AppInfo* _this = reinterpret_cast< CMsgClientPICSProductInfoResponse_AppInfo* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoResponse_AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoResponse_AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoResponse_AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoResponse.AppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoResponse_AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 change_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_change_number(&has_bits);
          change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool missing_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_missing_token(&has_bits);
          missing_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_public = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_only_public(&has_bits);
          only_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoResponse_AppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoResponse.AppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  // optional bool only_public = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_only_public(), target);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoResponse.AppInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoResponse.AppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes sha = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional bytes buffer = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buffer());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_change_number());
    }

    // optional bool missing_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool only_public = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoResponse_AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoResponse_AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoResponse_AppInfo::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoResponse_AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoResponse_AppInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoResponse_AppInfo &>(from));
}


void CMsgClientPICSProductInfoResponse_AppInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoResponse.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      only_public_ = from.only_public_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoResponse_AppInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoResponse.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_AppInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_AppInfo::InternalSwap(CMsgClientPICSProductInfoResponse_AppInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, lhs_arena,
      &other->sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, size_)
      + sizeof(CMsgClientPICSProductInfoResponse_AppInfo::size_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_AppInfo, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoResponse_AppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[11]);
}

// ===================================================================

class CMsgClientPICSProductInfoResponse_PackageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoResponse_PackageInfo>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_missing_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoResponse.PackageInfo)
}
CMsgClientPICSProductInfoResponse_PackageInfo::CMsgClientPICSProductInfoResponse_PackageInfo(const CMsgClientPICSProductInfoResponse_PackageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buffer()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoResponse.PackageInfo)
}

inline void CMsgClientPICSProductInfoResponse_PackageInfo::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
}

CMsgClientPICSProductInfoResponse_PackageInfo::~CMsgClientPICSProductInfoResponse_PackageInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoResponse.PackageInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoResponse_PackageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse_PackageInfo::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoResponse_PackageInfo* _this = reinterpret_cast< CMsgClientPICSProductInfoResponse_PackageInfo* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoResponse_PackageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoResponse_PackageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoResponse_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoResponse.PackageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoResponse_PackageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 change_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_change_number(&has_bits);
          change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool missing_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_missing_token(&has_bits);
          missing_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoResponse_PackageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoResponse.PackageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint32 change_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_number(), target);
  }

  // optional bool missing_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_missing_token(), target);
  }

  // optional bytes sha = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoResponse.PackageInfo)
  return target;
}

size_t CMsgClientPICSProductInfoResponse_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoResponse.PackageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional bytes buffer = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buffer());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

    // optional uint32 change_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_change_number());
    }

    // optional bool missing_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoResponse_PackageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoResponse_PackageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoResponse_PackageInfo::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoResponse_PackageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoResponse_PackageInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoResponse_PackageInfo &>(from));
}


void CMsgClientPICSProductInfoResponse_PackageInfo::MergeFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoResponse.PackageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_number_ = from.change_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      missing_token_ = from.missing_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoResponse_PackageInfo::CopyFrom(const CMsgClientPICSProductInfoResponse_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoResponse.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse_PackageInfo::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse_PackageInfo::InternalSwap(CMsgClientPICSProductInfoResponse_PackageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, lhs_arena,
      &other->sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, size_)
      + sizeof(CMsgClientPICSProductInfoResponse_PackageInfo::size_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse_PackageInfo, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoResponse_PackageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[12]);
}

// ===================================================================

class CMsgClientPICSProductInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSProductInfoResponse>()._has_bits_);
  static void set_has_meta_data_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_http_min_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_http_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena),
  unknown_appids_(arena),
  packages_(arena),
  unknown_packageids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSProductInfoResponse)
}
CMsgClientPICSProductInfoResponse::CMsgClientPICSProductInfoResponse(const CMsgClientPICSProductInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_(from.apps_),
      unknown_appids_(from.unknown_appids_),
      packages_(from.packages_),
      unknown_packageids_(from.unknown_packageids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_http_host()) {
    http_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_host(), 
      GetArenaForAllocation());
  }
  ::memcpy(&meta_data_only_, &from.meta_data_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&http_min_size_) -
    reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSProductInfoResponse)
}

inline void CMsgClientPICSProductInfoResponse::SharedCtor() {
http_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  http_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_data_only_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&http_min_size_) -
    reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
}

CMsgClientPICSProductInfoResponse::~CMsgClientPICSProductInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSProductInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSProductInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  http_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPICSProductInfoResponse::ArenaDtor(void* object) {
  CMsgClientPICSProductInfoResponse* _this = reinterpret_cast< CMsgClientPICSProductInfoResponse* >(object);
  (void)_this;
}
void CMsgClientPICSProductInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSProductInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSProductInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSProductInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  unknown_appids_.Clear();
  packages_.Clear();
  unknown_packageids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    http_host_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&meta_data_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&http_min_size_) -
        reinterpret_cast<char*>(&meta_data_only_)) + sizeof(http_min_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSProductInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unknown_appids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unknown_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unknown_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unknown_packageids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unknown_packageids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unknown_packageids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool meta_data_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_meta_data_only(&has_bits);
          meta_data_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool response_pending = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_response_pending(&has_bits);
          response_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 http_min_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_http_min_size(&has_bits);
          http_min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string http_host = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_http_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPICSProductInfoResponse.http_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSProductInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSProductInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  // repeated uint32 unknown_appids = 2;
  for (int i = 0, n = this->_internal_unknown_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unknown_appids(i), target);
  }

  // repeated .CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_packages(i), target, stream);
  }

  // repeated uint32 unknown_packageids = 4;
  for (int i = 0, n = this->_internal_unknown_packageids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unknown_packageids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool meta_data_only = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_meta_data_only(), target);
  }

  // optional bool response_pending = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_response_pending(), target);
  }

  // optional uint32 http_min_size = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_http_min_size(), target);
  }

  // optional string http_host = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_host().data(), static_cast<int>(this->_internal_http_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPICSProductInfoResponse.http_host");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_http_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSProductInfoResponse)
  return target;
}

size_t CMsgClientPICSProductInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSProductInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPICSProductInfoResponse.AppInfo apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 unknown_appids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unknown_appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_appids_size());
    total_size += data_size;
  }

  // repeated .CMsgClientPICSProductInfoResponse.PackageInfo packages = 3;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 unknown_packageids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unknown_packageids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_packageids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string http_host = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_host());
    }

    // optional bool meta_data_only = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool response_pending = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 http_min_size = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_http_min_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSProductInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSProductInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSProductInfoResponse::GetClassData() const { return &_class_data_; }

void CMsgClientPICSProductInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSProductInfoResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSProductInfoResponse &>(from));
}


void CMsgClientPICSProductInfoResponse::MergeFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSProductInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  unknown_appids_.MergeFrom(from.unknown_appids_);
  packages_.MergeFrom(from.packages_);
  unknown_packageids_.MergeFrom(from.unknown_packageids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_http_host(from._internal_http_host());
    }
    if (cached_has_bits & 0x00000002u) {
      meta_data_only_ = from.meta_data_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      response_pending_ = from.response_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_min_size_ = from.http_min_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSProductInfoResponse::CopyFrom(const CMsgClientPICSProductInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSProductInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSProductInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSProductInfoResponse::InternalSwap(CMsgClientPICSProductInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  unknown_appids_.InternalSwap(&other->unknown_appids_);
  packages_.InternalSwap(&other->packages_);
  unknown_packageids_.InternalSwap(&other->unknown_packageids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &http_host_, lhs_arena,
      &other->http_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, http_min_size_)
      + sizeof(CMsgClientPICSProductInfoResponse::http_min_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSProductInfoResponse, meta_data_only_)>(
          reinterpret_cast<char*>(&meta_data_only_),
          reinterpret_cast<char*>(&other->meta_data_only_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSProductInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[13]);
}

// ===================================================================

class CMsgClientPICSAccessTokenRequest::_Internal {
 public:
};

CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packageids_(arena),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSAccessTokenRequest)
}
CMsgClientPICSAccessTokenRequest::CMsgClientPICSAccessTokenRequest(const CMsgClientPICSAccessTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packageids_(from.packageids_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSAccessTokenRequest)
}

inline void CMsgClientPICSAccessTokenRequest::SharedCtor() {
}

CMsgClientPICSAccessTokenRequest::~CMsgClientPICSAccessTokenRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSAccessTokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSAccessTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSAccessTokenRequest::ArenaDtor(void* object) {
  CMsgClientPICSAccessTokenRequest* _this = reinterpret_cast< CMsgClientPICSAccessTokenRequest* >(object);
  (void)_this;
}
void CMsgClientPICSAccessTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSAccessTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSAccessTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSAccessTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packageids_.Clear();
  appids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSAccessTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 packageids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packageids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packageids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSAccessTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSAccessTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  for (int i = 0, n = this->_internal_packageids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageids(i), target);
  }

  // repeated uint32 appids = 2;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSAccessTokenRequest)
  return target;
}

size_t CMsgClientPICSAccessTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSAccessTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packageids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packageids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packageids_size());
    total_size += data_size;
  }

  // repeated uint32 appids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSAccessTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSAccessTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSAccessTokenRequest::GetClassData() const { return &_class_data_; }

void CMsgClientPICSAccessTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSAccessTokenRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSAccessTokenRequest &>(from));
}


void CMsgClientPICSAccessTokenRequest::MergeFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packageids_.MergeFrom(from.packageids_);
  appids_.MergeFrom(from.appids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSAccessTokenRequest::CopyFrom(const CMsgClientPICSAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenRequest::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenRequest::InternalSwap(CMsgClientPICSAccessTokenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packageids_.InternalSwap(&other->packageids_);
  appids_.InternalSwap(&other->appids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSAccessTokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[14]);
}

// ===================================================================

class CMsgClientPICSAccessTokenResponse_PackageToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSAccessTokenResponse_PackageToken>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSAccessTokenResponse.PackageToken)
}
CMsgClientPICSAccessTokenResponse_PackageToken::CMsgClientPICSAccessTokenResponse_PackageToken(const CMsgClientPICSAccessTokenResponse_PackageToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSAccessTokenResponse.PackageToken)
}

inline void CMsgClientPICSAccessTokenResponse_PackageToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
}

CMsgClientPICSAccessTokenResponse_PackageToken::~CMsgClientPICSAccessTokenResponse_PackageToken() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSAccessTokenResponse.PackageToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSAccessTokenResponse_PackageToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSAccessTokenResponse_PackageToken::ArenaDtor(void* object) {
  CMsgClientPICSAccessTokenResponse_PackageToken* _this = reinterpret_cast< CMsgClientPICSAccessTokenResponse_PackageToken* >(object);
  (void)_this;
}
void CMsgClientPICSAccessTokenResponse_PackageToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSAccessTokenResponse_PackageToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSAccessTokenResponse_PackageToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSAccessTokenResponse.PackageToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSAccessTokenResponse_PackageToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSAccessTokenResponse_PackageToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSAccessTokenResponse.PackageToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSAccessTokenResponse.PackageToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_PackageToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSAccessTokenResponse.PackageToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_access_token());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSAccessTokenResponse_PackageToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSAccessTokenResponse_PackageToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSAccessTokenResponse_PackageToken::GetClassData() const { return &_class_data_; }

void CMsgClientPICSAccessTokenResponse_PackageToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSAccessTokenResponse_PackageToken *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSAccessTokenResponse_PackageToken &>(from));
}


void CMsgClientPICSAccessTokenResponse_PackageToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSAccessTokenResponse.PackageToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSAccessTokenResponse_PackageToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_PackageToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSAccessTokenResponse.PackageToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_PackageToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_PackageToken::InternalSwap(CMsgClientPICSAccessTokenResponse_PackageToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, packageid_)
      + sizeof(CMsgClientPICSAccessTokenResponse_PackageToken::packageid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_PackageToken, access_token_)>(
          reinterpret_cast<char*>(&access_token_),
          reinterpret_cast<char*>(&other->access_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSAccessTokenResponse_PackageToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[15]);
}

// ===================================================================

class CMsgClientPICSAccessTokenResponse_AppToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPICSAccessTokenResponse_AppToken>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSAccessTokenResponse.AppToken)
}
CMsgClientPICSAccessTokenResponse_AppToken::CMsgClientPICSAccessTokenResponse_AppToken(const CMsgClientPICSAccessTokenResponse_AppToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&access_token_, &from.access_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSAccessTokenResponse.AppToken)
}

inline void CMsgClientPICSAccessTokenResponse_AppToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
}

CMsgClientPICSAccessTokenResponse_AppToken::~CMsgClientPICSAccessTokenResponse_AppToken() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSAccessTokenResponse.AppToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSAccessTokenResponse_AppToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSAccessTokenResponse_AppToken::ArenaDtor(void* object) {
  CMsgClientPICSAccessTokenResponse_AppToken* _this = reinterpret_cast< CMsgClientPICSAccessTokenResponse_AppToken* >(object);
  (void)_this;
}
void CMsgClientPICSAccessTokenResponse_AppToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSAccessTokenResponse_AppToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSAccessTokenResponse_AppToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSAccessTokenResponse.AppToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&access_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&access_token_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSAccessTokenResponse_AppToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_access_token(&has_bits);
          access_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSAccessTokenResponse_AppToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSAccessTokenResponse.AppToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 access_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSAccessTokenResponse.AppToken)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse_AppToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSAccessTokenResponse.AppToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 access_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_access_token());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSAccessTokenResponse_AppToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSAccessTokenResponse_AppToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSAccessTokenResponse_AppToken::GetClassData() const { return &_class_data_; }

void CMsgClientPICSAccessTokenResponse_AppToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSAccessTokenResponse_AppToken *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSAccessTokenResponse_AppToken &>(from));
}


void CMsgClientPICSAccessTokenResponse_AppToken::MergeFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSAccessTokenResponse.AppToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      access_token_ = from.access_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSAccessTokenResponse_AppToken::CopyFrom(const CMsgClientPICSAccessTokenResponse_AppToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSAccessTokenResponse.AppToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse_AppToken::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse_AppToken::InternalSwap(CMsgClientPICSAccessTokenResponse_AppToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, appid_)
      + sizeof(CMsgClientPICSAccessTokenResponse_AppToken::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPICSAccessTokenResponse_AppToken, access_token_)>(
          reinterpret_cast<char*>(&access_token_),
          reinterpret_cast<char*>(&other->access_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSAccessTokenResponse_AppToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[16]);
}

// ===================================================================

class CMsgClientPICSAccessTokenResponse::_Internal {
 public:
};

CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  package_access_tokens_(arena),
  package_denied_tokens_(arena),
  app_access_tokens_(arena),
  app_denied_tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPICSAccessTokenResponse)
}
CMsgClientPICSAccessTokenResponse::CMsgClientPICSAccessTokenResponse(const CMsgClientPICSAccessTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      package_access_tokens_(from.package_access_tokens_),
      package_denied_tokens_(from.package_denied_tokens_),
      app_access_tokens_(from.app_access_tokens_),
      app_denied_tokens_(from.app_denied_tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientPICSAccessTokenResponse)
}

inline void CMsgClientPICSAccessTokenResponse::SharedCtor() {
}

CMsgClientPICSAccessTokenResponse::~CMsgClientPICSAccessTokenResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientPICSAccessTokenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPICSAccessTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPICSAccessTokenResponse::ArenaDtor(void* object) {
  CMsgClientPICSAccessTokenResponse* _this = reinterpret_cast< CMsgClientPICSAccessTokenResponse* >(object);
  (void)_this;
}
void CMsgClientPICSAccessTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPICSAccessTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPICSAccessTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPICSAccessTokenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_access_tokens_.Clear();
  package_denied_tokens_.Clear();
  app_access_tokens_.Clear();
  app_denied_tokens_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPICSAccessTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package_access_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 package_denied_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_package_denied_tokens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_package_denied_tokens(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_access_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 app_denied_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_denied_tokens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_denied_tokens(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPICSAccessTokenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPICSAccessTokenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_package_access_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_package_access_tokens(i), target, stream);
  }

  // repeated uint32 package_denied_tokens = 2;
  for (int i = 0, n = this->_internal_package_denied_tokens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_package_denied_tokens(i), target);
  }

  // repeated .CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_access_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_app_access_tokens(i), target, stream);
  }

  // repeated uint32 app_denied_tokens = 4;
  for (int i = 0, n = this->_internal_app_denied_tokens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_app_denied_tokens(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPICSAccessTokenResponse)
  return target;
}

size_t CMsgClientPICSAccessTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPICSAccessTokenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  total_size += 1UL * this->_internal_package_access_tokens_size();
  for (const auto& msg : this->package_access_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 package_denied_tokens = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->package_denied_tokens_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_package_denied_tokens_size());
    total_size += data_size;
  }

  // repeated .CMsgClientPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  total_size += 1UL * this->_internal_app_access_tokens_size();
  for (const auto& msg : this->app_access_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 app_denied_tokens = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_denied_tokens_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_app_denied_tokens_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPICSAccessTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPICSAccessTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPICSAccessTokenResponse::GetClassData() const { return &_class_data_; }

void CMsgClientPICSAccessTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPICSAccessTokenResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientPICSAccessTokenResponse &>(from));
}


void CMsgClientPICSAccessTokenResponse::MergeFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPICSAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  package_access_tokens_.MergeFrom(from.package_access_tokens_);
  package_denied_tokens_.MergeFrom(from.package_denied_tokens_);
  app_access_tokens_.MergeFrom(from.app_access_tokens_);
  app_denied_tokens_.MergeFrom(from.app_denied_tokens_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPICSAccessTokenResponse::CopyFrom(const CMsgClientPICSAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPICSAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPICSAccessTokenResponse::IsInitialized() const {
  return true;
}

void CMsgClientPICSAccessTokenResponse::InternalSwap(CMsgClientPICSAccessTokenResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  package_access_tokens_.InternalSwap(&other->package_access_tokens_);
  package_denied_tokens_.InternalSwap(&other->package_denied_tokens_);
  app_access_tokens_.InternalSwap(&other->app_access_tokens_);
  app_denied_tokens_.InternalSwap(&other->app_denied_tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPICSAccessTokenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5fappinfo_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5fappinfo_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientAppInfoUpdate* Arena::CreateMaybeMessage< ::CMsgClientAppInfoUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAppInfoUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAppInfoChanges* Arena::CreateMaybeMessage< ::CMsgClientAppInfoChanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAppInfoChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAppInfoRequest_App* Arena::CreateMaybeMessage< ::CMsgClientAppInfoRequest_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAppInfoRequest_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAppInfoRequest* Arena::CreateMaybeMessage< ::CMsgClientAppInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAppInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSChangesSinceRequest* Arena::CreateMaybeMessage< ::CMsgClientPICSChangesSinceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSChangesSinceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSChangesSinceResponse_PackageChange* Arena::CreateMaybeMessage< ::CMsgClientPICSChangesSinceResponse_PackageChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSChangesSinceResponse_PackageChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSChangesSinceResponse_AppChange* Arena::CreateMaybeMessage< ::CMsgClientPICSChangesSinceResponse_AppChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSChangesSinceResponse_AppChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSChangesSinceResponse* Arena::CreateMaybeMessage< ::CMsgClientPICSChangesSinceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSChangesSinceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoRequest_AppInfo* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoRequest_AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoRequest_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoRequest_PackageInfo* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoRequest_PackageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoRequest_PackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoRequest* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoResponse_AppInfo* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoResponse_AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoResponse_AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoResponse_PackageInfo* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoResponse_PackageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoResponse_PackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSProductInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientPICSProductInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSProductInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSAccessTokenRequest* Arena::CreateMaybeMessage< ::CMsgClientPICSAccessTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSAccessTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSAccessTokenResponse_PackageToken* Arena::CreateMaybeMessage< ::CMsgClientPICSAccessTokenResponse_PackageToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSAccessTokenResponse_PackageToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSAccessTokenResponse_AppToken* Arena::CreateMaybeMessage< ::CMsgClientPICSAccessTokenResponse_AppToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSAccessTokenResponse_AppToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPICSAccessTokenResponse* Arena::CreateMaybeMessage< ::CMsgClientPICSAccessTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPICSAccessTokenResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
