// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_marketingmessages.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fmarketingmessages_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fmarketingmessages_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "steammessages_storebrowse.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fmarketingmessages_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fmarketingmessages_2esteamclient_2eproto;
class CDisplayMarketingMessage;
struct CDisplayMarketingMessageDefaultTypeInternal;
extern CDisplayMarketingMessageDefaultTypeInternal _CDisplayMarketingMessage_default_instance_;
class CMarketingMessageHourlyStats;
struct CMarketingMessageHourlyStatsDefaultTypeInternal;
extern CMarketingMessageHourlyStatsDefaultTypeInternal _CMarketingMessageHourlyStats_default_instance_;
class CMarketingMessageProto;
struct CMarketingMessageProtoDefaultTypeInternal;
extern CMarketingMessageProtoDefaultTypeInternal _CMarketingMessageProto_default_instance_;
class CMarketingMessages_CreateMarketingMessage_Request;
struct CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal;
extern CMarketingMessages_CreateMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_CreateMarketingMessage_Request_default_instance_;
class CMarketingMessages_CreateMarketingMessage_Response;
struct CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal;
extern CMarketingMessages_CreateMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_CreateMarketingMessage_Response_default_instance_;
class CMarketingMessages_DeleteMarketingMessage_Request;
struct CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal;
extern CMarketingMessages_DeleteMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_DeleteMarketingMessage_Request_default_instance_;
class CMarketingMessages_DeleteMarketingMessage_Response;
struct CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal;
extern CMarketingMessages_DeleteMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_DeleteMarketingMessage_Response_default_instance_;
class CMarketingMessages_DoesUserHavePendingMarketingMessages_Request;
struct CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal;
extern CMarketingMessages_DoesUserHavePendingMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_DoesUserHavePendingMarketingMessages_Request_default_instance_;
class CMarketingMessages_DoesUserHavePendingMarketingMessages_Response;
struct CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal;
extern CMarketingMessages_DoesUserHavePendingMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_DoesUserHavePendingMarketingMessages_Response_default_instance_;
class CMarketingMessages_FindMarketingMessages_Request;
struct CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal;
extern CMarketingMessages_FindMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_FindMarketingMessages_Request_default_instance_;
class CMarketingMessages_FindMarketingMessages_Response;
struct CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal;
extern CMarketingMessages_FindMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_FindMarketingMessages_Response_default_instance_;
class CMarketingMessages_GetActiveMarketingMessages_Request;
struct CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal;
extern CMarketingMessages_GetActiveMarketingMessages_RequestDefaultTypeInternal _CMarketingMessages_GetActiveMarketingMessages_Request_default_instance_;
class CMarketingMessages_GetActiveMarketingMessages_Response;
struct CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetActiveMarketingMessages_ResponseDefaultTypeInternal _CMarketingMessages_GetActiveMarketingMessages_Response_default_instance_;
class CMarketingMessages_GetDisplayMarketingMessage_Request;
struct CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal;
extern CMarketingMessages_GetDisplayMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_GetDisplayMarketingMessage_Request_default_instance_;
class CMarketingMessages_GetDisplayMarketingMessage_Response;
struct CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetDisplayMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_GetDisplayMarketingMessage_Response_default_instance_;
class CMarketingMessages_GetMarketingMessageViewerStats_Request;
struct CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessageViewerStats_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessageViewerStats_Request_default_instance_;
class CMarketingMessages_GetMarketingMessageViewerStats_Response;
struct CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessageViewerStats_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessageViewerStats_Response_default_instance_;
class CMarketingMessages_GetMarketingMessage_Request;
struct CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessage_Request_default_instance_;
class CMarketingMessages_GetMarketingMessage_Response;
struct CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessage_Response_default_instance_;
class CMarketingMessages_GetMarketingMessagesForUser_Request;
struct CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessagesForUser_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Request_default_instance_;
class CMarketingMessages_GetMarketingMessagesForUser_Response;
struct CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessagesForUser_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Response_default_instance_;
class CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser;
struct CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUserDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser_default_instance_;
class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request;
struct CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessagesViewerRangeStats_RequestDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request_default_instance_;
class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response;
struct CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal;
extern CMarketingMessages_GetMarketingMessagesViewerRangeStats_ResponseDefaultTypeInternal _CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response_default_instance_;
class CMarketingMessages_MarkMessageSeen_Notification;
struct CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal;
extern CMarketingMessages_MarkMessageSeen_NotificationDefaultTypeInternal _CMarketingMessages_MarkMessageSeen_Notification_default_instance_;
class CMarketingMessages_UpdateMarketingMessage_Request;
struct CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal;
extern CMarketingMessages_UpdateMarketingMessage_RequestDefaultTypeInternal _CMarketingMessages_UpdateMarketingMessage_Request_default_instance_;
class CMarketingMessages_UpdateMarketingMessage_Response;
struct CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal;
extern CMarketingMessages_UpdateMarketingMessage_ResponseDefaultTypeInternal _CMarketingMessages_UpdateMarketingMessage_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDisplayMarketingMessage* Arena::CreateMaybeMessage<::CDisplayMarketingMessage>(Arena*);
template<> ::CMarketingMessageHourlyStats* Arena::CreateMaybeMessage<::CMarketingMessageHourlyStats>(Arena*);
template<> ::CMarketingMessageProto* Arena::CreateMaybeMessage<::CMarketingMessageProto>(Arena*);
template<> ::CMarketingMessages_CreateMarketingMessage_Request* Arena::CreateMaybeMessage<::CMarketingMessages_CreateMarketingMessage_Request>(Arena*);
template<> ::CMarketingMessages_CreateMarketingMessage_Response* Arena::CreateMaybeMessage<::CMarketingMessages_CreateMarketingMessage_Response>(Arena*);
template<> ::CMarketingMessages_DeleteMarketingMessage_Request* Arena::CreateMaybeMessage<::CMarketingMessages_DeleteMarketingMessage_Request>(Arena*);
template<> ::CMarketingMessages_DeleteMarketingMessage_Response* Arena::CreateMaybeMessage<::CMarketingMessages_DeleteMarketingMessage_Response>(Arena*);
template<> ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* Arena::CreateMaybeMessage<::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request>(Arena*);
template<> ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* Arena::CreateMaybeMessage<::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response>(Arena*);
template<> ::CMarketingMessages_FindMarketingMessages_Request* Arena::CreateMaybeMessage<::CMarketingMessages_FindMarketingMessages_Request>(Arena*);
template<> ::CMarketingMessages_FindMarketingMessages_Response* Arena::CreateMaybeMessage<::CMarketingMessages_FindMarketingMessages_Response>(Arena*);
template<> ::CMarketingMessages_GetActiveMarketingMessages_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetActiveMarketingMessages_Request>(Arena*);
template<> ::CMarketingMessages_GetActiveMarketingMessages_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetActiveMarketingMessages_Response>(Arena*);
template<> ::CMarketingMessages_GetDisplayMarketingMessage_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetDisplayMarketingMessage_Request>(Arena*);
template<> ::CMarketingMessages_GetDisplayMarketingMessage_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetDisplayMarketingMessage_Response>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessageViewerStats_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessageViewerStats_Request>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessageViewerStats_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessageViewerStats_Response>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessage_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessage_Request>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessage_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessage_Response>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessagesForUser_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessagesForUser_Request>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessagesForUser_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessagesForUser_Response>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request>(Arena*);
template<> ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* Arena::CreateMaybeMessage<::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response>(Arena*);
template<> ::CMarketingMessages_MarkMessageSeen_Notification* Arena::CreateMaybeMessage<::CMarketingMessages_MarkMessageSeen_Notification>(Arena*);
template<> ::CMarketingMessages_UpdateMarketingMessage_Request* Arena::CreateMaybeMessage<::CMarketingMessages_UpdateMarketingMessage_Request>(Arena*);
template<> ::CMarketingMessages_UpdateMarketingMessage_Response* Arena::CreateMaybeMessage<::CMarketingMessages_UpdateMarketingMessage_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EMarketingMessageType : int {
  k_EMarketingMessageInvalid = 0,
  k_EMarketingMessageNowAvailable = 1,
  k_EMarketingMessageWeekendDeal = 2,
  k_EMarketingMessagePrePurchase = 3,
  k_EMarketingMessagePlayNow = 4,
  k_EMarketingMessagePreloadNow = 5,
  k_EMarketingMessageGeneral = 6,
  k_EMarketingMessageDemoQuit = 7,
  k_EMarketingMessageGifting = 8,
  k_EMarketingMessageEJsKorner = 9,
  k_EMarketingMessageUpdate = 10,
  k_EMarketingMessageMidweekDeal = 11,
  k_EMarketingMessageDailyDeal = 12
};
bool EMarketingMessageType_IsValid(int value);
constexpr EMarketingMessageType EMarketingMessageType_MIN = k_EMarketingMessageInvalid;
constexpr EMarketingMessageType EMarketingMessageType_MAX = k_EMarketingMessageDailyDeal;
constexpr int EMarketingMessageType_ARRAYSIZE = EMarketingMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageType_descriptor();
template<typename T>
inline const std::string& EMarketingMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketingMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketingMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketingMessageType_descriptor(), enum_t_value);
}
inline bool EMarketingMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMarketingMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketingMessageType>(
    EMarketingMessageType_descriptor(), name, value);
}
enum EMarketingMessageVisibility : int {
  k_EMarketingMessageVisibleBeta = 1,
  k_EMarketingMessageVisiblePublic = 2
};
bool EMarketingMessageVisibility_IsValid(int value);
constexpr EMarketingMessageVisibility EMarketingMessageVisibility_MIN = k_EMarketingMessageVisibleBeta;
constexpr EMarketingMessageVisibility EMarketingMessageVisibility_MAX = k_EMarketingMessageVisiblePublic;
constexpr int EMarketingMessageVisibility_ARRAYSIZE = EMarketingMessageVisibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageVisibility_descriptor();
template<typename T>
inline const std::string& EMarketingMessageVisibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketingMessageVisibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketingMessageVisibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketingMessageVisibility_descriptor(), enum_t_value);
}
inline bool EMarketingMessageVisibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMarketingMessageVisibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketingMessageVisibility>(
    EMarketingMessageVisibility_descriptor(), name, value);
}
enum EMarketingMessageAssociationType : int {
  k_EMarketingMessageNoAssociation = 0,
  k_EMarketingMessageAppAssociation = 1,
  k_EMarketingMessageSubscriptionAssociation = 2,
  k_EMarketingMessagePublisherAssociation = 3,
  k_EMarketingMessageGenreAssociation = 4,
  k_EMarketingMessageBundleAssociation = 5
};
bool EMarketingMessageAssociationType_IsValid(int value);
constexpr EMarketingMessageAssociationType EMarketingMessageAssociationType_MIN = k_EMarketingMessageNoAssociation;
constexpr EMarketingMessageAssociationType EMarketingMessageAssociationType_MAX = k_EMarketingMessageBundleAssociation;
constexpr int EMarketingMessageAssociationType_ARRAYSIZE = EMarketingMessageAssociationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageAssociationType_descriptor();
template<typename T>
inline const std::string& EMarketingMessageAssociationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketingMessageAssociationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketingMessageAssociationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketingMessageAssociationType_descriptor(), enum_t_value);
}
inline bool EMarketingMessageAssociationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMarketingMessageAssociationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketingMessageAssociationType>(
    EMarketingMessageAssociationType_descriptor(), name, value);
}
enum EMarketingMessageTemplateType : int {
  k_EMarketingMessageTemplate_Unknown = 0,
  k_EMarketingMessageTemplate_Image = 1,
  k_EMarketingMessageTemplate_Animated = 2,
  k_EMarketingMessageTemplate_Featured_Video = 3,
  k_EMarketingMessageTemplate_DLC_Override = 4,
  k_EMarketingMessageTemplate_Replay = 5,
  k_EMarketingMessageTemplate_MAX = 6
};
bool EMarketingMessageTemplateType_IsValid(int value);
constexpr EMarketingMessageTemplateType EMarketingMessageTemplateType_MIN = k_EMarketingMessageTemplate_Unknown;
constexpr EMarketingMessageTemplateType EMarketingMessageTemplateType_MAX = k_EMarketingMessageTemplate_MAX;
constexpr int EMarketingMessageTemplateType_ARRAYSIZE = EMarketingMessageTemplateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageTemplateType_descriptor();
template<typename T>
inline const std::string& EMarketingMessageTemplateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketingMessageTemplateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketingMessageTemplateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketingMessageTemplateType_descriptor(), enum_t_value);
}
inline bool EMarketingMessageTemplateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMarketingMessageTemplateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketingMessageTemplateType>(
    EMarketingMessageTemplateType_descriptor(), name, value);
}
enum EMarketingMessageLookupType : int {
  k_EMarketingMessageLookupInvalid = 0,
  k_EMarketingMessageLookupByGID = 1,
  k_EMarketingMessageLookupActive = 2,
  k_EMarketingMessageLookupByTitleWithType = 3,
  k_EMarketingMessageLookupByGIDList = 4
};
bool EMarketingMessageLookupType_IsValid(int value);
constexpr EMarketingMessageLookupType EMarketingMessageLookupType_MIN = k_EMarketingMessageLookupInvalid;
constexpr EMarketingMessageLookupType EMarketingMessageLookupType_MAX = k_EMarketingMessageLookupByGIDList;
constexpr int EMarketingMessageLookupType_ARRAYSIZE = EMarketingMessageLookupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMarketingMessageLookupType_descriptor();
template<typename T>
inline const std::string& EMarketingMessageLookupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMarketingMessageLookupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMarketingMessageLookupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMarketingMessageLookupType_descriptor(), enum_t_value);
}
inline bool EMarketingMessageLookupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMarketingMessageLookupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMarketingMessageLookupType>(
    EMarketingMessageLookupType_descriptor(), name, value);
}
// ===================================================================

class CMarketingMessages_GetActiveMarketingMessages_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetActiveMarketingMessages_Request) */ {
 public:
  inline CMarketingMessages_GetActiveMarketingMessages_Request() : CMarketingMessages_GetActiveMarketingMessages_Request(nullptr) {}
  ~CMarketingMessages_GetActiveMarketingMessages_Request() override;
  explicit constexpr CMarketingMessages_GetActiveMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetActiveMarketingMessages_Request(const CMarketingMessages_GetActiveMarketingMessages_Request& from);
  CMarketingMessages_GetActiveMarketingMessages_Request(CMarketingMessages_GetActiveMarketingMessages_Request&& from) noexcept
    : CMarketingMessages_GetActiveMarketingMessages_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetActiveMarketingMessages_Request& operator=(const CMarketingMessages_GetActiveMarketingMessages_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetActiveMarketingMessages_Request& operator=(CMarketingMessages_GetActiveMarketingMessages_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetActiveMarketingMessages_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetActiveMarketingMessages_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetActiveMarketingMessages_Request*>(
               &_CMarketingMessages_GetActiveMarketingMessages_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMarketingMessages_GetActiveMarketingMessages_Request& a, CMarketingMessages_GetActiveMarketingMessages_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetActiveMarketingMessages_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetActiveMarketingMessages_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetActiveMarketingMessages_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetActiveMarketingMessages_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetActiveMarketingMessages_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetActiveMarketingMessages_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetActiveMarketingMessages_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetActiveMarketingMessages_Request";
  }
  protected:
  explicit CMarketingMessages_GetActiveMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 1,
    kAnonymousUserFieldNumber = 2,
  };
  // optional string country = 1;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional bool anonymous_user = 2 [(.description) = "Will not return any marketing message that requires ownership/playtime/wishlist"];
  bool has_anonymous_user() const;
  private:
  bool _internal_has_anonymous_user() const;
  public:
  void clear_anonymous_user();
  bool anonymous_user() const;
  void set_anonymous_user(bool value);
  private:
  bool _internal_anonymous_user() const;
  void _internal_set_anonymous_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetActiveMarketingMessages_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  bool anonymous_user_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessageProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessageProto) */ {
 public:
  inline CMarketingMessageProto() : CMarketingMessageProto(nullptr) {}
  ~CMarketingMessageProto() override;
  explicit constexpr CMarketingMessageProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessageProto(const CMarketingMessageProto& from);
  CMarketingMessageProto(CMarketingMessageProto&& from) noexcept
    : CMarketingMessageProto() {
    *this = ::std::move(from);
  }

  inline CMarketingMessageProto& operator=(const CMarketingMessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessageProto& operator=(CMarketingMessageProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessageProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessageProto* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessageProto*>(
               &_CMarketingMessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMarketingMessageProto& a, CMarketingMessageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessageProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessageProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessageProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessageProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessageProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessageProto";
  }
  protected:
  explicit CMarketingMessageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kAssociatedNameFieldNumber = 8,
    kCountryAllowFieldNumber = 11,
    kCountryDenyFieldNumber = 12,
    kAdditionalRestrictionsFieldNumber = 19,
    kTemplateTypeFieldNumber = 20,
    kTemplateVarsFieldNumber = 21,
    kCreatorNameFieldNumber = 23,
    kTemplateVarsJsonFieldNumber = 24,
    kAdditionalRestrictionsJsonFieldNumber = 25,
    kGidFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPriorityFieldNumber = 5,
    kAssociationTypeFieldNumber = 6,
    kAssociatedIdFieldNumber = 7,
    kStartDateFieldNumber = 9,
    kEndDateFieldNumber = 10,
    kOwnershipRestrictionsOverriddenFieldNumber = 13,
    kMustOwnAppidFieldNumber = 14,
    kMustNotOwnAppidFieldNumber = 15,
    kMustOwnPackageidFieldNumber = 16,
    kMustNotOwnPackageidFieldNumber = 17,
    kMustHaveLaunchedAppidFieldNumber = 18,
    kFlagsFieldNumber = 22,
    kVisibilityFieldNumber = 4,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string associated_name = 8;
  bool has_associated_name() const;
  private:
  bool _internal_has_associated_name() const;
  public:
  void clear_associated_name();
  const std::string& associated_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_name();
  PROTOBUF_NODISCARD std::string* release_associated_name();
  void set_allocated_associated_name(std::string* associated_name);
  private:
  const std::string& _internal_associated_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_name(const std::string& value);
  std::string* _internal_mutable_associated_name();
  public:

  // optional string country_allow = 11;
  bool has_country_allow() const;
  private:
  bool _internal_has_country_allow() const;
  public:
  void clear_country_allow();
  const std::string& country_allow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_allow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_allow();
  PROTOBUF_NODISCARD std::string* release_country_allow();
  void set_allocated_country_allow(std::string* country_allow);
  private:
  const std::string& _internal_country_allow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_allow(const std::string& value);
  std::string* _internal_mutable_country_allow();
  public:

  // optional string country_deny = 12;
  bool has_country_deny() const;
  private:
  bool _internal_has_country_deny() const;
  public:
  void clear_country_deny();
  const std::string& country_deny() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_deny(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_deny();
  PROTOBUF_NODISCARD std::string* release_country_deny();
  void set_allocated_country_deny(std::string* country_deny);
  private:
  const std::string& _internal_country_deny() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_deny(const std::string& value);
  std::string* _internal_mutable_country_deny();
  public:

  // optional string additional_restrictions = 19;
  bool has_additional_restrictions() const;
  private:
  bool _internal_has_additional_restrictions() const;
  public:
  void clear_additional_restrictions();
  const std::string& additional_restrictions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additional_restrictions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additional_restrictions();
  PROTOBUF_NODISCARD std::string* release_additional_restrictions();
  void set_allocated_additional_restrictions(std::string* additional_restrictions);
  private:
  const std::string& _internal_additional_restrictions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_restrictions(const std::string& value);
  std::string* _internal_mutable_additional_restrictions();
  public:

  // optional string template_type = 20;
  bool has_template_type() const;
  private:
  bool _internal_has_template_type() const;
  public:
  void clear_template_type();
  const std::string& template_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_type();
  PROTOBUF_NODISCARD std::string* release_template_type();
  void set_allocated_template_type(std::string* template_type);
  private:
  const std::string& _internal_template_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_type(const std::string& value);
  std::string* _internal_mutable_template_type();
  public:

  // optional string template_vars = 21;
  bool has_template_vars() const;
  private:
  bool _internal_has_template_vars() const;
  public:
  void clear_template_vars();
  const std::string& template_vars() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_vars(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_vars();
  PROTOBUF_NODISCARD std::string* release_template_vars();
  void set_allocated_template_vars(std::string* template_vars);
  private:
  const std::string& _internal_template_vars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_vars(const std::string& value);
  std::string* _internal_mutable_template_vars();
  public:

  // optional string creator_name = 23;
  bool has_creator_name() const;
  private:
  bool _internal_has_creator_name() const;
  public:
  void clear_creator_name();
  const std::string& creator_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_name();
  PROTOBUF_NODISCARD std::string* release_creator_name();
  void set_allocated_creator_name(std::string* creator_name);
  private:
  const std::string& _internal_creator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_name(const std::string& value);
  std::string* _internal_mutable_creator_name();
  public:

  // optional string template_vars_json = 24;
  bool has_template_vars_json() const;
  private:
  bool _internal_has_template_vars_json() const;
  public:
  void clear_template_vars_json();
  const std::string& template_vars_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_vars_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_vars_json();
  PROTOBUF_NODISCARD std::string* release_template_vars_json();
  void set_allocated_template_vars_json(std::string* template_vars_json);
  private:
  const std::string& _internal_template_vars_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_vars_json(const std::string& value);
  std::string* _internal_mutable_template_vars_json();
  public:

  // optional string additional_restrictions_json = 25;
  bool has_additional_restrictions_json() const;
  private:
  bool _internal_has_additional_restrictions_json() const;
  public:
  void clear_additional_restrictions_json();
  const std::string& additional_restrictions_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additional_restrictions_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additional_restrictions_json();
  PROTOBUF_NODISCARD std::string* release_additional_restrictions_json();
  void set_allocated_additional_restrictions_json(std::string* additional_restrictions_json);
  private:
  const std::string& _internal_additional_restrictions_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_restrictions_json(const std::string& value);
  std::string* _internal_mutable_additional_restrictions_json();
  public:

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EMarketingMessageType type() const;
  void set_type(::EMarketingMessageType value);
  private:
  ::EMarketingMessageType _internal_type() const;
  void _internal_set_type(::EMarketingMessageType value);
  public:

  // optional uint32 priority = 5;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // optional .EMarketingMessageAssociationType association_type = 6 [default = k_EMarketingMessageNoAssociation];
  bool has_association_type() const;
  private:
  bool _internal_has_association_type() const;
  public:
  void clear_association_type();
  ::EMarketingMessageAssociationType association_type() const;
  void set_association_type(::EMarketingMessageAssociationType value);
  private:
  ::EMarketingMessageAssociationType _internal_association_type() const;
  void _internal_set_association_type(::EMarketingMessageAssociationType value);
  public:

  // optional uint32 associated_id = 7;
  bool has_associated_id() const;
  private:
  bool _internal_has_associated_id() const;
  public:
  void clear_associated_id();
  uint32_t associated_id() const;
  void set_associated_id(uint32_t value);
  private:
  uint32_t _internal_associated_id() const;
  void _internal_set_associated_id(uint32_t value);
  public:

  // optional uint32 start_date = 9;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  uint32_t start_date() const;
  void set_start_date(uint32_t value);
  private:
  uint32_t _internal_start_date() const;
  void _internal_set_start_date(uint32_t value);
  public:

  // optional uint32 end_date = 10;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  uint32_t end_date() const;
  void set_end_date(uint32_t value);
  private:
  uint32_t _internal_end_date() const;
  void _internal_set_end_date(uint32_t value);
  public:

  // optional bool ownership_restrictions_overridden = 13;
  bool has_ownership_restrictions_overridden() const;
  private:
  bool _internal_has_ownership_restrictions_overridden() const;
  public:
  void clear_ownership_restrictions_overridden();
  bool ownership_restrictions_overridden() const;
  void set_ownership_restrictions_overridden(bool value);
  private:
  bool _internal_ownership_restrictions_overridden() const;
  void _internal_set_ownership_restrictions_overridden(bool value);
  public:

  // optional uint32 must_own_appid = 14;
  bool has_must_own_appid() const;
  private:
  bool _internal_has_must_own_appid() const;
  public:
  void clear_must_own_appid();
  uint32_t must_own_appid() const;
  void set_must_own_appid(uint32_t value);
  private:
  uint32_t _internal_must_own_appid() const;
  void _internal_set_must_own_appid(uint32_t value);
  public:

  // optional uint32 must_not_own_appid = 15;
  bool has_must_not_own_appid() const;
  private:
  bool _internal_has_must_not_own_appid() const;
  public:
  void clear_must_not_own_appid();
  uint32_t must_not_own_appid() const;
  void set_must_not_own_appid(uint32_t value);
  private:
  uint32_t _internal_must_not_own_appid() const;
  void _internal_set_must_not_own_appid(uint32_t value);
  public:

  // optional uint32 must_own_packageid = 16;
  bool has_must_own_packageid() const;
  private:
  bool _internal_has_must_own_packageid() const;
  public:
  void clear_must_own_packageid();
  uint32_t must_own_packageid() const;
  void set_must_own_packageid(uint32_t value);
  private:
  uint32_t _internal_must_own_packageid() const;
  void _internal_set_must_own_packageid(uint32_t value);
  public:

  // optional uint32 must_not_own_packageid = 17;
  bool has_must_not_own_packageid() const;
  private:
  bool _internal_has_must_not_own_packageid() const;
  public:
  void clear_must_not_own_packageid();
  uint32_t must_not_own_packageid() const;
  void set_must_not_own_packageid(uint32_t value);
  private:
  uint32_t _internal_must_not_own_packageid() const;
  void _internal_set_must_not_own_packageid(uint32_t value);
  public:

  // optional uint32 must_have_launched_appid = 18;
  bool has_must_have_launched_appid() const;
  private:
  bool _internal_has_must_have_launched_appid() const;
  public:
  void clear_must_have_launched_appid();
  uint32_t must_have_launched_appid() const;
  void set_must_have_launched_appid(uint32_t value);
  private:
  uint32_t _internal_must_have_launched_appid() const;
  void _internal_set_must_have_launched_appid(uint32_t value);
  public:

  // optional uint32 flags = 22;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional .EMarketingMessageVisibility visibility = 4 [default = k_EMarketingMessageVisibleBeta];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::EMarketingMessageVisibility visibility() const;
  void set_visibility(::EMarketingMessageVisibility value);
  private:
  ::EMarketingMessageVisibility _internal_visibility() const;
  void _internal_set_visibility(::EMarketingMessageVisibility value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_allow_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_deny_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_restrictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_vars_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_restrictions_json_;
  uint64_t gid_;
  int type_;
  uint32_t priority_;
  int association_type_;
  uint32_t associated_id_;
  uint32_t start_date_;
  uint32_t end_date_;
  bool ownership_restrictions_overridden_;
  uint32_t must_own_appid_;
  uint32_t must_not_own_appid_;
  uint32_t must_own_packageid_;
  uint32_t must_not_own_packageid_;
  uint32_t must_have_launched_appid_;
  uint32_t flags_;
  int visibility_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetActiveMarketingMessages_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetActiveMarketingMessages_Response) */ {
 public:
  inline CMarketingMessages_GetActiveMarketingMessages_Response() : CMarketingMessages_GetActiveMarketingMessages_Response(nullptr) {}
  ~CMarketingMessages_GetActiveMarketingMessages_Response() override;
  explicit constexpr CMarketingMessages_GetActiveMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetActiveMarketingMessages_Response(const CMarketingMessages_GetActiveMarketingMessages_Response& from);
  CMarketingMessages_GetActiveMarketingMessages_Response(CMarketingMessages_GetActiveMarketingMessages_Response&& from) noexcept
    : CMarketingMessages_GetActiveMarketingMessages_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetActiveMarketingMessages_Response& operator=(const CMarketingMessages_GetActiveMarketingMessages_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetActiveMarketingMessages_Response& operator=(CMarketingMessages_GetActiveMarketingMessages_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetActiveMarketingMessages_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetActiveMarketingMessages_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetActiveMarketingMessages_Response*>(
               &_CMarketingMessages_GetActiveMarketingMessages_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMarketingMessages_GetActiveMarketingMessages_Response& a, CMarketingMessages_GetActiveMarketingMessages_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetActiveMarketingMessages_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetActiveMarketingMessages_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetActiveMarketingMessages_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetActiveMarketingMessages_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetActiveMarketingMessages_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetActiveMarketingMessages_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetActiveMarketingMessages_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetActiveMarketingMessages_Response";
  }
  protected:
  explicit CMarketingMessages_GetActiveMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kTimeNextMessageAgeFieldNumber = 2,
  };
  // repeated .CMarketingMessageProto messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CMarketingMessageProto* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >*
      mutable_messages();
  private:
  const ::CMarketingMessageProto& _internal_messages(int index) const;
  ::CMarketingMessageProto* _internal_add_messages();
  public:
  const ::CMarketingMessageProto& messages(int index) const;
  ::CMarketingMessageProto* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >&
      messages() const;

  // optional uint32 time_next_message_age = 2;
  bool has_time_next_message_age() const;
  private:
  bool _internal_has_time_next_message_age() const;
  public:
  void clear_time_next_message_age();
  uint32_t time_next_message_age() const;
  void set_time_next_message_age(uint32_t value);
  private:
  uint32_t _internal_time_next_message_age() const;
  void _internal_set_time_next_message_age(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetActiveMarketingMessages_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto > messages_;
  uint32_t time_next_message_age_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessagesForUser_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessagesForUser_Request) */ {
 public:
  inline CMarketingMessages_GetMarketingMessagesForUser_Request() : CMarketingMessages_GetMarketingMessagesForUser_Request(nullptr) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_Request() override;
  explicit constexpr CMarketingMessages_GetMarketingMessagesForUser_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessagesForUser_Request(const CMarketingMessages_GetMarketingMessagesForUser_Request& from);
  CMarketingMessages_GetMarketingMessagesForUser_Request(CMarketingMessages_GetMarketingMessagesForUser_Request&& from) noexcept
    : CMarketingMessages_GetMarketingMessagesForUser_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessagesForUser_Request& operator=(const CMarketingMessages_GetMarketingMessagesForUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessagesForUser_Request& operator=(CMarketingMessages_GetMarketingMessagesForUser_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessagesForUser_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessagesForUser_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessagesForUser_Request*>(
               &_CMarketingMessages_GetMarketingMessagesForUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMarketingMessages_GetMarketingMessagesForUser_Request& a, CMarketingMessages_GetMarketingMessagesForUser_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessagesForUser_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessagesForUser_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessagesForUser_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessagesForUser_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessagesForUser_Request";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessagesForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 2,
    kContextFieldNumber = 6,
    kDataRequestFieldNumber = 7,
    kIncludeSeenMessagesFieldNumber = 1,
    kElanguageFieldNumber = 3,
    kOperatingSystemFieldNumber = 4,
    kClientPackageVersionFieldNumber = 5,
  };
  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional .StoreBrowseContext context = 6 [(.description) = "Optional, server can fill in from country code/language if not set"];
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::StoreBrowseContext& context() const;
  PROTOBUF_NODISCARD ::StoreBrowseContext* release_context();
  ::StoreBrowseContext* mutable_context();
  void set_allocated_context(::StoreBrowseContext* context);
  private:
  const ::StoreBrowseContext& _internal_context() const;
  ::StoreBrowseContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::StoreBrowseContext* context);
  ::StoreBrowseContext* unsafe_arena_release_context();

  // optional .StoreBrowseItemDataRequest data_request = 7 [(.description) = "If passed, item data will be returned"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::StoreBrowseItemDataRequest& data_request() const;
  PROTOBUF_NODISCARD ::StoreBrowseItemDataRequest* release_data_request();
  ::StoreBrowseItemDataRequest* mutable_data_request();
  void set_allocated_data_request(::StoreBrowseItemDataRequest* data_request);
  private:
  const ::StoreBrowseItemDataRequest& _internal_data_request() const;
  ::StoreBrowseItemDataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::StoreBrowseItemDataRequest* data_request);
  ::StoreBrowseItemDataRequest* unsafe_arena_release_data_request();

  // optional bool include_seen_messages = 1;
  bool has_include_seen_messages() const;
  private:
  bool _internal_has_include_seen_messages() const;
  public:
  void clear_include_seen_messages();
  bool include_seen_messages() const;
  void set_include_seen_messages(bool value);
  private:
  bool _internal_include_seen_messages() const;
  void _internal_set_include_seen_messages(bool value);
  public:

  // optional int32 elanguage = 3;
  bool has_elanguage() const;
  private:
  bool _internal_has_elanguage() const;
  public:
  void clear_elanguage();
  int32_t elanguage() const;
  void set_elanguage(int32_t value);
  private:
  int32_t _internal_elanguage() const;
  void _internal_set_elanguage(int32_t value);
  public:

  // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
  bool has_operating_system() const;
  private:
  bool _internal_has_operating_system() const;
  public:
  void clear_operating_system();
  int32_t operating_system() const;
  void set_operating_system(int32_t value);
  private:
  int32_t _internal_operating_system() const;
  void _internal_set_operating_system(int32_t value);
  public:

  // optional int32 client_package_version = 5;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  int32_t client_package_version() const;
  void set_client_package_version(int32_t value);
  private:
  int32_t _internal_client_package_version() const;
  void _internal_set_client_package_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessagesForUser_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::StoreBrowseContext* context_;
  ::StoreBrowseItemDataRequest* data_request_;
  bool include_seen_messages_;
  int32_t elanguage_;
  int32_t operating_system_;
  int32_t client_package_version_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDisplayMarketingMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDisplayMarketingMessage) */ {
 public:
  inline CDisplayMarketingMessage() : CDisplayMarketingMessage(nullptr) {}
  ~CDisplayMarketingMessage() override;
  explicit constexpr CDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDisplayMarketingMessage(const CDisplayMarketingMessage& from);
  CDisplayMarketingMessage(CDisplayMarketingMessage&& from) noexcept
    : CDisplayMarketingMessage() {
    *this = ::std::move(from);
  }

  inline CDisplayMarketingMessage& operator=(const CDisplayMarketingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDisplayMarketingMessage& operator=(CDisplayMarketingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDisplayMarketingMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDisplayMarketingMessage* internal_default_instance() {
    return reinterpret_cast<const CDisplayMarketingMessage*>(
               &_CDisplayMarketingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDisplayMarketingMessage& a, CDisplayMarketingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CDisplayMarketingMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDisplayMarketingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDisplayMarketingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDisplayMarketingMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDisplayMarketingMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDisplayMarketingMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDisplayMarketingMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDisplayMarketingMessage";
  }
  protected:
  explicit CDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kAssociatedNameFieldNumber = 6,
    kTemplateTypeFieldNumber = 10,
    kTemplateVarsJsonFieldNumber = 11,
    kAssociatedItemIdFieldNumber = 4,
    kAssociatedItemFieldNumber = 5,
    kGidFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string associated_name = 6;
  bool has_associated_name() const;
  private:
  bool _internal_has_associated_name() const;
  public:
  void clear_associated_name();
  const std::string& associated_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_name();
  PROTOBUF_NODISCARD std::string* release_associated_name();
  void set_allocated_associated_name(std::string* associated_name);
  private:
  const std::string& _internal_associated_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_name(const std::string& value);
  std::string* _internal_mutable_associated_name();
  public:

  // optional string template_type = 10;
  bool has_template_type() const;
  private:
  bool _internal_has_template_type() const;
  public:
  void clear_template_type();
  const std::string& template_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_type();
  PROTOBUF_NODISCARD std::string* release_template_type();
  void set_allocated_template_type(std::string* template_type);
  private:
  const std::string& _internal_template_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_type(const std::string& value);
  std::string* _internal_mutable_template_type();
  public:

  // optional string template_vars_json = 11;
  bool has_template_vars_json() const;
  private:
  bool _internal_has_template_vars_json() const;
  public:
  void clear_template_vars_json();
  const std::string& template_vars_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_vars_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_vars_json();
  PROTOBUF_NODISCARD std::string* release_template_vars_json();
  void set_allocated_template_vars_json(std::string* template_vars_json);
  private:
  const std::string& _internal_template_vars_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_vars_json(const std::string& value);
  std::string* _internal_mutable_template_vars_json();
  public:

  // optional .StoreItemID associated_item_id = 4;
  bool has_associated_item_id() const;
  private:
  bool _internal_has_associated_item_id() const;
  public:
  void clear_associated_item_id();
  const ::StoreItemID& associated_item_id() const;
  PROTOBUF_NODISCARD ::StoreItemID* release_associated_item_id();
  ::StoreItemID* mutable_associated_item_id();
  void set_allocated_associated_item_id(::StoreItemID* associated_item_id);
  private:
  const ::StoreItemID& _internal_associated_item_id() const;
  ::StoreItemID* _internal_mutable_associated_item_id();
  public:
  void unsafe_arena_set_allocated_associated_item_id(
      ::StoreItemID* associated_item_id);
  ::StoreItemID* unsafe_arena_release_associated_item_id();

  // optional .StoreItem associated_item = 5;
  bool has_associated_item() const;
  private:
  bool _internal_has_associated_item() const;
  public:
  void clear_associated_item();
  const ::StoreItem& associated_item() const;
  PROTOBUF_NODISCARD ::StoreItem* release_associated_item();
  ::StoreItem* mutable_associated_item();
  void set_allocated_associated_item(::StoreItem* associated_item);
  private:
  const ::StoreItem& _internal_associated_item() const;
  ::StoreItem* _internal_mutable_associated_item();
  public:
  void unsafe_arena_set_allocated_associated_item(
      ::StoreItem* associated_item);
  ::StoreItem* unsafe_arena_release_associated_item();

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EMarketingMessageType type() const;
  void set_type(::EMarketingMessageType value);
  private:
  ::EMarketingMessageType _internal_type() const;
  void _internal_set_type(::EMarketingMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:CDisplayMarketingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_vars_json_;
  ::StoreItemID* associated_item_id_;
  ::StoreItem* associated_item_;
  uint64_t gid_;
  int type_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser) */ {
 public:
  inline CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser() : CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(nullptr) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser() override;
  explicit constexpr CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from);
  CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser&& from) noexcept
    : CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& operator=(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& operator=(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser*>(
               &_CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& a, CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kAlreadySeenFieldNumber = 1,
  };
  // optional .CDisplayMarketingMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CDisplayMarketingMessage& message() const;
  PROTOBUF_NODISCARD ::CDisplayMarketingMessage* release_message();
  ::CDisplayMarketingMessage* mutable_message();
  void set_allocated_message(::CDisplayMarketingMessage* message);
  private:
  const ::CDisplayMarketingMessage& _internal_message() const;
  ::CDisplayMarketingMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CDisplayMarketingMessage* message);
  ::CDisplayMarketingMessage* unsafe_arena_release_message();

  // optional bool already_seen = 1;
  bool has_already_seen() const;
  private:
  bool _internal_has_already_seen() const;
  public:
  void clear_already_seen();
  bool already_seen() const;
  void set_already_seen(bool value);
  private:
  bool _internal_already_seen() const;
  void _internal_set_already_seen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CDisplayMarketingMessage* message_;
  bool already_seen_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessagesForUser_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessagesForUser_Response) */ {
 public:
  inline CMarketingMessages_GetMarketingMessagesForUser_Response() : CMarketingMessages_GetMarketingMessagesForUser_Response(nullptr) {}
  ~CMarketingMessages_GetMarketingMessagesForUser_Response() override;
  explicit constexpr CMarketingMessages_GetMarketingMessagesForUser_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessagesForUser_Response(const CMarketingMessages_GetMarketingMessagesForUser_Response& from);
  CMarketingMessages_GetMarketingMessagesForUser_Response(CMarketingMessages_GetMarketingMessagesForUser_Response&& from) noexcept
    : CMarketingMessages_GetMarketingMessagesForUser_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessagesForUser_Response& operator=(const CMarketingMessages_GetMarketingMessagesForUser_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessagesForUser_Response& operator=(CMarketingMessages_GetMarketingMessagesForUser_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessagesForUser_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessagesForUser_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessagesForUser_Response*>(
               &_CMarketingMessages_GetMarketingMessagesForUser_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMarketingMessages_GetMarketingMessagesForUser_Response& a, CMarketingMessages_GetMarketingMessagesForUser_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessagesForUser_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessagesForUser_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessagesForUser_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessagesForUser_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessagesForUser_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessagesForUser_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessagesForUser_Response";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessagesForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser MarketingMessageForUser;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >*
      mutable_messages();
  private:
  const ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& _internal_messages(int index) const;
  ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* _internal_add_messages();
  public:
  const ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& messages(int index) const;
  ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >&
      messages() const;

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessagesForUser_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_DoesUserHavePendingMarketingMessages_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request) */ {
 public:
  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Request() : CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(nullptr) {}
  ~CMarketingMessages_DoesUserHavePendingMarketingMessages_Request() override;
  explicit constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from);
  CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request&& from) noexcept
    : CMarketingMessages_DoesUserHavePendingMarketingMessages_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& operator=(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& operator=(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request*>(
               &_CMarketingMessages_DoesUserHavePendingMarketingMessages_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& a, CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_DoesUserHavePendingMarketingMessages_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_DoesUserHavePendingMarketingMessages_Request";
  }
  protected:
  explicit CMarketingMessages_DoesUserHavePendingMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 2,
    kElanguageFieldNumber = 3,
    kOperatingSystemFieldNumber = 4,
    kClientPackageVersionFieldNumber = 5,
  };
  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional int32 elanguage = 3;
  bool has_elanguage() const;
  private:
  bool _internal_has_elanguage() const;
  public:
  void clear_elanguage();
  int32_t elanguage() const;
  void set_elanguage(int32_t value);
  private:
  int32_t _internal_elanguage() const;
  void _internal_set_elanguage(int32_t value);
  public:

  // optional int32 operating_system = 4 [(.description) = "EOSType from client"];
  bool has_operating_system() const;
  private:
  bool _internal_has_operating_system() const;
  public:
  void clear_operating_system();
  int32_t operating_system() const;
  void set_operating_system(int32_t value);
  private:
  int32_t _internal_operating_system() const;
  void _internal_set_operating_system(int32_t value);
  public:

  // optional int32 client_package_version = 5;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  int32_t client_package_version() const;
  void set_client_package_version(int32_t value);
  private:
  int32_t _internal_client_package_version() const;
  void _internal_set_client_package_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  int32_t elanguage_;
  int32_t operating_system_;
  int32_t client_package_version_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_DoesUserHavePendingMarketingMessages_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response) */ {
 public:
  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Response() : CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(nullptr) {}
  ~CMarketingMessages_DoesUserHavePendingMarketingMessages_Response() override;
  explicit constexpr CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from);
  CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response&& from) noexcept
    : CMarketingMessages_DoesUserHavePendingMarketingMessages_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& operator=(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& operator=(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response*>(
               &_CMarketingMessages_DoesUserHavePendingMarketingMessages_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& a, CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_DoesUserHavePendingMarketingMessages_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_DoesUserHavePendingMarketingMessages_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_DoesUserHavePendingMarketingMessages_Response";
  }
  protected:
  explicit CMarketingMessages_DoesUserHavePendingMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasPendingMessagesFieldNumber = 1,
    kPendingMessageCountFieldNumber = 2,
  };
  // optional bool has_pending_messages = 1;
  bool has_has_pending_messages() const;
  private:
  bool _internal_has_has_pending_messages() const;
  public:
  void clear_has_pending_messages();
  bool has_pending_messages() const;
  void set_has_pending_messages(bool value);
  private:
  bool _internal_has_pending_messages() const;
  void _internal_set_has_pending_messages(bool value);
  public:

  // optional int32 pending_message_count = 2;
  bool has_pending_message_count() const;
  private:
  bool _internal_has_pending_message_count() const;
  public:
  void clear_pending_message_count();
  int32_t pending_message_count() const;
  void set_pending_message_count(int32_t value);
  private:
  int32_t _internal_pending_message_count() const;
  void _internal_set_pending_message_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_pending_messages_;
  int32_t pending_message_count_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetDisplayMarketingMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetDisplayMarketingMessage_Request) */ {
 public:
  inline CMarketingMessages_GetDisplayMarketingMessage_Request() : CMarketingMessages_GetDisplayMarketingMessage_Request(nullptr) {}
  ~CMarketingMessages_GetDisplayMarketingMessage_Request() override;
  explicit constexpr CMarketingMessages_GetDisplayMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetDisplayMarketingMessage_Request(const CMarketingMessages_GetDisplayMarketingMessage_Request& from);
  CMarketingMessages_GetDisplayMarketingMessage_Request(CMarketingMessages_GetDisplayMarketingMessage_Request&& from) noexcept
    : CMarketingMessages_GetDisplayMarketingMessage_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetDisplayMarketingMessage_Request& operator=(const CMarketingMessages_GetDisplayMarketingMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetDisplayMarketingMessage_Request& operator=(CMarketingMessages_GetDisplayMarketingMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetDisplayMarketingMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetDisplayMarketingMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetDisplayMarketingMessage_Request*>(
               &_CMarketingMessages_GetDisplayMarketingMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMarketingMessages_GetDisplayMarketingMessage_Request& a, CMarketingMessages_GetDisplayMarketingMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetDisplayMarketingMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetDisplayMarketingMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetDisplayMarketingMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetDisplayMarketingMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetDisplayMarketingMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetDisplayMarketingMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetDisplayMarketingMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetDisplayMarketingMessage_Request";
  }
  protected:
  explicit CMarketingMessages_GetDisplayMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 2,
    kDataRequestFieldNumber = 3,
    kGidFieldNumber = 1,
  };
  // optional .StoreBrowseContext context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::StoreBrowseContext& context() const;
  PROTOBUF_NODISCARD ::StoreBrowseContext* release_context();
  ::StoreBrowseContext* mutable_context();
  void set_allocated_context(::StoreBrowseContext* context);
  private:
  const ::StoreBrowseContext& _internal_context() const;
  ::StoreBrowseContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::StoreBrowseContext* context);
  ::StoreBrowseContext* unsafe_arena_release_context();

  // optional .StoreBrowseItemDataRequest data_request = 3 [(.description) = "If passed, item data will be returned"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::StoreBrowseItemDataRequest& data_request() const;
  PROTOBUF_NODISCARD ::StoreBrowseItemDataRequest* release_data_request();
  ::StoreBrowseItemDataRequest* mutable_data_request();
  void set_allocated_data_request(::StoreBrowseItemDataRequest* data_request);
  private:
  const ::StoreBrowseItemDataRequest& _internal_data_request() const;
  ::StoreBrowseItemDataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::StoreBrowseItemDataRequest* data_request);
  ::StoreBrowseItemDataRequest* unsafe_arena_release_data_request();

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetDisplayMarketingMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::StoreBrowseContext* context_;
  ::StoreBrowseItemDataRequest* data_request_;
  uint64_t gid_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetDisplayMarketingMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetDisplayMarketingMessage_Response) */ {
 public:
  inline CMarketingMessages_GetDisplayMarketingMessage_Response() : CMarketingMessages_GetDisplayMarketingMessage_Response(nullptr) {}
  ~CMarketingMessages_GetDisplayMarketingMessage_Response() override;
  explicit constexpr CMarketingMessages_GetDisplayMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetDisplayMarketingMessage_Response(const CMarketingMessages_GetDisplayMarketingMessage_Response& from);
  CMarketingMessages_GetDisplayMarketingMessage_Response(CMarketingMessages_GetDisplayMarketingMessage_Response&& from) noexcept
    : CMarketingMessages_GetDisplayMarketingMessage_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetDisplayMarketingMessage_Response& operator=(const CMarketingMessages_GetDisplayMarketingMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetDisplayMarketingMessage_Response& operator=(CMarketingMessages_GetDisplayMarketingMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetDisplayMarketingMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetDisplayMarketingMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetDisplayMarketingMessage_Response*>(
               &_CMarketingMessages_GetDisplayMarketingMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMarketingMessages_GetDisplayMarketingMessage_Response& a, CMarketingMessages_GetDisplayMarketingMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetDisplayMarketingMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetDisplayMarketingMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetDisplayMarketingMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetDisplayMarketingMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetDisplayMarketingMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetDisplayMarketingMessage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetDisplayMarketingMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetDisplayMarketingMessage_Response";
  }
  protected:
  explicit CMarketingMessages_GetDisplayMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .CDisplayMarketingMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CDisplayMarketingMessage& message() const;
  PROTOBUF_NODISCARD ::CDisplayMarketingMessage* release_message();
  ::CDisplayMarketingMessage* mutable_message();
  void set_allocated_message(::CDisplayMarketingMessage* message);
  private:
  const ::CDisplayMarketingMessage& _internal_message() const;
  ::CDisplayMarketingMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CDisplayMarketingMessage* message);
  ::CDisplayMarketingMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetDisplayMarketingMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CDisplayMarketingMessage* message_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_MarkMessageSeen_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_MarkMessageSeen_Notification) */ {
 public:
  inline CMarketingMessages_MarkMessageSeen_Notification() : CMarketingMessages_MarkMessageSeen_Notification(nullptr) {}
  ~CMarketingMessages_MarkMessageSeen_Notification() override;
  explicit constexpr CMarketingMessages_MarkMessageSeen_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_MarkMessageSeen_Notification(const CMarketingMessages_MarkMessageSeen_Notification& from);
  CMarketingMessages_MarkMessageSeen_Notification(CMarketingMessages_MarkMessageSeen_Notification&& from) noexcept
    : CMarketingMessages_MarkMessageSeen_Notification() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_MarkMessageSeen_Notification& operator=(const CMarketingMessages_MarkMessageSeen_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_MarkMessageSeen_Notification& operator=(CMarketingMessages_MarkMessageSeen_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_MarkMessageSeen_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_MarkMessageSeen_Notification* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_MarkMessageSeen_Notification*>(
               &_CMarketingMessages_MarkMessageSeen_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMarketingMessages_MarkMessageSeen_Notification& a, CMarketingMessages_MarkMessageSeen_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_MarkMessageSeen_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_MarkMessageSeen_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_MarkMessageSeen_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_MarkMessageSeen_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_MarkMessageSeen_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_MarkMessageSeen_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_MarkMessageSeen_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_MarkMessageSeen_Notification";
  }
  protected:
  explicit CMarketingMessages_MarkMessageSeen_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
    kDisplayIndexFieldNumber = 2,
    kTemplateTypeFieldNumber = 3,
  };
  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional uint32 display_index = 2 [default = 0, (.description) = "Where in the stack was the marketing message, 1-based, zero means we don\'t know"];
  bool has_display_index() const;
  private:
  bool _internal_has_display_index() const;
  public:
  void clear_display_index();
  uint32_t display_index() const;
  void set_display_index(uint32_t value);
  private:
  uint32_t _internal_display_index() const;
  void _internal_set_display_index(uint32_t value);
  public:

  // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which type of template did they see"];
  bool has_template_type() const;
  private:
  bool _internal_has_template_type() const;
  public:
  void clear_template_type();
  ::EMarketingMessageTemplateType template_type() const;
  void set_template_type(::EMarketingMessageTemplateType value);
  private:
  ::EMarketingMessageTemplateType _internal_template_type() const;
  void _internal_set_template_type(::EMarketingMessageTemplateType value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_MarkMessageSeen_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_;
  uint32_t display_index_;
  int template_type_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessage_Request) */ {
 public:
  inline CMarketingMessages_GetMarketingMessage_Request() : CMarketingMessages_GetMarketingMessage_Request(nullptr) {}
  ~CMarketingMessages_GetMarketingMessage_Request() override;
  explicit constexpr CMarketingMessages_GetMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessage_Request(const CMarketingMessages_GetMarketingMessage_Request& from);
  CMarketingMessages_GetMarketingMessage_Request(CMarketingMessages_GetMarketingMessage_Request&& from) noexcept
    : CMarketingMessages_GetMarketingMessage_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessage_Request& operator=(const CMarketingMessages_GetMarketingMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessage_Request& operator=(CMarketingMessages_GetMarketingMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessage_Request*>(
               &_CMarketingMessages_GetMarketingMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMarketingMessages_GetMarketingMessage_Request& a, CMarketingMessages_GetMarketingMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessage_Request";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
  };
  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessage_Response) */ {
 public:
  inline CMarketingMessages_GetMarketingMessage_Response() : CMarketingMessages_GetMarketingMessage_Response(nullptr) {}
  ~CMarketingMessages_GetMarketingMessage_Response() override;
  explicit constexpr CMarketingMessages_GetMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessage_Response(const CMarketingMessages_GetMarketingMessage_Response& from);
  CMarketingMessages_GetMarketingMessage_Response(CMarketingMessages_GetMarketingMessage_Response&& from) noexcept
    : CMarketingMessages_GetMarketingMessage_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessage_Response& operator=(const CMarketingMessages_GetMarketingMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessage_Response& operator=(CMarketingMessages_GetMarketingMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessage_Response*>(
               &_CMarketingMessages_GetMarketingMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMarketingMessages_GetMarketingMessage_Response& a, CMarketingMessages_GetMarketingMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessage_Response";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional .CMarketingMessageProto message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CMarketingMessageProto& message() const;
  PROTOBUF_NODISCARD ::CMarketingMessageProto* release_message();
  ::CMarketingMessageProto* mutable_message();
  void set_allocated_message(::CMarketingMessageProto* message);
  private:
  const ::CMarketingMessageProto& _internal_message() const;
  ::CMarketingMessageProto* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CMarketingMessageProto* message);
  ::CMarketingMessageProto* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMarketingMessageProto* message_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_CreateMarketingMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_CreateMarketingMessage_Request) */ {
 public:
  inline CMarketingMessages_CreateMarketingMessage_Request() : CMarketingMessages_CreateMarketingMessage_Request(nullptr) {}
  ~CMarketingMessages_CreateMarketingMessage_Request() override;
  explicit constexpr CMarketingMessages_CreateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_CreateMarketingMessage_Request(const CMarketingMessages_CreateMarketingMessage_Request& from);
  CMarketingMessages_CreateMarketingMessage_Request(CMarketingMessages_CreateMarketingMessage_Request&& from) noexcept
    : CMarketingMessages_CreateMarketingMessage_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_CreateMarketingMessage_Request& operator=(const CMarketingMessages_CreateMarketingMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_CreateMarketingMessage_Request& operator=(CMarketingMessages_CreateMarketingMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_CreateMarketingMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_CreateMarketingMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_CreateMarketingMessage_Request*>(
               &_CMarketingMessages_CreateMarketingMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMarketingMessages_CreateMarketingMessage_Request& a, CMarketingMessages_CreateMarketingMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_CreateMarketingMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_CreateMarketingMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_CreateMarketingMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_CreateMarketingMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_CreateMarketingMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_CreateMarketingMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_CreateMarketingMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_CreateMarketingMessage_Request";
  }
  protected:
  explicit CMarketingMessages_CreateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kFromJsonFieldNumber = 2,
  };
  // optional .CMarketingMessageProto message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CMarketingMessageProto& message() const;
  PROTOBUF_NODISCARD ::CMarketingMessageProto* release_message();
  ::CMarketingMessageProto* mutable_message();
  void set_allocated_message(::CMarketingMessageProto* message);
  private:
  const ::CMarketingMessageProto& _internal_message() const;
  ::CMarketingMessageProto* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CMarketingMessageProto* message);
  ::CMarketingMessageProto* unsafe_arena_release_message();

  // optional bool from_json = 2 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
  bool has_from_json() const;
  private:
  bool _internal_has_from_json() const;
  public:
  void clear_from_json();
  bool from_json() const;
  void set_from_json(bool value);
  private:
  bool _internal_from_json() const;
  void _internal_set_from_json(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_CreateMarketingMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMarketingMessageProto* message_;
  bool from_json_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_CreateMarketingMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_CreateMarketingMessage_Response) */ {
 public:
  inline CMarketingMessages_CreateMarketingMessage_Response() : CMarketingMessages_CreateMarketingMessage_Response(nullptr) {}
  ~CMarketingMessages_CreateMarketingMessage_Response() override;
  explicit constexpr CMarketingMessages_CreateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_CreateMarketingMessage_Response(const CMarketingMessages_CreateMarketingMessage_Response& from);
  CMarketingMessages_CreateMarketingMessage_Response(CMarketingMessages_CreateMarketingMessage_Response&& from) noexcept
    : CMarketingMessages_CreateMarketingMessage_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_CreateMarketingMessage_Response& operator=(const CMarketingMessages_CreateMarketingMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_CreateMarketingMessage_Response& operator=(CMarketingMessages_CreateMarketingMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_CreateMarketingMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_CreateMarketingMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_CreateMarketingMessage_Response*>(
               &_CMarketingMessages_CreateMarketingMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMarketingMessages_CreateMarketingMessage_Response& a, CMarketingMessages_CreateMarketingMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_CreateMarketingMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_CreateMarketingMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_CreateMarketingMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_CreateMarketingMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_CreateMarketingMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_CreateMarketingMessage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_CreateMarketingMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_CreateMarketingMessage_Response";
  }
  protected:
  explicit CMarketingMessages_CreateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
  };
  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_CreateMarketingMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_UpdateMarketingMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_UpdateMarketingMessage_Request) */ {
 public:
  inline CMarketingMessages_UpdateMarketingMessage_Request() : CMarketingMessages_UpdateMarketingMessage_Request(nullptr) {}
  ~CMarketingMessages_UpdateMarketingMessage_Request() override;
  explicit constexpr CMarketingMessages_UpdateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_UpdateMarketingMessage_Request(const CMarketingMessages_UpdateMarketingMessage_Request& from);
  CMarketingMessages_UpdateMarketingMessage_Request(CMarketingMessages_UpdateMarketingMessage_Request&& from) noexcept
    : CMarketingMessages_UpdateMarketingMessage_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_UpdateMarketingMessage_Request& operator=(const CMarketingMessages_UpdateMarketingMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_UpdateMarketingMessage_Request& operator=(CMarketingMessages_UpdateMarketingMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_UpdateMarketingMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_UpdateMarketingMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_UpdateMarketingMessage_Request*>(
               &_CMarketingMessages_UpdateMarketingMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMarketingMessages_UpdateMarketingMessage_Request& a, CMarketingMessages_UpdateMarketingMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_UpdateMarketingMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_UpdateMarketingMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_UpdateMarketingMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_UpdateMarketingMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_UpdateMarketingMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_UpdateMarketingMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_UpdateMarketingMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_UpdateMarketingMessage_Request";
  }
  protected:
  explicit CMarketingMessages_UpdateMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kGidFieldNumber = 1,
    kFromJsonFieldNumber = 3,
  };
  // optional .CMarketingMessageProto message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::CMarketingMessageProto& message() const;
  PROTOBUF_NODISCARD ::CMarketingMessageProto* release_message();
  ::CMarketingMessageProto* mutable_message();
  void set_allocated_message(::CMarketingMessageProto* message);
  private:
  const ::CMarketingMessageProto& _internal_message() const;
  ::CMarketingMessageProto* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::CMarketingMessageProto* message);
  ::CMarketingMessageProto* unsafe_arena_release_message();

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional bool from_json = 3 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
  bool has_from_json() const;
  private:
  bool _internal_has_from_json() const;
  public:
  void clear_from_json();
  bool from_json() const;
  void set_from_json(bool value);
  private:
  bool _internal_from_json() const;
  void _internal_set_from_json(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_UpdateMarketingMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMarketingMessageProto* message_;
  uint64_t gid_;
  bool from_json_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_UpdateMarketingMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMarketingMessages_UpdateMarketingMessage_Response) */ {
 public:
  inline CMarketingMessages_UpdateMarketingMessage_Response() : CMarketingMessages_UpdateMarketingMessage_Response(nullptr) {}
  explicit constexpr CMarketingMessages_UpdateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_UpdateMarketingMessage_Response(const CMarketingMessages_UpdateMarketingMessage_Response& from);
  CMarketingMessages_UpdateMarketingMessage_Response(CMarketingMessages_UpdateMarketingMessage_Response&& from) noexcept
    : CMarketingMessages_UpdateMarketingMessage_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_UpdateMarketingMessage_Response& operator=(const CMarketingMessages_UpdateMarketingMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_UpdateMarketingMessage_Response& operator=(CMarketingMessages_UpdateMarketingMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_UpdateMarketingMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_UpdateMarketingMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_UpdateMarketingMessage_Response*>(
               &_CMarketingMessages_UpdateMarketingMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMarketingMessages_UpdateMarketingMessage_Response& a, CMarketingMessages_UpdateMarketingMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_UpdateMarketingMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_UpdateMarketingMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_UpdateMarketingMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_UpdateMarketingMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMarketingMessages_UpdateMarketingMessage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMarketingMessages_UpdateMarketingMessage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_UpdateMarketingMessage_Response";
  }
  protected:
  explicit CMarketingMessages_UpdateMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMarketingMessages_UpdateMarketingMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_DeleteMarketingMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_DeleteMarketingMessage_Request) */ {
 public:
  inline CMarketingMessages_DeleteMarketingMessage_Request() : CMarketingMessages_DeleteMarketingMessage_Request(nullptr) {}
  ~CMarketingMessages_DeleteMarketingMessage_Request() override;
  explicit constexpr CMarketingMessages_DeleteMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_DeleteMarketingMessage_Request(const CMarketingMessages_DeleteMarketingMessage_Request& from);
  CMarketingMessages_DeleteMarketingMessage_Request(CMarketingMessages_DeleteMarketingMessage_Request&& from) noexcept
    : CMarketingMessages_DeleteMarketingMessage_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_DeleteMarketingMessage_Request& operator=(const CMarketingMessages_DeleteMarketingMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_DeleteMarketingMessage_Request& operator=(CMarketingMessages_DeleteMarketingMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_DeleteMarketingMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_DeleteMarketingMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_DeleteMarketingMessage_Request*>(
               &_CMarketingMessages_DeleteMarketingMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMarketingMessages_DeleteMarketingMessage_Request& a, CMarketingMessages_DeleteMarketingMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_DeleteMarketingMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_DeleteMarketingMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_DeleteMarketingMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_DeleteMarketingMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_DeleteMarketingMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_DeleteMarketingMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_DeleteMarketingMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_DeleteMarketingMessage_Request";
  }
  protected:
  explicit CMarketingMessages_DeleteMarketingMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
  };
  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_DeleteMarketingMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_DeleteMarketingMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMarketingMessages_DeleteMarketingMessage_Response) */ {
 public:
  inline CMarketingMessages_DeleteMarketingMessage_Response() : CMarketingMessages_DeleteMarketingMessage_Response(nullptr) {}
  explicit constexpr CMarketingMessages_DeleteMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_DeleteMarketingMessage_Response(const CMarketingMessages_DeleteMarketingMessage_Response& from);
  CMarketingMessages_DeleteMarketingMessage_Response(CMarketingMessages_DeleteMarketingMessage_Response&& from) noexcept
    : CMarketingMessages_DeleteMarketingMessage_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_DeleteMarketingMessage_Response& operator=(const CMarketingMessages_DeleteMarketingMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_DeleteMarketingMessage_Response& operator=(CMarketingMessages_DeleteMarketingMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_DeleteMarketingMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_DeleteMarketingMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_DeleteMarketingMessage_Response*>(
               &_CMarketingMessages_DeleteMarketingMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMarketingMessages_DeleteMarketingMessage_Response& a, CMarketingMessages_DeleteMarketingMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_DeleteMarketingMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_DeleteMarketingMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_DeleteMarketingMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_DeleteMarketingMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMarketingMessages_DeleteMarketingMessage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMarketingMessages_DeleteMarketingMessage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_DeleteMarketingMessage_Response";
  }
  protected:
  explicit CMarketingMessages_DeleteMarketingMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMarketingMessages_DeleteMarketingMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_FindMarketingMessages_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_FindMarketingMessages_Request) */ {
 public:
  inline CMarketingMessages_FindMarketingMessages_Request() : CMarketingMessages_FindMarketingMessages_Request(nullptr) {}
  ~CMarketingMessages_FindMarketingMessages_Request() override;
  explicit constexpr CMarketingMessages_FindMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_FindMarketingMessages_Request(const CMarketingMessages_FindMarketingMessages_Request& from);
  CMarketingMessages_FindMarketingMessages_Request(CMarketingMessages_FindMarketingMessages_Request&& from) noexcept
    : CMarketingMessages_FindMarketingMessages_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_FindMarketingMessages_Request& operator=(const CMarketingMessages_FindMarketingMessages_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_FindMarketingMessages_Request& operator=(CMarketingMessages_FindMarketingMessages_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_FindMarketingMessages_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_FindMarketingMessages_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_FindMarketingMessages_Request*>(
               &_CMarketingMessages_FindMarketingMessages_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMarketingMessages_FindMarketingMessages_Request& a, CMarketingMessages_FindMarketingMessages_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_FindMarketingMessages_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_FindMarketingMessages_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_FindMarketingMessages_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_FindMarketingMessages_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_FindMarketingMessages_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_FindMarketingMessages_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_FindMarketingMessages_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_FindMarketingMessages_Request";
  }
  protected:
  explicit CMarketingMessages_FindMarketingMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidlistFieldNumber = 4,
    kTitleFieldNumber = 5,
    kGidFieldNumber = 2,
    kLookupTypeFieldNumber = 1,
    kMessageTypeFieldNumber = 3,
  };
  // repeated fixed64 gidlist = 4;
  int gidlist_size() const;
  private:
  int _internal_gidlist_size() const;
  public:
  void clear_gidlist();
  private:
  uint64_t _internal_gidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_gidlist() const;
  void _internal_add_gidlist(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_gidlist();
  public:
  uint64_t gidlist(int index) const;
  void set_gidlist(int index, uint64_t value);
  void add_gidlist(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      gidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_gidlist();

  // optional string title = 5;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional fixed64 gid = 2;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // optional .EMarketingMessageLookupType lookup_type = 1 [default = k_EMarketingMessageLookupInvalid];
  bool has_lookup_type() const;
  private:
  bool _internal_has_lookup_type() const;
  public:
  void clear_lookup_type();
  ::EMarketingMessageLookupType lookup_type() const;
  void set_lookup_type(::EMarketingMessageLookupType value);
  private:
  ::EMarketingMessageLookupType _internal_lookup_type() const;
  void _internal_set_lookup_type(::EMarketingMessageLookupType value);
  public:

  // optional .EMarketingMessageType message_type = 3 [default = k_EMarketingMessageInvalid];
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  ::EMarketingMessageType message_type() const;
  void set_message_type(::EMarketingMessageType value);
  private:
  ::EMarketingMessageType _internal_message_type() const;
  void _internal_set_message_type(::EMarketingMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_FindMarketingMessages_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > gidlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  uint64_t gid_;
  int lookup_type_;
  int message_type_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_FindMarketingMessages_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_FindMarketingMessages_Response) */ {
 public:
  inline CMarketingMessages_FindMarketingMessages_Response() : CMarketingMessages_FindMarketingMessages_Response(nullptr) {}
  ~CMarketingMessages_FindMarketingMessages_Response() override;
  explicit constexpr CMarketingMessages_FindMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_FindMarketingMessages_Response(const CMarketingMessages_FindMarketingMessages_Response& from);
  CMarketingMessages_FindMarketingMessages_Response(CMarketingMessages_FindMarketingMessages_Response&& from) noexcept
    : CMarketingMessages_FindMarketingMessages_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_FindMarketingMessages_Response& operator=(const CMarketingMessages_FindMarketingMessages_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_FindMarketingMessages_Response& operator=(CMarketingMessages_FindMarketingMessages_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_FindMarketingMessages_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_FindMarketingMessages_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_FindMarketingMessages_Response*>(
               &_CMarketingMessages_FindMarketingMessages_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMarketingMessages_FindMarketingMessages_Response& a, CMarketingMessages_FindMarketingMessages_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_FindMarketingMessages_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_FindMarketingMessages_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_FindMarketingMessages_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_FindMarketingMessages_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_FindMarketingMessages_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_FindMarketingMessages_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_FindMarketingMessages_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_FindMarketingMessages_Response";
  }
  protected:
  explicit CMarketingMessages_FindMarketingMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .CMarketingMessageProto messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CMarketingMessageProto* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >*
      mutable_messages();
  private:
  const ::CMarketingMessageProto& _internal_messages(int index) const;
  ::CMarketingMessageProto* _internal_add_messages();
  public:
  const ::CMarketingMessageProto& messages(int index) const;
  ::CMarketingMessageProto* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >&
      messages() const;

  // @@protoc_insertion_point(class_scope:CMarketingMessages_FindMarketingMessages_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessageViewerStats_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessageViewerStats_Request) */ {
 public:
  inline CMarketingMessages_GetMarketingMessageViewerStats_Request() : CMarketingMessages_GetMarketingMessageViewerStats_Request(nullptr) {}
  ~CMarketingMessages_GetMarketingMessageViewerStats_Request() override;
  explicit constexpr CMarketingMessages_GetMarketingMessageViewerStats_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessageViewerStats_Request(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from);
  CMarketingMessages_GetMarketingMessageViewerStats_Request(CMarketingMessages_GetMarketingMessageViewerStats_Request&& from) noexcept
    : CMarketingMessages_GetMarketingMessageViewerStats_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessageViewerStats_Request& operator=(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessageViewerStats_Request& operator=(CMarketingMessages_GetMarketingMessageViewerStats_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessageViewerStats_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessageViewerStats_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessageViewerStats_Request*>(
               &_CMarketingMessages_GetMarketingMessageViewerStats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMarketingMessages_GetMarketingMessageViewerStats_Request& a, CMarketingMessages_GetMarketingMessageViewerStats_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessageViewerStats_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessageViewerStats_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessageViewerStats_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessageViewerStats_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessageViewerStats_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessageViewerStats_Request";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessageViewerStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
  };
  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  uint64_t gid() const;
  void set_gid(uint64_t value);
  private:
  uint64_t _internal_gid() const;
  void _internal_set_gid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessageViewerStats_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessageHourlyStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessageHourlyStats) */ {
 public:
  inline CMarketingMessageHourlyStats() : CMarketingMessageHourlyStats(nullptr) {}
  ~CMarketingMessageHourlyStats() override;
  explicit constexpr CMarketingMessageHourlyStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessageHourlyStats(const CMarketingMessageHourlyStats& from);
  CMarketingMessageHourlyStats(CMarketingMessageHourlyStats&& from) noexcept
    : CMarketingMessageHourlyStats() {
    *this = ::std::move(from);
  }

  inline CMarketingMessageHourlyStats& operator=(const CMarketingMessageHourlyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessageHourlyStats& operator=(CMarketingMessageHourlyStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessageHourlyStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessageHourlyStats* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessageHourlyStats*>(
               &_CMarketingMessageHourlyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMarketingMessageHourlyStats& a, CMarketingMessageHourlyStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessageHourlyStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessageHourlyStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessageHourlyStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessageHourlyStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessageHourlyStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessageHourlyStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessageHourlyStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessageHourlyStats";
  }
  protected:
  explicit CMarketingMessageHourlyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtTimeHourFieldNumber = 1,
    kSeenCountFieldNumber = 2,
    kTemplateTypeFieldNumber = 3,
    kDisplayIndexFieldNumber = 4,
  };
  // optional uint32 rt_time_hour = 1;
  bool has_rt_time_hour() const;
  private:
  bool _internal_has_rt_time_hour() const;
  public:
  void clear_rt_time_hour();
  uint32_t rt_time_hour() const;
  void set_rt_time_hour(uint32_t value);
  private:
  uint32_t _internal_rt_time_hour() const;
  void _internal_set_rt_time_hour(uint32_t value);
  public:

  // optional uint32 seen_count = 2 [(.description) = "within the hour period"];
  bool has_seen_count() const;
  private:
  bool _internal_has_seen_count() const;
  public:
  void clear_seen_count();
  uint32_t seen_count() const;
  void set_seen_count(uint32_t value);
  private:
  uint32_t _internal_seen_count() const;
  void _internal_set_seen_count(uint32_t value);
  public:

  // optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which template type was shown, usually just IMAGE"];
  bool has_template_type() const;
  private:
  bool _internal_has_template_type() const;
  public:
  void clear_template_type();
  ::EMarketingMessageTemplateType template_type() const;
  void set_template_type(::EMarketingMessageTemplateType value);
  private:
  ::EMarketingMessageTemplateType _internal_template_type() const;
  void _internal_set_template_type(::EMarketingMessageTemplateType value);
  public:

  // optional uint32 display_index = 4 [(.description) = "Zero is invalid/we don\'t have information; 1 based index"];
  bool has_display_index() const;
  private:
  bool _internal_has_display_index() const;
  public:
  void clear_display_index();
  uint32_t display_index() const;
  void set_display_index(uint32_t value);
  private:
  uint32_t _internal_display_index() const;
  void _internal_set_display_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessageHourlyStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t rt_time_hour_;
  uint32_t seen_count_;
  int template_type_;
  uint32_t display_index_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessageViewerStats_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessageViewerStats_Response) */ {
 public:
  inline CMarketingMessages_GetMarketingMessageViewerStats_Response() : CMarketingMessages_GetMarketingMessageViewerStats_Response(nullptr) {}
  ~CMarketingMessages_GetMarketingMessageViewerStats_Response() override;
  explicit constexpr CMarketingMessages_GetMarketingMessageViewerStats_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessageViewerStats_Response(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from);
  CMarketingMessages_GetMarketingMessageViewerStats_Response(CMarketingMessages_GetMarketingMessageViewerStats_Response&& from) noexcept
    : CMarketingMessages_GetMarketingMessageViewerStats_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessageViewerStats_Response& operator=(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessageViewerStats_Response& operator=(CMarketingMessages_GetMarketingMessageViewerStats_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessageViewerStats_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessageViewerStats_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessageViewerStats_Response*>(
               &_CMarketingMessages_GetMarketingMessageViewerStats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMarketingMessages_GetMarketingMessageViewerStats_Response& a, CMarketingMessages_GetMarketingMessageViewerStats_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessageViewerStats_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessageViewerStats_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessageViewerStats_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessageViewerStats_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessageViewerStats_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessageViewerStats_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessageViewerStats_Response";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessageViewerStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .CMarketingMessageHourlyStats stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMarketingMessageHourlyStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >*
      mutable_stats();
  private:
  const ::CMarketingMessageHourlyStats& _internal_stats(int index) const;
  ::CMarketingMessageHourlyStats* _internal_add_stats();
  public:
  const ::CMarketingMessageHourlyStats& stats(int index) const;
  ::CMarketingMessageHourlyStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessageViewerStats_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request) */ {
 public:
  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request() : CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(nullptr) {}
  ~CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request() override;
  explicit constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from);
  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request&& from) noexcept
    : CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& operator=(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& operator=(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request*>(
               &_CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& a, CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtStartTimeFieldNumber = 1,
    kRtEndTimeFieldNumber = 2,
  };
  // optional uint32 rt_start_time = 1;
  bool has_rt_start_time() const;
  private:
  bool _internal_has_rt_start_time() const;
  public:
  void clear_rt_start_time();
  uint32_t rt_start_time() const;
  void set_rt_start_time(uint32_t value);
  private:
  uint32_t _internal_rt_start_time() const;
  void _internal_set_rt_start_time(uint32_t value);
  public:

  // optional uint32 rt_end_time = 2;
  bool has_rt_end_time() const;
  private:
  bool _internal_has_rt_end_time() const;
  public:
  void clear_rt_end_time();
  uint32_t rt_end_time() const;
  void set_rt_end_time(uint32_t value);
  private:
  uint32_t _internal_rt_end_time() const;
  void _internal_set_rt_end_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t rt_start_time_;
  uint32_t rt_end_time_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response) */ {
 public:
  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response() : CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(nullptr) {}
  ~CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response() override;
  explicit constexpr CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from);
  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response&& from) noexcept
    : CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response() {
    *this = ::std::move(from);
  }

  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& operator=(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& operator=(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* internal_default_instance() {
    return reinterpret_cast<const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response*>(
               &_CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& a, CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response";
  }
  protected:
  explicit CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .CMarketingMessageHourlyStats stats = 1 [(.description) = "Flatterns results for the range of time"];
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMarketingMessageHourlyStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >*
      mutable_stats();
  private:
  const ::CMarketingMessageHourlyStats& _internal_stats(int index) const;
  ::CMarketingMessageHourlyStats* _internal_add_stats();
  public:
  const ::CMarketingMessageHourlyStats& stats(int index) const;
  ::CMarketingMessageHourlyStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fmarketingmessages_2esteamclient_2eproto;
};
// ===================================================================

class MarketingMessages_Stub;

class MarketingMessages : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MarketingMessages() {};
 public:
  virtual ~MarketingMessages();

  typedef MarketingMessages_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetActiveMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetActiveMarketingMessages_Request* request,
                       ::CMarketingMessages_GetActiveMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMarketingMessagesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessagesForUser_Request* request,
                       ::CMarketingMessages_GetMarketingMessagesForUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DoesUserHavePendingMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* request,
                       ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                       ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDisplayMarketingMessageAdmin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                       ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void MarkMessageSeen(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_MarkMessageSeen_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessage_Request* request,
                       ::CMarketingMessages_GetMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_CreateMarketingMessage_Request* request,
                       ::CMarketingMessages_CreateMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_UpdateMarketingMessage_Request* request,
                       ::CMarketingMessages_UpdateMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_DeleteMarketingMessage_Request* request,
                       ::CMarketingMessages_DeleteMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void FindMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_FindMarketingMessages_Request* request,
                       ::CMarketingMessages_FindMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMarketingMessageViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessageViewerStats_Request* request,
                       ::CMarketingMessages_GetMarketingMessageViewerStats_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMarketingMessagesViewerRangeStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* request,
                       ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MarketingMessages);
};

class MarketingMessages_Stub : public MarketingMessages {
 public:
  MarketingMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MarketingMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MarketingMessages_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MarketingMessages ------------------------------------------

  void GetActiveMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetActiveMarketingMessages_Request* request,
                       ::CMarketingMessages_GetActiveMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  void GetMarketingMessagesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessagesForUser_Request* request,
                       ::CMarketingMessages_GetMarketingMessagesForUser_Response* response,
                       ::google::protobuf::Closure* done);
  void DoesUserHavePendingMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Request* request,
                       ::CMarketingMessages_DoesUserHavePendingMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDisplayMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                       ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDisplayMarketingMessageAdmin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetDisplayMarketingMessage_Request* request,
                       ::CMarketingMessages_GetDisplayMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void MarkMessageSeen(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_MarkMessageSeen_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessage_Request* request,
                       ::CMarketingMessages_GetMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void CreateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_CreateMarketingMessage_Request* request,
                       ::CMarketingMessages_CreateMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_UpdateMarketingMessage_Request* request,
                       ::CMarketingMessages_UpdateMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void DeleteMarketingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_DeleteMarketingMessage_Request* request,
                       ::CMarketingMessages_DeleteMarketingMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void FindMarketingMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_FindMarketingMessages_Request* request,
                       ::CMarketingMessages_FindMarketingMessages_Response* response,
                       ::google::protobuf::Closure* done);
  void GetMarketingMessageViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessageViewerStats_Request* request,
                       ::CMarketingMessages_GetMarketingMessageViewerStats_Response* response,
                       ::google::protobuf::Closure* done);
  void GetMarketingMessagesViewerRangeStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request* request,
                       ::CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MarketingMessages_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMarketingMessages_GetActiveMarketingMessages_Request

// optional string country = 1;
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::has_country() const {
  return _internal_has_country();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::clear_country() {
  country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMarketingMessages_GetActiveMarketingMessages_Request::country() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetActiveMarketingMessages_Request.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessages_GetActiveMarketingMessages_Request::set_country(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetActiveMarketingMessages_Request.country)
}
inline std::string* CMarketingMessages_GetActiveMarketingMessages_Request::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetActiveMarketingMessages_Request.country)
  return _s;
}
inline const std::string& CMarketingMessages_GetActiveMarketingMessages_Request::_internal_country() const {
  return country_.Get();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_GetActiveMarketingMessages_Request::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000001u;
  return country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_GetActiveMarketingMessages_Request::release_country() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetActiveMarketingMessages_Request.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetActiveMarketingMessages_Request.country)
}

// optional bool anonymous_user = 2 [(.description) = "Will not return any marketing message that requires ownership/playtime/wishlist"];
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::_internal_has_anonymous_user() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::has_anonymous_user() const {
  return _internal_has_anonymous_user();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::clear_anonymous_user() {
  anonymous_user_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::_internal_anonymous_user() const {
  return anonymous_user_;
}
inline bool CMarketingMessages_GetActiveMarketingMessages_Request::anonymous_user() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetActiveMarketingMessages_Request.anonymous_user)
  return _internal_anonymous_user();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::_internal_set_anonymous_user(bool value) {
  _has_bits_[0] |= 0x00000002u;
  anonymous_user_ = value;
}
inline void CMarketingMessages_GetActiveMarketingMessages_Request::set_anonymous_user(bool value) {
  _internal_set_anonymous_user(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetActiveMarketingMessages_Request.anonymous_user)
}

// -------------------------------------------------------------------

// CMarketingMessageProto

// optional fixed64 gid = 1;
inline bool CMarketingMessageProto::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessageProto::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMarketingMessageProto::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessageProto::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.gid)
  return _internal_gid();
}
inline void CMarketingMessageProto::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  gid_ = value;
}
inline void CMarketingMessageProto::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.gid)
}

// optional string title = 2;
inline bool CMarketingMessageProto::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_title() const {
  return _internal_has_title();
}
inline void CMarketingMessageProto::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMarketingMessageProto::title() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.title)
}
inline std::string* CMarketingMessageProto::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.title)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_title() const {
  return title_.Get();
}
inline void CMarketingMessageProto::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_title() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.title)
}

// optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
inline bool CMarketingMessageProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_type() const {
  return _internal_has_type();
}
inline void CMarketingMessageProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::EMarketingMessageType CMarketingMessageProto::_internal_type() const {
  return static_cast< ::EMarketingMessageType >(type_);
}
inline ::EMarketingMessageType CMarketingMessageProto::type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.type)
  return _internal_type();
}
inline void CMarketingMessageProto::_internal_set_type(::EMarketingMessageType value) {
  assert(::EMarketingMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void CMarketingMessageProto::set_type(::EMarketingMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.type)
}

// optional .EMarketingMessageVisibility visibility = 4 [default = k_EMarketingMessageVisibleBeta];
inline bool CMarketingMessageProto::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_visibility() const {
  return _internal_has_visibility();
}
inline void CMarketingMessageProto::clear_visibility() {
  visibility_ = 1;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::EMarketingMessageVisibility CMarketingMessageProto::_internal_visibility() const {
  return static_cast< ::EMarketingMessageVisibility >(visibility_);
}
inline ::EMarketingMessageVisibility CMarketingMessageProto::visibility() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.visibility)
  return _internal_visibility();
}
inline void CMarketingMessageProto::_internal_set_visibility(::EMarketingMessageVisibility value) {
  assert(::EMarketingMessageVisibility_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  visibility_ = value;
}
inline void CMarketingMessageProto::set_visibility(::EMarketingMessageVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.visibility)
}

// optional uint32 priority = 5;
inline bool CMarketingMessageProto::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_priority() const {
  return _internal_has_priority();
}
inline void CMarketingMessageProto::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMarketingMessageProto::_internal_priority() const {
  return priority_;
}
inline uint32_t CMarketingMessageProto::priority() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.priority)
  return _internal_priority();
}
inline void CMarketingMessageProto::_internal_set_priority(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  priority_ = value;
}
inline void CMarketingMessageProto::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.priority)
}

// optional .EMarketingMessageAssociationType association_type = 6 [default = k_EMarketingMessageNoAssociation];
inline bool CMarketingMessageProto::_internal_has_association_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_association_type() const {
  return _internal_has_association_type();
}
inline void CMarketingMessageProto::clear_association_type() {
  association_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::EMarketingMessageAssociationType CMarketingMessageProto::_internal_association_type() const {
  return static_cast< ::EMarketingMessageAssociationType >(association_type_);
}
inline ::EMarketingMessageAssociationType CMarketingMessageProto::association_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.association_type)
  return _internal_association_type();
}
inline void CMarketingMessageProto::_internal_set_association_type(::EMarketingMessageAssociationType value) {
  assert(::EMarketingMessageAssociationType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  association_type_ = value;
}
inline void CMarketingMessageProto::set_association_type(::EMarketingMessageAssociationType value) {
  _internal_set_association_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.association_type)
}

// optional uint32 associated_id = 7;
inline bool CMarketingMessageProto::_internal_has_associated_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_associated_id() const {
  return _internal_has_associated_id();
}
inline void CMarketingMessageProto::clear_associated_id() {
  associated_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMarketingMessageProto::_internal_associated_id() const {
  return associated_id_;
}
inline uint32_t CMarketingMessageProto::associated_id() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.associated_id)
  return _internal_associated_id();
}
inline void CMarketingMessageProto::_internal_set_associated_id(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  associated_id_ = value;
}
inline void CMarketingMessageProto::set_associated_id(uint32_t value) {
  _internal_set_associated_id(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.associated_id)
}

// optional string associated_name = 8;
inline bool CMarketingMessageProto::_internal_has_associated_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_associated_name() const {
  return _internal_has_associated_name();
}
inline void CMarketingMessageProto::clear_associated_name() {
  associated_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMarketingMessageProto::associated_name() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.associated_name)
  return _internal_associated_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_associated_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.associated_name)
}
inline std::string* CMarketingMessageProto::mutable_associated_name() {
  std::string* _s = _internal_mutable_associated_name();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.associated_name)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_associated_name() const {
  return associated_name_.Get();
}
inline void CMarketingMessageProto::_internal_set_associated_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_associated_name() {
  _has_bits_[0] |= 0x00000002u;
  return associated_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_associated_name() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.associated_name)
  if (!_internal_has_associated_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = associated_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_associated_name(std::string* associated_name) {
  if (associated_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  associated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.associated_name)
}

// optional uint32 start_date = 9;
inline bool CMarketingMessageProto::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_start_date() const {
  return _internal_has_start_date();
}
inline void CMarketingMessageProto::clear_start_date() {
  start_date_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMarketingMessageProto::_internal_start_date() const {
  return start_date_;
}
inline uint32_t CMarketingMessageProto::start_date() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.start_date)
  return _internal_start_date();
}
inline void CMarketingMessageProto::_internal_set_start_date(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  start_date_ = value;
}
inline void CMarketingMessageProto::set_start_date(uint32_t value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.start_date)
}

// optional uint32 end_date = 10;
inline bool CMarketingMessageProto::_internal_has_end_date() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_end_date() const {
  return _internal_has_end_date();
}
inline void CMarketingMessageProto::clear_end_date() {
  end_date_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMarketingMessageProto::_internal_end_date() const {
  return end_date_;
}
inline uint32_t CMarketingMessageProto::end_date() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.end_date)
  return _internal_end_date();
}
inline void CMarketingMessageProto::_internal_set_end_date(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  end_date_ = value;
}
inline void CMarketingMessageProto::set_end_date(uint32_t value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.end_date)
}

// optional string country_allow = 11;
inline bool CMarketingMessageProto::_internal_has_country_allow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_country_allow() const {
  return _internal_has_country_allow();
}
inline void CMarketingMessageProto::clear_country_allow() {
  country_allow_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMarketingMessageProto::country_allow() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.country_allow)
  return _internal_country_allow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_country_allow(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 country_allow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.country_allow)
}
inline std::string* CMarketingMessageProto::mutable_country_allow() {
  std::string* _s = _internal_mutable_country_allow();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.country_allow)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_country_allow() const {
  return country_allow_.Get();
}
inline void CMarketingMessageProto::_internal_set_country_allow(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  country_allow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_country_allow() {
  _has_bits_[0] |= 0x00000004u;
  return country_allow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_country_allow() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.country_allow)
  if (!_internal_has_country_allow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = country_allow_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_allow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_allow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_country_allow(std::string* country_allow) {
  if (country_allow != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  country_allow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_allow,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_allow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_allow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.country_allow)
}

// optional string country_deny = 12;
inline bool CMarketingMessageProto::_internal_has_country_deny() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_country_deny() const {
  return _internal_has_country_deny();
}
inline void CMarketingMessageProto::clear_country_deny() {
  country_deny_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMarketingMessageProto::country_deny() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.country_deny)
  return _internal_country_deny();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_country_deny(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 country_deny_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.country_deny)
}
inline std::string* CMarketingMessageProto::mutable_country_deny() {
  std::string* _s = _internal_mutable_country_deny();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.country_deny)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_country_deny() const {
  return country_deny_.Get();
}
inline void CMarketingMessageProto::_internal_set_country_deny(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  country_deny_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_country_deny() {
  _has_bits_[0] |= 0x00000008u;
  return country_deny_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_country_deny() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.country_deny)
  if (!_internal_has_country_deny()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = country_deny_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_deny_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_deny_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_country_deny(std::string* country_deny) {
  if (country_deny != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  country_deny_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_deny,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_deny_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_deny_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.country_deny)
}

// optional bool ownership_restrictions_overridden = 13;
inline bool CMarketingMessageProto::_internal_has_ownership_restrictions_overridden() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_ownership_restrictions_overridden() const {
  return _internal_has_ownership_restrictions_overridden();
}
inline void CMarketingMessageProto::clear_ownership_restrictions_overridden() {
  ownership_restrictions_overridden_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMarketingMessageProto::_internal_ownership_restrictions_overridden() const {
  return ownership_restrictions_overridden_;
}
inline bool CMarketingMessageProto::ownership_restrictions_overridden() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.ownership_restrictions_overridden)
  return _internal_ownership_restrictions_overridden();
}
inline void CMarketingMessageProto::_internal_set_ownership_restrictions_overridden(bool value) {
  _has_bits_[0] |= 0x00020000u;
  ownership_restrictions_overridden_ = value;
}
inline void CMarketingMessageProto::set_ownership_restrictions_overridden(bool value) {
  _internal_set_ownership_restrictions_overridden(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.ownership_restrictions_overridden)
}

// optional uint32 must_own_appid = 14;
inline bool CMarketingMessageProto::_internal_has_must_own_appid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_must_own_appid() const {
  return _internal_has_must_own_appid();
}
inline void CMarketingMessageProto::clear_must_own_appid() {
  must_own_appid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMarketingMessageProto::_internal_must_own_appid() const {
  return must_own_appid_;
}
inline uint32_t CMarketingMessageProto::must_own_appid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.must_own_appid)
  return _internal_must_own_appid();
}
inline void CMarketingMessageProto::_internal_set_must_own_appid(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  must_own_appid_ = value;
}
inline void CMarketingMessageProto::set_must_own_appid(uint32_t value) {
  _internal_set_must_own_appid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.must_own_appid)
}

// optional uint32 must_not_own_appid = 15;
inline bool CMarketingMessageProto::_internal_has_must_not_own_appid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_must_not_own_appid() const {
  return _internal_has_must_not_own_appid();
}
inline void CMarketingMessageProto::clear_must_not_own_appid() {
  must_not_own_appid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMarketingMessageProto::_internal_must_not_own_appid() const {
  return must_not_own_appid_;
}
inline uint32_t CMarketingMessageProto::must_not_own_appid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.must_not_own_appid)
  return _internal_must_not_own_appid();
}
inline void CMarketingMessageProto::_internal_set_must_not_own_appid(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  must_not_own_appid_ = value;
}
inline void CMarketingMessageProto::set_must_not_own_appid(uint32_t value) {
  _internal_set_must_not_own_appid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.must_not_own_appid)
}

// optional uint32 must_own_packageid = 16;
inline bool CMarketingMessageProto::_internal_has_must_own_packageid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_must_own_packageid() const {
  return _internal_has_must_own_packageid();
}
inline void CMarketingMessageProto::clear_must_own_packageid() {
  must_own_packageid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMarketingMessageProto::_internal_must_own_packageid() const {
  return must_own_packageid_;
}
inline uint32_t CMarketingMessageProto::must_own_packageid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.must_own_packageid)
  return _internal_must_own_packageid();
}
inline void CMarketingMessageProto::_internal_set_must_own_packageid(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  must_own_packageid_ = value;
}
inline void CMarketingMessageProto::set_must_own_packageid(uint32_t value) {
  _internal_set_must_own_packageid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.must_own_packageid)
}

// optional uint32 must_not_own_packageid = 17;
inline bool CMarketingMessageProto::_internal_has_must_not_own_packageid() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_must_not_own_packageid() const {
  return _internal_has_must_not_own_packageid();
}
inline void CMarketingMessageProto::clear_must_not_own_packageid() {
  must_not_own_packageid_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMarketingMessageProto::_internal_must_not_own_packageid() const {
  return must_not_own_packageid_;
}
inline uint32_t CMarketingMessageProto::must_not_own_packageid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.must_not_own_packageid)
  return _internal_must_not_own_packageid();
}
inline void CMarketingMessageProto::_internal_set_must_not_own_packageid(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  must_not_own_packageid_ = value;
}
inline void CMarketingMessageProto::set_must_not_own_packageid(uint32_t value) {
  _internal_set_must_not_own_packageid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.must_not_own_packageid)
}

// optional uint32 must_have_launched_appid = 18;
inline bool CMarketingMessageProto::_internal_has_must_have_launched_appid() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_must_have_launched_appid() const {
  return _internal_has_must_have_launched_appid();
}
inline void CMarketingMessageProto::clear_must_have_launched_appid() {
  must_have_launched_appid_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMarketingMessageProto::_internal_must_have_launched_appid() const {
  return must_have_launched_appid_;
}
inline uint32_t CMarketingMessageProto::must_have_launched_appid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.must_have_launched_appid)
  return _internal_must_have_launched_appid();
}
inline void CMarketingMessageProto::_internal_set_must_have_launched_appid(uint32_t value) {
  _has_bits_[0] |= 0x00400000u;
  must_have_launched_appid_ = value;
}
inline void CMarketingMessageProto::set_must_have_launched_appid(uint32_t value) {
  _internal_set_must_have_launched_appid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.must_have_launched_appid)
}

// optional string additional_restrictions = 19;
inline bool CMarketingMessageProto::_internal_has_additional_restrictions() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_additional_restrictions() const {
  return _internal_has_additional_restrictions();
}
inline void CMarketingMessageProto::clear_additional_restrictions() {
  additional_restrictions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMarketingMessageProto::additional_restrictions() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.additional_restrictions)
  return _internal_additional_restrictions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_additional_restrictions(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 additional_restrictions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.additional_restrictions)
}
inline std::string* CMarketingMessageProto::mutable_additional_restrictions() {
  std::string* _s = _internal_mutable_additional_restrictions();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.additional_restrictions)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_additional_restrictions() const {
  return additional_restrictions_.Get();
}
inline void CMarketingMessageProto::_internal_set_additional_restrictions(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  additional_restrictions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_additional_restrictions() {
  _has_bits_[0] |= 0x00000010u;
  return additional_restrictions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_additional_restrictions() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.additional_restrictions)
  if (!_internal_has_additional_restrictions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = additional_restrictions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_restrictions_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_restrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_additional_restrictions(std::string* additional_restrictions) {
  if (additional_restrictions != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  additional_restrictions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_restrictions,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_restrictions_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_restrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.additional_restrictions)
}

// optional string template_type = 20;
inline bool CMarketingMessageProto::_internal_has_template_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_template_type() const {
  return _internal_has_template_type();
}
inline void CMarketingMessageProto::clear_template_type() {
  template_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMarketingMessageProto::template_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.template_type)
  return _internal_template_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_template_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.template_type)
}
inline std::string* CMarketingMessageProto::mutable_template_type() {
  std::string* _s = _internal_mutable_template_type();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.template_type)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_template_type() const {
  return template_type_.Get();
}
inline void CMarketingMessageProto::_internal_set_template_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_template_type() {
  _has_bits_[0] |= 0x00000020u;
  return template_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_template_type() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.template_type)
  if (!_internal_has_template_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = template_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_template_type(std::string* template_type) {
  if (template_type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  template_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.template_type)
}

// optional string template_vars = 21;
inline bool CMarketingMessageProto::_internal_has_template_vars() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_template_vars() const {
  return _internal_has_template_vars();
}
inline void CMarketingMessageProto::clear_template_vars() {
  template_vars_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMarketingMessageProto::template_vars() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.template_vars)
  return _internal_template_vars();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_template_vars(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 template_vars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.template_vars)
}
inline std::string* CMarketingMessageProto::mutable_template_vars() {
  std::string* _s = _internal_mutable_template_vars();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.template_vars)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_template_vars() const {
  return template_vars_.Get();
}
inline void CMarketingMessageProto::_internal_set_template_vars(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  template_vars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_template_vars() {
  _has_bits_[0] |= 0x00000040u;
  return template_vars_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_template_vars() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.template_vars)
  if (!_internal_has_template_vars()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = template_vars_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_template_vars(std::string* template_vars) {
  if (template_vars != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  template_vars_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_vars,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.template_vars)
}

// optional uint32 flags = 22;
inline bool CMarketingMessageProto::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_flags() const {
  return _internal_has_flags();
}
inline void CMarketingMessageProto::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMarketingMessageProto::_internal_flags() const {
  return flags_;
}
inline uint32_t CMarketingMessageProto::flags() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.flags)
  return _internal_flags();
}
inline void CMarketingMessageProto::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00800000u;
  flags_ = value;
}
inline void CMarketingMessageProto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.flags)
}

// optional string creator_name = 23;
inline bool CMarketingMessageProto::_internal_has_creator_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_creator_name() const {
  return _internal_has_creator_name();
}
inline void CMarketingMessageProto::clear_creator_name() {
  creator_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMarketingMessageProto::creator_name() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.creator_name)
  return _internal_creator_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_creator_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 creator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.creator_name)
}
inline std::string* CMarketingMessageProto::mutable_creator_name() {
  std::string* _s = _internal_mutable_creator_name();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.creator_name)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_creator_name() const {
  return creator_name_.Get();
}
inline void CMarketingMessageProto::_internal_set_creator_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  creator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_creator_name() {
  _has_bits_[0] |= 0x00000080u;
  return creator_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_creator_name() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.creator_name)
  if (!_internal_has_creator_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = creator_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_creator_name(std::string* creator_name) {
  if (creator_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  creator_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.creator_name)
}

// optional string template_vars_json = 24;
inline bool CMarketingMessageProto::_internal_has_template_vars_json() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_template_vars_json() const {
  return _internal_has_template_vars_json();
}
inline void CMarketingMessageProto::clear_template_vars_json() {
  template_vars_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CMarketingMessageProto::template_vars_json() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.template_vars_json)
  return _internal_template_vars_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_template_vars_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.template_vars_json)
}
inline std::string* CMarketingMessageProto::mutable_template_vars_json() {
  std::string* _s = _internal_mutable_template_vars_json();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.template_vars_json)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_template_vars_json() const {
  return template_vars_json_.Get();
}
inline void CMarketingMessageProto::_internal_set_template_vars_json(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_template_vars_json() {
  _has_bits_[0] |= 0x00000100u;
  return template_vars_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_template_vars_json() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.template_vars_json)
  if (!_internal_has_template_vars_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = template_vars_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_template_vars_json(std::string* template_vars_json) {
  if (template_vars_json != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  template_vars_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_vars_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.template_vars_json)
}

// optional string additional_restrictions_json = 25;
inline bool CMarketingMessageProto::_internal_has_additional_restrictions_json() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMarketingMessageProto::has_additional_restrictions_json() const {
  return _internal_has_additional_restrictions_json();
}
inline void CMarketingMessageProto::clear_additional_restrictions_json() {
  additional_restrictions_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CMarketingMessageProto::additional_restrictions_json() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageProto.additional_restrictions_json)
  return _internal_additional_restrictions_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessageProto::set_additional_restrictions_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 additional_restrictions_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessageProto.additional_restrictions_json)
}
inline std::string* CMarketingMessageProto::mutable_additional_restrictions_json() {
  std::string* _s = _internal_mutable_additional_restrictions_json();
  // @@protoc_insertion_point(field_mutable:CMarketingMessageProto.additional_restrictions_json)
  return _s;
}
inline const std::string& CMarketingMessageProto::_internal_additional_restrictions_json() const {
  return additional_restrictions_json_.Get();
}
inline void CMarketingMessageProto::_internal_set_additional_restrictions_json(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  additional_restrictions_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::_internal_mutable_additional_restrictions_json() {
  _has_bits_[0] |= 0x00000200u;
  return additional_restrictions_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessageProto::release_additional_restrictions_json() {
  // @@protoc_insertion_point(field_release:CMarketingMessageProto.additional_restrictions_json)
  if (!_internal_has_additional_restrictions_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = additional_restrictions_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_restrictions_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_restrictions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessageProto::set_allocated_additional_restrictions_json(std::string* additional_restrictions_json) {
  if (additional_restrictions_json != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  additional_restrictions_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_restrictions_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_restrictions_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_restrictions_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessageProto.additional_restrictions_json)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetActiveMarketingMessages_Response

// repeated .CMarketingMessageProto messages = 1;
inline int CMarketingMessages_GetActiveMarketingMessages_Response::_internal_messages_size() const {
  return messages_.size();
}
inline int CMarketingMessages_GetActiveMarketingMessages_Response::messages_size() const {
  return _internal_messages_size();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Response::clear_messages() {
  messages_.Clear();
}
inline ::CMarketingMessageProto* CMarketingMessages_GetActiveMarketingMessages_Response::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetActiveMarketingMessages_Response.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >*
CMarketingMessages_GetActiveMarketingMessages_Response::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_GetActiveMarketingMessages_Response.messages)
  return &messages_;
}
inline const ::CMarketingMessageProto& CMarketingMessages_GetActiveMarketingMessages_Response::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CMarketingMessageProto& CMarketingMessages_GetActiveMarketingMessages_Response::messages(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetActiveMarketingMessages_Response.messages)
  return _internal_messages(index);
}
inline ::CMarketingMessageProto* CMarketingMessages_GetActiveMarketingMessages_Response::_internal_add_messages() {
  return messages_.Add();
}
inline ::CMarketingMessageProto* CMarketingMessages_GetActiveMarketingMessages_Response::add_messages() {
  ::CMarketingMessageProto* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:CMarketingMessages_GetActiveMarketingMessages_Response.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >&
CMarketingMessages_GetActiveMarketingMessages_Response::messages() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_GetActiveMarketingMessages_Response.messages)
  return messages_;
}

// optional uint32 time_next_message_age = 2;
inline bool CMarketingMessages_GetActiveMarketingMessages_Response::_internal_has_time_next_message_age() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetActiveMarketingMessages_Response::has_time_next_message_age() const {
  return _internal_has_time_next_message_age();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Response::clear_time_next_message_age() {
  time_next_message_age_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMarketingMessages_GetActiveMarketingMessages_Response::_internal_time_next_message_age() const {
  return time_next_message_age_;
}
inline uint32_t CMarketingMessages_GetActiveMarketingMessages_Response::time_next_message_age() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetActiveMarketingMessages_Response.time_next_message_age)
  return _internal_time_next_message_age();
}
inline void CMarketingMessages_GetActiveMarketingMessages_Response::_internal_set_time_next_message_age(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_next_message_age_ = value;
}
inline void CMarketingMessages_GetActiveMarketingMessages_Response::set_time_next_message_age(uint32_t value) {
  _internal_set_time_next_message_age(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetActiveMarketingMessages_Response.time_next_message_age)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessagesForUser_Request

// optional bool include_seen_messages = 1;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_include_seen_messages() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_include_seen_messages() const {
  return _internal_has_include_seen_messages();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_include_seen_messages() {
  include_seen_messages_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_include_seen_messages() const {
  return include_seen_messages_;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::include_seen_messages() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.include_seen_messages)
  return _internal_include_seen_messages();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_set_include_seen_messages(bool value) {
  _has_bits_[0] |= 0x00000008u;
  include_seen_messages_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_include_seen_messages(bool value) {
  _internal_set_include_seen_messages(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Request.include_seen_messages)
}

// optional string country_code = 2;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMarketingMessages_GetMarketingMessagesForUser_Request::country_code() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessages_GetMarketingMessagesForUser_Request::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Request.country_code)
}
inline std::string* CMarketingMessages_GetMarketingMessagesForUser_Request::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesForUser_Request.country_code)
  return _s;
}
inline const std::string& CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_country_code() const {
  return country_code_.Get();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_GetMarketingMessagesForUser_Request::release_country_code() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetMarketingMessagesForUser_Request.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Request.country_code)
}

// optional int32 elanguage = 3;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_elanguage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_elanguage() const {
  return _internal_has_elanguage();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_elanguage() {
  elanguage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_elanguage() const {
  return elanguage_;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::elanguage() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.elanguage)
  return _internal_elanguage();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_set_elanguage(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  elanguage_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_elanguage(int32_t value) {
  _internal_set_elanguage(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Request.elanguage)
}

// optional int32 operating_system = 4 [(.description) = "EOSType from client"];
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_operating_system() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_operating_system() const {
  return _internal_has_operating_system();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_operating_system() {
  operating_system_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_operating_system() const {
  return operating_system_;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::operating_system() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.operating_system)
  return _internal_operating_system();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_set_operating_system(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  operating_system_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_operating_system(int32_t value) {
  _internal_set_operating_system(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Request.operating_system)
}

// optional int32 client_package_version = 5;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::clear_client_package_version() {
  client_package_version_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_client_package_version() const {
  return client_package_version_;
}
inline int32_t CMarketingMessages_GetMarketingMessagesForUser_Request::client_package_version() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.client_package_version)
  return _internal_client_package_version();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_set_client_package_version(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  client_package_version_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_client_package_version(int32_t value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Request.client_package_version)
}

// optional .StoreBrowseContext context = 6 [(.description) = "Optional, server can fill in from country code/language if not set"];
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || context_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_context() const {
  return _internal_has_context();
}
inline const ::StoreBrowseContext& CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_context() const {
  const ::StoreBrowseContext* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreBrowseContext&>(
      ::_StoreBrowseContext_default_instance_);
}
inline const ::StoreBrowseContext& CMarketingMessages_GetMarketingMessagesForUser_Request::context() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.context)
  return _internal_context();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::unsafe_arena_set_allocated_context(
    ::StoreBrowseContext* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Request.context)
}
inline ::StoreBrowseContext* CMarketingMessages_GetMarketingMessagesForUser_Request::release_context() {
  _has_bits_[0] &= ~0x00000002u;
  ::StoreBrowseContext* temp = context_;
  context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreBrowseContext* CMarketingMessages_GetMarketingMessagesForUser_Request::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetMarketingMessagesForUser_Request.context)
  _has_bits_[0] &= ~0x00000002u;
  ::StoreBrowseContext* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::StoreBrowseContext* CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000002u;
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreBrowseContext>(GetArenaForAllocation());
    context_ = p;
  }
  return context_;
}
inline ::StoreBrowseContext* CMarketingMessages_GetMarketingMessagesForUser_Request::mutable_context() {
  ::StoreBrowseContext* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesForUser_Request.context)
  return _msg;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_allocated_context(::StoreBrowseContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Request.context)
}

// optional .StoreBrowseItemDataRequest data_request = 7 [(.description) = "If passed, item data will be returned"];
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_has_data_request() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || data_request_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Request::has_data_request() const {
  return _internal_has_data_request();
}
inline const ::StoreBrowseItemDataRequest& CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_data_request() const {
  const ::StoreBrowseItemDataRequest* p = data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreBrowseItemDataRequest&>(
      ::_StoreBrowseItemDataRequest_default_instance_);
}
inline const ::StoreBrowseItemDataRequest& CMarketingMessages_GetMarketingMessagesForUser_Request::data_request() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Request.data_request)
  return _internal_data_request();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::unsafe_arena_set_allocated_data_request(
    ::StoreBrowseItemDataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  data_request_ = data_request;
  if (data_request) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Request.data_request)
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetMarketingMessagesForUser_Request::release_data_request() {
  _has_bits_[0] &= ~0x00000004u;
  ::StoreBrowseItemDataRequest* temp = data_request_;
  data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetMarketingMessagesForUser_Request::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetMarketingMessagesForUser_Request.data_request)
  _has_bits_[0] &= ~0x00000004u;
  ::StoreBrowseItemDataRequest* temp = data_request_;
  data_request_ = nullptr;
  return temp;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetMarketingMessagesForUser_Request::_internal_mutable_data_request() {
  _has_bits_[0] |= 0x00000004u;
  if (data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreBrowseItemDataRequest>(GetArenaForAllocation());
    data_request_ = p;
  }
  return data_request_;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetMarketingMessagesForUser_Request::mutable_data_request() {
  ::StoreBrowseItemDataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesForUser_Request.data_request)
  return _msg;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Request::set_allocated_data_request(::StoreBrowseItemDataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request));
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Request.data_request)
}

// -------------------------------------------------------------------

// CDisplayMarketingMessage

// optional fixed64 gid = 1;
inline bool CDisplayMarketingMessage::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_gid() const {
  return _internal_has_gid();
}
inline void CDisplayMarketingMessage::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CDisplayMarketingMessage::_internal_gid() const {
  return gid_;
}
inline uint64_t CDisplayMarketingMessage::gid() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.gid)
  return _internal_gid();
}
inline void CDisplayMarketingMessage::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  gid_ = value;
}
inline void CDisplayMarketingMessage::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.gid)
}

// optional string title = 2;
inline bool CDisplayMarketingMessage::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_title() const {
  return _internal_has_title();
}
inline void CDisplayMarketingMessage::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDisplayMarketingMessage::title() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDisplayMarketingMessage::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.title)
}
inline std::string* CDisplayMarketingMessage::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.title)
  return _s;
}
inline const std::string& CDisplayMarketingMessage::_internal_title() const {
  return title_.Get();
}
inline void CDisplayMarketingMessage::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::release_title() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDisplayMarketingMessage::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.title)
}

// optional .EMarketingMessageType type = 3 [default = k_EMarketingMessageInvalid];
inline bool CDisplayMarketingMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_type() const {
  return _internal_has_type();
}
inline void CDisplayMarketingMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EMarketingMessageType CDisplayMarketingMessage::_internal_type() const {
  return static_cast< ::EMarketingMessageType >(type_);
}
inline ::EMarketingMessageType CDisplayMarketingMessage::type() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.type)
  return _internal_type();
}
inline void CDisplayMarketingMessage::_internal_set_type(::EMarketingMessageType value) {
  assert(::EMarketingMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void CDisplayMarketingMessage::set_type(::EMarketingMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.type)
}

// optional .StoreItemID associated_item_id = 4;
inline bool CDisplayMarketingMessage::_internal_has_associated_item_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || associated_item_id_ != nullptr);
  return value;
}
inline bool CDisplayMarketingMessage::has_associated_item_id() const {
  return _internal_has_associated_item_id();
}
inline const ::StoreItemID& CDisplayMarketingMessage::_internal_associated_item_id() const {
  const ::StoreItemID* p = associated_item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreItemID&>(
      ::_StoreItemID_default_instance_);
}
inline const ::StoreItemID& CDisplayMarketingMessage::associated_item_id() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.associated_item_id)
  return _internal_associated_item_id();
}
inline void CDisplayMarketingMessage::unsafe_arena_set_allocated_associated_item_id(
    ::StoreItemID* associated_item_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item_id_);
  }
  associated_item_id_ = associated_item_id;
  if (associated_item_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDisplayMarketingMessage.associated_item_id)
}
inline ::StoreItemID* CDisplayMarketingMessage::release_associated_item_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::StoreItemID* temp = associated_item_id_;
  associated_item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreItemID* CDisplayMarketingMessage::unsafe_arena_release_associated_item_id() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.associated_item_id)
  _has_bits_[0] &= ~0x00000010u;
  ::StoreItemID* temp = associated_item_id_;
  associated_item_id_ = nullptr;
  return temp;
}
inline ::StoreItemID* CDisplayMarketingMessage::_internal_mutable_associated_item_id() {
  _has_bits_[0] |= 0x00000010u;
  if (associated_item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreItemID>(GetArenaForAllocation());
    associated_item_id_ = p;
  }
  return associated_item_id_;
}
inline ::StoreItemID* CDisplayMarketingMessage::mutable_associated_item_id() {
  ::StoreItemID* _msg = _internal_mutable_associated_item_id();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.associated_item_id)
  return _msg;
}
inline void CDisplayMarketingMessage::set_allocated_associated_item_id(::StoreItemID* associated_item_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item_id_);
  }
  if (associated_item_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item_id));
    if (message_arena != submessage_arena) {
      associated_item_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, associated_item_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  associated_item_id_ = associated_item_id;
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.associated_item_id)
}

// optional .StoreItem associated_item = 5;
inline bool CDisplayMarketingMessage::_internal_has_associated_item() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || associated_item_ != nullptr);
  return value;
}
inline bool CDisplayMarketingMessage::has_associated_item() const {
  return _internal_has_associated_item();
}
inline const ::StoreItem& CDisplayMarketingMessage::_internal_associated_item() const {
  const ::StoreItem* p = associated_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreItem&>(
      ::_StoreItem_default_instance_);
}
inline const ::StoreItem& CDisplayMarketingMessage::associated_item() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.associated_item)
  return _internal_associated_item();
}
inline void CDisplayMarketingMessage::unsafe_arena_set_allocated_associated_item(
    ::StoreItem* associated_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item_);
  }
  associated_item_ = associated_item;
  if (associated_item) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDisplayMarketingMessage.associated_item)
}
inline ::StoreItem* CDisplayMarketingMessage::release_associated_item() {
  _has_bits_[0] &= ~0x00000020u;
  ::StoreItem* temp = associated_item_;
  associated_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreItem* CDisplayMarketingMessage::unsafe_arena_release_associated_item() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.associated_item)
  _has_bits_[0] &= ~0x00000020u;
  ::StoreItem* temp = associated_item_;
  associated_item_ = nullptr;
  return temp;
}
inline ::StoreItem* CDisplayMarketingMessage::_internal_mutable_associated_item() {
  _has_bits_[0] |= 0x00000020u;
  if (associated_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreItem>(GetArenaForAllocation());
    associated_item_ = p;
  }
  return associated_item_;
}
inline ::StoreItem* CDisplayMarketingMessage::mutable_associated_item() {
  ::StoreItem* _msg = _internal_mutable_associated_item();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.associated_item)
  return _msg;
}
inline void CDisplayMarketingMessage::set_allocated_associated_item(::StoreItem* associated_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item_);
  }
  if (associated_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(associated_item));
    if (message_arena != submessage_arena) {
      associated_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, associated_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  associated_item_ = associated_item;
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.associated_item)
}

// optional string associated_name = 6;
inline bool CDisplayMarketingMessage::_internal_has_associated_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_associated_name() const {
  return _internal_has_associated_name();
}
inline void CDisplayMarketingMessage::clear_associated_name() {
  associated_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDisplayMarketingMessage::associated_name() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.associated_name)
  return _internal_associated_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDisplayMarketingMessage::set_associated_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.associated_name)
}
inline std::string* CDisplayMarketingMessage::mutable_associated_name() {
  std::string* _s = _internal_mutable_associated_name();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.associated_name)
  return _s;
}
inline const std::string& CDisplayMarketingMessage::_internal_associated_name() const {
  return associated_name_.Get();
}
inline void CDisplayMarketingMessage::_internal_set_associated_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  associated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::_internal_mutable_associated_name() {
  _has_bits_[0] |= 0x00000002u;
  return associated_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::release_associated_name() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.associated_name)
  if (!_internal_has_associated_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = associated_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDisplayMarketingMessage::set_allocated_associated_name(std::string* associated_name) {
  if (associated_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  associated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    associated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.associated_name)
}

// optional string template_type = 10;
inline bool CDisplayMarketingMessage::_internal_has_template_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_template_type() const {
  return _internal_has_template_type();
}
inline void CDisplayMarketingMessage::clear_template_type() {
  template_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CDisplayMarketingMessage::template_type() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.template_type)
  return _internal_template_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDisplayMarketingMessage::set_template_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.template_type)
}
inline std::string* CDisplayMarketingMessage::mutable_template_type() {
  std::string* _s = _internal_mutable_template_type();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.template_type)
  return _s;
}
inline const std::string& CDisplayMarketingMessage::_internal_template_type() const {
  return template_type_.Get();
}
inline void CDisplayMarketingMessage::_internal_set_template_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  template_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::_internal_mutable_template_type() {
  _has_bits_[0] |= 0x00000004u;
  return template_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::release_template_type() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.template_type)
  if (!_internal_has_template_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = template_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDisplayMarketingMessage::set_allocated_template_type(std::string* template_type) {
  if (template_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  template_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.template_type)
}

// optional string template_vars_json = 11;
inline bool CDisplayMarketingMessage::_internal_has_template_vars_json() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDisplayMarketingMessage::has_template_vars_json() const {
  return _internal_has_template_vars_json();
}
inline void CDisplayMarketingMessage::clear_template_vars_json() {
  template_vars_json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CDisplayMarketingMessage::template_vars_json() const {
  // @@protoc_insertion_point(field_get:CDisplayMarketingMessage.template_vars_json)
  return _internal_template_vars_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDisplayMarketingMessage::set_template_vars_json(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDisplayMarketingMessage.template_vars_json)
}
inline std::string* CDisplayMarketingMessage::mutable_template_vars_json() {
  std::string* _s = _internal_mutable_template_vars_json();
  // @@protoc_insertion_point(field_mutable:CDisplayMarketingMessage.template_vars_json)
  return _s;
}
inline const std::string& CDisplayMarketingMessage::_internal_template_vars_json() const {
  return template_vars_json_.Get();
}
inline void CDisplayMarketingMessage::_internal_set_template_vars_json(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  template_vars_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::_internal_mutable_template_vars_json() {
  _has_bits_[0] |= 0x00000008u;
  return template_vars_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDisplayMarketingMessage::release_template_vars_json() {
  // @@protoc_insertion_point(field_release:CDisplayMarketingMessage.template_vars_json)
  if (!_internal_has_template_vars_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = template_vars_json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDisplayMarketingMessage::set_allocated_template_vars_json(std::string* template_vars_json) {
  if (template_vars_json != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  template_vars_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_vars_json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (template_vars_json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    template_vars_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDisplayMarketingMessage.template_vars_json)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser

// optional bool already_seen = 1;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_has_already_seen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::has_already_seen() const {
  return _internal_has_already_seen();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::clear_already_seen() {
  already_seen_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_already_seen() const {
  return already_seen_;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::already_seen() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.already_seen)
  return _internal_already_seen();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_set_already_seen(bool value) {
  _has_bits_[0] |= 0x00000002u;
  already_seen_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::set_already_seen(bool value) {
  _internal_set_already_seen(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.already_seen)
}

// optional .CDisplayMarketingMessage message = 2;
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::has_message() const {
  return _internal_has_message();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDisplayMarketingMessage& CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_message() const {
  const ::CDisplayMarketingMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDisplayMarketingMessage&>(
      ::_CDisplayMarketingMessage_default_instance_);
}
inline const ::CDisplayMarketingMessage& CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::message() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message)
  return _internal_message();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::unsafe_arena_set_allocated_message(
    ::CDisplayMarketingMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message)
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDisplayMarketingMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message)
  _has_bits_[0] &= ~0x00000001u;
  ::CDisplayMarketingMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDisplayMarketingMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::mutable_message() {
  ::CDisplayMarketingMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message)
  return _msg;
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser::set_allocated_message(::CDisplayMarketingMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CDisplayMarketingMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser.message)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessagesForUser_Response

// repeated .CMarketingMessages_GetMarketingMessagesForUser_Response.MarketingMessageForUser messages = 1;
inline int CMarketingMessages_GetMarketingMessagesForUser_Response::_internal_messages_size() const {
  return messages_.size();
}
inline int CMarketingMessages_GetMarketingMessagesForUser_Response::messages_size() const {
  return _internal_messages_size();
}
inline void CMarketingMessages_GetMarketingMessagesForUser_Response::clear_messages() {
  messages_.Clear();
}
inline ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* CMarketingMessages_GetMarketingMessagesForUser_Response::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesForUser_Response.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >*
CMarketingMessages_GetMarketingMessagesForUser_Response::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_GetMarketingMessagesForUser_Response.messages)
  return &messages_;
}
inline const ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& CMarketingMessages_GetMarketingMessagesForUser_Response::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser& CMarketingMessages_GetMarketingMessagesForUser_Response::messages(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesForUser_Response.messages)
  return _internal_messages(index);
}
inline ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* CMarketingMessages_GetMarketingMessagesForUser_Response::_internal_add_messages() {
  return messages_.Add();
}
inline ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* CMarketingMessages_GetMarketingMessagesForUser_Response::add_messages() {
  ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:CMarketingMessages_GetMarketingMessagesForUser_Response.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessages_GetMarketingMessagesForUser_Response_MarketingMessageForUser >&
CMarketingMessages_GetMarketingMessagesForUser_Response::messages() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_GetMarketingMessagesForUser_Response.messages)
  return messages_;
}

// -------------------------------------------------------------------

// CMarketingMessages_DoesUserHavePendingMarketingMessages_Request

// optional string country_code = 2;
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::country_code() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code)
}
inline std::string* CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code)
  return _s;
}
inline const std::string& CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_country_code() const {
  return country_code_.Get();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::release_country_code() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.country_code)
}

// optional int32 elanguage = 3;
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_has_elanguage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::has_elanguage() const {
  return _internal_has_elanguage();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::clear_elanguage() {
  elanguage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_elanguage() const {
  return elanguage_;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::elanguage() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.elanguage)
  return _internal_elanguage();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_set_elanguage(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  elanguage_ = value;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::set_elanguage(int32_t value) {
  _internal_set_elanguage(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.elanguage)
}

// optional int32 operating_system = 4 [(.description) = "EOSType from client"];
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_has_operating_system() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::has_operating_system() const {
  return _internal_has_operating_system();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::clear_operating_system() {
  operating_system_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_operating_system() const {
  return operating_system_;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::operating_system() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.operating_system)
  return _internal_operating_system();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_set_operating_system(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  operating_system_ = value;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::set_operating_system(int32_t value) {
  _internal_set_operating_system(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.operating_system)
}

// optional int32 client_package_version = 5;
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::clear_client_package_version() {
  client_package_version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_client_package_version() const {
  return client_package_version_;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::client_package_version() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.client_package_version)
  return _internal_client_package_version();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::_internal_set_client_package_version(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_package_version_ = value;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Request::set_client_package_version(int32_t value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Request.client_package_version)
}

// -------------------------------------------------------------------

// CMarketingMessages_DoesUserHavePendingMarketingMessages_Response

// optional bool has_pending_messages = 1;
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_has_has_pending_messages() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::has_has_pending_messages() const {
  return _internal_has_has_pending_messages();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::clear_has_pending_messages() {
  has_pending_messages_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_has_pending_messages() const {
  return has_pending_messages_;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::has_pending_messages() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response.has_pending_messages)
  return _internal_has_pending_messages();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_set_has_pending_messages(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_pending_messages_ = value;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::set_has_pending_messages(bool value) {
  _internal_set_has_pending_messages(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response.has_pending_messages)
}

// optional int32 pending_message_count = 2;
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_has_pending_message_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::has_pending_message_count() const {
  return _internal_has_pending_message_count();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::clear_pending_message_count() {
  pending_message_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_pending_message_count() const {
  return pending_message_count_;
}
inline int32_t CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::pending_message_count() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response.pending_message_count)
  return _internal_pending_message_count();
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::_internal_set_pending_message_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pending_message_count_ = value;
}
inline void CMarketingMessages_DoesUserHavePendingMarketingMessages_Response::set_pending_message_count(int32_t value) {
  _internal_set_pending_message_count(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DoesUserHavePendingMarketingMessages_Response.pending_message_count)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetDisplayMarketingMessage_Request

// optional fixed64 gid = 1;
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_GetDisplayMarketingMessage_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetDisplayMarketingMessage_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  gid_ = value;
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetDisplayMarketingMessage_Request.gid)
}

// optional .StoreBrowseContext context = 2;
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || context_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::has_context() const {
  return _internal_has_context();
}
inline const ::StoreBrowseContext& CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_context() const {
  const ::StoreBrowseContext* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreBrowseContext&>(
      ::_StoreBrowseContext_default_instance_);
}
inline const ::StoreBrowseContext& CMarketingMessages_GetDisplayMarketingMessage_Request::context() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetDisplayMarketingMessage_Request.context)
  return _internal_context();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::unsafe_arena_set_allocated_context(
    ::StoreBrowseContext* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Request.context)
}
inline ::StoreBrowseContext* CMarketingMessages_GetDisplayMarketingMessage_Request::release_context() {
  _has_bits_[0] &= ~0x00000001u;
  ::StoreBrowseContext* temp = context_;
  context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreBrowseContext* CMarketingMessages_GetDisplayMarketingMessage_Request::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetDisplayMarketingMessage_Request.context)
  _has_bits_[0] &= ~0x00000001u;
  ::StoreBrowseContext* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::StoreBrowseContext* CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000001u;
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreBrowseContext>(GetArenaForAllocation());
    context_ = p;
  }
  return context_;
}
inline ::StoreBrowseContext* CMarketingMessages_GetDisplayMarketingMessage_Request::mutable_context() {
  ::StoreBrowseContext* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetDisplayMarketingMessage_Request.context)
  return _msg;
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::set_allocated_context(::StoreBrowseContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Request.context)
}

// optional .StoreBrowseItemDataRequest data_request = 3 [(.description) = "If passed, item data will be returned"];
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_has_data_request() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_request_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetDisplayMarketingMessage_Request::has_data_request() const {
  return _internal_has_data_request();
}
inline const ::StoreBrowseItemDataRequest& CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_data_request() const {
  const ::StoreBrowseItemDataRequest* p = data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::StoreBrowseItemDataRequest&>(
      ::_StoreBrowseItemDataRequest_default_instance_);
}
inline const ::StoreBrowseItemDataRequest& CMarketingMessages_GetDisplayMarketingMessage_Request::data_request() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetDisplayMarketingMessage_Request.data_request)
  return _internal_data_request();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::unsafe_arena_set_allocated_data_request(
    ::StoreBrowseItemDataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  data_request_ = data_request;
  if (data_request) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Request.data_request)
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetDisplayMarketingMessage_Request::release_data_request() {
  _has_bits_[0] &= ~0x00000002u;
  ::StoreBrowseItemDataRequest* temp = data_request_;
  data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetDisplayMarketingMessage_Request::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetDisplayMarketingMessage_Request.data_request)
  _has_bits_[0] &= ~0x00000002u;
  ::StoreBrowseItemDataRequest* temp = data_request_;
  data_request_ = nullptr;
  return temp;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetDisplayMarketingMessage_Request::_internal_mutable_data_request() {
  _has_bits_[0] |= 0x00000002u;
  if (data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::StoreBrowseItemDataRequest>(GetArenaForAllocation());
    data_request_ = p;
  }
  return data_request_;
}
inline ::StoreBrowseItemDataRequest* CMarketingMessages_GetDisplayMarketingMessage_Request::mutable_data_request() {
  ::StoreBrowseItemDataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetDisplayMarketingMessage_Request.data_request)
  return _msg;
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Request::set_allocated_data_request(::StoreBrowseItemDataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request));
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Request.data_request)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetDisplayMarketingMessage_Response

// optional .CDisplayMarketingMessage message = 1;
inline bool CMarketingMessages_GetDisplayMarketingMessage_Response::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetDisplayMarketingMessage_Response::has_message() const {
  return _internal_has_message();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Response::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDisplayMarketingMessage& CMarketingMessages_GetDisplayMarketingMessage_Response::_internal_message() const {
  const ::CDisplayMarketingMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDisplayMarketingMessage&>(
      ::_CDisplayMarketingMessage_default_instance_);
}
inline const ::CDisplayMarketingMessage& CMarketingMessages_GetDisplayMarketingMessage_Response::message() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetDisplayMarketingMessage_Response.message)
  return _internal_message();
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Response::unsafe_arena_set_allocated_message(
    ::CDisplayMarketingMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Response.message)
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetDisplayMarketingMessage_Response::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDisplayMarketingMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetDisplayMarketingMessage_Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetDisplayMarketingMessage_Response.message)
  _has_bits_[0] &= ~0x00000001u;
  ::CDisplayMarketingMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetDisplayMarketingMessage_Response::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDisplayMarketingMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CDisplayMarketingMessage* CMarketingMessages_GetDisplayMarketingMessage_Response::mutable_message() {
  ::CDisplayMarketingMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetDisplayMarketingMessage_Response.message)
  return _msg;
}
inline void CMarketingMessages_GetDisplayMarketingMessage_Response::set_allocated_message(::CDisplayMarketingMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CDisplayMarketingMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetDisplayMarketingMessage_Response.message)
}

// -------------------------------------------------------------------

// CMarketingMessages_MarkMessageSeen_Notification

// optional fixed64 gid = 1;
inline bool CMarketingMessages_MarkMessageSeen_Notification::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_MarkMessageSeen_Notification::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMarketingMessages_MarkMessageSeen_Notification::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_MarkMessageSeen_Notification::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_MarkMessageSeen_Notification.gid)
  return _internal_gid();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_ = value;
}
inline void CMarketingMessages_MarkMessageSeen_Notification::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_MarkMessageSeen_Notification.gid)
}

// optional uint32 display_index = 2 [default = 0, (.description) = "Where in the stack was the marketing message, 1-based, zero means we don\'t know"];
inline bool CMarketingMessages_MarkMessageSeen_Notification::_internal_has_display_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_MarkMessageSeen_Notification::has_display_index() const {
  return _internal_has_display_index();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::clear_display_index() {
  display_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMarketingMessages_MarkMessageSeen_Notification::_internal_display_index() const {
  return display_index_;
}
inline uint32_t CMarketingMessages_MarkMessageSeen_Notification::display_index() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_MarkMessageSeen_Notification.display_index)
  return _internal_display_index();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::_internal_set_display_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  display_index_ = value;
}
inline void CMarketingMessages_MarkMessageSeen_Notification::set_display_index(uint32_t value) {
  _internal_set_display_index(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_MarkMessageSeen_Notification.display_index)
}

// optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which type of template did they see"];
inline bool CMarketingMessages_MarkMessageSeen_Notification::_internal_has_template_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessages_MarkMessageSeen_Notification::has_template_type() const {
  return _internal_has_template_type();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::clear_template_type() {
  template_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMarketingMessageTemplateType CMarketingMessages_MarkMessageSeen_Notification::_internal_template_type() const {
  return static_cast< ::EMarketingMessageTemplateType >(template_type_);
}
inline ::EMarketingMessageTemplateType CMarketingMessages_MarkMessageSeen_Notification::template_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_MarkMessageSeen_Notification.template_type)
  return _internal_template_type();
}
inline void CMarketingMessages_MarkMessageSeen_Notification::_internal_set_template_type(::EMarketingMessageTemplateType value) {
  assert(::EMarketingMessageTemplateType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  template_type_ = value;
}
inline void CMarketingMessages_MarkMessageSeen_Notification::set_template_type(::EMarketingMessageTemplateType value) {
  _internal_set_template_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_MarkMessageSeen_Notification.template_type)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessage_Request

// optional fixed64 gid = 1;
inline bool CMarketingMessages_GetMarketingMessage_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessage_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_GetMarketingMessage_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMarketingMessages_GetMarketingMessage_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_GetMarketingMessage_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessage_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_GetMarketingMessage_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_ = value;
}
inline void CMarketingMessages_GetMarketingMessage_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessage_Request.gid)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessage_Response

// optional .CMarketingMessageProto message = 1;
inline bool CMarketingMessages_GetMarketingMessage_Response::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CMarketingMessages_GetMarketingMessage_Response::has_message() const {
  return _internal_has_message();
}
inline void CMarketingMessages_GetMarketingMessage_Response::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMarketingMessageProto& CMarketingMessages_GetMarketingMessage_Response::_internal_message() const {
  const ::CMarketingMessageProto* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMarketingMessageProto&>(
      ::_CMarketingMessageProto_default_instance_);
}
inline const ::CMarketingMessageProto& CMarketingMessages_GetMarketingMessage_Response::message() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessage_Response.message)
  return _internal_message();
}
inline void CMarketingMessages_GetMarketingMessage_Response::unsafe_arena_set_allocated_message(
    ::CMarketingMessageProto* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_GetMarketingMessage_Response.message)
}
inline ::CMarketingMessageProto* CMarketingMessages_GetMarketingMessage_Response::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_GetMarketingMessage_Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_GetMarketingMessage_Response.message)
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_GetMarketingMessage_Response::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMarketingMessageProto>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CMarketingMessageProto* CMarketingMessages_GetMarketingMessage_Response::mutable_message() {
  ::CMarketingMessageProto* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessage_Response.message)
  return _msg;
}
inline void CMarketingMessages_GetMarketingMessage_Response::set_allocated_message(::CMarketingMessageProto* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMarketingMessageProto>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_GetMarketingMessage_Response.message)
}

// -------------------------------------------------------------------

// CMarketingMessages_CreateMarketingMessage_Request

// optional .CMarketingMessageProto message = 1;
inline bool CMarketingMessages_CreateMarketingMessage_Request::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CMarketingMessages_CreateMarketingMessage_Request::has_message() const {
  return _internal_has_message();
}
inline void CMarketingMessages_CreateMarketingMessage_Request::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMarketingMessageProto& CMarketingMessages_CreateMarketingMessage_Request::_internal_message() const {
  const ::CMarketingMessageProto* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMarketingMessageProto&>(
      ::_CMarketingMessageProto_default_instance_);
}
inline const ::CMarketingMessageProto& CMarketingMessages_CreateMarketingMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_CreateMarketingMessage_Request.message)
  return _internal_message();
}
inline void CMarketingMessages_CreateMarketingMessage_Request::unsafe_arena_set_allocated_message(
    ::CMarketingMessageProto* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_CreateMarketingMessage_Request.message)
}
inline ::CMarketingMessageProto* CMarketingMessages_CreateMarketingMessage_Request::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_CreateMarketingMessage_Request::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_CreateMarketingMessage_Request.message)
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_CreateMarketingMessage_Request::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMarketingMessageProto>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CMarketingMessageProto* CMarketingMessages_CreateMarketingMessage_Request::mutable_message() {
  ::CMarketingMessageProto* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_CreateMarketingMessage_Request.message)
  return _msg;
}
inline void CMarketingMessages_CreateMarketingMessage_Request::set_allocated_message(::CMarketingMessageProto* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMarketingMessageProto>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_CreateMarketingMessage_Request.message)
}

// optional bool from_json = 2 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
inline bool CMarketingMessages_CreateMarketingMessage_Request::_internal_has_from_json() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_CreateMarketingMessage_Request::has_from_json() const {
  return _internal_has_from_json();
}
inline void CMarketingMessages_CreateMarketingMessage_Request::clear_from_json() {
  from_json_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMarketingMessages_CreateMarketingMessage_Request::_internal_from_json() const {
  return from_json_;
}
inline bool CMarketingMessages_CreateMarketingMessage_Request::from_json() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_CreateMarketingMessage_Request.from_json)
  return _internal_from_json();
}
inline void CMarketingMessages_CreateMarketingMessage_Request::_internal_set_from_json(bool value) {
  _has_bits_[0] |= 0x00000002u;
  from_json_ = value;
}
inline void CMarketingMessages_CreateMarketingMessage_Request::set_from_json(bool value) {
  _internal_set_from_json(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_CreateMarketingMessage_Request.from_json)
}

// -------------------------------------------------------------------

// CMarketingMessages_CreateMarketingMessage_Response

// optional fixed64 gid = 1;
inline bool CMarketingMessages_CreateMarketingMessage_Response::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_CreateMarketingMessage_Response::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_CreateMarketingMessage_Response::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMarketingMessages_CreateMarketingMessage_Response::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_CreateMarketingMessage_Response::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_CreateMarketingMessage_Response.gid)
  return _internal_gid();
}
inline void CMarketingMessages_CreateMarketingMessage_Response::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_ = value;
}
inline void CMarketingMessages_CreateMarketingMessage_Response::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_CreateMarketingMessage_Response.gid)
}

// -------------------------------------------------------------------

// CMarketingMessages_UpdateMarketingMessage_Request

// optional fixed64 gid = 1;
inline bool CMarketingMessages_UpdateMarketingMessage_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_UpdateMarketingMessage_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMarketingMessages_UpdateMarketingMessage_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_UpdateMarketingMessage_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_UpdateMarketingMessage_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  gid_ = value;
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_UpdateMarketingMessage_Request.gid)
}

// optional .CMarketingMessageProto message = 2;
inline bool CMarketingMessages_UpdateMarketingMessage_Request::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool CMarketingMessages_UpdateMarketingMessage_Request::has_message() const {
  return _internal_has_message();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::clear_message() {
  if (message_ != nullptr) message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMarketingMessageProto& CMarketingMessages_UpdateMarketingMessage_Request::_internal_message() const {
  const ::CMarketingMessageProto* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMarketingMessageProto&>(
      ::_CMarketingMessageProto_default_instance_);
}
inline const ::CMarketingMessageProto& CMarketingMessages_UpdateMarketingMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_UpdateMarketingMessage_Request.message)
  return _internal_message();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::unsafe_arena_set_allocated_message(
    ::CMarketingMessageProto* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMarketingMessages_UpdateMarketingMessage_Request.message)
}
inline ::CMarketingMessageProto* CMarketingMessages_UpdateMarketingMessage_Request::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_UpdateMarketingMessage_Request::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_UpdateMarketingMessage_Request.message)
  _has_bits_[0] &= ~0x00000001u;
  ::CMarketingMessageProto* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::CMarketingMessageProto* CMarketingMessages_UpdateMarketingMessage_Request::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMarketingMessageProto>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::CMarketingMessageProto* CMarketingMessages_UpdateMarketingMessage_Request::mutable_message() {
  ::CMarketingMessageProto* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_UpdateMarketingMessage_Request.message)
  return _msg;
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::set_allocated_message(::CMarketingMessageProto* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMarketingMessageProto>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_UpdateMarketingMessage_Request.message)
}

// optional bool from_json = 3 [(.description) = "If set, then overwrite the template_vars and additional_restrictions keyvalues from json"];
inline bool CMarketingMessages_UpdateMarketingMessage_Request::_internal_has_from_json() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessages_UpdateMarketingMessage_Request::has_from_json() const {
  return _internal_has_from_json();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::clear_from_json() {
  from_json_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMarketingMessages_UpdateMarketingMessage_Request::_internal_from_json() const {
  return from_json_;
}
inline bool CMarketingMessages_UpdateMarketingMessage_Request::from_json() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_UpdateMarketingMessage_Request.from_json)
  return _internal_from_json();
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::_internal_set_from_json(bool value) {
  _has_bits_[0] |= 0x00000004u;
  from_json_ = value;
}
inline void CMarketingMessages_UpdateMarketingMessage_Request::set_from_json(bool value) {
  _internal_set_from_json(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_UpdateMarketingMessage_Request.from_json)
}

// -------------------------------------------------------------------

// CMarketingMessages_UpdateMarketingMessage_Response

// -------------------------------------------------------------------

// CMarketingMessages_DeleteMarketingMessage_Request

// optional fixed64 gid = 1;
inline bool CMarketingMessages_DeleteMarketingMessage_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_DeleteMarketingMessage_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_DeleteMarketingMessage_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMarketingMessages_DeleteMarketingMessage_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_DeleteMarketingMessage_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_DeleteMarketingMessage_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_DeleteMarketingMessage_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_ = value;
}
inline void CMarketingMessages_DeleteMarketingMessage_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_DeleteMarketingMessage_Request.gid)
}

// -------------------------------------------------------------------

// CMarketingMessages_DeleteMarketingMessage_Response

// -------------------------------------------------------------------

// CMarketingMessages_FindMarketingMessages_Request

// optional .EMarketingMessageLookupType lookup_type = 1 [default = k_EMarketingMessageLookupInvalid];
inline bool CMarketingMessages_FindMarketingMessages_Request::_internal_has_lookup_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessages_FindMarketingMessages_Request::has_lookup_type() const {
  return _internal_has_lookup_type();
}
inline void CMarketingMessages_FindMarketingMessages_Request::clear_lookup_type() {
  lookup_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMarketingMessageLookupType CMarketingMessages_FindMarketingMessages_Request::_internal_lookup_type() const {
  return static_cast< ::EMarketingMessageLookupType >(lookup_type_);
}
inline ::EMarketingMessageLookupType CMarketingMessages_FindMarketingMessages_Request::lookup_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Request.lookup_type)
  return _internal_lookup_type();
}
inline void CMarketingMessages_FindMarketingMessages_Request::_internal_set_lookup_type(::EMarketingMessageLookupType value) {
  assert(::EMarketingMessageLookupType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  lookup_type_ = value;
}
inline void CMarketingMessages_FindMarketingMessages_Request::set_lookup_type(::EMarketingMessageLookupType value) {
  _internal_set_lookup_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_FindMarketingMessages_Request.lookup_type)
}

// optional fixed64 gid = 2;
inline bool CMarketingMessages_FindMarketingMessages_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_FindMarketingMessages_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_FindMarketingMessages_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMarketingMessages_FindMarketingMessages_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_FindMarketingMessages_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_FindMarketingMessages_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  gid_ = value;
}
inline void CMarketingMessages_FindMarketingMessages_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_FindMarketingMessages_Request.gid)
}

// optional .EMarketingMessageType message_type = 3 [default = k_EMarketingMessageInvalid];
inline bool CMarketingMessages_FindMarketingMessages_Request::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMarketingMessages_FindMarketingMessages_Request::has_message_type() const {
  return _internal_has_message_type();
}
inline void CMarketingMessages_FindMarketingMessages_Request::clear_message_type() {
  message_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EMarketingMessageType CMarketingMessages_FindMarketingMessages_Request::_internal_message_type() const {
  return static_cast< ::EMarketingMessageType >(message_type_);
}
inline ::EMarketingMessageType CMarketingMessages_FindMarketingMessages_Request::message_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Request.message_type)
  return _internal_message_type();
}
inline void CMarketingMessages_FindMarketingMessages_Request::_internal_set_message_type(::EMarketingMessageType value) {
  assert(::EMarketingMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  message_type_ = value;
}
inline void CMarketingMessages_FindMarketingMessages_Request::set_message_type(::EMarketingMessageType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_FindMarketingMessages_Request.message_type)
}

// repeated fixed64 gidlist = 4;
inline int CMarketingMessages_FindMarketingMessages_Request::_internal_gidlist_size() const {
  return gidlist_.size();
}
inline int CMarketingMessages_FindMarketingMessages_Request::gidlist_size() const {
  return _internal_gidlist_size();
}
inline void CMarketingMessages_FindMarketingMessages_Request::clear_gidlist() {
  gidlist_.Clear();
}
inline uint64_t CMarketingMessages_FindMarketingMessages_Request::_internal_gidlist(int index) const {
  return gidlist_.Get(index);
}
inline uint64_t CMarketingMessages_FindMarketingMessages_Request::gidlist(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Request.gidlist)
  return _internal_gidlist(index);
}
inline void CMarketingMessages_FindMarketingMessages_Request::set_gidlist(int index, uint64_t value) {
  gidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_FindMarketingMessages_Request.gidlist)
}
inline void CMarketingMessages_FindMarketingMessages_Request::_internal_add_gidlist(uint64_t value) {
  gidlist_.Add(value);
}
inline void CMarketingMessages_FindMarketingMessages_Request::add_gidlist(uint64_t value) {
  _internal_add_gidlist(value);
  // @@protoc_insertion_point(field_add:CMarketingMessages_FindMarketingMessages_Request.gidlist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMarketingMessages_FindMarketingMessages_Request::_internal_gidlist() const {
  return gidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMarketingMessages_FindMarketingMessages_Request::gidlist() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_FindMarketingMessages_Request.gidlist)
  return _internal_gidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMarketingMessages_FindMarketingMessages_Request::_internal_mutable_gidlist() {
  return &gidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMarketingMessages_FindMarketingMessages_Request::mutable_gidlist() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_FindMarketingMessages_Request.gidlist)
  return _internal_mutable_gidlist();
}

// optional string title = 5;
inline bool CMarketingMessages_FindMarketingMessages_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_FindMarketingMessages_Request::has_title() const {
  return _internal_has_title();
}
inline void CMarketingMessages_FindMarketingMessages_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMarketingMessages_FindMarketingMessages_Request::title() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Request.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMarketingMessages_FindMarketingMessages_Request::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMarketingMessages_FindMarketingMessages_Request.title)
}
inline std::string* CMarketingMessages_FindMarketingMessages_Request::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_FindMarketingMessages_Request.title)
  return _s;
}
inline const std::string& CMarketingMessages_FindMarketingMessages_Request::_internal_title() const {
  return title_.Get();
}
inline void CMarketingMessages_FindMarketingMessages_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_FindMarketingMessages_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMarketingMessages_FindMarketingMessages_Request::release_title() {
  // @@protoc_insertion_point(field_release:CMarketingMessages_FindMarketingMessages_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMarketingMessages_FindMarketingMessages_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMarketingMessages_FindMarketingMessages_Request.title)
}

// -------------------------------------------------------------------

// CMarketingMessages_FindMarketingMessages_Response

// repeated .CMarketingMessageProto messages = 1;
inline int CMarketingMessages_FindMarketingMessages_Response::_internal_messages_size() const {
  return messages_.size();
}
inline int CMarketingMessages_FindMarketingMessages_Response::messages_size() const {
  return _internal_messages_size();
}
inline void CMarketingMessages_FindMarketingMessages_Response::clear_messages() {
  messages_.Clear();
}
inline ::CMarketingMessageProto* CMarketingMessages_FindMarketingMessages_Response::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_FindMarketingMessages_Response.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >*
CMarketingMessages_FindMarketingMessages_Response::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_FindMarketingMessages_Response.messages)
  return &messages_;
}
inline const ::CMarketingMessageProto& CMarketingMessages_FindMarketingMessages_Response::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CMarketingMessageProto& CMarketingMessages_FindMarketingMessages_Response::messages(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_FindMarketingMessages_Response.messages)
  return _internal_messages(index);
}
inline ::CMarketingMessageProto* CMarketingMessages_FindMarketingMessages_Response::_internal_add_messages() {
  return messages_.Add();
}
inline ::CMarketingMessageProto* CMarketingMessages_FindMarketingMessages_Response::add_messages() {
  ::CMarketingMessageProto* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:CMarketingMessages_FindMarketingMessages_Response.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageProto >&
CMarketingMessages_FindMarketingMessages_Response::messages() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_FindMarketingMessages_Response.messages)
  return messages_;
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessageViewerStats_Request

// optional fixed64 gid = 1;
inline bool CMarketingMessages_GetMarketingMessageViewerStats_Request::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessageViewerStats_Request::has_gid() const {
  return _internal_has_gid();
}
inline void CMarketingMessages_GetMarketingMessageViewerStats_Request::clear_gid() {
  gid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMarketingMessages_GetMarketingMessageViewerStats_Request::_internal_gid() const {
  return gid_;
}
inline uint64_t CMarketingMessages_GetMarketingMessageViewerStats_Request::gid() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessageViewerStats_Request.gid)
  return _internal_gid();
}
inline void CMarketingMessages_GetMarketingMessageViewerStats_Request::_internal_set_gid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_ = value;
}
inline void CMarketingMessages_GetMarketingMessageViewerStats_Request::set_gid(uint64_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessageViewerStats_Request.gid)
}

// -------------------------------------------------------------------

// CMarketingMessageHourlyStats

// optional uint32 rt_time_hour = 1;
inline bool CMarketingMessageHourlyStats::_internal_has_rt_time_hour() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessageHourlyStats::has_rt_time_hour() const {
  return _internal_has_rt_time_hour();
}
inline void CMarketingMessageHourlyStats::clear_rt_time_hour() {
  rt_time_hour_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMarketingMessageHourlyStats::_internal_rt_time_hour() const {
  return rt_time_hour_;
}
inline uint32_t CMarketingMessageHourlyStats::rt_time_hour() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageHourlyStats.rt_time_hour)
  return _internal_rt_time_hour();
}
inline void CMarketingMessageHourlyStats::_internal_set_rt_time_hour(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  rt_time_hour_ = value;
}
inline void CMarketingMessageHourlyStats::set_rt_time_hour(uint32_t value) {
  _internal_set_rt_time_hour(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageHourlyStats.rt_time_hour)
}

// optional uint32 seen_count = 2 [(.description) = "within the hour period"];
inline bool CMarketingMessageHourlyStats::_internal_has_seen_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessageHourlyStats::has_seen_count() const {
  return _internal_has_seen_count();
}
inline void CMarketingMessageHourlyStats::clear_seen_count() {
  seen_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMarketingMessageHourlyStats::_internal_seen_count() const {
  return seen_count_;
}
inline uint32_t CMarketingMessageHourlyStats::seen_count() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageHourlyStats.seen_count)
  return _internal_seen_count();
}
inline void CMarketingMessageHourlyStats::_internal_set_seen_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  seen_count_ = value;
}
inline void CMarketingMessageHourlyStats::set_seen_count(uint32_t value) {
  _internal_set_seen_count(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageHourlyStats.seen_count)
}

// optional .EMarketingMessageTemplateType template_type = 3 [default = k_EMarketingMessageTemplate_Unknown, (.description) = "Which template type was shown, usually just IMAGE"];
inline bool CMarketingMessageHourlyStats::_internal_has_template_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMarketingMessageHourlyStats::has_template_type() const {
  return _internal_has_template_type();
}
inline void CMarketingMessageHourlyStats::clear_template_type() {
  template_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMarketingMessageTemplateType CMarketingMessageHourlyStats::_internal_template_type() const {
  return static_cast< ::EMarketingMessageTemplateType >(template_type_);
}
inline ::EMarketingMessageTemplateType CMarketingMessageHourlyStats::template_type() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageHourlyStats.template_type)
  return _internal_template_type();
}
inline void CMarketingMessageHourlyStats::_internal_set_template_type(::EMarketingMessageTemplateType value) {
  assert(::EMarketingMessageTemplateType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  template_type_ = value;
}
inline void CMarketingMessageHourlyStats::set_template_type(::EMarketingMessageTemplateType value) {
  _internal_set_template_type(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageHourlyStats.template_type)
}

// optional uint32 display_index = 4 [(.description) = "Zero is invalid/we don\'t have information; 1 based index"];
inline bool CMarketingMessageHourlyStats::_internal_has_display_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMarketingMessageHourlyStats::has_display_index() const {
  return _internal_has_display_index();
}
inline void CMarketingMessageHourlyStats::clear_display_index() {
  display_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMarketingMessageHourlyStats::_internal_display_index() const {
  return display_index_;
}
inline uint32_t CMarketingMessageHourlyStats::display_index() const {
  // @@protoc_insertion_point(field_get:CMarketingMessageHourlyStats.display_index)
  return _internal_display_index();
}
inline void CMarketingMessageHourlyStats::_internal_set_display_index(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  display_index_ = value;
}
inline void CMarketingMessageHourlyStats::set_display_index(uint32_t value) {
  _internal_set_display_index(value);
  // @@protoc_insertion_point(field_set:CMarketingMessageHourlyStats.display_index)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessageViewerStats_Response

// repeated .CMarketingMessageHourlyStats stats = 1;
inline int CMarketingMessages_GetMarketingMessageViewerStats_Response::_internal_stats_size() const {
  return stats_.size();
}
inline int CMarketingMessages_GetMarketingMessageViewerStats_Response::stats_size() const {
  return _internal_stats_size();
}
inline void CMarketingMessages_GetMarketingMessageViewerStats_Response::clear_stats() {
  stats_.Clear();
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessageViewerStats_Response::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessageViewerStats_Response.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >*
CMarketingMessages_GetMarketingMessageViewerStats_Response::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_GetMarketingMessageViewerStats_Response.stats)
  return &stats_;
}
inline const ::CMarketingMessageHourlyStats& CMarketingMessages_GetMarketingMessageViewerStats_Response::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::CMarketingMessageHourlyStats& CMarketingMessages_GetMarketingMessageViewerStats_Response::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessageViewerStats_Response.stats)
  return _internal_stats(index);
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessageViewerStats_Response::_internal_add_stats() {
  return stats_.Add();
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessageViewerStats_Response::add_stats() {
  ::CMarketingMessageHourlyStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMarketingMessages_GetMarketingMessageViewerStats_Response.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >&
CMarketingMessages_GetMarketingMessageViewerStats_Response::stats() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_GetMarketingMessageViewerStats_Response.stats)
  return stats_;
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request

// optional uint32 rt_start_time = 1;
inline bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_has_rt_start_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::has_rt_start_time() const {
  return _internal_has_rt_start_time();
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::clear_rt_start_time() {
  rt_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_rt_start_time() const {
  return rt_start_time_;
}
inline uint32_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::rt_start_time() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request.rt_start_time)
  return _internal_rt_start_time();
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_set_rt_start_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  rt_start_time_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::set_rt_start_time(uint32_t value) {
  _internal_set_rt_start_time(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request.rt_start_time)
}

// optional uint32 rt_end_time = 2;
inline bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_has_rt_end_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::has_rt_end_time() const {
  return _internal_has_rt_end_time();
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::clear_rt_end_time() {
  rt_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_rt_end_time() const {
  return rt_end_time_;
}
inline uint32_t CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::rt_end_time() const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request.rt_end_time)
  return _internal_rt_end_time();
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::_internal_set_rt_end_time(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  rt_end_time_ = value;
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request::set_rt_end_time(uint32_t value) {
  _internal_set_rt_end_time(value);
  // @@protoc_insertion_point(field_set:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Request.rt_end_time)
}

// -------------------------------------------------------------------

// CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response

// repeated .CMarketingMessageHourlyStats stats = 1 [(.description) = "Flatterns results for the range of time"];
inline int CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_internal_stats_size() const {
  return stats_.size();
}
inline int CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::stats_size() const {
  return _internal_stats_size();
}
inline void CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::clear_stats() {
  stats_.Clear();
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >*
CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats)
  return &stats_;
}
inline const ::CMarketingMessageHourlyStats& CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::CMarketingMessageHourlyStats& CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats)
  return _internal_stats(index);
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::_internal_add_stats() {
  return stats_.Add();
}
inline ::CMarketingMessageHourlyStats* CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::add_stats() {
  ::CMarketingMessageHourlyStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMarketingMessageHourlyStats >&
CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response::stats() const {
  // @@protoc_insertion_point(field_list:CMarketingMessages_GetMarketingMessagesViewerRangeStats_Response.stats)
  return stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EMarketingMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMarketingMessageType>() {
  return ::EMarketingMessageType_descriptor();
}
template <> struct is_proto_enum< ::EMarketingMessageVisibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMarketingMessageVisibility>() {
  return ::EMarketingMessageVisibility_descriptor();
}
template <> struct is_proto_enum< ::EMarketingMessageAssociationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMarketingMessageAssociationType>() {
  return ::EMarketingMessageAssociationType_descriptor();
}
template <> struct is_proto_enum< ::EMarketingMessageTemplateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMarketingMessageTemplateType>() {
  return ::EMarketingMessageTemplateType_descriptor();
}
template <> struct is_proto_enum< ::EMarketingMessageLookupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMarketingMessageLookupType>() {
  return ::EMarketingMessageLookupType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fmarketingmessages_2esteamclient_2eproto
