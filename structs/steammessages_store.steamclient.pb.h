// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_store.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstore_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstore_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "contenthubs.pb.h"
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fstore_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fstore_2esteamclient_2eproto;
class CSteamDeckCompatibility_SetFeedback_Request;
struct CSteamDeckCompatibility_SetFeedback_RequestDefaultTypeInternal;
extern CSteamDeckCompatibility_SetFeedback_RequestDefaultTypeInternal _CSteamDeckCompatibility_SetFeedback_Request_default_instance_;
class CSteamDeckCompatibility_SetFeedback_Response;
struct CSteamDeckCompatibility_SetFeedback_ResponseDefaultTypeInternal;
extern CSteamDeckCompatibility_SetFeedback_ResponseDefaultTypeInternal _CSteamDeckCompatibility_SetFeedback_Response_default_instance_;
class CSteamDeckCompatibility_ShouldPrompt_Request;
struct CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal;
extern CSteamDeckCompatibility_ShouldPrompt_RequestDefaultTypeInternal _CSteamDeckCompatibility_ShouldPrompt_Request_default_instance_;
class CSteamDeckCompatibility_ShouldPrompt_Response;
struct CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal;
extern CSteamDeckCompatibility_ShouldPrompt_ResponseDefaultTypeInternal _CSteamDeckCompatibility_ShouldPrompt_Response_default_instance_;
class CStoreDiscoveryQueueSettings;
struct CStoreDiscoveryQueueSettingsDefaultTypeInternal;
extern CStoreDiscoveryQueueSettingsDefaultTypeInternal _CStoreDiscoveryQueueSettings_default_instance_;
class CStore_GetDiscoveryQueueSettings_Request;
struct CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal;
extern CStore_GetDiscoveryQueueSettings_RequestDefaultTypeInternal _CStore_GetDiscoveryQueueSettings_Request_default_instance_;
class CStore_GetDiscoveryQueueSettings_Response;
struct CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal;
extern CStore_GetDiscoveryQueueSettings_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueueSettings_Response_default_instance_;
class CStore_GetDiscoveryQueueSkippedApps_Request;
struct CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal;
extern CStore_GetDiscoveryQueueSkippedApps_RequestDefaultTypeInternal _CStore_GetDiscoveryQueueSkippedApps_Request_default_instance_;
class CStore_GetDiscoveryQueueSkippedApps_Response;
struct CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal;
extern CStore_GetDiscoveryQueueSkippedApps_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueueSkippedApps_Response_default_instance_;
class CStore_GetDiscoveryQueue_Request;
struct CStore_GetDiscoveryQueue_RequestDefaultTypeInternal;
extern CStore_GetDiscoveryQueue_RequestDefaultTypeInternal _CStore_GetDiscoveryQueue_Request_default_instance_;
class CStore_GetDiscoveryQueue_Response;
struct CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal;
extern CStore_GetDiscoveryQueue_ResponseDefaultTypeInternal _CStore_GetDiscoveryQueue_Response_default_instance_;
class CStore_GetLocalizedNameForTags_Request;
struct CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal;
extern CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal _CStore_GetLocalizedNameForTags_Request_default_instance_;
class CStore_GetLocalizedNameForTags_Response;
struct CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal;
extern CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal _CStore_GetLocalizedNameForTags_Response_default_instance_;
class CStore_GetLocalizedNameForTags_Response_Tag;
struct CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal;
extern CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal _CStore_GetLocalizedNameForTags_Response_Tag_default_instance_;
class CStore_GetMostPopularTags_Request;
struct CStore_GetMostPopularTags_RequestDefaultTypeInternal;
extern CStore_GetMostPopularTags_RequestDefaultTypeInternal _CStore_GetMostPopularTags_Request_default_instance_;
class CStore_GetMostPopularTags_Response;
struct CStore_GetMostPopularTags_ResponseDefaultTypeInternal;
extern CStore_GetMostPopularTags_ResponseDefaultTypeInternal _CStore_GetMostPopularTags_Response_default_instance_;
class CStore_GetMostPopularTags_Response_Tag;
struct CStore_GetMostPopularTags_Response_TagDefaultTypeInternal;
extern CStore_GetMostPopularTags_Response_TagDefaultTypeInternal _CStore_GetMostPopularTags_Response_Tag_default_instance_;
class CStore_GetStorePreferences_Request;
struct CStore_GetStorePreferences_RequestDefaultTypeInternal;
extern CStore_GetStorePreferences_RequestDefaultTypeInternal _CStore_GetStorePreferences_Request_default_instance_;
class CStore_GetStorePreferences_Response;
struct CStore_GetStorePreferences_ResponseDefaultTypeInternal;
extern CStore_GetStorePreferences_ResponseDefaultTypeInternal _CStore_GetStorePreferences_Response_default_instance_;
class CStore_GetTagList_Request;
struct CStore_GetTagList_RequestDefaultTypeInternal;
extern CStore_GetTagList_RequestDefaultTypeInternal _CStore_GetTagList_Request_default_instance_;
class CStore_GetTagList_Response;
struct CStore_GetTagList_ResponseDefaultTypeInternal;
extern CStore_GetTagList_ResponseDefaultTypeInternal _CStore_GetTagList_Response_default_instance_;
class CStore_GetTagList_Response_Tag;
struct CStore_GetTagList_Response_TagDefaultTypeInternal;
extern CStore_GetTagList_Response_TagDefaultTypeInternal _CStore_GetTagList_Response_Tag_default_instance_;
class CStore_GetTrendingAppsAmongFriends_Request;
struct CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal;
extern CStore_GetTrendingAppsAmongFriends_RequestDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Request_default_instance_;
class CStore_GetTrendingAppsAmongFriends_Response;
struct CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal;
extern CStore_GetTrendingAppsAmongFriends_ResponseDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Response_default_instance_;
class CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData;
struct CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal;
extern CStore_GetTrendingAppsAmongFriends_Response_TrendingAppDataDefaultTypeInternal _CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData_default_instance_;
class CStore_GetUserGameInterestState_Request;
struct CStore_GetUserGameInterestState_RequestDefaultTypeInternal;
extern CStore_GetUserGameInterestState_RequestDefaultTypeInternal _CStore_GetUserGameInterestState_Request_default_instance_;
class CStore_GetUserGameInterestState_Response;
struct CStore_GetUserGameInterestState_ResponseDefaultTypeInternal;
extern CStore_GetUserGameInterestState_ResponseDefaultTypeInternal _CStore_GetUserGameInterestState_Response_default_instance_;
class CStore_GetUserGameInterestState_Response_InQueue;
struct CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal;
extern CStore_GetUserGameInterestState_Response_InQueueDefaultTypeInternal _CStore_GetUserGameInterestState_Response_InQueue_default_instance_;
class CStore_PurchaseReceiptInfo;
struct CStore_PurchaseReceiptInfoDefaultTypeInternal;
extern CStore_PurchaseReceiptInfoDefaultTypeInternal _CStore_PurchaseReceiptInfo_default_instance_;
class CStore_PurchaseReceiptInfo_LineItem;
struct CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal;
extern CStore_PurchaseReceiptInfo_LineItemDefaultTypeInternal _CStore_PurchaseReceiptInfo_LineItem_default_instance_;
class CStore_RegisterCDKey_Request;
struct CStore_RegisterCDKey_RequestDefaultTypeInternal;
extern CStore_RegisterCDKey_RequestDefaultTypeInternal _CStore_RegisterCDKey_Request_default_instance_;
class CStore_RegisterCDKey_Response;
struct CStore_RegisterCDKey_ResponseDefaultTypeInternal;
extern CStore_RegisterCDKey_ResponseDefaultTypeInternal _CStore_RegisterCDKey_Response_default_instance_;
class CStore_SkipDiscoveryQueueItem_Request;
struct CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal;
extern CStore_SkipDiscoveryQueueItem_RequestDefaultTypeInternal _CStore_SkipDiscoveryQueueItem_Request_default_instance_;
class CStore_SkipDiscoveryQueueItem_Response;
struct CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal;
extern CStore_SkipDiscoveryQueueItem_ResponseDefaultTypeInternal _CStore_SkipDiscoveryQueueItem_Response_default_instance_;
class CStore_StorePreferencesChanged_Notification;
struct CStore_StorePreferencesChanged_NotificationDefaultTypeInternal;
extern CStore_StorePreferencesChanged_NotificationDefaultTypeInternal _CStore_StorePreferencesChanged_Notification_default_instance_;
class CStore_UserPreferences;
struct CStore_UserPreferencesDefaultTypeInternal;
extern CStore_UserPreferencesDefaultTypeInternal _CStore_UserPreferences_default_instance_;
class CStore_UserTagPreferences;
struct CStore_UserTagPreferencesDefaultTypeInternal;
extern CStore_UserTagPreferencesDefaultTypeInternal _CStore_UserTagPreferences_default_instance_;
class CStore_UserTagPreferences_Tag;
struct CStore_UserTagPreferences_TagDefaultTypeInternal;
extern CStore_UserTagPreferences_TagDefaultTypeInternal _CStore_UserTagPreferences_Tag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSteamDeckCompatibility_SetFeedback_Request* Arena::CreateMaybeMessage<::CSteamDeckCompatibility_SetFeedback_Request>(Arena*);
template<> ::CSteamDeckCompatibility_SetFeedback_Response* Arena::CreateMaybeMessage<::CSteamDeckCompatibility_SetFeedback_Response>(Arena*);
template<> ::CSteamDeckCompatibility_ShouldPrompt_Request* Arena::CreateMaybeMessage<::CSteamDeckCompatibility_ShouldPrompt_Request>(Arena*);
template<> ::CSteamDeckCompatibility_ShouldPrompt_Response* Arena::CreateMaybeMessage<::CSteamDeckCompatibility_ShouldPrompt_Response>(Arena*);
template<> ::CStoreDiscoveryQueueSettings* Arena::CreateMaybeMessage<::CStoreDiscoveryQueueSettings>(Arena*);
template<> ::CStore_GetDiscoveryQueueSettings_Request* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueueSettings_Request>(Arena*);
template<> ::CStore_GetDiscoveryQueueSettings_Response* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueueSettings_Response>(Arena*);
template<> ::CStore_GetDiscoveryQueueSkippedApps_Request* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueueSkippedApps_Request>(Arena*);
template<> ::CStore_GetDiscoveryQueueSkippedApps_Response* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueueSkippedApps_Response>(Arena*);
template<> ::CStore_GetDiscoveryQueue_Request* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueue_Request>(Arena*);
template<> ::CStore_GetDiscoveryQueue_Response* Arena::CreateMaybeMessage<::CStore_GetDiscoveryQueue_Response>(Arena*);
template<> ::CStore_GetLocalizedNameForTags_Request* Arena::CreateMaybeMessage<::CStore_GetLocalizedNameForTags_Request>(Arena*);
template<> ::CStore_GetLocalizedNameForTags_Response* Arena::CreateMaybeMessage<::CStore_GetLocalizedNameForTags_Response>(Arena*);
template<> ::CStore_GetLocalizedNameForTags_Response_Tag* Arena::CreateMaybeMessage<::CStore_GetLocalizedNameForTags_Response_Tag>(Arena*);
template<> ::CStore_GetMostPopularTags_Request* Arena::CreateMaybeMessage<::CStore_GetMostPopularTags_Request>(Arena*);
template<> ::CStore_GetMostPopularTags_Response* Arena::CreateMaybeMessage<::CStore_GetMostPopularTags_Response>(Arena*);
template<> ::CStore_GetMostPopularTags_Response_Tag* Arena::CreateMaybeMessage<::CStore_GetMostPopularTags_Response_Tag>(Arena*);
template<> ::CStore_GetStorePreferences_Request* Arena::CreateMaybeMessage<::CStore_GetStorePreferences_Request>(Arena*);
template<> ::CStore_GetStorePreferences_Response* Arena::CreateMaybeMessage<::CStore_GetStorePreferences_Response>(Arena*);
template<> ::CStore_GetTagList_Request* Arena::CreateMaybeMessage<::CStore_GetTagList_Request>(Arena*);
template<> ::CStore_GetTagList_Response* Arena::CreateMaybeMessage<::CStore_GetTagList_Response>(Arena*);
template<> ::CStore_GetTagList_Response_Tag* Arena::CreateMaybeMessage<::CStore_GetTagList_Response_Tag>(Arena*);
template<> ::CStore_GetTrendingAppsAmongFriends_Request* Arena::CreateMaybeMessage<::CStore_GetTrendingAppsAmongFriends_Request>(Arena*);
template<> ::CStore_GetTrendingAppsAmongFriends_Response* Arena::CreateMaybeMessage<::CStore_GetTrendingAppsAmongFriends_Response>(Arena*);
template<> ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* Arena::CreateMaybeMessage<::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData>(Arena*);
template<> ::CStore_GetUserGameInterestState_Request* Arena::CreateMaybeMessage<::CStore_GetUserGameInterestState_Request>(Arena*);
template<> ::CStore_GetUserGameInterestState_Response* Arena::CreateMaybeMessage<::CStore_GetUserGameInterestState_Response>(Arena*);
template<> ::CStore_GetUserGameInterestState_Response_InQueue* Arena::CreateMaybeMessage<::CStore_GetUserGameInterestState_Response_InQueue>(Arena*);
template<> ::CStore_PurchaseReceiptInfo* Arena::CreateMaybeMessage<::CStore_PurchaseReceiptInfo>(Arena*);
template<> ::CStore_PurchaseReceiptInfo_LineItem* Arena::CreateMaybeMessage<::CStore_PurchaseReceiptInfo_LineItem>(Arena*);
template<> ::CStore_RegisterCDKey_Request* Arena::CreateMaybeMessage<::CStore_RegisterCDKey_Request>(Arena*);
template<> ::CStore_RegisterCDKey_Response* Arena::CreateMaybeMessage<::CStore_RegisterCDKey_Response>(Arena*);
template<> ::CStore_SkipDiscoveryQueueItem_Request* Arena::CreateMaybeMessage<::CStore_SkipDiscoveryQueueItem_Request>(Arena*);
template<> ::CStore_SkipDiscoveryQueueItem_Response* Arena::CreateMaybeMessage<::CStore_SkipDiscoveryQueueItem_Response>(Arena*);
template<> ::CStore_StorePreferencesChanged_Notification* Arena::CreateMaybeMessage<::CStore_StorePreferencesChanged_Notification>(Arena*);
template<> ::CStore_UserPreferences* Arena::CreateMaybeMessage<::CStore_UserPreferences>(Arena*);
template<> ::CStore_UserTagPreferences* Arena::CreateMaybeMessage<::CStore_UserTagPreferences>(Arena*);
template<> ::CStore_UserTagPreferences_Tag* Arena::CreateMaybeMessage<::CStore_UserTagPreferences_Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EStoreDiscoveryQueueType : int {
  k_EStoreDiscoveryQueueTypeNew = 0,
  k_EStoreDiscoveryQueueTypeComingSoon = 1,
  k_EStoreDiscoveryQueueTypeRecommended = 2,
  k_EStoreDiscoveryQueueTypeEveryNewRelease = 3,
  k_EStoreDiscoveryQueueTypeMLRecommender = 5,
  k_EStoreDiscoveryQueueTypeWishlistOnSale = 6,
  k_EStoreDiscoveryQueueTypeDLC = 7,
  k_EStoreDiscoveryQueueTypeDLCOnSale = 8,
  k_EStoreDiscoveryQueueTypeRecommendedComingSoon = 9,
  k_EStoreDiscoveryQueueTypeRecommendedFree = 10,
  k_EStoreDiscoveryQueueTypeRecommendedOnSale = 11,
  k_EStoreDiscoveryQueueTypeRecommendedDemos = 12,
  k_EStoreDiscoveryQueueTypeDLCNewReleases = 13,
  k_EStoreDiscoveryQueueTypeDLCTopSellers = 14,
  k_EStoreDiscoveryQueueTypeMAX = 15
};
bool EStoreDiscoveryQueueType_IsValid(int value);
constexpr EStoreDiscoveryQueueType EStoreDiscoveryQueueType_MIN = k_EStoreDiscoveryQueueTypeNew;
constexpr EStoreDiscoveryQueueType EStoreDiscoveryQueueType_MAX = k_EStoreDiscoveryQueueTypeMAX;
constexpr int EStoreDiscoveryQueueType_ARRAYSIZE = EStoreDiscoveryQueueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStoreDiscoveryQueueType_descriptor();
template<typename T>
inline const std::string& EStoreDiscoveryQueueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EStoreDiscoveryQueueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EStoreDiscoveryQueueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EStoreDiscoveryQueueType_descriptor(), enum_t_value);
}
inline bool EStoreDiscoveryQueueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EStoreDiscoveryQueueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EStoreDiscoveryQueueType>(
    EStoreDiscoveryQueueType_descriptor(), name, value);
}
enum EPlaytestStatus : int {
  k_ETesterStatusNone = 0,
  k_ETesterStatusPending = 1,
  k_ETesterStatusInvited = 2,
  k_ETesterStatusGranted = 3
};
bool EPlaytestStatus_IsValid(int value);
constexpr EPlaytestStatus EPlaytestStatus_MIN = k_ETesterStatusNone;
constexpr EPlaytestStatus EPlaytestStatus_MAX = k_ETesterStatusGranted;
constexpr int EPlaytestStatus_ARRAYSIZE = EPlaytestStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlaytestStatus_descriptor();
template<typename T>
inline const std::string& EPlaytestStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlaytestStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlaytestStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlaytestStatus_descriptor(), enum_t_value);
}
inline bool EPlaytestStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlaytestStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlaytestStatus>(
    EPlaytestStatus_descriptor(), name, value);
}
enum EUserReviewScorePreference : int {
  k_EUserReviewScorePreference_Unset = 0,
  k_EUserReviewScorePreference_IncludeAll = 1,
  k_EUserReviewScorePreference_ExcludeBombs = 2
};
bool EUserReviewScorePreference_IsValid(int value);
constexpr EUserReviewScorePreference EUserReviewScorePreference_MIN = k_EUserReviewScorePreference_Unset;
constexpr EUserReviewScorePreference EUserReviewScorePreference_MAX = k_EUserReviewScorePreference_ExcludeBombs;
constexpr int EUserReviewScorePreference_ARRAYSIZE = EUserReviewScorePreference_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUserReviewScorePreference_descriptor();
template<typename T>
inline const std::string& EUserReviewScorePreference_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUserReviewScorePreference>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUserReviewScorePreference_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUserReviewScorePreference_descriptor(), enum_t_value);
}
inline bool EUserReviewScorePreference_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUserReviewScorePreference* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUserReviewScorePreference>(
    EUserReviewScorePreference_descriptor(), name, value);
}
// ===================================================================

class CStore_RegisterCDKey_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_RegisterCDKey_Request) */ {
 public:
  inline CStore_RegisterCDKey_Request() : CStore_RegisterCDKey_Request(nullptr) {}
  ~CStore_RegisterCDKey_Request() override;
  explicit constexpr CStore_RegisterCDKey_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_RegisterCDKey_Request(const CStore_RegisterCDKey_Request& from);
  CStore_RegisterCDKey_Request(CStore_RegisterCDKey_Request&& from) noexcept
    : CStore_RegisterCDKey_Request() {
    *this = ::std::move(from);
  }

  inline CStore_RegisterCDKey_Request& operator=(const CStore_RegisterCDKey_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_RegisterCDKey_Request& operator=(CStore_RegisterCDKey_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_RegisterCDKey_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_RegisterCDKey_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_RegisterCDKey_Request*>(
               &_CStore_RegisterCDKey_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CStore_RegisterCDKey_Request& a, CStore_RegisterCDKey_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_RegisterCDKey_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_RegisterCDKey_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_RegisterCDKey_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_RegisterCDKey_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_RegisterCDKey_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_RegisterCDKey_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_RegisterCDKey_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_RegisterCDKey_Request";
  }
  protected:
  explicit CStore_RegisterCDKey_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationCodeFieldNumber = 1,
    kPurchasePlatformFieldNumber = 2,
    kIsRequestFromClientFieldNumber = 3,
  };
  // optional string activation_code = 1 [(.description) = "Key string to register on the logged in user\'s account"];
  bool has_activation_code() const;
  private:
  bool _internal_has_activation_code() const;
  public:
  void clear_activation_code();
  const std::string& activation_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activation_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activation_code();
  PROTOBUF_NODISCARD std::string* release_activation_code();
  void set_allocated_activation_code(std::string* activation_code);
  private:
  const std::string& _internal_activation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activation_code(const std::string& value);
  std::string* _internal_mutable_activation_code();
  public:

  // optional int32 purchase_platform = 2 [(.description) = "EPurchasePlatform for platform of request"];
  bool has_purchase_platform() const;
  private:
  bool _internal_has_purchase_platform() const;
  public:
  void clear_purchase_platform();
  int32_t purchase_platform() const;
  void set_purchase_platform(int32_t value);
  private:
  int32_t _internal_purchase_platform() const;
  void _internal_set_purchase_platform(int32_t value);
  public:

  // optional bool is_request_from_client = 3 [(.description) = "True if the request was initiated from inside the Steam client"];
  bool has_is_request_from_client() const;
  private:
  bool _internal_has_is_request_from_client() const;
  public:
  void clear_is_request_from_client();
  bool is_request_from_client() const;
  void set_is_request_from_client(bool value);
  private:
  bool _internal_is_request_from_client() const;
  void _internal_set_is_request_from_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_RegisterCDKey_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_code_;
  int32_t purchase_platform_;
  bool is_request_from_client_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_PurchaseReceiptInfo_LineItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_PurchaseReceiptInfo.LineItem) */ {
 public:
  inline CStore_PurchaseReceiptInfo_LineItem() : CStore_PurchaseReceiptInfo_LineItem(nullptr) {}
  ~CStore_PurchaseReceiptInfo_LineItem() override;
  explicit constexpr CStore_PurchaseReceiptInfo_LineItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_PurchaseReceiptInfo_LineItem(const CStore_PurchaseReceiptInfo_LineItem& from);
  CStore_PurchaseReceiptInfo_LineItem(CStore_PurchaseReceiptInfo_LineItem&& from) noexcept
    : CStore_PurchaseReceiptInfo_LineItem() {
    *this = ::std::move(from);
  }

  inline CStore_PurchaseReceiptInfo_LineItem& operator=(const CStore_PurchaseReceiptInfo_LineItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_PurchaseReceiptInfo_LineItem& operator=(CStore_PurchaseReceiptInfo_LineItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_PurchaseReceiptInfo_LineItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_PurchaseReceiptInfo_LineItem* internal_default_instance() {
    return reinterpret_cast<const CStore_PurchaseReceiptInfo_LineItem*>(
               &_CStore_PurchaseReceiptInfo_LineItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CStore_PurchaseReceiptInfo_LineItem& a, CStore_PurchaseReceiptInfo_LineItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_PurchaseReceiptInfo_LineItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_PurchaseReceiptInfo_LineItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_PurchaseReceiptInfo_LineItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_PurchaseReceiptInfo_LineItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_PurchaseReceiptInfo_LineItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_PurchaseReceiptInfo_LineItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_PurchaseReceiptInfo_LineItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_PurchaseReceiptInfo.LineItem";
  }
  protected:
  explicit CStore_PurchaseReceiptInfo_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineItemDescriptionFieldNumber = 3,
    kPackageidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional string line_item_description = 3;
  bool has_line_item_description() const;
  private:
  bool _internal_has_line_item_description() const;
  public:
  void clear_line_item_description();
  const std::string& line_item_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line_item_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line_item_description();
  PROTOBUF_NODISCARD std::string* release_line_item_description();
  void set_allocated_line_item_description(std::string* line_item_description);
  private:
  const std::string& _internal_line_item_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line_item_description(const std::string& value);
  std::string* _internal_mutable_line_item_description();
  public:

  // optional uint32 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  uint32_t packageid() const;
  void set_packageid(uint32_t value);
  private:
  uint32_t _internal_packageid() const;
  void _internal_set_packageid(uint32_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_PurchaseReceiptInfo.LineItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_item_description_;
  uint32_t packageid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_PurchaseReceiptInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_PurchaseReceiptInfo) */ {
 public:
  inline CStore_PurchaseReceiptInfo() : CStore_PurchaseReceiptInfo(nullptr) {}
  ~CStore_PurchaseReceiptInfo() override;
  explicit constexpr CStore_PurchaseReceiptInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_PurchaseReceiptInfo(const CStore_PurchaseReceiptInfo& from);
  CStore_PurchaseReceiptInfo(CStore_PurchaseReceiptInfo&& from) noexcept
    : CStore_PurchaseReceiptInfo() {
    *this = ::std::move(from);
  }

  inline CStore_PurchaseReceiptInfo& operator=(const CStore_PurchaseReceiptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_PurchaseReceiptInfo& operator=(CStore_PurchaseReceiptInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_PurchaseReceiptInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_PurchaseReceiptInfo* internal_default_instance() {
    return reinterpret_cast<const CStore_PurchaseReceiptInfo*>(
               &_CStore_PurchaseReceiptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CStore_PurchaseReceiptInfo& a, CStore_PurchaseReceiptInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_PurchaseReceiptInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_PurchaseReceiptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_PurchaseReceiptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_PurchaseReceiptInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_PurchaseReceiptInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_PurchaseReceiptInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_PurchaseReceiptInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_PurchaseReceiptInfo";
  }
  protected:
  explicit CStore_PurchaseReceiptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_PurchaseReceiptInfo_LineItem LineItem;

  // accessors -------------------------------------------------------

  enum : int {
    kLineItemsFieldNumber = 18,
    kCountryCodeFieldNumber = 12,
    kErrorHeadlineFieldNumber = 13,
    kErrorStringFieldNumber = 14,
    kErrorLinkTextFieldNumber = 15,
    kErrorLinkUrlFieldNumber = 16,
    kTransactionidFieldNumber = 1,
    kPackageidFieldNumber = 2,
    kPurchaseStatusFieldNumber = 3,
    kResultDetailFieldNumber = 4,
    kTransactionTimeFieldNumber = 5,
    kBasePriceFieldNumber = 7,
    kTotalDiscountFieldNumber = 8,
    kPaymentMethodFieldNumber = 6,
    kCurrencyCodeFieldNumber = 11,
    kTaxFieldNumber = 9,
    kShippingFieldNumber = 10,
    kErrorAppidFieldNumber = 17,
  };
  // repeated .CStore_PurchaseReceiptInfo.LineItem line_items = 18;
  int line_items_size() const;
  private:
  int _internal_line_items_size() const;
  public:
  void clear_line_items();
  ::CStore_PurchaseReceiptInfo_LineItem* mutable_line_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_PurchaseReceiptInfo_LineItem >*
      mutable_line_items();
  private:
  const ::CStore_PurchaseReceiptInfo_LineItem& _internal_line_items(int index) const;
  ::CStore_PurchaseReceiptInfo_LineItem* _internal_add_line_items();
  public:
  const ::CStore_PurchaseReceiptInfo_LineItem& line_items(int index) const;
  ::CStore_PurchaseReceiptInfo_LineItem* add_line_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_PurchaseReceiptInfo_LineItem >&
      line_items() const;

  // optional string country_code = 12;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string error_headline = 13;
  bool has_error_headline() const;
  private:
  bool _internal_has_error_headline() const;
  public:
  void clear_error_headline();
  const std::string& error_headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_headline();
  PROTOBUF_NODISCARD std::string* release_error_headline();
  void set_allocated_error_headline(std::string* error_headline);
  private:
  const std::string& _internal_error_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_headline(const std::string& value);
  std::string* _internal_mutable_error_headline();
  public:

  // optional string error_string = 14;
  bool has_error_string() const;
  private:
  bool _internal_has_error_string() const;
  public:
  void clear_error_string();
  const std::string& error_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_string();
  PROTOBUF_NODISCARD std::string* release_error_string();
  void set_allocated_error_string(std::string* error_string);
  private:
  const std::string& _internal_error_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_string(const std::string& value);
  std::string* _internal_mutable_error_string();
  public:

  // optional string error_link_text = 15;
  bool has_error_link_text() const;
  private:
  bool _internal_has_error_link_text() const;
  public:
  void clear_error_link_text();
  const std::string& error_link_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_link_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_link_text();
  PROTOBUF_NODISCARD std::string* release_error_link_text();
  void set_allocated_error_link_text(std::string* error_link_text);
  private:
  const std::string& _internal_error_link_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_link_text(const std::string& value);
  std::string* _internal_mutable_error_link_text();
  public:

  // optional string error_link_url = 16;
  bool has_error_link_url() const;
  private:
  bool _internal_has_error_link_url() const;
  public:
  void clear_error_link_url();
  const std::string& error_link_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_link_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_link_url();
  PROTOBUF_NODISCARD std::string* release_error_link_url();
  void set_allocated_error_link_url(std::string* error_link_url);
  private:
  const std::string& _internal_error_link_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_link_url(const std::string& value);
  std::string* _internal_mutable_error_link_url();
  public:

  // optional uint64 transactionid = 1;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  uint64_t transactionid() const;
  void set_transactionid(uint64_t value);
  private:
  uint64_t _internal_transactionid() const;
  void _internal_set_transactionid(uint64_t value);
  public:

  // optional uint32 packageid = 2;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  uint32_t packageid() const;
  void set_packageid(uint32_t value);
  private:
  uint32_t _internal_packageid() const;
  void _internal_set_packageid(uint32_t value);
  public:

  // optional uint32 purchase_status = 3;
  bool has_purchase_status() const;
  private:
  bool _internal_has_purchase_status() const;
  public:
  void clear_purchase_status();
  uint32_t purchase_status() const;
  void set_purchase_status(uint32_t value);
  private:
  uint32_t _internal_purchase_status() const;
  void _internal_set_purchase_status(uint32_t value);
  public:

  // optional uint32 result_detail = 4;
  bool has_result_detail() const;
  private:
  bool _internal_has_result_detail() const;
  public:
  void clear_result_detail();
  uint32_t result_detail() const;
  void set_result_detail(uint32_t value);
  private:
  uint32_t _internal_result_detail() const;
  void _internal_set_result_detail(uint32_t value);
  public:

  // optional uint32 transaction_time = 5;
  bool has_transaction_time() const;
  private:
  bool _internal_has_transaction_time() const;
  public:
  void clear_transaction_time();
  uint32_t transaction_time() const;
  void set_transaction_time(uint32_t value);
  private:
  uint32_t _internal_transaction_time() const;
  void _internal_set_transaction_time(uint32_t value);
  public:

  // optional uint64 base_price = 7;
  bool has_base_price() const;
  private:
  bool _internal_has_base_price() const;
  public:
  void clear_base_price();
  uint64_t base_price() const;
  void set_base_price(uint64_t value);
  private:
  uint64_t _internal_base_price() const;
  void _internal_set_base_price(uint64_t value);
  public:

  // optional uint64 total_discount = 8;
  bool has_total_discount() const;
  private:
  bool _internal_has_total_discount() const;
  public:
  void clear_total_discount();
  uint64_t total_discount() const;
  void set_total_discount(uint64_t value);
  private:
  uint64_t _internal_total_discount() const;
  void _internal_set_total_discount(uint64_t value);
  public:

  // optional uint32 payment_method = 6;
  bool has_payment_method() const;
  private:
  bool _internal_has_payment_method() const;
  public:
  void clear_payment_method();
  uint32_t payment_method() const;
  void set_payment_method(uint32_t value);
  private:
  uint32_t _internal_payment_method() const;
  void _internal_set_payment_method(uint32_t value);
  public:

  // optional uint32 currency_code = 11;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  uint32_t currency_code() const;
  void set_currency_code(uint32_t value);
  private:
  uint32_t _internal_currency_code() const;
  void _internal_set_currency_code(uint32_t value);
  public:

  // optional uint64 tax = 9;
  bool has_tax() const;
  private:
  bool _internal_has_tax() const;
  public:
  void clear_tax();
  uint64_t tax() const;
  void set_tax(uint64_t value);
  private:
  uint64_t _internal_tax() const;
  void _internal_set_tax(uint64_t value);
  public:

  // optional uint64 shipping = 10;
  bool has_shipping() const;
  private:
  bool _internal_has_shipping() const;
  public:
  void clear_shipping();
  uint64_t shipping() const;
  void set_shipping(uint64_t value);
  private:
  uint64_t _internal_shipping() const;
  void _internal_set_shipping(uint64_t value);
  public:

  // optional uint32 error_appid = 17;
  bool has_error_appid() const;
  private:
  bool _internal_has_error_appid() const;
  public:
  void clear_error_appid();
  uint32_t error_appid() const;
  void set_error_appid(uint32_t value);
  private:
  uint32_t _internal_error_appid() const;
  void _internal_set_error_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_PurchaseReceiptInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_PurchaseReceiptInfo_LineItem > line_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_link_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_link_url_;
  uint64_t transactionid_;
  uint32_t packageid_;
  uint32_t purchase_status_;
  uint32_t result_detail_;
  uint32_t transaction_time_;
  uint64_t base_price_;
  uint64_t total_discount_;
  uint32_t payment_method_;
  uint32_t currency_code_;
  uint64_t tax_;
  uint64_t shipping_;
  uint32_t error_appid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_RegisterCDKey_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_RegisterCDKey_Response) */ {
 public:
  inline CStore_RegisterCDKey_Response() : CStore_RegisterCDKey_Response(nullptr) {}
  ~CStore_RegisterCDKey_Response() override;
  explicit constexpr CStore_RegisterCDKey_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_RegisterCDKey_Response(const CStore_RegisterCDKey_Response& from);
  CStore_RegisterCDKey_Response(CStore_RegisterCDKey_Response&& from) noexcept
    : CStore_RegisterCDKey_Response() {
    *this = ::std::move(from);
  }

  inline CStore_RegisterCDKey_Response& operator=(const CStore_RegisterCDKey_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_RegisterCDKey_Response& operator=(CStore_RegisterCDKey_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_RegisterCDKey_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_RegisterCDKey_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_RegisterCDKey_Response*>(
               &_CStore_RegisterCDKey_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CStore_RegisterCDKey_Response& a, CStore_RegisterCDKey_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_RegisterCDKey_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_RegisterCDKey_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_RegisterCDKey_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_RegisterCDKey_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_RegisterCDKey_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_RegisterCDKey_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_RegisterCDKey_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_RegisterCDKey_Response";
  }
  protected:
  explicit CStore_RegisterCDKey_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchaseReceiptInfoFieldNumber = 2,
    kPurchaseResultDetailsFieldNumber = 1,
  };
  // optional .CStore_PurchaseReceiptInfo purchase_receipt_info = 2 [(.description) = "Purchase receipt info"];
  bool has_purchase_receipt_info() const;
  private:
  bool _internal_has_purchase_receipt_info() const;
  public:
  void clear_purchase_receipt_info();
  const ::CStore_PurchaseReceiptInfo& purchase_receipt_info() const;
  PROTOBUF_NODISCARD ::CStore_PurchaseReceiptInfo* release_purchase_receipt_info();
  ::CStore_PurchaseReceiptInfo* mutable_purchase_receipt_info();
  void set_allocated_purchase_receipt_info(::CStore_PurchaseReceiptInfo* purchase_receipt_info);
  private:
  const ::CStore_PurchaseReceiptInfo& _internal_purchase_receipt_info() const;
  ::CStore_PurchaseReceiptInfo* _internal_mutable_purchase_receipt_info();
  public:
  void unsafe_arena_set_allocated_purchase_receipt_info(
      ::CStore_PurchaseReceiptInfo* purchase_receipt_info);
  ::CStore_PurchaseReceiptInfo* unsafe_arena_release_purchase_receipt_info();

  // optional int32 purchase_result_details = 1 [(.description) = "EPurchaseResultDetails from key activation"];
  bool has_purchase_result_details() const;
  private:
  bool _internal_has_purchase_result_details() const;
  public:
  void clear_purchase_result_details();
  int32_t purchase_result_details() const;
  void set_purchase_result_details(int32_t value);
  private:
  int32_t _internal_purchase_result_details() const;
  void _internal_set_purchase_result_details(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_RegisterCDKey_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStore_PurchaseReceiptInfo* purchase_receipt_info_;
  int32_t purchase_result_details_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetMostPopularTags_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetMostPopularTags_Request) */ {
 public:
  inline CStore_GetMostPopularTags_Request() : CStore_GetMostPopularTags_Request(nullptr) {}
  ~CStore_GetMostPopularTags_Request() override;
  explicit constexpr CStore_GetMostPopularTags_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetMostPopularTags_Request(const CStore_GetMostPopularTags_Request& from);
  CStore_GetMostPopularTags_Request(CStore_GetMostPopularTags_Request&& from) noexcept
    : CStore_GetMostPopularTags_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetMostPopularTags_Request& operator=(const CStore_GetMostPopularTags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetMostPopularTags_Request& operator=(CStore_GetMostPopularTags_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetMostPopularTags_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetMostPopularTags_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetMostPopularTags_Request*>(
               &_CStore_GetMostPopularTags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CStore_GetMostPopularTags_Request& a, CStore_GetMostPopularTags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetMostPopularTags_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetMostPopularTags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetMostPopularTags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetMostPopularTags_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetMostPopularTags_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetMostPopularTags_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetMostPopularTags_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetMostPopularTags_Request";
  }
  protected:
  explicit CStore_GetMostPopularTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetMostPopularTags_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetMostPopularTags_Response_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetMostPopularTags_Response.Tag) */ {
 public:
  inline CStore_GetMostPopularTags_Response_Tag() : CStore_GetMostPopularTags_Response_Tag(nullptr) {}
  ~CStore_GetMostPopularTags_Response_Tag() override;
  explicit constexpr CStore_GetMostPopularTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetMostPopularTags_Response_Tag(const CStore_GetMostPopularTags_Response_Tag& from);
  CStore_GetMostPopularTags_Response_Tag(CStore_GetMostPopularTags_Response_Tag&& from) noexcept
    : CStore_GetMostPopularTags_Response_Tag() {
    *this = ::std::move(from);
  }

  inline CStore_GetMostPopularTags_Response_Tag& operator=(const CStore_GetMostPopularTags_Response_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetMostPopularTags_Response_Tag& operator=(CStore_GetMostPopularTags_Response_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetMostPopularTags_Response_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetMostPopularTags_Response_Tag* internal_default_instance() {
    return reinterpret_cast<const CStore_GetMostPopularTags_Response_Tag*>(
               &_CStore_GetMostPopularTags_Response_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CStore_GetMostPopularTags_Response_Tag& a, CStore_GetMostPopularTags_Response_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetMostPopularTags_Response_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetMostPopularTags_Response_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetMostPopularTags_Response_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetMostPopularTags_Response_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetMostPopularTags_Response_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetMostPopularTags_Response_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetMostPopularTags_Response_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetMostPopularTags_Response.Tag";
  }
  protected:
  explicit CStore_GetMostPopularTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTagidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 tagid = 1;
  bool has_tagid() const;
  private:
  bool _internal_has_tagid() const;
  public:
  void clear_tagid();
  uint32_t tagid() const;
  void set_tagid(uint32_t value);
  private:
  uint32_t _internal_tagid() const;
  void _internal_set_tagid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetMostPopularTags_Response.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t tagid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetMostPopularTags_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetMostPopularTags_Response) */ {
 public:
  inline CStore_GetMostPopularTags_Response() : CStore_GetMostPopularTags_Response(nullptr) {}
  ~CStore_GetMostPopularTags_Response() override;
  explicit constexpr CStore_GetMostPopularTags_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetMostPopularTags_Response(const CStore_GetMostPopularTags_Response& from);
  CStore_GetMostPopularTags_Response(CStore_GetMostPopularTags_Response&& from) noexcept
    : CStore_GetMostPopularTags_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetMostPopularTags_Response& operator=(const CStore_GetMostPopularTags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetMostPopularTags_Response& operator=(CStore_GetMostPopularTags_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetMostPopularTags_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetMostPopularTags_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetMostPopularTags_Response*>(
               &_CStore_GetMostPopularTags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CStore_GetMostPopularTags_Response& a, CStore_GetMostPopularTags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetMostPopularTags_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetMostPopularTags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetMostPopularTags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetMostPopularTags_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetMostPopularTags_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetMostPopularTags_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetMostPopularTags_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetMostPopularTags_Response";
  }
  protected:
  explicit CStore_GetMostPopularTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_GetMostPopularTags_Response_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated .CStore_GetMostPopularTags_Response.Tag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CStore_GetMostPopularTags_Response_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetMostPopularTags_Response_Tag >*
      mutable_tags();
  private:
  const ::CStore_GetMostPopularTags_Response_Tag& _internal_tags(int index) const;
  ::CStore_GetMostPopularTags_Response_Tag* _internal_add_tags();
  public:
  const ::CStore_GetMostPopularTags_Response_Tag& tags(int index) const;
  ::CStore_GetMostPopularTags_Response_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetMostPopularTags_Response_Tag >&
      tags() const;

  // @@protoc_insertion_point(class_scope:CStore_GetMostPopularTags_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetMostPopularTags_Response_Tag > tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetLocalizedNameForTags_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetLocalizedNameForTags_Request) */ {
 public:
  inline CStore_GetLocalizedNameForTags_Request() : CStore_GetLocalizedNameForTags_Request(nullptr) {}
  ~CStore_GetLocalizedNameForTags_Request() override;
  explicit constexpr CStore_GetLocalizedNameForTags_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetLocalizedNameForTags_Request(const CStore_GetLocalizedNameForTags_Request& from);
  CStore_GetLocalizedNameForTags_Request(CStore_GetLocalizedNameForTags_Request&& from) noexcept
    : CStore_GetLocalizedNameForTags_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetLocalizedNameForTags_Request& operator=(const CStore_GetLocalizedNameForTags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetLocalizedNameForTags_Request& operator=(CStore_GetLocalizedNameForTags_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetLocalizedNameForTags_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetLocalizedNameForTags_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetLocalizedNameForTags_Request*>(
               &_CStore_GetLocalizedNameForTags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CStore_GetLocalizedNameForTags_Request& a, CStore_GetLocalizedNameForTags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetLocalizedNameForTags_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetLocalizedNameForTags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetLocalizedNameForTags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetLocalizedNameForTags_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetLocalizedNameForTags_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetLocalizedNameForTags_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetLocalizedNameForTags_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetLocalizedNameForTags_Request";
  }
  protected:
  explicit CStore_GetLocalizedNameForTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagidsFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // repeated uint32 tagids = 2;
  int tagids_size() const;
  private:
  int _internal_tagids_size() const;
  public:
  void clear_tagids();
  private:
  uint32_t _internal_tagids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tagids() const;
  void _internal_add_tagids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tagids();
  public:
  uint32_t tagids(int index) const;
  void set_tagids(int index, uint32_t value);
  void add_tagids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tagids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tagids();

  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetLocalizedNameForTags_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tagids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetLocalizedNameForTags_Response_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetLocalizedNameForTags_Response.Tag) */ {
 public:
  inline CStore_GetLocalizedNameForTags_Response_Tag() : CStore_GetLocalizedNameForTags_Response_Tag(nullptr) {}
  ~CStore_GetLocalizedNameForTags_Response_Tag() override;
  explicit constexpr CStore_GetLocalizedNameForTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetLocalizedNameForTags_Response_Tag(const CStore_GetLocalizedNameForTags_Response_Tag& from);
  CStore_GetLocalizedNameForTags_Response_Tag(CStore_GetLocalizedNameForTags_Response_Tag&& from) noexcept
    : CStore_GetLocalizedNameForTags_Response_Tag() {
    *this = ::std::move(from);
  }

  inline CStore_GetLocalizedNameForTags_Response_Tag& operator=(const CStore_GetLocalizedNameForTags_Response_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetLocalizedNameForTags_Response_Tag& operator=(CStore_GetLocalizedNameForTags_Response_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetLocalizedNameForTags_Response_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetLocalizedNameForTags_Response_Tag* internal_default_instance() {
    return reinterpret_cast<const CStore_GetLocalizedNameForTags_Response_Tag*>(
               &_CStore_GetLocalizedNameForTags_Response_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CStore_GetLocalizedNameForTags_Response_Tag& a, CStore_GetLocalizedNameForTags_Response_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetLocalizedNameForTags_Response_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetLocalizedNameForTags_Response_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetLocalizedNameForTags_Response_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetLocalizedNameForTags_Response_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetLocalizedNameForTags_Response_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetLocalizedNameForTags_Response.Tag";
  }
  protected:
  explicit CStore_GetLocalizedNameForTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnglishNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kNormalizedNameFieldNumber = 4,
    kTagidFieldNumber = 1,
  };
  // optional string english_name = 2;
  bool has_english_name() const;
  private:
  bool _internal_has_english_name() const;
  public:
  void clear_english_name();
  const std::string& english_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_english_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_english_name();
  PROTOBUF_NODISCARD std::string* release_english_name();
  void set_allocated_english_name(std::string* english_name);
  private:
  const std::string& _internal_english_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_english_name(const std::string& value);
  std::string* _internal_mutable_english_name();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string normalized_name = 4 [(.description) = "english_name, lowercase, with homoglyphs replaced and spaces and some punctuation removed."];
  bool has_normalized_name() const;
  private:
  bool _internal_has_normalized_name() const;
  public:
  void clear_normalized_name();
  const std::string& normalized_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_normalized_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_normalized_name();
  PROTOBUF_NODISCARD std::string* release_normalized_name();
  void set_allocated_normalized_name(std::string* normalized_name);
  private:
  const std::string& _internal_normalized_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_normalized_name(const std::string& value);
  std::string* _internal_mutable_normalized_name();
  public:

  // optional uint32 tagid = 1;
  bool has_tagid() const;
  private:
  bool _internal_has_tagid() const;
  public:
  void clear_tagid();
  uint32_t tagid() const;
  void set_tagid(uint32_t value);
  private:
  uint32_t _internal_tagid() const;
  void _internal_set_tagid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetLocalizedNameForTags_Response.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr english_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normalized_name_;
  uint32_t tagid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetLocalizedNameForTags_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetLocalizedNameForTags_Response) */ {
 public:
  inline CStore_GetLocalizedNameForTags_Response() : CStore_GetLocalizedNameForTags_Response(nullptr) {}
  ~CStore_GetLocalizedNameForTags_Response() override;
  explicit constexpr CStore_GetLocalizedNameForTags_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetLocalizedNameForTags_Response(const CStore_GetLocalizedNameForTags_Response& from);
  CStore_GetLocalizedNameForTags_Response(CStore_GetLocalizedNameForTags_Response&& from) noexcept
    : CStore_GetLocalizedNameForTags_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetLocalizedNameForTags_Response& operator=(const CStore_GetLocalizedNameForTags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetLocalizedNameForTags_Response& operator=(CStore_GetLocalizedNameForTags_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetLocalizedNameForTags_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetLocalizedNameForTags_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetLocalizedNameForTags_Response*>(
               &_CStore_GetLocalizedNameForTags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CStore_GetLocalizedNameForTags_Response& a, CStore_GetLocalizedNameForTags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetLocalizedNameForTags_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetLocalizedNameForTags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetLocalizedNameForTags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetLocalizedNameForTags_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetLocalizedNameForTags_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetLocalizedNameForTags_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetLocalizedNameForTags_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetLocalizedNameForTags_Response";
  }
  protected:
  explicit CStore_GetLocalizedNameForTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_GetLocalizedNameForTags_Response_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated .CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CStore_GetLocalizedNameForTags_Response_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetLocalizedNameForTags_Response_Tag >*
      mutable_tags();
  private:
  const ::CStore_GetLocalizedNameForTags_Response_Tag& _internal_tags(int index) const;
  ::CStore_GetLocalizedNameForTags_Response_Tag* _internal_add_tags();
  public:
  const ::CStore_GetLocalizedNameForTags_Response_Tag& tags(int index) const;
  ::CStore_GetLocalizedNameForTags_Response_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetLocalizedNameForTags_Response_Tag >&
      tags() const;

  // @@protoc_insertion_point(class_scope:CStore_GetLocalizedNameForTags_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetLocalizedNameForTags_Response_Tag > tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTagList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTagList_Request) */ {
 public:
  inline CStore_GetTagList_Request() : CStore_GetTagList_Request(nullptr) {}
  ~CStore_GetTagList_Request() override;
  explicit constexpr CStore_GetTagList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTagList_Request(const CStore_GetTagList_Request& from);
  CStore_GetTagList_Request(CStore_GetTagList_Request&& from) noexcept
    : CStore_GetTagList_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetTagList_Request& operator=(const CStore_GetTagList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTagList_Request& operator=(CStore_GetTagList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTagList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTagList_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTagList_Request*>(
               &_CStore_GetTagList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CStore_GetTagList_Request& a, CStore_GetTagList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTagList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTagList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTagList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTagList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTagList_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTagList_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTagList_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTagList_Request";
  }
  protected:
  explicit CStore_GetTagList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kHaveVersionHashFieldNumber = 2,
  };
  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // optional string have_version_hash = 2 [(.description) = "The hash returned in the last call.  Will return no results if the list hasn\'t changed."];
  bool has_have_version_hash() const;
  private:
  bool _internal_has_have_version_hash() const;
  public:
  void clear_have_version_hash();
  const std::string& have_version_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_have_version_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_have_version_hash();
  PROTOBUF_NODISCARD std::string* release_have_version_hash();
  void set_allocated_have_version_hash(std::string* have_version_hash);
  private:
  const std::string& _internal_have_version_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_have_version_hash(const std::string& value);
  std::string* _internal_mutable_have_version_hash();
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetTagList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr have_version_hash_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTagList_Response_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTagList_Response.Tag) */ {
 public:
  inline CStore_GetTagList_Response_Tag() : CStore_GetTagList_Response_Tag(nullptr) {}
  ~CStore_GetTagList_Response_Tag() override;
  explicit constexpr CStore_GetTagList_Response_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTagList_Response_Tag(const CStore_GetTagList_Response_Tag& from);
  CStore_GetTagList_Response_Tag(CStore_GetTagList_Response_Tag&& from) noexcept
    : CStore_GetTagList_Response_Tag() {
    *this = ::std::move(from);
  }

  inline CStore_GetTagList_Response_Tag& operator=(const CStore_GetTagList_Response_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTagList_Response_Tag& operator=(CStore_GetTagList_Response_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTagList_Response_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTagList_Response_Tag* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTagList_Response_Tag*>(
               &_CStore_GetTagList_Response_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CStore_GetTagList_Response_Tag& a, CStore_GetTagList_Response_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTagList_Response_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTagList_Response_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTagList_Response_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTagList_Response_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTagList_Response_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTagList_Response_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTagList_Response_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTagList_Response.Tag";
  }
  protected:
  explicit CStore_GetTagList_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTagidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 tagid = 1;
  bool has_tagid() const;
  private:
  bool _internal_has_tagid() const;
  public:
  void clear_tagid();
  uint32_t tagid() const;
  void set_tagid(uint32_t value);
  private:
  uint32_t _internal_tagid() const;
  void _internal_set_tagid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetTagList_Response.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t tagid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTagList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTagList_Response) */ {
 public:
  inline CStore_GetTagList_Response() : CStore_GetTagList_Response(nullptr) {}
  ~CStore_GetTagList_Response() override;
  explicit constexpr CStore_GetTagList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTagList_Response(const CStore_GetTagList_Response& from);
  CStore_GetTagList_Response(CStore_GetTagList_Response&& from) noexcept
    : CStore_GetTagList_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetTagList_Response& operator=(const CStore_GetTagList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTagList_Response& operator=(CStore_GetTagList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTagList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTagList_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTagList_Response*>(
               &_CStore_GetTagList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CStore_GetTagList_Response& a, CStore_GetTagList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTagList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTagList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTagList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTagList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTagList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTagList_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTagList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTagList_Response";
  }
  protected:
  explicit CStore_GetTagList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_GetTagList_Response_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kVersionHashFieldNumber = 1,
  };
  // repeated .CStore_GetTagList_Response.Tag tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::CStore_GetTagList_Response_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTagList_Response_Tag >*
      mutable_tags();
  private:
  const ::CStore_GetTagList_Response_Tag& _internal_tags(int index) const;
  ::CStore_GetTagList_Response_Tag* _internal_add_tags();
  public:
  const ::CStore_GetTagList_Response_Tag& tags(int index) const;
  ::CStore_GetTagList_Response_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTagList_Response_Tag >&
      tags() const;

  // optional string version_hash = 1 [(.description) = "Pass in future calls, server will only return data if it has changed (hash is per-language)."];
  bool has_version_hash() const;
  private:
  bool _internal_has_version_hash() const;
  public:
  void clear_version_hash();
  const std::string& version_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_hash();
  PROTOBUF_NODISCARD std::string* release_version_hash();
  void set_allocated_version_hash(std::string* version_hash);
  private:
  const std::string& _internal_version_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_hash(const std::string& value);
  std::string* _internal_mutable_version_hash();
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetTagList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTagList_Response_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_hash_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStoreDiscoveryQueueSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStoreDiscoveryQueueSettings) */ {
 public:
  inline CStoreDiscoveryQueueSettings() : CStoreDiscoveryQueueSettings(nullptr) {}
  ~CStoreDiscoveryQueueSettings() override;
  explicit constexpr CStoreDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStoreDiscoveryQueueSettings(const CStoreDiscoveryQueueSettings& from);
  CStoreDiscoveryQueueSettings(CStoreDiscoveryQueueSettings&& from) noexcept
    : CStoreDiscoveryQueueSettings() {
    *this = ::std::move(from);
  }

  inline CStoreDiscoveryQueueSettings& operator=(const CStoreDiscoveryQueueSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStoreDiscoveryQueueSettings& operator=(CStoreDiscoveryQueueSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStoreDiscoveryQueueSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStoreDiscoveryQueueSettings* internal_default_instance() {
    return reinterpret_cast<const CStoreDiscoveryQueueSettings*>(
               &_CStoreDiscoveryQueueSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CStoreDiscoveryQueueSettings& a, CStoreDiscoveryQueueSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CStoreDiscoveryQueueSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStoreDiscoveryQueueSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStoreDiscoveryQueueSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStoreDiscoveryQueueSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStoreDiscoveryQueueSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStoreDiscoveryQueueSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStoreDiscoveryQueueSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStoreDiscoveryQueueSettings";
  }
  protected:
  explicit CStoreDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedTagidsFieldNumber = 10,
    kFeaturedTagidsFieldNumber = 16,
    kOsWinFieldNumber = 4,
    kOsMacFieldNumber = 5,
    kOsLinuxFieldNumber = 6,
    kFullControllerSupportFieldNumber = 7,
    kNativeSteamControllerFieldNumber = 8,
    kIncludeComingSoonFieldNumber = 9,
    kExcludeEarlyAccessFieldNumber = 11,
    kExcludeVideosFieldNumber = 12,
    kExcludeSoftwareFieldNumber = 13,
    kExcludeDlcFieldNumber = 14,
    kExcludeSoundtracksFieldNumber = 15,
  };
  // repeated uint32 excluded_tagids = 10 [(.description) = "Don\'t return any games with these tags."];
  int excluded_tagids_size() const;
  private:
  int _internal_excluded_tagids_size() const;
  public:
  void clear_excluded_tagids();
  private:
  uint32_t _internal_excluded_tagids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_excluded_tagids() const;
  void _internal_add_excluded_tagids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_excluded_tagids();
  public:
  uint32_t excluded_tagids(int index) const;
  void set_excluded_tagids(int index, uint32_t value);
  void add_excluded_tagids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      excluded_tagids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_excluded_tagids();

  // repeated uint32 featured_tagids = 16 [(.description) = "Must be marked with one of these featured tagids (for sale pages and events)"];
  int featured_tagids_size() const;
  private:
  int _internal_featured_tagids_size() const;
  public:
  void clear_featured_tagids();
  private:
  uint32_t _internal_featured_tagids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_featured_tagids() const;
  void _internal_add_featured_tagids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_featured_tagids();
  public:
  uint32_t featured_tagids(int index) const;
  void set_featured_tagids(int index, uint32_t value);
  void add_featured_tagids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      featured_tagids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_featured_tagids();

  // optional bool os_win = 4;
  bool has_os_win() const;
  private:
  bool _internal_has_os_win() const;
  public:
  void clear_os_win();
  bool os_win() const;
  void set_os_win(bool value);
  private:
  bool _internal_os_win() const;
  void _internal_set_os_win(bool value);
  public:

  // optional bool os_mac = 5;
  bool has_os_mac() const;
  private:
  bool _internal_has_os_mac() const;
  public:
  void clear_os_mac();
  bool os_mac() const;
  void set_os_mac(bool value);
  private:
  bool _internal_os_mac() const;
  void _internal_set_os_mac(bool value);
  public:

  // optional bool os_linux = 6;
  bool has_os_linux() const;
  private:
  bool _internal_has_os_linux() const;
  public:
  void clear_os_linux();
  bool os_linux() const;
  void set_os_linux(bool value);
  private:
  bool _internal_os_linux() const;
  void _internal_set_os_linux(bool value);
  public:

  // optional bool full_controller_support = 7;
  bool has_full_controller_support() const;
  private:
  bool _internal_has_full_controller_support() const;
  public:
  void clear_full_controller_support();
  bool full_controller_support() const;
  void set_full_controller_support(bool value);
  private:
  bool _internal_full_controller_support() const;
  void _internal_set_full_controller_support(bool value);
  public:

  // optional bool native_steam_controller = 8;
  bool has_native_steam_controller() const;
  private:
  bool _internal_has_native_steam_controller() const;
  public:
  void clear_native_steam_controller();
  bool native_steam_controller() const;
  void set_native_steam_controller(bool value);
  private:
  bool _internal_native_steam_controller() const;
  void _internal_set_native_steam_controller(bool value);
  public:

  // optional bool include_coming_soon = 9;
  bool has_include_coming_soon() const;
  private:
  bool _internal_has_include_coming_soon() const;
  public:
  void clear_include_coming_soon();
  bool include_coming_soon() const;
  void set_include_coming_soon(bool value);
  private:
  bool _internal_include_coming_soon() const;
  void _internal_set_include_coming_soon(bool value);
  public:

  // optional bool exclude_early_access = 11;
  bool has_exclude_early_access() const;
  private:
  bool _internal_has_exclude_early_access() const;
  public:
  void clear_exclude_early_access();
  bool exclude_early_access() const;
  void set_exclude_early_access(bool value);
  private:
  bool _internal_exclude_early_access() const;
  void _internal_set_exclude_early_access(bool value);
  public:

  // optional bool exclude_videos = 12;
  bool has_exclude_videos() const;
  private:
  bool _internal_has_exclude_videos() const;
  public:
  void clear_exclude_videos();
  bool exclude_videos() const;
  void set_exclude_videos(bool value);
  private:
  bool _internal_exclude_videos() const;
  void _internal_set_exclude_videos(bool value);
  public:

  // optional bool exclude_software = 13;
  bool has_exclude_software() const;
  private:
  bool _internal_has_exclude_software() const;
  public:
  void clear_exclude_software();
  bool exclude_software() const;
  void set_exclude_software(bool value);
  private:
  bool _internal_exclude_software() const;
  void _internal_set_exclude_software(bool value);
  public:

  // optional bool exclude_dlc = 14;
  bool has_exclude_dlc() const;
  private:
  bool _internal_has_exclude_dlc() const;
  public:
  void clear_exclude_dlc();
  bool exclude_dlc() const;
  void set_exclude_dlc(bool value);
  private:
  bool _internal_exclude_dlc() const;
  void _internal_set_exclude_dlc(bool value);
  public:

  // optional bool exclude_soundtracks = 15;
  bool has_exclude_soundtracks() const;
  private:
  bool _internal_has_exclude_soundtracks() const;
  public:
  void clear_exclude_soundtracks();
  bool exclude_soundtracks() const;
  void set_exclude_soundtracks(bool value);
  private:
  bool _internal_exclude_soundtracks() const;
  void _internal_set_exclude_soundtracks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStoreDiscoveryQueueSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > excluded_tagids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > featured_tagids_;
  bool os_win_;
  bool os_mac_;
  bool os_linux_;
  bool full_controller_support_;
  bool native_steam_controller_;
  bool include_coming_soon_;
  bool exclude_early_access_;
  bool exclude_videos_;
  bool exclude_software_;
  bool exclude_dlc_;
  bool exclude_soundtracks_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueue_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueue_Request) */ {
 public:
  inline CStore_GetDiscoveryQueue_Request() : CStore_GetDiscoveryQueue_Request(nullptr) {}
  ~CStore_GetDiscoveryQueue_Request() override;
  explicit constexpr CStore_GetDiscoveryQueue_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueue_Request(const CStore_GetDiscoveryQueue_Request& from);
  CStore_GetDiscoveryQueue_Request(CStore_GetDiscoveryQueue_Request&& from) noexcept
    : CStore_GetDiscoveryQueue_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueue_Request& operator=(const CStore_GetDiscoveryQueue_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueue_Request& operator=(CStore_GetDiscoveryQueue_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueue_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueue_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueue_Request*>(
               &_CStore_GetDiscoveryQueue_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CStore_GetDiscoveryQueue_Request& a, CStore_GetDiscoveryQueue_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueue_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueue_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueue_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueue_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueue_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueue_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueue_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueue_Request";
  }
  protected:
  explicit CStore_GetDiscoveryQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 2,
    kSettingsFieldNumber = 5,
    kStorePageFilterFieldNumber = 12,
    kQueueTypeFieldNumber = 1,
    kRebuildQueueFieldNumber = 3,
    kSettingsChangedFieldNumber = 4,
    kRebuildQueueIfStaleFieldNumber = 6,
    kIgnoreUserPreferencesFieldNumber = 8,
    kExperimentalCohortFieldNumber = 10,
    kNoExperimentalResultsFieldNumber = 9,
    kDebugGetSolrQueryFieldNumber = 11,
  };
  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional .CStoreDiscoveryQueueSettings settings = 5;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CStoreDiscoveryQueueSettings& settings() const;
  PROTOBUF_NODISCARD ::CStoreDiscoveryQueueSettings* release_settings();
  ::CStoreDiscoveryQueueSettings* mutable_settings();
  void set_allocated_settings(::CStoreDiscoveryQueueSettings* settings);
  private:
  const ::CStoreDiscoveryQueueSettings& _internal_settings() const;
  ::CStoreDiscoveryQueueSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CStoreDiscoveryQueueSettings* settings);
  ::CStoreDiscoveryQueueSettings* unsafe_arena_release_settings();

  // optional .CStorePageFilter store_page_filter = 12;
  bool has_store_page_filter() const;
  private:
  bool _internal_has_store_page_filter() const;
  public:
  void clear_store_page_filter();
  const ::CStorePageFilter& store_page_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter* release_store_page_filter();
  ::CStorePageFilter* mutable_store_page_filter();
  void set_allocated_store_page_filter(::CStorePageFilter* store_page_filter);
  private:
  const ::CStorePageFilter& _internal_store_page_filter() const;
  ::CStorePageFilter* _internal_mutable_store_page_filter();
  public:
  void unsafe_arena_set_allocated_store_page_filter(
      ::CStorePageFilter* store_page_filter);
  ::CStorePageFilter* unsafe_arena_release_store_page_filter();

  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
  bool has_queue_type() const;
  private:
  bool _internal_has_queue_type() const;
  public:
  void clear_queue_type();
  ::EStoreDiscoveryQueueType queue_type() const;
  void set_queue_type(::EStoreDiscoveryQueueType value);
  private:
  ::EStoreDiscoveryQueueType _internal_queue_type() const;
  void _internal_set_queue_type(::EStoreDiscoveryQueueType value);
  public:

  // optional bool rebuild_queue = 3;
  bool has_rebuild_queue() const;
  private:
  bool _internal_has_rebuild_queue() const;
  public:
  void clear_rebuild_queue();
  bool rebuild_queue() const;
  void set_rebuild_queue(bool value);
  private:
  bool _internal_rebuild_queue() const;
  void _internal_set_rebuild_queue(bool value);
  public:

  // optional bool settings_changed = 4;
  bool has_settings_changed() const;
  private:
  bool _internal_has_settings_changed() const;
  public:
  void clear_settings_changed();
  bool settings_changed() const;
  void set_settings_changed(bool value);
  private:
  bool _internal_settings_changed() const;
  void _internal_set_settings_changed(bool value);
  public:

  // optional bool rebuild_queue_if_stale = 6;
  bool has_rebuild_queue_if_stale() const;
  private:
  bool _internal_has_rebuild_queue_if_stale() const;
  public:
  void clear_rebuild_queue_if_stale();
  bool rebuild_queue_if_stale() const;
  void set_rebuild_queue_if_stale(bool value);
  private:
  bool _internal_rebuild_queue_if_stale() const;
  void _internal_set_rebuild_queue_if_stale(bool value);
  public:

  // optional bool ignore_user_preferences = 8;
  bool has_ignore_user_preferences() const;
  private:
  bool _internal_has_ignore_user_preferences() const;
  public:
  void clear_ignore_user_preferences();
  bool ignore_user_preferences() const;
  void set_ignore_user_preferences(bool value);
  private:
  bool _internal_ignore_user_preferences() const;
  void _internal_set_ignore_user_preferences(bool value);
  public:

  // optional uint32 experimental_cohort = 10;
  bool has_experimental_cohort() const;
  private:
  bool _internal_has_experimental_cohort() const;
  public:
  void clear_experimental_cohort();
  uint32_t experimental_cohort() const;
  void set_experimental_cohort(uint32_t value);
  private:
  uint32_t _internal_experimental_cohort() const;
  void _internal_set_experimental_cohort(uint32_t value);
  public:

  // optional bool no_experimental_results = 9;
  bool has_no_experimental_results() const;
  private:
  bool _internal_has_no_experimental_results() const;
  public:
  void clear_no_experimental_results();
  bool no_experimental_results() const;
  void set_no_experimental_results(bool value);
  private:
  bool _internal_no_experimental_results() const;
  void _internal_set_no_experimental_results(bool value);
  public:

  // optional bool debug_get_solr_query = 11;
  bool has_debug_get_solr_query() const;
  private:
  bool _internal_has_debug_get_solr_query() const;
  public:
  void clear_debug_get_solr_query();
  bool debug_get_solr_query() const;
  void set_debug_get_solr_query(bool value);
  private:
  bool _internal_debug_get_solr_query() const;
  void _internal_set_debug_get_solr_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueue_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::CStoreDiscoveryQueueSettings* settings_;
  ::CStorePageFilter* store_page_filter_;
  int queue_type_;
  bool rebuild_queue_;
  bool settings_changed_;
  bool rebuild_queue_if_stale_;
  bool ignore_user_preferences_;
  uint32_t experimental_cohort_;
  bool no_experimental_results_;
  bool debug_get_solr_query_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueue_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueue_Response) */ {
 public:
  inline CStore_GetDiscoveryQueue_Response() : CStore_GetDiscoveryQueue_Response(nullptr) {}
  ~CStore_GetDiscoveryQueue_Response() override;
  explicit constexpr CStore_GetDiscoveryQueue_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueue_Response(const CStore_GetDiscoveryQueue_Response& from);
  CStore_GetDiscoveryQueue_Response(CStore_GetDiscoveryQueue_Response&& from) noexcept
    : CStore_GetDiscoveryQueue_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueue_Response& operator=(const CStore_GetDiscoveryQueue_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueue_Response& operator=(CStore_GetDiscoveryQueue_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueue_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueue_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueue_Response*>(
               &_CStore_GetDiscoveryQueue_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CStore_GetDiscoveryQueue_Response& a, CStore_GetDiscoveryQueue_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueue_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueue_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueue_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueue_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueue_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueue_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueue_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueue_Response";
  }
  protected:
  explicit CStore_GetDiscoveryQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 1,
    kCountryCodeFieldNumber = 2,
    kDebugSolrQueryFieldNumber = 7,
    kSettingsFieldNumber = 3,
    kSkippedFieldNumber = 4,
    kExhaustedFieldNumber = 5,
    kExperimentalCohortFieldNumber = 6,
  };
  // repeated uint32 appids = 1;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string debug_solr_query = 7;
  bool has_debug_solr_query() const;
  private:
  bool _internal_has_debug_solr_query() const;
  public:
  void clear_debug_solr_query();
  const std::string& debug_solr_query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debug_solr_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debug_solr_query();
  PROTOBUF_NODISCARD std::string* release_debug_solr_query();
  void set_allocated_debug_solr_query(std::string* debug_solr_query);
  private:
  const std::string& _internal_debug_solr_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_solr_query(const std::string& value);
  std::string* _internal_mutable_debug_solr_query();
  public:

  // optional .CStoreDiscoveryQueueSettings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CStoreDiscoveryQueueSettings& settings() const;
  PROTOBUF_NODISCARD ::CStoreDiscoveryQueueSettings* release_settings();
  ::CStoreDiscoveryQueueSettings* mutable_settings();
  void set_allocated_settings(::CStoreDiscoveryQueueSettings* settings);
  private:
  const ::CStoreDiscoveryQueueSettings& _internal_settings() const;
  ::CStoreDiscoveryQueueSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CStoreDiscoveryQueueSettings* settings);
  ::CStoreDiscoveryQueueSettings* unsafe_arena_release_settings();

  // optional int32 skipped = 4;
  bool has_skipped() const;
  private:
  bool _internal_has_skipped() const;
  public:
  void clear_skipped();
  int32_t skipped() const;
  void set_skipped(int32_t value);
  private:
  int32_t _internal_skipped() const;
  void _internal_set_skipped(int32_t value);
  public:

  // optional bool exhausted = 5;
  bool has_exhausted() const;
  private:
  bool _internal_has_exhausted() const;
  public:
  void clear_exhausted();
  bool exhausted() const;
  void set_exhausted(bool value);
  private:
  bool _internal_exhausted() const;
  void _internal_set_exhausted(bool value);
  public:

  // optional uint32 experimental_cohort = 6;
  bool has_experimental_cohort() const;
  private:
  bool _internal_has_experimental_cohort() const;
  public:
  void clear_experimental_cohort();
  uint32_t experimental_cohort() const;
  void set_experimental_cohort(uint32_t value);
  private:
  uint32_t _internal_experimental_cohort() const;
  void _internal_set_experimental_cohort(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueue_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_solr_query_;
  ::CStoreDiscoveryQueueSettings* settings_;
  int32_t skipped_;
  bool exhausted_;
  uint32_t experimental_cohort_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueueSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueueSettings_Request) */ {
 public:
  inline CStore_GetDiscoveryQueueSettings_Request() : CStore_GetDiscoveryQueueSettings_Request(nullptr) {}
  ~CStore_GetDiscoveryQueueSettings_Request() override;
  explicit constexpr CStore_GetDiscoveryQueueSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueueSettings_Request(const CStore_GetDiscoveryQueueSettings_Request& from);
  CStore_GetDiscoveryQueueSettings_Request(CStore_GetDiscoveryQueueSettings_Request&& from) noexcept
    : CStore_GetDiscoveryQueueSettings_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueueSettings_Request& operator=(const CStore_GetDiscoveryQueueSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueueSettings_Request& operator=(CStore_GetDiscoveryQueueSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueueSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueueSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueueSettings_Request*>(
               &_CStore_GetDiscoveryQueueSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CStore_GetDiscoveryQueueSettings_Request& a, CStore_GetDiscoveryQueueSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueueSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueueSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueueSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueueSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueueSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueueSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueueSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueueSettings_Request";
  }
  protected:
  explicit CStore_GetDiscoveryQueueSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorePageFilterFieldNumber = 2,
    kQueueTypeFieldNumber = 1,
  };
  // optional .CStorePageFilter store_page_filter = 2;
  bool has_store_page_filter() const;
  private:
  bool _internal_has_store_page_filter() const;
  public:
  void clear_store_page_filter();
  const ::CStorePageFilter& store_page_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter* release_store_page_filter();
  ::CStorePageFilter* mutable_store_page_filter();
  void set_allocated_store_page_filter(::CStorePageFilter* store_page_filter);
  private:
  const ::CStorePageFilter& _internal_store_page_filter() const;
  ::CStorePageFilter* _internal_mutable_store_page_filter();
  public:
  void unsafe_arena_set_allocated_store_page_filter(
      ::CStorePageFilter* store_page_filter);
  ::CStorePageFilter* unsafe_arena_release_store_page_filter();

  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
  bool has_queue_type() const;
  private:
  bool _internal_has_queue_type() const;
  public:
  void clear_queue_type();
  ::EStoreDiscoveryQueueType queue_type() const;
  void set_queue_type(::EStoreDiscoveryQueueType value);
  private:
  ::EStoreDiscoveryQueueType _internal_queue_type() const;
  void _internal_set_queue_type(::EStoreDiscoveryQueueType value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueueSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStorePageFilter* store_page_filter_;
  int queue_type_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueueSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueueSettings_Response) */ {
 public:
  inline CStore_GetDiscoveryQueueSettings_Response() : CStore_GetDiscoveryQueueSettings_Response(nullptr) {}
  ~CStore_GetDiscoveryQueueSettings_Response() override;
  explicit constexpr CStore_GetDiscoveryQueueSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueueSettings_Response(const CStore_GetDiscoveryQueueSettings_Response& from);
  CStore_GetDiscoveryQueueSettings_Response(CStore_GetDiscoveryQueueSettings_Response&& from) noexcept
    : CStore_GetDiscoveryQueueSettings_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueueSettings_Response& operator=(const CStore_GetDiscoveryQueueSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueueSettings_Response& operator=(CStore_GetDiscoveryQueueSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueueSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueueSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueueSettings_Response*>(
               &_CStore_GetDiscoveryQueueSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CStore_GetDiscoveryQueueSettings_Response& a, CStore_GetDiscoveryQueueSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueueSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueueSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueueSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueueSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueueSettings_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueueSettings_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueueSettings_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueueSettings_Response";
  }
  protected:
  explicit CStore_GetDiscoveryQueueSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // optional string country_code = 1;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional .CStoreDiscoveryQueueSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CStoreDiscoveryQueueSettings& settings() const;
  PROTOBUF_NODISCARD ::CStoreDiscoveryQueueSettings* release_settings();
  ::CStoreDiscoveryQueueSettings* mutable_settings();
  void set_allocated_settings(::CStoreDiscoveryQueueSettings* settings);
  private:
  const ::CStoreDiscoveryQueueSettings& _internal_settings() const;
  ::CStoreDiscoveryQueueSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CStoreDiscoveryQueueSettings* settings);
  ::CStoreDiscoveryQueueSettings* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueueSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::CStoreDiscoveryQueueSettings* settings_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_SkipDiscoveryQueueItem_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_SkipDiscoveryQueueItem_Request) */ {
 public:
  inline CStore_SkipDiscoveryQueueItem_Request() : CStore_SkipDiscoveryQueueItem_Request(nullptr) {}
  ~CStore_SkipDiscoveryQueueItem_Request() override;
  explicit constexpr CStore_SkipDiscoveryQueueItem_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_SkipDiscoveryQueueItem_Request(const CStore_SkipDiscoveryQueueItem_Request& from);
  CStore_SkipDiscoveryQueueItem_Request(CStore_SkipDiscoveryQueueItem_Request&& from) noexcept
    : CStore_SkipDiscoveryQueueItem_Request() {
    *this = ::std::move(from);
  }

  inline CStore_SkipDiscoveryQueueItem_Request& operator=(const CStore_SkipDiscoveryQueueItem_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_SkipDiscoveryQueueItem_Request& operator=(CStore_SkipDiscoveryQueueItem_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_SkipDiscoveryQueueItem_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_SkipDiscoveryQueueItem_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_SkipDiscoveryQueueItem_Request*>(
               &_CStore_SkipDiscoveryQueueItem_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CStore_SkipDiscoveryQueueItem_Request& a, CStore_SkipDiscoveryQueueItem_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_SkipDiscoveryQueueItem_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_SkipDiscoveryQueueItem_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_SkipDiscoveryQueueItem_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_SkipDiscoveryQueueItem_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_SkipDiscoveryQueueItem_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_SkipDiscoveryQueueItem_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_SkipDiscoveryQueueItem_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_SkipDiscoveryQueueItem_Request";
  }
  protected:
  explicit CStore_SkipDiscoveryQueueItem_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorePageFilterFieldNumber = 3,
    kQueueTypeFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional .CStorePageFilter store_page_filter = 3;
  bool has_store_page_filter() const;
  private:
  bool _internal_has_store_page_filter() const;
  public:
  void clear_store_page_filter();
  const ::CStorePageFilter& store_page_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter* release_store_page_filter();
  ::CStorePageFilter* mutable_store_page_filter();
  void set_allocated_store_page_filter(::CStorePageFilter* store_page_filter);
  private:
  const ::CStorePageFilter& _internal_store_page_filter() const;
  ::CStorePageFilter* _internal_mutable_store_page_filter();
  public:
  void unsafe_arena_set_allocated_store_page_filter(
      ::CStorePageFilter* store_page_filter);
  ::CStorePageFilter* unsafe_arena_release_store_page_filter();

  // optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
  bool has_queue_type() const;
  private:
  bool _internal_has_queue_type() const;
  public:
  void clear_queue_type();
  ::EStoreDiscoveryQueueType queue_type() const;
  void set_queue_type(::EStoreDiscoveryQueueType value);
  private:
  ::EStoreDiscoveryQueueType _internal_queue_type() const;
  void _internal_set_queue_type(::EStoreDiscoveryQueueType value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_SkipDiscoveryQueueItem_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStorePageFilter* store_page_filter_;
  int queue_type_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_SkipDiscoveryQueueItem_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CStore_SkipDiscoveryQueueItem_Response) */ {
 public:
  inline CStore_SkipDiscoveryQueueItem_Response() : CStore_SkipDiscoveryQueueItem_Response(nullptr) {}
  explicit constexpr CStore_SkipDiscoveryQueueItem_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_SkipDiscoveryQueueItem_Response(const CStore_SkipDiscoveryQueueItem_Response& from);
  CStore_SkipDiscoveryQueueItem_Response(CStore_SkipDiscoveryQueueItem_Response&& from) noexcept
    : CStore_SkipDiscoveryQueueItem_Response() {
    *this = ::std::move(from);
  }

  inline CStore_SkipDiscoveryQueueItem_Response& operator=(const CStore_SkipDiscoveryQueueItem_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_SkipDiscoveryQueueItem_Response& operator=(CStore_SkipDiscoveryQueueItem_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_SkipDiscoveryQueueItem_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_SkipDiscoveryQueueItem_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_SkipDiscoveryQueueItem_Response*>(
               &_CStore_SkipDiscoveryQueueItem_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CStore_SkipDiscoveryQueueItem_Response& a, CStore_SkipDiscoveryQueueItem_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_SkipDiscoveryQueueItem_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_SkipDiscoveryQueueItem_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_SkipDiscoveryQueueItem_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_SkipDiscoveryQueueItem_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CStore_SkipDiscoveryQueueItem_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CStore_SkipDiscoveryQueueItem_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_SkipDiscoveryQueueItem_Response";
  }
  protected:
  explicit CStore_SkipDiscoveryQueueItem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStore_SkipDiscoveryQueueItem_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetUserGameInterestState_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetUserGameInterestState_Request) */ {
 public:
  inline CStore_GetUserGameInterestState_Request() : CStore_GetUserGameInterestState_Request(nullptr) {}
  ~CStore_GetUserGameInterestState_Request() override;
  explicit constexpr CStore_GetUserGameInterestState_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetUserGameInterestState_Request(const CStore_GetUserGameInterestState_Request& from);
  CStore_GetUserGameInterestState_Request(CStore_GetUserGameInterestState_Request&& from) noexcept
    : CStore_GetUserGameInterestState_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetUserGameInterestState_Request& operator=(const CStore_GetUserGameInterestState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetUserGameInterestState_Request& operator=(CStore_GetUserGameInterestState_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetUserGameInterestState_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetUserGameInterestState_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetUserGameInterestState_Request*>(
               &_CStore_GetUserGameInterestState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CStore_GetUserGameInterestState_Request& a, CStore_GetUserGameInterestState_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetUserGameInterestState_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetUserGameInterestState_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetUserGameInterestState_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetUserGameInterestState_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetUserGameInterestState_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetUserGameInterestState_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetUserGameInterestState_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetUserGameInterestState_Request";
  }
  protected:
  explicit CStore_GetUserGameInterestState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kStoreAppidFieldNumber = 2,
    kBetaAppidFieldNumber = 3,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 store_appid = 2;
  bool has_store_appid() const;
  private:
  bool _internal_has_store_appid() const;
  public:
  void clear_store_appid();
  uint32_t store_appid() const;
  void set_store_appid(uint32_t value);
  private:
  uint32_t _internal_store_appid() const;
  void _internal_set_store_appid(uint32_t value);
  public:

  // optional uint32 beta_appid = 3;
  bool has_beta_appid() const;
  private:
  bool _internal_has_beta_appid() const;
  public:
  void clear_beta_appid();
  uint32_t beta_appid() const;
  void set_beta_appid(uint32_t value);
  private:
  uint32_t _internal_beta_appid() const;
  void _internal_set_beta_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetUserGameInterestState_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t store_appid_;
  uint32_t beta_appid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetUserGameInterestState_Response_InQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetUserGameInterestState_Response.InQueue) */ {
 public:
  inline CStore_GetUserGameInterestState_Response_InQueue() : CStore_GetUserGameInterestState_Response_InQueue(nullptr) {}
  ~CStore_GetUserGameInterestState_Response_InQueue() override;
  explicit constexpr CStore_GetUserGameInterestState_Response_InQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetUserGameInterestState_Response_InQueue(const CStore_GetUserGameInterestState_Response_InQueue& from);
  CStore_GetUserGameInterestState_Response_InQueue(CStore_GetUserGameInterestState_Response_InQueue&& from) noexcept
    : CStore_GetUserGameInterestState_Response_InQueue() {
    *this = ::std::move(from);
  }

  inline CStore_GetUserGameInterestState_Response_InQueue& operator=(const CStore_GetUserGameInterestState_Response_InQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetUserGameInterestState_Response_InQueue& operator=(CStore_GetUserGameInterestState_Response_InQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetUserGameInterestState_Response_InQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetUserGameInterestState_Response_InQueue* internal_default_instance() {
    return reinterpret_cast<const CStore_GetUserGameInterestState_Response_InQueue*>(
               &_CStore_GetUserGameInterestState_Response_InQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CStore_GetUserGameInterestState_Response_InQueue& a, CStore_GetUserGameInterestState_Response_InQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetUserGameInterestState_Response_InQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetUserGameInterestState_Response_InQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetUserGameInterestState_Response_InQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetUserGameInterestState_Response_InQueue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetUserGameInterestState_Response_InQueue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetUserGameInterestState_Response_InQueue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetUserGameInterestState_Response_InQueue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetUserGameInterestState_Response.InQueue";
  }
  protected:
  explicit CStore_GetUserGameInterestState_Response_InQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSkippedFieldNumber = 2,
    kItemsRemainingFieldNumber = 3,
    kNextAppidFieldNumber = 4,
    kExperimentalCohortFieldNumber = 5,
  };
  // optional .EStoreDiscoveryQueueType type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EStoreDiscoveryQueueType type() const;
  void set_type(::EStoreDiscoveryQueueType value);
  private:
  ::EStoreDiscoveryQueueType _internal_type() const;
  void _internal_set_type(::EStoreDiscoveryQueueType value);
  public:

  // optional bool skipped = 2;
  bool has_skipped() const;
  private:
  bool _internal_has_skipped() const;
  public:
  void clear_skipped();
  bool skipped() const;
  void set_skipped(bool value);
  private:
  bool _internal_skipped() const;
  void _internal_set_skipped(bool value);
  public:

  // optional int32 items_remaining = 3;
  bool has_items_remaining() const;
  private:
  bool _internal_has_items_remaining() const;
  public:
  void clear_items_remaining();
  int32_t items_remaining() const;
  void set_items_remaining(int32_t value);
  private:
  int32_t _internal_items_remaining() const;
  void _internal_set_items_remaining(int32_t value);
  public:

  // optional uint32 next_appid = 4;
  bool has_next_appid() const;
  private:
  bool _internal_has_next_appid() const;
  public:
  void clear_next_appid();
  uint32_t next_appid() const;
  void set_next_appid(uint32_t value);
  private:
  uint32_t _internal_next_appid() const;
  void _internal_set_next_appid(uint32_t value);
  public:

  // optional uint32 experimental_cohort = 5;
  bool has_experimental_cohort() const;
  private:
  bool _internal_has_experimental_cohort() const;
  public:
  void clear_experimental_cohort();
  uint32_t experimental_cohort() const;
  void set_experimental_cohort(uint32_t value);
  private:
  uint32_t _internal_experimental_cohort() const;
  void _internal_set_experimental_cohort(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetUserGameInterestState_Response.InQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  bool skipped_;
  int32_t items_remaining_;
  uint32_t next_appid_;
  uint32_t experimental_cohort_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetUserGameInterestState_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetUserGameInterestState_Response) */ {
 public:
  inline CStore_GetUserGameInterestState_Response() : CStore_GetUserGameInterestState_Response(nullptr) {}
  ~CStore_GetUserGameInterestState_Response() override;
  explicit constexpr CStore_GetUserGameInterestState_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetUserGameInterestState_Response(const CStore_GetUserGameInterestState_Response& from);
  CStore_GetUserGameInterestState_Response(CStore_GetUserGameInterestState_Response&& from) noexcept
    : CStore_GetUserGameInterestState_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetUserGameInterestState_Response& operator=(const CStore_GetUserGameInterestState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetUserGameInterestState_Response& operator=(CStore_GetUserGameInterestState_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetUserGameInterestState_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetUserGameInterestState_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetUserGameInterestState_Response*>(
               &_CStore_GetUserGameInterestState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CStore_GetUserGameInterestState_Response& a, CStore_GetUserGameInterestState_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetUserGameInterestState_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetUserGameInterestState_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetUserGameInterestState_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetUserGameInterestState_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetUserGameInterestState_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetUserGameInterestState_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetUserGameInterestState_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetUserGameInterestState_Response";
  }
  protected:
  explicit CStore_GetUserGameInterestState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_GetUserGameInterestState_Response_InQueue InQueue;

  // accessors -------------------------------------------------------

  enum : int {
    kInQueuesFieldNumber = 5,
    kQueuesWithSkipFieldNumber = 6,
    kQueueItemsRemainingFieldNumber = 7,
    kQueueItemsNextAppidFieldNumber = 8,
    kQueuesFieldNumber = 10,
    kOwnedFieldNumber = 1,
    kWishlistFieldNumber = 2,
    kIgnoredFieldNumber = 3,
    kFollowingFieldNumber = 4,
    kTemporarilyOwnedFieldNumber = 9,
    kIgnoredReasonFieldNumber = 11,
    kBetaStatusFieldNumber = 12,
  };
  // repeated .EStoreDiscoveryQueueType in_queues = 5;
  int in_queues_size() const;
  private:
  int _internal_in_queues_size() const;
  public:
  void clear_in_queues();
  private:
  ::EStoreDiscoveryQueueType _internal_in_queues(int index) const;
  void _internal_add_in_queues(::EStoreDiscoveryQueueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_in_queues();
  public:
  ::EStoreDiscoveryQueueType in_queues(int index) const;
  void set_in_queues(int index, ::EStoreDiscoveryQueueType value);
  void add_in_queues(::EStoreDiscoveryQueueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& in_queues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_in_queues();

  // repeated .EStoreDiscoveryQueueType queues_with_skip = 6 [(.description) = "Discovery queue types where the user has skipped this game."];
  int queues_with_skip_size() const;
  private:
  int _internal_queues_with_skip_size() const;
  public:
  void clear_queues_with_skip();
  private:
  ::EStoreDiscoveryQueueType _internal_queues_with_skip(int index) const;
  void _internal_add_queues_with_skip(::EStoreDiscoveryQueueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_queues_with_skip();
  public:
  ::EStoreDiscoveryQueueType queues_with_skip(int index) const;
  void set_queues_with_skip(int index, ::EStoreDiscoveryQueueType value);
  void add_queues_with_skip(::EStoreDiscoveryQueueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& queues_with_skip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_queues_with_skip();

  // repeated int32 queue_items_remaining = 7 [(.description) = "# of items remaining in the discovery queue - matches the same order as in_queues"];
  int queue_items_remaining_size() const;
  private:
  int _internal_queue_items_remaining_size() const;
  public:
  void clear_queue_items_remaining();
  private:
  int32_t _internal_queue_items_remaining(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_queue_items_remaining() const;
  void _internal_add_queue_items_remaining(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_queue_items_remaining();
  public:
  int32_t queue_items_remaining(int index) const;
  void set_queue_items_remaining(int index, int32_t value);
  void add_queue_items_remaining(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      queue_items_remaining() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_queue_items_remaining();

  // repeated uint32 queue_items_next_appid = 8 [(.description) = "the next appid in the queue - matches the same order as in_queues"];
  int queue_items_next_appid_size() const;
  private:
  int _internal_queue_items_next_appid_size() const;
  public:
  void clear_queue_items_next_appid();
  private:
  uint32_t _internal_queue_items_next_appid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_queue_items_next_appid() const;
  void _internal_add_queue_items_next_appid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_queue_items_next_appid();
  public:
  uint32_t queue_items_next_appid(int index) const;
  void set_queue_items_next_appid(int index, uint32_t value);
  void add_queue_items_next_appid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      queue_items_next_appid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_queue_items_next_appid();

  // repeated .CStore_GetUserGameInterestState_Response.InQueue queues = 10;
  int queues_size() const;
  private:
  int _internal_queues_size() const;
  public:
  void clear_queues();
  ::CStore_GetUserGameInterestState_Response_InQueue* mutable_queues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetUserGameInterestState_Response_InQueue >*
      mutable_queues();
  private:
  const ::CStore_GetUserGameInterestState_Response_InQueue& _internal_queues(int index) const;
  ::CStore_GetUserGameInterestState_Response_InQueue* _internal_add_queues();
  public:
  const ::CStore_GetUserGameInterestState_Response_InQueue& queues(int index) const;
  ::CStore_GetUserGameInterestState_Response_InQueue* add_queues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetUserGameInterestState_Response_InQueue >&
      queues() const;

  // optional bool owned = 1;
  bool has_owned() const;
  private:
  bool _internal_has_owned() const;
  public:
  void clear_owned();
  bool owned() const;
  void set_owned(bool value);
  private:
  bool _internal_owned() const;
  void _internal_set_owned(bool value);
  public:

  // optional bool wishlist = 2;
  bool has_wishlist() const;
  private:
  bool _internal_has_wishlist() const;
  public:
  void clear_wishlist();
  bool wishlist() const;
  void set_wishlist(bool value);
  private:
  bool _internal_wishlist() const;
  void _internal_set_wishlist(bool value);
  public:

  // optional bool ignored = 3;
  bool has_ignored() const;
  private:
  bool _internal_has_ignored() const;
  public:
  void clear_ignored();
  bool ignored() const;
  void set_ignored(bool value);
  private:
  bool _internal_ignored() const;
  void _internal_set_ignored(bool value);
  public:

  // optional bool following = 4;
  bool has_following() const;
  private:
  bool _internal_has_following() const;
  public:
  void clear_following();
  bool following() const;
  void set_following(bool value);
  private:
  bool _internal_following() const;
  void _internal_set_following(bool value);
  public:

  // optional bool temporarily_owned = 9 [(.description) = "The user owns the game temporarily, eg a rental or free weekend"];
  bool has_temporarily_owned() const;
  private:
  bool _internal_has_temporarily_owned() const;
  public:
  void clear_temporarily_owned();
  bool temporarily_owned() const;
  void set_temporarily_owned(bool value);
  private:
  bool _internal_temporarily_owned() const;
  void _internal_set_temporarily_owned(bool value);
  public:

  // optional int32 ignored_reason = 11 [(.description) = "The ERecommendationIgnoreReason why the user ignored the app"];
  bool has_ignored_reason() const;
  private:
  bool _internal_has_ignored_reason() const;
  public:
  void clear_ignored_reason();
  int32_t ignored_reason() const;
  void set_ignored_reason(int32_t value);
  private:
  int32_t _internal_ignored_reason() const;
  void _internal_set_ignored_reason(int32_t value);
  public:

  // optional .EPlaytestStatus beta_status = 12 [default = k_ETesterStatusNone, (.description) = "User interest or membership in the playtest for this app if any"];
  bool has_beta_status() const;
  private:
  bool _internal_has_beta_status() const;
  public:
  void clear_beta_status();
  ::EPlaytestStatus beta_status() const;
  void set_beta_status(::EPlaytestStatus value);
  private:
  ::EPlaytestStatus _internal_beta_status() const;
  void _internal_set_beta_status(::EPlaytestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetUserGameInterestState_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> in_queues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> queues_with_skip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > queue_items_remaining_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > queue_items_next_appid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetUserGameInterestState_Response_InQueue > queues_;
  bool owned_;
  bool wishlist_;
  bool ignored_;
  bool following_;
  bool temporarily_owned_;
  int32_t ignored_reason_;
  int beta_status_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueueSkippedApps_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueueSkippedApps_Request) */ {
 public:
  inline CStore_GetDiscoveryQueueSkippedApps_Request() : CStore_GetDiscoveryQueueSkippedApps_Request(nullptr) {}
  ~CStore_GetDiscoveryQueueSkippedApps_Request() override;
  explicit constexpr CStore_GetDiscoveryQueueSkippedApps_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueueSkippedApps_Request(const CStore_GetDiscoveryQueueSkippedApps_Request& from);
  CStore_GetDiscoveryQueueSkippedApps_Request(CStore_GetDiscoveryQueueSkippedApps_Request&& from) noexcept
    : CStore_GetDiscoveryQueueSkippedApps_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueueSkippedApps_Request& operator=(const CStore_GetDiscoveryQueueSkippedApps_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueueSkippedApps_Request& operator=(CStore_GetDiscoveryQueueSkippedApps_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueueSkippedApps_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueueSkippedApps_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueueSkippedApps_Request*>(
               &_CStore_GetDiscoveryQueueSkippedApps_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CStore_GetDiscoveryQueueSkippedApps_Request& a, CStore_GetDiscoveryQueueSkippedApps_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueueSkippedApps_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueueSkippedApps_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueueSkippedApps_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueueSkippedApps_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueueSkippedApps_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueueSkippedApps_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueueSkippedApps_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueueSkippedApps_Request";
  }
  protected:
  explicit CStore_GetDiscoveryQueueSkippedApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorePageFilterFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kQueueTypeFieldNumber = 2,
  };
  // optional .CStorePageFilter store_page_filter = 3;
  bool has_store_page_filter() const;
  private:
  bool _internal_has_store_page_filter() const;
  public:
  void clear_store_page_filter();
  const ::CStorePageFilter& store_page_filter() const;
  PROTOBUF_NODISCARD ::CStorePageFilter* release_store_page_filter();
  ::CStorePageFilter* mutable_store_page_filter();
  void set_allocated_store_page_filter(::CStorePageFilter* store_page_filter);
  private:
  const ::CStorePageFilter& _internal_store_page_filter() const;
  ::CStorePageFilter* _internal_mutable_store_page_filter();
  public:
  void unsafe_arena_set_allocated_store_page_filter(
      ::CStorePageFilter* store_page_filter);
  ::CStorePageFilter* unsafe_arena_release_store_page_filter();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional .EStoreDiscoveryQueueType queue_type = 2 [default = k_EStoreDiscoveryQueueTypeNew];
  bool has_queue_type() const;
  private:
  bool _internal_has_queue_type() const;
  public:
  void clear_queue_type();
  ::EStoreDiscoveryQueueType queue_type() const;
  void set_queue_type(::EStoreDiscoveryQueueType value);
  private:
  ::EStoreDiscoveryQueueType _internal_queue_type() const;
  void _internal_set_queue_type(::EStoreDiscoveryQueueType value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueueSkippedApps_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStorePageFilter* store_page_filter_;
  uint64_t steamid_;
  int queue_type_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetDiscoveryQueueSkippedApps_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetDiscoveryQueueSkippedApps_Response) */ {
 public:
  inline CStore_GetDiscoveryQueueSkippedApps_Response() : CStore_GetDiscoveryQueueSkippedApps_Response(nullptr) {}
  ~CStore_GetDiscoveryQueueSkippedApps_Response() override;
  explicit constexpr CStore_GetDiscoveryQueueSkippedApps_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetDiscoveryQueueSkippedApps_Response(const CStore_GetDiscoveryQueueSkippedApps_Response& from);
  CStore_GetDiscoveryQueueSkippedApps_Response(CStore_GetDiscoveryQueueSkippedApps_Response&& from) noexcept
    : CStore_GetDiscoveryQueueSkippedApps_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetDiscoveryQueueSkippedApps_Response& operator=(const CStore_GetDiscoveryQueueSkippedApps_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetDiscoveryQueueSkippedApps_Response& operator=(CStore_GetDiscoveryQueueSkippedApps_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetDiscoveryQueueSkippedApps_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetDiscoveryQueueSkippedApps_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetDiscoveryQueueSkippedApps_Response*>(
               &_CStore_GetDiscoveryQueueSkippedApps_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CStore_GetDiscoveryQueueSkippedApps_Response& a, CStore_GetDiscoveryQueueSkippedApps_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetDiscoveryQueueSkippedApps_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetDiscoveryQueueSkippedApps_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetDiscoveryQueueSkippedApps_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetDiscoveryQueueSkippedApps_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetDiscoveryQueueSkippedApps_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetDiscoveryQueueSkippedApps_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetDiscoveryQueueSkippedApps_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetDiscoveryQueueSkippedApps_Response";
  }
  protected:
  explicit CStore_GetDiscoveryQueueSkippedApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 1,
  };
  // repeated uint32 appids = 1;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // @@protoc_insertion_point(class_scope:CStore_GetDiscoveryQueueSkippedApps_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetStorePreferences_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CStore_GetStorePreferences_Request) */ {
 public:
  inline CStore_GetStorePreferences_Request() : CStore_GetStorePreferences_Request(nullptr) {}
  explicit constexpr CStore_GetStorePreferences_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetStorePreferences_Request(const CStore_GetStorePreferences_Request& from);
  CStore_GetStorePreferences_Request(CStore_GetStorePreferences_Request&& from) noexcept
    : CStore_GetStorePreferences_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetStorePreferences_Request& operator=(const CStore_GetStorePreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetStorePreferences_Request& operator=(CStore_GetStorePreferences_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetStorePreferences_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetStorePreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetStorePreferences_Request*>(
               &_CStore_GetStorePreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CStore_GetStorePreferences_Request& a, CStore_GetStorePreferences_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetStorePreferences_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetStorePreferences_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetStorePreferences_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetStorePreferences_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CStore_GetStorePreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CStore_GetStorePreferences_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetStorePreferences_Request";
  }
  protected:
  explicit CStore_GetStorePreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CStore_GetStorePreferences_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_UserPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_UserPreferences) */ {
 public:
  inline CStore_UserPreferences() : CStore_UserPreferences(nullptr) {}
  ~CStore_UserPreferences() override;
  explicit constexpr CStore_UserPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_UserPreferences(const CStore_UserPreferences& from);
  CStore_UserPreferences(CStore_UserPreferences&& from) noexcept
    : CStore_UserPreferences() {
    *this = ::std::move(from);
  }

  inline CStore_UserPreferences& operator=(const CStore_UserPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_UserPreferences& operator=(CStore_UserPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_UserPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_UserPreferences* internal_default_instance() {
    return reinterpret_cast<const CStore_UserPreferences*>(
               &_CStore_UserPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CStore_UserPreferences& a, CStore_UserPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_UserPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_UserPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_UserPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_UserPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_UserPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_UserPreferences& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_UserPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_UserPreferences";
  }
  protected:
  explicit CStore_UserPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalLanguagesFieldNumber = 13,
    kPrimaryLanguageFieldNumber = 1,
    kSecondaryLanguagesFieldNumber = 2,
    kPlatformWindowsFieldNumber = 3,
    kPlatformMacFieldNumber = 4,
    kPlatformLinuxFieldNumber = 5,
    kHideStoreBroadcastFieldNumber = 9,
    kTimestampUpdatedFieldNumber = 8,
    kReviewScorePreferenceFieldNumber = 10,
    kTimestampContentDescriptorPreferencesUpdatedFieldNumber = 11,
    kProvideDeckFeedbackFieldNumber = 12,
  };
  // optional string additional_languages = 13;
  bool has_additional_languages() const;
  private:
  bool _internal_has_additional_languages() const;
  public:
  void clear_additional_languages();
  const std::string& additional_languages() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additional_languages(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additional_languages();
  PROTOBUF_NODISCARD std::string* release_additional_languages();
  void set_allocated_additional_languages(std::string* additional_languages);
  private:
  const std::string& _internal_additional_languages() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additional_languages(const std::string& value);
  std::string* _internal_mutable_additional_languages();
  public:

  // optional int32 primary_language = 1;
  bool has_primary_language() const;
  private:
  bool _internal_has_primary_language() const;
  public:
  void clear_primary_language();
  int32_t primary_language() const;
  void set_primary_language(int32_t value);
  private:
  int32_t _internal_primary_language() const;
  void _internal_set_primary_language(int32_t value);
  public:

  // optional uint32 secondary_languages = 2;
  bool has_secondary_languages() const;
  private:
  bool _internal_has_secondary_languages() const;
  public:
  void clear_secondary_languages();
  uint32_t secondary_languages() const;
  void set_secondary_languages(uint32_t value);
  private:
  uint32_t _internal_secondary_languages() const;
  void _internal_set_secondary_languages(uint32_t value);
  public:

  // optional bool platform_windows = 3;
  bool has_platform_windows() const;
  private:
  bool _internal_has_platform_windows() const;
  public:
  void clear_platform_windows();
  bool platform_windows() const;
  void set_platform_windows(bool value);
  private:
  bool _internal_platform_windows() const;
  void _internal_set_platform_windows(bool value);
  public:

  // optional bool platform_mac = 4;
  bool has_platform_mac() const;
  private:
  bool _internal_has_platform_mac() const;
  public:
  void clear_platform_mac();
  bool platform_mac() const;
  void set_platform_mac(bool value);
  private:
  bool _internal_platform_mac() const;
  void _internal_set_platform_mac(bool value);
  public:

  // optional bool platform_linux = 5;
  bool has_platform_linux() const;
  private:
  bool _internal_has_platform_linux() const;
  public:
  void clear_platform_linux();
  bool platform_linux() const;
  void set_platform_linux(bool value);
  private:
  bool _internal_platform_linux() const;
  void _internal_set_platform_linux(bool value);
  public:

  // optional bool hide_store_broadcast = 9;
  bool has_hide_store_broadcast() const;
  private:
  bool _internal_has_hide_store_broadcast() const;
  public:
  void clear_hide_store_broadcast();
  bool hide_store_broadcast() const;
  void set_hide_store_broadcast(bool value);
  private:
  bool _internal_hide_store_broadcast() const;
  void _internal_set_hide_store_broadcast(bool value);
  public:

  // optional uint32 timestamp_updated = 8;
  bool has_timestamp_updated() const;
  private:
  bool _internal_has_timestamp_updated() const;
  public:
  void clear_timestamp_updated();
  uint32_t timestamp_updated() const;
  void set_timestamp_updated(uint32_t value);
  private:
  uint32_t _internal_timestamp_updated() const;
  void _internal_set_timestamp_updated(uint32_t value);
  public:

  // optional .EUserReviewScorePreference review_score_preference = 10 [default = k_EUserReviewScorePreference_Unset];
  bool has_review_score_preference() const;
  private:
  bool _internal_has_review_score_preference() const;
  public:
  void clear_review_score_preference();
  ::EUserReviewScorePreference review_score_preference() const;
  void set_review_score_preference(::EUserReviewScorePreference value);
  private:
  ::EUserReviewScorePreference _internal_review_score_preference() const;
  void _internal_set_review_score_preference(::EUserReviewScorePreference value);
  public:

  // optional int32 timestamp_content_descriptor_preferences_updated = 11;
  bool has_timestamp_content_descriptor_preferences_updated() const;
  private:
  bool _internal_has_timestamp_content_descriptor_preferences_updated() const;
  public:
  void clear_timestamp_content_descriptor_preferences_updated();
  int32_t timestamp_content_descriptor_preferences_updated() const;
  void set_timestamp_content_descriptor_preferences_updated(int32_t value);
  private:
  int32_t _internal_timestamp_content_descriptor_preferences_updated() const;
  void _internal_set_timestamp_content_descriptor_preferences_updated(int32_t value);
  public:

  // optional .EProvideDeckFeedbackPreference provide_deck_feedback = 12 [default = k_EProvideDeckFeedbackPreference_Unset];
  bool has_provide_deck_feedback() const;
  private:
  bool _internal_has_provide_deck_feedback() const;
  public:
  void clear_provide_deck_feedback();
  ::EProvideDeckFeedbackPreference provide_deck_feedback() const;
  void set_provide_deck_feedback(::EProvideDeckFeedbackPreference value);
  private:
  ::EProvideDeckFeedbackPreference _internal_provide_deck_feedback() const;
  void _internal_set_provide_deck_feedback(::EProvideDeckFeedbackPreference value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_UserPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_languages_;
  int32_t primary_language_;
  uint32_t secondary_languages_;
  bool platform_windows_;
  bool platform_mac_;
  bool platform_linux_;
  bool hide_store_broadcast_;
  uint32_t timestamp_updated_;
  int review_score_preference_;
  int32_t timestamp_content_descriptor_preferences_updated_;
  int provide_deck_feedback_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_UserTagPreferences_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_UserTagPreferences.Tag) */ {
 public:
  inline CStore_UserTagPreferences_Tag() : CStore_UserTagPreferences_Tag(nullptr) {}
  ~CStore_UserTagPreferences_Tag() override;
  explicit constexpr CStore_UserTagPreferences_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_UserTagPreferences_Tag(const CStore_UserTagPreferences_Tag& from);
  CStore_UserTagPreferences_Tag(CStore_UserTagPreferences_Tag&& from) noexcept
    : CStore_UserTagPreferences_Tag() {
    *this = ::std::move(from);
  }

  inline CStore_UserTagPreferences_Tag& operator=(const CStore_UserTagPreferences_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_UserTagPreferences_Tag& operator=(CStore_UserTagPreferences_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_UserTagPreferences_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_UserTagPreferences_Tag* internal_default_instance() {
    return reinterpret_cast<const CStore_UserTagPreferences_Tag*>(
               &_CStore_UserTagPreferences_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CStore_UserTagPreferences_Tag& a, CStore_UserTagPreferences_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_UserTagPreferences_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_UserTagPreferences_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_UserTagPreferences_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_UserTagPreferences_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_UserTagPreferences_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_UserTagPreferences_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_UserTagPreferences_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_UserTagPreferences.Tag";
  }
  protected:
  explicit CStore_UserTagPreferences_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTagidFieldNumber = 1,
    kTimestampAddedFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 tagid = 1;
  bool has_tagid() const;
  private:
  bool _internal_has_tagid() const;
  public:
  void clear_tagid();
  uint32_t tagid() const;
  void set_tagid(uint32_t value);
  private:
  uint32_t _internal_tagid() const;
  void _internal_set_tagid(uint32_t value);
  public:

  // optional uint32 timestamp_added = 3;
  bool has_timestamp_added() const;
  private:
  bool _internal_has_timestamp_added() const;
  public:
  void clear_timestamp_added();
  uint32_t timestamp_added() const;
  void set_timestamp_added(uint32_t value);
  private:
  uint32_t _internal_timestamp_added() const;
  void _internal_set_timestamp_added(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_UserTagPreferences.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t tagid_;
  uint32_t timestamp_added_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_UserTagPreferences final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_UserTagPreferences) */ {
 public:
  inline CStore_UserTagPreferences() : CStore_UserTagPreferences(nullptr) {}
  ~CStore_UserTagPreferences() override;
  explicit constexpr CStore_UserTagPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_UserTagPreferences(const CStore_UserTagPreferences& from);
  CStore_UserTagPreferences(CStore_UserTagPreferences&& from) noexcept
    : CStore_UserTagPreferences() {
    *this = ::std::move(from);
  }

  inline CStore_UserTagPreferences& operator=(const CStore_UserTagPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_UserTagPreferences& operator=(CStore_UserTagPreferences&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_UserTagPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_UserTagPreferences* internal_default_instance() {
    return reinterpret_cast<const CStore_UserTagPreferences*>(
               &_CStore_UserTagPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CStore_UserTagPreferences& a, CStore_UserTagPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_UserTagPreferences* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_UserTagPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_UserTagPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_UserTagPreferences>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_UserTagPreferences& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_UserTagPreferences& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_UserTagPreferences* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_UserTagPreferences";
  }
  protected:
  explicit CStore_UserTagPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_UserTagPreferences_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsToExcludeFieldNumber = 1,
  };
  // repeated .CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  int tags_to_exclude_size() const;
  private:
  int _internal_tags_to_exclude_size() const;
  public:
  void clear_tags_to_exclude();
  ::CStore_UserTagPreferences_Tag* mutable_tags_to_exclude(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_UserTagPreferences_Tag >*
      mutable_tags_to_exclude();
  private:
  const ::CStore_UserTagPreferences_Tag& _internal_tags_to_exclude(int index) const;
  ::CStore_UserTagPreferences_Tag* _internal_add_tags_to_exclude();
  public:
  const ::CStore_UserTagPreferences_Tag& tags_to_exclude(int index) const;
  ::CStore_UserTagPreferences_Tag* add_tags_to_exclude();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_UserTagPreferences_Tag >&
      tags_to_exclude() const;

  // @@protoc_insertion_point(class_scope:CStore_UserTagPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_UserTagPreferences_Tag > tags_to_exclude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetStorePreferences_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetStorePreferences_Response) */ {
 public:
  inline CStore_GetStorePreferences_Response() : CStore_GetStorePreferences_Response(nullptr) {}
  ~CStore_GetStorePreferences_Response() override;
  explicit constexpr CStore_GetStorePreferences_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetStorePreferences_Response(const CStore_GetStorePreferences_Response& from);
  CStore_GetStorePreferences_Response(CStore_GetStorePreferences_Response&& from) noexcept
    : CStore_GetStorePreferences_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetStorePreferences_Response& operator=(const CStore_GetStorePreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetStorePreferences_Response& operator=(CStore_GetStorePreferences_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetStorePreferences_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetStorePreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetStorePreferences_Response*>(
               &_CStore_GetStorePreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CStore_GetStorePreferences_Response& a, CStore_GetStorePreferences_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetStorePreferences_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetStorePreferences_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetStorePreferences_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetStorePreferences_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetStorePreferences_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetStorePreferences_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetStorePreferences_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetStorePreferences_Response";
  }
  protected:
  explicit CStore_GetStorePreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
    kTagPreferencesFieldNumber = 2,
    kContentDescriptorPreferencesFieldNumber = 3,
  };
  // optional .CStore_UserPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::CStore_UserPreferences& preferences() const;
  PROTOBUF_NODISCARD ::CStore_UserPreferences* release_preferences();
  ::CStore_UserPreferences* mutable_preferences();
  void set_allocated_preferences(::CStore_UserPreferences* preferences);
  private:
  const ::CStore_UserPreferences& _internal_preferences() const;
  ::CStore_UserPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::CStore_UserPreferences* preferences);
  ::CStore_UserPreferences* unsafe_arena_release_preferences();

  // optional .CStore_UserTagPreferences tag_preferences = 2;
  bool has_tag_preferences() const;
  private:
  bool _internal_has_tag_preferences() const;
  public:
  void clear_tag_preferences();
  const ::CStore_UserTagPreferences& tag_preferences() const;
  PROTOBUF_NODISCARD ::CStore_UserTagPreferences* release_tag_preferences();
  ::CStore_UserTagPreferences* mutable_tag_preferences();
  void set_allocated_tag_preferences(::CStore_UserTagPreferences* tag_preferences);
  private:
  const ::CStore_UserTagPreferences& _internal_tag_preferences() const;
  ::CStore_UserTagPreferences* _internal_mutable_tag_preferences();
  public:
  void unsafe_arena_set_allocated_tag_preferences(
      ::CStore_UserTagPreferences* tag_preferences);
  ::CStore_UserTagPreferences* unsafe_arena_release_tag_preferences();

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
  bool has_content_descriptor_preferences() const;
  private:
  bool _internal_has_content_descriptor_preferences() const;
  public:
  void clear_content_descriptor_preferences();
  const ::UserContentDescriptorPreferences& content_descriptor_preferences() const;
  PROTOBUF_NODISCARD ::UserContentDescriptorPreferences* release_content_descriptor_preferences();
  ::UserContentDescriptorPreferences* mutable_content_descriptor_preferences();
  void set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences);
  private:
  const ::UserContentDescriptorPreferences& _internal_content_descriptor_preferences() const;
  ::UserContentDescriptorPreferences* _internal_mutable_content_descriptor_preferences();
  public:
  void unsafe_arena_set_allocated_content_descriptor_preferences(
      ::UserContentDescriptorPreferences* content_descriptor_preferences);
  ::UserContentDescriptorPreferences* unsafe_arena_release_content_descriptor_preferences();

  // @@protoc_insertion_point(class_scope:CStore_GetStorePreferences_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStore_UserPreferences* preferences_;
  ::CStore_UserTagPreferences* tag_preferences_;
  ::UserContentDescriptorPreferences* content_descriptor_preferences_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTrendingAppsAmongFriends_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTrendingAppsAmongFriends_Request) */ {
 public:
  inline CStore_GetTrendingAppsAmongFriends_Request() : CStore_GetTrendingAppsAmongFriends_Request(nullptr) {}
  ~CStore_GetTrendingAppsAmongFriends_Request() override;
  explicit constexpr CStore_GetTrendingAppsAmongFriends_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTrendingAppsAmongFriends_Request(const CStore_GetTrendingAppsAmongFriends_Request& from);
  CStore_GetTrendingAppsAmongFriends_Request(CStore_GetTrendingAppsAmongFriends_Request&& from) noexcept
    : CStore_GetTrendingAppsAmongFriends_Request() {
    *this = ::std::move(from);
  }

  inline CStore_GetTrendingAppsAmongFriends_Request& operator=(const CStore_GetTrendingAppsAmongFriends_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTrendingAppsAmongFriends_Request& operator=(CStore_GetTrendingAppsAmongFriends_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTrendingAppsAmongFriends_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTrendingAppsAmongFriends_Request* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTrendingAppsAmongFriends_Request*>(
               &_CStore_GetTrendingAppsAmongFriends_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CStore_GetTrendingAppsAmongFriends_Request& a, CStore_GetTrendingAppsAmongFriends_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTrendingAppsAmongFriends_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTrendingAppsAmongFriends_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTrendingAppsAmongFriends_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTrendingAppsAmongFriends_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTrendingAppsAmongFriends_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTrendingAppsAmongFriends_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTrendingAppsAmongFriends_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTrendingAppsAmongFriends_Request";
  }
  protected:
  explicit CStore_GetTrendingAppsAmongFriends_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumAppsFieldNumber = 1,
    kNumTopFriendsFieldNumber = 2,
  };
  // optional uint32 num_apps = 1;
  bool has_num_apps() const;
  private:
  bool _internal_has_num_apps() const;
  public:
  void clear_num_apps();
  uint32_t num_apps() const;
  void set_num_apps(uint32_t value);
  private:
  uint32_t _internal_num_apps() const;
  void _internal_set_num_apps(uint32_t value);
  public:

  // optional uint32 num_top_friends = 2;
  bool has_num_top_friends() const;
  private:
  bool _internal_has_num_top_friends() const;
  public:
  void clear_num_top_friends();
  uint32_t num_top_friends() const;
  void set_num_top_friends(uint32_t value);
  private:
  uint32_t _internal_num_top_friends() const;
  void _internal_set_num_top_friends(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetTrendingAppsAmongFriends_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t num_apps_;
  uint32_t num_top_friends_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData) */ {
 public:
  inline CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData() : CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(nullptr) {}
  ~CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData() override;
  explicit constexpr CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from);
  CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData&& from) noexcept
    : CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData() {
    *this = ::std::move(from);
  }

  inline CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& operator=(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& operator=(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData*>(
               &_CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& a, CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData";
  }
  protected:
  explicit CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidsTopFriendsFieldNumber = 2,
    kAppidFieldNumber = 1,
    kTotalFriendsFieldNumber = 3,
  };
  // repeated uint64 steamids_top_friends = 2;
  int steamids_top_friends_size() const;
  private:
  int _internal_steamids_top_friends_size() const;
  public:
  void clear_steamids_top_friends();
  private:
  uint64_t _internal_steamids_top_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamids_top_friends() const;
  void _internal_add_steamids_top_friends(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamids_top_friends();
  public:
  uint64_t steamids_top_friends(int index) const;
  void set_steamids_top_friends(int index, uint64_t value);
  void add_steamids_top_friends(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamids_top_friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamids_top_friends();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 total_friends = 3;
  bool has_total_friends() const;
  private:
  bool _internal_has_total_friends() const;
  public:
  void clear_total_friends();
  uint32_t total_friends() const;
  void set_total_friends(uint32_t value);
  private:
  uint32_t _internal_total_friends() const;
  void _internal_set_total_friends(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamids_top_friends_;
  uint32_t appid_;
  uint32_t total_friends_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_GetTrendingAppsAmongFriends_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_GetTrendingAppsAmongFriends_Response) */ {
 public:
  inline CStore_GetTrendingAppsAmongFriends_Response() : CStore_GetTrendingAppsAmongFriends_Response(nullptr) {}
  ~CStore_GetTrendingAppsAmongFriends_Response() override;
  explicit constexpr CStore_GetTrendingAppsAmongFriends_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_GetTrendingAppsAmongFriends_Response(const CStore_GetTrendingAppsAmongFriends_Response& from);
  CStore_GetTrendingAppsAmongFriends_Response(CStore_GetTrendingAppsAmongFriends_Response&& from) noexcept
    : CStore_GetTrendingAppsAmongFriends_Response() {
    *this = ::std::move(from);
  }

  inline CStore_GetTrendingAppsAmongFriends_Response& operator=(const CStore_GetTrendingAppsAmongFriends_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_GetTrendingAppsAmongFriends_Response& operator=(CStore_GetTrendingAppsAmongFriends_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_GetTrendingAppsAmongFriends_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_GetTrendingAppsAmongFriends_Response* internal_default_instance() {
    return reinterpret_cast<const CStore_GetTrendingAppsAmongFriends_Response*>(
               &_CStore_GetTrendingAppsAmongFriends_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CStore_GetTrendingAppsAmongFriends_Response& a, CStore_GetTrendingAppsAmongFriends_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_GetTrendingAppsAmongFriends_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_GetTrendingAppsAmongFriends_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_GetTrendingAppsAmongFriends_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_GetTrendingAppsAmongFriends_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_GetTrendingAppsAmongFriends_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_GetTrendingAppsAmongFriends_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_GetTrendingAppsAmongFriends_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_GetTrendingAppsAmongFriends_Response";
  }
  protected:
  explicit CStore_GetTrendingAppsAmongFriends_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData TrendingAppData;

  // accessors -------------------------------------------------------

  enum : int {
    kTrendingAppsFieldNumber = 1,
  };
  // repeated .CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData trending_apps = 1;
  int trending_apps_size() const;
  private:
  int _internal_trending_apps_size() const;
  public:
  void clear_trending_apps();
  ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* mutable_trending_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >*
      mutable_trending_apps();
  private:
  const ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& _internal_trending_apps(int index) const;
  ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* _internal_add_trending_apps();
  public:
  const ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& trending_apps(int index) const;
  ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* add_trending_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >&
      trending_apps() const;

  // @@protoc_insertion_point(class_scope:CStore_GetTrendingAppsAmongFriends_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData > trending_apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamDeckCompatibility_SetFeedback_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamDeckCompatibility_SetFeedback_Request) */ {
 public:
  inline CSteamDeckCompatibility_SetFeedback_Request() : CSteamDeckCompatibility_SetFeedback_Request(nullptr) {}
  ~CSteamDeckCompatibility_SetFeedback_Request() override;
  explicit constexpr CSteamDeckCompatibility_SetFeedback_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamDeckCompatibility_SetFeedback_Request(const CSteamDeckCompatibility_SetFeedback_Request& from);
  CSteamDeckCompatibility_SetFeedback_Request(CSteamDeckCompatibility_SetFeedback_Request&& from) noexcept
    : CSteamDeckCompatibility_SetFeedback_Request() {
    *this = ::std::move(from);
  }

  inline CSteamDeckCompatibility_SetFeedback_Request& operator=(const CSteamDeckCompatibility_SetFeedback_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamDeckCompatibility_SetFeedback_Request& operator=(CSteamDeckCompatibility_SetFeedback_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSteamDeckCompatibility_SetFeedback_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamDeckCompatibility_SetFeedback_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamDeckCompatibility_SetFeedback_Request*>(
               &_CSteamDeckCompatibility_SetFeedback_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CSteamDeckCompatibility_SetFeedback_Request& a, CSteamDeckCompatibility_SetFeedback_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamDeckCompatibility_SetFeedback_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamDeckCompatibility_SetFeedback_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSteamDeckCompatibility_SetFeedback_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSteamDeckCompatibility_SetFeedback_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSteamDeckCompatibility_SetFeedback_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSteamDeckCompatibility_SetFeedback_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamDeckCompatibility_SetFeedback_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamDeckCompatibility_SetFeedback_Request";
  }
  protected:
  explicit CSteamDeckCompatibility_SetFeedback_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kFeedbackFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .ESteamDeckCompatibilityFeedback feedback = 2 [default = k_ESteamDeckCompatibilityFeedback_Unset];
  bool has_feedback() const;
  private:
  bool _internal_has_feedback() const;
  public:
  void clear_feedback();
  ::ESteamDeckCompatibilityFeedback feedback() const;
  void set_feedback(::ESteamDeckCompatibilityFeedback value);
  private:
  ::ESteamDeckCompatibilityFeedback _internal_feedback() const;
  void _internal_set_feedback(::ESteamDeckCompatibilityFeedback value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamDeckCompatibility_SetFeedback_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  int feedback_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamDeckCompatibility_SetFeedback_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSteamDeckCompatibility_SetFeedback_Response) */ {
 public:
  inline CSteamDeckCompatibility_SetFeedback_Response() : CSteamDeckCompatibility_SetFeedback_Response(nullptr) {}
  explicit constexpr CSteamDeckCompatibility_SetFeedback_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamDeckCompatibility_SetFeedback_Response(const CSteamDeckCompatibility_SetFeedback_Response& from);
  CSteamDeckCompatibility_SetFeedback_Response(CSteamDeckCompatibility_SetFeedback_Response&& from) noexcept
    : CSteamDeckCompatibility_SetFeedback_Response() {
    *this = ::std::move(from);
  }

  inline CSteamDeckCompatibility_SetFeedback_Response& operator=(const CSteamDeckCompatibility_SetFeedback_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamDeckCompatibility_SetFeedback_Response& operator=(CSteamDeckCompatibility_SetFeedback_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSteamDeckCompatibility_SetFeedback_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamDeckCompatibility_SetFeedback_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamDeckCompatibility_SetFeedback_Response*>(
               &_CSteamDeckCompatibility_SetFeedback_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CSteamDeckCompatibility_SetFeedback_Response& a, CSteamDeckCompatibility_SetFeedback_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamDeckCompatibility_SetFeedback_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamDeckCompatibility_SetFeedback_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSteamDeckCompatibility_SetFeedback_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSteamDeckCompatibility_SetFeedback_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSteamDeckCompatibility_SetFeedback_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSteamDeckCompatibility_SetFeedback_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamDeckCompatibility_SetFeedback_Response";
  }
  protected:
  explicit CSteamDeckCompatibility_SetFeedback_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSteamDeckCompatibility_SetFeedback_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamDeckCompatibility_ShouldPrompt_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamDeckCompatibility_ShouldPrompt_Request) */ {
 public:
  inline CSteamDeckCompatibility_ShouldPrompt_Request() : CSteamDeckCompatibility_ShouldPrompt_Request(nullptr) {}
  ~CSteamDeckCompatibility_ShouldPrompt_Request() override;
  explicit constexpr CSteamDeckCompatibility_ShouldPrompt_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamDeckCompatibility_ShouldPrompt_Request(const CSteamDeckCompatibility_ShouldPrompt_Request& from);
  CSteamDeckCompatibility_ShouldPrompt_Request(CSteamDeckCompatibility_ShouldPrompt_Request&& from) noexcept
    : CSteamDeckCompatibility_ShouldPrompt_Request() {
    *this = ::std::move(from);
  }

  inline CSteamDeckCompatibility_ShouldPrompt_Request& operator=(const CSteamDeckCompatibility_ShouldPrompt_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamDeckCompatibility_ShouldPrompt_Request& operator=(CSteamDeckCompatibility_ShouldPrompt_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSteamDeckCompatibility_ShouldPrompt_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamDeckCompatibility_ShouldPrompt_Request* internal_default_instance() {
    return reinterpret_cast<const CSteamDeckCompatibility_ShouldPrompt_Request*>(
               &_CSteamDeckCompatibility_ShouldPrompt_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CSteamDeckCompatibility_ShouldPrompt_Request& a, CSteamDeckCompatibility_ShouldPrompt_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamDeckCompatibility_ShouldPrompt_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamDeckCompatibility_ShouldPrompt_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSteamDeckCompatibility_ShouldPrompt_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSteamDeckCompatibility_ShouldPrompt_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSteamDeckCompatibility_ShouldPrompt_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSteamDeckCompatibility_ShouldPrompt_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamDeckCompatibility_ShouldPrompt_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamDeckCompatibility_ShouldPrompt_Request";
  }
  protected:
  explicit CSteamDeckCompatibility_ShouldPrompt_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamDeckCompatibility_ShouldPrompt_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CSteamDeckCompatibility_ShouldPrompt_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteamDeckCompatibility_ShouldPrompt_Response) */ {
 public:
  inline CSteamDeckCompatibility_ShouldPrompt_Response() : CSteamDeckCompatibility_ShouldPrompt_Response(nullptr) {}
  ~CSteamDeckCompatibility_ShouldPrompt_Response() override;
  explicit constexpr CSteamDeckCompatibility_ShouldPrompt_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteamDeckCompatibility_ShouldPrompt_Response(const CSteamDeckCompatibility_ShouldPrompt_Response& from);
  CSteamDeckCompatibility_ShouldPrompt_Response(CSteamDeckCompatibility_ShouldPrompt_Response&& from) noexcept
    : CSteamDeckCompatibility_ShouldPrompt_Response() {
    *this = ::std::move(from);
  }

  inline CSteamDeckCompatibility_ShouldPrompt_Response& operator=(const CSteamDeckCompatibility_ShouldPrompt_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteamDeckCompatibility_ShouldPrompt_Response& operator=(CSteamDeckCompatibility_ShouldPrompt_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSteamDeckCompatibility_ShouldPrompt_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteamDeckCompatibility_ShouldPrompt_Response* internal_default_instance() {
    return reinterpret_cast<const CSteamDeckCompatibility_ShouldPrompt_Response*>(
               &_CSteamDeckCompatibility_ShouldPrompt_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSteamDeckCompatibility_ShouldPrompt_Response& a, CSteamDeckCompatibility_ShouldPrompt_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteamDeckCompatibility_ShouldPrompt_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteamDeckCompatibility_ShouldPrompt_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSteamDeckCompatibility_ShouldPrompt_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSteamDeckCompatibility_ShouldPrompt_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSteamDeckCompatibility_ShouldPrompt_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSteamDeckCompatibility_ShouldPrompt_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteamDeckCompatibility_ShouldPrompt_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteamDeckCompatibility_ShouldPrompt_Response";
  }
  protected:
  explicit CSteamDeckCompatibility_ShouldPrompt_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromptFieldNumber = 1,
    kFeedbackEligibleFieldNumber = 2,
    kExistingFeedbackFieldNumber = 3,
  };
  // optional bool prompt = 1;
  bool has_prompt() const;
  private:
  bool _internal_has_prompt() const;
  public:
  void clear_prompt();
  bool prompt() const;
  void set_prompt(bool value);
  private:
  bool _internal_prompt() const;
  void _internal_set_prompt(bool value);
  public:

  // optional bool feedback_eligible = 2;
  bool has_feedback_eligible() const;
  private:
  bool _internal_has_feedback_eligible() const;
  public:
  void clear_feedback_eligible();
  bool feedback_eligible() const;
  void set_feedback_eligible(bool value);
  private:
  bool _internal_feedback_eligible() const;
  void _internal_set_feedback_eligible(bool value);
  public:

  // optional .ESteamDeckCompatibilityFeedback existing_feedback = 3 [default = k_ESteamDeckCompatibilityFeedback_Unset];
  bool has_existing_feedback() const;
  private:
  bool _internal_has_existing_feedback() const;
  public:
  void clear_existing_feedback();
  ::ESteamDeckCompatibilityFeedback existing_feedback() const;
  void set_existing_feedback(::ESteamDeckCompatibilityFeedback value);
  private:
  ::ESteamDeckCompatibilityFeedback _internal_existing_feedback() const;
  void _internal_set_existing_feedback(::ESteamDeckCompatibilityFeedback value);
  public:

  // @@protoc_insertion_point(class_scope:CSteamDeckCompatibility_ShouldPrompt_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool prompt_;
  bool feedback_eligible_;
  int existing_feedback_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CStore_StorePreferencesChanged_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CStore_StorePreferencesChanged_Notification) */ {
 public:
  inline CStore_StorePreferencesChanged_Notification() : CStore_StorePreferencesChanged_Notification(nullptr) {}
  ~CStore_StorePreferencesChanged_Notification() override;
  explicit constexpr CStore_StorePreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStore_StorePreferencesChanged_Notification(const CStore_StorePreferencesChanged_Notification& from);
  CStore_StorePreferencesChanged_Notification(CStore_StorePreferencesChanged_Notification&& from) noexcept
    : CStore_StorePreferencesChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CStore_StorePreferencesChanged_Notification& operator=(const CStore_StorePreferencesChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStore_StorePreferencesChanged_Notification& operator=(CStore_StorePreferencesChanged_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStore_StorePreferencesChanged_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStore_StorePreferencesChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CStore_StorePreferencesChanged_Notification*>(
               &_CStore_StorePreferencesChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CStore_StorePreferencesChanged_Notification& a, CStore_StorePreferencesChanged_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CStore_StorePreferencesChanged_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStore_StorePreferencesChanged_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStore_StorePreferencesChanged_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStore_StorePreferencesChanged_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStore_StorePreferencesChanged_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStore_StorePreferencesChanged_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStore_StorePreferencesChanged_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CStore_StorePreferencesChanged_Notification";
  }
  protected:
  explicit CStore_StorePreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferencesFieldNumber = 1,
    kTagPreferencesFieldNumber = 2,
    kContentDescriptorPreferencesFieldNumber = 3,
  };
  // optional .CStore_UserPreferences preferences = 1;
  bool has_preferences() const;
  private:
  bool _internal_has_preferences() const;
  public:
  void clear_preferences();
  const ::CStore_UserPreferences& preferences() const;
  PROTOBUF_NODISCARD ::CStore_UserPreferences* release_preferences();
  ::CStore_UserPreferences* mutable_preferences();
  void set_allocated_preferences(::CStore_UserPreferences* preferences);
  private:
  const ::CStore_UserPreferences& _internal_preferences() const;
  ::CStore_UserPreferences* _internal_mutable_preferences();
  public:
  void unsafe_arena_set_allocated_preferences(
      ::CStore_UserPreferences* preferences);
  ::CStore_UserPreferences* unsafe_arena_release_preferences();

  // optional .CStore_UserTagPreferences tag_preferences = 2;
  bool has_tag_preferences() const;
  private:
  bool _internal_has_tag_preferences() const;
  public:
  void clear_tag_preferences();
  const ::CStore_UserTagPreferences& tag_preferences() const;
  PROTOBUF_NODISCARD ::CStore_UserTagPreferences* release_tag_preferences();
  ::CStore_UserTagPreferences* mutable_tag_preferences();
  void set_allocated_tag_preferences(::CStore_UserTagPreferences* tag_preferences);
  private:
  const ::CStore_UserTagPreferences& _internal_tag_preferences() const;
  ::CStore_UserTagPreferences* _internal_mutable_tag_preferences();
  public:
  void unsafe_arena_set_allocated_tag_preferences(
      ::CStore_UserTagPreferences* tag_preferences);
  ::CStore_UserTagPreferences* unsafe_arena_release_tag_preferences();

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
  bool has_content_descriptor_preferences() const;
  private:
  bool _internal_has_content_descriptor_preferences() const;
  public:
  void clear_content_descriptor_preferences();
  const ::UserContentDescriptorPreferences& content_descriptor_preferences() const;
  PROTOBUF_NODISCARD ::UserContentDescriptorPreferences* release_content_descriptor_preferences();
  ::UserContentDescriptorPreferences* mutable_content_descriptor_preferences();
  void set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences);
  private:
  const ::UserContentDescriptorPreferences& _internal_content_descriptor_preferences() const;
  ::UserContentDescriptorPreferences* _internal_mutable_content_descriptor_preferences();
  public:
  void unsafe_arena_set_allocated_content_descriptor_preferences(
      ::UserContentDescriptorPreferences* content_descriptor_preferences);
  ::UserContentDescriptorPreferences* unsafe_arena_release_content_descriptor_preferences();

  // @@protoc_insertion_point(class_scope:CStore_StorePreferencesChanged_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CStore_UserPreferences* preferences_;
  ::CStore_UserTagPreferences* tag_preferences_;
  ::UserContentDescriptorPreferences* content_descriptor_preferences_;
  friend struct ::TableStruct_steammessages_5fstore_2esteamclient_2eproto;
};
// ===================================================================

class Store_Stub;

class Store : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Store() {};
 public:
  virtual ~Store();

  typedef Store_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void RegisterCDKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_RegisterCDKey_Request* request,
                       ::CStore_RegisterCDKey_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMostPopularTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetMostPopularTags_Request* request,
                       ::CStore_GetMostPopularTags_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLocalizedNameForTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetLocalizedNameForTags_Request* request,
                       ::CStore_GetLocalizedNameForTags_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTagList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetTagList_Request* request,
                       ::CStore_GetTagList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDiscoveryQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueue_Request* request,
                       ::CStore_GetDiscoveryQueue_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueueSettings_Request* request,
                       ::CStore_GetDiscoveryQueueSettings_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SkipDiscoveryQueueItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_SkipDiscoveryQueueItem_Request* request,
                       ::CStore_SkipDiscoveryQueueItem_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserGameInterestState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetUserGameInterestState_Request* request,
                       ::CStore_GetUserGameInterestState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDiscoveryQueueSkippedApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueueSkippedApps_Request* request,
                       ::CStore_GetDiscoveryQueueSkippedApps_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetStorePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetStorePreferences_Request* request,
                       ::CStore_GetStorePreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTrendingAppsAmongFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetTrendingAppsAmongFriends_Request* request,
                       ::CStore_GetTrendingAppsAmongFriends_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamDeckCompatibility_SetFeedback_Request* request,
                       ::CSteamDeckCompatibility_SetFeedback_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ShouldPromptForCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamDeckCompatibility_ShouldPrompt_Request* request,
                       ::CSteamDeckCompatibility_ShouldPrompt_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Store);
};

class Store_Stub : public Store {
 public:
  Store_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Store_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Store_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Store ------------------------------------------

  void RegisterCDKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_RegisterCDKey_Request* request,
                       ::CStore_RegisterCDKey_Response* response,
                       ::google::protobuf::Closure* done);
  void GetMostPopularTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetMostPopularTags_Request* request,
                       ::CStore_GetMostPopularTags_Response* response,
                       ::google::protobuf::Closure* done);
  void GetLocalizedNameForTags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetLocalizedNameForTags_Request* request,
                       ::CStore_GetLocalizedNameForTags_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTagList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetTagList_Request* request,
                       ::CStore_GetTagList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDiscoveryQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueue_Request* request,
                       ::CStore_GetDiscoveryQueue_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDiscoveryQueueSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueueSettings_Request* request,
                       ::CStore_GetDiscoveryQueueSettings_Response* response,
                       ::google::protobuf::Closure* done);
  void SkipDiscoveryQueueItem(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_SkipDiscoveryQueueItem_Request* request,
                       ::CStore_SkipDiscoveryQueueItem_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserGameInterestState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetUserGameInterestState_Request* request,
                       ::CStore_GetUserGameInterestState_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDiscoveryQueueSkippedApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetDiscoveryQueueSkippedApps_Request* request,
                       ::CStore_GetDiscoveryQueueSkippedApps_Response* response,
                       ::google::protobuf::Closure* done);
  void GetStorePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetStorePreferences_Request* request,
                       ::CStore_GetStorePreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void GetTrendingAppsAmongFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_GetTrendingAppsAmongFriends_Request* request,
                       ::CStore_GetTrendingAppsAmongFriends_Response* response,
                       ::google::protobuf::Closure* done);
  void SetCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamDeckCompatibility_SetFeedback_Request* request,
                       ::CSteamDeckCompatibility_SetFeedback_Response* response,
                       ::google::protobuf::Closure* done);
  void ShouldPromptForCompatibilityFeedback(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CSteamDeckCompatibility_ShouldPrompt_Request* request,
                       ::CSteamDeckCompatibility_ShouldPrompt_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Store_Stub);
};


// -------------------------------------------------------------------

class StoreClient_Stub;

class StoreClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StoreClient() {};
 public:
  virtual ~StoreClient();

  typedef StoreClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyStorePreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_StorePreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StoreClient);
};

class StoreClient_Stub : public StoreClient {
 public:
  StoreClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  StoreClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~StoreClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements StoreClient ------------------------------------------

  void NotifyStorePreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CStore_StorePreferencesChanged_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StoreClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CStore_RegisterCDKey_Request

// optional string activation_code = 1 [(.description) = "Key string to register on the logged in user\'s account"];
inline bool CStore_RegisterCDKey_Request::_internal_has_activation_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_RegisterCDKey_Request::has_activation_code() const {
  return _internal_has_activation_code();
}
inline void CStore_RegisterCDKey_Request::clear_activation_code() {
  activation_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_RegisterCDKey_Request::activation_code() const {
  // @@protoc_insertion_point(field_get:CStore_RegisterCDKey_Request.activation_code)
  return _internal_activation_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_RegisterCDKey_Request::set_activation_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_RegisterCDKey_Request.activation_code)
}
inline std::string* CStore_RegisterCDKey_Request::mutable_activation_code() {
  std::string* _s = _internal_mutable_activation_code();
  // @@protoc_insertion_point(field_mutable:CStore_RegisterCDKey_Request.activation_code)
  return _s;
}
inline const std::string& CStore_RegisterCDKey_Request::_internal_activation_code() const {
  return activation_code_.Get();
}
inline void CStore_RegisterCDKey_Request::_internal_set_activation_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_RegisterCDKey_Request::_internal_mutable_activation_code() {
  _has_bits_[0] |= 0x00000001u;
  return activation_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_RegisterCDKey_Request::release_activation_code() {
  // @@protoc_insertion_point(field_release:CStore_RegisterCDKey_Request.activation_code)
  if (!_internal_has_activation_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = activation_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_RegisterCDKey_Request::set_allocated_activation_code(std::string* activation_code) {
  if (activation_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activation_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_RegisterCDKey_Request.activation_code)
}

// optional int32 purchase_platform = 2 [(.description) = "EPurchasePlatform for platform of request"];
inline bool CStore_RegisterCDKey_Request::_internal_has_purchase_platform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_RegisterCDKey_Request::has_purchase_platform() const {
  return _internal_has_purchase_platform();
}
inline void CStore_RegisterCDKey_Request::clear_purchase_platform() {
  purchase_platform_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CStore_RegisterCDKey_Request::_internal_purchase_platform() const {
  return purchase_platform_;
}
inline int32_t CStore_RegisterCDKey_Request::purchase_platform() const {
  // @@protoc_insertion_point(field_get:CStore_RegisterCDKey_Request.purchase_platform)
  return _internal_purchase_platform();
}
inline void CStore_RegisterCDKey_Request::_internal_set_purchase_platform(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  purchase_platform_ = value;
}
inline void CStore_RegisterCDKey_Request::set_purchase_platform(int32_t value) {
  _internal_set_purchase_platform(value);
  // @@protoc_insertion_point(field_set:CStore_RegisterCDKey_Request.purchase_platform)
}

// optional bool is_request_from_client = 3 [(.description) = "True if the request was initiated from inside the Steam client"];
inline bool CStore_RegisterCDKey_Request::_internal_has_is_request_from_client() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_RegisterCDKey_Request::has_is_request_from_client() const {
  return _internal_has_is_request_from_client();
}
inline void CStore_RegisterCDKey_Request::clear_is_request_from_client() {
  is_request_from_client_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CStore_RegisterCDKey_Request::_internal_is_request_from_client() const {
  return is_request_from_client_;
}
inline bool CStore_RegisterCDKey_Request::is_request_from_client() const {
  // @@protoc_insertion_point(field_get:CStore_RegisterCDKey_Request.is_request_from_client)
  return _internal_is_request_from_client();
}
inline void CStore_RegisterCDKey_Request::_internal_set_is_request_from_client(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_request_from_client_ = value;
}
inline void CStore_RegisterCDKey_Request::set_is_request_from_client(bool value) {
  _internal_set_is_request_from_client(value);
  // @@protoc_insertion_point(field_set:CStore_RegisterCDKey_Request.is_request_from_client)
}

// -------------------------------------------------------------------

// CStore_PurchaseReceiptInfo_LineItem

// optional uint32 packageid = 1;
inline bool CStore_PurchaseReceiptInfo_LineItem::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo_LineItem::has_packageid() const {
  return _internal_has_packageid();
}
inline void CStore_PurchaseReceiptInfo_LineItem::clear_packageid() {
  packageid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_PurchaseReceiptInfo_LineItem::_internal_packageid() const {
  return packageid_;
}
inline uint32_t CStore_PurchaseReceiptInfo_LineItem::packageid() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.LineItem.packageid)
  return _internal_packageid();
}
inline void CStore_PurchaseReceiptInfo_LineItem::_internal_set_packageid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  packageid_ = value;
}
inline void CStore_PurchaseReceiptInfo_LineItem::set_packageid(uint32_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.LineItem.packageid)
}

// optional uint32 appid = 2;
inline bool CStore_PurchaseReceiptInfo_LineItem::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo_LineItem::has_appid() const {
  return _internal_has_appid();
}
inline void CStore_PurchaseReceiptInfo_LineItem::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStore_PurchaseReceiptInfo_LineItem::_internal_appid() const {
  return appid_;
}
inline uint32_t CStore_PurchaseReceiptInfo_LineItem::appid() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.LineItem.appid)
  return _internal_appid();
}
inline void CStore_PurchaseReceiptInfo_LineItem::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CStore_PurchaseReceiptInfo_LineItem::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.LineItem.appid)
}

// optional string line_item_description = 3;
inline bool CStore_PurchaseReceiptInfo_LineItem::_internal_has_line_item_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo_LineItem::has_line_item_description() const {
  return _internal_has_line_item_description();
}
inline void CStore_PurchaseReceiptInfo_LineItem::clear_line_item_description() {
  line_item_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_PurchaseReceiptInfo_LineItem::line_item_description() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.LineItem.line_item_description)
  return _internal_line_item_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo_LineItem::set_line_item_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 line_item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.LineItem.line_item_description)
}
inline std::string* CStore_PurchaseReceiptInfo_LineItem::mutable_line_item_description() {
  std::string* _s = _internal_mutable_line_item_description();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.LineItem.line_item_description)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo_LineItem::_internal_line_item_description() const {
  return line_item_description_.Get();
}
inline void CStore_PurchaseReceiptInfo_LineItem::_internal_set_line_item_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  line_item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo_LineItem::_internal_mutable_line_item_description() {
  _has_bits_[0] |= 0x00000001u;
  return line_item_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo_LineItem::release_line_item_description() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.LineItem.line_item_description)
  if (!_internal_has_line_item_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = line_item_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (line_item_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    line_item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo_LineItem::set_allocated_line_item_description(std::string* line_item_description) {
  if (line_item_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  line_item_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_item_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (line_item_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    line_item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.LineItem.line_item_description)
}

// -------------------------------------------------------------------

// CStore_PurchaseReceiptInfo

// optional uint64 transactionid = 1;
inline bool CStore_PurchaseReceiptInfo::_internal_has_transactionid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_transactionid() const {
  return _internal_has_transactionid();
}
inline void CStore_PurchaseReceiptInfo::clear_transactionid() {
  transactionid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CStore_PurchaseReceiptInfo::_internal_transactionid() const {
  return transactionid_;
}
inline uint64_t CStore_PurchaseReceiptInfo::transactionid() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.transactionid)
  return _internal_transactionid();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_transactionid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  transactionid_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_transactionid(uint64_t value) {
  _internal_set_transactionid(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.transactionid)
}

// optional uint32 packageid = 2;
inline bool CStore_PurchaseReceiptInfo::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_packageid() const {
  return _internal_has_packageid();
}
inline void CStore_PurchaseReceiptInfo::clear_packageid() {
  packageid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_packageid() const {
  return packageid_;
}
inline uint32_t CStore_PurchaseReceiptInfo::packageid() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.packageid)
  return _internal_packageid();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_packageid(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  packageid_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_packageid(uint32_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.packageid)
}

// optional uint32 purchase_status = 3;
inline bool CStore_PurchaseReceiptInfo::_internal_has_purchase_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_purchase_status() const {
  return _internal_has_purchase_status();
}
inline void CStore_PurchaseReceiptInfo::clear_purchase_status() {
  purchase_status_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_purchase_status() const {
  return purchase_status_;
}
inline uint32_t CStore_PurchaseReceiptInfo::purchase_status() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.purchase_status)
  return _internal_purchase_status();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_purchase_status(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  purchase_status_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_purchase_status(uint32_t value) {
  _internal_set_purchase_status(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.purchase_status)
}

// optional uint32 result_detail = 4;
inline bool CStore_PurchaseReceiptInfo::_internal_has_result_detail() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_result_detail() const {
  return _internal_has_result_detail();
}
inline void CStore_PurchaseReceiptInfo::clear_result_detail() {
  result_detail_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_result_detail() const {
  return result_detail_;
}
inline uint32_t CStore_PurchaseReceiptInfo::result_detail() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.result_detail)
  return _internal_result_detail();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_result_detail(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  result_detail_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_result_detail(uint32_t value) {
  _internal_set_result_detail(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.result_detail)
}

// optional uint32 transaction_time = 5;
inline bool CStore_PurchaseReceiptInfo::_internal_has_transaction_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_transaction_time() const {
  return _internal_has_transaction_time();
}
inline void CStore_PurchaseReceiptInfo::clear_transaction_time() {
  transaction_time_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_transaction_time() const {
  return transaction_time_;
}
inline uint32_t CStore_PurchaseReceiptInfo::transaction_time() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.transaction_time)
  return _internal_transaction_time();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_transaction_time(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  transaction_time_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_transaction_time(uint32_t value) {
  _internal_set_transaction_time(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.transaction_time)
}

// optional uint32 payment_method = 6;
inline bool CStore_PurchaseReceiptInfo::_internal_has_payment_method() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_payment_method() const {
  return _internal_has_payment_method();
}
inline void CStore_PurchaseReceiptInfo::clear_payment_method() {
  payment_method_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_payment_method() const {
  return payment_method_;
}
inline uint32_t CStore_PurchaseReceiptInfo::payment_method() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.payment_method)
  return _internal_payment_method();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_payment_method(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  payment_method_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_payment_method(uint32_t value) {
  _internal_set_payment_method(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.payment_method)
}

// optional uint64 base_price = 7;
inline bool CStore_PurchaseReceiptInfo::_internal_has_base_price() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_base_price() const {
  return _internal_has_base_price();
}
inline void CStore_PurchaseReceiptInfo::clear_base_price() {
  base_price_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CStore_PurchaseReceiptInfo::_internal_base_price() const {
  return base_price_;
}
inline uint64_t CStore_PurchaseReceiptInfo::base_price() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.base_price)
  return _internal_base_price();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_base_price(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  base_price_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_base_price(uint64_t value) {
  _internal_set_base_price(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.base_price)
}

// optional uint64 total_discount = 8;
inline bool CStore_PurchaseReceiptInfo::_internal_has_total_discount() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_total_discount() const {
  return _internal_has_total_discount();
}
inline void CStore_PurchaseReceiptInfo::clear_total_discount() {
  total_discount_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CStore_PurchaseReceiptInfo::_internal_total_discount() const {
  return total_discount_;
}
inline uint64_t CStore_PurchaseReceiptInfo::total_discount() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.total_discount)
  return _internal_total_discount();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_total_discount(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  total_discount_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_total_discount(uint64_t value) {
  _internal_set_total_discount(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.total_discount)
}

// optional uint64 tax = 9;
inline bool CStore_PurchaseReceiptInfo::_internal_has_tax() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_tax() const {
  return _internal_has_tax();
}
inline void CStore_PurchaseReceiptInfo::clear_tax() {
  tax_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CStore_PurchaseReceiptInfo::_internal_tax() const {
  return tax_;
}
inline uint64_t CStore_PurchaseReceiptInfo::tax() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.tax)
  return _internal_tax();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_tax(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  tax_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_tax(uint64_t value) {
  _internal_set_tax(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.tax)
}

// optional uint64 shipping = 10;
inline bool CStore_PurchaseReceiptInfo::_internal_has_shipping() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_shipping() const {
  return _internal_has_shipping();
}
inline void CStore_PurchaseReceiptInfo::clear_shipping() {
  shipping_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CStore_PurchaseReceiptInfo::_internal_shipping() const {
  return shipping_;
}
inline uint64_t CStore_PurchaseReceiptInfo::shipping() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.shipping)
  return _internal_shipping();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_shipping(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  shipping_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_shipping(uint64_t value) {
  _internal_set_shipping(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.shipping)
}

// optional uint32 currency_code = 11;
inline bool CStore_PurchaseReceiptInfo::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CStore_PurchaseReceiptInfo::clear_currency_code() {
  currency_code_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_currency_code() const {
  return currency_code_;
}
inline uint32_t CStore_PurchaseReceiptInfo::currency_code() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.currency_code)
  return _internal_currency_code();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_currency_code(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  currency_code_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_currency_code(uint32_t value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.currency_code)
}

// optional string country_code = 12;
inline bool CStore_PurchaseReceiptInfo::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_country_code() const {
  return _internal_has_country_code();
}
inline void CStore_PurchaseReceiptInfo::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_PurchaseReceiptInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.country_code)
}
inline std::string* CStore_PurchaseReceiptInfo::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.country_code)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo::_internal_country_code() const {
  return country_code_.Get();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.country_code)
}

// optional string error_headline = 13;
inline bool CStore_PurchaseReceiptInfo::_internal_has_error_headline() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_error_headline() const {
  return _internal_has_error_headline();
}
inline void CStore_PurchaseReceiptInfo::clear_error_headline() {
  error_headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStore_PurchaseReceiptInfo::error_headline() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.error_headline)
  return _internal_error_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo::set_error_headline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 error_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.error_headline)
}
inline std::string* CStore_PurchaseReceiptInfo::mutable_error_headline() {
  std::string* _s = _internal_mutable_error_headline();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.error_headline)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo::_internal_error_headline() const {
  return error_headline_.Get();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_error_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::_internal_mutable_error_headline() {
  _has_bits_[0] |= 0x00000002u;
  return error_headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::release_error_headline() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.error_headline)
  if (!_internal_has_error_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = error_headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo::set_allocated_error_headline(std::string* error_headline) {
  if (error_headline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_headline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.error_headline)
}

// optional string error_string = 14;
inline bool CStore_PurchaseReceiptInfo::_internal_has_error_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_error_string() const {
  return _internal_has_error_string();
}
inline void CStore_PurchaseReceiptInfo::clear_error_string() {
  error_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CStore_PurchaseReceiptInfo::error_string() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.error_string)
  return _internal_error_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo::set_error_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 error_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.error_string)
}
inline std::string* CStore_PurchaseReceiptInfo::mutable_error_string() {
  std::string* _s = _internal_mutable_error_string();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.error_string)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo::_internal_error_string() const {
  return error_string_.Get();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_error_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::_internal_mutable_error_string() {
  _has_bits_[0] |= 0x00000004u;
  return error_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::release_error_string() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.error_string)
  if (!_internal_has_error_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = error_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo::set_allocated_error_string(std::string* error_string) {
  if (error_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.error_string)
}

// optional string error_link_text = 15;
inline bool CStore_PurchaseReceiptInfo::_internal_has_error_link_text() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_error_link_text() const {
  return _internal_has_error_link_text();
}
inline void CStore_PurchaseReceiptInfo::clear_error_link_text() {
  error_link_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CStore_PurchaseReceiptInfo::error_link_text() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.error_link_text)
  return _internal_error_link_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo::set_error_link_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 error_link_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.error_link_text)
}
inline std::string* CStore_PurchaseReceiptInfo::mutable_error_link_text() {
  std::string* _s = _internal_mutable_error_link_text();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.error_link_text)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo::_internal_error_link_text() const {
  return error_link_text_.Get();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_error_link_text(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  error_link_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::_internal_mutable_error_link_text() {
  _has_bits_[0] |= 0x00000008u;
  return error_link_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::release_error_link_text() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.error_link_text)
  if (!_internal_has_error_link_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = error_link_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_link_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_link_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo::set_allocated_error_link_text(std::string* error_link_text) {
  if (error_link_text != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  error_link_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_link_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_link_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_link_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.error_link_text)
}

// optional string error_link_url = 16;
inline bool CStore_PurchaseReceiptInfo::_internal_has_error_link_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_error_link_url() const {
  return _internal_has_error_link_url();
}
inline void CStore_PurchaseReceiptInfo::clear_error_link_url() {
  error_link_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CStore_PurchaseReceiptInfo::error_link_url() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.error_link_url)
  return _internal_error_link_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_PurchaseReceiptInfo::set_error_link_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 error_link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.error_link_url)
}
inline std::string* CStore_PurchaseReceiptInfo::mutable_error_link_url() {
  std::string* _s = _internal_mutable_error_link_url();
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.error_link_url)
  return _s;
}
inline const std::string& CStore_PurchaseReceiptInfo::_internal_error_link_url() const {
  return error_link_url_.Get();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_error_link_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  error_link_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::_internal_mutable_error_link_url() {
  _has_bits_[0] |= 0x00000010u;
  return error_link_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_PurchaseReceiptInfo::release_error_link_url() {
  // @@protoc_insertion_point(field_release:CStore_PurchaseReceiptInfo.error_link_url)
  if (!_internal_has_error_link_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = error_link_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_PurchaseReceiptInfo::set_allocated_error_link_url(std::string* error_link_url) {
  if (error_link_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  error_link_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_link_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_link_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_link_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_PurchaseReceiptInfo.error_link_url)
}

// optional uint32 error_appid = 17;
inline bool CStore_PurchaseReceiptInfo::_internal_has_error_appid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CStore_PurchaseReceiptInfo::has_error_appid() const {
  return _internal_has_error_appid();
}
inline void CStore_PurchaseReceiptInfo::clear_error_appid() {
  error_appid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CStore_PurchaseReceiptInfo::_internal_error_appid() const {
  return error_appid_;
}
inline uint32_t CStore_PurchaseReceiptInfo::error_appid() const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.error_appid)
  return _internal_error_appid();
}
inline void CStore_PurchaseReceiptInfo::_internal_set_error_appid(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  error_appid_ = value;
}
inline void CStore_PurchaseReceiptInfo::set_error_appid(uint32_t value) {
  _internal_set_error_appid(value);
  // @@protoc_insertion_point(field_set:CStore_PurchaseReceiptInfo.error_appid)
}

// repeated .CStore_PurchaseReceiptInfo.LineItem line_items = 18;
inline int CStore_PurchaseReceiptInfo::_internal_line_items_size() const {
  return line_items_.size();
}
inline int CStore_PurchaseReceiptInfo::line_items_size() const {
  return _internal_line_items_size();
}
inline void CStore_PurchaseReceiptInfo::clear_line_items() {
  line_items_.Clear();
}
inline ::CStore_PurchaseReceiptInfo_LineItem* CStore_PurchaseReceiptInfo::mutable_line_items(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_PurchaseReceiptInfo.line_items)
  return line_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_PurchaseReceiptInfo_LineItem >*
CStore_PurchaseReceiptInfo::mutable_line_items() {
  // @@protoc_insertion_point(field_mutable_list:CStore_PurchaseReceiptInfo.line_items)
  return &line_items_;
}
inline const ::CStore_PurchaseReceiptInfo_LineItem& CStore_PurchaseReceiptInfo::_internal_line_items(int index) const {
  return line_items_.Get(index);
}
inline const ::CStore_PurchaseReceiptInfo_LineItem& CStore_PurchaseReceiptInfo::line_items(int index) const {
  // @@protoc_insertion_point(field_get:CStore_PurchaseReceiptInfo.line_items)
  return _internal_line_items(index);
}
inline ::CStore_PurchaseReceiptInfo_LineItem* CStore_PurchaseReceiptInfo::_internal_add_line_items() {
  return line_items_.Add();
}
inline ::CStore_PurchaseReceiptInfo_LineItem* CStore_PurchaseReceiptInfo::add_line_items() {
  ::CStore_PurchaseReceiptInfo_LineItem* _add = _internal_add_line_items();
  // @@protoc_insertion_point(field_add:CStore_PurchaseReceiptInfo.line_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_PurchaseReceiptInfo_LineItem >&
CStore_PurchaseReceiptInfo::line_items() const {
  // @@protoc_insertion_point(field_list:CStore_PurchaseReceiptInfo.line_items)
  return line_items_;
}

// -------------------------------------------------------------------

// CStore_RegisterCDKey_Response

// optional int32 purchase_result_details = 1 [(.description) = "EPurchaseResultDetails from key activation"];
inline bool CStore_RegisterCDKey_Response::_internal_has_purchase_result_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_RegisterCDKey_Response::has_purchase_result_details() const {
  return _internal_has_purchase_result_details();
}
inline void CStore_RegisterCDKey_Response::clear_purchase_result_details() {
  purchase_result_details_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CStore_RegisterCDKey_Response::_internal_purchase_result_details() const {
  return purchase_result_details_;
}
inline int32_t CStore_RegisterCDKey_Response::purchase_result_details() const {
  // @@protoc_insertion_point(field_get:CStore_RegisterCDKey_Response.purchase_result_details)
  return _internal_purchase_result_details();
}
inline void CStore_RegisterCDKey_Response::_internal_set_purchase_result_details(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  purchase_result_details_ = value;
}
inline void CStore_RegisterCDKey_Response::set_purchase_result_details(int32_t value) {
  _internal_set_purchase_result_details(value);
  // @@protoc_insertion_point(field_set:CStore_RegisterCDKey_Response.purchase_result_details)
}

// optional .CStore_PurchaseReceiptInfo purchase_receipt_info = 2 [(.description) = "Purchase receipt info"];
inline bool CStore_RegisterCDKey_Response::_internal_has_purchase_receipt_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || purchase_receipt_info_ != nullptr);
  return value;
}
inline bool CStore_RegisterCDKey_Response::has_purchase_receipt_info() const {
  return _internal_has_purchase_receipt_info();
}
inline void CStore_RegisterCDKey_Response::clear_purchase_receipt_info() {
  if (purchase_receipt_info_ != nullptr) purchase_receipt_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CStore_PurchaseReceiptInfo& CStore_RegisterCDKey_Response::_internal_purchase_receipt_info() const {
  const ::CStore_PurchaseReceiptInfo* p = purchase_receipt_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStore_PurchaseReceiptInfo&>(
      ::_CStore_PurchaseReceiptInfo_default_instance_);
}
inline const ::CStore_PurchaseReceiptInfo& CStore_RegisterCDKey_Response::purchase_receipt_info() const {
  // @@protoc_insertion_point(field_get:CStore_RegisterCDKey_Response.purchase_receipt_info)
  return _internal_purchase_receipt_info();
}
inline void CStore_RegisterCDKey_Response::unsafe_arena_set_allocated_purchase_receipt_info(
    ::CStore_PurchaseReceiptInfo* purchase_receipt_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(purchase_receipt_info_);
  }
  purchase_receipt_info_ = purchase_receipt_info;
  if (purchase_receipt_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_RegisterCDKey_Response.purchase_receipt_info)
}
inline ::CStore_PurchaseReceiptInfo* CStore_RegisterCDKey_Response::release_purchase_receipt_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_PurchaseReceiptInfo* temp = purchase_receipt_info_;
  purchase_receipt_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStore_PurchaseReceiptInfo* CStore_RegisterCDKey_Response::unsafe_arena_release_purchase_receipt_info() {
  // @@protoc_insertion_point(field_release:CStore_RegisterCDKey_Response.purchase_receipt_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_PurchaseReceiptInfo* temp = purchase_receipt_info_;
  purchase_receipt_info_ = nullptr;
  return temp;
}
inline ::CStore_PurchaseReceiptInfo* CStore_RegisterCDKey_Response::_internal_mutable_purchase_receipt_info() {
  _has_bits_[0] |= 0x00000001u;
  if (purchase_receipt_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStore_PurchaseReceiptInfo>(GetArenaForAllocation());
    purchase_receipt_info_ = p;
  }
  return purchase_receipt_info_;
}
inline ::CStore_PurchaseReceiptInfo* CStore_RegisterCDKey_Response::mutable_purchase_receipt_info() {
  ::CStore_PurchaseReceiptInfo* _msg = _internal_mutable_purchase_receipt_info();
  // @@protoc_insertion_point(field_mutable:CStore_RegisterCDKey_Response.purchase_receipt_info)
  return _msg;
}
inline void CStore_RegisterCDKey_Response::set_allocated_purchase_receipt_info(::CStore_PurchaseReceiptInfo* purchase_receipt_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete purchase_receipt_info_;
  }
  if (purchase_receipt_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStore_PurchaseReceiptInfo>::GetOwningArena(purchase_receipt_info);
    if (message_arena != submessage_arena) {
      purchase_receipt_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purchase_receipt_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  purchase_receipt_info_ = purchase_receipt_info;
  // @@protoc_insertion_point(field_set_allocated:CStore_RegisterCDKey_Response.purchase_receipt_info)
}

// -------------------------------------------------------------------

// CStore_GetMostPopularTags_Request

// optional string language = 1;
inline bool CStore_GetMostPopularTags_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetMostPopularTags_Request::has_language() const {
  return _internal_has_language();
}
inline void CStore_GetMostPopularTags_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetMostPopularTags_Request::language() const {
  // @@protoc_insertion_point(field_get:CStore_GetMostPopularTags_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetMostPopularTags_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetMostPopularTags_Request.language)
}
inline std::string* CStore_GetMostPopularTags_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CStore_GetMostPopularTags_Request.language)
  return _s;
}
inline const std::string& CStore_GetMostPopularTags_Request::_internal_language() const {
  return language_.Get();
}
inline void CStore_GetMostPopularTags_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetMostPopularTags_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetMostPopularTags_Request::release_language() {
  // @@protoc_insertion_point(field_release:CStore_GetMostPopularTags_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetMostPopularTags_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetMostPopularTags_Request.language)
}

// -------------------------------------------------------------------

// CStore_GetMostPopularTags_Response_Tag

// optional uint32 tagid = 1;
inline bool CStore_GetMostPopularTags_Response_Tag::_internal_has_tagid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetMostPopularTags_Response_Tag::has_tagid() const {
  return _internal_has_tagid();
}
inline void CStore_GetMostPopularTags_Response_Tag::clear_tagid() {
  tagid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_GetMostPopularTags_Response_Tag::_internal_tagid() const {
  return tagid_;
}
inline uint32_t CStore_GetMostPopularTags_Response_Tag::tagid() const {
  // @@protoc_insertion_point(field_get:CStore_GetMostPopularTags_Response.Tag.tagid)
  return _internal_tagid();
}
inline void CStore_GetMostPopularTags_Response_Tag::_internal_set_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tagid_ = value;
}
inline void CStore_GetMostPopularTags_Response_Tag::set_tagid(uint32_t value) {
  _internal_set_tagid(value);
  // @@protoc_insertion_point(field_set:CStore_GetMostPopularTags_Response.Tag.tagid)
}

// optional string name = 2;
inline bool CStore_GetMostPopularTags_Response_Tag::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetMostPopularTags_Response_Tag::has_name() const {
  return _internal_has_name();
}
inline void CStore_GetMostPopularTags_Response_Tag::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetMostPopularTags_Response_Tag::name() const {
  // @@protoc_insertion_point(field_get:CStore_GetMostPopularTags_Response.Tag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetMostPopularTags_Response_Tag::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetMostPopularTags_Response.Tag.name)
}
inline std::string* CStore_GetMostPopularTags_Response_Tag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CStore_GetMostPopularTags_Response.Tag.name)
  return _s;
}
inline const std::string& CStore_GetMostPopularTags_Response_Tag::_internal_name() const {
  return name_.Get();
}
inline void CStore_GetMostPopularTags_Response_Tag::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetMostPopularTags_Response_Tag::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetMostPopularTags_Response_Tag::release_name() {
  // @@protoc_insertion_point(field_release:CStore_GetMostPopularTags_Response.Tag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetMostPopularTags_Response_Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetMostPopularTags_Response.Tag.name)
}

// -------------------------------------------------------------------

// CStore_GetMostPopularTags_Response

// repeated .CStore_GetMostPopularTags_Response.Tag tags = 1;
inline int CStore_GetMostPopularTags_Response::_internal_tags_size() const {
  return tags_.size();
}
inline int CStore_GetMostPopularTags_Response::tags_size() const {
  return _internal_tags_size();
}
inline void CStore_GetMostPopularTags_Response::clear_tags() {
  tags_.Clear();
}
inline ::CStore_GetMostPopularTags_Response_Tag* CStore_GetMostPopularTags_Response::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_GetMostPopularTags_Response.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetMostPopularTags_Response_Tag >*
CStore_GetMostPopularTags_Response::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetMostPopularTags_Response.tags)
  return &tags_;
}
inline const ::CStore_GetMostPopularTags_Response_Tag& CStore_GetMostPopularTags_Response::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CStore_GetMostPopularTags_Response_Tag& CStore_GetMostPopularTags_Response::tags(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetMostPopularTags_Response.tags)
  return _internal_tags(index);
}
inline ::CStore_GetMostPopularTags_Response_Tag* CStore_GetMostPopularTags_Response::_internal_add_tags() {
  return tags_.Add();
}
inline ::CStore_GetMostPopularTags_Response_Tag* CStore_GetMostPopularTags_Response::add_tags() {
  ::CStore_GetMostPopularTags_Response_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:CStore_GetMostPopularTags_Response.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetMostPopularTags_Response_Tag >&
CStore_GetMostPopularTags_Response::tags() const {
  // @@protoc_insertion_point(field_list:CStore_GetMostPopularTags_Response.tags)
  return tags_;
}

// -------------------------------------------------------------------

// CStore_GetLocalizedNameForTags_Request

// optional string language = 1;
inline bool CStore_GetLocalizedNameForTags_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetLocalizedNameForTags_Request::has_language() const {
  return _internal_has_language();
}
inline void CStore_GetLocalizedNameForTags_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetLocalizedNameForTags_Request::language() const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetLocalizedNameForTags_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Request.language)
}
inline std::string* CStore_GetLocalizedNameForTags_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CStore_GetLocalizedNameForTags_Request.language)
  return _s;
}
inline const std::string& CStore_GetLocalizedNameForTags_Request::_internal_language() const {
  return language_.Get();
}
inline void CStore_GetLocalizedNameForTags_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Request::release_language() {
  // @@protoc_insertion_point(field_release:CStore_GetLocalizedNameForTags_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetLocalizedNameForTags_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetLocalizedNameForTags_Request.language)
}

// repeated uint32 tagids = 2;
inline int CStore_GetLocalizedNameForTags_Request::_internal_tagids_size() const {
  return tagids_.size();
}
inline int CStore_GetLocalizedNameForTags_Request::tagids_size() const {
  return _internal_tagids_size();
}
inline void CStore_GetLocalizedNameForTags_Request::clear_tagids() {
  tagids_.Clear();
}
inline uint32_t CStore_GetLocalizedNameForTags_Request::_internal_tagids(int index) const {
  return tagids_.Get(index);
}
inline uint32_t CStore_GetLocalizedNameForTags_Request::tagids(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Request.tagids)
  return _internal_tagids(index);
}
inline void CStore_GetLocalizedNameForTags_Request::set_tagids(int index, uint32_t value) {
  tagids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Request.tagids)
}
inline void CStore_GetLocalizedNameForTags_Request::_internal_add_tagids(uint32_t value) {
  tagids_.Add(value);
}
inline void CStore_GetLocalizedNameForTags_Request::add_tagids(uint32_t value) {
  _internal_add_tagids(value);
  // @@protoc_insertion_point(field_add:CStore_GetLocalizedNameForTags_Request.tagids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetLocalizedNameForTags_Request::_internal_tagids() const {
  return tagids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetLocalizedNameForTags_Request::tagids() const {
  // @@protoc_insertion_point(field_list:CStore_GetLocalizedNameForTags_Request.tagids)
  return _internal_tagids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetLocalizedNameForTags_Request::_internal_mutable_tagids() {
  return &tagids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetLocalizedNameForTags_Request::mutable_tagids() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetLocalizedNameForTags_Request.tagids)
  return _internal_mutable_tagids();
}

// -------------------------------------------------------------------

// CStore_GetLocalizedNameForTags_Response_Tag

// optional uint32 tagid = 1;
inline bool CStore_GetLocalizedNameForTags_Response_Tag::_internal_has_tagid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_GetLocalizedNameForTags_Response_Tag::has_tagid() const {
  return _internal_has_tagid();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::clear_tagid() {
  tagid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CStore_GetLocalizedNameForTags_Response_Tag::_internal_tagid() const {
  return tagid_;
}
inline uint32_t CStore_GetLocalizedNameForTags_Response_Tag::tagid() const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Response.Tag.tagid)
  return _internal_tagid();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::_internal_set_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  tagid_ = value;
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::set_tagid(uint32_t value) {
  _internal_set_tagid(value);
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Response.Tag.tagid)
}

// optional string english_name = 2;
inline bool CStore_GetLocalizedNameForTags_Response_Tag::_internal_has_english_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetLocalizedNameForTags_Response_Tag::has_english_name() const {
  return _internal_has_english_name();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::clear_english_name() {
  english_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::english_name() const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Response.Tag.english_name)
  return _internal_english_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetLocalizedNameForTags_Response_Tag::set_english_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 english_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Response.Tag.english_name)
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::mutable_english_name() {
  std::string* _s = _internal_mutable_english_name();
  // @@protoc_insertion_point(field_mutable:CStore_GetLocalizedNameForTags_Response.Tag.english_name)
  return _s;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::_internal_english_name() const {
  return english_name_.Get();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::_internal_set_english_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  english_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::_internal_mutable_english_name() {
  _has_bits_[0] |= 0x00000001u;
  return english_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::release_english_name() {
  // @@protoc_insertion_point(field_release:CStore_GetLocalizedNameForTags_Response.Tag.english_name)
  if (!_internal_has_english_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = english_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (english_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    english_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::set_allocated_english_name(std::string* english_name) {
  if (english_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  english_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), english_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (english_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    english_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetLocalizedNameForTags_Response.Tag.english_name)
}

// optional string name = 3;
inline bool CStore_GetLocalizedNameForTags_Response_Tag::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetLocalizedNameForTags_Response_Tag::has_name() const {
  return _internal_has_name();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::name() const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Response.Tag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetLocalizedNameForTags_Response_Tag::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Response.Tag.name)
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CStore_GetLocalizedNameForTags_Response.Tag.name)
  return _s;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::_internal_name() const {
  return name_.Get();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::release_name() {
  // @@protoc_insertion_point(field_release:CStore_GetLocalizedNameForTags_Response.Tag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetLocalizedNameForTags_Response.Tag.name)
}

// optional string normalized_name = 4 [(.description) = "english_name, lowercase, with homoglyphs replaced and spaces and some punctuation removed."];
inline bool CStore_GetLocalizedNameForTags_Response_Tag::_internal_has_normalized_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_GetLocalizedNameForTags_Response_Tag::has_normalized_name() const {
  return _internal_has_normalized_name();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::clear_normalized_name() {
  normalized_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::normalized_name() const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Response.Tag.normalized_name)
  return _internal_normalized_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetLocalizedNameForTags_Response_Tag::set_normalized_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 normalized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetLocalizedNameForTags_Response.Tag.normalized_name)
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::mutable_normalized_name() {
  std::string* _s = _internal_mutable_normalized_name();
  // @@protoc_insertion_point(field_mutable:CStore_GetLocalizedNameForTags_Response.Tag.normalized_name)
  return _s;
}
inline const std::string& CStore_GetLocalizedNameForTags_Response_Tag::_internal_normalized_name() const {
  return normalized_name_.Get();
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::_internal_set_normalized_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  normalized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::_internal_mutable_normalized_name() {
  _has_bits_[0] |= 0x00000004u;
  return normalized_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetLocalizedNameForTags_Response_Tag::release_normalized_name() {
  // @@protoc_insertion_point(field_release:CStore_GetLocalizedNameForTags_Response.Tag.normalized_name)
  if (!_internal_has_normalized_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = normalized_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (normalized_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    normalized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetLocalizedNameForTags_Response_Tag::set_allocated_normalized_name(std::string* normalized_name) {
  if (normalized_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  normalized_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normalized_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (normalized_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    normalized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetLocalizedNameForTags_Response.Tag.normalized_name)
}

// -------------------------------------------------------------------

// CStore_GetLocalizedNameForTags_Response

// repeated .CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
inline int CStore_GetLocalizedNameForTags_Response::_internal_tags_size() const {
  return tags_.size();
}
inline int CStore_GetLocalizedNameForTags_Response::tags_size() const {
  return _internal_tags_size();
}
inline void CStore_GetLocalizedNameForTags_Response::clear_tags() {
  tags_.Clear();
}
inline ::CStore_GetLocalizedNameForTags_Response_Tag* CStore_GetLocalizedNameForTags_Response::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_GetLocalizedNameForTags_Response.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetLocalizedNameForTags_Response_Tag >*
CStore_GetLocalizedNameForTags_Response::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetLocalizedNameForTags_Response.tags)
  return &tags_;
}
inline const ::CStore_GetLocalizedNameForTags_Response_Tag& CStore_GetLocalizedNameForTags_Response::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CStore_GetLocalizedNameForTags_Response_Tag& CStore_GetLocalizedNameForTags_Response::tags(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetLocalizedNameForTags_Response.tags)
  return _internal_tags(index);
}
inline ::CStore_GetLocalizedNameForTags_Response_Tag* CStore_GetLocalizedNameForTags_Response::_internal_add_tags() {
  return tags_.Add();
}
inline ::CStore_GetLocalizedNameForTags_Response_Tag* CStore_GetLocalizedNameForTags_Response::add_tags() {
  ::CStore_GetLocalizedNameForTags_Response_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:CStore_GetLocalizedNameForTags_Response.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetLocalizedNameForTags_Response_Tag >&
CStore_GetLocalizedNameForTags_Response::tags() const {
  // @@protoc_insertion_point(field_list:CStore_GetLocalizedNameForTags_Response.tags)
  return tags_;
}

// -------------------------------------------------------------------

// CStore_GetTagList_Request

// optional string language = 1;
inline bool CStore_GetTagList_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetTagList_Request::has_language() const {
  return _internal_has_language();
}
inline void CStore_GetTagList_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetTagList_Request::language() const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetTagList_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetTagList_Request.language)
}
inline std::string* CStore_GetTagList_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CStore_GetTagList_Request.language)
  return _s;
}
inline const std::string& CStore_GetTagList_Request::_internal_language() const {
  return language_.Get();
}
inline void CStore_GetTagList_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Request::release_language() {
  // @@protoc_insertion_point(field_release:CStore_GetTagList_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetTagList_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetTagList_Request.language)
}

// optional string have_version_hash = 2 [(.description) = "The hash returned in the last call.  Will return no results if the list hasn\'t changed."];
inline bool CStore_GetTagList_Request::_internal_has_have_version_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetTagList_Request::has_have_version_hash() const {
  return _internal_has_have_version_hash();
}
inline void CStore_GetTagList_Request::clear_have_version_hash() {
  have_version_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStore_GetTagList_Request::have_version_hash() const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Request.have_version_hash)
  return _internal_have_version_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetTagList_Request::set_have_version_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 have_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetTagList_Request.have_version_hash)
}
inline std::string* CStore_GetTagList_Request::mutable_have_version_hash() {
  std::string* _s = _internal_mutable_have_version_hash();
  // @@protoc_insertion_point(field_mutable:CStore_GetTagList_Request.have_version_hash)
  return _s;
}
inline const std::string& CStore_GetTagList_Request::_internal_have_version_hash() const {
  return have_version_hash_.Get();
}
inline void CStore_GetTagList_Request::_internal_set_have_version_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  have_version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Request::_internal_mutable_have_version_hash() {
  _has_bits_[0] |= 0x00000002u;
  return have_version_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Request::release_have_version_hash() {
  // @@protoc_insertion_point(field_release:CStore_GetTagList_Request.have_version_hash)
  if (!_internal_has_have_version_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = have_version_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (have_version_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    have_version_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetTagList_Request::set_allocated_have_version_hash(std::string* have_version_hash) {
  if (have_version_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  have_version_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), have_version_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (have_version_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    have_version_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetTagList_Request.have_version_hash)
}

// -------------------------------------------------------------------

// CStore_GetTagList_Response_Tag

// optional uint32 tagid = 1;
inline bool CStore_GetTagList_Response_Tag::_internal_has_tagid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetTagList_Response_Tag::has_tagid() const {
  return _internal_has_tagid();
}
inline void CStore_GetTagList_Response_Tag::clear_tagid() {
  tagid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_GetTagList_Response_Tag::_internal_tagid() const {
  return tagid_;
}
inline uint32_t CStore_GetTagList_Response_Tag::tagid() const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Response.Tag.tagid)
  return _internal_tagid();
}
inline void CStore_GetTagList_Response_Tag::_internal_set_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tagid_ = value;
}
inline void CStore_GetTagList_Response_Tag::set_tagid(uint32_t value) {
  _internal_set_tagid(value);
  // @@protoc_insertion_point(field_set:CStore_GetTagList_Response.Tag.tagid)
}

// optional string name = 2;
inline bool CStore_GetTagList_Response_Tag::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetTagList_Response_Tag::has_name() const {
  return _internal_has_name();
}
inline void CStore_GetTagList_Response_Tag::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetTagList_Response_Tag::name() const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Response.Tag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetTagList_Response_Tag::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetTagList_Response.Tag.name)
}
inline std::string* CStore_GetTagList_Response_Tag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CStore_GetTagList_Response.Tag.name)
  return _s;
}
inline const std::string& CStore_GetTagList_Response_Tag::_internal_name() const {
  return name_.Get();
}
inline void CStore_GetTagList_Response_Tag::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Response_Tag::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Response_Tag::release_name() {
  // @@protoc_insertion_point(field_release:CStore_GetTagList_Response.Tag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetTagList_Response_Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetTagList_Response.Tag.name)
}

// -------------------------------------------------------------------

// CStore_GetTagList_Response

// optional string version_hash = 1 [(.description) = "Pass in future calls, server will only return data if it has changed (hash is per-language)."];
inline bool CStore_GetTagList_Response::_internal_has_version_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetTagList_Response::has_version_hash() const {
  return _internal_has_version_hash();
}
inline void CStore_GetTagList_Response::clear_version_hash() {
  version_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetTagList_Response::version_hash() const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Response.version_hash)
  return _internal_version_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetTagList_Response::set_version_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetTagList_Response.version_hash)
}
inline std::string* CStore_GetTagList_Response::mutable_version_hash() {
  std::string* _s = _internal_mutable_version_hash();
  // @@protoc_insertion_point(field_mutable:CStore_GetTagList_Response.version_hash)
  return _s;
}
inline const std::string& CStore_GetTagList_Response::_internal_version_hash() const {
  return version_hash_.Get();
}
inline void CStore_GetTagList_Response::_internal_set_version_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Response::_internal_mutable_version_hash() {
  _has_bits_[0] |= 0x00000001u;
  return version_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetTagList_Response::release_version_hash() {
  // @@protoc_insertion_point(field_release:CStore_GetTagList_Response.version_hash)
  if (!_internal_has_version_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetTagList_Response::set_allocated_version_hash(std::string* version_hash) {
  if (version_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetTagList_Response.version_hash)
}

// repeated .CStore_GetTagList_Response.Tag tags = 2;
inline int CStore_GetTagList_Response::_internal_tags_size() const {
  return tags_.size();
}
inline int CStore_GetTagList_Response::tags_size() const {
  return _internal_tags_size();
}
inline void CStore_GetTagList_Response::clear_tags() {
  tags_.Clear();
}
inline ::CStore_GetTagList_Response_Tag* CStore_GetTagList_Response::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_GetTagList_Response.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTagList_Response_Tag >*
CStore_GetTagList_Response::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetTagList_Response.tags)
  return &tags_;
}
inline const ::CStore_GetTagList_Response_Tag& CStore_GetTagList_Response::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::CStore_GetTagList_Response_Tag& CStore_GetTagList_Response::tags(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetTagList_Response.tags)
  return _internal_tags(index);
}
inline ::CStore_GetTagList_Response_Tag* CStore_GetTagList_Response::_internal_add_tags() {
  return tags_.Add();
}
inline ::CStore_GetTagList_Response_Tag* CStore_GetTagList_Response::add_tags() {
  ::CStore_GetTagList_Response_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:CStore_GetTagList_Response.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTagList_Response_Tag >&
CStore_GetTagList_Response::tags() const {
  // @@protoc_insertion_point(field_list:CStore_GetTagList_Response.tags)
  return tags_;
}

// -------------------------------------------------------------------

// CStoreDiscoveryQueueSettings

// optional bool os_win = 4;
inline bool CStoreDiscoveryQueueSettings::_internal_has_os_win() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_os_win() const {
  return _internal_has_os_win();
}
inline void CStoreDiscoveryQueueSettings::clear_os_win() {
  os_win_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_os_win() const {
  return os_win_;
}
inline bool CStoreDiscoveryQueueSettings::os_win() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.os_win)
  return _internal_os_win();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_os_win(bool value) {
  _has_bits_[0] |= 0x00000001u;
  os_win_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_os_win(bool value) {
  _internal_set_os_win(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.os_win)
}

// optional bool os_mac = 5;
inline bool CStoreDiscoveryQueueSettings::_internal_has_os_mac() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_os_mac() const {
  return _internal_has_os_mac();
}
inline void CStoreDiscoveryQueueSettings::clear_os_mac() {
  os_mac_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_os_mac() const {
  return os_mac_;
}
inline bool CStoreDiscoveryQueueSettings::os_mac() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.os_mac)
  return _internal_os_mac();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_os_mac(bool value) {
  _has_bits_[0] |= 0x00000002u;
  os_mac_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_os_mac(bool value) {
  _internal_set_os_mac(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.os_mac)
}

// optional bool os_linux = 6;
inline bool CStoreDiscoveryQueueSettings::_internal_has_os_linux() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_os_linux() const {
  return _internal_has_os_linux();
}
inline void CStoreDiscoveryQueueSettings::clear_os_linux() {
  os_linux_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_os_linux() const {
  return os_linux_;
}
inline bool CStoreDiscoveryQueueSettings::os_linux() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.os_linux)
  return _internal_os_linux();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_os_linux(bool value) {
  _has_bits_[0] |= 0x00000004u;
  os_linux_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_os_linux(bool value) {
  _internal_set_os_linux(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.os_linux)
}

// optional bool full_controller_support = 7;
inline bool CStoreDiscoveryQueueSettings::_internal_has_full_controller_support() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_full_controller_support() const {
  return _internal_has_full_controller_support();
}
inline void CStoreDiscoveryQueueSettings::clear_full_controller_support() {
  full_controller_support_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_full_controller_support() const {
  return full_controller_support_;
}
inline bool CStoreDiscoveryQueueSettings::full_controller_support() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.full_controller_support)
  return _internal_full_controller_support();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_full_controller_support(bool value) {
  _has_bits_[0] |= 0x00000008u;
  full_controller_support_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_full_controller_support(bool value) {
  _internal_set_full_controller_support(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.full_controller_support)
}

// optional bool native_steam_controller = 8;
inline bool CStoreDiscoveryQueueSettings::_internal_has_native_steam_controller() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_native_steam_controller() const {
  return _internal_has_native_steam_controller();
}
inline void CStoreDiscoveryQueueSettings::clear_native_steam_controller() {
  native_steam_controller_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_native_steam_controller() const {
  return native_steam_controller_;
}
inline bool CStoreDiscoveryQueueSettings::native_steam_controller() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.native_steam_controller)
  return _internal_native_steam_controller();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_native_steam_controller(bool value) {
  _has_bits_[0] |= 0x00000010u;
  native_steam_controller_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_native_steam_controller(bool value) {
  _internal_set_native_steam_controller(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.native_steam_controller)
}

// optional bool include_coming_soon = 9;
inline bool CStoreDiscoveryQueueSettings::_internal_has_include_coming_soon() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_include_coming_soon() const {
  return _internal_has_include_coming_soon();
}
inline void CStoreDiscoveryQueueSettings::clear_include_coming_soon() {
  include_coming_soon_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_include_coming_soon() const {
  return include_coming_soon_;
}
inline bool CStoreDiscoveryQueueSettings::include_coming_soon() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.include_coming_soon)
  return _internal_include_coming_soon();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_include_coming_soon(bool value) {
  _has_bits_[0] |= 0x00000020u;
  include_coming_soon_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_include_coming_soon(bool value) {
  _internal_set_include_coming_soon(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.include_coming_soon)
}

// repeated uint32 excluded_tagids = 10 [(.description) = "Don\'t return any games with these tags."];
inline int CStoreDiscoveryQueueSettings::_internal_excluded_tagids_size() const {
  return excluded_tagids_.size();
}
inline int CStoreDiscoveryQueueSettings::excluded_tagids_size() const {
  return _internal_excluded_tagids_size();
}
inline void CStoreDiscoveryQueueSettings::clear_excluded_tagids() {
  excluded_tagids_.Clear();
}
inline uint32_t CStoreDiscoveryQueueSettings::_internal_excluded_tagids(int index) const {
  return excluded_tagids_.Get(index);
}
inline uint32_t CStoreDiscoveryQueueSettings::excluded_tagids(int index) const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.excluded_tagids)
  return _internal_excluded_tagids(index);
}
inline void CStoreDiscoveryQueueSettings::set_excluded_tagids(int index, uint32_t value) {
  excluded_tagids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.excluded_tagids)
}
inline void CStoreDiscoveryQueueSettings::_internal_add_excluded_tagids(uint32_t value) {
  excluded_tagids_.Add(value);
}
inline void CStoreDiscoveryQueueSettings::add_excluded_tagids(uint32_t value) {
  _internal_add_excluded_tagids(value);
  // @@protoc_insertion_point(field_add:CStoreDiscoveryQueueSettings.excluded_tagids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStoreDiscoveryQueueSettings::_internal_excluded_tagids() const {
  return excluded_tagids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStoreDiscoveryQueueSettings::excluded_tagids() const {
  // @@protoc_insertion_point(field_list:CStoreDiscoveryQueueSettings.excluded_tagids)
  return _internal_excluded_tagids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStoreDiscoveryQueueSettings::_internal_mutable_excluded_tagids() {
  return &excluded_tagids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStoreDiscoveryQueueSettings::mutable_excluded_tagids() {
  // @@protoc_insertion_point(field_mutable_list:CStoreDiscoveryQueueSettings.excluded_tagids)
  return _internal_mutable_excluded_tagids();
}

// optional bool exclude_early_access = 11;
inline bool CStoreDiscoveryQueueSettings::_internal_has_exclude_early_access() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_exclude_early_access() const {
  return _internal_has_exclude_early_access();
}
inline void CStoreDiscoveryQueueSettings::clear_exclude_early_access() {
  exclude_early_access_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_exclude_early_access() const {
  return exclude_early_access_;
}
inline bool CStoreDiscoveryQueueSettings::exclude_early_access() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.exclude_early_access)
  return _internal_exclude_early_access();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_exclude_early_access(bool value) {
  _has_bits_[0] |= 0x00000040u;
  exclude_early_access_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_exclude_early_access(bool value) {
  _internal_set_exclude_early_access(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.exclude_early_access)
}

// optional bool exclude_videos = 12;
inline bool CStoreDiscoveryQueueSettings::_internal_has_exclude_videos() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_exclude_videos() const {
  return _internal_has_exclude_videos();
}
inline void CStoreDiscoveryQueueSettings::clear_exclude_videos() {
  exclude_videos_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_exclude_videos() const {
  return exclude_videos_;
}
inline bool CStoreDiscoveryQueueSettings::exclude_videos() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.exclude_videos)
  return _internal_exclude_videos();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_exclude_videos(bool value) {
  _has_bits_[0] |= 0x00000080u;
  exclude_videos_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_exclude_videos(bool value) {
  _internal_set_exclude_videos(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.exclude_videos)
}

// optional bool exclude_software = 13;
inline bool CStoreDiscoveryQueueSettings::_internal_has_exclude_software() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_exclude_software() const {
  return _internal_has_exclude_software();
}
inline void CStoreDiscoveryQueueSettings::clear_exclude_software() {
  exclude_software_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_exclude_software() const {
  return exclude_software_;
}
inline bool CStoreDiscoveryQueueSettings::exclude_software() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.exclude_software)
  return _internal_exclude_software();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_exclude_software(bool value) {
  _has_bits_[0] |= 0x00000100u;
  exclude_software_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_exclude_software(bool value) {
  _internal_set_exclude_software(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.exclude_software)
}

// optional bool exclude_dlc = 14;
inline bool CStoreDiscoveryQueueSettings::_internal_has_exclude_dlc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_exclude_dlc() const {
  return _internal_has_exclude_dlc();
}
inline void CStoreDiscoveryQueueSettings::clear_exclude_dlc() {
  exclude_dlc_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_exclude_dlc() const {
  return exclude_dlc_;
}
inline bool CStoreDiscoveryQueueSettings::exclude_dlc() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.exclude_dlc)
  return _internal_exclude_dlc();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_exclude_dlc(bool value) {
  _has_bits_[0] |= 0x00000200u;
  exclude_dlc_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_exclude_dlc(bool value) {
  _internal_set_exclude_dlc(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.exclude_dlc)
}

// optional bool exclude_soundtracks = 15;
inline bool CStoreDiscoveryQueueSettings::_internal_has_exclude_soundtracks() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStoreDiscoveryQueueSettings::has_exclude_soundtracks() const {
  return _internal_has_exclude_soundtracks();
}
inline void CStoreDiscoveryQueueSettings::clear_exclude_soundtracks() {
  exclude_soundtracks_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CStoreDiscoveryQueueSettings::_internal_exclude_soundtracks() const {
  return exclude_soundtracks_;
}
inline bool CStoreDiscoveryQueueSettings::exclude_soundtracks() const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.exclude_soundtracks)
  return _internal_exclude_soundtracks();
}
inline void CStoreDiscoveryQueueSettings::_internal_set_exclude_soundtracks(bool value) {
  _has_bits_[0] |= 0x00000400u;
  exclude_soundtracks_ = value;
}
inline void CStoreDiscoveryQueueSettings::set_exclude_soundtracks(bool value) {
  _internal_set_exclude_soundtracks(value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.exclude_soundtracks)
}

// repeated uint32 featured_tagids = 16 [(.description) = "Must be marked with one of these featured tagids (for sale pages and events)"];
inline int CStoreDiscoveryQueueSettings::_internal_featured_tagids_size() const {
  return featured_tagids_.size();
}
inline int CStoreDiscoveryQueueSettings::featured_tagids_size() const {
  return _internal_featured_tagids_size();
}
inline void CStoreDiscoveryQueueSettings::clear_featured_tagids() {
  featured_tagids_.Clear();
}
inline uint32_t CStoreDiscoveryQueueSettings::_internal_featured_tagids(int index) const {
  return featured_tagids_.Get(index);
}
inline uint32_t CStoreDiscoveryQueueSettings::featured_tagids(int index) const {
  // @@protoc_insertion_point(field_get:CStoreDiscoveryQueueSettings.featured_tagids)
  return _internal_featured_tagids(index);
}
inline void CStoreDiscoveryQueueSettings::set_featured_tagids(int index, uint32_t value) {
  featured_tagids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStoreDiscoveryQueueSettings.featured_tagids)
}
inline void CStoreDiscoveryQueueSettings::_internal_add_featured_tagids(uint32_t value) {
  featured_tagids_.Add(value);
}
inline void CStoreDiscoveryQueueSettings::add_featured_tagids(uint32_t value) {
  _internal_add_featured_tagids(value);
  // @@protoc_insertion_point(field_add:CStoreDiscoveryQueueSettings.featured_tagids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStoreDiscoveryQueueSettings::_internal_featured_tagids() const {
  return featured_tagids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStoreDiscoveryQueueSettings::featured_tagids() const {
  // @@protoc_insertion_point(field_list:CStoreDiscoveryQueueSettings.featured_tagids)
  return _internal_featured_tagids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStoreDiscoveryQueueSettings::_internal_mutable_featured_tagids() {
  return &featured_tagids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStoreDiscoveryQueueSettings::mutable_featured_tagids() {
  // @@protoc_insertion_point(field_mutable_list:CStoreDiscoveryQueueSettings.featured_tagids)
  return _internal_mutable_featured_tagids();
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueue_Request

// optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_queue_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_queue_type() const {
  return _internal_has_queue_type();
}
inline void CStore_GetDiscoveryQueue_Request::clear_queue_type() {
  queue_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueue_Request::_internal_queue_type() const {
  return static_cast< ::EStoreDiscoveryQueueType >(queue_type_);
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueue_Request::queue_type() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.queue_type)
  return _internal_queue_type();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_queue_type(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  queue_type_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_queue_type(::EStoreDiscoveryQueueType value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.queue_type)
}

// optional string country_code = 2;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_country_code() const {
  return _internal_has_country_code();
}
inline void CStore_GetDiscoveryQueue_Request::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetDiscoveryQueue_Request::country_code() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetDiscoveryQueue_Request::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.country_code)
}
inline std::string* CStore_GetDiscoveryQueue_Request::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Request.country_code)
  return _s;
}
inline const std::string& CStore_GetDiscoveryQueue_Request::_internal_country_code() const {
  return country_code_.Get();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Request::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Request::release_country_code() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Request.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetDiscoveryQueue_Request::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Request.country_code)
}

// optional bool rebuild_queue = 3;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_rebuild_queue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_rebuild_queue() const {
  return _internal_has_rebuild_queue();
}
inline void CStore_GetDiscoveryQueue_Request::clear_rebuild_queue() {
  rebuild_queue_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_rebuild_queue() const {
  return rebuild_queue_;
}
inline bool CStore_GetDiscoveryQueue_Request::rebuild_queue() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.rebuild_queue)
  return _internal_rebuild_queue();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_rebuild_queue(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rebuild_queue_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_rebuild_queue(bool value) {
  _internal_set_rebuild_queue(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.rebuild_queue)
}

// optional bool settings_changed = 4;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_settings_changed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_settings_changed() const {
  return _internal_has_settings_changed();
}
inline void CStore_GetDiscoveryQueue_Request::clear_settings_changed() {
  settings_changed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_settings_changed() const {
  return settings_changed_;
}
inline bool CStore_GetDiscoveryQueue_Request::settings_changed() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.settings_changed)
  return _internal_settings_changed();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_settings_changed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  settings_changed_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_settings_changed(bool value) {
  _internal_set_settings_changed(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.settings_changed)
}

// optional .CStoreDiscoveryQueueSettings settings = 5;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_settings() const {
  return _internal_has_settings();
}
inline void CStore_GetDiscoveryQueue_Request::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueue_Request::_internal_settings() const {
  const ::CStoreDiscoveryQueueSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStoreDiscoveryQueueSettings&>(
      ::_CStoreDiscoveryQueueSettings_default_instance_);
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueue_Request::settings() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.settings)
  return _internal_settings();
}
inline void CStore_GetDiscoveryQueue_Request::unsafe_arena_set_allocated_settings(
    ::CStoreDiscoveryQueueSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueue_Request.settings)
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Request::release_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Request::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Request.settings)
  _has_bits_[0] &= ~0x00000002u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Request::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStoreDiscoveryQueueSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Request::mutable_settings() {
  ::CStoreDiscoveryQueueSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Request.settings)
  return _msg;
}
inline void CStore_GetDiscoveryQueue_Request::set_allocated_settings(::CStoreDiscoveryQueueSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStoreDiscoveryQueueSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Request.settings)
}

// optional bool rebuild_queue_if_stale = 6;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_rebuild_queue_if_stale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_rebuild_queue_if_stale() const {
  return _internal_has_rebuild_queue_if_stale();
}
inline void CStore_GetDiscoveryQueue_Request::clear_rebuild_queue_if_stale() {
  rebuild_queue_if_stale_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_rebuild_queue_if_stale() const {
  return rebuild_queue_if_stale_;
}
inline bool CStore_GetDiscoveryQueue_Request::rebuild_queue_if_stale() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.rebuild_queue_if_stale)
  return _internal_rebuild_queue_if_stale();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_rebuild_queue_if_stale(bool value) {
  _has_bits_[0] |= 0x00000040u;
  rebuild_queue_if_stale_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_rebuild_queue_if_stale(bool value) {
  _internal_set_rebuild_queue_if_stale(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.rebuild_queue_if_stale)
}

// optional bool ignore_user_preferences = 8;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_ignore_user_preferences() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_ignore_user_preferences() const {
  return _internal_has_ignore_user_preferences();
}
inline void CStore_GetDiscoveryQueue_Request::clear_ignore_user_preferences() {
  ignore_user_preferences_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_ignore_user_preferences() const {
  return ignore_user_preferences_;
}
inline bool CStore_GetDiscoveryQueue_Request::ignore_user_preferences() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.ignore_user_preferences)
  return _internal_ignore_user_preferences();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_ignore_user_preferences(bool value) {
  _has_bits_[0] |= 0x00000080u;
  ignore_user_preferences_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_ignore_user_preferences(bool value) {
  _internal_set_ignore_user_preferences(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.ignore_user_preferences)
}

// optional bool no_experimental_results = 9;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_no_experimental_results() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_no_experimental_results() const {
  return _internal_has_no_experimental_results();
}
inline void CStore_GetDiscoveryQueue_Request::clear_no_experimental_results() {
  no_experimental_results_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_no_experimental_results() const {
  return no_experimental_results_;
}
inline bool CStore_GetDiscoveryQueue_Request::no_experimental_results() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.no_experimental_results)
  return _internal_no_experimental_results();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_no_experimental_results(bool value) {
  _has_bits_[0] |= 0x00000200u;
  no_experimental_results_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_no_experimental_results(bool value) {
  _internal_set_no_experimental_results(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.no_experimental_results)
}

// optional uint32 experimental_cohort = 10;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_experimental_cohort() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_experimental_cohort() const {
  return _internal_has_experimental_cohort();
}
inline void CStore_GetDiscoveryQueue_Request::clear_experimental_cohort() {
  experimental_cohort_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CStore_GetDiscoveryQueue_Request::_internal_experimental_cohort() const {
  return experimental_cohort_;
}
inline uint32_t CStore_GetDiscoveryQueue_Request::experimental_cohort() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.experimental_cohort)
  return _internal_experimental_cohort();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_experimental_cohort(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  experimental_cohort_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_experimental_cohort(uint32_t value) {
  _internal_set_experimental_cohort(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.experimental_cohort)
}

// optional bool debug_get_solr_query = 11;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_debug_get_solr_query() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_debug_get_solr_query() const {
  return _internal_has_debug_get_solr_query();
}
inline void CStore_GetDiscoveryQueue_Request::clear_debug_get_solr_query() {
  debug_get_solr_query_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CStore_GetDiscoveryQueue_Request::_internal_debug_get_solr_query() const {
  return debug_get_solr_query_;
}
inline bool CStore_GetDiscoveryQueue_Request::debug_get_solr_query() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.debug_get_solr_query)
  return _internal_debug_get_solr_query();
}
inline void CStore_GetDiscoveryQueue_Request::_internal_set_debug_get_solr_query(bool value) {
  _has_bits_[0] |= 0x00000400u;
  debug_get_solr_query_ = value;
}
inline void CStore_GetDiscoveryQueue_Request::set_debug_get_solr_query(bool value) {
  _internal_set_debug_get_solr_query(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Request.debug_get_solr_query)
}

// optional .CStorePageFilter store_page_filter = 12;
inline bool CStore_GetDiscoveryQueue_Request::_internal_has_store_page_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || store_page_filter_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueue_Request::has_store_page_filter() const {
  return _internal_has_store_page_filter();
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueue_Request::_internal_store_page_filter() const {
  const ::CStorePageFilter* p = store_page_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter&>(
      ::_CStorePageFilter_default_instance_);
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueue_Request::store_page_filter() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Request.store_page_filter)
  return _internal_store_page_filter();
}
inline void CStore_GetDiscoveryQueue_Request::unsafe_arena_set_allocated_store_page_filter(
    ::CStorePageFilter* store_page_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  store_page_filter_ = store_page_filter;
  if (store_page_filter) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueue_Request.store_page_filter)
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueue_Request::release_store_page_filter() {
  _has_bits_[0] &= ~0x00000004u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueue_Request::unsafe_arena_release_store_page_filter() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Request.store_page_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueue_Request::_internal_mutable_store_page_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (store_page_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter>(GetArenaForAllocation());
    store_page_filter_ = p;
  }
  return store_page_filter_;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueue_Request::mutable_store_page_filter() {
  ::CStorePageFilter* _msg = _internal_mutable_store_page_filter();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Request.store_page_filter)
  return _msg;
}
inline void CStore_GetDiscoveryQueue_Request::set_allocated_store_page_filter(::CStorePageFilter* store_page_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  if (store_page_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter));
    if (message_arena != submessage_arena) {
      store_page_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_page_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  store_page_filter_ = store_page_filter;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Request.store_page_filter)
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueue_Response

// repeated uint32 appids = 1;
inline int CStore_GetDiscoveryQueue_Response::_internal_appids_size() const {
  return appids_.size();
}
inline int CStore_GetDiscoveryQueue_Response::appids_size() const {
  return _internal_appids_size();
}
inline void CStore_GetDiscoveryQueue_Response::clear_appids() {
  appids_.Clear();
}
inline uint32_t CStore_GetDiscoveryQueue_Response::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CStore_GetDiscoveryQueue_Response::appids(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.appids)
  return _internal_appids(index);
}
inline void CStore_GetDiscoveryQueue_Response::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.appids)
}
inline void CStore_GetDiscoveryQueue_Response::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CStore_GetDiscoveryQueue_Response::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CStore_GetDiscoveryQueue_Response.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetDiscoveryQueue_Response::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetDiscoveryQueue_Response::appids() const {
  // @@protoc_insertion_point(field_list:CStore_GetDiscoveryQueue_Response.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetDiscoveryQueue_Response::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetDiscoveryQueue_Response::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetDiscoveryQueue_Response.appids)
  return _internal_mutable_appids();
}

// optional string country_code = 2;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_country_code() const {
  return _internal_has_country_code();
}
inline void CStore_GetDiscoveryQueue_Response::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetDiscoveryQueue_Response::country_code() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetDiscoveryQueue_Response::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.country_code)
}
inline std::string* CStore_GetDiscoveryQueue_Response::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Response.country_code)
  return _s;
}
inline const std::string& CStore_GetDiscoveryQueue_Response::_internal_country_code() const {
  return country_code_.Get();
}
inline void CStore_GetDiscoveryQueue_Response::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Response::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Response::release_country_code() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Response.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetDiscoveryQueue_Response::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Response.country_code)
}

// optional .CStoreDiscoveryQueueSettings settings = 3;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_settings() const {
  return _internal_has_settings();
}
inline void CStore_GetDiscoveryQueue_Response::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueue_Response::_internal_settings() const {
  const ::CStoreDiscoveryQueueSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStoreDiscoveryQueueSettings&>(
      ::_CStoreDiscoveryQueueSettings_default_instance_);
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueue_Response::settings() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.settings)
  return _internal_settings();
}
inline void CStore_GetDiscoveryQueue_Response::unsafe_arena_set_allocated_settings(
    ::CStoreDiscoveryQueueSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueue_Response.settings)
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Response::release_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Response::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Response.settings)
  _has_bits_[0] &= ~0x00000004u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Response::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStoreDiscoveryQueueSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueue_Response::mutable_settings() {
  ::CStoreDiscoveryQueueSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Response.settings)
  return _msg;
}
inline void CStore_GetDiscoveryQueue_Response::set_allocated_settings(::CStoreDiscoveryQueueSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStoreDiscoveryQueueSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Response.settings)
}

// optional int32 skipped = 4;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_skipped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_skipped() const {
  return _internal_has_skipped();
}
inline void CStore_GetDiscoveryQueue_Response::clear_skipped() {
  skipped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CStore_GetDiscoveryQueue_Response::_internal_skipped() const {
  return skipped_;
}
inline int32_t CStore_GetDiscoveryQueue_Response::skipped() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.skipped)
  return _internal_skipped();
}
inline void CStore_GetDiscoveryQueue_Response::_internal_set_skipped(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  skipped_ = value;
}
inline void CStore_GetDiscoveryQueue_Response::set_skipped(int32_t value) {
  _internal_set_skipped(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.skipped)
}

// optional bool exhausted = 5;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_exhausted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_exhausted() const {
  return _internal_has_exhausted();
}
inline void CStore_GetDiscoveryQueue_Response::clear_exhausted() {
  exhausted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CStore_GetDiscoveryQueue_Response::_internal_exhausted() const {
  return exhausted_;
}
inline bool CStore_GetDiscoveryQueue_Response::exhausted() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.exhausted)
  return _internal_exhausted();
}
inline void CStore_GetDiscoveryQueue_Response::_internal_set_exhausted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  exhausted_ = value;
}
inline void CStore_GetDiscoveryQueue_Response::set_exhausted(bool value) {
  _internal_set_exhausted(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.exhausted)
}

// optional uint32 experimental_cohort = 6;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_experimental_cohort() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_experimental_cohort() const {
  return _internal_has_experimental_cohort();
}
inline void CStore_GetDiscoveryQueue_Response::clear_experimental_cohort() {
  experimental_cohort_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CStore_GetDiscoveryQueue_Response::_internal_experimental_cohort() const {
  return experimental_cohort_;
}
inline uint32_t CStore_GetDiscoveryQueue_Response::experimental_cohort() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.experimental_cohort)
  return _internal_experimental_cohort();
}
inline void CStore_GetDiscoveryQueue_Response::_internal_set_experimental_cohort(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  experimental_cohort_ = value;
}
inline void CStore_GetDiscoveryQueue_Response::set_experimental_cohort(uint32_t value) {
  _internal_set_experimental_cohort(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.experimental_cohort)
}

// optional string debug_solr_query = 7;
inline bool CStore_GetDiscoveryQueue_Response::_internal_has_debug_solr_query() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueue_Response::has_debug_solr_query() const {
  return _internal_has_debug_solr_query();
}
inline void CStore_GetDiscoveryQueue_Response::clear_debug_solr_query() {
  debug_solr_query_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CStore_GetDiscoveryQueue_Response::debug_solr_query() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueue_Response.debug_solr_query)
  return _internal_debug_solr_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetDiscoveryQueue_Response::set_debug_solr_query(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 debug_solr_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueue_Response.debug_solr_query)
}
inline std::string* CStore_GetDiscoveryQueue_Response::mutable_debug_solr_query() {
  std::string* _s = _internal_mutable_debug_solr_query();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueue_Response.debug_solr_query)
  return _s;
}
inline const std::string& CStore_GetDiscoveryQueue_Response::_internal_debug_solr_query() const {
  return debug_solr_query_.Get();
}
inline void CStore_GetDiscoveryQueue_Response::_internal_set_debug_solr_query(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_solr_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Response::_internal_mutable_debug_solr_query() {
  _has_bits_[0] |= 0x00000002u;
  return debug_solr_query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueue_Response::release_debug_solr_query() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueue_Response.debug_solr_query)
  if (!_internal_has_debug_solr_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = debug_solr_query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (debug_solr_query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    debug_solr_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetDiscoveryQueue_Response::set_allocated_debug_solr_query(std::string* debug_solr_query) {
  if (debug_solr_query != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_solr_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug_solr_query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (debug_solr_query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    debug_solr_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueue_Response.debug_solr_query)
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueueSettings_Request

// optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
inline bool CStore_GetDiscoveryQueueSettings_Request::_internal_has_queue_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueueSettings_Request::has_queue_type() const {
  return _internal_has_queue_type();
}
inline void CStore_GetDiscoveryQueueSettings_Request::clear_queue_type() {
  queue_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueueSettings_Request::_internal_queue_type() const {
  return static_cast< ::EStoreDiscoveryQueueType >(queue_type_);
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueueSettings_Request::queue_type() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSettings_Request.queue_type)
  return _internal_queue_type();
}
inline void CStore_GetDiscoveryQueueSettings_Request::_internal_set_queue_type(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  queue_type_ = value;
}
inline void CStore_GetDiscoveryQueueSettings_Request::set_queue_type(::EStoreDiscoveryQueueType value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueueSettings_Request.queue_type)
}

// optional .CStorePageFilter store_page_filter = 2;
inline bool CStore_GetDiscoveryQueueSettings_Request::_internal_has_store_page_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || store_page_filter_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueueSettings_Request::has_store_page_filter() const {
  return _internal_has_store_page_filter();
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueueSettings_Request::_internal_store_page_filter() const {
  const ::CStorePageFilter* p = store_page_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter&>(
      ::_CStorePageFilter_default_instance_);
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueueSettings_Request::store_page_filter() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSettings_Request.store_page_filter)
  return _internal_store_page_filter();
}
inline void CStore_GetDiscoveryQueueSettings_Request::unsafe_arena_set_allocated_store_page_filter(
    ::CStorePageFilter* store_page_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  store_page_filter_ = store_page_filter;
  if (store_page_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueueSettings_Request.store_page_filter)
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSettings_Request::release_store_page_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSettings_Request::unsafe_arena_release_store_page_filter() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueueSettings_Request.store_page_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSettings_Request::_internal_mutable_store_page_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (store_page_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter>(GetArenaForAllocation());
    store_page_filter_ = p;
  }
  return store_page_filter_;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSettings_Request::mutable_store_page_filter() {
  ::CStorePageFilter* _msg = _internal_mutable_store_page_filter();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueueSettings_Request.store_page_filter)
  return _msg;
}
inline void CStore_GetDiscoveryQueueSettings_Request::set_allocated_store_page_filter(::CStorePageFilter* store_page_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  if (store_page_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter));
    if (message_arena != submessage_arena) {
      store_page_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_page_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  store_page_filter_ = store_page_filter;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueueSettings_Request.store_page_filter)
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueueSettings_Response

// optional string country_code = 1;
inline bool CStore_GetDiscoveryQueueSettings_Response::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueueSettings_Response::has_country_code() const {
  return _internal_has_country_code();
}
inline void CStore_GetDiscoveryQueueSettings_Response::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_GetDiscoveryQueueSettings_Response::country_code() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSettings_Response.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_GetDiscoveryQueueSettings_Response::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueueSettings_Response.country_code)
}
inline std::string* CStore_GetDiscoveryQueueSettings_Response::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueueSettings_Response.country_code)
  return _s;
}
inline const std::string& CStore_GetDiscoveryQueueSettings_Response::_internal_country_code() const {
  return country_code_.Get();
}
inline void CStore_GetDiscoveryQueueSettings_Response::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueueSettings_Response::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_GetDiscoveryQueueSettings_Response::release_country_code() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueueSettings_Response.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_GetDiscoveryQueueSettings_Response::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueueSettings_Response.country_code)
}

// optional .CStoreDiscoveryQueueSettings settings = 2;
inline bool CStore_GetDiscoveryQueueSettings_Response::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueueSettings_Response::has_settings() const {
  return _internal_has_settings();
}
inline void CStore_GetDiscoveryQueueSettings_Response::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueueSettings_Response::_internal_settings() const {
  const ::CStoreDiscoveryQueueSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStoreDiscoveryQueueSettings&>(
      ::_CStoreDiscoveryQueueSettings_default_instance_);
}
inline const ::CStoreDiscoveryQueueSettings& CStore_GetDiscoveryQueueSettings_Response::settings() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSettings_Response.settings)
  return _internal_settings();
}
inline void CStore_GetDiscoveryQueueSettings_Response::unsafe_arena_set_allocated_settings(
    ::CStoreDiscoveryQueueSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueueSettings_Response.settings)
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueueSettings_Response::release_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueueSettings_Response::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueueSettings_Response.settings)
  _has_bits_[0] &= ~0x00000002u;
  ::CStoreDiscoveryQueueSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueueSettings_Response::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStoreDiscoveryQueueSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::CStoreDiscoveryQueueSettings* CStore_GetDiscoveryQueueSettings_Response::mutable_settings() {
  ::CStoreDiscoveryQueueSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueueSettings_Response.settings)
  return _msg;
}
inline void CStore_GetDiscoveryQueueSettings_Response::set_allocated_settings(::CStoreDiscoveryQueueSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStoreDiscoveryQueueSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueueSettings_Response.settings)
}

// -------------------------------------------------------------------

// CStore_SkipDiscoveryQueueItem_Request

// optional .EStoreDiscoveryQueueType queue_type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
inline bool CStore_SkipDiscoveryQueueItem_Request::_internal_has_queue_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_SkipDiscoveryQueueItem_Request::has_queue_type() const {
  return _internal_has_queue_type();
}
inline void CStore_SkipDiscoveryQueueItem_Request::clear_queue_type() {
  queue_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EStoreDiscoveryQueueType CStore_SkipDiscoveryQueueItem_Request::_internal_queue_type() const {
  return static_cast< ::EStoreDiscoveryQueueType >(queue_type_);
}
inline ::EStoreDiscoveryQueueType CStore_SkipDiscoveryQueueItem_Request::queue_type() const {
  // @@protoc_insertion_point(field_get:CStore_SkipDiscoveryQueueItem_Request.queue_type)
  return _internal_queue_type();
}
inline void CStore_SkipDiscoveryQueueItem_Request::_internal_set_queue_type(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  queue_type_ = value;
}
inline void CStore_SkipDiscoveryQueueItem_Request::set_queue_type(::EStoreDiscoveryQueueType value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:CStore_SkipDiscoveryQueueItem_Request.queue_type)
}

// optional uint32 appid = 2;
inline bool CStore_SkipDiscoveryQueueItem_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_SkipDiscoveryQueueItem_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CStore_SkipDiscoveryQueueItem_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStore_SkipDiscoveryQueueItem_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CStore_SkipDiscoveryQueueItem_Request::appid() const {
  // @@protoc_insertion_point(field_get:CStore_SkipDiscoveryQueueItem_Request.appid)
  return _internal_appid();
}
inline void CStore_SkipDiscoveryQueueItem_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CStore_SkipDiscoveryQueueItem_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CStore_SkipDiscoveryQueueItem_Request.appid)
}

// optional .CStorePageFilter store_page_filter = 3;
inline bool CStore_SkipDiscoveryQueueItem_Request::_internal_has_store_page_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || store_page_filter_ != nullptr);
  return value;
}
inline bool CStore_SkipDiscoveryQueueItem_Request::has_store_page_filter() const {
  return _internal_has_store_page_filter();
}
inline const ::CStorePageFilter& CStore_SkipDiscoveryQueueItem_Request::_internal_store_page_filter() const {
  const ::CStorePageFilter* p = store_page_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter&>(
      ::_CStorePageFilter_default_instance_);
}
inline const ::CStorePageFilter& CStore_SkipDiscoveryQueueItem_Request::store_page_filter() const {
  // @@protoc_insertion_point(field_get:CStore_SkipDiscoveryQueueItem_Request.store_page_filter)
  return _internal_store_page_filter();
}
inline void CStore_SkipDiscoveryQueueItem_Request::unsafe_arena_set_allocated_store_page_filter(
    ::CStorePageFilter* store_page_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  store_page_filter_ = store_page_filter;
  if (store_page_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_SkipDiscoveryQueueItem_Request.store_page_filter)
}
inline ::CStorePageFilter* CStore_SkipDiscoveryQueueItem_Request::release_store_page_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter* CStore_SkipDiscoveryQueueItem_Request::unsafe_arena_release_store_page_filter() {
  // @@protoc_insertion_point(field_release:CStore_SkipDiscoveryQueueItem_Request.store_page_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter* CStore_SkipDiscoveryQueueItem_Request::_internal_mutable_store_page_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (store_page_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter>(GetArenaForAllocation());
    store_page_filter_ = p;
  }
  return store_page_filter_;
}
inline ::CStorePageFilter* CStore_SkipDiscoveryQueueItem_Request::mutable_store_page_filter() {
  ::CStorePageFilter* _msg = _internal_mutable_store_page_filter();
  // @@protoc_insertion_point(field_mutable:CStore_SkipDiscoveryQueueItem_Request.store_page_filter)
  return _msg;
}
inline void CStore_SkipDiscoveryQueueItem_Request::set_allocated_store_page_filter(::CStorePageFilter* store_page_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  if (store_page_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter));
    if (message_arena != submessage_arena) {
      store_page_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_page_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  store_page_filter_ = store_page_filter;
  // @@protoc_insertion_point(field_set_allocated:CStore_SkipDiscoveryQueueItem_Request.store_page_filter)
}

// -------------------------------------------------------------------

// CStore_SkipDiscoveryQueueItem_Response

// -------------------------------------------------------------------

// CStore_GetUserGameInterestState_Request

// optional uint32 appid = 1;
inline bool CStore_GetUserGameInterestState_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CStore_GetUserGameInterestState_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CStore_GetUserGameInterestState_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CStore_GetUserGameInterestState_Request::appid() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Request.appid)
  return _internal_appid();
}
inline void CStore_GetUserGameInterestState_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CStore_GetUserGameInterestState_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Request.appid)
}

// optional uint32 store_appid = 2;
inline bool CStore_GetUserGameInterestState_Request::_internal_has_store_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Request::has_store_appid() const {
  return _internal_has_store_appid();
}
inline void CStore_GetUserGameInterestState_Request::clear_store_appid() {
  store_appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_GetUserGameInterestState_Request::_internal_store_appid() const {
  return store_appid_;
}
inline uint32_t CStore_GetUserGameInterestState_Request::store_appid() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Request.store_appid)
  return _internal_store_appid();
}
inline void CStore_GetUserGameInterestState_Request::_internal_set_store_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  store_appid_ = value;
}
inline void CStore_GetUserGameInterestState_Request::set_store_appid(uint32_t value) {
  _internal_set_store_appid(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Request.store_appid)
}

// optional uint32 beta_appid = 3;
inline bool CStore_GetUserGameInterestState_Request::_internal_has_beta_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Request::has_beta_appid() const {
  return _internal_has_beta_appid();
}
inline void CStore_GetUserGameInterestState_Request::clear_beta_appid() {
  beta_appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStore_GetUserGameInterestState_Request::_internal_beta_appid() const {
  return beta_appid_;
}
inline uint32_t CStore_GetUserGameInterestState_Request::beta_appid() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Request.beta_appid)
  return _internal_beta_appid();
}
inline void CStore_GetUserGameInterestState_Request::_internal_set_beta_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  beta_appid_ = value;
}
inline void CStore_GetUserGameInterestState_Request::set_beta_appid(uint32_t value) {
  _internal_set_beta_appid(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Request.beta_appid)
}

// -------------------------------------------------------------------

// CStore_GetUserGameInterestState_Response_InQueue

// optional .EStoreDiscoveryQueueType type = 1 [default = k_EStoreDiscoveryQueueTypeNew];
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::has_type() const {
  return _internal_has_type();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response_InQueue::_internal_type() const {
  return static_cast< ::EStoreDiscoveryQueueType >(type_);
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response_InQueue::type() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.InQueue.type)
  return _internal_type();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::_internal_set_type(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CStore_GetUserGameInterestState_Response_InQueue::set_type(::EStoreDiscoveryQueueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.InQueue.type)
}

// optional bool skipped = 2;
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_has_skipped() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::has_skipped() const {
  return _internal_has_skipped();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::clear_skipped() {
  skipped_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_skipped() const {
  return skipped_;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::skipped() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.InQueue.skipped)
  return _internal_skipped();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::_internal_set_skipped(bool value) {
  _has_bits_[0] |= 0x00000002u;
  skipped_ = value;
}
inline void CStore_GetUserGameInterestState_Response_InQueue::set_skipped(bool value) {
  _internal_set_skipped(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.InQueue.skipped)
}

// optional int32 items_remaining = 3;
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_has_items_remaining() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::has_items_remaining() const {
  return _internal_has_items_remaining();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::clear_items_remaining() {
  items_remaining_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CStore_GetUserGameInterestState_Response_InQueue::_internal_items_remaining() const {
  return items_remaining_;
}
inline int32_t CStore_GetUserGameInterestState_Response_InQueue::items_remaining() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.InQueue.items_remaining)
  return _internal_items_remaining();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::_internal_set_items_remaining(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  items_remaining_ = value;
}
inline void CStore_GetUserGameInterestState_Response_InQueue::set_items_remaining(int32_t value) {
  _internal_set_items_remaining(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.InQueue.items_remaining)
}

// optional uint32 next_appid = 4;
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_has_next_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::has_next_appid() const {
  return _internal_has_next_appid();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::clear_next_appid() {
  next_appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CStore_GetUserGameInterestState_Response_InQueue::_internal_next_appid() const {
  return next_appid_;
}
inline uint32_t CStore_GetUserGameInterestState_Response_InQueue::next_appid() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.InQueue.next_appid)
  return _internal_next_appid();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::_internal_set_next_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  next_appid_ = value;
}
inline void CStore_GetUserGameInterestState_Response_InQueue::set_next_appid(uint32_t value) {
  _internal_set_next_appid(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.InQueue.next_appid)
}

// optional uint32 experimental_cohort = 5;
inline bool CStore_GetUserGameInterestState_Response_InQueue::_internal_has_experimental_cohort() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response_InQueue::has_experimental_cohort() const {
  return _internal_has_experimental_cohort();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::clear_experimental_cohort() {
  experimental_cohort_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CStore_GetUserGameInterestState_Response_InQueue::_internal_experimental_cohort() const {
  return experimental_cohort_;
}
inline uint32_t CStore_GetUserGameInterestState_Response_InQueue::experimental_cohort() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.InQueue.experimental_cohort)
  return _internal_experimental_cohort();
}
inline void CStore_GetUserGameInterestState_Response_InQueue::_internal_set_experimental_cohort(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  experimental_cohort_ = value;
}
inline void CStore_GetUserGameInterestState_Response_InQueue::set_experimental_cohort(uint32_t value) {
  _internal_set_experimental_cohort(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.InQueue.experimental_cohort)
}

// -------------------------------------------------------------------

// CStore_GetUserGameInterestState_Response

// optional bool owned = 1;
inline bool CStore_GetUserGameInterestState_Response::_internal_has_owned() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_owned() const {
  return _internal_has_owned();
}
inline void CStore_GetUserGameInterestState_Response::clear_owned() {
  owned_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CStore_GetUserGameInterestState_Response::_internal_owned() const {
  return owned_;
}
inline bool CStore_GetUserGameInterestState_Response::owned() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.owned)
  return _internal_owned();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_owned(bool value) {
  _has_bits_[0] |= 0x00000001u;
  owned_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_owned(bool value) {
  _internal_set_owned(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.owned)
}

// optional bool wishlist = 2;
inline bool CStore_GetUserGameInterestState_Response::_internal_has_wishlist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_wishlist() const {
  return _internal_has_wishlist();
}
inline void CStore_GetUserGameInterestState_Response::clear_wishlist() {
  wishlist_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CStore_GetUserGameInterestState_Response::_internal_wishlist() const {
  return wishlist_;
}
inline bool CStore_GetUserGameInterestState_Response::wishlist() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.wishlist)
  return _internal_wishlist();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_wishlist(bool value) {
  _has_bits_[0] |= 0x00000002u;
  wishlist_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_wishlist(bool value) {
  _internal_set_wishlist(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.wishlist)
}

// optional bool ignored = 3;
inline bool CStore_GetUserGameInterestState_Response::_internal_has_ignored() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_ignored() const {
  return _internal_has_ignored();
}
inline void CStore_GetUserGameInterestState_Response::clear_ignored() {
  ignored_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CStore_GetUserGameInterestState_Response::_internal_ignored() const {
  return ignored_;
}
inline bool CStore_GetUserGameInterestState_Response::ignored() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.ignored)
  return _internal_ignored();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_ignored(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ignored_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_ignored(bool value) {
  _internal_set_ignored(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.ignored)
}

// optional bool following = 4;
inline bool CStore_GetUserGameInterestState_Response::_internal_has_following() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_following() const {
  return _internal_has_following();
}
inline void CStore_GetUserGameInterestState_Response::clear_following() {
  following_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CStore_GetUserGameInterestState_Response::_internal_following() const {
  return following_;
}
inline bool CStore_GetUserGameInterestState_Response::following() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.following)
  return _internal_following();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_following(bool value) {
  _has_bits_[0] |= 0x00000008u;
  following_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_following(bool value) {
  _internal_set_following(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.following)
}

// repeated .EStoreDiscoveryQueueType in_queues = 5;
inline int CStore_GetUserGameInterestState_Response::_internal_in_queues_size() const {
  return in_queues_.size();
}
inline int CStore_GetUserGameInterestState_Response::in_queues_size() const {
  return _internal_in_queues_size();
}
inline void CStore_GetUserGameInterestState_Response::clear_in_queues() {
  in_queues_.Clear();
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response::_internal_in_queues(int index) const {
  return static_cast< ::EStoreDiscoveryQueueType >(in_queues_.Get(index));
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response::in_queues(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.in_queues)
  return _internal_in_queues(index);
}
inline void CStore_GetUserGameInterestState_Response::set_in_queues(int index, ::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  in_queues_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.in_queues)
}
inline void CStore_GetUserGameInterestState_Response::_internal_add_in_queues(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  in_queues_.Add(value);
}
inline void CStore_GetUserGameInterestState_Response::add_in_queues(::EStoreDiscoveryQueueType value) {
  _internal_add_in_queues(value);
  // @@protoc_insertion_point(field_add:CStore_GetUserGameInterestState_Response.in_queues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CStore_GetUserGameInterestState_Response::in_queues() const {
  // @@protoc_insertion_point(field_list:CStore_GetUserGameInterestState_Response.in_queues)
  return in_queues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CStore_GetUserGameInterestState_Response::_internal_mutable_in_queues() {
  return &in_queues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CStore_GetUserGameInterestState_Response::mutable_in_queues() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetUserGameInterestState_Response.in_queues)
  return _internal_mutable_in_queues();
}

// repeated .EStoreDiscoveryQueueType queues_with_skip = 6 [(.description) = "Discovery queue types where the user has skipped this game."];
inline int CStore_GetUserGameInterestState_Response::_internal_queues_with_skip_size() const {
  return queues_with_skip_.size();
}
inline int CStore_GetUserGameInterestState_Response::queues_with_skip_size() const {
  return _internal_queues_with_skip_size();
}
inline void CStore_GetUserGameInterestState_Response::clear_queues_with_skip() {
  queues_with_skip_.Clear();
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response::_internal_queues_with_skip(int index) const {
  return static_cast< ::EStoreDiscoveryQueueType >(queues_with_skip_.Get(index));
}
inline ::EStoreDiscoveryQueueType CStore_GetUserGameInterestState_Response::queues_with_skip(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.queues_with_skip)
  return _internal_queues_with_skip(index);
}
inline void CStore_GetUserGameInterestState_Response::set_queues_with_skip(int index, ::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  queues_with_skip_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.queues_with_skip)
}
inline void CStore_GetUserGameInterestState_Response::_internal_add_queues_with_skip(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  queues_with_skip_.Add(value);
}
inline void CStore_GetUserGameInterestState_Response::add_queues_with_skip(::EStoreDiscoveryQueueType value) {
  _internal_add_queues_with_skip(value);
  // @@protoc_insertion_point(field_add:CStore_GetUserGameInterestState_Response.queues_with_skip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CStore_GetUserGameInterestState_Response::queues_with_skip() const {
  // @@protoc_insertion_point(field_list:CStore_GetUserGameInterestState_Response.queues_with_skip)
  return queues_with_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CStore_GetUserGameInterestState_Response::_internal_mutable_queues_with_skip() {
  return &queues_with_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CStore_GetUserGameInterestState_Response::mutable_queues_with_skip() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetUserGameInterestState_Response.queues_with_skip)
  return _internal_mutable_queues_with_skip();
}

// repeated int32 queue_items_remaining = 7 [(.description) = "# of items remaining in the discovery queue - matches the same order as in_queues"];
inline int CStore_GetUserGameInterestState_Response::_internal_queue_items_remaining_size() const {
  return queue_items_remaining_.size();
}
inline int CStore_GetUserGameInterestState_Response::queue_items_remaining_size() const {
  return _internal_queue_items_remaining_size();
}
inline void CStore_GetUserGameInterestState_Response::clear_queue_items_remaining() {
  queue_items_remaining_.Clear();
}
inline int32_t CStore_GetUserGameInterestState_Response::_internal_queue_items_remaining(int index) const {
  return queue_items_remaining_.Get(index);
}
inline int32_t CStore_GetUserGameInterestState_Response::queue_items_remaining(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.queue_items_remaining)
  return _internal_queue_items_remaining(index);
}
inline void CStore_GetUserGameInterestState_Response::set_queue_items_remaining(int index, int32_t value) {
  queue_items_remaining_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.queue_items_remaining)
}
inline void CStore_GetUserGameInterestState_Response::_internal_add_queue_items_remaining(int32_t value) {
  queue_items_remaining_.Add(value);
}
inline void CStore_GetUserGameInterestState_Response::add_queue_items_remaining(int32_t value) {
  _internal_add_queue_items_remaining(value);
  // @@protoc_insertion_point(field_add:CStore_GetUserGameInterestState_Response.queue_items_remaining)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CStore_GetUserGameInterestState_Response::_internal_queue_items_remaining() const {
  return queue_items_remaining_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CStore_GetUserGameInterestState_Response::queue_items_remaining() const {
  // @@protoc_insertion_point(field_list:CStore_GetUserGameInterestState_Response.queue_items_remaining)
  return _internal_queue_items_remaining();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CStore_GetUserGameInterestState_Response::_internal_mutable_queue_items_remaining() {
  return &queue_items_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CStore_GetUserGameInterestState_Response::mutable_queue_items_remaining() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetUserGameInterestState_Response.queue_items_remaining)
  return _internal_mutable_queue_items_remaining();
}

// repeated uint32 queue_items_next_appid = 8 [(.description) = "the next appid in the queue - matches the same order as in_queues"];
inline int CStore_GetUserGameInterestState_Response::_internal_queue_items_next_appid_size() const {
  return queue_items_next_appid_.size();
}
inline int CStore_GetUserGameInterestState_Response::queue_items_next_appid_size() const {
  return _internal_queue_items_next_appid_size();
}
inline void CStore_GetUserGameInterestState_Response::clear_queue_items_next_appid() {
  queue_items_next_appid_.Clear();
}
inline uint32_t CStore_GetUserGameInterestState_Response::_internal_queue_items_next_appid(int index) const {
  return queue_items_next_appid_.Get(index);
}
inline uint32_t CStore_GetUserGameInterestState_Response::queue_items_next_appid(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.queue_items_next_appid)
  return _internal_queue_items_next_appid(index);
}
inline void CStore_GetUserGameInterestState_Response::set_queue_items_next_appid(int index, uint32_t value) {
  queue_items_next_appid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.queue_items_next_appid)
}
inline void CStore_GetUserGameInterestState_Response::_internal_add_queue_items_next_appid(uint32_t value) {
  queue_items_next_appid_.Add(value);
}
inline void CStore_GetUserGameInterestState_Response::add_queue_items_next_appid(uint32_t value) {
  _internal_add_queue_items_next_appid(value);
  // @@protoc_insertion_point(field_add:CStore_GetUserGameInterestState_Response.queue_items_next_appid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetUserGameInterestState_Response::_internal_queue_items_next_appid() const {
  return queue_items_next_appid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetUserGameInterestState_Response::queue_items_next_appid() const {
  // @@protoc_insertion_point(field_list:CStore_GetUserGameInterestState_Response.queue_items_next_appid)
  return _internal_queue_items_next_appid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetUserGameInterestState_Response::_internal_mutable_queue_items_next_appid() {
  return &queue_items_next_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetUserGameInterestState_Response::mutable_queue_items_next_appid() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetUserGameInterestState_Response.queue_items_next_appid)
  return _internal_mutable_queue_items_next_appid();
}

// optional bool temporarily_owned = 9 [(.description) = "The user owns the game temporarily, eg a rental or free weekend"];
inline bool CStore_GetUserGameInterestState_Response::_internal_has_temporarily_owned() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_temporarily_owned() const {
  return _internal_has_temporarily_owned();
}
inline void CStore_GetUserGameInterestState_Response::clear_temporarily_owned() {
  temporarily_owned_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CStore_GetUserGameInterestState_Response::_internal_temporarily_owned() const {
  return temporarily_owned_;
}
inline bool CStore_GetUserGameInterestState_Response::temporarily_owned() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.temporarily_owned)
  return _internal_temporarily_owned();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_temporarily_owned(bool value) {
  _has_bits_[0] |= 0x00000010u;
  temporarily_owned_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_temporarily_owned(bool value) {
  _internal_set_temporarily_owned(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.temporarily_owned)
}

// repeated .CStore_GetUserGameInterestState_Response.InQueue queues = 10;
inline int CStore_GetUserGameInterestState_Response::_internal_queues_size() const {
  return queues_.size();
}
inline int CStore_GetUserGameInterestState_Response::queues_size() const {
  return _internal_queues_size();
}
inline void CStore_GetUserGameInterestState_Response::clear_queues() {
  queues_.Clear();
}
inline ::CStore_GetUserGameInterestState_Response_InQueue* CStore_GetUserGameInterestState_Response::mutable_queues(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_GetUserGameInterestState_Response.queues)
  return queues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetUserGameInterestState_Response_InQueue >*
CStore_GetUserGameInterestState_Response::mutable_queues() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetUserGameInterestState_Response.queues)
  return &queues_;
}
inline const ::CStore_GetUserGameInterestState_Response_InQueue& CStore_GetUserGameInterestState_Response::_internal_queues(int index) const {
  return queues_.Get(index);
}
inline const ::CStore_GetUserGameInterestState_Response_InQueue& CStore_GetUserGameInterestState_Response::queues(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.queues)
  return _internal_queues(index);
}
inline ::CStore_GetUserGameInterestState_Response_InQueue* CStore_GetUserGameInterestState_Response::_internal_add_queues() {
  return queues_.Add();
}
inline ::CStore_GetUserGameInterestState_Response_InQueue* CStore_GetUserGameInterestState_Response::add_queues() {
  ::CStore_GetUserGameInterestState_Response_InQueue* _add = _internal_add_queues();
  // @@protoc_insertion_point(field_add:CStore_GetUserGameInterestState_Response.queues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetUserGameInterestState_Response_InQueue >&
CStore_GetUserGameInterestState_Response::queues() const {
  // @@protoc_insertion_point(field_list:CStore_GetUserGameInterestState_Response.queues)
  return queues_;
}

// optional int32 ignored_reason = 11 [(.description) = "The ERecommendationIgnoreReason why the user ignored the app"];
inline bool CStore_GetUserGameInterestState_Response::_internal_has_ignored_reason() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_ignored_reason() const {
  return _internal_has_ignored_reason();
}
inline void CStore_GetUserGameInterestState_Response::clear_ignored_reason() {
  ignored_reason_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CStore_GetUserGameInterestState_Response::_internal_ignored_reason() const {
  return ignored_reason_;
}
inline int32_t CStore_GetUserGameInterestState_Response::ignored_reason() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.ignored_reason)
  return _internal_ignored_reason();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_ignored_reason(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  ignored_reason_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_ignored_reason(int32_t value) {
  _internal_set_ignored_reason(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.ignored_reason)
}

// optional .EPlaytestStatus beta_status = 12 [default = k_ETesterStatusNone, (.description) = "User interest or membership in the playtest for this app if any"];
inline bool CStore_GetUserGameInterestState_Response::_internal_has_beta_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStore_GetUserGameInterestState_Response::has_beta_status() const {
  return _internal_has_beta_status();
}
inline void CStore_GetUserGameInterestState_Response::clear_beta_status() {
  beta_status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::EPlaytestStatus CStore_GetUserGameInterestState_Response::_internal_beta_status() const {
  return static_cast< ::EPlaytestStatus >(beta_status_);
}
inline ::EPlaytestStatus CStore_GetUserGameInterestState_Response::beta_status() const {
  // @@protoc_insertion_point(field_get:CStore_GetUserGameInterestState_Response.beta_status)
  return _internal_beta_status();
}
inline void CStore_GetUserGameInterestState_Response::_internal_set_beta_status(::EPlaytestStatus value) {
  assert(::EPlaytestStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  beta_status_ = value;
}
inline void CStore_GetUserGameInterestState_Response::set_beta_status(::EPlaytestStatus value) {
  _internal_set_beta_status(value);
  // @@protoc_insertion_point(field_set:CStore_GetUserGameInterestState_Response.beta_status)
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueueSkippedApps_Request

// optional fixed64 steamid = 1;
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CStore_GetDiscoveryQueueSkippedApps_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CStore_GetDiscoveryQueueSkippedApps_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSkippedApps_Request.steamid)
  return _internal_steamid();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueueSkippedApps_Request.steamid)
}

// optional .EStoreDiscoveryQueueType queue_type = 2 [default = k_EStoreDiscoveryQueueTypeNew];
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::_internal_has_queue_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::has_queue_type() const {
  return _internal_has_queue_type();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::clear_queue_type() {
  queue_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueueSkippedApps_Request::_internal_queue_type() const {
  return static_cast< ::EStoreDiscoveryQueueType >(queue_type_);
}
inline ::EStoreDiscoveryQueueType CStore_GetDiscoveryQueueSkippedApps_Request::queue_type() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSkippedApps_Request.queue_type)
  return _internal_queue_type();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::_internal_set_queue_type(::EStoreDiscoveryQueueType value) {
  assert(::EStoreDiscoveryQueueType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  queue_type_ = value;
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::set_queue_type(::EStoreDiscoveryQueueType value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueueSkippedApps_Request.queue_type)
}

// optional .CStorePageFilter store_page_filter = 3;
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::_internal_has_store_page_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || store_page_filter_ != nullptr);
  return value;
}
inline bool CStore_GetDiscoveryQueueSkippedApps_Request::has_store_page_filter() const {
  return _internal_has_store_page_filter();
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueueSkippedApps_Request::_internal_store_page_filter() const {
  const ::CStorePageFilter* p = store_page_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStorePageFilter&>(
      ::_CStorePageFilter_default_instance_);
}
inline const ::CStorePageFilter& CStore_GetDiscoveryQueueSkippedApps_Request::store_page_filter() const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSkippedApps_Request.store_page_filter)
  return _internal_store_page_filter();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::unsafe_arena_set_allocated_store_page_filter(
    ::CStorePageFilter* store_page_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  store_page_filter_ = store_page_filter;
  if (store_page_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetDiscoveryQueueSkippedApps_Request.store_page_filter)
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSkippedApps_Request::release_store_page_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSkippedApps_Request::unsafe_arena_release_store_page_filter() {
  // @@protoc_insertion_point(field_release:CStore_GetDiscoveryQueueSkippedApps_Request.store_page_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::CStorePageFilter* temp = store_page_filter_;
  store_page_filter_ = nullptr;
  return temp;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSkippedApps_Request::_internal_mutable_store_page_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (store_page_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStorePageFilter>(GetArenaForAllocation());
    store_page_filter_ = p;
  }
  return store_page_filter_;
}
inline ::CStorePageFilter* CStore_GetDiscoveryQueueSkippedApps_Request::mutable_store_page_filter() {
  ::CStorePageFilter* _msg = _internal_mutable_store_page_filter();
  // @@protoc_insertion_point(field_mutable:CStore_GetDiscoveryQueueSkippedApps_Request.store_page_filter)
  return _msg;
}
inline void CStore_GetDiscoveryQueueSkippedApps_Request::set_allocated_store_page_filter(::CStorePageFilter* store_page_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter_);
  }
  if (store_page_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_page_filter));
    if (message_arena != submessage_arena) {
      store_page_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_page_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  store_page_filter_ = store_page_filter;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetDiscoveryQueueSkippedApps_Request.store_page_filter)
}

// -------------------------------------------------------------------

// CStore_GetDiscoveryQueueSkippedApps_Response

// repeated uint32 appids = 1;
inline int CStore_GetDiscoveryQueueSkippedApps_Response::_internal_appids_size() const {
  return appids_.size();
}
inline int CStore_GetDiscoveryQueueSkippedApps_Response::appids_size() const {
  return _internal_appids_size();
}
inline void CStore_GetDiscoveryQueueSkippedApps_Response::clear_appids() {
  appids_.Clear();
}
inline uint32_t CStore_GetDiscoveryQueueSkippedApps_Response::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CStore_GetDiscoveryQueueSkippedApps_Response::appids(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetDiscoveryQueueSkippedApps_Response.appids)
  return _internal_appids(index);
}
inline void CStore_GetDiscoveryQueueSkippedApps_Response::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetDiscoveryQueueSkippedApps_Response.appids)
}
inline void CStore_GetDiscoveryQueueSkippedApps_Response::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CStore_GetDiscoveryQueueSkippedApps_Response::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CStore_GetDiscoveryQueueSkippedApps_Response.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetDiscoveryQueueSkippedApps_Response::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CStore_GetDiscoveryQueueSkippedApps_Response::appids() const {
  // @@protoc_insertion_point(field_list:CStore_GetDiscoveryQueueSkippedApps_Response.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetDiscoveryQueueSkippedApps_Response::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CStore_GetDiscoveryQueueSkippedApps_Response::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetDiscoveryQueueSkippedApps_Response.appids)
  return _internal_mutable_appids();
}

// -------------------------------------------------------------------

// CStore_GetStorePreferences_Request

// -------------------------------------------------------------------

// CStore_UserPreferences

// optional int32 primary_language = 1;
inline bool CStore_UserPreferences::_internal_has_primary_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_primary_language() const {
  return _internal_has_primary_language();
}
inline void CStore_UserPreferences::clear_primary_language() {
  primary_language_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CStore_UserPreferences::_internal_primary_language() const {
  return primary_language_;
}
inline int32_t CStore_UserPreferences::primary_language() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.primary_language)
  return _internal_primary_language();
}
inline void CStore_UserPreferences::_internal_set_primary_language(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  primary_language_ = value;
}
inline void CStore_UserPreferences::set_primary_language(int32_t value) {
  _internal_set_primary_language(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.primary_language)
}

// optional uint32 secondary_languages = 2;
inline bool CStore_UserPreferences::_internal_has_secondary_languages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_secondary_languages() const {
  return _internal_has_secondary_languages();
}
inline void CStore_UserPreferences::clear_secondary_languages() {
  secondary_languages_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStore_UserPreferences::_internal_secondary_languages() const {
  return secondary_languages_;
}
inline uint32_t CStore_UserPreferences::secondary_languages() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.secondary_languages)
  return _internal_secondary_languages();
}
inline void CStore_UserPreferences::_internal_set_secondary_languages(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  secondary_languages_ = value;
}
inline void CStore_UserPreferences::set_secondary_languages(uint32_t value) {
  _internal_set_secondary_languages(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.secondary_languages)
}

// optional bool platform_windows = 3;
inline bool CStore_UserPreferences::_internal_has_platform_windows() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_platform_windows() const {
  return _internal_has_platform_windows();
}
inline void CStore_UserPreferences::clear_platform_windows() {
  platform_windows_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CStore_UserPreferences::_internal_platform_windows() const {
  return platform_windows_;
}
inline bool CStore_UserPreferences::platform_windows() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.platform_windows)
  return _internal_platform_windows();
}
inline void CStore_UserPreferences::_internal_set_platform_windows(bool value) {
  _has_bits_[0] |= 0x00000008u;
  platform_windows_ = value;
}
inline void CStore_UserPreferences::set_platform_windows(bool value) {
  _internal_set_platform_windows(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.platform_windows)
}

// optional bool platform_mac = 4;
inline bool CStore_UserPreferences::_internal_has_platform_mac() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_platform_mac() const {
  return _internal_has_platform_mac();
}
inline void CStore_UserPreferences::clear_platform_mac() {
  platform_mac_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CStore_UserPreferences::_internal_platform_mac() const {
  return platform_mac_;
}
inline bool CStore_UserPreferences::platform_mac() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.platform_mac)
  return _internal_platform_mac();
}
inline void CStore_UserPreferences::_internal_set_platform_mac(bool value) {
  _has_bits_[0] |= 0x00000010u;
  platform_mac_ = value;
}
inline void CStore_UserPreferences::set_platform_mac(bool value) {
  _internal_set_platform_mac(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.platform_mac)
}

// optional bool platform_linux = 5;
inline bool CStore_UserPreferences::_internal_has_platform_linux() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_platform_linux() const {
  return _internal_has_platform_linux();
}
inline void CStore_UserPreferences::clear_platform_linux() {
  platform_linux_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CStore_UserPreferences::_internal_platform_linux() const {
  return platform_linux_;
}
inline bool CStore_UserPreferences::platform_linux() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.platform_linux)
  return _internal_platform_linux();
}
inline void CStore_UserPreferences::_internal_set_platform_linux(bool value) {
  _has_bits_[0] |= 0x00000020u;
  platform_linux_ = value;
}
inline void CStore_UserPreferences::set_platform_linux(bool value) {
  _internal_set_platform_linux(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.platform_linux)
}

// optional uint32 timestamp_updated = 8;
inline bool CStore_UserPreferences::_internal_has_timestamp_updated() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_timestamp_updated() const {
  return _internal_has_timestamp_updated();
}
inline void CStore_UserPreferences::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CStore_UserPreferences::_internal_timestamp_updated() const {
  return timestamp_updated_;
}
inline uint32_t CStore_UserPreferences::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.timestamp_updated)
  return _internal_timestamp_updated();
}
inline void CStore_UserPreferences::_internal_set_timestamp_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_updated_ = value;
}
inline void CStore_UserPreferences::set_timestamp_updated(uint32_t value) {
  _internal_set_timestamp_updated(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.timestamp_updated)
}

// optional bool hide_store_broadcast = 9;
inline bool CStore_UserPreferences::_internal_has_hide_store_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_hide_store_broadcast() const {
  return _internal_has_hide_store_broadcast();
}
inline void CStore_UserPreferences::clear_hide_store_broadcast() {
  hide_store_broadcast_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CStore_UserPreferences::_internal_hide_store_broadcast() const {
  return hide_store_broadcast_;
}
inline bool CStore_UserPreferences::hide_store_broadcast() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.hide_store_broadcast)
  return _internal_hide_store_broadcast();
}
inline void CStore_UserPreferences::_internal_set_hide_store_broadcast(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hide_store_broadcast_ = value;
}
inline void CStore_UserPreferences::set_hide_store_broadcast(bool value) {
  _internal_set_hide_store_broadcast(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.hide_store_broadcast)
}

// optional .EUserReviewScorePreference review_score_preference = 10 [default = k_EUserReviewScorePreference_Unset];
inline bool CStore_UserPreferences::_internal_has_review_score_preference() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_review_score_preference() const {
  return _internal_has_review_score_preference();
}
inline void CStore_UserPreferences::clear_review_score_preference() {
  review_score_preference_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::EUserReviewScorePreference CStore_UserPreferences::_internal_review_score_preference() const {
  return static_cast< ::EUserReviewScorePreference >(review_score_preference_);
}
inline ::EUserReviewScorePreference CStore_UserPreferences::review_score_preference() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.review_score_preference)
  return _internal_review_score_preference();
}
inline void CStore_UserPreferences::_internal_set_review_score_preference(::EUserReviewScorePreference value) {
  assert(::EUserReviewScorePreference_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  review_score_preference_ = value;
}
inline void CStore_UserPreferences::set_review_score_preference(::EUserReviewScorePreference value) {
  _internal_set_review_score_preference(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.review_score_preference)
}

// optional int32 timestamp_content_descriptor_preferences_updated = 11;
inline bool CStore_UserPreferences::_internal_has_timestamp_content_descriptor_preferences_updated() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_timestamp_content_descriptor_preferences_updated() const {
  return _internal_has_timestamp_content_descriptor_preferences_updated();
}
inline void CStore_UserPreferences::clear_timestamp_content_descriptor_preferences_updated() {
  timestamp_content_descriptor_preferences_updated_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CStore_UserPreferences::_internal_timestamp_content_descriptor_preferences_updated() const {
  return timestamp_content_descriptor_preferences_updated_;
}
inline int32_t CStore_UserPreferences::timestamp_content_descriptor_preferences_updated() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.timestamp_content_descriptor_preferences_updated)
  return _internal_timestamp_content_descriptor_preferences_updated();
}
inline void CStore_UserPreferences::_internal_set_timestamp_content_descriptor_preferences_updated(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_content_descriptor_preferences_updated_ = value;
}
inline void CStore_UserPreferences::set_timestamp_content_descriptor_preferences_updated(int32_t value) {
  _internal_set_timestamp_content_descriptor_preferences_updated(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.timestamp_content_descriptor_preferences_updated)
}

// optional .EProvideDeckFeedbackPreference provide_deck_feedback = 12 [default = k_EProvideDeckFeedbackPreference_Unset];
inline bool CStore_UserPreferences::_internal_has_provide_deck_feedback() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_provide_deck_feedback() const {
  return _internal_has_provide_deck_feedback();
}
inline void CStore_UserPreferences::clear_provide_deck_feedback() {
  provide_deck_feedback_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::EProvideDeckFeedbackPreference CStore_UserPreferences::_internal_provide_deck_feedback() const {
  return static_cast< ::EProvideDeckFeedbackPreference >(provide_deck_feedback_);
}
inline ::EProvideDeckFeedbackPreference CStore_UserPreferences::provide_deck_feedback() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.provide_deck_feedback)
  return _internal_provide_deck_feedback();
}
inline void CStore_UserPreferences::_internal_set_provide_deck_feedback(::EProvideDeckFeedbackPreference value) {
  assert(::EProvideDeckFeedbackPreference_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  provide_deck_feedback_ = value;
}
inline void CStore_UserPreferences::set_provide_deck_feedback(::EProvideDeckFeedbackPreference value) {
  _internal_set_provide_deck_feedback(value);
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.provide_deck_feedback)
}

// optional string additional_languages = 13;
inline bool CStore_UserPreferences::_internal_has_additional_languages() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_UserPreferences::has_additional_languages() const {
  return _internal_has_additional_languages();
}
inline void CStore_UserPreferences::clear_additional_languages() {
  additional_languages_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_UserPreferences::additional_languages() const {
  // @@protoc_insertion_point(field_get:CStore_UserPreferences.additional_languages)
  return _internal_additional_languages();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_UserPreferences::set_additional_languages(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 additional_languages_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_UserPreferences.additional_languages)
}
inline std::string* CStore_UserPreferences::mutable_additional_languages() {
  std::string* _s = _internal_mutable_additional_languages();
  // @@protoc_insertion_point(field_mutable:CStore_UserPreferences.additional_languages)
  return _s;
}
inline const std::string& CStore_UserPreferences::_internal_additional_languages() const {
  return additional_languages_.Get();
}
inline void CStore_UserPreferences::_internal_set_additional_languages(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  additional_languages_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_UserPreferences::_internal_mutable_additional_languages() {
  _has_bits_[0] |= 0x00000001u;
  return additional_languages_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_UserPreferences::release_additional_languages() {
  // @@protoc_insertion_point(field_release:CStore_UserPreferences.additional_languages)
  if (!_internal_has_additional_languages()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = additional_languages_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_languages_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_languages_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_UserPreferences::set_allocated_additional_languages(std::string* additional_languages) {
  if (additional_languages != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  additional_languages_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_languages,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (additional_languages_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    additional_languages_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_UserPreferences.additional_languages)
}

// -------------------------------------------------------------------

// CStore_UserTagPreferences_Tag

// optional uint32 tagid = 1;
inline bool CStore_UserTagPreferences_Tag::_internal_has_tagid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_UserTagPreferences_Tag::has_tagid() const {
  return _internal_has_tagid();
}
inline void CStore_UserTagPreferences_Tag::clear_tagid() {
  tagid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_UserTagPreferences_Tag::_internal_tagid() const {
  return tagid_;
}
inline uint32_t CStore_UserTagPreferences_Tag::tagid() const {
  // @@protoc_insertion_point(field_get:CStore_UserTagPreferences.Tag.tagid)
  return _internal_tagid();
}
inline void CStore_UserTagPreferences_Tag::_internal_set_tagid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  tagid_ = value;
}
inline void CStore_UserTagPreferences_Tag::set_tagid(uint32_t value) {
  _internal_set_tagid(value);
  // @@protoc_insertion_point(field_set:CStore_UserTagPreferences.Tag.tagid)
}

// optional string name = 2;
inline bool CStore_UserTagPreferences_Tag::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_UserTagPreferences_Tag::has_name() const {
  return _internal_has_name();
}
inline void CStore_UserTagPreferences_Tag::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CStore_UserTagPreferences_Tag::name() const {
  // @@protoc_insertion_point(field_get:CStore_UserTagPreferences.Tag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStore_UserTagPreferences_Tag::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CStore_UserTagPreferences.Tag.name)
}
inline std::string* CStore_UserTagPreferences_Tag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CStore_UserTagPreferences.Tag.name)
  return _s;
}
inline const std::string& CStore_UserTagPreferences_Tag::_internal_name() const {
  return name_.Get();
}
inline void CStore_UserTagPreferences_Tag::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CStore_UserTagPreferences_Tag::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CStore_UserTagPreferences_Tag::release_name() {
  // @@protoc_insertion_point(field_release:CStore_UserTagPreferences.Tag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CStore_UserTagPreferences_Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CStore_UserTagPreferences.Tag.name)
}

// optional uint32 timestamp_added = 3;
inline bool CStore_UserTagPreferences_Tag::_internal_has_timestamp_added() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CStore_UserTagPreferences_Tag::has_timestamp_added() const {
  return _internal_has_timestamp_added();
}
inline void CStore_UserTagPreferences_Tag::clear_timestamp_added() {
  timestamp_added_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CStore_UserTagPreferences_Tag::_internal_timestamp_added() const {
  return timestamp_added_;
}
inline uint32_t CStore_UserTagPreferences_Tag::timestamp_added() const {
  // @@protoc_insertion_point(field_get:CStore_UserTagPreferences.Tag.timestamp_added)
  return _internal_timestamp_added();
}
inline void CStore_UserTagPreferences_Tag::_internal_set_timestamp_added(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_added_ = value;
}
inline void CStore_UserTagPreferences_Tag::set_timestamp_added(uint32_t value) {
  _internal_set_timestamp_added(value);
  // @@protoc_insertion_point(field_set:CStore_UserTagPreferences.Tag.timestamp_added)
}

// -------------------------------------------------------------------

// CStore_UserTagPreferences

// repeated .CStore_UserTagPreferences.Tag tags_to_exclude = 1;
inline int CStore_UserTagPreferences::_internal_tags_to_exclude_size() const {
  return tags_to_exclude_.size();
}
inline int CStore_UserTagPreferences::tags_to_exclude_size() const {
  return _internal_tags_to_exclude_size();
}
inline void CStore_UserTagPreferences::clear_tags_to_exclude() {
  tags_to_exclude_.Clear();
}
inline ::CStore_UserTagPreferences_Tag* CStore_UserTagPreferences::mutable_tags_to_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_UserTagPreferences.tags_to_exclude)
  return tags_to_exclude_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_UserTagPreferences_Tag >*
CStore_UserTagPreferences::mutable_tags_to_exclude() {
  // @@protoc_insertion_point(field_mutable_list:CStore_UserTagPreferences.tags_to_exclude)
  return &tags_to_exclude_;
}
inline const ::CStore_UserTagPreferences_Tag& CStore_UserTagPreferences::_internal_tags_to_exclude(int index) const {
  return tags_to_exclude_.Get(index);
}
inline const ::CStore_UserTagPreferences_Tag& CStore_UserTagPreferences::tags_to_exclude(int index) const {
  // @@protoc_insertion_point(field_get:CStore_UserTagPreferences.tags_to_exclude)
  return _internal_tags_to_exclude(index);
}
inline ::CStore_UserTagPreferences_Tag* CStore_UserTagPreferences::_internal_add_tags_to_exclude() {
  return tags_to_exclude_.Add();
}
inline ::CStore_UserTagPreferences_Tag* CStore_UserTagPreferences::add_tags_to_exclude() {
  ::CStore_UserTagPreferences_Tag* _add = _internal_add_tags_to_exclude();
  // @@protoc_insertion_point(field_add:CStore_UserTagPreferences.tags_to_exclude)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_UserTagPreferences_Tag >&
CStore_UserTagPreferences::tags_to_exclude() const {
  // @@protoc_insertion_point(field_list:CStore_UserTagPreferences.tags_to_exclude)
  return tags_to_exclude_;
}

// -------------------------------------------------------------------

// CStore_GetStorePreferences_Response

// optional .CStore_UserPreferences preferences = 1;
inline bool CStore_GetStorePreferences_Response::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CStore_GetStorePreferences_Response::has_preferences() const {
  return _internal_has_preferences();
}
inline void CStore_GetStorePreferences_Response::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CStore_UserPreferences& CStore_GetStorePreferences_Response::_internal_preferences() const {
  const ::CStore_UserPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStore_UserPreferences&>(
      ::_CStore_UserPreferences_default_instance_);
}
inline const ::CStore_UserPreferences& CStore_GetStorePreferences_Response::preferences() const {
  // @@protoc_insertion_point(field_get:CStore_GetStorePreferences_Response.preferences)
  return _internal_preferences();
}
inline void CStore_GetStorePreferences_Response::unsafe_arena_set_allocated_preferences(
    ::CStore_UserPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetStorePreferences_Response.preferences)
}
inline ::CStore_UserPreferences* CStore_GetStorePreferences_Response::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_UserPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStore_UserPreferences* CStore_GetStorePreferences_Response::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CStore_GetStorePreferences_Response.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_UserPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::CStore_UserPreferences* CStore_GetStorePreferences_Response::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStore_UserPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::CStore_UserPreferences* CStore_GetStorePreferences_Response::mutable_preferences() {
  ::CStore_UserPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_GetStorePreferences_Response.preferences)
  return _msg;
}
inline void CStore_GetStorePreferences_Response::set_allocated_preferences(::CStore_UserPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStore_UserPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetStorePreferences_Response.preferences)
}

// optional .CStore_UserTagPreferences tag_preferences = 2;
inline bool CStore_GetStorePreferences_Response::_internal_has_tag_preferences() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tag_preferences_ != nullptr);
  return value;
}
inline bool CStore_GetStorePreferences_Response::has_tag_preferences() const {
  return _internal_has_tag_preferences();
}
inline void CStore_GetStorePreferences_Response::clear_tag_preferences() {
  if (tag_preferences_ != nullptr) tag_preferences_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CStore_UserTagPreferences& CStore_GetStorePreferences_Response::_internal_tag_preferences() const {
  const ::CStore_UserTagPreferences* p = tag_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStore_UserTagPreferences&>(
      ::_CStore_UserTagPreferences_default_instance_);
}
inline const ::CStore_UserTagPreferences& CStore_GetStorePreferences_Response::tag_preferences() const {
  // @@protoc_insertion_point(field_get:CStore_GetStorePreferences_Response.tag_preferences)
  return _internal_tag_preferences();
}
inline void CStore_GetStorePreferences_Response::unsafe_arena_set_allocated_tag_preferences(
    ::CStore_UserTagPreferences* tag_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_preferences_);
  }
  tag_preferences_ = tag_preferences;
  if (tag_preferences) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetStorePreferences_Response.tag_preferences)
}
inline ::CStore_UserTagPreferences* CStore_GetStorePreferences_Response::release_tag_preferences() {
  _has_bits_[0] &= ~0x00000002u;
  ::CStore_UserTagPreferences* temp = tag_preferences_;
  tag_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStore_UserTagPreferences* CStore_GetStorePreferences_Response::unsafe_arena_release_tag_preferences() {
  // @@protoc_insertion_point(field_release:CStore_GetStorePreferences_Response.tag_preferences)
  _has_bits_[0] &= ~0x00000002u;
  ::CStore_UserTagPreferences* temp = tag_preferences_;
  tag_preferences_ = nullptr;
  return temp;
}
inline ::CStore_UserTagPreferences* CStore_GetStorePreferences_Response::_internal_mutable_tag_preferences() {
  _has_bits_[0] |= 0x00000002u;
  if (tag_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStore_UserTagPreferences>(GetArenaForAllocation());
    tag_preferences_ = p;
  }
  return tag_preferences_;
}
inline ::CStore_UserTagPreferences* CStore_GetStorePreferences_Response::mutable_tag_preferences() {
  ::CStore_UserTagPreferences* _msg = _internal_mutable_tag_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_GetStorePreferences_Response.tag_preferences)
  return _msg;
}
inline void CStore_GetStorePreferences_Response::set_allocated_tag_preferences(::CStore_UserTagPreferences* tag_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_preferences_;
  }
  if (tag_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStore_UserTagPreferences>::GetOwningArena(tag_preferences);
    if (message_arena != submessage_arena) {
      tag_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_preferences_ = tag_preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetStorePreferences_Response.tag_preferences)
}

// optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
inline bool CStore_GetStorePreferences_Response::_internal_has_content_descriptor_preferences() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || content_descriptor_preferences_ != nullptr);
  return value;
}
inline bool CStore_GetStorePreferences_Response::has_content_descriptor_preferences() const {
  return _internal_has_content_descriptor_preferences();
}
inline const ::UserContentDescriptorPreferences& CStore_GetStorePreferences_Response::_internal_content_descriptor_preferences() const {
  const ::UserContentDescriptorPreferences* p = content_descriptor_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserContentDescriptorPreferences&>(
      ::_UserContentDescriptorPreferences_default_instance_);
}
inline const ::UserContentDescriptorPreferences& CStore_GetStorePreferences_Response::content_descriptor_preferences() const {
  // @@protoc_insertion_point(field_get:CStore_GetStorePreferences_Response.content_descriptor_preferences)
  return _internal_content_descriptor_preferences();
}
inline void CStore_GetStorePreferences_Response::unsafe_arena_set_allocated_content_descriptor_preferences(
    ::UserContentDescriptorPreferences* content_descriptor_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  if (content_descriptor_preferences) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_GetStorePreferences_Response.content_descriptor_preferences)
}
inline ::UserContentDescriptorPreferences* CStore_GetStorePreferences_Response::release_content_descriptor_preferences() {
  _has_bits_[0] &= ~0x00000004u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserContentDescriptorPreferences* CStore_GetStorePreferences_Response::unsafe_arena_release_content_descriptor_preferences() {
  // @@protoc_insertion_point(field_release:CStore_GetStorePreferences_Response.content_descriptor_preferences)
  _has_bits_[0] &= ~0x00000004u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
  return temp;
}
inline ::UserContentDescriptorPreferences* CStore_GetStorePreferences_Response::_internal_mutable_content_descriptor_preferences() {
  _has_bits_[0] |= 0x00000004u;
  if (content_descriptor_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserContentDescriptorPreferences>(GetArenaForAllocation());
    content_descriptor_preferences_ = p;
  }
  return content_descriptor_preferences_;
}
inline ::UserContentDescriptorPreferences* CStore_GetStorePreferences_Response::mutable_content_descriptor_preferences() {
  ::UserContentDescriptorPreferences* _msg = _internal_mutable_content_descriptor_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_GetStorePreferences_Response.content_descriptor_preferences)
  return _msg;
}
inline void CStore_GetStorePreferences_Response::set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  if (content_descriptor_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences));
    if (message_arena != submessage_arena) {
      content_descriptor_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_descriptor_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_GetStorePreferences_Response.content_descriptor_preferences)
}

// -------------------------------------------------------------------

// CStore_GetTrendingAppsAmongFriends_Request

// optional uint32 num_apps = 1;
inline bool CStore_GetTrendingAppsAmongFriends_Request::_internal_has_num_apps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetTrendingAppsAmongFriends_Request::has_num_apps() const {
  return _internal_has_num_apps();
}
inline void CStore_GetTrendingAppsAmongFriends_Request::clear_num_apps() {
  num_apps_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Request::_internal_num_apps() const {
  return num_apps_;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Request::num_apps() const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Request.num_apps)
  return _internal_num_apps();
}
inline void CStore_GetTrendingAppsAmongFriends_Request::_internal_set_num_apps(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  num_apps_ = value;
}
inline void CStore_GetTrendingAppsAmongFriends_Request::set_num_apps(uint32_t value) {
  _internal_set_num_apps(value);
  // @@protoc_insertion_point(field_set:CStore_GetTrendingAppsAmongFriends_Request.num_apps)
}

// optional uint32 num_top_friends = 2;
inline bool CStore_GetTrendingAppsAmongFriends_Request::_internal_has_num_top_friends() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetTrendingAppsAmongFriends_Request::has_num_top_friends() const {
  return _internal_has_num_top_friends();
}
inline void CStore_GetTrendingAppsAmongFriends_Request::clear_num_top_friends() {
  num_top_friends_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Request::_internal_num_top_friends() const {
  return num_top_friends_;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Request::num_top_friends() const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Request.num_top_friends)
  return _internal_num_top_friends();
}
inline void CStore_GetTrendingAppsAmongFriends_Request::_internal_set_num_top_friends(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_top_friends_ = value;
}
inline void CStore_GetTrendingAppsAmongFriends_Request::set_num_top_friends(uint32_t value) {
  _internal_set_num_top_friends(value);
  // @@protoc_insertion_point(field_set:CStore_GetTrendingAppsAmongFriends_Request.num_top_friends)
}

// -------------------------------------------------------------------

// CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData

// optional uint32 appid = 1;
inline bool CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::has_appid() const {
  return _internal_has_appid();
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_appid() const {
  return appid_;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::appid() const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.appid)
  return _internal_appid();
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.appid)
}

// repeated uint64 steamids_top_friends = 2;
inline int CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_steamids_top_friends_size() const {
  return steamids_top_friends_.size();
}
inline int CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::steamids_top_friends_size() const {
  return _internal_steamids_top_friends_size();
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::clear_steamids_top_friends() {
  steamids_top_friends_.Clear();
}
inline uint64_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_steamids_top_friends(int index) const {
  return steamids_top_friends_.Get(index);
}
inline uint64_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::steamids_top_friends(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.steamids_top_friends)
  return _internal_steamids_top_friends(index);
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::set_steamids_top_friends(int index, uint64_t value) {
  steamids_top_friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.steamids_top_friends)
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_add_steamids_top_friends(uint64_t value) {
  steamids_top_friends_.Add(value);
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::add_steamids_top_friends(uint64_t value) {
  _internal_add_steamids_top_friends(value);
  // @@protoc_insertion_point(field_add:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.steamids_top_friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_steamids_top_friends() const {
  return steamids_top_friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::steamids_top_friends() const {
  // @@protoc_insertion_point(field_list:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.steamids_top_friends)
  return _internal_steamids_top_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_mutable_steamids_top_friends() {
  return &steamids_top_friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::mutable_steamids_top_friends() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.steamids_top_friends)
  return _internal_mutable_steamids_top_friends();
}

// optional uint32 total_friends = 3;
inline bool CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_has_total_friends() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::has_total_friends() const {
  return _internal_has_total_friends();
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::clear_total_friends() {
  total_friends_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_total_friends() const {
  return total_friends_;
}
inline uint32_t CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::total_friends() const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.total_friends)
  return _internal_total_friends();
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::_internal_set_total_friends(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  total_friends_ = value;
}
inline void CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData::set_total_friends(uint32_t value) {
  _internal_set_total_friends(value);
  // @@protoc_insertion_point(field_set:CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData.total_friends)
}

// -------------------------------------------------------------------

// CStore_GetTrendingAppsAmongFriends_Response

// repeated .CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData trending_apps = 1;
inline int CStore_GetTrendingAppsAmongFriends_Response::_internal_trending_apps_size() const {
  return trending_apps_.size();
}
inline int CStore_GetTrendingAppsAmongFriends_Response::trending_apps_size() const {
  return _internal_trending_apps_size();
}
inline void CStore_GetTrendingAppsAmongFriends_Response::clear_trending_apps() {
  trending_apps_.Clear();
}
inline ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* CStore_GetTrendingAppsAmongFriends_Response::mutable_trending_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CStore_GetTrendingAppsAmongFriends_Response.trending_apps)
  return trending_apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >*
CStore_GetTrendingAppsAmongFriends_Response::mutable_trending_apps() {
  // @@protoc_insertion_point(field_mutable_list:CStore_GetTrendingAppsAmongFriends_Response.trending_apps)
  return &trending_apps_;
}
inline const ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& CStore_GetTrendingAppsAmongFriends_Response::_internal_trending_apps(int index) const {
  return trending_apps_.Get(index);
}
inline const ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData& CStore_GetTrendingAppsAmongFriends_Response::trending_apps(int index) const {
  // @@protoc_insertion_point(field_get:CStore_GetTrendingAppsAmongFriends_Response.trending_apps)
  return _internal_trending_apps(index);
}
inline ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* CStore_GetTrendingAppsAmongFriends_Response::_internal_add_trending_apps() {
  return trending_apps_.Add();
}
inline ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* CStore_GetTrendingAppsAmongFriends_Response::add_trending_apps() {
  ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData* _add = _internal_add_trending_apps();
  // @@protoc_insertion_point(field_add:CStore_GetTrendingAppsAmongFriends_Response.trending_apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData >&
CStore_GetTrendingAppsAmongFriends_Response::trending_apps() const {
  // @@protoc_insertion_point(field_list:CStore_GetTrendingAppsAmongFriends_Response.trending_apps)
  return trending_apps_;
}

// -------------------------------------------------------------------

// CSteamDeckCompatibility_SetFeedback_Request

// optional uint32 appid = 1;
inline bool CSteamDeckCompatibility_SetFeedback_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_SetFeedback_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CSteamDeckCompatibility_SetFeedback_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSteamDeckCompatibility_SetFeedback_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CSteamDeckCompatibility_SetFeedback_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_SetFeedback_Request.appid)
  return _internal_appid();
}
inline void CSteamDeckCompatibility_SetFeedback_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CSteamDeckCompatibility_SetFeedback_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_SetFeedback_Request.appid)
}

// optional .ESteamDeckCompatibilityFeedback feedback = 2 [default = k_ESteamDeckCompatibilityFeedback_Unset];
inline bool CSteamDeckCompatibility_SetFeedback_Request::_internal_has_feedback() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_SetFeedback_Request::has_feedback() const {
  return _internal_has_feedback();
}
inline void CSteamDeckCompatibility_SetFeedback_Request::clear_feedback() {
  feedback_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ESteamDeckCompatibilityFeedback CSteamDeckCompatibility_SetFeedback_Request::_internal_feedback() const {
  return static_cast< ::ESteamDeckCompatibilityFeedback >(feedback_);
}
inline ::ESteamDeckCompatibilityFeedback CSteamDeckCompatibility_SetFeedback_Request::feedback() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_SetFeedback_Request.feedback)
  return _internal_feedback();
}
inline void CSteamDeckCompatibility_SetFeedback_Request::_internal_set_feedback(::ESteamDeckCompatibilityFeedback value) {
  assert(::ESteamDeckCompatibilityFeedback_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  feedback_ = value;
}
inline void CSteamDeckCompatibility_SetFeedback_Request::set_feedback(::ESteamDeckCompatibilityFeedback value) {
  _internal_set_feedback(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_SetFeedback_Request.feedback)
}

// -------------------------------------------------------------------

// CSteamDeckCompatibility_SetFeedback_Response

// -------------------------------------------------------------------

// CSteamDeckCompatibility_ShouldPrompt_Request

// optional uint32 appid = 1;
inline bool CSteamDeckCompatibility_ShouldPrompt_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSteamDeckCompatibility_ShouldPrompt_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CSteamDeckCompatibility_ShouldPrompt_Request::appid() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_ShouldPrompt_Request.appid)
  return _internal_appid();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CSteamDeckCompatibility_ShouldPrompt_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_ShouldPrompt_Request.appid)
}

// -------------------------------------------------------------------

// CSteamDeckCompatibility_ShouldPrompt_Response

// optional bool prompt = 1;
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::_internal_has_prompt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::has_prompt() const {
  return _internal_has_prompt();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::clear_prompt() {
  prompt_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::_internal_prompt() const {
  return prompt_;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::prompt() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_ShouldPrompt_Response.prompt)
  return _internal_prompt();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::_internal_set_prompt(bool value) {
  _has_bits_[0] |= 0x00000001u;
  prompt_ = value;
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::set_prompt(bool value) {
  _internal_set_prompt(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_ShouldPrompt_Response.prompt)
}

// optional bool feedback_eligible = 2;
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::_internal_has_feedback_eligible() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::has_feedback_eligible() const {
  return _internal_has_feedback_eligible();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::clear_feedback_eligible() {
  feedback_eligible_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::_internal_feedback_eligible() const {
  return feedback_eligible_;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::feedback_eligible() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_ShouldPrompt_Response.feedback_eligible)
  return _internal_feedback_eligible();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::_internal_set_feedback_eligible(bool value) {
  _has_bits_[0] |= 0x00000002u;
  feedback_eligible_ = value;
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::set_feedback_eligible(bool value) {
  _internal_set_feedback_eligible(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_ShouldPrompt_Response.feedback_eligible)
}

// optional .ESteamDeckCompatibilityFeedback existing_feedback = 3 [default = k_ESteamDeckCompatibilityFeedback_Unset];
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::_internal_has_existing_feedback() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSteamDeckCompatibility_ShouldPrompt_Response::has_existing_feedback() const {
  return _internal_has_existing_feedback();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::clear_existing_feedback() {
  existing_feedback_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ESteamDeckCompatibilityFeedback CSteamDeckCompatibility_ShouldPrompt_Response::_internal_existing_feedback() const {
  return static_cast< ::ESteamDeckCompatibilityFeedback >(existing_feedback_);
}
inline ::ESteamDeckCompatibilityFeedback CSteamDeckCompatibility_ShouldPrompt_Response::existing_feedback() const {
  // @@protoc_insertion_point(field_get:CSteamDeckCompatibility_ShouldPrompt_Response.existing_feedback)
  return _internal_existing_feedback();
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::_internal_set_existing_feedback(::ESteamDeckCompatibilityFeedback value) {
  assert(::ESteamDeckCompatibilityFeedback_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  existing_feedback_ = value;
}
inline void CSteamDeckCompatibility_ShouldPrompt_Response::set_existing_feedback(::ESteamDeckCompatibilityFeedback value) {
  _internal_set_existing_feedback(value);
  // @@protoc_insertion_point(field_set:CSteamDeckCompatibility_ShouldPrompt_Response.existing_feedback)
}

// -------------------------------------------------------------------

// CStore_StorePreferencesChanged_Notification

// optional .CStore_UserPreferences preferences = 1;
inline bool CStore_StorePreferencesChanged_Notification::_internal_has_preferences() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preferences_ != nullptr);
  return value;
}
inline bool CStore_StorePreferencesChanged_Notification::has_preferences() const {
  return _internal_has_preferences();
}
inline void CStore_StorePreferencesChanged_Notification::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CStore_UserPreferences& CStore_StorePreferencesChanged_Notification::_internal_preferences() const {
  const ::CStore_UserPreferences* p = preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStore_UserPreferences&>(
      ::_CStore_UserPreferences_default_instance_);
}
inline const ::CStore_UserPreferences& CStore_StorePreferencesChanged_Notification::preferences() const {
  // @@protoc_insertion_point(field_get:CStore_StorePreferencesChanged_Notification.preferences)
  return _internal_preferences();
}
inline void CStore_StorePreferencesChanged_Notification::unsafe_arena_set_allocated_preferences(
    ::CStore_UserPreferences* preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferences_);
  }
  preferences_ = preferences;
  if (preferences) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_StorePreferencesChanged_Notification.preferences)
}
inline ::CStore_UserPreferences* CStore_StorePreferencesChanged_Notification::release_preferences() {
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_UserPreferences* temp = preferences_;
  preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStore_UserPreferences* CStore_StorePreferencesChanged_Notification::unsafe_arena_release_preferences() {
  // @@protoc_insertion_point(field_release:CStore_StorePreferencesChanged_Notification.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::CStore_UserPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::CStore_UserPreferences* CStore_StorePreferencesChanged_Notification::_internal_mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStore_UserPreferences>(GetArenaForAllocation());
    preferences_ = p;
  }
  return preferences_;
}
inline ::CStore_UserPreferences* CStore_StorePreferencesChanged_Notification::mutable_preferences() {
  ::CStore_UserPreferences* _msg = _internal_mutable_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_StorePreferencesChanged_Notification.preferences)
  return _msg;
}
inline void CStore_StorePreferencesChanged_Notification::set_allocated_preferences(::CStore_UserPreferences* preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStore_UserPreferences>::GetOwningArena(preferences);
    if (message_arena != submessage_arena) {
      preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_StorePreferencesChanged_Notification.preferences)
}

// optional .CStore_UserTagPreferences tag_preferences = 2;
inline bool CStore_StorePreferencesChanged_Notification::_internal_has_tag_preferences() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tag_preferences_ != nullptr);
  return value;
}
inline bool CStore_StorePreferencesChanged_Notification::has_tag_preferences() const {
  return _internal_has_tag_preferences();
}
inline void CStore_StorePreferencesChanged_Notification::clear_tag_preferences() {
  if (tag_preferences_ != nullptr) tag_preferences_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CStore_UserTagPreferences& CStore_StorePreferencesChanged_Notification::_internal_tag_preferences() const {
  const ::CStore_UserTagPreferences* p = tag_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::CStore_UserTagPreferences&>(
      ::_CStore_UserTagPreferences_default_instance_);
}
inline const ::CStore_UserTagPreferences& CStore_StorePreferencesChanged_Notification::tag_preferences() const {
  // @@protoc_insertion_point(field_get:CStore_StorePreferencesChanged_Notification.tag_preferences)
  return _internal_tag_preferences();
}
inline void CStore_StorePreferencesChanged_Notification::unsafe_arena_set_allocated_tag_preferences(
    ::CStore_UserTagPreferences* tag_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_preferences_);
  }
  tag_preferences_ = tag_preferences;
  if (tag_preferences) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_StorePreferencesChanged_Notification.tag_preferences)
}
inline ::CStore_UserTagPreferences* CStore_StorePreferencesChanged_Notification::release_tag_preferences() {
  _has_bits_[0] &= ~0x00000002u;
  ::CStore_UserTagPreferences* temp = tag_preferences_;
  tag_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CStore_UserTagPreferences* CStore_StorePreferencesChanged_Notification::unsafe_arena_release_tag_preferences() {
  // @@protoc_insertion_point(field_release:CStore_StorePreferencesChanged_Notification.tag_preferences)
  _has_bits_[0] &= ~0x00000002u;
  ::CStore_UserTagPreferences* temp = tag_preferences_;
  tag_preferences_ = nullptr;
  return temp;
}
inline ::CStore_UserTagPreferences* CStore_StorePreferencesChanged_Notification::_internal_mutable_tag_preferences() {
  _has_bits_[0] |= 0x00000002u;
  if (tag_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::CStore_UserTagPreferences>(GetArenaForAllocation());
    tag_preferences_ = p;
  }
  return tag_preferences_;
}
inline ::CStore_UserTagPreferences* CStore_StorePreferencesChanged_Notification::mutable_tag_preferences() {
  ::CStore_UserTagPreferences* _msg = _internal_mutable_tag_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_StorePreferencesChanged_Notification.tag_preferences)
  return _msg;
}
inline void CStore_StorePreferencesChanged_Notification::set_allocated_tag_preferences(::CStore_UserTagPreferences* tag_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_preferences_;
  }
  if (tag_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CStore_UserTagPreferences>::GetOwningArena(tag_preferences);
    if (message_arena != submessage_arena) {
      tag_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_preferences_ = tag_preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_StorePreferencesChanged_Notification.tag_preferences)
}

// optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
inline bool CStore_StorePreferencesChanged_Notification::_internal_has_content_descriptor_preferences() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || content_descriptor_preferences_ != nullptr);
  return value;
}
inline bool CStore_StorePreferencesChanged_Notification::has_content_descriptor_preferences() const {
  return _internal_has_content_descriptor_preferences();
}
inline const ::UserContentDescriptorPreferences& CStore_StorePreferencesChanged_Notification::_internal_content_descriptor_preferences() const {
  const ::UserContentDescriptorPreferences* p = content_descriptor_preferences_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserContentDescriptorPreferences&>(
      ::_UserContentDescriptorPreferences_default_instance_);
}
inline const ::UserContentDescriptorPreferences& CStore_StorePreferencesChanged_Notification::content_descriptor_preferences() const {
  // @@protoc_insertion_point(field_get:CStore_StorePreferencesChanged_Notification.content_descriptor_preferences)
  return _internal_content_descriptor_preferences();
}
inline void CStore_StorePreferencesChanged_Notification::unsafe_arena_set_allocated_content_descriptor_preferences(
    ::UserContentDescriptorPreferences* content_descriptor_preferences) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  if (content_descriptor_preferences) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CStore_StorePreferencesChanged_Notification.content_descriptor_preferences)
}
inline ::UserContentDescriptorPreferences* CStore_StorePreferencesChanged_Notification::release_content_descriptor_preferences() {
  _has_bits_[0] &= ~0x00000004u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserContentDescriptorPreferences* CStore_StorePreferencesChanged_Notification::unsafe_arena_release_content_descriptor_preferences() {
  // @@protoc_insertion_point(field_release:CStore_StorePreferencesChanged_Notification.content_descriptor_preferences)
  _has_bits_[0] &= ~0x00000004u;
  ::UserContentDescriptorPreferences* temp = content_descriptor_preferences_;
  content_descriptor_preferences_ = nullptr;
  return temp;
}
inline ::UserContentDescriptorPreferences* CStore_StorePreferencesChanged_Notification::_internal_mutable_content_descriptor_preferences() {
  _has_bits_[0] |= 0x00000004u;
  if (content_descriptor_preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserContentDescriptorPreferences>(GetArenaForAllocation());
    content_descriptor_preferences_ = p;
  }
  return content_descriptor_preferences_;
}
inline ::UserContentDescriptorPreferences* CStore_StorePreferencesChanged_Notification::mutable_content_descriptor_preferences() {
  ::UserContentDescriptorPreferences* _msg = _internal_mutable_content_descriptor_preferences();
  // @@protoc_insertion_point(field_mutable:CStore_StorePreferencesChanged_Notification.content_descriptor_preferences)
  return _msg;
}
inline void CStore_StorePreferencesChanged_Notification::set_allocated_content_descriptor_preferences(::UserContentDescriptorPreferences* content_descriptor_preferences) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences_);
  }
  if (content_descriptor_preferences) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_descriptor_preferences));
    if (message_arena != submessage_arena) {
      content_descriptor_preferences = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_descriptor_preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  content_descriptor_preferences_ = content_descriptor_preferences;
  // @@protoc_insertion_point(field_set_allocated:CStore_StorePreferencesChanged_Notification.content_descriptor_preferences)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EStoreDiscoveryQueueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EStoreDiscoveryQueueType>() {
  return ::EStoreDiscoveryQueueType_descriptor();
}
template <> struct is_proto_enum< ::EPlaytestStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPlaytestStatus>() {
  return ::EPlaytestStatus_descriptor();
}
template <> struct is_proto_enum< ::EUserReviewScorePreference> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EUserReviewScorePreference>() {
  return ::EUserReviewScorePreference_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fstore_2esteamclient_2eproto
