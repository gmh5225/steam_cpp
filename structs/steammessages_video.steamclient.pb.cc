// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_video.steamclient.proto

#include "steammessages_video.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_id_(uint64_t{0u})
  , client_cellid_(0u){}
struct CVideo_ClientGetVideoURL_RequestDefaultTypeInternal {
  constexpr CVideo_ClientGetVideoURL_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_ClientGetVideoURL_RequestDefaultTypeInternal() {}
  union {
    CVideo_ClientGetVideoURL_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_ClientGetVideoURL_RequestDefaultTypeInternal _CVideo_ClientGetVideoURL_Request_default_instance_;
constexpr CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , video_id_(uint64_t{0u}){}
struct CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal {
  constexpr CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal() {}
  union {
    CVideo_ClientGetVideoURL_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal _CVideo_ClientGetVideoURL_Response_default_instance_;
constexpr VideoBookmark::VideoBookmark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , playback_position_in_seconds_(0u)
  , video_track_id_(uint64_t{0u})
  , audio_track_id_(uint64_t{0u})
  , timedtext_track_id_(uint64_t{0u})
  , last_modified_(0u)
  , hide_from_watch_history_(false)
  , hide_from_library_(false){}
struct VideoBookmarkDefaultTypeInternal {
  constexpr VideoBookmarkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoBookmarkDefaultTypeInternal() {}
  union {
    VideoBookmark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoBookmarkDefaultTypeInternal _VideoBookmark_default_instance_;
constexpr CVideo_SetVideoBookmark_Notification::CVideo_SetVideoBookmark_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bookmarks_(){}
struct CVideo_SetVideoBookmark_NotificationDefaultTypeInternal {
  constexpr CVideo_SetVideoBookmark_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_SetVideoBookmark_NotificationDefaultTypeInternal() {}
  union {
    CVideo_SetVideoBookmark_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_SetVideoBookmark_NotificationDefaultTypeInternal _CVideo_SetVideoBookmark_Notification_default_instance_;
constexpr CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , updated_since_(0u){}
struct CVideo_GetVideoBookmarks_RequestDefaultTypeInternal {
  constexpr CVideo_GetVideoBookmarks_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GetVideoBookmarks_RequestDefaultTypeInternal() {}
  union {
    CVideo_GetVideoBookmarks_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GetVideoBookmarks_RequestDefaultTypeInternal _CVideo_GetVideoBookmarks_Request_default_instance_;
constexpr CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bookmarks_(){}
struct CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal {
  constexpr CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal() {}
  union {
    CVideo_GetVideoBookmarks_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal _CVideo_GetVideoBookmarks_Response_default_instance_;
constexpr CVideo_GameClipRepresentation::CVideo_GameClipRepresentation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frame_rate_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , horizontal_resolution_(0u)
  , vertical_resolution_(0u)
  , frame_rate_(0)
  , bandwidth_(0u)
  , audio_sample_rate_(0u)
  , audio_channel_config_(0u){}
struct CVideo_GameClipRepresentationDefaultTypeInternal {
  constexpr CVideo_GameClipRepresentationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameClipRepresentationDefaultTypeInternal() {}
  union {
    CVideo_GameClipRepresentation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameClipRepresentationDefaultTypeInternal _CVideo_GameClipRepresentation_default_instance_;
constexpr CVideo_GameClipComponent::CVideo_GameClipComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : representations_()
  , component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(0u)
  , segment_size_(0u){}
struct CVideo_GameClipComponentDefaultTypeInternal {
  constexpr CVideo_GameClipComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameClipComponentDefaultTypeInternal() {}
  union {
    CVideo_GameClipComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameClipComponentDefaultTypeInternal _CVideo_GameClipComponent_default_instance_;
constexpr CVideo_CreateGameClip_Request::CVideo_CreateGameClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : components_()
  , app_id_(0u)
  , num_segments_(0u)
  , length_milliseconds_(0u)
  , segment_duration_timescale_(0u)
  , segment_duration_(0u){}
struct CVideo_CreateGameClip_RequestDefaultTypeInternal {
  constexpr CVideo_CreateGameClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CreateGameClip_RequestDefaultTypeInternal() {}
  union {
    CVideo_CreateGameClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CreateGameClip_RequestDefaultTypeInternal _CVideo_CreateGameClip_Request_default_instance_;
constexpr CVideo_CreateGameClip_Response::CVideo_CreateGameClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_id_(uint64_t{0u}){}
struct CVideo_CreateGameClip_ResponseDefaultTypeInternal {
  constexpr CVideo_CreateGameClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CreateGameClip_ResponseDefaultTypeInternal() {}
  union {
    CVideo_CreateGameClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CreateGameClip_ResponseDefaultTypeInternal _CVideo_CreateGameClip_Response_default_instance_;
constexpr CVideo_GameClipSegmentInfo::CVideo_GameClipSegmentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segment_number_(0u)
  , segment_size_bytes_(uint64_t{0u}){}
struct CVideo_GameClipSegmentInfoDefaultTypeInternal {
  constexpr CVideo_GameClipSegmentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameClipSegmentInfoDefaultTypeInternal() {}
  union {
    CVideo_GameClipSegmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameClipSegmentInfoDefaultTypeInternal _CVideo_GameClipSegmentInfo_default_instance_;
constexpr CVideo_BeginGameClipSegmentsUpload_Request::CVideo_BeginGameClipSegmentsUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_to_store_()
  , component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(uint64_t{0u}){}
struct CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal {
  constexpr CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal() {}
  union {
    CVideo_BeginGameClipSegmentsUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal _CVideo_BeginGameClipSegmentsUpload_Request_default_instance_;
constexpr CVideo_GameClipSegmentUploadInfo_HTTPHeaders::CVideo_GameClipSegmentUploadInfo_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal {
  constexpr CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal() {}
  union {
    CVideo_GameClipSegmentUploadInfo_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal _CVideo_GameClipSegmentUploadInfo_HTTPHeaders_default_instance_;
constexpr CVideo_GameClipSegmentUploadInfo::CVideo_GameClipSegmentUploadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , segment_info_(nullptr)
  , use_https_(false){}
struct CVideo_GameClipSegmentUploadInfoDefaultTypeInternal {
  constexpr CVideo_GameClipSegmentUploadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_GameClipSegmentUploadInfoDefaultTypeInternal() {}
  union {
    CVideo_GameClipSegmentUploadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_GameClipSegmentUploadInfoDefaultTypeInternal _CVideo_GameClipSegmentUploadInfo_default_instance_;
constexpr CVideo_BeginGameClipSegmentsUpload_Response::CVideo_BeginGameClipSegmentsUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_needed_()
  , call_again_(false){}
struct CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal {
  constexpr CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal() {}
  union {
    CVideo_BeginGameClipSegmentsUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal _CVideo_BeginGameClipSegmentsUpload_Response_default_instance_;
constexpr CVideo_CommitGameClipSegmentsUpload_Request::CVideo_CommitGameClipSegmentsUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , representation_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clip_id_(uint64_t{0u})
  , first_segment_number_(0u)
  , num_segments_(0u)
  , upload_result_(0u){}
struct CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal {
  constexpr CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal() {}
  union {
    CVideo_CommitGameClipSegmentsUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal _CVideo_CommitGameClipSegmentsUpload_Request_default_instance_;
constexpr CVideo_CommitGameClipSegmentsUpload_Response::CVideo_CommitGameClipSegmentsUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal {
  constexpr CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal() {}
  union {
    CVideo_CommitGameClipSegmentsUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal _CVideo_CommitGameClipSegmentsUpload_Response_default_instance_;
constexpr CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encryption_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CVideo_UnlockedH264_NotificationDefaultTypeInternal {
  constexpr CVideo_UnlockedH264_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVideo_UnlockedH264_NotificationDefaultTypeInternal() {}
  union {
    CVideo_UnlockedH264_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVideo_UnlockedH264_NotificationDefaultTypeInternal _CVideo_UnlockedH264_Notification_default_instance_;
constexpr CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , client_cellid_(0u){}
struct CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal {
  constexpr CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal() {}
  union {
    CFovasVideo_ClientGetOPFSettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
constexpr CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opf_settings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal {
  constexpr CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal() {}
  union {
    CFovasVideo_ClientGetOPFSettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fvideo_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[3];

const uint32_t TableStruct_steammessages_5fvideo_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, video_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Request, client_cellid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_ClientGetVideoURL_Response, video_url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, app_id_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, playback_position_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, video_track_id_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, audio_track_id_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, timedtext_track_id_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, last_modified_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, hide_from_watch_history_),
  PROTOBUF_FIELD_OFFSET(::VideoBookmark, hide_from_library_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_SetVideoBookmark_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_SetVideoBookmark_Notification, bookmarks_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, appids_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Request, updated_since_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GetVideoBookmarks_Response, bookmarks_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, horizontal_resolution_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, vertical_resolution_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, audio_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, frame_rate_string_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, codec_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipRepresentation, audio_channel_config_),
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, contents_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, segment_size_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, file_type_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipComponent, representations_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, num_segments_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, length_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, segment_duration_timescale_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, segment_duration_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Request, components_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_CreateGameClip_Response, clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentInfo, segment_number_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentInfo, segment_size_bytes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Request, segments_to_store_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, segment_info_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, url_host_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, url_path_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, use_https_),
  PROTOBUF_FIELD_OFFSET(::CVideo_GameClipSegmentUploadInfo, request_headers_),
  2,
  0,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Response, segments_needed_),
  PROTOBUF_FIELD_OFFSET(::CVideo_BeginGameClipSegmentsUpload_Response, call_again_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, clip_id_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, component_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, representation_name_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, first_segment_number_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, num_segments_),
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Request, upload_result_),
  2,
  0,
  1,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CVideo_CommitGameClipSegmentsUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVideo_UnlockedH264_Notification, encryption_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Request, client_cellid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, app_id_),
  PROTOBUF_FIELD_OFFSET(::CFovasVideo_ClientGetOPFSettings_Response, opf_settings_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CVideo_ClientGetVideoURL_Request)},
  { 10, 18, -1, sizeof(::CVideo_ClientGetVideoURL_Response)},
  { 20, 34, -1, sizeof(::VideoBookmark)},
  { 42, -1, -1, sizeof(::CVideo_SetVideoBookmark_Notification)},
  { 49, 57, -1, sizeof(::CVideo_GetVideoBookmarks_Request)},
  { 59, -1, -1, sizeof(::CVideo_GetVideoBookmarks_Response)},
  { 66, 81, -1, sizeof(::CVideo_GameClipRepresentation)},
  { 90, 101, -1, sizeof(::CVideo_GameClipComponent)},
  { 106, 118, -1, sizeof(::CVideo_CreateGameClip_Request)},
  { 124, 131, -1, sizeof(::CVideo_CreateGameClip_Response)},
  { 132, 140, -1, sizeof(::CVideo_GameClipSegmentInfo)},
  { 142, 152, -1, sizeof(::CVideo_BeginGameClipSegmentsUpload_Request)},
  { 156, 164, -1, sizeof(::CVideo_GameClipSegmentUploadInfo_HTTPHeaders)},
  { 166, 177, -1, sizeof(::CVideo_GameClipSegmentUploadInfo)},
  { 182, 190, -1, sizeof(::CVideo_BeginGameClipSegmentsUpload_Response)},
  { 192, 204, -1, sizeof(::CVideo_CommitGameClipSegmentsUpload_Request)},
  { 210, -1, -1, sizeof(::CVideo_CommitGameClipSegmentsUpload_Response)},
  { 216, 223, -1, sizeof(::CVideo_UnlockedH264_Notification)},
  { 224, 232, -1, sizeof(::CFovasVideo_ClientGetOPFSettings_Request)},
  { 234, 242, -1, sizeof(::CFovasVideo_ClientGetOPFSettings_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_ClientGetVideoURL_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_ClientGetVideoURL_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VideoBookmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_SetVideoBookmark_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GetVideoBookmarks_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GetVideoBookmarks_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameClipRepresentation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameClipComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CreateGameClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CreateGameClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameClipSegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_BeginGameClipSegmentsUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameClipSegmentUploadInfo_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_GameClipSegmentUploadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_BeginGameClipSegmentsUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CommitGameClipSegmentsUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_CommitGameClipSegmentsUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVideo_UnlockedH264_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFovasVideo_ClientGetOPFSettings_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fvideo_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_video.steamclient.proto\032"
  "\030steammessages_base.proto\032,steammessages"
  "_unified_base.steamclient.proto\"\201\001\n CVid"
  "eo_ClientGetVideoURL_Request\022\036\n\010video_id"
  "\030\001 \001(\004B\014\202\265\030\010Video ID\022=\n\rclient_cellid\030\002 "
  "\001(\rB&\202\265\030\"Cell ID of client, zero if unkn"
  "own\"r\n!CVideo_ClientGetVideoURL_Response"
  "\022\036\n\010video_id\030\001 \001(\004B\014\202\265\030\010Video ID\022-\n\tvide"
  "o_url\030\002 \001(\tB\032\202\265\030\026URL for video manifest\""
  "\252\004\n\rVideoBookmark\022\032\n\006app_id\030\001 \001(\rB\n\202\265\030\006A"
  "pp ID\022]\n\034playback_position_in_seconds\030\002 "
  "\001(\rB7\202\265\0303How many seconds into the video"
  " the bookmark is for\022/\n\016video_track_id\030\003"
  " \001(\004B\027\202\265\030\023video track choice.\022/\n\016audio_t"
  "rack_id\030\004 \001(\004B\027\202\265\030\023audio track choice.\022C"
  "\n\022timedtext_track_id\030\005 \001(\004B\'\202\265\030#timedtim"
  "ed or subtitle track choice\022O\n\rlast_modi"
  "fied\030\006 \001(\rB8\202\265\0304when we recorded it was "
  "last modified. Not settable.\022U\n\027hide_fro"
  "m_watch_history\030\007 \001(\010:\005falseB-\202\265\030)Whethe"
  "r I want to show this in my history\022O\n\021h"
  "ide_from_library\030\010 \001(\010:\005falseB-\202\265\030)Wheth"
  "er I want to show this in my library\"r\n$"
  "CVideo_SetVideoBookmark_Notification\022J\n\t"
  "bookmarks\030\001 \003(\0132\016.VideoBookmarkB\'\202\265\030#lis"
  "t of bookmarks we want to store.\"\201\002\n CVi"
  "deo_GetVideoBookmarks_Request\022_\n\006appids\030"
  "\001 \003(\rBO\202\265\030KList of App IDs to grab bookm"
  "arks for. Can be empty if using updated_"
  "since.\022|\n\rupdated_since\030\002 \001(\rBe\202\265\030aOnly "
  "return results after time. Min value is "
  "1. (seconds since epoch January 1st, 197"
  "0 Unix Time)\"u\n!CVideo_GetVideoBookmarks"
  "_Response\022P\n\tbookmarks\030\001 \003(\0132\016.VideoBook"
  "markB-\202\265\030)List of bookmarks we found. Ca"
  "n be empty.\"\227\004\n\035CVideo_GameClipRepresent"
  "ation\022*\n\023representation_name\030\002 \001(\tB\r\202\265\030\t"
  "EG 480p30\022D\n\025horizontal_resolution\030\003 \001(\r"
  "B%\202\265\030!Width in pixels if contains video\022"
  "C\n\023vertical_resolution\030\004 \001(\rB&\202\265\030\"Height"
  " in pixels if contains video\0224\n\nframe_ra"
  "te\030\005 \001(\001B \202\265\030\034Frame Rate if contains vid"
  "eo\022\033\n\tbandwidth\030\006 \001(\rB\010\202\265\030\004Kbps\022B\n\021audio"
  "_sample_rate\030\007 \001(\rB\'\202\265\030#Sample rate in H"
  "z if contains audio\022B\n\021frame_rate_string"
  "\030\010 \001(\tB\'\202\265\030#Frame Rate string if contain"
  "s video\022 \n\005codec\030\t \001(\tB\021\202\265\030\rcodec(s) use"
  "d\022B\n\024audio_channel_config\030\n \001(\rB$\202\265\030 aud"
  "io channel config if relevant\"\261\002\n\030CVideo"
  "_GameClipComponent\022+\n\016component_name\030\001 \001"
  "(\tB\023\202\265\030\017video/audio/etc\022)\n\010contents\030\002 \001("
  "\rB\027\202\265\030\023EVideoTrackContents\022E\n\014segment_si"
  "ze\030\003 \001(\rB/\202\265\030+size of most segments (las"
  "t may be shorter)\022 \n\tfile_type\030\004 \001(\tB\r\202\265"
  "\030\tfile type\022T\n\017representations\030\005 \003(\0132\036.C"
  "Video_GameClipRepresentationB\033\202\265\030\027list o"
  "f representations\"\343\003\n\035CVideo_CreateGameC"
  "lip_Request\0220\n\006app_id\030\001 \001(\rB \202\265\030\034app ID "
  "stream is tagged with\0229\n\014num_segments\030\002 "
  "\001(\rB#\202\265\030\037number of segments in this clip"
  "\0226\n\023length_milliseconds\030\003 \001(\rB\031\202\265\030\025lengt"
  "h of video in ms\022t\n\032segment_duration_tim"
  "escale\030\004 \001(\rBP\202\265\030Ltimescale (denominator"
  ") for segment duration below, eg 1000 fo"
  "r milliseconds\022`\n\020segment_duration\030\005 \001(\r"
  "BF\202\265\030Blength of most segments in \'timesc"
  "ale\' units (last may be shorter)\022E\n\ncomp"
  "onents\030\006 \003(\0132\031.CVideo_GameClipComponentB"
  "\026\202\265\030\022List of components\"L\n\036CVideo_Create"
  "GameClip_Response\022*\n\007clip_id\030\001 \001(\004B\031\202\265\030\025"
  "Clip ID if successful\"\177\n\032CVideo_GameClip"
  "SegmentInfo\022*\n\016segment_number\030\004 \001(\rB\022\202\265\030"
  "\016segment number\0225\n\022segment_size_bytes\030\005 "
  "\001(\004B\031\202\265\030\025segment size in bytes\"\231\002\n*CVide"
  "o_BeginGameClipSegmentsUpload_Request\022\034\n"
  "\007clip_id\030\001 \001(\004B\013\202\265\030\007Clip ID\0228\n\016component"
  "_name\030\002 \001(\tB \202\265\030\034component segments belo"
  "ng to\0224\n\023representation_name\030\003 \001(\tB\027\202\265\030\023"
  "representation name\022]\n\021segments_to_store"
  "\030\004 \003(\0132\033.CVideo_GameClipSegmentInfoB%\202\265\030"
  "!Segments the client has to upload\"\263\004\n C"
  "Video_GameClipSegmentUploadInfo\022M\n\014segme"
  "nt_info\030\001 \001(\0132\033.CVideo_GameClipSegmentIn"
  "foB\032\202\265\030\026segment ID information\022X\n\010url_ho"
  "st\030\002 \001(\tBF\202\265\030BHost name of server to whi"
  "ch file should be uploaded via HTTP PUT."
  "\022O\n\010url_path\030\003 \001(\tB=\202\265\0309Relative path on"
  " server to which file should be uploaded"
  ".\022>\n\tuse_https\030\004 \001(\010B+\202\265\030\'If true, use h"
  "ttps, otherwise use http.\022|\n\017request_hea"
  "ders\030\005 \003(\0132-.CVideo_GameClipSegmentUploa"
  "dInfo.HTTPHeadersB4\202\265\0300Name-value pairs "
  "to be sent in HTTP PUT request.\032W\n\013HTTPH"
  "eaders\022\"\n\004name\030\001 \001(\tB\024\202\265\030\020HTTP header na"
  "me\022$\n\005value\030\002 \001(\tB\025\202\265\030\021HTTP header value"
  "\"\367\002\n+CVideo_BeginGameClipSegmentsUpload_"
  "Response\022\\\n\017segments_needed\030\001 \003(\0132!.CVid"
  "eo_GameClipSegmentUploadInfoB \202\265\030\034Segmen"
  "ts that need uploading\022\351\001\n\ncall_again\030\002 "
  "\001(\010B\324\001\202\265\030\317\001If true, you should ask again"
  " once you\'ve uploaded the segments indic"
  "ated in this response. There may be more"
  " we want. If there was no work to do in "
  "this response, then wait a few seconds b"
  "efore asking again\"\206\003\n+CVideo_CommitGame"
  "ClipSegmentsUpload_Request\022\034\n\007clip_id\030\001 "
  "\001(\004B\013\202\265\030\007Clip ID\0228\n\016component_name\030\002 \001(\t"
  "B \202\265\030\034component segments belong to\0224\n\023re"
  "presentation_name\030\003 \001(\tB\027\202\265\030\023representat"
  "ion name\022X\n\024first_segment_number\030\004 \001(\rB:"
  "\202\265\0306Segment Number of first segment uplo"
  "aded in this batch\0225\n\014num_segments\030\005 \001(\r"
  "B\037\202\265\030\033Number of segments in Batch\0228\n\rupl"
  "oad_result\030\006 \001(\rB!\202\265\030\035eresult of the upl"
  "oad attempt\".\n,CVideo_CommitGameClipSegm"
  "entsUpload_Response\":\n CVideo_UnlockedH2"
  "64_Notification\022\026\n\016encryption_key\030\001 \001(\014\""
  "\205\001\n(CFovasVideo_ClientGetOPFSettings_Req"
  "uest\022\032\n\006app_id\030\001 \001(\rB\n\202\265\030\006App ID\022=\n\rclie"
  "nt_cellid\030\002 \001(\rB&\202\265\030\"Cell ID of client, "
  "zero if unknown\"|\n)CFovasVideo_ClientGet"
  "OPFSettings_Response\022\032\n\006app_id\030\001 \001(\rB\n\202\265"
  "\030\006App ID\0223\n\014opf_settings\030\002 \001(\tB\035\202\265\030\031JSON"
  " blob of OPF Settings2\232\010\n\005Video\022\216\001\n\021Clie"
  "ntGetVideoURL\022!.CVideo_ClientGetVideoURL"
  "_Request\032\".CVideo_ClientGetVideoURL_Resp"
  "onse\"2\202\265\030.Get the initial URL to begin s"
  "treaming a video\022\301\001\n\020SetVideoBookmark\022%."
  "CVideo_SetVideoBookmark_Notification\032\013.N"
  "oResponse\"y\202\265\030uBookmarks the locations i"
  "n the video the user has reached. As as "
  "record playback settings per video. Fire"
  " and forget.\022\303\001\n\021GetVideoBookmarks\022!.CVi"
  "deo_GetVideoBookmarks_Request\032\".CVideo_G"
  "etVideoBookmarks_Response\"g\202\265\030cReturns t"
  "he video bookmarks locations for the spe"
  "cific videos. Includes playback settings"
  " per video\022y\n\016CreateGameClip\022\036.CVideo_Cr"
  "eateGameClip_Request\032\037.CVideo_CreateGame"
  "Clip_Response\"&\202\265\030\"Create a game recordi"
  "ng clip video\022\255\001\n\033BeginGameClipSegmentsU"
  "pload\022+.CVideo_BeginGameClipSegmentsUplo"
  "ad_Request\032,.CVideo_BeginGameClipSegment"
  "sUpload_Response\"3\202\265\030/Begin a batch of s"
  "egment uploads for a GameClip\022\267\001\n\034Commit"
  "GameClipSegmentsUpload\022,.CVideo_CommitGa"
  "meClipSegmentsUpload_Request\032-.CVideo_Co"
  "mmitGameClipSegmentsUpload_Response\":\202\265\030"
  "6Note completion of a batch of GameClip "
  "segment uploads\032\021\202\265\030\rVideo methods2\236\001\n\013V"
  "ideoClient\022\210\001\n\022NotifyUnlockedH264\022!.CVid"
  "eo_UnlockedH264_Notification\032\013.NoRespons"
  "e\"B\202\265\030>Notification from server to clien"
  "t that h264 has been unlocked\032\004\300\265\030\0022\363\001\n\n"
  "FovasVideo\022\303\001\n\024ClientGetOPFSettings\022).CF"
  "ovasVideo_ClientGetOPFSettings_Request\032*"
  ".CFovasVideo_ClientGetOPFSettings_Respon"
  "se\"T\202\265\030PRetrieve the OPF settings JSON b"
  "lob. Available via the Client for 360 Pl"
  "ayer App\032\037\202\265\030\033Fovas Video Service Method"
  "sB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvideo_2esteamclient_2eproto = {
  false, false, 6406, descriptor_table_protodef_steammessages_5fvideo_2esteamclient_2eproto, "steammessages_video.steamclient.proto", 
  &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once, descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_deps, 2, 20,
  schemas, file_default_instances, TableStruct_steammessages_5fvideo_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fvideo_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fvideo_2esteamclient_2eproto(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);

// ===================================================================

class CVideo_ClientGetVideoURL_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_ClientGetVideoURL_Request>()._has_bits_);
  static void set_has_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_ClientGetVideoURL_Request)
}
CVideo_ClientGetVideoURL_Request::CVideo_ClientGetVideoURL_Request(const CVideo_ClientGetVideoURL_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&video_id_, &from.video_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Request)
}

inline void CVideo_ClientGetVideoURL_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
}

CVideo_ClientGetVideoURL_Request::~CVideo_ClientGetVideoURL_Request() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_ClientGetVideoURL_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_ClientGetVideoURL_Request::ArenaDtor(void* object) {
  CVideo_ClientGetVideoURL_Request* _this = reinterpret_cast< CVideo_ClientGetVideoURL_Request* >(object);
  (void)_this;
}
void CVideo_ClientGetVideoURL_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_ClientGetVideoURL_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_ClientGetVideoURL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&video_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&video_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_ClientGetVideoURL_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 video_id = 1 [(.description) = "Video ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_video_id(&has_bits);
          video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_cellid(&has_bits);
          client_cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_ClientGetVideoURL_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_video_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_cellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Request)
  return target;
}

size_t CVideo_ClientGetVideoURL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 video_id = 1 [(.description) = "Video ID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_video_id());
    }

    // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_cellid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_ClientGetVideoURL_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_ClientGetVideoURL_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_ClientGetVideoURL_Request::GetClassData() const { return &_class_data_; }

void CVideo_ClientGetVideoURL_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_ClientGetVideoURL_Request *>(to)->MergeFrom(
      static_cast<const CVideo_ClientGetVideoURL_Request &>(from));
}


void CVideo_ClientGetVideoURL_Request::MergeFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      video_id_ = from.video_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_ClientGetVideoURL_Request::CopyFrom(const CVideo_ClientGetVideoURL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Request::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Request::InternalSwap(CVideo_ClientGetVideoURL_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, client_cellid_)
      + sizeof(CVideo_ClientGetVideoURL_Request::client_cellid_)
      - PROTOBUF_FIELD_OFFSET(CVideo_ClientGetVideoURL_Request, video_id_)>(
          reinterpret_cast<char*>(&video_id_),
          reinterpret_cast<char*>(&other->video_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_ClientGetVideoURL_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[0]);
}

// ===================================================================

class CVideo_ClientGetVideoURL_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_ClientGetVideoURL_Response>()._has_bits_);
  static void set_has_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_ClientGetVideoURL_Response)
}
CVideo_ClientGetVideoURL_Response::CVideo_ClientGetVideoURL_Response(const CVideo_ClientGetVideoURL_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_video_url()) {
    video_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_url(), 
      GetArenaForAllocation());
  }
  video_id_ = from.video_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_ClientGetVideoURL_Response)
}

inline void CVideo_ClientGetVideoURL_Response::SharedCtor() {
video_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
video_id_ = uint64_t{0u};
}

CVideo_ClientGetVideoURL_Response::~CVideo_ClientGetVideoURL_Response() {
  // @@protoc_insertion_point(destructor:CVideo_ClientGetVideoURL_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_ClientGetVideoURL_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  video_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_ClientGetVideoURL_Response::ArenaDtor(void* object) {
  CVideo_ClientGetVideoURL_Response* _this = reinterpret_cast< CVideo_ClientGetVideoURL_Response* >(object);
  (void)_this;
}
void CVideo_ClientGetVideoURL_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_ClientGetVideoURL_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_ClientGetVideoURL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_ClientGetVideoURL_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    video_url_.ClearNonDefaultToEmpty();
  }
  video_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_ClientGetVideoURL_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 video_id = 1 [(.description) = "Video ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_video_id(&has_bits);
          video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string video_url = 2 [(.description) = "URL for video manifest"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_video_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_ClientGetVideoURL_Response.video_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_ClientGetVideoURL_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_ClientGetVideoURL_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_video_id(), target);
  }

  // optional string video_url = 2 [(.description) = "URL for video manifest"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_url().data(), static_cast<int>(this->_internal_video_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_ClientGetVideoURL_Response.video_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_video_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_ClientGetVideoURL_Response)
  return target;
}

size_t CVideo_ClientGetVideoURL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_ClientGetVideoURL_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string video_url = 2 [(.description) = "URL for video manifest"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_url());
    }

    // optional uint64 video_id = 1 [(.description) = "Video ID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_video_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_ClientGetVideoURL_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_ClientGetVideoURL_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_ClientGetVideoURL_Response::GetClassData() const { return &_class_data_; }

void CVideo_ClientGetVideoURL_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_ClientGetVideoURL_Response *>(to)->MergeFrom(
      static_cast<const CVideo_ClientGetVideoURL_Response &>(from));
}


void CVideo_ClientGetVideoURL_Response::MergeFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_ClientGetVideoURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_url(from._internal_video_url());
    }
    if (cached_has_bits & 0x00000002u) {
      video_id_ = from.video_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_ClientGetVideoURL_Response::CopyFrom(const CVideo_ClientGetVideoURL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_ClientGetVideoURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_ClientGetVideoURL_Response::IsInitialized() const {
  return true;
}

void CVideo_ClientGetVideoURL_Response::InternalSwap(CVideo_ClientGetVideoURL_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &video_url_, lhs_arena,
      &other->video_url_, rhs_arena
  );
  swap(video_id_, other->video_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_ClientGetVideoURL_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[1]);
}

// ===================================================================

class VideoBookmark::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoBookmark>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playback_position_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audio_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timedtext_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hide_from_watch_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hide_from_library(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

VideoBookmark::VideoBookmark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VideoBookmark)
}
VideoBookmark::VideoBookmark(const VideoBookmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_from_library_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  // @@protoc_insertion_point(copy_constructor:VideoBookmark)
}

inline void VideoBookmark::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_from_library_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
}

VideoBookmark::~VideoBookmark() {
  // @@protoc_insertion_point(destructor:VideoBookmark)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoBookmark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoBookmark::ArenaDtor(void* object) {
  VideoBookmark* _this = reinterpret_cast< VideoBookmark* >(object);
  (void)_this;
}
void VideoBookmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoBookmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoBookmark::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoBookmark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_from_library_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(hide_from_library_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoBookmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playback_position_in_seconds(&has_bits);
          playback_position_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_video_track_id(&has_bits);
          video_track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_audio_track_id(&has_bits);
          audio_track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timedtext_track_id(&has_bits);
          timedtext_track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_modified(&has_bits);
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hide_from_watch_history(&has_bits);
          hide_from_watch_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hide_from_library(&has_bits);
          hide_from_library_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoBookmark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VideoBookmark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playback_position_in_seconds(), target);
  }

  // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_video_track_id(), target);
  }

  // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_audio_track_id(), target);
  }

  // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timedtext_track_id(), target);
  }

  // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_modified(), target);
  }

  // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hide_from_watch_history(), target);
  }

  // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_hide_from_library(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoBookmark)
  return target;
}

size_t VideoBookmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoBookmark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playback_position_in_seconds());
    }

    // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_video_track_id());
    }

    // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_audio_track_id());
    }

    // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timedtext_track_id());
    }

    // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_modified());
    }

    // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoBookmark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoBookmark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoBookmark::GetClassData() const { return &_class_data_; }

void VideoBookmark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoBookmark *>(to)->MergeFrom(
      static_cast<const VideoBookmark &>(from));
}


void VideoBookmark::MergeFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoBookmark)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      playback_position_in_seconds_ = from.playback_position_in_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      video_track_id_ = from.video_track_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      audio_track_id_ = from.audio_track_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      timedtext_track_id_ = from.timedtext_track_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_modified_ = from.last_modified_;
    }
    if (cached_has_bits & 0x00000040u) {
      hide_from_watch_history_ = from.hide_from_watch_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      hide_from_library_ = from.hide_from_library_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoBookmark::CopyFrom(const VideoBookmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoBookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoBookmark::IsInitialized() const {
  return true;
}

void VideoBookmark::InternalSwap(VideoBookmark* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoBookmark, hide_from_library_)
      + sizeof(VideoBookmark::hide_from_library_)
      - PROTOBUF_FIELD_OFFSET(VideoBookmark, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoBookmark::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[2]);
}

// ===================================================================

class CVideo_SetVideoBookmark_Notification::_Internal {
 public:
};

CVideo_SetVideoBookmark_Notification::CVideo_SetVideoBookmark_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bookmarks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_SetVideoBookmark_Notification)
}
CVideo_SetVideoBookmark_Notification::CVideo_SetVideoBookmark_Notification(const CVideo_SetVideoBookmark_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_SetVideoBookmark_Notification)
}

inline void CVideo_SetVideoBookmark_Notification::SharedCtor() {
}

CVideo_SetVideoBookmark_Notification::~CVideo_SetVideoBookmark_Notification() {
  // @@protoc_insertion_point(destructor:CVideo_SetVideoBookmark_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_SetVideoBookmark_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_SetVideoBookmark_Notification::ArenaDtor(void* object) {
  CVideo_SetVideoBookmark_Notification* _this = reinterpret_cast< CVideo_SetVideoBookmark_Notification* >(object);
  (void)_this;
}
void CVideo_SetVideoBookmark_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_SetVideoBookmark_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_SetVideoBookmark_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_SetVideoBookmark_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_SetVideoBookmark_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bookmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_SetVideoBookmark_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_SetVideoBookmark_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bookmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bookmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_SetVideoBookmark_Notification)
  return target;
}

size_t CVideo_SetVideoBookmark_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_SetVideoBookmark_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  total_size += 1UL * this->_internal_bookmarks_size();
  for (const auto& msg : this->bookmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_SetVideoBookmark_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_SetVideoBookmark_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_SetVideoBookmark_Notification::GetClassData() const { return &_class_data_; }

void CVideo_SetVideoBookmark_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_SetVideoBookmark_Notification *>(to)->MergeFrom(
      static_cast<const CVideo_SetVideoBookmark_Notification &>(from));
}


void CVideo_SetVideoBookmark_Notification::MergeFrom(const CVideo_SetVideoBookmark_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_SetVideoBookmark_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_SetVideoBookmark_Notification::CopyFrom(const CVideo_SetVideoBookmark_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_SetVideoBookmark_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_SetVideoBookmark_Notification::IsInitialized() const {
  return true;
}

void CVideo_SetVideoBookmark_Notification::InternalSwap(CVideo_SetVideoBookmark_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bookmarks_.InternalSwap(&other->bookmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_SetVideoBookmark_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[3]);
}

// ===================================================================

class CVideo_GetVideoBookmarks_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GetVideoBookmarks_Request>()._has_bits_);
  static void set_has_updated_since(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GetVideoBookmarks_Request)
}
CVideo_GetVideoBookmarks_Request::CVideo_GetVideoBookmarks_Request(const CVideo_GetVideoBookmarks_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updated_since_ = from.updated_since_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Request)
}

inline void CVideo_GetVideoBookmarks_Request::SharedCtor() {
updated_since_ = 0u;
}

CVideo_GetVideoBookmarks_Request::~CVideo_GetVideoBookmarks_Request() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GetVideoBookmarks_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_GetVideoBookmarks_Request::ArenaDtor(void* object) {
  CVideo_GetVideoBookmarks_Request* _this = reinterpret_cast< CVideo_GetVideoBookmarks_Request* >(object);
  (void)_this;
}
void CVideo_GetVideoBookmarks_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GetVideoBookmarks_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GetVideoBookmarks_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  updated_since_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GetVideoBookmarks_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_updated_since(&has_bits);
          updated_since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GetVideoBookmarks_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_since(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Request)
  return target;
}

size_t CVideo_GetVideoBookmarks_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_updated_since());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GetVideoBookmarks_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GetVideoBookmarks_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GetVideoBookmarks_Request::GetClassData() const { return &_class_data_; }

void CVideo_GetVideoBookmarks_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GetVideoBookmarks_Request *>(to)->MergeFrom(
      static_cast<const CVideo_GetVideoBookmarks_Request &>(from));
}


void CVideo_GetVideoBookmarks_Request::MergeFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  if (from._internal_has_updated_since()) {
    _internal_set_updated_since(from._internal_updated_since());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GetVideoBookmarks_Request::CopyFrom(const CVideo_GetVideoBookmarks_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Request::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Request::InternalSwap(CVideo_GetVideoBookmarks_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  swap(updated_since_, other->updated_since_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GetVideoBookmarks_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[4]);
}

// ===================================================================

class CVideo_GetVideoBookmarks_Response::_Internal {
 public:
};

CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bookmarks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GetVideoBookmarks_Response)
}
CVideo_GetVideoBookmarks_Response::CVideo_GetVideoBookmarks_Response(const CVideo_GetVideoBookmarks_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_GetVideoBookmarks_Response)
}

inline void CVideo_GetVideoBookmarks_Response::SharedCtor() {
}

CVideo_GetVideoBookmarks_Response::~CVideo_GetVideoBookmarks_Response() {
  // @@protoc_insertion_point(destructor:CVideo_GetVideoBookmarks_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GetVideoBookmarks_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_GetVideoBookmarks_Response::ArenaDtor(void* object) {
  CVideo_GetVideoBookmarks_Response* _this = reinterpret_cast< CVideo_GetVideoBookmarks_Response* >(object);
  (void)_this;
}
void CVideo_GetVideoBookmarks_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GetVideoBookmarks_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GetVideoBookmarks_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GetVideoBookmarks_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bookmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GetVideoBookmarks_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bookmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GetVideoBookmarks_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GetVideoBookmarks_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bookmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bookmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GetVideoBookmarks_Response)
  return target;
}

size_t CVideo_GetVideoBookmarks_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GetVideoBookmarks_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  total_size += 1UL * this->_internal_bookmarks_size();
  for (const auto& msg : this->bookmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GetVideoBookmarks_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GetVideoBookmarks_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GetVideoBookmarks_Response::GetClassData() const { return &_class_data_; }

void CVideo_GetVideoBookmarks_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GetVideoBookmarks_Response *>(to)->MergeFrom(
      static_cast<const CVideo_GetVideoBookmarks_Response &>(from));
}


void CVideo_GetVideoBookmarks_Response::MergeFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GetVideoBookmarks_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bookmarks_.MergeFrom(from.bookmarks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GetVideoBookmarks_Response::CopyFrom(const CVideo_GetVideoBookmarks_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GetVideoBookmarks_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GetVideoBookmarks_Response::IsInitialized() const {
  return true;
}

void CVideo_GetVideoBookmarks_Response::InternalSwap(CVideo_GetVideoBookmarks_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bookmarks_.InternalSwap(&other->bookmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GetVideoBookmarks_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[5]);
}

// ===================================================================

class CVideo_GameClipRepresentation::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameClipRepresentation>()._has_bits_);
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horizontal_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vertical_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_audio_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_rate_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audio_channel_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CVideo_GameClipRepresentation::CVideo_GameClipRepresentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GameClipRepresentation)
}
CVideo_GameClipRepresentation::CVideo_GameClipRepresentation(const CVideo_GameClipRepresentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArenaForAllocation());
  }
  frame_rate_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_rate_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frame_rate_string()) {
    frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_rate_string(), 
      GetArenaForAllocation());
  }
  codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_codec()) {
    codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codec(), 
      GetArenaForAllocation());
  }
  ::memcpy(&horizontal_resolution_, &from.horizontal_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_config_) -
    reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_channel_config_));
  // @@protoc_insertion_point(copy_constructor:CVideo_GameClipRepresentation)
}

inline void CVideo_GameClipRepresentation::SharedCtor() {
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame_rate_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_rate_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_resolution_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_config_) -
    reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_channel_config_));
}

CVideo_GameClipRepresentation::~CVideo_GameClipRepresentation() {
  // @@protoc_insertion_point(destructor:CVideo_GameClipRepresentation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GameClipRepresentation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_rate_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_GameClipRepresentation::ArenaDtor(void* object) {
  CVideo_GameClipRepresentation* _this = reinterpret_cast< CVideo_GameClipRepresentation* >(object);
  (void)_this;
}
void CVideo_GameClipRepresentation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameClipRepresentation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameClipRepresentation::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameClipRepresentation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_rate_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      codec_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&horizontal_resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_sample_rate_) -
        reinterpret_cast<char*>(&horizontal_resolution_)) + sizeof(audio_sample_rate_));
  }
  audio_channel_config_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameClipRepresentation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string representation_name = 2 [(.description) = "EG 480p30"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipRepresentation.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 horizontal_resolution = 3 [(.description) = "Width in pixels if contains video"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_horizontal_resolution(&has_bits);
          horizontal_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vertical_resolution = 4 [(.description) = "Height in pixels if contains video"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vertical_resolution(&has_bits);
          vertical_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double frame_rate = 5 [(.description) = "Frame Rate if contains video"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_frame_rate(&has_bits);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bandwidth = 6 [(.description) = "Kbps"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audio_sample_rate = 7 [(.description) = "Sample rate in Hz if contains audio"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_audio_sample_rate(&has_bits);
          audio_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frame_rate_string = 8 [(.description) = "Frame Rate string if contains video"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_frame_rate_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipRepresentation.frame_rate_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string codec = 9 [(.description) = "codec(s) used"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipRepresentation.codec");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audio_channel_config = 10 [(.description) = "audio channel config if relevant"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_audio_channel_config(&has_bits);
          audio_channel_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GameClipRepresentation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameClipRepresentation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string representation_name = 2 [(.description) = "EG 480p30"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipRepresentation.representation_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_representation_name(), target);
  }

  // optional uint32 horizontal_resolution = 3 [(.description) = "Width in pixels if contains video"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_horizontal_resolution(), target);
  }

  // optional uint32 vertical_resolution = 4 [(.description) = "Height in pixels if contains video"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vertical_resolution(), target);
  }

  // optional double frame_rate = 5 [(.description) = "Frame Rate if contains video"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_frame_rate(), target);
  }

  // optional uint32 bandwidth = 6 [(.description) = "Kbps"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bandwidth(), target);
  }

  // optional uint32 audio_sample_rate = 7 [(.description) = "Sample rate in Hz if contains audio"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_audio_sample_rate(), target);
  }

  // optional string frame_rate_string = 8 [(.description) = "Frame Rate string if contains video"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_rate_string().data(), static_cast<int>(this->_internal_frame_rate_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipRepresentation.frame_rate_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_frame_rate_string(), target);
  }

  // optional string codec = 9 [(.description) = "codec(s) used"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipRepresentation.codec");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_codec(), target);
  }

  // optional uint32 audio_channel_config = 10 [(.description) = "audio channel config if relevant"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_audio_channel_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameClipRepresentation)
  return target;
}

size_t CVideo_GameClipRepresentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameClipRepresentation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string representation_name = 2 [(.description) = "EG 480p30"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional string frame_rate_string = 8 [(.description) = "Frame Rate string if contains video"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_rate_string());
    }

    // optional string codec = 9 [(.description) = "codec(s) used"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_codec());
    }

    // optional uint32 horizontal_resolution = 3 [(.description) = "Width in pixels if contains video"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_horizontal_resolution());
    }

    // optional uint32 vertical_resolution = 4 [(.description) = "Height in pixels if contains video"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vertical_resolution());
    }

    // optional double frame_rate = 5 [(.description) = "Frame Rate if contains video"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 bandwidth = 6 [(.description) = "Kbps"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bandwidth());
    }

    // optional uint32 audio_sample_rate = 7 [(.description) = "Sample rate in Hz if contains audio"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_audio_sample_rate());
    }

  }
  // optional uint32 audio_channel_config = 10 [(.description) = "audio channel config if relevant"];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_audio_channel_config());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GameClipRepresentation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GameClipRepresentation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GameClipRepresentation::GetClassData() const { return &_class_data_; }

void CVideo_GameClipRepresentation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GameClipRepresentation *>(to)->MergeFrom(
      static_cast<const CVideo_GameClipRepresentation &>(from));
}


void CVideo_GameClipRepresentation::MergeFrom(const CVideo_GameClipRepresentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameClipRepresentation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frame_rate_string(from._internal_frame_rate_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_resolution_ = from.horizontal_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      vertical_resolution_ = from.vertical_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000080u) {
      audio_sample_rate_ = from.audio_sample_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_audio_channel_config(from._internal_audio_channel_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GameClipRepresentation::CopyFrom(const CVideo_GameClipRepresentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameClipRepresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameClipRepresentation::IsInitialized() const {
  return true;
}

void CVideo_GameClipRepresentation::InternalSwap(CVideo_GameClipRepresentation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &representation_name_, lhs_arena,
      &other->representation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_rate_string_, lhs_arena,
      &other->frame_rate_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameClipRepresentation, audio_channel_config_)
      + sizeof(CVideo_GameClipRepresentation::audio_channel_config_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameClipRepresentation, horizontal_resolution_)>(
          reinterpret_cast<char*>(&horizontal_resolution_),
          reinterpret_cast<char*>(&other->horizontal_resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameClipRepresentation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[6]);
}

// ===================================================================

class CVideo_GameClipComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameClipComponent>()._has_bits_);
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_GameClipComponent::CVideo_GameClipComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  representations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GameClipComponent)
}
CVideo_GameClipComponent::CVideo_GameClipComponent(const CVideo_GameClipComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      representations_(from.representations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArenaForAllocation());
  }
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_type()) {
    file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&contents_, &from.contents_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_size_) -
    reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
  // @@protoc_insertion_point(copy_constructor:CVideo_GameClipComponent)
}

inline void CVideo_GameClipComponent::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contents_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_size_) -
    reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
}

CVideo_GameClipComponent::~CVideo_GameClipComponent() {
  // @@protoc_insertion_point(destructor:CVideo_GameClipComponent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GameClipComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_GameClipComponent::ArenaDtor(void* object) {
  CVideo_GameClipComponent* _this = reinterpret_cast< CVideo_GameClipComponent* >(object);
  (void)_this;
}
void CVideo_GameClipComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameClipComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameClipComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameClipComponent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  representations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&contents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_size_) -
        reinterpret_cast<char*>(&contents_)) + sizeof(segment_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameClipComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string component_name = 1 [(.description) = "video/audio/etc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipComponent.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contents = 2 [(.description) = "EVideoTrackContents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_contents(&has_bits);
          contents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 segment_size = 3 [(.description) = "size of most segments (last may be shorter)"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_segment_size(&has_bits);
          segment_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_type = 4 [(.description) = "file type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipComponent.file_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVideo_GameClipRepresentation representations = 5 [(.description) = "list of representations"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_representations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GameClipComponent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameClipComponent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string component_name = 1 [(.description) = "video/audio/etc"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipComponent.component_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_name(), target);
  }

  // optional uint32 contents = 2 [(.description) = "EVideoTrackContents"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contents(), target);
  }

  // optional uint32 segment_size = 3 [(.description) = "size of most segments (last may be shorter)"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_segment_size(), target);
  }

  // optional string file_type = 4 [(.description) = "file type"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_type().data(), static_cast<int>(this->_internal_file_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipComponent.file_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_type(), target);
  }

  // repeated .CVideo_GameClipRepresentation representations = 5 [(.description) = "list of representations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_representations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_representations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameClipComponent)
  return target;
}

size_t CVideo_GameClipComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameClipComponent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameClipRepresentation representations = 5 [(.description) = "list of representations"];
  total_size += 1UL * this->_internal_representations_size();
  for (const auto& msg : this->representations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string component_name = 1 [(.description) = "video/audio/etc"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string file_type = 4 [(.description) = "file type"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_type());
    }

    // optional uint32 contents = 2 [(.description) = "EVideoTrackContents"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_contents());
    }

    // optional uint32 segment_size = 3 [(.description) = "size of most segments (last may be shorter)"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_segment_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GameClipComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GameClipComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GameClipComponent::GetClassData() const { return &_class_data_; }

void CVideo_GameClipComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GameClipComponent *>(to)->MergeFrom(
      static_cast<const CVideo_GameClipComponent &>(from));
}


void CVideo_GameClipComponent::MergeFrom(const CVideo_GameClipComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameClipComponent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  representations_.MergeFrom(from.representations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_type(from._internal_file_type());
    }
    if (cached_has_bits & 0x00000004u) {
      contents_ = from.contents_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_size_ = from.segment_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GameClipComponent::CopyFrom(const CVideo_GameClipComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameClipComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameClipComponent::IsInitialized() const {
  return true;
}

void CVideo_GameClipComponent::InternalSwap(CVideo_GameClipComponent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  representations_.InternalSwap(&other->representations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_type_, lhs_arena,
      &other->file_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameClipComponent, segment_size_)
      + sizeof(CVideo_GameClipComponent::segment_size_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameClipComponent, contents_)>(
          reinterpret_cast<char*>(&contents_),
          reinterpret_cast<char*>(&other->contents_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameClipComponent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[7]);
}

// ===================================================================

class CVideo_CreateGameClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_CreateGameClip_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_duration_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_segment_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CVideo_CreateGameClip_Request::CVideo_CreateGameClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  components_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_CreateGameClip_Request)
}
CVideo_CreateGameClip_Request::CVideo_CreateGameClip_Request(const CVideo_CreateGameClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      components_(from.components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_duration_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(segment_duration_));
  // @@protoc_insertion_point(copy_constructor:CVideo_CreateGameClip_Request)
}

inline void CVideo_CreateGameClip_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_duration_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(segment_duration_));
}

CVideo_CreateGameClip_Request::~CVideo_CreateGameClip_Request() {
  // @@protoc_insertion_point(destructor:CVideo_CreateGameClip_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_CreateGameClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_CreateGameClip_Request::ArenaDtor(void* object) {
  CVideo_CreateGameClip_Request* _this = reinterpret_cast< CVideo_CreateGameClip_Request* >(object);
  (void)_this;
}
void CVideo_CreateGameClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_CreateGameClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_CreateGameClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_CreateGameClip_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_duration_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(segment_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_CreateGameClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1 [(.description) = "app ID stream is tagged with"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_segments = 2 [(.description) = "number of segments in this clip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_segments(&has_bits);
          num_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length_milliseconds = 3 [(.description) = "length of video in ms"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length_milliseconds(&has_bits);
          length_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 segment_duration_timescale = 4 [(.description) = "timescale (denominator) for segment duration below, eg 1000 for milliseconds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_segment_duration_timescale(&has_bits);
          segment_duration_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 segment_duration = 5 [(.description) = "length of most segments in \'timescale\' units (last may be shorter)"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_segment_duration(&has_bits);
          segment_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVideo_GameClipComponent components = 6 [(.description) = "List of components"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_CreateGameClip_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_CreateGameClip_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "app ID stream is tagged with"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 num_segments = 2 [(.description) = "number of segments in this clip"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_segments(), target);
  }

  // optional uint32 length_milliseconds = 3 [(.description) = "length of video in ms"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length_milliseconds(), target);
  }

  // optional uint32 segment_duration_timescale = 4 [(.description) = "timescale (denominator) for segment duration below, eg 1000 for milliseconds"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_segment_duration_timescale(), target);
  }

  // optional uint32 segment_duration = 5 [(.description) = "length of most segments in \'timescale\' units (last may be shorter)"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_segment_duration(), target);
  }

  // repeated .CVideo_GameClipComponent components = 6 [(.description) = "List of components"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_CreateGameClip_Request)
  return target;
}

size_t CVideo_CreateGameClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_CreateGameClip_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameClipComponent components = 6 [(.description) = "List of components"];
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 app_id = 1 [(.description) = "app ID stream is tagged with"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 num_segments = 2 [(.description) = "number of segments in this clip"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_segments());
    }

    // optional uint32 length_milliseconds = 3 [(.description) = "length of video in ms"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length_milliseconds());
    }

    // optional uint32 segment_duration_timescale = 4 [(.description) = "timescale (denominator) for segment duration below, eg 1000 for milliseconds"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_segment_duration_timescale());
    }

    // optional uint32 segment_duration = 5 [(.description) = "length of most segments in \'timescale\' units (last may be shorter)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_segment_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_CreateGameClip_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_CreateGameClip_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_CreateGameClip_Request::GetClassData() const { return &_class_data_; }

void CVideo_CreateGameClip_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_CreateGameClip_Request *>(to)->MergeFrom(
      static_cast<const CVideo_CreateGameClip_Request &>(from));
}


void CVideo_CreateGameClip_Request::MergeFrom(const CVideo_CreateGameClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_CreateGameClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_segments_ = from.num_segments_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_milliseconds_ = from.length_milliseconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_duration_timescale_ = from.segment_duration_timescale_;
    }
    if (cached_has_bits & 0x00000010u) {
      segment_duration_ = from.segment_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_CreateGameClip_Request::CopyFrom(const CVideo_CreateGameClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_CreateGameClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_CreateGameClip_Request::IsInitialized() const {
  return true;
}

void CVideo_CreateGameClip_Request::InternalSwap(CVideo_CreateGameClip_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  components_.InternalSwap(&other->components_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_CreateGameClip_Request, segment_duration_)
      + sizeof(CVideo_CreateGameClip_Request::segment_duration_)
      - PROTOBUF_FIELD_OFFSET(CVideo_CreateGameClip_Request, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CreateGameClip_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[8]);
}

// ===================================================================

class CVideo_CreateGameClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_CreateGameClip_Response>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_CreateGameClip_Response::CVideo_CreateGameClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_CreateGameClip_Response)
}
CVideo_CreateGameClip_Response::CVideo_CreateGameClip_Response(const CVideo_CreateGameClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_id_ = from.clip_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_CreateGameClip_Response)
}

inline void CVideo_CreateGameClip_Response::SharedCtor() {
clip_id_ = uint64_t{0u};
}

CVideo_CreateGameClip_Response::~CVideo_CreateGameClip_Response() {
  // @@protoc_insertion_point(destructor:CVideo_CreateGameClip_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_CreateGameClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_CreateGameClip_Response::ArenaDtor(void* object) {
  CVideo_CreateGameClip_Response* _this = reinterpret_cast< CVideo_CreateGameClip_Response* >(object);
  (void)_this;
}
void CVideo_CreateGameClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_CreateGameClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_CreateGameClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_CreateGameClip_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clip_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_CreateGameClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 clip_id = 1 [(.description) = "Clip ID if successful"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_CreateGameClip_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_CreateGameClip_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 clip_id = 1 [(.description) = "Clip ID if successful"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_CreateGameClip_Response)
  return target;
}

size_t CVideo_CreateGameClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_CreateGameClip_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 clip_id = 1 [(.description) = "Clip ID if successful"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clip_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_CreateGameClip_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_CreateGameClip_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_CreateGameClip_Response::GetClassData() const { return &_class_data_; }

void CVideo_CreateGameClip_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_CreateGameClip_Response *>(to)->MergeFrom(
      static_cast<const CVideo_CreateGameClip_Response &>(from));
}


void CVideo_CreateGameClip_Response::MergeFrom(const CVideo_CreateGameClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_CreateGameClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clip_id()) {
    _internal_set_clip_id(from._internal_clip_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_CreateGameClip_Response::CopyFrom(const CVideo_CreateGameClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_CreateGameClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_CreateGameClip_Response::IsInitialized() const {
  return true;
}

void CVideo_CreateGameClip_Response::InternalSwap(CVideo_CreateGameClip_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_id_, other->clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CreateGameClip_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[9]);
}

// ===================================================================

class CVideo_GameClipSegmentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameClipSegmentInfo>()._has_bits_);
  static void set_has_segment_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_segment_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_GameClipSegmentInfo::CVideo_GameClipSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GameClipSegmentInfo)
}
CVideo_GameClipSegmentInfo::CVideo_GameClipSegmentInfo(const CVideo_GameClipSegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&segment_number_, &from.segment_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_size_bytes_) -
    reinterpret_cast<char*>(&segment_number_)) + sizeof(segment_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:CVideo_GameClipSegmentInfo)
}

inline void CVideo_GameClipSegmentInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segment_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_size_bytes_) -
    reinterpret_cast<char*>(&segment_number_)) + sizeof(segment_size_bytes_));
}

CVideo_GameClipSegmentInfo::~CVideo_GameClipSegmentInfo() {
  // @@protoc_insertion_point(destructor:CVideo_GameClipSegmentInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GameClipSegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_GameClipSegmentInfo::ArenaDtor(void* object) {
  CVideo_GameClipSegmentInfo* _this = reinterpret_cast< CVideo_GameClipSegmentInfo* >(object);
  (void)_this;
}
void CVideo_GameClipSegmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameClipSegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameClipSegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameClipSegmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&segment_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_size_bytes_) -
        reinterpret_cast<char*>(&segment_number_)) + sizeof(segment_size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameClipSegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 segment_number = 4 [(.description) = "segment number"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_segment_number(&has_bits);
          segment_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 segment_size_bytes = 5 [(.description) = "segment size in bytes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_segment_size_bytes(&has_bits);
          segment_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GameClipSegmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameClipSegmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 segment_number = 4 [(.description) = "segment number"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_segment_number(), target);
  }

  // optional uint64 segment_size_bytes = 5 [(.description) = "segment size in bytes"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_segment_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameClipSegmentInfo)
  return target;
}

size_t CVideo_GameClipSegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameClipSegmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 segment_number = 4 [(.description) = "segment number"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_segment_number());
    }

    // optional uint64 segment_size_bytes = 5 [(.description) = "segment size in bytes"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_segment_size_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GameClipSegmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GameClipSegmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GameClipSegmentInfo::GetClassData() const { return &_class_data_; }

void CVideo_GameClipSegmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GameClipSegmentInfo *>(to)->MergeFrom(
      static_cast<const CVideo_GameClipSegmentInfo &>(from));
}


void CVideo_GameClipSegmentInfo::MergeFrom(const CVideo_GameClipSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameClipSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      segment_number_ = from.segment_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      segment_size_bytes_ = from.segment_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GameClipSegmentInfo::CopyFrom(const CVideo_GameClipSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameClipSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameClipSegmentInfo::IsInitialized() const {
  return true;
}

void CVideo_GameClipSegmentInfo::InternalSwap(CVideo_GameClipSegmentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameClipSegmentInfo, segment_size_bytes_)
      + sizeof(CVideo_GameClipSegmentInfo::segment_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameClipSegmentInfo, segment_number_)>(
          reinterpret_cast<char*>(&segment_number_),
          reinterpret_cast<char*>(&other->segment_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameClipSegmentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[10]);
}

// ===================================================================

class CVideo_BeginGameClipSegmentsUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_BeginGameClipSegmentsUpload_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_BeginGameClipSegmentsUpload_Request::CVideo_BeginGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segments_to_store_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_BeginGameClipSegmentsUpload_Request)
}
CVideo_BeginGameClipSegmentsUpload_Request::CVideo_BeginGameClipSegmentsUpload_Request(const CVideo_BeginGameClipSegmentsUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segments_to_store_(from.segments_to_store_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArenaForAllocation());
  }
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArenaForAllocation());
  }
  clip_id_ = from.clip_id_;
  // @@protoc_insertion_point(copy_constructor:CVideo_BeginGameClipSegmentsUpload_Request)
}

inline void CVideo_BeginGameClipSegmentsUpload_Request::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clip_id_ = uint64_t{0u};
}

CVideo_BeginGameClipSegmentsUpload_Request::~CVideo_BeginGameClipSegmentsUpload_Request() {
  // @@protoc_insertion_point(destructor:CVideo_BeginGameClipSegmentsUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_BeginGameClipSegmentsUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_BeginGameClipSegmentsUpload_Request::ArenaDtor(void* object) {
  CVideo_BeginGameClipSegmentsUpload_Request* _this = reinterpret_cast< CVideo_BeginGameClipSegmentsUpload_Request* >(object);
  (void)_this;
}
void CVideo_BeginGameClipSegmentsUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_BeginGameClipSegmentsUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_BeginGameClipSegmentsUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_BeginGameClipSegmentsUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_to_store_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
  }
  clip_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_BeginGameClipSegmentsUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string component_name = 2 [(.description) = "component segments belong to"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_BeginGameClipSegmentsUpload_Request.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string representation_name = 3 [(.description) = "representation name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_BeginGameClipSegmentsUpload_Request.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVideo_GameClipSegmentInfo segments_to_store = 4 [(.description) = "Segments the client has to upload"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_to_store(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_BeginGameClipSegmentsUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_BeginGameClipSegmentsUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clip_id(), target);
  }

  // optional string component_name = 2 [(.description) = "component segments belong to"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_BeginGameClipSegmentsUpload_Request.component_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_name(), target);
  }

  // optional string representation_name = 3 [(.description) = "representation name"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_BeginGameClipSegmentsUpload_Request.representation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_representation_name(), target);
  }

  // repeated .CVideo_GameClipSegmentInfo segments_to_store = 4 [(.description) = "Segments the client has to upload"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_to_store_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_segments_to_store(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_BeginGameClipSegmentsUpload_Request)
  return target;
}

size_t CVideo_BeginGameClipSegmentsUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_BeginGameClipSegmentsUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameClipSegmentInfo segments_to_store = 4 [(.description) = "Segments the client has to upload"];
  total_size += 1UL * this->_internal_segments_to_store_size();
  for (const auto& msg : this->segments_to_store_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string component_name = 2 [(.description) = "component segments belong to"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string representation_name = 3 [(.description) = "representation name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clip_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_BeginGameClipSegmentsUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_BeginGameClipSegmentsUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_BeginGameClipSegmentsUpload_Request::GetClassData() const { return &_class_data_; }

void CVideo_BeginGameClipSegmentsUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_BeginGameClipSegmentsUpload_Request *>(to)->MergeFrom(
      static_cast<const CVideo_BeginGameClipSegmentsUpload_Request &>(from));
}


void CVideo_BeginGameClipSegmentsUpload_Request::MergeFrom(const CVideo_BeginGameClipSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_BeginGameClipSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segments_to_store_.MergeFrom(from.segments_to_store_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000004u) {
      clip_id_ = from.clip_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_BeginGameClipSegmentsUpload_Request::CopyFrom(const CVideo_BeginGameClipSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_BeginGameClipSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_BeginGameClipSegmentsUpload_Request::IsInitialized() const {
  return true;
}

void CVideo_BeginGameClipSegmentsUpload_Request::InternalSwap(CVideo_BeginGameClipSegmentsUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segments_to_store_.InternalSwap(&other->segments_to_store_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &representation_name_, lhs_arena,
      &other->representation_name_, rhs_arena
  );
  swap(clip_id_, other->clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_BeginGameClipSegmentsUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[11]);
}

// ===================================================================

class CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameClipSegmentUploadInfo_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVideo_GameClipSegmentUploadInfo_HTTPHeaders::CVideo_GameClipSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
}
CVideo_GameClipSegmentUploadInfo_HTTPHeaders::CVideo_GameClipSegmentUploadInfo_HTTPHeaders(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
}

inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CVideo_GameClipSegmentUploadInfo_HTTPHeaders::~CVideo_GameClipSegmentUploadInfo_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::ArenaDtor(void* object) {
  CVideo_GameClipSegmentUploadInfo_HTTPHeaders* _this = reinterpret_cast< CVideo_GameClipSegmentUploadInfo_HTTPHeaders* >(object);
  (void)_this;
}
void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1 [(.description) = "HTTP header name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2 [(.description) = "HTTP header value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [(.description) = "HTTP header name"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2 [(.description) = "HTTP header value"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  return target;
}

size_t CVideo_GameClipSegmentUploadInfo_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1 [(.description) = "HTTP header name"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2 [(.description) = "HTTP header value"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GameClipSegmentUploadInfo_HTTPHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GameClipSegmentUploadInfo_HTTPHeaders::GetClassData() const { return &_class_data_; }

void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GameClipSegmentUploadInfo_HTTPHeaders *>(to)->MergeFrom(
      static_cast<const CVideo_GameClipSegmentUploadInfo_HTTPHeaders &>(from));
}


void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::MergeFrom(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::CopyFrom(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameClipSegmentUploadInfo_HTTPHeaders::IsInitialized() const {
  return true;
}

void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::InternalSwap(CVideo_GameClipSegmentUploadInfo_HTTPHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameClipSegmentUploadInfo_HTTPHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[12]);
}

// ===================================================================

class CVideo_GameClipSegmentUploadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_GameClipSegmentUploadInfo>()._has_bits_);
  static const ::CVideo_GameClipSegmentInfo& segment_info(const CVideo_GameClipSegmentUploadInfo* msg);
  static void set_has_segment_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CVideo_GameClipSegmentInfo&
CVideo_GameClipSegmentUploadInfo::_Internal::segment_info(const CVideo_GameClipSegmentUploadInfo* msg) {
  return *msg->segment_info_;
}
CVideo_GameClipSegmentUploadInfo::CVideo_GameClipSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_GameClipSegmentUploadInfo)
}
CVideo_GameClipSegmentUploadInfo::CVideo_GameClipSegmentUploadInfo(const CVideo_GameClipSegmentUploadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_segment_info()) {
    segment_info_ = new ::CVideo_GameClipSegmentInfo(*from.segment_info_);
  } else {
    segment_info_ = nullptr;
  }
  use_https_ = from.use_https_;
  // @@protoc_insertion_point(copy_constructor:CVideo_GameClipSegmentUploadInfo)
}

inline void CVideo_GameClipSegmentUploadInfo::SharedCtor() {
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segment_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&segment_info_)) + sizeof(use_https_));
}

CVideo_GameClipSegmentUploadInfo::~CVideo_GameClipSegmentUploadInfo() {
  // @@protoc_insertion_point(destructor:CVideo_GameClipSegmentUploadInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_GameClipSegmentUploadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete segment_info_;
}

void CVideo_GameClipSegmentUploadInfo::ArenaDtor(void* object) {
  CVideo_GameClipSegmentUploadInfo* _this = reinterpret_cast< CVideo_GameClipSegmentUploadInfo* >(object);
  (void)_this;
}
void CVideo_GameClipSegmentUploadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_GameClipSegmentUploadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_GameClipSegmentUploadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_GameClipSegmentUploadInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(segment_info_ != nullptr);
      segment_info_->Clear();
    }
  }
  use_https_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_GameClipSegmentUploadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CVideo_GameClipSegmentInfo segment_info = 1 [(.description) = "segment ID information"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_host = 2 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipSegmentUploadInfo.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_path = 3 [(.description) = "Relative path on server to which file should be uploaded."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_GameClipSegmentUploadInfo.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 4 [(.description) = "If true, use https, otherwise use http."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVideo_GameClipSegmentUploadInfo.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_GameClipSegmentUploadInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_GameClipSegmentUploadInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CVideo_GameClipSegmentInfo segment_info = 1 [(.description) = "segment ID information"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::segment_info(this), target, stream);
  }

  // optional string url_host = 2 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipSegmentUploadInfo.url_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_host(), target);
  }

  // optional string url_path = 3 [(.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_GameClipSegmentUploadInfo.url_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url_path(), target);
  }

  // optional bool use_https = 4 [(.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_https(), target);
  }

  // repeated .CVideo_GameClipSegmentUploadInfo.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_request_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_GameClipSegmentUploadInfo)
  return target;
}

size_t CVideo_GameClipSegmentUploadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_GameClipSegmentUploadInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameClipSegmentUploadInfo.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url_host = 2 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 3 [(.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional .CVideo_GameClipSegmentInfo segment_info = 1 [(.description) = "segment ID information"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_info_);
    }

    // optional bool use_https = 4 [(.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_GameClipSegmentUploadInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_GameClipSegmentUploadInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_GameClipSegmentUploadInfo::GetClassData() const { return &_class_data_; }

void CVideo_GameClipSegmentUploadInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_GameClipSegmentUploadInfo *>(to)->MergeFrom(
      static_cast<const CVideo_GameClipSegmentUploadInfo &>(from));
}


void CVideo_GameClipSegmentUploadInfo::MergeFrom(const CVideo_GameClipSegmentUploadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_GameClipSegmentUploadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_segment_info()->::CVideo_GameClipSegmentInfo::MergeFrom(from._internal_segment_info());
    }
    if (cached_has_bits & 0x00000008u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_GameClipSegmentUploadInfo::CopyFrom(const CVideo_GameClipSegmentUploadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_GameClipSegmentUploadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_GameClipSegmentUploadInfo::IsInitialized() const {
  return true;
}

void CVideo_GameClipSegmentUploadInfo::InternalSwap(CVideo_GameClipSegmentUploadInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_path_, lhs_arena,
      &other->url_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_GameClipSegmentUploadInfo, use_https_)
      + sizeof(CVideo_GameClipSegmentUploadInfo::use_https_)
      - PROTOBUF_FIELD_OFFSET(CVideo_GameClipSegmentUploadInfo, segment_info_)>(
          reinterpret_cast<char*>(&segment_info_),
          reinterpret_cast<char*>(&other->segment_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_GameClipSegmentUploadInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[13]);
}

// ===================================================================

class CVideo_BeginGameClipSegmentsUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_BeginGameClipSegmentsUpload_Response>()._has_bits_);
  static void set_has_call_again(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_BeginGameClipSegmentsUpload_Response::CVideo_BeginGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segments_needed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_BeginGameClipSegmentsUpload_Response)
}
CVideo_BeginGameClipSegmentsUpload_Response::CVideo_BeginGameClipSegmentsUpload_Response(const CVideo_BeginGameClipSegmentsUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segments_needed_(from.segments_needed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_again_ = from.call_again_;
  // @@protoc_insertion_point(copy_constructor:CVideo_BeginGameClipSegmentsUpload_Response)
}

inline void CVideo_BeginGameClipSegmentsUpload_Response::SharedCtor() {
call_again_ = false;
}

CVideo_BeginGameClipSegmentsUpload_Response::~CVideo_BeginGameClipSegmentsUpload_Response() {
  // @@protoc_insertion_point(destructor:CVideo_BeginGameClipSegmentsUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_BeginGameClipSegmentsUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVideo_BeginGameClipSegmentsUpload_Response::ArenaDtor(void* object) {
  CVideo_BeginGameClipSegmentsUpload_Response* _this = reinterpret_cast< CVideo_BeginGameClipSegmentsUpload_Response* >(object);
  (void)_this;
}
void CVideo_BeginGameClipSegmentsUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_BeginGameClipSegmentsUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_BeginGameClipSegmentsUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_BeginGameClipSegmentsUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_needed_.Clear();
  call_again_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_BeginGameClipSegmentsUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1 [(.description) = "Segments that need uploading"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments_needed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool call_again = 2 [(.description) = "If true, you should ask again once you\'ve uploaded the segments indicated in this response. There may be more we want. If there was no work to do in this response, then wait a few seconds before asking again"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_call_again(&has_bits);
          call_again_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_BeginGameClipSegmentsUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_BeginGameClipSegmentsUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1 [(.description) = "Segments that need uploading"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_needed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments_needed(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool call_again = 2 [(.description) = "If true, you should ask again once you\'ve uploaded the segments indicated in this response. There may be more we want. If there was no work to do in this response, then wait a few seconds before asking again"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_call_again(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_BeginGameClipSegmentsUpload_Response)
  return target;
}

size_t CVideo_BeginGameClipSegmentsUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_BeginGameClipSegmentsUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1 [(.description) = "Segments that need uploading"];
  total_size += 1UL * this->_internal_segments_needed_size();
  for (const auto& msg : this->segments_needed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool call_again = 2 [(.description) = "If true, you should ask again once you\'ve uploaded the segments indicated in this response. There may be more we want. If there was no work to do in this response, then wait a few seconds before asking again"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_BeginGameClipSegmentsUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_BeginGameClipSegmentsUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_BeginGameClipSegmentsUpload_Response::GetClassData() const { return &_class_data_; }

void CVideo_BeginGameClipSegmentsUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_BeginGameClipSegmentsUpload_Response *>(to)->MergeFrom(
      static_cast<const CVideo_BeginGameClipSegmentsUpload_Response &>(from));
}


void CVideo_BeginGameClipSegmentsUpload_Response::MergeFrom(const CVideo_BeginGameClipSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_BeginGameClipSegmentsUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segments_needed_.MergeFrom(from.segments_needed_);
  if (from._internal_has_call_again()) {
    _internal_set_call_again(from._internal_call_again());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_BeginGameClipSegmentsUpload_Response::CopyFrom(const CVideo_BeginGameClipSegmentsUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_BeginGameClipSegmentsUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_BeginGameClipSegmentsUpload_Response::IsInitialized() const {
  return true;
}

void CVideo_BeginGameClipSegmentsUpload_Response::InternalSwap(CVideo_BeginGameClipSegmentsUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segments_needed_.InternalSwap(&other->segments_needed_);
  swap(call_again_, other->call_again_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_BeginGameClipSegmentsUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[14]);
}

// ===================================================================

class CVideo_CommitGameClipSegmentsUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_CommitGameClipSegmentsUpload_Request>()._has_bits_);
  static void set_has_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_component_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_representation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_segment_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_upload_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CVideo_CommitGameClipSegmentsUpload_Request::CVideo_CommitGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_CommitGameClipSegmentsUpload_Request)
}
CVideo_CommitGameClipSegmentsUpload_Request::CVideo_CommitGameClipSegmentsUpload_Request(const CVideo_CommitGameClipSegmentsUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_component_name()) {
    component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_name(), 
      GetArenaForAllocation());
  }
  representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_representation_name()) {
    representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_representation_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&clip_id_, &from.clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&clip_id_)) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:CVideo_CommitGameClipSegmentsUpload_Request)
}

inline void CVideo_CommitGameClipSegmentsUpload_Request::SharedCtor() {
component_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
representation_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&clip_id_)) + sizeof(upload_result_));
}

CVideo_CommitGameClipSegmentsUpload_Request::~CVideo_CommitGameClipSegmentsUpload_Request() {
  // @@protoc_insertion_point(destructor:CVideo_CommitGameClipSegmentsUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_CommitGameClipSegmentsUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representation_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_CommitGameClipSegmentsUpload_Request::ArenaDtor(void* object) {
  CVideo_CommitGameClipSegmentsUpload_Request* _this = reinterpret_cast< CVideo_CommitGameClipSegmentsUpload_Request* >(object);
  (void)_this;
}
void CVideo_CommitGameClipSegmentsUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_CommitGameClipSegmentsUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_CommitGameClipSegmentsUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_CommitGameClipSegmentsUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      component_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      representation_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_result_) -
        reinterpret_cast<char*>(&clip_id_)) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_CommitGameClipSegmentsUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clip_id(&has_bits);
          clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string component_name = 2 [(.description) = "component segments belong to"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_CommitGameClipSegmentsUpload_Request.component_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string representation_name = 3 [(.description) = "representation name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_representation_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVideo_CommitGameClipSegmentsUpload_Request.representation_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_segment_number = 4 [(.description) = "Segment Number of first segment uploaded in this batch"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_first_segment_number(&has_bits);
          first_segment_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_segments = 5 [(.description) = "Number of segments in Batch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_segments(&has_bits);
          num_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upload_result = 6 [(.description) = "eresult of the upload attempt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_upload_result(&has_bits);
          upload_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_CommitGameClipSegmentsUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_CommitGameClipSegmentsUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clip_id(), target);
  }

  // optional string component_name = 2 [(.description) = "component segments belong to"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_CommitGameClipSegmentsUpload_Request.component_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_name(), target);
  }

  // optional string representation_name = 3 [(.description) = "representation name"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representation_name().data(), static_cast<int>(this->_internal_representation_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVideo_CommitGameClipSegmentsUpload_Request.representation_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_representation_name(), target);
  }

  // optional uint32 first_segment_number = 4 [(.description) = "Segment Number of first segment uploaded in this batch"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_first_segment_number(), target);
  }

  // optional uint32 num_segments = 5 [(.description) = "Number of segments in Batch"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_segments(), target);
  }

  // optional uint32 upload_result = 6 [(.description) = "eresult of the upload attempt"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_upload_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_CommitGameClipSegmentsUpload_Request)
  return target;
}

size_t CVideo_CommitGameClipSegmentsUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_CommitGameClipSegmentsUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string component_name = 2 [(.description) = "component segments belong to"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_name());
    }

    // optional string representation_name = 3 [(.description) = "representation name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representation_name());
    }

    // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_clip_id());
    }

    // optional uint32 first_segment_number = 4 [(.description) = "Segment Number of first segment uploaded in this batch"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_segment_number());
    }

    // optional uint32 num_segments = 5 [(.description) = "Number of segments in Batch"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_segments());
    }

    // optional uint32 upload_result = 6 [(.description) = "eresult of the upload attempt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upload_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_CommitGameClipSegmentsUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_CommitGameClipSegmentsUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_CommitGameClipSegmentsUpload_Request::GetClassData() const { return &_class_data_; }

void CVideo_CommitGameClipSegmentsUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_CommitGameClipSegmentsUpload_Request *>(to)->MergeFrom(
      static_cast<const CVideo_CommitGameClipSegmentsUpload_Request &>(from));
}


void CVideo_CommitGameClipSegmentsUpload_Request::MergeFrom(const CVideo_CommitGameClipSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_CommitGameClipSegmentsUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component_name(from._internal_component_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_representation_name(from._internal_representation_name());
    }
    if (cached_has_bits & 0x00000004u) {
      clip_id_ = from.clip_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_segment_number_ = from.first_segment_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_segments_ = from.num_segments_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_CommitGameClipSegmentsUpload_Request::CopyFrom(const CVideo_CommitGameClipSegmentsUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_CommitGameClipSegmentsUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_CommitGameClipSegmentsUpload_Request::IsInitialized() const {
  return true;
}

void CVideo_CommitGameClipSegmentsUpload_Request::InternalSwap(CVideo_CommitGameClipSegmentsUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &representation_name_, lhs_arena,
      &other->representation_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVideo_CommitGameClipSegmentsUpload_Request, upload_result_)
      + sizeof(CVideo_CommitGameClipSegmentsUpload_Request::upload_result_)
      - PROTOBUF_FIELD_OFFSET(CVideo_CommitGameClipSegmentsUpload_Request, clip_id_)>(
          reinterpret_cast<char*>(&clip_id_),
          reinterpret_cast<char*>(&other->clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CommitGameClipSegmentsUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[15]);
}

// ===================================================================

class CVideo_CommitGameClipSegmentsUpload_Response::_Internal {
 public:
};

CVideo_CommitGameClipSegmentsUpload_Response::CVideo_CommitGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CVideo_CommitGameClipSegmentsUpload_Response)
}
CVideo_CommitGameClipSegmentsUpload_Response::CVideo_CommitGameClipSegmentsUpload_Response(const CVideo_CommitGameClipSegmentsUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CVideo_CommitGameClipSegmentsUpload_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_CommitGameClipSegmentsUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_CommitGameClipSegmentsUpload_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CVideo_CommitGameClipSegmentsUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[16]);
}

// ===================================================================

class CVideo_UnlockedH264_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CVideo_UnlockedH264_Notification>()._has_bits_);
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVideo_UnlockedH264_Notification)
}
CVideo_UnlockedH264_Notification::CVideo_UnlockedH264_Notification(const CVideo_UnlockedH264_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryption_key()) {
    encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encryption_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CVideo_UnlockedH264_Notification)
}

inline void CVideo_UnlockedH264_Notification::SharedCtor() {
encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CVideo_UnlockedH264_Notification::~CVideo_UnlockedH264_Notification() {
  // @@protoc_insertion_point(destructor:CVideo_UnlockedH264_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVideo_UnlockedH264_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVideo_UnlockedH264_Notification::ArenaDtor(void* object) {
  CVideo_UnlockedH264_Notification* _this = reinterpret_cast< CVideo_UnlockedH264_Notification* >(object);
  (void)_this;
}
void CVideo_UnlockedH264_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVideo_UnlockedH264_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVideo_UnlockedH264_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CVideo_UnlockedH264_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encryption_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVideo_UnlockedH264_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encryption_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVideo_UnlockedH264_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVideo_UnlockedH264_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encryption_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encryption_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVideo_UnlockedH264_Notification)
  return target;
}

size_t CVideo_UnlockedH264_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVideo_UnlockedH264_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes encryption_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryption_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVideo_UnlockedH264_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVideo_UnlockedH264_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVideo_UnlockedH264_Notification::GetClassData() const { return &_class_data_; }

void CVideo_UnlockedH264_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVideo_UnlockedH264_Notification *>(to)->MergeFrom(
      static_cast<const CVideo_UnlockedH264_Notification &>(from));
}


void CVideo_UnlockedH264_Notification::MergeFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVideo_UnlockedH264_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encryption_key()) {
    _internal_set_encryption_key(from._internal_encryption_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVideo_UnlockedH264_Notification::CopyFrom(const CVideo_UnlockedH264_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVideo_UnlockedH264_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVideo_UnlockedH264_Notification::IsInitialized() const {
  return true;
}

void CVideo_UnlockedH264_Notification::InternalSwap(CVideo_UnlockedH264_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encryption_key_, lhs_arena,
      &other->encryption_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CVideo_UnlockedH264_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[17]);
}

// ===================================================================

class CFovasVideo_ClientGetOPFSettings_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFovasVideo_ClientGetOPFSettings_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFovasVideo_ClientGetOPFSettings_Request)
}
CFovasVideo_ClientGetOPFSettings_Request::CFovasVideo_ClientGetOPFSettings_Request(const CFovasVideo_ClientGetOPFSettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Request)
}

inline void CFovasVideo_ClientGetOPFSettings_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_cellid_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
}

CFovasVideo_ClientGetOPFSettings_Request::~CFovasVideo_ClientGetOPFSettings_Request() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFovasVideo_ClientGetOPFSettings_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFovasVideo_ClientGetOPFSettings_Request::ArenaDtor(void* object) {
  CFovasVideo_ClientGetOPFSettings_Request* _this = reinterpret_cast< CFovasVideo_ClientGetOPFSettings_Request* >(object);
  (void)_this;
}
void CFovasVideo_ClientGetOPFSettings_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFovasVideo_ClientGetOPFSettings_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFovasVideo_ClientGetOPFSettings_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cellid_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(client_cellid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFovasVideo_ClientGetOPFSettings_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_cellid(&has_bits);
          client_cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFovasVideo_ClientGetOPFSettings_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_cellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Request)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_cellid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFovasVideo_ClientGetOPFSettings_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFovasVideo_ClientGetOPFSettings_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFovasVideo_ClientGetOPFSettings_Request::GetClassData() const { return &_class_data_; }

void CFovasVideo_ClientGetOPFSettings_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFovasVideo_ClientGetOPFSettings_Request *>(to)->MergeFrom(
      static_cast<const CFovasVideo_ClientGetOPFSettings_Request &>(from));
}


void CFovasVideo_ClientGetOPFSettings_Request::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_cellid_ = from.client_cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFovasVideo_ClientGetOPFSettings_Request::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Request::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Request::InternalSwap(CFovasVideo_ClientGetOPFSettings_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, client_cellid_)
      + sizeof(CFovasVideo_ClientGetOPFSettings_Request::client_cellid_)
      - PROTOBUF_FIELD_OFFSET(CFovasVideo_ClientGetOPFSettings_Request, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFovasVideo_ClientGetOPFSettings_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[18]);
}

// ===================================================================

class CFovasVideo_ClientGetOPFSettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFovasVideo_ClientGetOPFSettings_Response>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opf_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFovasVideo_ClientGetOPFSettings_Response)
}
CFovasVideo_ClientGetOPFSettings_Response::CFovasVideo_ClientGetOPFSettings_Response(const CFovasVideo_ClientGetOPFSettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opf_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    opf_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_opf_settings()) {
    opf_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opf_settings(), 
      GetArenaForAllocation());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CFovasVideo_ClientGetOPFSettings_Response)
}

inline void CFovasVideo_ClientGetOPFSettings_Response::SharedCtor() {
opf_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  opf_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_ = 0u;
}

CFovasVideo_ClientGetOPFSettings_Response::~CFovasVideo_ClientGetOPFSettings_Response() {
  // @@protoc_insertion_point(destructor:CFovasVideo_ClientGetOPFSettings_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFovasVideo_ClientGetOPFSettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opf_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFovasVideo_ClientGetOPFSettings_Response::ArenaDtor(void* object) {
  CFovasVideo_ClientGetOPFSettings_Response* _this = reinterpret_cast< CFovasVideo_ClientGetOPFSettings_Response* >(object);
  (void)_this;
}
void CFovasVideo_ClientGetOPFSettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFovasVideo_ClientGetOPFSettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFovasVideo_ClientGetOPFSettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFovasVideo_ClientGetOPFSettings_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opf_settings_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFovasVideo_ClientGetOPFSettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1 [(.description) = "App ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_opf_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFovasVideo_ClientGetOPFSettings_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFovasVideo_ClientGetOPFSettings_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opf_settings().data(), static_cast<int>(this->_internal_opf_settings().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFovasVideo_ClientGetOPFSettings_Response.opf_settings");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_opf_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFovasVideo_ClientGetOPFSettings_Response)
  return target;
}

size_t CFovasVideo_ClientGetOPFSettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFovasVideo_ClientGetOPFSettings_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opf_settings());
    }

    // optional uint32 app_id = 1 [(.description) = "App ID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFovasVideo_ClientGetOPFSettings_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFovasVideo_ClientGetOPFSettings_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFovasVideo_ClientGetOPFSettings_Response::GetClassData() const { return &_class_data_; }

void CFovasVideo_ClientGetOPFSettings_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFovasVideo_ClientGetOPFSettings_Response *>(to)->MergeFrom(
      static_cast<const CFovasVideo_ClientGetOPFSettings_Response &>(from));
}


void CFovasVideo_ClientGetOPFSettings_Response::MergeFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opf_settings(from._internal_opf_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFovasVideo_ClientGetOPFSettings_Response::CopyFrom(const CFovasVideo_ClientGetOPFSettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFovasVideo_ClientGetOPFSettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFovasVideo_ClientGetOPFSettings_Response::IsInitialized() const {
  return true;
}

void CFovasVideo_ClientGetOPFSettings_Response::InternalSwap(CFovasVideo_ClientGetOPFSettings_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opf_settings_, lhs_arena,
      &other->opf_settings_, rhs_arena
  );
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFovasVideo_ClientGetOPFSettings_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fvideo_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fvideo_2esteamclient_2eproto[19]);
}

// ===================================================================

Video::~Video() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Video::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Video::GetDescriptor() {
  return descriptor();
}

void Video::ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_ClientGetVideoURL_Request*,
                         ::CVideo_ClientGetVideoURL_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetVideoURL() not implemented.");
  done->Run();
}

void Video::SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_SetVideoBookmark_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetVideoBookmark() not implemented.");
  done->Run();
}

void Video::GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_GetVideoBookmarks_Request*,
                         ::CVideo_GetVideoBookmarks_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetVideoBookmarks() not implemented.");
  done->Run();
}

void Video::CreateGameClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_CreateGameClip_Request*,
                         ::CVideo_CreateGameClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGameClip() not implemented.");
  done->Run();
}

void Video::BeginGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_BeginGameClipSegmentsUpload_Request*,
                         ::CVideo_BeginGameClipSegmentsUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginGameClipSegmentsUpload() not implemented.");
  done->Run();
}

void Video::CommitGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_CommitGameClipSegmentsUpload_Request*,
                         ::CVideo_CommitGameClipSegmentsUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitGameClipSegmentsUpload() not implemented.");
  done->Run();
}

void Video::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      ClientGetVideoURL(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_ClientGetVideoURL_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_ClientGetVideoURL_Response*>(
                 response),
             done);
      break;
    case 1:
      SetVideoBookmark(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_SetVideoBookmark_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      GetVideoBookmarks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_GetVideoBookmarks_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_GetVideoBookmarks_Response*>(
                 response),
             done);
      break;
    case 3:
      CreateGameClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_CreateGameClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_CreateGameClip_Response*>(
                 response),
             done);
      break;
    case 4:
      BeginGameClipSegmentsUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_BeginGameClipSegmentsUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_BeginGameClipSegmentsUpload_Response*>(
                 response),
             done);
      break;
    case 5:
      CommitGameClipSegmentsUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_CommitGameClipSegmentsUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CVideo_CommitGameClipSegmentsUpload_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Video::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Request::default_instance();
    case 1:
      return ::CVideo_SetVideoBookmark_Notification::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Request::default_instance();
    case 3:
      return ::CVideo_CreateGameClip_Request::default_instance();
    case 4:
      return ::CVideo_BeginGameClipSegmentsUpload_Request::default_instance();
    case 5:
      return ::CVideo_CommitGameClipSegmentsUpload_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Video::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_ClientGetVideoURL_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::CVideo_GetVideoBookmarks_Response::default_instance();
    case 3:
      return ::CVideo_CreateGameClip_Response::default_instance();
    case 4:
      return ::CVideo_BeginGameClipSegmentsUpload_Response::default_instance();
    case 5:
      return ::CVideo_CommitGameClipSegmentsUpload_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Video_Stub::Video_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Video_Stub::Video_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Video_Stub::~Video_Stub() {
  if (owns_channel_) delete channel_;
}

void Video_Stub::ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_ClientGetVideoURL_Request* request,
                              ::CVideo_ClientGetVideoURL_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Video_Stub::SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_SetVideoBookmark_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Video_Stub::GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_GetVideoBookmarks_Request* request,
                              ::CVideo_GetVideoBookmarks_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Video_Stub::CreateGameClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_CreateGameClip_Request* request,
                              ::CVideo_CreateGameClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Video_Stub::BeginGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_BeginGameClipSegmentsUpload_Request* request,
                              ::CVideo_BeginGameClipSegmentsUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Video_Stub::CommitGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_CommitGameClipSegmentsUpload_Request* request,
                              ::CVideo_CommitGameClipSegmentsUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

VideoClient::~VideoClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VideoClient::GetDescriptor() {
  return descriptor();
}

void VideoClient::NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CVideo_UnlockedH264_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUnlockedH264() not implemented.");
  done->Run();
}

void VideoClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyUnlockedH264(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CVideo_UnlockedH264_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CVideo_UnlockedH264_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VideoClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VideoClient_Stub::VideoClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VideoClient_Stub::VideoClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
VideoClient_Stub::~VideoClient_Stub() {
  if (owns_channel_) delete channel_;
}

void VideoClient_Stub::NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CVideo_UnlockedH264_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

FovasVideo::~FovasVideo() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FovasVideo::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvideo_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FovasVideo::GetDescriptor() {
  return descriptor();
}

void FovasVideo::ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFovasVideo_ClientGetOPFSettings_Request*,
                         ::CFovasVideo_ClientGetOPFSettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetOPFSettings() not implemented.");
  done->Run();
}

void FovasVideo::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fvideo_2esteamclient_2eproto[2]);
  switch(method->index()) {
    case 0:
      ClientGetOPFSettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFovasVideo_ClientGetOPFSettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFovasVideo_ClientGetOPFSettings_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FovasVideo::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FovasVideo::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFovasVideo_ClientGetOPFSettings_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FovasVideo_Stub::FovasVideo_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FovasVideo_Stub::FovasVideo_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FovasVideo_Stub::~FovasVideo_Stub() {
  if (owns_channel_) delete channel_;
}

void FovasVideo_Stub::ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFovasVideo_ClientGetOPFSettings_Request* request,
                              ::CFovasVideo_ClientGetOPFSettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CVideo_ClientGetVideoURL_Request* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_ClientGetVideoURL_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_ClientGetVideoURL_Response* Arena::CreateMaybeMessage< ::CVideo_ClientGetVideoURL_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_ClientGetVideoURL_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::VideoBookmark* Arena::CreateMaybeMessage< ::VideoBookmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VideoBookmark >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_SetVideoBookmark_Notification* Arena::CreateMaybeMessage< ::CVideo_SetVideoBookmark_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_SetVideoBookmark_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GetVideoBookmarks_Request* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GetVideoBookmarks_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GetVideoBookmarks_Response* Arena::CreateMaybeMessage< ::CVideo_GetVideoBookmarks_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GetVideoBookmarks_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameClipRepresentation* Arena::CreateMaybeMessage< ::CVideo_GameClipRepresentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameClipRepresentation >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameClipComponent* Arena::CreateMaybeMessage< ::CVideo_GameClipComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameClipComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CreateGameClip_Request* Arena::CreateMaybeMessage< ::CVideo_CreateGameClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CreateGameClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CreateGameClip_Response* Arena::CreateMaybeMessage< ::CVideo_CreateGameClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CreateGameClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameClipSegmentInfo* Arena::CreateMaybeMessage< ::CVideo_GameClipSegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameClipSegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_BeginGameClipSegmentsUpload_Request* Arena::CreateMaybeMessage< ::CVideo_BeginGameClipSegmentsUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_BeginGameClipSegmentsUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* Arena::CreateMaybeMessage< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_GameClipSegmentUploadInfo* Arena::CreateMaybeMessage< ::CVideo_GameClipSegmentUploadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_GameClipSegmentUploadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_BeginGameClipSegmentsUpload_Response* Arena::CreateMaybeMessage< ::CVideo_BeginGameClipSegmentsUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_BeginGameClipSegmentsUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CommitGameClipSegmentsUpload_Request* Arena::CreateMaybeMessage< ::CVideo_CommitGameClipSegmentsUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CommitGameClipSegmentsUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_CommitGameClipSegmentsUpload_Response* Arena::CreateMaybeMessage< ::CVideo_CommitGameClipSegmentsUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_CommitGameClipSegmentsUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CVideo_UnlockedH264_Notification* Arena::CreateMaybeMessage< ::CVideo_UnlockedH264_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVideo_UnlockedH264_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Request* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFovasVideo_ClientGetOPFSettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFovasVideo_ClientGetOPFSettings_Response* Arena::CreateMaybeMessage< ::CFovasVideo_ClientGetOPFSettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFovasVideo_ClientGetOPFSettings_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
