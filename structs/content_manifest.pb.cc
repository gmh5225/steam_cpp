// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#include "content_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(uint64_t{0u})
  , crc_(0u)
  , cb_original_(0u)
  , cb_compressed_(0u){}
struct ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal {
  constexpr ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal() {}
  union {
    ContentManifestPayload_FileMapping_ChunkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
constexpr ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linktarget_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u})
  , flags_(0u){}
struct ContentManifestPayload_FileMappingDefaultTypeInternal {
  constexpr ContentManifestPayload_FileMappingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentManifestPayload_FileMappingDefaultTypeInternal() {}
  union {
    ContentManifestPayload_FileMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentManifestPayload_FileMappingDefaultTypeInternal _ContentManifestPayload_FileMapping_default_instance_;
constexpr ContentManifestPayload::ContentManifestPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mappings_(){}
struct ContentManifestPayloadDefaultTypeInternal {
  constexpr ContentManifestPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentManifestPayloadDefaultTypeInternal() {}
  union {
    ContentManifestPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentManifestPayloadDefaultTypeInternal _ContentManifestPayload_default_instance_;
constexpr ContentManifestMetadata::ContentManifestMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gid_manifest_(uint64_t{0u})
  , depot_id_(0u)
  , creation_time_(0u)
  , cb_disk_original_(uint64_t{0u})
  , filenames_encrypted_(false)
  , unique_chunks_(0u)
  , cb_disk_compressed_(uint64_t{0u})
  , crc_encrypted_(0u)
  , crc_clear_(0u){}
struct ContentManifestMetadataDefaultTypeInternal {
  constexpr ContentManifestMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentManifestMetadataDefaultTypeInternal() {}
  union {
    ContentManifestMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentManifestMetadataDefaultTypeInternal _ContentManifestMetadata_default_instance_;
constexpr ContentManifestSignature::ContentManifestSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ContentManifestSignatureDefaultTypeInternal {
  constexpr ContentManifestSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentManifestSignatureDefaultTypeInternal() {}
  union {
    ContentManifestSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentManifestSignatureDefaultTypeInternal _ContentManifestSignature_default_instance_;
constexpr ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sha_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_original_(0u)
  , patch_method_(0u)
  , size_delta_(0u){}
struct ContentDeltaChunks_DeltaChunkDefaultTypeInternal {
  constexpr ContentDeltaChunks_DeltaChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentDeltaChunks_DeltaChunkDefaultTypeInternal() {}
  union {
    ContentDeltaChunks_DeltaChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentDeltaChunks_DeltaChunkDefaultTypeInternal _ContentDeltaChunks_DeltaChunk_default_instance_;
constexpr ContentDeltaChunks::ContentDeltaChunks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deltachunks_()
  , manifest_id_source_(uint64_t{0u})
  , manifest_id_target_(uint64_t{0u})
  , depot_id_(0u)
  , chunk_data_location_(0)
{}
struct ContentDeltaChunksDefaultTypeInternal {
  constexpr ContentDeltaChunksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentDeltaChunksDefaultTypeInternal() {}
  union {
    ContentDeltaChunks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentDeltaChunksDefaultTypeInternal _ContentDeltaChunks_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_content_5fmanifest_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_content_5fmanifest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_content_5fmanifest_2eproto = nullptr;

const uint32_t TableStruct_content_5fmanifest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, sha_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, crc_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, offset_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, cb_original_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping_ChunkData, cb_compressed_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, filename_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, size_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, flags_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, sha_filename_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, sha_content_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, chunks_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload_FileMapping, linktarget_),
  0,
  4,
  5,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestPayload, mappings_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, depot_id_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, gid_manifest_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, creation_time_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, filenames_encrypted_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, cb_disk_original_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, cb_disk_compressed_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, unique_chunks_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, crc_encrypted_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestMetadata, crc_clear_),
  1,
  0,
  2,
  4,
  3,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentManifestSignature, signature_),
  0,
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, sha_source_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, sha_target_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, size_original_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, patch_method_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, chunk_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks_DeltaChunk, size_delta_),
  0,
  1,
  3,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, depot_id_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, manifest_id_source_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, manifest_id_target_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, deltachunks_),
  PROTOBUF_FIELD_OFFSET(::ContentDeltaChunks, chunk_data_location_),
  2,
  0,
  1,
  ~0u,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::ContentManifestPayload_FileMapping_ChunkData)},
  { 16, 29, -1, sizeof(::ContentManifestPayload_FileMapping)},
  { 36, -1, -1, sizeof(::ContentManifestPayload)},
  { 43, 58, -1, sizeof(::ContentManifestMetadata)},
  { 67, 74, -1, sizeof(::ContentManifestSignature)},
  { 75, 87, -1, sizeof(::ContentDeltaChunks_DeltaChunk)},
  { 93, 104, -1, sizeof(::ContentDeltaChunks)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentManifestPayload_FileMapping_ChunkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentManifestPayload_FileMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentManifestPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentManifestMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentManifestSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentDeltaChunks_DeltaChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContentDeltaChunks_default_instance_),
};

const char descriptor_table_protodef_content_5fmanifest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026content_manifest.proto\"\357\002\n\026ContentMani"
  "festPayload\0225\n\010mappings\030\001 \003(\0132#.ContentM"
  "anifestPayload.FileMapping\032\235\002\n\013FileMappi"
  "ng\022\020\n\010filename\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\r\n\005fl"
  "ags\030\003 \001(\r\022\024\n\014sha_filename\030\004 \001(\014\022\023\n\013sha_c"
  "ontent\030\005 \001(\014\022=\n\006chunks\030\006 \003(\0132-.ContentMa"
  "nifestPayload.FileMapping.ChunkData\022\022\n\nl"
  "inktarget\030\007 \001(\t\032a\n\tChunkData\022\013\n\003sha\030\001 \001("
  "\014\022\013\n\003crc\030\002 \001(\007\022\016\n\006offset\030\003 \001(\004\022\023\n\013cb_ori"
  "ginal\030\004 \001(\r\022\025\n\rcb_compressed\030\005 \001(\r\"\354\001\n\027C"
  "ontentManifestMetadata\022\020\n\010depot_id\030\001 \001(\r"
  "\022\024\n\014gid_manifest\030\002 \001(\004\022\025\n\rcreation_time\030"
  "\003 \001(\r\022\033\n\023filenames_encrypted\030\004 \001(\010\022\030\n\020cb"
  "_disk_original\030\005 \001(\004\022\032\n\022cb_disk_compress"
  "ed\030\006 \001(\004\022\025\n\runique_chunks\030\007 \001(\r\022\025\n\rcrc_e"
  "ncrypted\030\010 \001(\r\022\021\n\tcrc_clear\030\t \001(\r\"-\n\030Con"
  "tentManifestSignature\022\021\n\tsignature\030\001 \001(\014"
  "\"\204\003\n\022ContentDeltaChunks\022\020\n\010depot_id\030\001 \001("
  "\r\022\032\n\022manifest_id_source\030\002 \001(\004\022\032\n\022manifes"
  "t_id_target\030\003 \001(\004\0223\n\013deltaChunks\030\004 \003(\0132\036"
  ".ContentDeltaChunks.DeltaChunk\022h\n\023chunk_"
  "data_location\030\005 \001(\0162\037.EContentDeltaChunk"
  "DataLocation:*k_EContentDeltaChunkDataLo"
  "cationInProtobuf\032\204\001\n\nDeltaChunk\022\022\n\nsha_s"
  "ource\030\001 \001(\014\022\022\n\nsha_target\030\002 \001(\014\022\025\n\rsize_"
  "original\030\003 \001(\r\022\024\n\014patch_method\030\004 \001(\r\022\r\n\005"
  "chunk\030\005 \001(\014\022\022\n\nsize_delta\030\006 \001(\r*\203\001\n\036ECon"
  "tentDeltaChunkDataLocation\022.\n*k_EContent"
  "DeltaChunkDataLocationInProtobuf\020\000\0221\n-k_"
  "EContentDeltaChunkDataLocationAfterProto"
  "buf\020\001B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_content_5fmanifest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_content_5fmanifest_2eproto = {
  false, false, 1212, descriptor_table_protodef_content_5fmanifest_2eproto, "content_manifest.proto", 
  &descriptor_table_content_5fmanifest_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_content_5fmanifest_2eproto::offsets,
  file_level_metadata_content_5fmanifest_2eproto, file_level_enum_descriptors_content_5fmanifest_2eproto, file_level_service_descriptors_content_5fmanifest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_content_5fmanifest_2eproto_getter() {
  return &descriptor_table_content_5fmanifest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_content_5fmanifest_2eproto(&descriptor_table_content_5fmanifest_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentDeltaChunkDataLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_content_5fmanifest_2eproto);
  return file_level_enum_descriptors_content_5fmanifest_2eproto[0];
}
bool EContentDeltaChunkDataLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ContentManifestPayload_FileMapping_ChunkData::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestPayload_FileMapping_ChunkData>()._has_bits_);
  static void set_has_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cb_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cb_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload.FileMapping.ChunkData)
}
ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&cb_compressed_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping.ChunkData)
}

inline void ContentManifestPayload_FileMapping_ChunkData::SharedCtor() {
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cb_compressed_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
}

ContentManifestPayload_FileMapping_ChunkData::~ContentManifestPayload_FileMapping_ChunkData() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping.ChunkData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentManifestPayload_FileMapping_ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping_ChunkData::ArenaDtor(void* object) {
  ContentManifestPayload_FileMapping_ChunkData* _this = reinterpret_cast< ContentManifestPayload_FileMapping_ChunkData* >(object);
  (void)_this;
}
void ContentManifestPayload_FileMapping_ChunkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentManifestPayload_FileMapping_ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentManifestPayload_FileMapping_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping.ChunkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cb_compressed_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(cb_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload_FileMapping_ChunkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 crc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cb_original = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cb_original(&has_bits);
          cb_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cb_compressed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cb_compressed(&has_bits);
          cb_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload_FileMapping_ChunkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping.ChunkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha(), target);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_crc(), target);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cb_original(), target);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cb_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping.ChunkData)
  return target;
}

size_t ContentManifestPayload_FileMapping_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping.ChunkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes sha = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha());
    }

    // optional uint64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
    }

    // optional fixed32 crc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 cb_original = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cb_original());
    }

    // optional uint32 cb_compressed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cb_compressed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload_FileMapping_ChunkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentManifestPayload_FileMapping_ChunkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload_FileMapping_ChunkData::GetClassData() const { return &_class_data_; }

void ContentManifestPayload_FileMapping_ChunkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentManifestPayload_FileMapping_ChunkData *>(to)->MergeFrom(
      static_cast<const ContentManifestPayload_FileMapping_ChunkData &>(from));
}


void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha(from._internal_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_original_ = from.cb_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      cb_compressed_ = from.cb_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping_ChunkData::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping_ChunkData::InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, lhs_arena,
      &other->sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, cb_compressed_)
      + sizeof(ContentManifestPayload_FileMapping_ChunkData::cb_compressed_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload_FileMapping_ChunkData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[0]);
}

// ===================================================================

class ContentManifestPayload_FileMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestPayload_FileMapping>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sha_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sha_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linktarget(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload.FileMapping)
}
ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  sha_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_filename()) {
    sha_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_filename(), 
      GetArenaForAllocation());
  }
  sha_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_content()) {
    sha_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_content(), 
      GetArenaForAllocation());
  }
  linktarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    linktarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linktarget()) {
    linktarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linktarget(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload.FileMapping)
}

inline void ContentManifestPayload_FileMapping::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
linktarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  linktarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_)) + sizeof(flags_));
}

ContentManifestPayload_FileMapping::~ContentManifestPayload_FileMapping() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload.FileMapping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentManifestPayload_FileMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linktarget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping::ArenaDtor(void* object) {
  ContentManifestPayload_FileMapping* _this = reinterpret_cast< ContentManifestPayload_FileMapping* >(object);
  (void)_this;
}
void ContentManifestPayload_FileMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentManifestPayload_FileMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentManifestPayload_FileMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload.FileMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sha_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      linktarget_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload_FileMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ContentManifestPayload.FileMapping.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sha_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string linktarget = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_linktarget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ContentManifestPayload.FileMapping.linktarget");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload_FileMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload.FileMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_filename(), target);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sha_content(), target);
  }

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_chunks(i), target, stream);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linktarget().data(), static_cast<int>(this->_internal_linktarget().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ContentManifestPayload.FileMapping.linktarget");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_linktarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload.FileMapping)
  return target;
}

size_t ContentManifestPayload_FileMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload.FileMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_filename());
    }

    // optional bytes sha_content = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_content());
    }

    // optional string linktarget = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linktarget());
    }

    // optional uint64 size = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload_FileMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentManifestPayload_FileMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload_FileMapping::GetClassData() const { return &_class_data_; }

void ContentManifestPayload_FileMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentManifestPayload_FileMapping *>(to)->MergeFrom(
      static_cast<const ContentManifestPayload_FileMapping &>(from));
}


void ContentManifestPayload_FileMapping::MergeFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_filename(from._internal_sha_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sha_content(from._internal_sha_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_linktarget(from._internal_linktarget());
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload_FileMapping::CopyFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping::InternalSwap(ContentManifestPayload_FileMapping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_.InternalSwap(&other->chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_filename_, lhs_arena,
      &other->sha_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_content_, lhs_arena,
      &other->sha_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &linktarget_, lhs_arena,
      &other->linktarget_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping, flags_)
      + sizeof(ContentManifestPayload_FileMapping::flags_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestPayload_FileMapping, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload_FileMapping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[1]);
}

// ===================================================================

class ContentManifestPayload::_Internal {
 public:
};

ContentManifestPayload::ContentManifestPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mappings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentManifestPayload)
}
ContentManifestPayload::ContentManifestPayload(const ContentManifestPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ContentManifestPayload)
}

inline void ContentManifestPayload::SharedCtor() {
}

ContentManifestPayload::~ContentManifestPayload() {
  // @@protoc_insertion_point(destructor:ContentManifestPayload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentManifestPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentManifestPayload::ArenaDtor(void* object) {
  ContentManifestPayload* _this = reinterpret_cast< ContentManifestPayload* >(object);
  (void)_this;
}
void ContentManifestPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentManifestPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentManifestPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ContentManifestPayload.FileMapping mappings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mappings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestPayload)
  return target;
}

size_t ContentManifestPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentManifestPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestPayload::GetClassData() const { return &_class_data_; }

void ContentManifestPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentManifestPayload *>(to)->MergeFrom(
      static_cast<const ContentManifestPayload &>(from));
}


void ContentManifestPayload::MergeFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestPayload::CopyFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload::IsInitialized() const {
  return true;
}

void ContentManifestPayload::InternalSwap(ContentManifestPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mappings_.InternalSwap(&other->mappings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestPayload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[2]);
}

// ===================================================================

class ContentManifestMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestMetadata>()._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gid_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filenames_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cb_disk_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cb_disk_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unique_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crc_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crc_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

ContentManifestMetadata::ContentManifestMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentManifestMetadata)
}
ContentManifestMetadata::ContentManifestMetadata(const ContentManifestMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gid_manifest_, &from.gid_manifest_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_clear_) -
    reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_clear_));
  // @@protoc_insertion_point(copy_constructor:ContentManifestMetadata)
}

inline void ContentManifestMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gid_manifest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_clear_) -
    reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_clear_));
}

ContentManifestMetadata::~ContentManifestMetadata() {
  // @@protoc_insertion_point(destructor:ContentManifestMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentManifestMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentManifestMetadata::ArenaDtor(void* object) {
  ContentManifestMetadata* _this = reinterpret_cast< ContentManifestMetadata* >(object);
  (void)_this;
}
void ContentManifestMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentManifestMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentManifestMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gid_manifest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_encrypted_) -
        reinterpret_cast<char*>(&gid_manifest_)) + sizeof(crc_encrypted_));
  }
  crc_clear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gid_manifest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gid_manifest(&has_bits);
          gid_manifest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creation_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool filenames_encrypted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filenames_encrypted(&has_bits);
          filenames_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cb_disk_original = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cb_disk_original(&has_bits);
          cb_disk_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cb_disk_compressed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cb_disk_compressed(&has_bits);
          cb_disk_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unique_chunks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unique_chunks(&has_bits);
          unique_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crc_encrypted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_crc_encrypted(&has_bits);
          crc_encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crc_clear = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_crc_clear(&has_bits);
          crc_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gid_manifest(), target);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_creation_time(), target);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_filenames_encrypted(), target);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_cb_disk_original(), target);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cb_disk_compressed(), target);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_unique_chunks(), target);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_crc_encrypted(), target);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_crc_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestMetadata)
  return target;
}

size_t ContentManifestMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 gid_manifest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gid_manifest());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional uint32 creation_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_creation_time());
    }

    // optional uint64 cb_disk_original = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cb_disk_original());
    }

    // optional bool filenames_encrypted = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_chunks = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_chunks());
    }

    // optional uint64 cb_disk_compressed = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cb_disk_compressed());
    }

    // optional uint32 crc_encrypted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_encrypted());
    }

  }
  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_crc_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentManifestMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestMetadata::GetClassData() const { return &_class_data_; }

void ContentManifestMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentManifestMetadata *>(to)->MergeFrom(
      static_cast<const ContentManifestMetadata &>(from));
}


void ContentManifestMetadata::MergeFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gid_manifest_ = from.gid_manifest_;
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_disk_original_ = from.cb_disk_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      filenames_encrypted_ = from.filenames_encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      unique_chunks_ = from.unique_chunks_;
    }
    if (cached_has_bits & 0x00000040u) {
      cb_disk_compressed_ = from.cb_disk_compressed_;
    }
    if (cached_has_bits & 0x00000080u) {
      crc_encrypted_ = from.crc_encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_crc_clear(from._internal_crc_clear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestMetadata::CopyFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestMetadata::IsInitialized() const {
  return true;
}

void ContentManifestMetadata::InternalSwap(ContentManifestMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentManifestMetadata, crc_clear_)
      + sizeof(ContentManifestMetadata::crc_clear_)
      - PROTOBUF_FIELD_OFFSET(ContentManifestMetadata, gid_manifest_)>(
          reinterpret_cast<char*>(&gid_manifest_),
          reinterpret_cast<char*>(&other->gid_manifest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[3]);
}

// ===================================================================

class ContentManifestSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentManifestSignature>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContentManifestSignature::ContentManifestSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentManifestSignature)
}
ContentManifestSignature::ContentManifestSignature(const ContentManifestSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ContentManifestSignature)
}

inline void ContentManifestSignature::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentManifestSignature::~ContentManifestSignature() {
  // @@protoc_insertion_point(destructor:ContentManifestSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentManifestSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestSignature::ArenaDtor(void* object) {
  ContentManifestSignature* _this = reinterpret_cast< ContentManifestSignature* >(object);
  (void)_this;
}
void ContentManifestSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentManifestSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentManifestSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentManifestSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentManifestSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentManifestSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentManifestSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentManifestSignature)
  return target;
}

size_t ContentManifestSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentManifestSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentManifestSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentManifestSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentManifestSignature::GetClassData() const { return &_class_data_; }

void ContentManifestSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentManifestSignature *>(to)->MergeFrom(
      static_cast<const ContentManifestSignature &>(from));
}


void ContentManifestSignature::MergeFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _internal_set_signature(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentManifestSignature::CopyFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestSignature::IsInitialized() const {
  return true;
}

void ContentManifestSignature::InternalSwap(ContentManifestSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentManifestSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[4]);
}

// ===================================================================

class ContentDeltaChunks_DeltaChunk::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentDeltaChunks_DeltaChunk>()._has_bits_);
  static void set_has_sha_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_patch_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentDeltaChunks.DeltaChunk)
}
ContentDeltaChunks_DeltaChunk::ContentDeltaChunks_DeltaChunk(const ContentDeltaChunks_DeltaChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_source()) {
    sha_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_source(), 
      GetArenaForAllocation());
  }
  sha_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_target()) {
    sha_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_target(), 
      GetArenaForAllocation());
  }
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chunk()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_original_, &from.size_original_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_delta_) -
    reinterpret_cast<char*>(&size_original_)) + sizeof(size_delta_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks.DeltaChunk)
}

inline void ContentDeltaChunks_DeltaChunk::SharedCtor() {
sha_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_original_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_delta_) -
    reinterpret_cast<char*>(&size_original_)) + sizeof(size_delta_));
}

ContentDeltaChunks_DeltaChunk::~ContentDeltaChunks_DeltaChunk() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks.DeltaChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentDeltaChunks_DeltaChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentDeltaChunks_DeltaChunk::ArenaDtor(void* object) {
  ContentDeltaChunks_DeltaChunk* _this = reinterpret_cast< ContentDeltaChunks_DeltaChunk* >(object);
  (void)_this;
}
void ContentDeltaChunks_DeltaChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentDeltaChunks_DeltaChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentDeltaChunks_DeltaChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks.DeltaChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sha_source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&size_original_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_delta_) -
        reinterpret_cast<char*>(&size_original_)) + sizeof(size_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentDeltaChunks_DeltaChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sha_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sha_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_original = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size_original(&has_bits);
          size_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 patch_method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_patch_method(&has_bits);
          patch_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size_delta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size_delta(&has_bits);
          size_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentDeltaChunks_DeltaChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks.DeltaChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sha_source(), target);
  }

  // optional bytes sha_target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_target(), target);
  }

  // optional uint32 size_original = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size_original(), target);
  }

  // optional uint32 patch_method = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_patch_method(), target);
  }

  // optional bytes chunk = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_chunk(), target);
  }

  // optional uint32 size_delta = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_size_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks.DeltaChunk)
  return target;
}

size_t ContentDeltaChunks_DeltaChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks.DeltaChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes sha_source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_source());
    }

    // optional bytes sha_target = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_target());
    }

    // optional bytes chunk = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
    }

    // optional uint32 size_original = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size_original());
    }

    // optional uint32 patch_method = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_patch_method());
    }

    // optional uint32 size_delta = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentDeltaChunks_DeltaChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentDeltaChunks_DeltaChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentDeltaChunks_DeltaChunk::GetClassData() const { return &_class_data_; }

void ContentDeltaChunks_DeltaChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentDeltaChunks_DeltaChunk *>(to)->MergeFrom(
      static_cast<const ContentDeltaChunks_DeltaChunk &>(from));
}


void ContentDeltaChunks_DeltaChunk::MergeFrom(const ContentDeltaChunks_DeltaChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks.DeltaChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_source(from._internal_sha_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_target(from._internal_sha_target());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_chunk(from._internal_chunk());
    }
    if (cached_has_bits & 0x00000008u) {
      size_original_ = from.size_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      patch_method_ = from.patch_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_delta_ = from.size_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentDeltaChunks_DeltaChunk::CopyFrom(const ContentDeltaChunks_DeltaChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks.DeltaChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks_DeltaChunk::IsInitialized() const {
  return true;
}

void ContentDeltaChunks_DeltaChunk::InternalSwap(ContentDeltaChunks_DeltaChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_source_, lhs_arena,
      &other->sha_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_target_, lhs_arena,
      &other->sha_target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chunk_, lhs_arena,
      &other->chunk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentDeltaChunks_DeltaChunk, size_delta_)
      + sizeof(ContentDeltaChunks_DeltaChunk::size_delta_)
      - PROTOBUF_FIELD_OFFSET(ContentDeltaChunks_DeltaChunk, size_original_)>(
          reinterpret_cast<char*>(&size_original_),
          reinterpret_cast<char*>(&other->size_original_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentDeltaChunks_DeltaChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[5]);
}

// ===================================================================

class ContentDeltaChunks::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentDeltaChunks>()._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manifest_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manifest_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk_data_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContentDeltaChunks::ContentDeltaChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deltachunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ContentDeltaChunks)
}
ContentDeltaChunks::ContentDeltaChunks(const ContentDeltaChunks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      deltachunks_(from.deltachunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&manifest_id_source_, &from.manifest_id_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunk_data_location_) -
    reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(chunk_data_location_));
  // @@protoc_insertion_point(copy_constructor:ContentDeltaChunks)
}

inline void ContentDeltaChunks::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&manifest_id_source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunk_data_location_) -
    reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(chunk_data_location_));
}

ContentDeltaChunks::~ContentDeltaChunks() {
  // @@protoc_insertion_point(destructor:ContentDeltaChunks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentDeltaChunks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentDeltaChunks::ArenaDtor(void* object) {
  ContentDeltaChunks* _this = reinterpret_cast< ContentDeltaChunks* >(object);
  (void)_this;
}
void ContentDeltaChunks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentDeltaChunks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentDeltaChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:ContentDeltaChunks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deltachunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&manifest_id_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunk_data_location_) -
        reinterpret_cast<char*>(&manifest_id_source_)) + sizeof(chunk_data_location_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentDeltaChunks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 manifest_id_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_manifest_id_source(&has_bits);
          manifest_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 manifest_id_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_manifest_id_target(&has_bits);
          manifest_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deltachunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EContentDeltaChunkDataLocation_IsValid(val))) {
            _internal_set_chunk_data_location(static_cast<::EContentDeltaChunkDataLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentDeltaChunks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContentDeltaChunks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional uint64 manifest_id_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_manifest_id_source(), target);
  }

  // optional uint64 manifest_id_target = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_manifest_id_target(), target);
  }

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deltachunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_deltachunks(i), target, stream);
  }

  // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chunk_data_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContentDeltaChunks)
  return target;
}

size_t ContentDeltaChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContentDeltaChunks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  total_size += 1UL * this->_internal_deltachunks_size();
  for (const auto& msg : this->deltachunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 manifest_id_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_manifest_id_source());
    }

    // optional uint64 manifest_id_target = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_manifest_id_target());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chunk_data_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentDeltaChunks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentDeltaChunks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentDeltaChunks::GetClassData() const { return &_class_data_; }

void ContentDeltaChunks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentDeltaChunks *>(to)->MergeFrom(
      static_cast<const ContentDeltaChunks &>(from));
}


void ContentDeltaChunks::MergeFrom(const ContentDeltaChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContentDeltaChunks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deltachunks_.MergeFrom(from.deltachunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      manifest_id_source_ = from.manifest_id_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_target_ = from.manifest_id_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chunk_data_location_ = from.chunk_data_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentDeltaChunks::CopyFrom(const ContentDeltaChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContentDeltaChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDeltaChunks::IsInitialized() const {
  return true;
}

void ContentDeltaChunks::InternalSwap(ContentDeltaChunks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deltachunks_.InternalSwap(&other->deltachunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentDeltaChunks, chunk_data_location_)
      + sizeof(ContentDeltaChunks::chunk_data_location_)
      - PROTOBUF_FIELD_OFFSET(ContentDeltaChunks, manifest_id_source_)>(
          reinterpret_cast<char*>(&manifest_id_source_),
          reinterpret_cast<char*>(&other->manifest_id_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentDeltaChunks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_content_5fmanifest_2eproto_getter, &descriptor_table_content_5fmanifest_2eproto_once,
      file_level_metadata_content_5fmanifest_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ContentManifestPayload_FileMapping_ChunkData* Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping_ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload_FileMapping_ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestPayload_FileMapping* Arena::CreateMaybeMessage< ::ContentManifestPayload_FileMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload_FileMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestPayload* Arena::CreateMaybeMessage< ::ContentManifestPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestMetadata* Arena::CreateMaybeMessage< ::ContentManifestMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentManifestSignature* Arena::CreateMaybeMessage< ::ContentManifestSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentManifestSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentDeltaChunks_DeltaChunk* Arena::CreateMaybeMessage< ::ContentDeltaChunks_DeltaChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentDeltaChunks_DeltaChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ContentDeltaChunks* Arena::CreateMaybeMessage< ::ContentDeltaChunks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContentDeltaChunks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
