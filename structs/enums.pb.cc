// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto

#include "enums.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enums_2eproto[44];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enums_2eproto = nullptr;
const uint32_t TableStruct_enums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enums.proto\032\030steammessages_base.proto*"
  "\200\n\n\027EPublishedFileQueryType\022)\n%k_Publish"
  "edFileQueryType_RankedByVote\020\000\0224\n0k_Publ"
  "ishedFileQueryType_RankedByPublicationDa"
  "te\020\001\022B\n>k_PublishedFileQueryType_Accepte"
  "dForGameRankedByAcceptanceDate\020\002\022*\n&k_Pu"
  "blishedFileQueryType_RankedByTrend\020\003\022F\nB"
  "k_PublishedFileQueryType_FavoritedByFrie"
  "ndsRankedByPublicationDate\020\004\022D\n@k_Publis"
  "hedFileQueryType_CreatedByFriendsRankedB"
  "yPublicationDate\020\005\0225\n1k_PublishedFileQue"
  "ryType_RankedByNumTimesReported\020\006\022J\nFk_P"
  "ublishedFileQueryType_CreatedByFollowedU"
  "sersRankedByPublicationDate\020\007\022(\n$k_Publi"
  "shedFileQueryType_NotYetRated\020\010\022=\n9k_Pub"
  "lishedFileQueryType_RankedByTotalUniqueS"
  "ubscriptions\020\t\0222\n.k_PublishedFileQueryTy"
  "pe_RankedByTotalVotesAsc\020\n\022,\n(k_Publishe"
  "dFileQueryType_RankedByVotesUp\020\013\022/\n+k_Pu"
  "blishedFileQueryType_RankedByTextSearch\020"
  "\014\0222\n.k_PublishedFileQueryType_RankedByPl"
  "aytimeTrend\020\r\0222\n.k_PublishedFileQueryTyp"
  "e_RankedByTotalPlaytime\020\016\0229\n5k_Published"
  "FileQueryType_RankedByAveragePlaytimeTre"
  "nd\020\017\022<\n8k_PublishedFileQueryType_RankedB"
  "yLifetimeAveragePlaytime\020\020\022:\n6k_Publishe"
  "dFileQueryType_RankedByPlaytimeSessionsT"
  "rend\020\021\022=\n9k_PublishedFileQueryType_Ranke"
  "dByLifetimePlaytimeSessions\020\022\022\?\n;k_Publi"
  "shedFileQueryType_RankedByInappropriateC"
  "ontentRating\020\023\0224\n0k_PublishedFileQueryTy"
  "pe_RankedByBanContentCheck\020\024\0224\n0k_Publis"
  "hedFileQueryType_RankedByLastUpdatedDate"
  "\020\025*\274\001\n#EPublishedFileInappropriateProvid"
  "er\0221\n-k_EPublishedFileInappropriateProvi"
  "der_Invalid\020\000\0220\n,k_EPublishedFileInappro"
  "priateProvider_Google\020\001\0220\n,k_EPublishedF"
  "ileInappropriateProvider_Amazon\020\002*\325\002\n!EP"
  "ublishedFileInappropriateResult\0222\n.k_EPu"
  "blishedFileInappropriateResult_NotScanne"
  "d\020\000\0224\n0k_EPublishedFileInappropriateResu"
  "lt_VeryUnlikely\020\001\0220\n,k_EPublishedFileIna"
  "ppropriateResult_Unlikely\020\036\0220\n,k_EPublis"
  "hedFileInappropriateResult_Possible\0202\022.\n"
  "*k_EPublishedFileInappropriateResult_Lik"
  "ely\020K\0222\n.k_EPublishedFileInappropriateRe"
  "sult_VeryLikely\020d*\261\003\n\021EPersonaStateFlag\022"
  "\'\n#k_EPersonaStateFlag_HasRichPresence\020\001"
  "\022&\n\"k_EPersonaStateFlag_InJoinableGame\020\002"
  "\022\036\n\032k_EPersonaStateFlag_Golden\020\004\022*\n&k_EP"
  "ersonaStateFlag_RemotePlayTogether\020\010\022&\n!"
  "k_EPersonaStateFlag_ClientTypeWeb\020\200\002\022)\n$"
  "k_EPersonaStateFlag_ClientTypeMobile\020\200\004\022"
  "*\n%k_EPersonaStateFlag_ClientTypeTenfoot"
  "\020\200\010\022%\n k_EPersonaStateFlag_ClientTypeVR\020"
  "\200\020\022*\n%k_EPersonaStateFlag_LaunchTypeGame"
  "pad\020\200 \022-\n(k_EPersonaStateFlag_LaunchType"
  "CompatTool\020\200@*\247\001\n\025EContentCheckProvider\022"
  "#\n\037k_EContentCheckProvider_Invalid\020\000\022\"\n\036"
  "k_EContentCheckProvider_Google\020\001\022\"\n\036k_EC"
  "ontentCheckProvider_Amazon\020\002\022!\n\035k_EConte"
  "ntCheckProvider_Local\020\003*\223\t\n\031EProfileCust"
  "omizationType\022&\n\"k_EProfileCustomization"
  "TypeInvalid\020\000\0226\n2k_EProfileCustomization"
  "TypeRareAchievementShowcase\020\001\022,\n(k_EProf"
  "ileCustomizationTypeGameCollector\020\002\022+\n\'k"
  "_EProfileCustomizationTypeItemShowcase\020\003"
  "\022,\n(k_EProfileCustomizationTypeTradeShow"
  "case\020\004\022%\n!k_EProfileCustomizationTypeBad"
  "ges\020\005\022+\n\'k_EProfileCustomizationTypeFavo"
  "riteGame\020\006\0221\n-k_EProfileCustomizationTyp"
  "eScreenshotShowcase\020\007\022)\n%k_EProfileCusto"
  "mizationTypeCustomText\020\010\022,\n(k_EProfileCu"
  "stomizationTypeFavoriteGroup\020\t\022-\n)k_EPro"
  "fileCustomizationTypeRecommendation\020\n\022+\n"
  "\'k_EProfileCustomizationTypeWorkshopItem"
  "\020\013\022)\n%k_EProfileCustomizationTypeMyWorks"
  "hop\020\014\022.\n*k_EProfileCustomizationTypeArtw"
  "orkShowcase\020\r\022,\n(k_EProfileCustomization"
  "TypeVideoShowcase\020\016\022%\n!k_EProfileCustomi"
  "zationTypeGuides\020\017\022\'\n#k_EProfileCustomiz"
  "ationTypeMyGuides\020\020\022+\n\'k_EProfileCustomi"
  "zationTypeAchievements\020\021\022)\n%k_EProfileCu"
  "stomizationTypeGreenlight\020\022\022+\n\'k_EProfil"
  "eCustomizationTypeMyGreenlight\020\023\022%\n!k_EP"
  "rofileCustomizationTypeSalien\020\024\0225\n1k_EPr"
  "ofileCustomizationTypeLoyaltyRewardReact"
  "ions\020\025\0224\n0k_EProfileCustomizationTypeSin"
  "gleArtworkShowcase\020\026\0228\n4k_EProfileCustom"
  "izationTypeAchievementsCompletionist\020\027\022%"
  "\n!k_EProfileCustomizationTypeReplay\020\030*\310\001"
  "\n\033EPublishedFileStorageSystem\022(\n$k_EPubl"
  "ishedFileStorageSystemInvalid\020\000\022,\n(k_EPu"
  "blishedFileStorageSystemLegacyCloud\020\001\022&\n"
  "\"k_EPublishedFileStorageSystemDepot\020\002\022)\n"
  "%k_EPublishedFileStorageSystemUGCCloud\020\003"
  "*\227\001\n\031ECloudStoragePersistState\022(\n$k_EClo"
  "udStoragePersistStatePersisted\020\000\022(\n$k_EC"
  "loudStoragePersistStateForgotten\020\001\022&\n\"k_"
  "ECloudStoragePersistStateDeleted\020\002*\350\001\n\022E"
  "SDCardFormatStage\022 \n\034k_ESDCardFormatStag"
  "e_Invalid\020\000\022!\n\035k_ESDCardFormatStage_Star"
  "ting\020\001\022 \n\034k_ESDCardFormatStage_Testing\020\002"
  "\022!\n\035k_ESDCardFormatStage_Rescuing\020\003\022#\n\037k"
  "_ESDCardFormatStage_Formatting\020\004\022#\n\037k_ES"
  "DCardFormatStage_Finalizing\020\005*\204\001\n\025ESyste"
  "mFanControlMode\022\"\n\036k_SystemFanControlMod"
  "e_Invalid\020\000\022#\n\037k_SystemFanControlMode_Di"
  "sabled\020\001\022\"\n\036k_SystemFanControlMode_Defau"
  "lt\020\002*\300\003\n\024EBluetoothDeviceType\022!\n\035k_Bluet"
  "oothDeviceType_Invalid\020\000\022!\n\035k_BluetoothD"
  "eviceType_Unknown\020\001\022\037\n\033k_BluetoothDevice"
  "Type_Phone\020\002\022\"\n\036k_BluetoothDeviceType_Co"
  "mputer\020\003\022!\n\035k_BluetoothDeviceType_Headse"
  "t\020\004\022$\n k_BluetoothDeviceType_Headphones\020"
  "\005\022\"\n\036k_BluetoothDeviceType_Speakers\020\006\022$\n"
  " k_BluetoothDeviceType_OtherAudio\020\007\022\037\n\033k"
  "_BluetoothDeviceType_Mouse\020\010\022\"\n\036k_Blueto"
  "othDeviceType_Joystick\020\t\022!\n\035k_BluetoothD"
  "eviceType_Gamepad\020\n\022\"\n\036k_BluetoothDevice"
  "Type_Keyboard\020\013*\200\001\n\025ESystemAudioDirectio"
  "n\022\"\n\036k_SystemAudioDirection_Invalid\020\000\022 \n"
  "\034k_SystemAudioDirection_Input\020\001\022!\n\035k_Sys"
  "temAudioDirection_Output\020\002*\361\002\n\023ESystemAu"
  "dioChannel\022 \n\034k_SystemAudioChannel_Inval"
  "id\020\000\022#\n\037k_SystemAudioChannel_Aggregated\020"
  "\001\022\"\n\036k_SystemAudioChannel_FrontLeft\020\002\022#\n"
  "\037k_SystemAudioChannel_FrontRight\020\003\022\034\n\030k_"
  "SystemAudioChannel_LFE\020\004\022!\n\035k_SystemAudi"
  "oChannel_BackLeft\020\005\022\"\n\036k_SystemAudioChan"
  "nel_BackRight\020\006\022$\n k_SystemAudioChannel_"
  "FrontCenter\020\007\022 \n\034k_SystemAudioChannel_Un"
  "known\020\010\022\035\n\031k_SystemAudioChannel_Mono\020\t*\311"
  "\001\n\024ESystemAudioPortType\022!\n\035k_SystemAudio"
  "PortType_Invalid\020\000\022!\n\035k_SystemAudioPortT"
  "ype_Unknown\020\001\022\"\n\036k_SystemAudioPortType_A"
  "udio32f\020\002\022 \n\034k_SystemAudioPortType_Midi8"
  "b\020\003\022%\n!k_SystemAudioPortType_Video32RGBA"
  "\020\004*\220\001\n\031ESystemAudioPortDirection\022&\n\"k_Sy"
  "stemAudioPortDirection_Invalid\020\000\022$\n k_Sy"
  "stemAudioPortDirection_Input\020\001\022%\n!k_Syst"
  "emAudioPortDirection_Output\020\002*\203\001\n\023ESyste"
  "mServiceState\022%\n!k_ESystemServiceState_U"
  "navailable\020\000\022\"\n\036k_ESystemServiceState_Di"
  "sabled\020\001\022!\n\035k_ESystemServiceState_Enable"
  "d\020\002*\341\001\n\031EGraphicsPerfOverlayLevel\022&\n\"k_E"
  "GraphicsPerfOverlayLevel_Hidden\020\000\022%\n!k_E"
  "GraphicsPerfOverlayLevel_Basic\020\001\022&\n\"k_EG"
  "raphicsPerfOverlayLevel_Medium\020\002\022$\n k_EG"
  "raphicsPerfOverlayLevel_Full\020\003\022\'\n#k_EGra"
  "phicsPerfOverlayLevel_Minimal\020\004*\345\001\n\024EGPU"
  "PerformanceLevel\022\"\n\036k_EGPUPerformanceLev"
  "el_Invalid\020\000\022\037\n\033k_EGPUPerformanceLevel_A"
  "uto\020\001\022!\n\035k_EGPUPerformanceLevel_Manual\020\002"
  "\022\036\n\032k_EGPUPerformanceLevel_Low\020\003\022\037\n\033k_EG"
  "PUPerformanceLevel_High\020\004\022$\n k_EGPUPerfo"
  "rmanceLevel_Profiling\020\005*\273\001\n\016EScalingFilt"
  "er\022\034\n\030k_EScalingFilter_Invalid\020\000\022\030\n\024k_ES"
  "calingFilter_FSR\020\001\022\034\n\030k_EScalingFilter_N"
  "earest\020\002\022\034\n\030k_EScalingFilter_Integer\020\003\022\033"
  "\n\027k_EScalingFilter_Linear\020\004\022\030\n\024k_EScalin"
  "gFilter_NIS\020\005*\273\001\n\023ESplitScalingFilter\022!\n"
  "\035k_ESplitScalingFilter_Invalid\020\000\022 \n\034k_ES"
  "plitScalingFilter_Linear\020\001\022!\n\035k_ESplitSc"
  "alingFilter_Nearest\020\002\022\035\n\031k_ESplitScaling"
  "Filter_FSR\020\003\022\035\n\031k_ESplitScalingFilter_NI"
  "S\020\004*\335\001\n\023ESplitScalingScaler\022!\n\035k_ESplitS"
  "calingScaler_Invalid\020\000\022\036\n\032k_ESplitScalin"
  "gScaler_Auto\020\001\022!\n\035k_ESplitScalingScaler_"
  "Integer\020\002\022\035\n\031k_ESplitScalingScaler_Fit\020\003"
  "\022\036\n\032k_ESplitScalingScaler_Fill\020\004\022!\n\035k_ES"
  "plitScalingScaler_Stretch\020\005*\201\001\n\023EHDRTone"
  "MapOperator\022!\n\035k_EHDRToneMapOperator_Inv"
  "alid\020\000\022#\n\037k_EHDRToneMapOperator_Uncharte"
  "d\020\001\022\"\n\036k_EHDRToneMapOperator_Reinhard\020\002*"
  "|\n\014ECPUGovernor\022\032\n\026k_ECPUGovernor_Invali"
  "d\020\000\022\027\n\023k_ECPUGovernor_Perf\020\001\022\034\n\030k_ECPUGo"
  "vernor_Powersave\020\002\022\031\n\025k_ECPUGovernor_Man"
  "ual\020\003*\342\001\n\014EUpdaterType\022\032\n\026k_EUpdaterType"
  "_Invalid\020\000\022\031\n\025k_EUpdaterType_Client\020\001\022\025\n"
  "\021k_EUpdaterType_OS\020\002\022\027\n\023k_EUpdaterType_B"
  "IOS\020\003\022\035\n\031k_EUpdaterType_Aggregated\020\004\022\030\n\024"
  "k_EUpdaterType_Test1\020\005\022\030\n\024k_EUpdaterType"
  "_Test2\020\006\022\030\n\024k_EUpdaterType_Dummy\020\007*\371\001\n\rE"
  "UpdaterState\022\033\n\027k_EUpdaterState_Invalid\020"
  "\000\022\034\n\030k_EUpdaterState_UpToDate\020\002\022\034\n\030k_EUp"
  "daterState_Checking\020\003\022\035\n\031k_EUpdaterState"
  "_Available\020\004\022\034\n\030k_EUpdaterState_Applying"
  "\020\005\022(\n$k_EUpdaterState_ClientRestartPendi"
  "ng\020\006\022(\n$k_EUpdaterState_SystemRestartPen"
  "ding\020\007*\341\001\n\030EStorageBlockContentType\022&\n\"k"
  "_EStorageBlockContentType_Invalid\020\000\022&\n\"k"
  "_EStorageBlockContentType_Unknown\020\001\022)\n%k"
  "_EStorageBlockContentType_FileSystem\020\002\022%"
  "\n!k_EStorageBlockContentType_Crypto\020\003\022#\n"
  "\037k_EStorageBlockContentType_Raid\020\004*\303\001\n\033E"
  "StorageBlockFileSystemType\022)\n%k_EStorage"
  "BlockFileSystemType_Invalid\020\000\022)\n%k_EStor"
  "ageBlockFileSystemType_Unknown\020\001\022&\n\"k_ES"
  "torageBlockFileSystemType_VFat\020\002\022&\n\"k_ES"
  "torageBlockFileSystemType_Ext4\020\003*\320\001\n\026ESt"
  "orageDriveMediaType\022$\n k_EStorageDriveMe"
  "diaType_Invalid\020\000\022$\n k_EStorageDriveMedi"
  "aType_Unknown\020\001\022 \n\034k_EStorageDriveMediaT"
  "ype_HDD\020\002\022 \n\034k_EStorageDriveMediaType_SS"
  "D\020\003\022&\n\"k_EStorageDriveMediaType_Removabl"
  "e\020\004*\263\001\n\037ESystemDisplayCompatibilityMode\022"
  "-\n)k_ESystemDisplayCompatibilityMode_Inv"
  "alid\020\000\022*\n&k_ESystemDisplayCompatibilityM"
  "ode_None\020\001\0225\n1k_ESystemDisplayCompatibil"
  "ityMode_MinimalBandwith\020\002*\343\001\n\037ESteamDeck"
  "CompatibilityCategory\022-\n)k_ESteamDeckCom"
  "patibilityCategory_Unknown\020\000\0221\n-k_ESteam"
  "DeckCompatibilityCategory_Unsupported\020\001\022"
  ".\n*k_ESteamDeckCompatibilityCategory_Pla"
  "yable\020\002\022.\n*k_ESteamDeckCompatibilityCate"
  "gory_Verified\020\003*\320\002\n(ESteamDeckCompatibil"
  "ityResultDisplayType\0228\n4k_ESteamDeckComp"
  "atibilityResultDisplayType_Invisible\020\000\022<"
  "\n8k_ESteamDeckCompatibilityResultDisplay"
  "Type_Informational\020\001\022:\n6k_ESteamDeckComp"
  "atibilityResultDisplayType_Unsupported\020\002"
  "\0227\n3k_ESteamDeckCompatibilityResultDispl"
  "ayType_Playable\020\003\0227\n3k_ESteamDeckCompati"
  "bilityResultDisplayType_Verified\020\004*w\n\010EA"
  "CState\022\026\n\022k_EACState_Unknown\020\000\022\033\n\027k_EACS"
  "tate_Disconnected\020\001\022\030\n\024k_EACState_Connec"
  "ted\020\002\022\034\n\030k_EACState_ConnectedSlow\020\003*\205\001\n\r"
  "EBatteryState\022\033\n\027k_EBatteryState_Unknown"
  "\020\000\022\037\n\033k_EBatteryState_Discharging\020\001\022\034\n\030k"
  "_EBatteryState_Charging\020\002\022\030\n\024k_EBatteryS"
  "tate_Full\020\003*\303\001\n\tEOSBranch\022\027\n\023k_EOSBranch"
  "_Unknown\020\000\022\027\n\023k_EOSBranch_Release\020\001\022 \n\034k"
  "_EOSBranch_ReleaseCandidate\020\002\022\024\n\020k_EOSBr"
  "anch_Beta\020\003\022\035\n\031k_EOSBranch_BetaCandidate"
  "\020\004\022\024\n\020k_EOSBranch_Main\020\005\022\027\n\023k_EOSBranch_"
  "Staging\020\006*\335\005\n\023ECommunityItemClass\022!\n\035k_E"
  "CommunityItemClass_Invalid\020\000\022\037\n\033k_ECommu"
  "nityItemClass_Badge\020\001\022\"\n\036k_ECommunityIte"
  "mClass_GameCard\020\002\022+\n\'k_ECommunityItemCla"
  "ss_ProfileBackground\020\003\022\"\n\036k_ECommunityIt"
  "emClass_Emoticon\020\004\022%\n!k_ECommunityItemCl"
  "ass_BoosterPack\020\005\022$\n k_ECommunityItemCla"
  "ss_Consumable\020\006\022!\n\035k_ECommunityItemClass"
  "_GameGoo\020\007\022)\n%k_ECommunityItemClass_Prof"
  "ileModifier\020\010\022\037\n\033k_ECommunityItemClass_S"
  "cene\020\t\022$\n k_ECommunityItemClass_SalienIt"
  "em\020\n\022!\n\035k_ECommunityItemClass_Sticker\020\013\022"
  "$\n k_ECommunityItemClass_ChatEffect\020\014\022/\n"
  "+k_ECommunityItemClass_MiniProfileBackgr"
  "ound\020\r\022%\n!k_ECommunityItemClass_AvatarFr"
  "ame\020\016\022(\n$k_ECommunityItemClass_AnimatedA"
  "vatar\020\017\022/\n+k_ECommunityItemClass_SteamDe"
  "ckKeyboardSkin\020\020\022/\n+k_ECommunityItemClas"
  "s_SteamDeckStartupMovie\020\021*\331\001\n\037ESteamDeck"
  "CompatibilityFeedback\022+\n\'k_ESteamDeckCom"
  "patibilityFeedback_Unset\020\000\022+\n\'k_ESteamDe"
  "ckCompatibilityFeedback_Agree\020\001\022.\n*k_ESt"
  "eamDeckCompatibilityFeedback_Disagree\020\002\022"
  ",\n(k_ESteamDeckCompatibilityFeedback_Ign"
  "ore\020\003*\237\001\n\036EProvideDeckFeedbackPreference"
  "\022*\n&k_EProvideDeckFeedbackPreference_Uns"
  "et\020\000\022(\n$k_EProvideDeckFeedbackPreference"
  "_Yes\020\001\022\'\n#k_EProvideDeckFeedbackPreferen"
  "ce_No\020\002*\261\003\n\rETouchGesture\022\027\n\023k_ETouchGes"
  "tureNone\020\000\022\030\n\024k_ETouchGestureTouch\020\001\022\026\n\022"
  "k_ETouchGestureTap\020\002\022\034\n\030k_ETouchGestureD"
  "oubleTap\020\003\022\035\n\031k_ETouchGestureShortPress\020"
  "\004\022\034\n\030k_ETouchGestureLongPress\020\005\022\032\n\026k_ETo"
  "uchGestureLongTap\020\006\022\037\n\033k_ETouchGestureTw"
  "oFingerTap\020\007\022\037\n\033k_ETouchGestureTapCancel"
  "led\020\010\022\035\n\031k_ETouchGesturePinchBegin\020\t\022\036\n\032"
  "k_ETouchGesturePinchUpdate\020\n\022\033\n\027k_ETouch"
  "GesturePinchEnd\020\013\022\035\n\031k_ETouchGestureFlin"
  "gStart\020\014\022!\n\035k_ETouchGestureFlingCancelle"
  "d\020\r*\214\001\n\023ESessionPersistence\022*\n\035k_ESessio"
  "nPersistence_Invalid\020\377\377\377\377\377\377\377\377\377\001\022#\n\037k_ESe"
  "ssionPersistence_Ephemeral\020\000\022$\n k_ESessi"
  "onPersistence_Persistent\020\001*\331\001\n\032ENewSteam"
  "AnnouncementState\022(\n$k_ENewSteamAnnounce"
  "mentState_Invalid\020\000\022(\n$k_ENewSteamAnnoun"
  "cementState_AllRead\020\001\0220\n,k_ENewSteamAnno"
  "uncementState_NewAnnouncement\020\002\0225\n1k_ENe"
  "wSteamAnnouncementState_FeaturedAnnounce"
  "ment\020\003*\213\007\n\022ECommentThreadType\022\037\n\033k_EComm"
  "entThreadTypeInvalid\020\000\022-\n)k_ECommentThre"
  "adTypeScreenshot_Deprecated\020\001\0221\n-k_EComm"
  "entThreadTypeWorkshopAccount_Developer\020\002"
  "\022.\n*k_ECommentThreadTypeWorkshopAccount_"
  "Public\020\003\022/\n+k_ECommentThreadTypePublishe"
  "dFile_Developer\020\004\022,\n(k_ECommentThreadTyp"
  "ePublishedFile_Public\020\005\022\034\n\030k_ECommentThr"
  "eadTypeTest\020\006\022\"\n\036k_ECommentThreadTypeFor"
  "umTopic\020\007\022&\n\"k_ECommentThreadTypeRecomme"
  "ndation\020\010\022(\n$k_ECommentThreadTypeVideo_D"
  "eprecated\020\t\022\037\n\033k_ECommentThreadTypeProfi"
  "le\020\n\022 \n\034k_ECommentThreadTypeNewsPost\020\013\022\034"
  "\n\030k_ECommentThreadTypeClan\020\014\022(\n$k_EComme"
  "ntThreadTypeClanAnnouncement\020\r\022!\n\035k_ECom"
  "mentThreadTypeClanEvent\020\016\022+\n\'k_ECommentT"
  "hreadTypeUserStatusPublished\020\017\022+\n\'k_ECom"
  "mentThreadTypeUserReceivedNewGame\020\020\0222\n.k"
  "_ECommentThreadTypePublishedFile_Announc"
  "ement\020\021\022(\n$k_ECommentThreadTypeModerator"
  "Message\020\022\022&\n\"k_ECommentThreadTypeClanCur"
  "atedApp\020\023\022$\n k_ECommentThreadTypeQAndASe"
  "ssion\020\024\022\033\n\027k_ECommentThreadTypeMax\020\025*\327\001\n"
  "\024EBroadcastPermission\022\"\n\036k_EBroadcastPer"
  "missionDisabled\020\000\022(\n$k_EBroadcastPermiss"
  "ionFriendsApprove\020\001\022(\n$k_EBroadcastPermi"
  "ssionFriendsAllowed\020\002\022 \n\034k_EBroadcastPer"
  "missionPublic\020\003\022%\n!k_EBroadcastPermissio"
  "nSubscribers\020\004*f\n\030EBroadcastEncoderSetti"
  "ng\022\"\n\036k_EBroadcastEncoderBestQuality\020\000\022&"
  "\n\"k_EBroadcastEncoderBestPerformance\020\001*y"
  "\n\024ECloudGamingPlatform\022\036\n\032k_ECloudGaming"
  "PlatformNone\020\000\022\037\n\033k_ECloudGamingPlatform"
  "Valve\020\001\022 \n\034k_ECloudGamingPlatformNVIDIA\020"
  "\002B\tH\001\200\001\001\200\265\030\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enums_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enums_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enums_2eproto = {
  false, false, 12732, descriptor_table_protodef_enums_2eproto, "enums.proto", 
  &descriptor_table_enums_2eproto_once, descriptor_table_enums_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_enums_2eproto::offsets,
  nullptr, file_level_enum_descriptors_enums_2eproto, file_level_service_descriptors_enums_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_enums_2eproto_getter() {
  return &descriptor_table_enums_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_enums_2eproto(&descriptor_table_enums_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileQueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[0];
}
bool EPublishedFileQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[1];
}
bool EPublishedFileInappropriateProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileInappropriateResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[2];
}
bool EPublishedFileInappropriateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPersonaStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[3];
}
bool EPersonaStateFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentCheckProvider_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[4];
}
bool EContentCheckProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[5];
}
bool EProfileCustomizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileStorageSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[6];
}
bool EPublishedFileStorageSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudStoragePersistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[7];
}
bool ECloudStoragePersistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESDCardFormatStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[8];
}
bool ESDCardFormatStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemFanControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[9];
}
bool ESystemFanControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBluetoothDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[10];
}
bool EBluetoothDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[11];
}
bool ESystemAudioDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[12];
}
bool ESystemAudioChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[13];
}
bool ESystemAudioPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemAudioPortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[14];
}
bool ESystemAudioPortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[15];
}
bool ESystemServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGraphicsPerfOverlayLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[16];
}
bool EGraphicsPerfOverlayLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGPUPerformanceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[17];
}
bool EGPUPerformanceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[18];
}
bool EScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[19];
}
bool ESplitScalingFilter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScalingScaler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[20];
}
bool ESplitScalingScaler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHDRToneMapOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[21];
}
bool EHDRToneMapOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECPUGovernor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[22];
}
bool ECPUGovernor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[23];
}
bool EUpdaterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUpdaterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[24];
}
bool EUpdaterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[25];
}
bool EStorageBlockContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageBlockFileSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[26];
}
bool EStorageBlockFileSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStorageDriveMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[27];
}
bool EStorageDriveMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemDisplayCompatibilityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[28];
}
bool ESystemDisplayCompatibilityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[29];
}
bool ESteamDeckCompatibilityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityResultDisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[30];
}
bool ESteamDeckCompatibilityResultDisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EACState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[31];
}
bool EACState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBatteryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[32];
}
bool EBatteryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOSBranch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[33];
}
bool EOSBranch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[34];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckCompatibilityFeedback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[35];
}
bool ESteamDeckCompatibilityFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProvideDeckFeedbackPreference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[36];
}
bool EProvideDeckFeedbackPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[37];
}
bool ETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESessionPersistence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[38];
}
bool ESessionPersistence_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENewSteamAnnouncementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[39];
}
bool ENewSteamAnnouncementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommentThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[40];
}
bool ECommentThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[41];
}
bool EBroadcastPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastEncoderSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[42];
}
bool EBroadcastEncoderSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudGamingPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2eproto);
  return file_level_enum_descriptors_enums_2eproto[43];
}
bool ECloudGamingPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
