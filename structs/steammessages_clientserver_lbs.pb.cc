// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_lbs.proto

#include "steammessages_clientserver_lbs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientLBSSetScore::CMsgClientLBSSetScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , leaderboard_id_(0)
  , score_(0)
  , upload_score_method_(0){}
struct CMsgClientLBSSetScoreDefaultTypeInternal {
  constexpr CMsgClientLBSSetScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSSetScoreDefaultTypeInternal() {}
  union {
    CMsgClientLBSSetScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSSetScoreDefaultTypeInternal _CMsgClientLBSSetScore_default_instance_;
constexpr CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaderboard_entry_count_(0)
  , score_changed_(false)
  , global_rank_previous_(0)
  , global_rank_new_(0)
  , eresult_(2){}
struct CMsgClientLBSSetScoreResponseDefaultTypeInternal {
  constexpr CMsgClientLBSSetScoreResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSSetScoreResponseDefaultTypeInternal() {}
  union {
    CMsgClientLBSSetScoreResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSSetScoreResponseDefaultTypeInternal _CMsgClientLBSSetScoreResponse_default_instance_;
constexpr CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , leaderboard_id_(0)
  , ugc_id_(uint64_t{0u}){}
struct CMsgClientLBSSetUGCDefaultTypeInternal {
  constexpr CMsgClientLBSSetUGCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSSetUGCDefaultTypeInternal() {}
  union {
    CMsgClientLBSSetUGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSSetUGCDefaultTypeInternal _CMsgClientLBSSetUGC_default_instance_;
constexpr CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgClientLBSSetUGCResponseDefaultTypeInternal {
  constexpr CMsgClientLBSSetUGCResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSSetUGCResponseDefaultTypeInternal() {}
  union {
    CMsgClientLBSSetUGCResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSSetUGCResponseDefaultTypeInternal _CMsgClientLBSSetUGCResponse_default_instance_;
constexpr CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaderboard_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , leaderboard_sort_method_(0)
  , leaderboard_display_type_(0)
  , create_if_not_found_(false){}
struct CMsgClientLBSFindOrCreateLBDefaultTypeInternal {
  constexpr CMsgClientLBSFindOrCreateLBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSFindOrCreateLBDefaultTypeInternal() {}
  union {
    CMsgClientLBSFindOrCreateLB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSFindOrCreateLBDefaultTypeInternal _CMsgClientLBSFindOrCreateLB_default_instance_;
constexpr CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leaderboard_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leaderboard_id_(0)
  , leaderboard_entry_count_(0)
  , leaderboard_sort_method_(0)
  , leaderboard_display_type_(0)
  , eresult_(2){}
struct CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal {
  constexpr CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal() {}
  union {
    CMsgClientLBSFindOrCreateLBResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSFindOrCreateLBResponseDefaultTypeInternal _CMsgClientLBSFindOrCreateLBResponse_default_instance_;
constexpr CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamids_()
  , app_id_(0)
  , leaderboard_id_(0)
  , range_start_(0)
  , range_end_(0)
  , leaderboard_data_request_(0){}
struct CMsgClientLBSGetLBEntriesDefaultTypeInternal {
  constexpr CMsgClientLBSGetLBEntriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSGetLBEntriesDefaultTypeInternal() {}
  union {
    CMsgClientLBSGetLBEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSGetLBEntriesDefaultTypeInternal _CMsgClientLBSGetLBEntries_default_instance_;
constexpr CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_user_(uint64_t{0u})
  , global_rank_(0)
  , score_(0)
  , ugc_id_(uint64_t{0u}){}
struct CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal {
  constexpr CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal() {}
  union {
    CMsgClientLBSGetLBEntriesResponse_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSGetLBEntriesResponse_EntryDefaultTypeInternal _CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_;
constexpr CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , leaderboard_entry_count_(0)
  , eresult_(2){}
struct CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal {
  constexpr CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal() {}
  union {
    CMsgClientLBSGetLBEntriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLBSGetLBEntriesResponseDefaultTypeInternal _CMsgClientLBSGetLBEntriesResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5flbs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5flbs_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5flbs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, details_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScore, upload_score_method_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, score_changed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, global_rank_previous_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetScoreResponse, global_rank_new_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGC, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGC, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGC, ugc_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGCResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSSetUGCResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, leaderboard_sort_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, leaderboard_display_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, create_if_not_found_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLB, leaderboard_name_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, leaderboard_sort_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, leaderboard_display_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSFindOrCreateLBResponse, leaderboard_name_),
  5,
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, leaderboard_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, range_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, range_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, leaderboard_data_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntries, steamids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, steam_id_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, global_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, details_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse_Entry, ugc_id_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse, leaderboard_entry_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLBSGetLBEntriesResponse, entries_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CMsgClientLBSSetScore)},
  { 16, 27, -1, sizeof(::CMsgClientLBSSetScoreResponse)},
  { 32, 41, -1, sizeof(::CMsgClientLBSSetUGC)},
  { 44, 51, -1, sizeof(::CMsgClientLBSSetUGCResponse)},
  { 52, 63, -1, sizeof(::CMsgClientLBSFindOrCreateLB)},
  { 68, 80, -1, sizeof(::CMsgClientLBSFindOrCreateLBResponse)},
  { 86, 98, -1, sizeof(::CMsgClientLBSGetLBEntries)},
  { 104, 115, -1, sizeof(::CMsgClientLBSGetLBEntriesResponse_Entry)},
  { 120, 129, -1, sizeof(::CMsgClientLBSGetLBEntriesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSSetScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSSetScoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSSetUGC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSSetUGCResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSFindOrCreateLB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSFindOrCreateLBResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSGetLBEntries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSGetLBEntriesResponse_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLBSGetLBEntriesResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5flbs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_clientserver_lbs.proto\032\030"
  "steammessages_base.proto\"|\n\025CMsgClientLB"
  "SSetScore\022\016\n\006app_id\030\001 \001(\r\022\026\n\016leaderboard"
  "_id\030\002 \001(\005\022\r\n\005score\030\003 \001(\005\022\017\n\007details\030\004 \001("
  "\014\022\033\n\023upload_score_method\030\005 \001(\005\"\242\001\n\035CMsgC"
  "lientLBSSetScoreResponse\022\022\n\007eresult\030\001 \001("
  "\005:\0012\022\037\n\027leaderboard_entry_count\030\002 \001(\005\022\025\n"
  "\rscore_changed\030\003 \001(\010\022\034\n\024global_rank_prev"
  "ious\030\004 \001(\005\022\027\n\017global_rank_new\030\005 \001(\005\"M\n\023C"
  "MsgClientLBSSetUGC\022\016\n\006app_id\030\001 \001(\r\022\026\n\016le"
  "aderboard_id\030\002 \001(\005\022\016\n\006ugc_id\030\003 \001(\006\"1\n\033CM"
  "sgClientLBSSetUGCResponse\022\022\n\007eresult\030\001 \001"
  "(\005:\0012\"\247\001\n\033CMsgClientLBSFindOrCreateLB\022\016\n"
  "\006app_id\030\001 \001(\r\022\037\n\027leaderboard_sort_method"
  "\030\002 \001(\005\022 \n\030leaderboard_display_type\030\003 \001(\005"
  "\022\033\n\023create_if_not_found\030\004 \001(\010\022\030\n\020leaderb"
  "oard_name\030\005 \001(\t\"\325\001\n#CMsgClientLBSFindOrC"
  "reateLBResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n\016l"
  "eaderboard_id\030\002 \001(\005\022\037\n\027leaderboard_entry"
  "_count\030\003 \001(\005\022\"\n\027leaderboard_sort_method\030"
  "\004 \001(\005:\0010\022#\n\030leaderboard_display_type\030\005 \001"
  "(\005:\0010\022\030\n\020leaderboard_name\030\006 \001(\t\"\237\001\n\031CMsg"
  "ClientLBSGetLBEntries\022\016\n\006app_id\030\001 \001(\005\022\026\n"
  "\016leaderboard_id\030\002 \001(\005\022\023\n\013range_start\030\003 \001"
  "(\005\022\021\n\trange_end\030\004 \001(\005\022 \n\030leaderboard_dat"
  "a_request\030\005 \001(\005\022\020\n\010steamids\030\006 \003(\006\"\370\001\n!CM"
  "sgClientLBSGetLBEntriesResponse\022\022\n\007eresu"
  "lt\030\001 \001(\005:\0012\022\037\n\027leaderboard_entry_count\030\002"
  " \001(\005\0229\n\007entries\030\003 \003(\0132(.CMsgClientLBSGet"
  "LBEntriesResponse.Entry\032c\n\005Entry\022\025\n\rstea"
  "m_id_user\030\001 \001(\006\022\023\n\013global_rank\030\002 \001(\005\022\r\n\005"
  "score\030\003 \001(\005\022\017\n\007details\030\004 \001(\014\022\016\n\006ugc_id\030\005"
  " \001(\006B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5flbs_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5flbs_2eproto = {
  false, false, 1291, descriptor_table_protodef_steammessages_5fclientserver_5flbs_2eproto, "steammessages_clientserver_lbs.proto", 
  &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once, descriptor_table_steammessages_5fclientserver_5flbs_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5flbs_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5flbs_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5flbs_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5flbs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5flbs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5flbs_2eproto(&descriptor_table_steammessages_5fclientserver_5flbs_2eproto);

// ===================================================================

class CMsgClientLBSSetScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSSetScore>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaderboard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_score_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientLBSSetScore::CMsgClientLBSSetScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSSetScore)
}
CMsgClientLBSSetScore::CMsgClientLBSSetScore(const CMsgClientLBSSetScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_score_method_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSSetScore)
}

inline void CMsgClientLBSSetScore::SharedCtor() {
details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_score_method_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
}

CMsgClientLBSSetScore::~CMsgClientLBSSetScore() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSSetScore)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSSetScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSSetScore::ArenaDtor(void* object) {
  CMsgClientLBSSetScore* _this = reinterpret_cast< CMsgClientLBSSetScore* >(object);
  (void)_this;
}
void CMsgClientLBSSetScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSSetScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSSetScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    details_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_score_method_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(upload_score_method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSSetScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_id(&has_bits);
          leaderboard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 upload_score_method = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_upload_score_method(&has_bits);
          upload_score_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSSetScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSSetScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_id(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_details(), target);
  }

  // optional int32 upload_score_method = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_upload_score_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSSetScore)
  return target;
}

size_t CMsgClientLBSSetScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSSetScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_id());
    }

    // optional int32 score = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

    // optional int32 upload_score_method = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_upload_score_method());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSSetScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSSetScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSSetScore::GetClassData() const { return &_class_data_; }

void CMsgClientLBSSetScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSSetScore *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSSetScore &>(from));
}


void CMsgClientLBSSetScore::MergeFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_score_method_ = from.upload_score_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSSetScore::CopyFrom(const CMsgClientLBSSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScore::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScore::InternalSwap(CMsgClientLBSSetScore* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &details_, lhs_arena,
      &other->details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetScore, upload_score_method_)
      + sizeof(CMsgClientLBSSetScore::upload_score_method_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetScore, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSSetScore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[0]);
}

// ===================================================================

class CMsgClientLBSSetScoreResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSSetScoreResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leaderboard_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_rank_previous(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_global_rank_new(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSSetScoreResponse)
}
CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(const CMsgClientLBSSetScoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSSetScoreResponse)
}

inline void CMsgClientLBSSetScoreResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leaderboard_entry_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&global_rank_new_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(global_rank_new_));
eresult_ = 2;
}

CMsgClientLBSSetScoreResponse::~CMsgClientLBSSetScoreResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSSetScoreResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSSetScoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLBSSetScoreResponse::ArenaDtor(void* object) {
  CMsgClientLBSSetScoreResponse* _this = reinterpret_cast< CMsgClientLBSSetScoreResponse* >(object);
  (void)_this;
}
void CMsgClientLBSSetScoreResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSSetScoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSSetScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSSetScoreResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&leaderboard_entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_rank_new_) -
        reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(global_rank_new_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSSetScoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_entry_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_entry_count(&has_bits);
          leaderboard_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool score_changed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_score_changed(&has_bits);
          score_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 global_rank_previous = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_global_rank_previous(&has_bits);
          global_rank_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 global_rank_new = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_global_rank_new(&has_bits);
          global_rank_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSSetScoreResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSSetScoreResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_entry_count(), target);
  }

  // optional bool score_changed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_score_changed(), target);
  }

  // optional int32 global_rank_previous = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_global_rank_previous(), target);
  }

  // optional int32 global_rank_new = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_global_rank_new(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSSetScoreResponse)
  return target;
}

size_t CMsgClientLBSSetScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSSetScoreResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 leaderboard_entry_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_entry_count());
    }

    // optional bool score_changed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 global_rank_previous = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_global_rank_previous());
    }

    // optional int32 global_rank_new = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_global_rank_new());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSSetScoreResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSSetScoreResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSSetScoreResponse::GetClassData() const { return &_class_data_; }

void CMsgClientLBSSetScoreResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSSetScoreResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSSetScoreResponse &>(from));
}


void CMsgClientLBSSetScoreResponse::MergeFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSSetScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_changed_ = from.score_changed_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_previous_ = from.global_rank_previous_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_rank_new_ = from.global_rank_new_;
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const CMsgClientLBSSetScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSSetScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScoreResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetScoreResponse::InternalSwap(CMsgClientLBSSetScoreResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, global_rank_new_)
      + sizeof(CMsgClientLBSSetScoreResponse::global_rank_new_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetScoreResponse, leaderboard_entry_count_)>(
          reinterpret_cast<char*>(&leaderboard_entry_count_),
          reinterpret_cast<char*>(&other->leaderboard_entry_count_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSSetScoreResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[1]);
}

// ===================================================================

class CMsgClientLBSSetUGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSSetUGC>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaderboard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ugc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSSetUGC)
}
CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(const CMsgClientLBSSetUGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSSetUGC)
}

inline void CMsgClientLBSSetUGC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
}

CMsgClientLBSSetUGC::~CMsgClientLBSSetUGC() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSSetUGC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSSetUGC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLBSSetUGC::ArenaDtor(void* object) {
  CMsgClientLBSSetUGC* _this = reinterpret_cast< CMsgClientLBSSetUGC* >(object);
  (void)_this;
}
void CMsgClientLBSSetUGC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSSetUGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSSetUGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSSetUGC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugc_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSSetUGC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_id(&has_bits);
          leaderboard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ugc_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_ugc_id(&has_bits);
          ugc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSSetUGC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSSetUGC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_id(), target);
  }

  // optional fixed64 ugc_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_ugc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSSetUGC)
  return target;
}

size_t CMsgClientLBSSetUGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSSetUGC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_id());
    }

    // optional fixed64 ugc_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSSetUGC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSSetUGC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSSetUGC::GetClassData() const { return &_class_data_; }

void CMsgClientLBSSetUGC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSSetUGC *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSSetUGC &>(from));
}


void CMsgClientLBSSetUGC::MergeFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSSetUGC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSSetUGC::CopyFrom(const CMsgClientLBSSetUGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSSetUGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGC::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGC::InternalSwap(CMsgClientLBSSetUGC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetUGC, ugc_id_)
      + sizeof(CMsgClientLBSSetUGC::ugc_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSSetUGC, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSSetUGC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[2]);
}

// ===================================================================

class CMsgClientLBSSetUGCResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSSetUGCResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSSetUGCResponse)
}
CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(const CMsgClientLBSSetUGCResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSSetUGCResponse)
}

inline void CMsgClientLBSSetUGCResponse::SharedCtor() {
eresult_ = 2;
}

CMsgClientLBSSetUGCResponse::~CMsgClientLBSSetUGCResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSSetUGCResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSSetUGCResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLBSSetUGCResponse::ArenaDtor(void* object) {
  CMsgClientLBSSetUGCResponse* _this = reinterpret_cast< CMsgClientLBSSetUGCResponse* >(object);
  (void)_this;
}
void CMsgClientLBSSetUGCResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSSetUGCResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSSetUGCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSSetUGCResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSSetUGCResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSSetUGCResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSSetUGCResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSSetUGCResponse)
  return target;
}

size_t CMsgClientLBSSetUGCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSSetUGCResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSSetUGCResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSSetUGCResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSSetUGCResponse::GetClassData() const { return &_class_data_; }

void CMsgClientLBSSetUGCResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSSetUGCResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSSetUGCResponse &>(from));
}


void CMsgClientLBSSetUGCResponse::MergeFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSSetUGCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const CMsgClientLBSSetUGCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSSetUGCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGCResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSSetUGCResponse::InternalSwap(CMsgClientLBSSetUGCResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSSetUGCResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[3]);
}

// ===================================================================

class CMsgClientLBSFindOrCreateLB::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSFindOrCreateLB>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaderboard_sort_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leaderboard_display_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_create_if_not_found(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leaderboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSFindOrCreateLB)
}
CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(const CMsgClientLBSFindOrCreateLB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leaderboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leaderboard_name()) {
    leaderboard_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_if_not_found_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSFindOrCreateLB)
}

inline void CMsgClientLBSFindOrCreateLB::SharedCtor() {
leaderboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leaderboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_if_not_found_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
}

CMsgClientLBSFindOrCreateLB::~CMsgClientLBSFindOrCreateLB() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSFindOrCreateLB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSFindOrCreateLB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leaderboard_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLB::ArenaDtor(void* object) {
  CMsgClientLBSFindOrCreateLB* _this = reinterpret_cast< CMsgClientLBSFindOrCreateLB* >(object);
  (void)_this;
}
void CMsgClientLBSFindOrCreateLB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSFindOrCreateLB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSFindOrCreateLB::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSFindOrCreateLB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leaderboard_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_if_not_found_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(create_if_not_found_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSFindOrCreateLB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_sort_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_sort_method(&has_bits);
          leaderboard_sort_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_display_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_leaderboard_display_type(&has_bits);
          leaderboard_display_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool create_if_not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_create_if_not_found(&has_bits);
          create_if_not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string leaderboard_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_leaderboard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLBSFindOrCreateLB.leaderboard_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSFindOrCreateLB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSFindOrCreateLB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_leaderboard_display_type(), target);
  }

  // optional bool create_if_not_found = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_create_if_not_found(), target);
  }

  // optional string leaderboard_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderboard_name().data(), static_cast<int>(this->_internal_leaderboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLBSFindOrCreateLB.leaderboard_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_leaderboard_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSFindOrCreateLB)
  return target;
}

size_t CMsgClientLBSFindOrCreateLB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSFindOrCreateLB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string leaderboard_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leaderboard_name());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 leaderboard_sort_method = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_display_type());
    }

    // optional bool create_if_not_found = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSFindOrCreateLB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSFindOrCreateLB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSFindOrCreateLB::GetClassData() const { return &_class_data_; }

void CMsgClientLBSFindOrCreateLB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSFindOrCreateLB *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSFindOrCreateLB &>(from));
}


void CMsgClientLBSFindOrCreateLB::MergeFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSFindOrCreateLB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_leaderboard_name(from._internal_leaderboard_name());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      create_if_not_found_ = from.create_if_not_found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const CMsgClientLBSFindOrCreateLB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSFindOrCreateLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLB::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLB::InternalSwap(CMsgClientLBSFindOrCreateLB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leaderboard_name_, lhs_arena,
      &other->leaderboard_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, create_if_not_found_)
      + sizeof(CMsgClientLBSFindOrCreateLB::create_if_not_found_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSFindOrCreateLB, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSFindOrCreateLB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[4]);
}

// ===================================================================

class CMsgClientLBSFindOrCreateLBResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSFindOrCreateLBResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_leaderboard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaderboard_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leaderboard_sort_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leaderboard_display_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leaderboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSFindOrCreateLBResponse)
}
CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(const CMsgClientLBSFindOrCreateLBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leaderboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leaderboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leaderboard_name()) {
    leaderboard_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaderboard_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&leaderboard_id_, &from.leaderboard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSFindOrCreateLBResponse)
}

inline void CMsgClientLBSFindOrCreateLBResponse::SharedCtor() {
leaderboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leaderboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leaderboard_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leaderboard_display_type_) -
    reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(leaderboard_display_type_));
eresult_ = 2;
}

CMsgClientLBSFindOrCreateLBResponse::~CMsgClientLBSFindOrCreateLBResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSFindOrCreateLBResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSFindOrCreateLBResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  leaderboard_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSFindOrCreateLBResponse::ArenaDtor(void* object) {
  CMsgClientLBSFindOrCreateLBResponse* _this = reinterpret_cast< CMsgClientLBSFindOrCreateLBResponse* >(object);
  (void)_this;
}
void CMsgClientLBSFindOrCreateLBResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSFindOrCreateLBResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSFindOrCreateLBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSFindOrCreateLBResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leaderboard_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&leaderboard_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderboard_display_type_) -
        reinterpret_cast<char*>(&leaderboard_id_)) + sizeof(leaderboard_display_type_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSFindOrCreateLBResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_id(&has_bits);
          leaderboard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_entry_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_leaderboard_entry_count(&has_bits);
          leaderboard_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_sort_method = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_leaderboard_sort_method(&has_bits);
          leaderboard_sort_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_display_type = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_leaderboard_display_type(&has_bits);
          leaderboard_display_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string leaderboard_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_leaderboard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSFindOrCreateLBResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSFindOrCreateLBResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_id(), target);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_leaderboard_entry_count(), target);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_leaderboard_sort_method(), target);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_leaderboard_display_type(), target);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderboard_name().data(), static_cast<int>(this->_internal_leaderboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLBSFindOrCreateLBResponse.leaderboard_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leaderboard_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSFindOrCreateLBResponse)
  return target;
}

size_t CMsgClientLBSFindOrCreateLBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSFindOrCreateLBResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string leaderboard_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leaderboard_name());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_id());
    }

    // optional int32 leaderboard_entry_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_entry_count());
    }

    // optional int32 leaderboard_sort_method = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_display_type());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSFindOrCreateLBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSFindOrCreateLBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSFindOrCreateLBResponse::GetClassData() const { return &_class_data_; }

void CMsgClientLBSFindOrCreateLBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSFindOrCreateLBResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSFindOrCreateLBResponse &>(from));
}


void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSFindOrCreateLBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_leaderboard_name(from._internal_leaderboard_name());
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaderboard_sort_method_ = from.leaderboard_sort_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_display_type_ = from.leaderboard_display_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSFindOrCreateLBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLBResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSFindOrCreateLBResponse::InternalSwap(CMsgClientLBSFindOrCreateLBResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leaderboard_name_, lhs_arena,
      &other->leaderboard_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_display_type_)
      + sizeof(CMsgClientLBSFindOrCreateLBResponse::leaderboard_display_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSFindOrCreateLBResponse, leaderboard_id_)>(
          reinterpret_cast<char*>(&leaderboard_id_),
          reinterpret_cast<char*>(&other->leaderboard_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSFindOrCreateLBResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[5]);
}

// ===================================================================

class CMsgClientLBSGetLBEntries::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSGetLBEntries>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaderboard_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_range_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leaderboard_data_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSGetLBEntries)
}
CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(const CMsgClientLBSGetLBEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderboard_data_request_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSGetLBEntries)
}

inline void CMsgClientLBSGetLBEntries::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leaderboard_data_request_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
}

CMsgClientLBSGetLBEntries::~CMsgClientLBSGetLBEntries() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSGetLBEntries)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSGetLBEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLBSGetLBEntries::ArenaDtor(void* object) {
  CMsgClientLBSGetLBEntries* _this = reinterpret_cast< CMsgClientLBSGetLBEntries* >(object);
  (void)_this;
}
void CMsgClientLBSGetLBEntries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSGetLBEntries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSGetLBEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSGetLBEntries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderboard_data_request_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(leaderboard_data_request_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSGetLBEntries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_id(&has_bits);
          leaderboard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 range_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_range_start(&has_bits);
          range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 range_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_range_end(&has_bits);
          range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_data_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_leaderboard_data_request(&has_bits);
          leaderboard_data_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSGetLBEntries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSGetLBEntries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 leaderboard_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_id(), target);
  }

  // optional int32 range_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_range_start(), target);
  }

  // optional int32 range_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_range_end(), target);
  }

  // optional int32 leaderboard_data_request = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_leaderboard_data_request(), target);
  }

  // repeated fixed64 steamids = 6;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSGetLBEntries)
  return target;
}

size_t CMsgClientLBSGetLBEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSGetLBEntries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_id());
    }

    // optional int32 range_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_range_start());
    }

    // optional int32 range_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_range_end());
    }

    // optional int32 leaderboard_data_request = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_data_request());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSGetLBEntries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSGetLBEntries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSGetLBEntries::GetClassData() const { return &_class_data_; }

void CMsgClientLBSGetLBEntries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSGetLBEntries *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSGetLBEntries &>(from));
}


void CMsgClientLBSGetLBEntries::MergeFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSGetLBEntries)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderboard_id_ = from.leaderboard_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      range_start_ = from.range_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_end_ = from.range_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      leaderboard_data_request_ = from.leaderboard_data_request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSGetLBEntries::CopyFrom(const CMsgClientLBSGetLBEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSGetLBEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntries::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntries::InternalSwap(CMsgClientLBSGetLBEntries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSGetLBEntries, leaderboard_data_request_)
      + sizeof(CMsgClientLBSGetLBEntries::leaderboard_data_request_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSGetLBEntries, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSGetLBEntries::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[6]);
}

// ===================================================================

class CMsgClientLBSGetLBEntriesResponse_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSGetLBEntriesResponse_Entry>()._has_bits_);
  static void set_has_steam_id_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ugc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSGetLBEntriesResponse.Entry)
}
CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(const CMsgClientLBSGetLBEntriesResponse_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steam_id_user_, &from.steam_id_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSGetLBEntriesResponse.Entry)
}

inline void CMsgClientLBSGetLBEntriesResponse_Entry::SharedCtor() {
details_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ugc_id_) -
    reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
}

CMsgClientLBSGetLBEntriesResponse_Entry::~CMsgClientLBSGetLBEntriesResponse_Entry() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSGetLBEntriesResponse.Entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSGetLBEntriesResponse_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  details_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLBSGetLBEntriesResponse_Entry::ArenaDtor(void* object) {
  CMsgClientLBSGetLBEntriesResponse_Entry* _this = reinterpret_cast< CMsgClientLBSGetLBEntriesResponse_Entry* >(object);
  (void)_this;
}
void CMsgClientLBSGetLBEntriesResponse_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSGetLBEntriesResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSGetLBEntriesResponse.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    details_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steam_id_user_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugc_id_) -
        reinterpret_cast<char*>(&steam_id_user_)) + sizeof(ugc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSGetLBEntriesResponse_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id_user(&has_bits);
          steam_id_user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 global_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_global_rank(&has_bits);
          global_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_details();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ugc_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_ugc_id(&has_bits);
          ugc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSGetLBEntriesResponse_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSGetLBEntriesResponse.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id_user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id_user(), target);
  }

  // optional int32 global_rank = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_global_rank(), target);
  }

  // optional int32 score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // optional bytes details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_details(), target);
  }

  // optional fixed64 ugc_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_ugc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSGetLBEntriesResponse.Entry)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSGetLBEntriesResponse.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional fixed64 steam_id_user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 global_rank = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_global_rank());
    }

    // optional int32 score = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

    // optional fixed64 ugc_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSGetLBEntriesResponse_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSGetLBEntriesResponse_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSGetLBEntriesResponse_Entry::GetClassData() const { return &_class_data_; }

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSGetLBEntriesResponse_Entry *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSGetLBEntriesResponse_Entry &>(from));
}


void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSGetLBEntriesResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_user_ = from.steam_id_user_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_ = from.global_rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      ugc_id_ = from.ugc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSGetLBEntriesResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::InternalSwap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &details_, lhs_arena,
      &other->details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, ugc_id_)
      + sizeof(CMsgClientLBSGetLBEntriesResponse_Entry::ugc_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLBSGetLBEntriesResponse_Entry, steam_id_user_)>(
          reinterpret_cast<char*>(&steam_id_user_),
          reinterpret_cast<char*>(&other->steam_id_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSGetLBEntriesResponse_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[7]);
}

// ===================================================================

class CMsgClientLBSGetLBEntriesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLBSGetLBEntriesResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaderboard_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientLBSGetLBEntriesResponse)
}
CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(const CMsgClientLBSGetLBEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leaderboard_entry_count_, &from.leaderboard_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&leaderboard_entry_count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLBSGetLBEntriesResponse)
}

inline void CMsgClientLBSGetLBEntriesResponse::SharedCtor() {
leaderboard_entry_count_ = 0;
eresult_ = 2;
}

CMsgClientLBSGetLBEntriesResponse::~CMsgClientLBSGetLBEntriesResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLBSGetLBEntriesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientLBSGetLBEntriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLBSGetLBEntriesResponse::ArenaDtor(void* object) {
  CMsgClientLBSGetLBEntriesResponse* _this = reinterpret_cast< CMsgClientLBSGetLBEntriesResponse* >(object);
  (void)_this;
}
void CMsgClientLBSGetLBEntriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLBSGetLBEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLBSGetLBEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLBSGetLBEntriesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    leaderboard_entry_count_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLBSGetLBEntriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 leaderboard_entry_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leaderboard_entry_count(&has_bits);
          leaderboard_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLBSGetLBEntriesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLBSGetLBEntriesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderboard_entry_count(), target);
  }

  // repeated .CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLBSGetLBEntriesResponse)
  return target;
}

size_t CMsgClientLBSGetLBEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLBSGetLBEntriesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 leaderboard_entry_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leaderboard_entry_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLBSGetLBEntriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientLBSGetLBEntriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLBSGetLBEntriesResponse::GetClassData() const { return &_class_data_; }

void CMsgClientLBSGetLBEntriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientLBSGetLBEntriesResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientLBSGetLBEntriesResponse &>(from));
}


void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLBSGetLBEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      leaderboard_entry_count_ = from.leaderboard_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLBSGetLBEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse::IsInitialized() const {
  return true;
}

void CMsgClientLBSGetLBEntriesResponse::InternalSwap(CMsgClientLBSGetLBEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLBSGetLBEntriesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flbs_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flbs_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientLBSSetScore* Arena::CreateMaybeMessage< ::CMsgClientLBSSetScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSSetScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSSetScoreResponse* Arena::CreateMaybeMessage< ::CMsgClientLBSSetScoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSSetScoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSSetUGC* Arena::CreateMaybeMessage< ::CMsgClientLBSSetUGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSSetUGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSSetUGCResponse* Arena::CreateMaybeMessage< ::CMsgClientLBSSetUGCResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSSetUGCResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSFindOrCreateLB* Arena::CreateMaybeMessage< ::CMsgClientLBSFindOrCreateLB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSFindOrCreateLB >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSFindOrCreateLBResponse* Arena::CreateMaybeMessage< ::CMsgClientLBSFindOrCreateLBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSFindOrCreateLBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSGetLBEntries* Arena::CreateMaybeMessage< ::CMsgClientLBSGetLBEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSGetLBEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSGetLBEntriesResponse_Entry* Arena::CreateMaybeMessage< ::CMsgClientLBSGetLBEntriesResponse_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSGetLBEntriesResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLBSGetLBEntriesResponse* Arena::CreateMaybeMessage< ::CMsgClientLBSGetLBEntriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLBSGetLBEntriesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
