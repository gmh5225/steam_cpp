// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "enums_productinfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[91]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto;
class CPublishedFile_AddAppRelationship_Request;
struct CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal;
extern CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal _CPublishedFile_AddAppRelationship_Request_default_instance_;
class CPublishedFile_AddAppRelationship_Response;
struct CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal;
extern CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal _CPublishedFile_AddAppRelationship_Response_default_instance_;
class CPublishedFile_AddChild_Request;
struct CPublishedFile_AddChild_RequestDefaultTypeInternal;
extern CPublishedFile_AddChild_RequestDefaultTypeInternal _CPublishedFile_AddChild_Request_default_instance_;
class CPublishedFile_AddChild_Response;
struct CPublishedFile_AddChild_ResponseDefaultTypeInternal;
extern CPublishedFile_AddChild_ResponseDefaultTypeInternal _CPublishedFile_AddChild_Response_default_instance_;
class CPublishedFile_AreFilesInSubscriptionList_Request;
struct CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal;
extern CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Request_default_instance_;
class CPublishedFile_AreFilesInSubscriptionList_Response;
struct CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal;
extern CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Response_default_instance_;
class CPublishedFile_AreFilesInSubscriptionList_Response_InList;
struct CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal;
extern CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Response_InList_default_instance_;
class CPublishedFile_CanSubscribe_Request;
struct CPublishedFile_CanSubscribe_RequestDefaultTypeInternal;
extern CPublishedFile_CanSubscribe_RequestDefaultTypeInternal _CPublishedFile_CanSubscribe_Request_default_instance_;
class CPublishedFile_CanSubscribe_Response;
struct CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal;
extern CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal _CPublishedFile_CanSubscribe_Response_default_instance_;
class CPublishedFile_Delete_Request;
struct CPublishedFile_Delete_RequestDefaultTypeInternal;
extern CPublishedFile_Delete_RequestDefaultTypeInternal _CPublishedFile_Delete_Request_default_instance_;
class CPublishedFile_Delete_Response;
struct CPublishedFile_Delete_ResponseDefaultTypeInternal;
extern CPublishedFile_Delete_ResponseDefaultTypeInternal _CPublishedFile_Delete_Response_default_instance_;
class CPublishedFile_FileDeleted_Client_Notification;
struct CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal;
extern CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal _CPublishedFile_FileDeleted_Client_Notification_default_instance_;
class CPublishedFile_FileSubscribed_Notification;
struct CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal;
extern CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal _CPublishedFile_FileSubscribed_Notification_default_instance_;
class CPublishedFile_FileSubscribed_Notification_RevisionData;
struct CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal;
extern CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal _CPublishedFile_FileSubscribed_Notification_RevisionData_default_instance_;
class CPublishedFile_FileUnsubscribed_Notification;
struct CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal;
extern CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal _CPublishedFile_FileUnsubscribed_Notification_default_instance_;
class CPublishedFile_GetAppRelationshipsBatched_Request;
struct CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal;
extern CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Request_default_instance_;
class CPublishedFile_GetAppRelationshipsBatched_Response;
struct CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal;
extern CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_default_instance_;
class CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship;
struct CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal;
extern CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship_default_instance_;
class CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship;
struct CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal;
extern CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship_default_instance_;
class CPublishedFile_GetAppRelationships_Request;
struct CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal;
extern CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal _CPublishedFile_GetAppRelationships_Request_default_instance_;
class CPublishedFile_GetAppRelationships_Response;
struct CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal;
extern CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal _CPublishedFile_GetAppRelationships_Response_default_instance_;
class CPublishedFile_GetAppRelationships_Response_AppRelationship;
struct CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal;
extern CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationships_Response_AppRelationship_default_instance_;
class CPublishedFile_GetChangeHistoryEntry_Request;
struct CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal;
extern CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal _CPublishedFile_GetChangeHistoryEntry_Request_default_instance_;
class CPublishedFile_GetChangeHistoryEntry_Response;
struct CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal;
extern CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal _CPublishedFile_GetChangeHistoryEntry_Response_default_instance_;
class CPublishedFile_GetChangeHistory_Request;
struct CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal;
extern CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal _CPublishedFile_GetChangeHistory_Request_default_instance_;
class CPublishedFile_GetChangeHistory_Response;
struct CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal;
extern CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal _CPublishedFile_GetChangeHistory_Response_default_instance_;
class CPublishedFile_GetChangeHistory_Response_ChangeLog;
struct CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal;
extern CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal _CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_;
class CPublishedFile_GetContentDescriptors_Request;
struct CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal;
extern CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Request_default_instance_;
class CPublishedFile_GetContentDescriptors_Response;
struct CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal;
extern CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Response_default_instance_;
class CPublishedFile_GetContentDescriptors_Response_ContentDescriptor;
struct CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal;
extern CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_default_instance_;
class CPublishedFile_GetDetails_Request;
struct CPublishedFile_GetDetails_RequestDefaultTypeInternal;
extern CPublishedFile_GetDetails_RequestDefaultTypeInternal _CPublishedFile_GetDetails_Request_default_instance_;
class CPublishedFile_GetDetails_Response;
struct CPublishedFile_GetDetails_ResponseDefaultTypeInternal;
extern CPublishedFile_GetDetails_ResponseDefaultTypeInternal _CPublishedFile_GetDetails_Response_default_instance_;
class CPublishedFile_GetItemChanges_Request;
struct CPublishedFile_GetItemChanges_RequestDefaultTypeInternal;
extern CPublishedFile_GetItemChanges_RequestDefaultTypeInternal _CPublishedFile_GetItemChanges_Request_default_instance_;
class CPublishedFile_GetItemChanges_Response;
struct CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal;
extern CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal _CPublishedFile_GetItemChanges_Response_default_instance_;
class CPublishedFile_GetItemChanges_Response_WorkshopItemInfo;
struct CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal;
extern CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal _CPublishedFile_GetItemChanges_Response_WorkshopItemInfo_default_instance_;
class CPublishedFile_GetItemInfo_Request;
struct CPublishedFile_GetItemInfo_RequestDefaultTypeInternal;
extern CPublishedFile_GetItemInfo_RequestDefaultTypeInternal _CPublishedFile_GetItemInfo_Request_default_instance_;
class CPublishedFile_GetItemInfo_Request_WorkshopItem;
struct CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal;
extern CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal _CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_;
class CPublishedFile_GetItemInfo_Response;
struct CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal;
extern CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal _CPublishedFile_GetItemInfo_Response_default_instance_;
class CPublishedFile_GetItemInfo_Response_WorkshopItemInfo;
struct CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal;
extern CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal _CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_;
class CPublishedFile_GetSubSectionData_Request;
struct CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal;
extern CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal _CPublishedFile_GetSubSectionData_Request_default_instance_;
class CPublishedFile_GetSubSectionData_Response;
struct CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal;
extern CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal _CPublishedFile_GetSubSectionData_Response_default_instance_;
class CPublishedFile_GetUserFiles_Request;
struct CPublishedFile_GetUserFiles_RequestDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_RequestDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_default_instance_;
class CPublishedFile_GetUserFiles_Request_KVTag;
struct CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_KVTag_default_instance_;
class CPublishedFile_GetUserFiles_Request_TagGroup;
struct CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_TagGroup_default_instance_;
class CPublishedFile_GetUserFiles_Response;
struct CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_default_instance_;
class CPublishedFile_GetUserFiles_Response_App;
struct CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_App_default_instance_;
class CPublishedFile_GetUserVoteSummary_Request;
struct CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal;
extern CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Request_default_instance_;
class CPublishedFile_GetUserVoteSummary_Response;
struct CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal;
extern CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Response_default_instance_;
class CPublishedFile_GetUserVoteSummary_Response_VoteSummary;
struct CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal;
extern CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Response_VoteSummary_default_instance_;
class CPublishedFile_Publish_Request;
struct CPublishedFile_Publish_RequestDefaultTypeInternal;
extern CPublishedFile_Publish_RequestDefaultTypeInternal _CPublishedFile_Publish_Request_default_instance_;
class CPublishedFile_Publish_Response;
struct CPublishedFile_Publish_ResponseDefaultTypeInternal;
extern CPublishedFile_Publish_ResponseDefaultTypeInternal _CPublishedFile_Publish_Response_default_instance_;
class CPublishedFile_QueryFiles_Request;
struct CPublishedFile_QueryFiles_RequestDefaultTypeInternal;
extern CPublishedFile_QueryFiles_RequestDefaultTypeInternal _CPublishedFile_QueryFiles_Request_default_instance_;
class CPublishedFile_QueryFiles_Request_DateRange;
struct CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal;
extern CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal _CPublishedFile_QueryFiles_Request_DateRange_default_instance_;
class CPublishedFile_QueryFiles_Request_KVTag;
struct CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal;
extern CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal _CPublishedFile_QueryFiles_Request_KVTag_default_instance_;
class CPublishedFile_QueryFiles_Request_TagGroup;
struct CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal;
extern CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal _CPublishedFile_QueryFiles_Request_TagGroup_default_instance_;
class CPublishedFile_QueryFiles_Response;
struct CPublishedFile_QueryFiles_ResponseDefaultTypeInternal;
extern CPublishedFile_QueryFiles_ResponseDefaultTypeInternal _CPublishedFile_QueryFiles_Response_default_instance_;
class CPublishedFile_RefreshVotingQueue_Request;
struct CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal;
extern CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
class CPublishedFile_RefreshVotingQueue_Response;
struct CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal;
extern CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
class CPublishedFile_RemoveAppRelationship_Request;
struct CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal;
extern CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal _CPublishedFile_RemoveAppRelationship_Request_default_instance_;
class CPublishedFile_RemoveAppRelationship_Response;
struct CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal;
extern CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal _CPublishedFile_RemoveAppRelationship_Response_default_instance_;
class CPublishedFile_RemoveChild_Request;
struct CPublishedFile_RemoveChild_RequestDefaultTypeInternal;
extern CPublishedFile_RemoveChild_RequestDefaultTypeInternal _CPublishedFile_RemoveChild_Request_default_instance_;
class CPublishedFile_RemoveChild_Response;
struct CPublishedFile_RemoveChild_ResponseDefaultTypeInternal;
extern CPublishedFile_RemoveChild_ResponseDefaultTypeInternal _CPublishedFile_RemoveChild_Response_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_Request;
struct CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal;
extern CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage;
struct CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal;
extern CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_Response;
struct CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal;
extern CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_;
class CPublishedFile_StartPlaytimeTracking_Request;
struct CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal;
extern CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal _CPublishedFile_StartPlaytimeTracking_Request_default_instance_;
class CPublishedFile_StartPlaytimeTracking_Response;
struct CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal;
extern CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal _CPublishedFile_StartPlaytimeTracking_Response_default_instance_;
class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request;
struct CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal;
extern CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_;
class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response;
struct CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal;
extern CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_;
class CPublishedFile_StopPlaytimeTracking_Request;
struct CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal;
extern CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal _CPublishedFile_StopPlaytimeTracking_Request_default_instance_;
class CPublishedFile_StopPlaytimeTracking_Response;
struct CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal;
extern CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal _CPublishedFile_StopPlaytimeTracking_Response_default_instance_;
class CPublishedFile_Subscribe_Request;
struct CPublishedFile_Subscribe_RequestDefaultTypeInternal;
extern CPublishedFile_Subscribe_RequestDefaultTypeInternal _CPublishedFile_Subscribe_Request_default_instance_;
class CPublishedFile_Subscribe_Response;
struct CPublishedFile_Subscribe_ResponseDefaultTypeInternal;
extern CPublishedFile_Subscribe_ResponseDefaultTypeInternal _CPublishedFile_Subscribe_Response_default_instance_;
class CPublishedFile_Unsubscribe_Request;
struct CPublishedFile_Unsubscribe_RequestDefaultTypeInternal;
extern CPublishedFile_Unsubscribe_RequestDefaultTypeInternal _CPublishedFile_Unsubscribe_Request_default_instance_;
class CPublishedFile_Unsubscribe_Response;
struct CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal;
extern CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal _CPublishedFile_Unsubscribe_Response_default_instance_;
class CPublishedFile_UpdateContentDescriptors_Request;
struct CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal;
extern CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal _CPublishedFile_UpdateContentDescriptors_Request_default_instance_;
class CPublishedFile_UpdateContentDescriptors_Response;
struct CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal;
extern CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal _CPublishedFile_UpdateContentDescriptors_Response_default_instance_;
class CPublishedFile_Update_Request;
struct CPublishedFile_Update_RequestDefaultTypeInternal;
extern CPublishedFile_Update_RequestDefaultTypeInternal _CPublishedFile_Update_Request_default_instance_;
class CPublishedFile_Update_Response;
struct CPublishedFile_Update_ResponseDefaultTypeInternal;
extern CPublishedFile_Update_ResponseDefaultTypeInternal _CPublishedFile_Update_Response_default_instance_;
class CPublishedFile_Vote_Request;
struct CPublishedFile_Vote_RequestDefaultTypeInternal;
extern CPublishedFile_Vote_RequestDefaultTypeInternal _CPublishedFile_Vote_Request_default_instance_;
class CPublishedFile_Vote_Response;
struct CPublishedFile_Vote_ResponseDefaultTypeInternal;
extern CPublishedFile_Vote_ResponseDefaultTypeInternal _CPublishedFile_Vote_Response_default_instance_;
class PublishedFileDetails;
struct PublishedFileDetailsDefaultTypeInternal;
extern PublishedFileDetailsDefaultTypeInternal _PublishedFileDetails_default_instance_;
class PublishedFileDetails_Child;
struct PublishedFileDetails_ChildDefaultTypeInternal;
extern PublishedFileDetails_ChildDefaultTypeInternal _PublishedFileDetails_Child_default_instance_;
class PublishedFileDetails_ForSaleData;
struct PublishedFileDetails_ForSaleDataDefaultTypeInternal;
extern PublishedFileDetails_ForSaleDataDefaultTypeInternal _PublishedFileDetails_ForSaleData_default_instance_;
class PublishedFileDetails_KVTag;
struct PublishedFileDetails_KVTagDefaultTypeInternal;
extern PublishedFileDetails_KVTagDefaultTypeInternal _PublishedFileDetails_KVTag_default_instance_;
class PublishedFileDetails_PlaytimeStats;
struct PublishedFileDetails_PlaytimeStatsDefaultTypeInternal;
extern PublishedFileDetails_PlaytimeStatsDefaultTypeInternal _PublishedFileDetails_PlaytimeStats_default_instance_;
class PublishedFileDetails_Preview;
struct PublishedFileDetails_PreviewDefaultTypeInternal;
extern PublishedFileDetails_PreviewDefaultTypeInternal _PublishedFileDetails_Preview_default_instance_;
class PublishedFileDetails_Reaction;
struct PublishedFileDetails_ReactionDefaultTypeInternal;
extern PublishedFileDetails_ReactionDefaultTypeInternal _PublishedFileDetails_Reaction_default_instance_;
class PublishedFileDetails_Tag;
struct PublishedFileDetails_TagDefaultTypeInternal;
extern PublishedFileDetails_TagDefaultTypeInternal _PublishedFileDetails_Tag_default_instance_;
class PublishedFileDetails_VoteData;
struct PublishedFileDetails_VoteDataDefaultTypeInternal;
extern PublishedFileDetails_VoteDataDefaultTypeInternal _PublishedFileDetails_VoteData_default_instance_;
class PublishedFileSubSection;
struct PublishedFileSubSectionDefaultTypeInternal;
extern PublishedFileSubSectionDefaultTypeInternal _PublishedFileSubSection_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CPublishedFile_AddAppRelationship_Request* Arena::CreateMaybeMessage<::CPublishedFile_AddAppRelationship_Request>(Arena*);
template<> ::CPublishedFile_AddAppRelationship_Response* Arena::CreateMaybeMessage<::CPublishedFile_AddAppRelationship_Response>(Arena*);
template<> ::CPublishedFile_AddChild_Request* Arena::CreateMaybeMessage<::CPublishedFile_AddChild_Request>(Arena*);
template<> ::CPublishedFile_AddChild_Response* Arena::CreateMaybeMessage<::CPublishedFile_AddChild_Response>(Arena*);
template<> ::CPublishedFile_AreFilesInSubscriptionList_Request* Arena::CreateMaybeMessage<::CPublishedFile_AreFilesInSubscriptionList_Request>(Arena*);
template<> ::CPublishedFile_AreFilesInSubscriptionList_Response* Arena::CreateMaybeMessage<::CPublishedFile_AreFilesInSubscriptionList_Response>(Arena*);
template<> ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* Arena::CreateMaybeMessage<::CPublishedFile_AreFilesInSubscriptionList_Response_InList>(Arena*);
template<> ::CPublishedFile_CanSubscribe_Request* Arena::CreateMaybeMessage<::CPublishedFile_CanSubscribe_Request>(Arena*);
template<> ::CPublishedFile_CanSubscribe_Response* Arena::CreateMaybeMessage<::CPublishedFile_CanSubscribe_Response>(Arena*);
template<> ::CPublishedFile_Delete_Request* Arena::CreateMaybeMessage<::CPublishedFile_Delete_Request>(Arena*);
template<> ::CPublishedFile_Delete_Response* Arena::CreateMaybeMessage<::CPublishedFile_Delete_Response>(Arena*);
template<> ::CPublishedFile_FileDeleted_Client_Notification* Arena::CreateMaybeMessage<::CPublishedFile_FileDeleted_Client_Notification>(Arena*);
template<> ::CPublishedFile_FileSubscribed_Notification* Arena::CreateMaybeMessage<::CPublishedFile_FileSubscribed_Notification>(Arena*);
template<> ::CPublishedFile_FileSubscribed_Notification_RevisionData* Arena::CreateMaybeMessage<::CPublishedFile_FileSubscribed_Notification_RevisionData>(Arena*);
template<> ::CPublishedFile_FileUnsubscribed_Notification* Arena::CreateMaybeMessage<::CPublishedFile_FileUnsubscribed_Notification>(Arena*);
template<> ::CPublishedFile_GetAppRelationshipsBatched_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationshipsBatched_Request>(Arena*);
template<> ::CPublishedFile_GetAppRelationshipsBatched_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationshipsBatched_Response>(Arena*);
template<> ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship>(Arena*);
template<> ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship>(Arena*);
template<> ::CPublishedFile_GetAppRelationships_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationships_Request>(Arena*);
template<> ::CPublishedFile_GetAppRelationships_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationships_Response>(Arena*);
template<> ::CPublishedFile_GetAppRelationships_Response_AppRelationship* Arena::CreateMaybeMessage<::CPublishedFile_GetAppRelationships_Response_AppRelationship>(Arena*);
template<> ::CPublishedFile_GetChangeHistoryEntry_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetChangeHistoryEntry_Request>(Arena*);
template<> ::CPublishedFile_GetChangeHistoryEntry_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetChangeHistoryEntry_Response>(Arena*);
template<> ::CPublishedFile_GetChangeHistory_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetChangeHistory_Request>(Arena*);
template<> ::CPublishedFile_GetChangeHistory_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetChangeHistory_Response>(Arena*);
template<> ::CPublishedFile_GetChangeHistory_Response_ChangeLog* Arena::CreateMaybeMessage<::CPublishedFile_GetChangeHistory_Response_ChangeLog>(Arena*);
template<> ::CPublishedFile_GetContentDescriptors_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetContentDescriptors_Request>(Arena*);
template<> ::CPublishedFile_GetContentDescriptors_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetContentDescriptors_Response>(Arena*);
template<> ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* Arena::CreateMaybeMessage<::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor>(Arena*);
template<> ::CPublishedFile_GetDetails_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetDetails_Request>(Arena*);
template<> ::CPublishedFile_GetDetails_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetDetails_Response>(Arena*);
template<> ::CPublishedFile_GetItemChanges_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetItemChanges_Request>(Arena*);
template<> ::CPublishedFile_GetItemChanges_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetItemChanges_Response>(Arena*);
template<> ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* Arena::CreateMaybeMessage<::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo>(Arena*);
template<> ::CPublishedFile_GetItemInfo_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetItemInfo_Request>(Arena*);
template<> ::CPublishedFile_GetItemInfo_Request_WorkshopItem* Arena::CreateMaybeMessage<::CPublishedFile_GetItemInfo_Request_WorkshopItem>(Arena*);
template<> ::CPublishedFile_GetItemInfo_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetItemInfo_Response>(Arena*);
template<> ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* Arena::CreateMaybeMessage<::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo>(Arena*);
template<> ::CPublishedFile_GetSubSectionData_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetSubSectionData_Request>(Arena*);
template<> ::CPublishedFile_GetSubSectionData_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetSubSectionData_Response>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Request>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Request_KVTag* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Request_KVTag>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Request_TagGroup* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Request_TagGroup>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Response>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Response_App* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Response_App>(Arena*);
template<> ::CPublishedFile_GetUserVoteSummary_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetUserVoteSummary_Request>(Arena*);
template<> ::CPublishedFile_GetUserVoteSummary_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetUserVoteSummary_Response>(Arena*);
template<> ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* Arena::CreateMaybeMessage<::CPublishedFile_GetUserVoteSummary_Response_VoteSummary>(Arena*);
template<> ::CPublishedFile_Publish_Request* Arena::CreateMaybeMessage<::CPublishedFile_Publish_Request>(Arena*);
template<> ::CPublishedFile_Publish_Response* Arena::CreateMaybeMessage<::CPublishedFile_Publish_Response>(Arena*);
template<> ::CPublishedFile_QueryFiles_Request* Arena::CreateMaybeMessage<::CPublishedFile_QueryFiles_Request>(Arena*);
template<> ::CPublishedFile_QueryFiles_Request_DateRange* Arena::CreateMaybeMessage<::CPublishedFile_QueryFiles_Request_DateRange>(Arena*);
template<> ::CPublishedFile_QueryFiles_Request_KVTag* Arena::CreateMaybeMessage<::CPublishedFile_QueryFiles_Request_KVTag>(Arena*);
template<> ::CPublishedFile_QueryFiles_Request_TagGroup* Arena::CreateMaybeMessage<::CPublishedFile_QueryFiles_Request_TagGroup>(Arena*);
template<> ::CPublishedFile_QueryFiles_Response* Arena::CreateMaybeMessage<::CPublishedFile_QueryFiles_Response>(Arena*);
template<> ::CPublishedFile_RefreshVotingQueue_Request* Arena::CreateMaybeMessage<::CPublishedFile_RefreshVotingQueue_Request>(Arena*);
template<> ::CPublishedFile_RefreshVotingQueue_Response* Arena::CreateMaybeMessage<::CPublishedFile_RefreshVotingQueue_Response>(Arena*);
template<> ::CPublishedFile_RemoveAppRelationship_Request* Arena::CreateMaybeMessage<::CPublishedFile_RemoveAppRelationship_Request>(Arena*);
template<> ::CPublishedFile_RemoveAppRelationship_Response* Arena::CreateMaybeMessage<::CPublishedFile_RemoveAppRelationship_Response>(Arena*);
template<> ::CPublishedFile_RemoveChild_Request* Arena::CreateMaybeMessage<::CPublishedFile_RemoveChild_Request>(Arena*);
template<> ::CPublishedFile_RemoveChild_Response* Arena::CreateMaybeMessage<::CPublishedFile_RemoveChild_Response>(Arena*);
template<> ::CPublishedFile_SetPlaytimeForControllerConfigs_Request* Arena::CreateMaybeMessage<::CPublishedFile_SetPlaytimeForControllerConfigs_Request>(Arena*);
template<> ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* Arena::CreateMaybeMessage<::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage>(Arena*);
template<> ::CPublishedFile_SetPlaytimeForControllerConfigs_Response* Arena::CreateMaybeMessage<::CPublishedFile_SetPlaytimeForControllerConfigs_Response>(Arena*);
template<> ::CPublishedFile_StartPlaytimeTracking_Request* Arena::CreateMaybeMessage<::CPublishedFile_StartPlaytimeTracking_Request>(Arena*);
template<> ::CPublishedFile_StartPlaytimeTracking_Response* Arena::CreateMaybeMessage<::CPublishedFile_StartPlaytimeTracking_Response>(Arena*);
template<> ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* Arena::CreateMaybeMessage<::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request>(Arena*);
template<> ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* Arena::CreateMaybeMessage<::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response>(Arena*);
template<> ::CPublishedFile_StopPlaytimeTracking_Request* Arena::CreateMaybeMessage<::CPublishedFile_StopPlaytimeTracking_Request>(Arena*);
template<> ::CPublishedFile_StopPlaytimeTracking_Response* Arena::CreateMaybeMessage<::CPublishedFile_StopPlaytimeTracking_Response>(Arena*);
template<> ::CPublishedFile_Subscribe_Request* Arena::CreateMaybeMessage<::CPublishedFile_Subscribe_Request>(Arena*);
template<> ::CPublishedFile_Subscribe_Response* Arena::CreateMaybeMessage<::CPublishedFile_Subscribe_Response>(Arena*);
template<> ::CPublishedFile_Unsubscribe_Request* Arena::CreateMaybeMessage<::CPublishedFile_Unsubscribe_Request>(Arena*);
template<> ::CPublishedFile_Unsubscribe_Response* Arena::CreateMaybeMessage<::CPublishedFile_Unsubscribe_Response>(Arena*);
template<> ::CPublishedFile_UpdateContentDescriptors_Request* Arena::CreateMaybeMessage<::CPublishedFile_UpdateContentDescriptors_Request>(Arena*);
template<> ::CPublishedFile_UpdateContentDescriptors_Response* Arena::CreateMaybeMessage<::CPublishedFile_UpdateContentDescriptors_Response>(Arena*);
template<> ::CPublishedFile_Update_Request* Arena::CreateMaybeMessage<::CPublishedFile_Update_Request>(Arena*);
template<> ::CPublishedFile_Update_Response* Arena::CreateMaybeMessage<::CPublishedFile_Update_Response>(Arena*);
template<> ::CPublishedFile_Vote_Request* Arena::CreateMaybeMessage<::CPublishedFile_Vote_Request>(Arena*);
template<> ::CPublishedFile_Vote_Response* Arena::CreateMaybeMessage<::CPublishedFile_Vote_Response>(Arena*);
template<> ::PublishedFileDetails* Arena::CreateMaybeMessage<::PublishedFileDetails>(Arena*);
template<> ::PublishedFileDetails_Child* Arena::CreateMaybeMessage<::PublishedFileDetails_Child>(Arena*);
template<> ::PublishedFileDetails_ForSaleData* Arena::CreateMaybeMessage<::PublishedFileDetails_ForSaleData>(Arena*);
template<> ::PublishedFileDetails_KVTag* Arena::CreateMaybeMessage<::PublishedFileDetails_KVTag>(Arena*);
template<> ::PublishedFileDetails_PlaytimeStats* Arena::CreateMaybeMessage<::PublishedFileDetails_PlaytimeStats>(Arena*);
template<> ::PublishedFileDetails_Preview* Arena::CreateMaybeMessage<::PublishedFileDetails_Preview>(Arena*);
template<> ::PublishedFileDetails_Reaction* Arena::CreateMaybeMessage<::PublishedFileDetails_Reaction>(Arena*);
template<> ::PublishedFileDetails_Tag* Arena::CreateMaybeMessage<::PublishedFileDetails_Tag>(Arena*);
template<> ::PublishedFileDetails_VoteData* Arena::CreateMaybeMessage<::PublishedFileDetails_VoteData>(Arena*);
template<> ::PublishedFileSubSection* Arena::CreateMaybeMessage<::PublishedFileSubSection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EPublishedFileRevision : int {
  k_EPublishedFileRevision_Default = 0,
  k_EPublishedFileRevision_Latest = 1,
  k_EPublishedFileRevision_ApprovedSnapshot = 2,
  k_EPublishedFileRevision_ApprovedSnapshot_China = 3,
  k_EPublishedFileRevision_RejectedSnapshot = 4,
  k_EPublishedFileRevision_RejectedSnapshot_China = 5
};
bool EPublishedFileRevision_IsValid(int value);
constexpr EPublishedFileRevision EPublishedFileRevision_MIN = k_EPublishedFileRevision_Default;
constexpr EPublishedFileRevision EPublishedFileRevision_MAX = k_EPublishedFileRevision_RejectedSnapshot_China;
constexpr int EPublishedFileRevision_ARRAYSIZE = EPublishedFileRevision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileRevision_descriptor();
template<typename T>
inline const std::string& EPublishedFileRevision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPublishedFileRevision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPublishedFileRevision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPublishedFileRevision_descriptor(), enum_t_value);
}
inline bool EPublishedFileRevision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPublishedFileRevision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPublishedFileRevision>(
    EPublishedFileRevision_descriptor(), name, value);
}
enum EPublishedFileForSaleStatus : int {
  k_PFFSS_NotForSale = 0,
  k_PFFSS_PendingApproval = 1,
  k_PFFSS_ApprovedForSale = 2,
  k_PFFSS_RejectedForSale = 3,
  k_PFFSS_NoLongerForSale = 4,
  k_PFFSS_TentativeApproval = 5
};
bool EPublishedFileForSaleStatus_IsValid(int value);
constexpr EPublishedFileForSaleStatus EPublishedFileForSaleStatus_MIN = k_PFFSS_NotForSale;
constexpr EPublishedFileForSaleStatus EPublishedFileForSaleStatus_MAX = k_PFFSS_TentativeApproval;
constexpr int EPublishedFileForSaleStatus_ARRAYSIZE = EPublishedFileForSaleStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileForSaleStatus_descriptor();
template<typename T>
inline const std::string& EPublishedFileForSaleStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPublishedFileForSaleStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPublishedFileForSaleStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPublishedFileForSaleStatus_descriptor(), enum_t_value);
}
inline bool EPublishedFileForSaleStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPublishedFileForSaleStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPublishedFileForSaleStatus>(
    EPublishedFileForSaleStatus_descriptor(), name, value);
}
// ===================================================================

class CPublishedFile_Vote_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Vote_Request) */ {
 public:
  inline CPublishedFile_Vote_Request() : CPublishedFile_Vote_Request(nullptr) {}
  ~CPublishedFile_Vote_Request() override;
  explicit constexpr CPublishedFile_Vote_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Vote_Request(const CPublishedFile_Vote_Request& from);
  CPublishedFile_Vote_Request(CPublishedFile_Vote_Request&& from) noexcept
    : CPublishedFile_Vote_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Vote_Request& operator=(const CPublishedFile_Vote_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Vote_Request& operator=(CPublishedFile_Vote_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Vote_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Vote_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Vote_Request*>(
               &_CPublishedFile_Vote_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPublishedFile_Vote_Request& a, CPublishedFile_Vote_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Vote_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Vote_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Vote_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Vote_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Vote_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Vote_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Vote_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Vote_Request";
  }
  protected:
  explicit CPublishedFile_Vote_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kVoteUpFieldNumber = 2,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional bool vote_up = 2;
  bool has_vote_up() const;
  private:
  bool _internal_has_vote_up() const;
  public:
  void clear_vote_up();
  bool vote_up() const;
  void set_vote_up(bool value);
  private:
  bool _internal_vote_up() const;
  void _internal_set_vote_up(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Vote_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  bool vote_up_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Vote_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_Vote_Response) */ {
 public:
  inline CPublishedFile_Vote_Response() : CPublishedFile_Vote_Response(nullptr) {}
  explicit constexpr CPublishedFile_Vote_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Vote_Response(const CPublishedFile_Vote_Response& from);
  CPublishedFile_Vote_Response(CPublishedFile_Vote_Response&& from) noexcept
    : CPublishedFile_Vote_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Vote_Response& operator=(const CPublishedFile_Vote_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Vote_Response& operator=(CPublishedFile_Vote_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Vote_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Vote_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Vote_Response*>(
               &_CPublishedFile_Vote_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPublishedFile_Vote_Response& a, CPublishedFile_Vote_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Vote_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Vote_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Vote_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Vote_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_Vote_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_Vote_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Vote_Response";
  }
  protected:
  explicit CPublishedFile_Vote_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Vote_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Subscribe_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Subscribe_Request) */ {
 public:
  inline CPublishedFile_Subscribe_Request() : CPublishedFile_Subscribe_Request(nullptr) {}
  ~CPublishedFile_Subscribe_Request() override;
  explicit constexpr CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from);
  CPublishedFile_Subscribe_Request(CPublishedFile_Subscribe_Request&& from) noexcept
    : CPublishedFile_Subscribe_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Subscribe_Request& operator=(const CPublishedFile_Subscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Subscribe_Request& operator=(CPublishedFile_Subscribe_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Subscribe_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Subscribe_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Subscribe_Request*>(
               &_CPublishedFile_Subscribe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPublishedFile_Subscribe_Request& a, CPublishedFile_Subscribe_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Subscribe_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Subscribe_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Subscribe_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Subscribe_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Subscribe_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Subscribe_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Subscribe_Request";
  }
  protected:
  explicit CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kListTypeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kNotifyClientFieldNumber = 4,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 list_type = 2;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  uint32_t list_type() const;
  void set_list_type(uint32_t value);
  private:
  uint32_t _internal_list_type() const;
  void _internal_set_list_type(uint32_t value);
  public:

  // optional int32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // optional bool notify_client = 4;
  bool has_notify_client() const;
  private:
  bool _internal_has_notify_client() const;
  public:
  void clear_notify_client();
  bool notify_client() const;
  void set_notify_client(bool value);
  private:
  bool _internal_notify_client() const;
  void _internal_set_notify_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t list_type_;
  int32_t appid_;
  bool notify_client_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Subscribe_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_Subscribe_Response) */ {
 public:
  inline CPublishedFile_Subscribe_Response() : CPublishedFile_Subscribe_Response(nullptr) {}
  explicit constexpr CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from);
  CPublishedFile_Subscribe_Response(CPublishedFile_Subscribe_Response&& from) noexcept
    : CPublishedFile_Subscribe_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Subscribe_Response& operator=(const CPublishedFile_Subscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Subscribe_Response& operator=(CPublishedFile_Subscribe_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Subscribe_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Subscribe_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Subscribe_Response*>(
               &_CPublishedFile_Subscribe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CPublishedFile_Subscribe_Response& a, CPublishedFile_Subscribe_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Subscribe_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Subscribe_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Subscribe_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_Subscribe_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_Subscribe_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Subscribe_Response";
  }
  protected:
  explicit CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Unsubscribe_Request) */ {
 public:
  inline CPublishedFile_Unsubscribe_Request() : CPublishedFile_Unsubscribe_Request(nullptr) {}
  ~CPublishedFile_Unsubscribe_Request() override;
  explicit constexpr CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from);
  CPublishedFile_Unsubscribe_Request(CPublishedFile_Unsubscribe_Request&& from) noexcept
    : CPublishedFile_Unsubscribe_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Unsubscribe_Request& operator=(const CPublishedFile_Unsubscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Unsubscribe_Request& operator=(CPublishedFile_Unsubscribe_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Unsubscribe_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Unsubscribe_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Unsubscribe_Request*>(
               &_CPublishedFile_Unsubscribe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPublishedFile_Unsubscribe_Request& a, CPublishedFile_Unsubscribe_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Unsubscribe_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Unsubscribe_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Unsubscribe_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Unsubscribe_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Unsubscribe_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Unsubscribe_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Unsubscribe_Request";
  }
  protected:
  explicit CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kListTypeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kNotifyClientFieldNumber = 4,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 list_type = 2;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  uint32_t list_type() const;
  void set_list_type(uint32_t value);
  private:
  uint32_t _internal_list_type() const;
  void _internal_set_list_type(uint32_t value);
  public:

  // optional int32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  int32_t appid() const;
  void set_appid(int32_t value);
  private:
  int32_t _internal_appid() const;
  void _internal_set_appid(int32_t value);
  public:

  // optional bool notify_client = 4;
  bool has_notify_client() const;
  private:
  bool _internal_has_notify_client() const;
  public:
  void clear_notify_client();
  bool notify_client() const;
  void set_notify_client(bool value);
  private:
  bool _internal_notify_client() const;
  void _internal_set_notify_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t list_type_;
  int32_t appid_;
  bool notify_client_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_Unsubscribe_Response) */ {
 public:
  inline CPublishedFile_Unsubscribe_Response() : CPublishedFile_Unsubscribe_Response(nullptr) {}
  explicit constexpr CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from);
  CPublishedFile_Unsubscribe_Response(CPublishedFile_Unsubscribe_Response&& from) noexcept
    : CPublishedFile_Unsubscribe_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Unsubscribe_Response& operator=(const CPublishedFile_Unsubscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Unsubscribe_Response& operator=(CPublishedFile_Unsubscribe_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Unsubscribe_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Unsubscribe_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Unsubscribe_Response*>(
               &_CPublishedFile_Unsubscribe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CPublishedFile_Unsubscribe_Response& a, CPublishedFile_Unsubscribe_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Unsubscribe_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Unsubscribe_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Unsubscribe_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_Unsubscribe_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_Unsubscribe_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Unsubscribe_Response";
  }
  protected:
  explicit CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_CanSubscribe_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_CanSubscribe_Request) */ {
 public:
  inline CPublishedFile_CanSubscribe_Request() : CPublishedFile_CanSubscribe_Request(nullptr) {}
  ~CPublishedFile_CanSubscribe_Request() override;
  explicit constexpr CPublishedFile_CanSubscribe_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_CanSubscribe_Request(const CPublishedFile_CanSubscribe_Request& from);
  CPublishedFile_CanSubscribe_Request(CPublishedFile_CanSubscribe_Request&& from) noexcept
    : CPublishedFile_CanSubscribe_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_CanSubscribe_Request& operator=(const CPublishedFile_CanSubscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_CanSubscribe_Request& operator=(CPublishedFile_CanSubscribe_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_CanSubscribe_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_CanSubscribe_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_CanSubscribe_Request*>(
               &_CPublishedFile_CanSubscribe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPublishedFile_CanSubscribe_Request& a, CPublishedFile_CanSubscribe_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_CanSubscribe_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_CanSubscribe_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_CanSubscribe_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_CanSubscribe_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_CanSubscribe_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_CanSubscribe_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_CanSubscribe_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_CanSubscribe_Request";
  }
  protected:
  explicit CPublishedFile_CanSubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_CanSubscribe_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_CanSubscribe_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_CanSubscribe_Response) */ {
 public:
  inline CPublishedFile_CanSubscribe_Response() : CPublishedFile_CanSubscribe_Response(nullptr) {}
  ~CPublishedFile_CanSubscribe_Response() override;
  explicit constexpr CPublishedFile_CanSubscribe_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_CanSubscribe_Response(const CPublishedFile_CanSubscribe_Response& from);
  CPublishedFile_CanSubscribe_Response(CPublishedFile_CanSubscribe_Response&& from) noexcept
    : CPublishedFile_CanSubscribe_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_CanSubscribe_Response& operator=(const CPublishedFile_CanSubscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_CanSubscribe_Response& operator=(CPublishedFile_CanSubscribe_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_CanSubscribe_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_CanSubscribe_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_CanSubscribe_Response*>(
               &_CPublishedFile_CanSubscribe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CPublishedFile_CanSubscribe_Response& a, CPublishedFile_CanSubscribe_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_CanSubscribe_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_CanSubscribe_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_CanSubscribe_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_CanSubscribe_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_CanSubscribe_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_CanSubscribe_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_CanSubscribe_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_CanSubscribe_Response";
  }
  protected:
  explicit CPublishedFile_CanSubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanSubscribeFieldNumber = 1,
  };
  // optional bool can_subscribe = 1;
  bool has_can_subscribe() const;
  private:
  bool _internal_has_can_subscribe() const;
  public:
  void clear_can_subscribe();
  bool can_subscribe() const;
  void set_can_subscribe(bool value);
  private:
  bool _internal_can_subscribe() const;
  void _internal_set_can_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_CanSubscribe_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool can_subscribe_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetSubSectionData_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetSubSectionData_Request) */ {
 public:
  inline CPublishedFile_GetSubSectionData_Request() : CPublishedFile_GetSubSectionData_Request(nullptr) {}
  ~CPublishedFile_GetSubSectionData_Request() override;
  explicit constexpr CPublishedFile_GetSubSectionData_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetSubSectionData_Request(const CPublishedFile_GetSubSectionData_Request& from);
  CPublishedFile_GetSubSectionData_Request(CPublishedFile_GetSubSectionData_Request&& from) noexcept
    : CPublishedFile_GetSubSectionData_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetSubSectionData_Request& operator=(const CPublishedFile_GetSubSectionData_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetSubSectionData_Request& operator=(CPublishedFile_GetSubSectionData_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetSubSectionData_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetSubSectionData_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetSubSectionData_Request*>(
               &_CPublishedFile_GetSubSectionData_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CPublishedFile_GetSubSectionData_Request& a, CPublishedFile_GetSubSectionData_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetSubSectionData_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetSubSectionData_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetSubSectionData_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetSubSectionData_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetSubSectionData_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetSubSectionData_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetSubSectionData_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetSubSectionData_Request";
  }
  protected:
  explicit CPublishedFile_GetSubSectionData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kSpecificSectionidFieldNumber = 3,
    kForTableOfContentsFieldNumber = 2,
    kDesiredRevisionFieldNumber = 4,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint64 specific_sectionid = 3;
  bool has_specific_sectionid() const;
  private:
  bool _internal_has_specific_sectionid() const;
  public:
  void clear_specific_sectionid();
  uint64_t specific_sectionid() const;
  void set_specific_sectionid(uint64_t value);
  private:
  uint64_t _internal_specific_sectionid() const;
  void _internal_set_specific_sectionid(uint64_t value);
  public:

  // optional bool for_table_of_contents = 2;
  bool has_for_table_of_contents() const;
  private:
  bool _internal_has_for_table_of_contents() const;
  public:
  void clear_for_table_of_contents();
  bool for_table_of_contents() const;
  void set_for_table_of_contents(bool value);
  private:
  bool _internal_for_table_of_contents() const;
  void _internal_set_for_table_of_contents(bool value);
  public:

  // optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetSubSectionData_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint64_t specific_sectionid_;
  bool for_table_of_contents_;
  int desired_revision_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileSubSection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileSubSection) */ {
 public:
  inline PublishedFileSubSection() : PublishedFileSubSection(nullptr) {}
  ~PublishedFileSubSection() override;
  explicit constexpr PublishedFileSubSection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileSubSection(const PublishedFileSubSection& from);
  PublishedFileSubSection(PublishedFileSubSection&& from) noexcept
    : PublishedFileSubSection() {
    *this = ::std::move(from);
  }

  inline PublishedFileSubSection& operator=(const PublishedFileSubSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileSubSection& operator=(PublishedFileSubSection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileSubSection& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileSubSection* internal_default_instance() {
    return reinterpret_cast<const PublishedFileSubSection*>(
               &_PublishedFileSubSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishedFileSubSection& a, PublishedFileSubSection& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileSubSection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileSubSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileSubSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileSubSection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileSubSection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileSubSection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileSubSection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileSubSection";
  }
  protected:
  explicit PublishedFileSubSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionTextFieldNumber = 3,
    kSectionidFieldNumber = 1,
    kSortOrderFieldNumber = 4,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string description_text = 3;
  bool has_description_text() const;
  private:
  bool _internal_has_description_text() const;
  public:
  void clear_description_text();
  const std::string& description_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description_text();
  PROTOBUF_NODISCARD std::string* release_description_text();
  void set_allocated_description_text(std::string* description_text);
  private:
  const std::string& _internal_description_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description_text(const std::string& value);
  std::string* _internal_mutable_description_text();
  public:

  // optional uint64 sectionid = 1;
  bool has_sectionid() const;
  private:
  bool _internal_has_sectionid() const;
  public:
  void clear_sectionid();
  uint64_t sectionid() const;
  void set_sectionid(uint64_t value);
  private:
  uint64_t _internal_sectionid() const;
  void _internal_set_sectionid(uint64_t value);
  public:

  // optional uint32 sort_order = 4;
  bool has_sort_order() const;
  private:
  bool _internal_has_sort_order() const;
  public:
  void clear_sort_order();
  uint32_t sort_order() const;
  void set_sort_order(uint32_t value);
  private:
  uint32_t _internal_sort_order() const;
  void _internal_set_sort_order(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileSubSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_text_;
  uint64_t sectionid_;
  uint32_t sort_order_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetSubSectionData_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetSubSectionData_Response) */ {
 public:
  inline CPublishedFile_GetSubSectionData_Response() : CPublishedFile_GetSubSectionData_Response(nullptr) {}
  ~CPublishedFile_GetSubSectionData_Response() override;
  explicit constexpr CPublishedFile_GetSubSectionData_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetSubSectionData_Response(const CPublishedFile_GetSubSectionData_Response& from);
  CPublishedFile_GetSubSectionData_Response(CPublishedFile_GetSubSectionData_Response&& from) noexcept
    : CPublishedFile_GetSubSectionData_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetSubSectionData_Response& operator=(const CPublishedFile_GetSubSectionData_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetSubSectionData_Response& operator=(CPublishedFile_GetSubSectionData_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetSubSectionData_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetSubSectionData_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetSubSectionData_Response*>(
               &_CPublishedFile_GetSubSectionData_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CPublishedFile_GetSubSectionData_Response& a, CPublishedFile_GetSubSectionData_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetSubSectionData_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetSubSectionData_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetSubSectionData_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetSubSectionData_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetSubSectionData_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetSubSectionData_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetSubSectionData_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetSubSectionData_Response";
  }
  protected:
  explicit CPublishedFile_GetSubSectionData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubSectionsFieldNumber = 1,
  };
  // repeated .PublishedFileSubSection sub_sections = 1;
  int sub_sections_size() const;
  private:
  int _internal_sub_sections_size() const;
  public:
  void clear_sub_sections();
  ::PublishedFileSubSection* mutable_sub_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileSubSection >*
      mutable_sub_sections();
  private:
  const ::PublishedFileSubSection& _internal_sub_sections(int index) const;
  ::PublishedFileSubSection* _internal_add_sub_sections();
  public:
  const ::PublishedFileSubSection& sub_sections(int index) const;
  ::PublishedFileSubSection* add_sub_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileSubSection >&
      sub_sections() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetSubSectionData_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileSubSection > sub_sections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Publish_Request) */ {
 public:
  inline CPublishedFile_Publish_Request() : CPublishedFile_Publish_Request(nullptr) {}
  ~CPublishedFile_Publish_Request() override;
  explicit constexpr CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from);
  CPublishedFile_Publish_Request(CPublishedFile_Publish_Request&& from) noexcept
    : CPublishedFile_Publish_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Publish_Request& operator=(const CPublishedFile_Publish_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Publish_Request& operator=(CPublishedFile_Publish_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Publish_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Publish_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Publish_Request*>(
               &_CPublishedFile_Publish_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CPublishedFile_Publish_Request& a, CPublishedFile_Publish_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Publish_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Publish_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Publish_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Publish_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Publish_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Publish_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Publish_Request";
  }
  protected:
  explicit CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 13,
    kCloudfilenameFieldNumber = 3,
    kPreviewCloudfilenameFieldNumber = 4,
    kTitleFieldNumber = 5,
    kFileDescriptionFieldNumber = 6,
    kConsumerShortcutNameFieldNumber = 8,
    kYoutubeUsernameFieldNumber = 9,
    kYoutubeVideoidFieldNumber = 10,
    kRedirectUriFieldNumber = 12,
    kCollectionTypeFieldNumber = 14,
    kGameTypeFieldNumber = 15,
    kUrlFieldNumber = 16,
    kAppidFieldNumber = 1,
    kConsumerAppidFieldNumber = 2,
    kFileTypeFieldNumber = 7,
    kVisibilityFieldNumber = 11,
  };
  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
  bool has_cloudfilename() const;
  private:
  bool _internal_has_cloudfilename() const;
  public:
  void clear_cloudfilename();
  const std::string& cloudfilename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudfilename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudfilename();
  PROTOBUF_NODISCARD std::string* release_cloudfilename();
  void set_allocated_cloudfilename(std::string* cloudfilename);
  private:
  const std::string& _internal_cloudfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudfilename(const std::string& value);
  std::string* _internal_mutable_cloudfilename();
  public:

  // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
  bool has_preview_cloudfilename() const;
  private:
  bool _internal_has_preview_cloudfilename() const;
  public:
  void clear_preview_cloudfilename();
  const std::string& preview_cloudfilename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preview_cloudfilename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preview_cloudfilename();
  PROTOBUF_NODISCARD std::string* release_preview_cloudfilename();
  void set_allocated_preview_cloudfilename(std::string* preview_cloudfilename);
  private:
  const std::string& _internal_preview_cloudfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preview_cloudfilename(const std::string& value);
  std::string* _internal_mutable_preview_cloudfilename();
  public:

  // optional string title = 5 [(.description) = "Text title for the published file."];
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 6 [(.description) = "Text description for the published file."];
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_description();
  PROTOBUF_NODISCARD std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
  bool has_consumer_shortcut_name() const;
  private:
  bool _internal_has_consumer_shortcut_name() const;
  public:
  void clear_consumer_shortcut_name();
  const std::string& consumer_shortcut_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumer_shortcut_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumer_shortcut_name();
  PROTOBUF_NODISCARD std::string* release_consumer_shortcut_name();
  void set_allocated_consumer_shortcut_name(std::string* consumer_shortcut_name);
  private:
  const std::string& _internal_consumer_shortcut_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumer_shortcut_name(const std::string& value);
  std::string* _internal_mutable_consumer_shortcut_name();
  public:

  // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
  bool has_youtube_username() const;
  private:
  bool _internal_has_youtube_username() const;
  public:
  void clear_youtube_username();
  const std::string& youtube_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_youtube_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_youtube_username();
  PROTOBUF_NODISCARD std::string* release_youtube_username();
  void set_allocated_youtube_username(std::string* youtube_username);
  private:
  const std::string& _internal_youtube_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youtube_username(const std::string& value);
  std::string* _internal_mutable_youtube_username();
  public:

  // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
  bool has_youtube_videoid() const;
  private:
  bool _internal_has_youtube_videoid() const;
  public:
  void clear_youtube_videoid();
  const std::string& youtube_videoid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_youtube_videoid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_youtube_videoid();
  PROTOBUF_NODISCARD std::string* release_youtube_videoid();
  void set_allocated_youtube_videoid(std::string* youtube_videoid);
  private:
  const std::string& _internal_youtube_videoid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youtube_videoid(const std::string& value);
  std::string* _internal_mutable_youtube_videoid();
  public:

  // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  bool has_redirect_uri() const;
  private:
  bool _internal_has_redirect_uri() const;
  public:
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redirect_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
  bool has_collection_type() const;
  private:
  bool _internal_has_collection_type() const;
  public:
  void clear_collection_type();
  const std::string& collection_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collection_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collection_type();
  PROTOBUF_NODISCARD std::string* release_collection_type();
  void set_allocated_collection_type(std::string* collection_type);
  private:
  const std::string& _internal_collection_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collection_type(const std::string& value);
  std::string* _internal_mutable_collection_type();
  public:

  // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  const std::string& game_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_type();
  PROTOBUF_NODISCARD std::string* release_game_type();
  void set_allocated_game_type(std::string* game_type);
  private:
  const std::string& _internal_game_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_type(const std::string& value);
  std::string* _internal_mutable_game_type();
  public:

  // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
  bool has_consumer_appid() const;
  private:
  bool _internal_has_consumer_appid() const;
  public:
  void clear_consumer_appid();
  uint32_t consumer_appid() const;
  void set_consumer_appid(uint32_t value);
  private:
  uint32_t _internal_consumer_appid() const;
  void _internal_set_consumer_appid(uint32_t value);
  public:

  // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  uint32_t file_type() const;
  void set_file_type(uint32_t value);
  private:
  uint32_t _internal_file_type() const;
  void _internal_set_file_type(uint32_t value);
  public:

  // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  uint32_t visibility() const;
  void set_visibility(uint32_t value);
  private:
  uint32_t _internal_visibility() const;
  void _internal_set_visibility(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_cloudfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_shortcut_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtube_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtube_videoid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  uint32_t appid_;
  uint32_t consumer_appid_;
  uint32_t file_type_;
  uint32_t visibility_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Publish_Response) */ {
 public:
  inline CPublishedFile_Publish_Response() : CPublishedFile_Publish_Response(nullptr) {}
  ~CPublishedFile_Publish_Response() override;
  explicit constexpr CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from);
  CPublishedFile_Publish_Response(CPublishedFile_Publish_Response&& from) noexcept
    : CPublishedFile_Publish_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Publish_Response& operator=(const CPublishedFile_Publish_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Publish_Response& operator=(CPublishedFile_Publish_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Publish_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Publish_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Publish_Response*>(
               &_CPublishedFile_Publish_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CPublishedFile_Publish_Response& a, CPublishedFile_Publish_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Publish_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Publish_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Publish_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Publish_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Publish_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Publish_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Publish_Response";
  }
  protected:
  explicit CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectUriFieldNumber = 2,
    kPublishedfileidFieldNumber = 1,
  };
  // optional string redirect_uri = 2;
  bool has_redirect_uri() const;
  private:
  bool _internal_has_redirect_uri() const;
  public:
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redirect_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetDetails_Request) */ {
 public:
  inline CPublishedFile_GetDetails_Request() : CPublishedFile_GetDetails_Request(nullptr) {}
  ~CPublishedFile_GetDetails_Request() override;
  explicit constexpr CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from);
  CPublishedFile_GetDetails_Request(CPublishedFile_GetDetails_Request&& from) noexcept
    : CPublishedFile_GetDetails_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetDetails_Request& operator=(const CPublishedFile_GetDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetDetails_Request& operator=(CPublishedFile_GetDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetDetails_Request*>(
               &_CPublishedFile_GetDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CPublishedFile_GetDetails_Request& a, CPublishedFile_GetDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetDetails_Request";
  }
  protected:
  explicit CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 1,
    kIncludetagsFieldNumber = 2,
    kIncludeadditionalpreviewsFieldNumber = 3,
    kIncludechildrenFieldNumber = 4,
    kIncludekvtagsFieldNumber = 5,
    kIncludevotesFieldNumber = 6,
    kShortDescriptionFieldNumber = 8,
    kIncludeforsaledataFieldNumber = 10,
    kIncludemetadataFieldNumber = 11,
    kLanguageFieldNumber = 12,
    kReturnPlaytimeStatsFieldNumber = 13,
    kAppidFieldNumber = 14,
    kDesiredRevisionFieldNumber = 16,
    kStripDescriptionBbcodeFieldNumber = 15,
    kIncludereactionsFieldNumber = 17,
  };
  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
  bool has_includetags() const;
  private:
  bool _internal_has_includetags() const;
  public:
  void clear_includetags();
  bool includetags() const;
  void set_includetags(bool value);
  private:
  bool _internal_includetags() const;
  void _internal_set_includetags(bool value);
  public:

  // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
  bool has_includeadditionalpreviews() const;
  private:
  bool _internal_has_includeadditionalpreviews() const;
  public:
  void clear_includeadditionalpreviews();
  bool includeadditionalpreviews() const;
  void set_includeadditionalpreviews(bool value);
  private:
  bool _internal_includeadditionalpreviews() const;
  void _internal_set_includeadditionalpreviews(bool value);
  public:

  // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
  bool has_includechildren() const;
  private:
  bool _internal_has_includechildren() const;
  public:
  void clear_includechildren();
  bool includechildren() const;
  void set_includechildren(bool value);
  private:
  bool _internal_includechildren() const;
  void _internal_set_includechildren(bool value);
  public:

  // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
  bool has_includekvtags() const;
  private:
  bool _internal_has_includekvtags() const;
  public:
  void clear_includekvtags();
  bool includekvtags() const;
  void set_includekvtags(bool value);
  private:
  bool _internal_includekvtags() const;
  void _internal_set_includekvtags(bool value);
  public:

  // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
  bool has_includevotes() const;
  private:
  bool _internal_has_includevotes() const;
  public:
  void clear_includevotes();
  bool includevotes() const;
  void set_includevotes(bool value);
  private:
  bool _internal_includevotes() const;
  void _internal_set_includevotes(bool value);
  public:

  // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
  bool has_short_description() const;
  private:
  bool _internal_has_short_description() const;
  public:
  void clear_short_description();
  bool short_description() const;
  void set_short_description(bool value);
  private:
  bool _internal_short_description() const;
  void _internal_set_short_description(bool value);
  public:

  // optional bool includeforsaledata = 10 [(.description) = "If true, return pricing data, if applicable."];
  bool has_includeforsaledata() const;
  private:
  bool _internal_has_includeforsaledata() const;
  public:
  void clear_includeforsaledata();
  bool includeforsaledata() const;
  void set_includeforsaledata(bool value);
  private:
  bool _internal_includeforsaledata() const;
  void _internal_set_includeforsaledata(bool value);
  public:

  // optional bool includemetadata = 11 [(.description) = "If true, populate the metadata field."];
  bool has_includemetadata() const;
  private:
  bool _internal_has_includemetadata() const;
  public:
  void clear_includemetadata();
  bool includemetadata() const;
  void set_includemetadata(bool value);
  private:
  bool _internal_includemetadata() const;
  void _internal_set_includemetadata(bool value);
  public:

  // optional int32 language = 12 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional uint32 return_playtime_stats = 13 [(.description) = "Return playtime stats for the specified number of days before today."];
  bool has_return_playtime_stats() const;
  private:
  bool _internal_has_return_playtime_stats() const;
  public:
  void clear_return_playtime_stats();
  uint32_t return_playtime_stats() const;
  void set_return_playtime_stats(uint32_t value);
  private:
  uint32_t _internal_return_playtime_stats() const;
  void _internal_set_return_playtime_stats(uint32_t value);
  public:

  // optional uint32 appid = 14;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // optional bool strip_description_bbcode = 15 [(.description) = "Strips BBCode from descriptions."];
  bool has_strip_description_bbcode() const;
  private:
  bool _internal_has_strip_description_bbcode() const;
  public:
  void clear_strip_description_bbcode();
  bool strip_description_bbcode() const;
  void set_strip_description_bbcode(bool value);
  private:
  bool _internal_strip_description_bbcode() const;
  void _internal_set_strip_description_bbcode(bool value);
  public:

  // optional bool includereactions = 17 [default = false, (.description) = "If true, then reactions to items will be returned."];
  bool has_includereactions() const;
  private:
  bool _internal_has_includereactions() const;
  public:
  void clear_includereactions();
  bool includereactions() const;
  void set_includereactions(bool value);
  private:
  bool _internal_includereactions() const;
  void _internal_set_includereactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  bool includetags_;
  bool includeadditionalpreviews_;
  bool includechildren_;
  bool includekvtags_;
  bool includevotes_;
  bool short_description_;
  bool includeforsaledata_;
  bool includemetadata_;
  int32_t language_;
  uint32_t return_playtime_stats_;
  uint32_t appid_;
  int desired_revision_;
  bool strip_description_bbcode_;
  bool includereactions_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Tag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Tag) */ {
 public:
  inline PublishedFileDetails_Tag() : PublishedFileDetails_Tag(nullptr) {}
  ~PublishedFileDetails_Tag() override;
  explicit constexpr PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from);
  PublishedFileDetails_Tag(PublishedFileDetails_Tag&& from) noexcept
    : PublishedFileDetails_Tag() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Tag& operator=(const PublishedFileDetails_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Tag& operator=(PublishedFileDetails_Tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Tag* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Tag*>(
               &_PublishedFileDetails_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PublishedFileDetails_Tag& a, PublishedFileDetails_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Tag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_Tag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_Tag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_Tag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Tag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Tag";
  }
  protected:
  explicit PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kDisplayNameFieldNumber = 3,
    kAdminonlyFieldNumber = 2,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional string display_name = 3;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional bool adminonly = 2;
  bool has_adminonly() const;
  private:
  bool _internal_has_adminonly() const;
  public:
  void clear_adminonly();
  bool adminonly() const;
  void set_adminonly(bool value);
  private:
  bool _internal_adminonly() const;
  void _internal_set_adminonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  bool adminonly_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Preview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Preview) */ {
 public:
  inline PublishedFileDetails_Preview() : PublishedFileDetails_Preview(nullptr) {}
  ~PublishedFileDetails_Preview() override;
  explicit constexpr PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from);
  PublishedFileDetails_Preview(PublishedFileDetails_Preview&& from) noexcept
    : PublishedFileDetails_Preview() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Preview& operator=(const PublishedFileDetails_Preview& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Preview& operator=(PublishedFileDetails_Preview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_Preview& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Preview* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Preview*>(
               &_PublishedFileDetails_Preview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PublishedFileDetails_Preview& a, PublishedFileDetails_Preview& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Preview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Preview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_Preview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_Preview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_Preview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_Preview& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Preview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Preview";
  }
  protected:
  explicit PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 3,
    kFilenameFieldNumber = 5,
    kYoutubevideoidFieldNumber = 6,
    kExternalReferenceFieldNumber = 8,
    kPreviewidFieldNumber = 1,
    kSortorderFieldNumber = 2,
    kSizeFieldNumber = 4,
    kPreviewTypeFieldNumber = 7,
  };
  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 5;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string youtubevideoid = 6;
  bool has_youtubevideoid() const;
  private:
  bool _internal_has_youtubevideoid() const;
  public:
  void clear_youtubevideoid();
  const std::string& youtubevideoid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_youtubevideoid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_youtubevideoid();
  PROTOBUF_NODISCARD std::string* release_youtubevideoid();
  void set_allocated_youtubevideoid(std::string* youtubevideoid);
  private:
  const std::string& _internal_youtubevideoid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youtubevideoid(const std::string& value);
  std::string* _internal_mutable_youtubevideoid();
  public:

  // optional string external_reference = 8;
  bool has_external_reference() const;
  private:
  bool _internal_has_external_reference() const;
  public:
  void clear_external_reference();
  const std::string& external_reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_reference();
  PROTOBUF_NODISCARD std::string* release_external_reference();
  void set_allocated_external_reference(std::string* external_reference);
  private:
  const std::string& _internal_external_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_reference(const std::string& value);
  std::string* _internal_mutable_external_reference();
  public:

  // optional uint64 previewid = 1;
  bool has_previewid() const;
  private:
  bool _internal_has_previewid() const;
  public:
  void clear_previewid();
  uint64_t previewid() const;
  void set_previewid(uint64_t value);
  private:
  uint64_t _internal_previewid() const;
  void _internal_set_previewid(uint64_t value);
  public:

  // optional uint32 sortorder = 2;
  bool has_sortorder() const;
  private:
  bool _internal_has_sortorder() const;
  public:
  void clear_sortorder();
  uint32_t sortorder() const;
  void set_sortorder(uint32_t value);
  private:
  uint32_t _internal_sortorder() const;
  void _internal_set_sortorder(uint32_t value);
  public:

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 preview_type = 7;
  bool has_preview_type() const;
  private:
  bool _internal_has_preview_type() const;
  public:
  void clear_preview_type();
  uint32_t preview_type() const;
  void set_preview_type(uint32_t value);
  private:
  uint32_t _internal_preview_type() const;
  void _internal_set_preview_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Preview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtubevideoid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_reference_;
  uint64_t previewid_;
  uint32_t sortorder_;
  uint32_t size_;
  uint32_t preview_type_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Child final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Child) */ {
 public:
  inline PublishedFileDetails_Child() : PublishedFileDetails_Child(nullptr) {}
  ~PublishedFileDetails_Child() override;
  explicit constexpr PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Child(const PublishedFileDetails_Child& from);
  PublishedFileDetails_Child(PublishedFileDetails_Child&& from) noexcept
    : PublishedFileDetails_Child() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Child& operator=(const PublishedFileDetails_Child& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Child& operator=(PublishedFileDetails_Child&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_Child& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Child* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Child*>(
               &_PublishedFileDetails_Child_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PublishedFileDetails_Child& a, PublishedFileDetails_Child& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Child* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Child* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_Child* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_Child>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_Child& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_Child& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Child* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Child";
  }
  protected:
  explicit PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kSortorderFieldNumber = 2,
    kFileTypeFieldNumber = 3,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 sortorder = 2;
  bool has_sortorder() const;
  private:
  bool _internal_has_sortorder() const;
  public:
  void clear_sortorder();
  uint32_t sortorder() const;
  void set_sortorder(uint32_t value);
  private:
  uint32_t _internal_sortorder() const;
  void _internal_set_sortorder(uint32_t value);
  public:

  // optional uint32 file_type = 3;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  uint32_t file_type() const;
  void set_file_type(uint32_t value);
  private:
  uint32_t _internal_file_type() const;
  void _internal_set_file_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Child)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t sortorder_;
  uint32_t file_type_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_KVTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.KVTag) */ {
 public:
  inline PublishedFileDetails_KVTag() : PublishedFileDetails_KVTag(nullptr) {}
  ~PublishedFileDetails_KVTag() override;
  explicit constexpr PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from);
  PublishedFileDetails_KVTag(PublishedFileDetails_KVTag&& from) noexcept
    : PublishedFileDetails_KVTag() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_KVTag& operator=(const PublishedFileDetails_KVTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_KVTag& operator=(PublishedFileDetails_KVTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_KVTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_KVTag* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_KVTag*>(
               &_PublishedFileDetails_KVTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PublishedFileDetails_KVTag& a, PublishedFileDetails_KVTag& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_KVTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_KVTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_KVTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_KVTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_KVTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_KVTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_KVTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.KVTag";
  }
  protected:
  explicit PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.KVTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_VoteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.VoteData) */ {
 public:
  inline PublishedFileDetails_VoteData() : PublishedFileDetails_VoteData(nullptr) {}
  ~PublishedFileDetails_VoteData() override;
  explicit constexpr PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from);
  PublishedFileDetails_VoteData(PublishedFileDetails_VoteData&& from) noexcept
    : PublishedFileDetails_VoteData() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_VoteData& operator=(const PublishedFileDetails_VoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_VoteData& operator=(PublishedFileDetails_VoteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_VoteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_VoteData* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_VoteData*>(
               &_PublishedFileDetails_VoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PublishedFileDetails_VoteData& a, PublishedFileDetails_VoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_VoteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_VoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_VoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_VoteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_VoteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_VoteData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_VoteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.VoteData";
  }
  protected:
  explicit PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kVotesUpFieldNumber = 2,
    kVotesDownFieldNumber = 3,
  };
  // optional float score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional uint32 votes_up = 2;
  bool has_votes_up() const;
  private:
  bool _internal_has_votes_up() const;
  public:
  void clear_votes_up();
  uint32_t votes_up() const;
  void set_votes_up(uint32_t value);
  private:
  uint32_t _internal_votes_up() const;
  void _internal_set_votes_up(uint32_t value);
  public:

  // optional uint32 votes_down = 3;
  bool has_votes_down() const;
  private:
  bool _internal_has_votes_down() const;
  public:
  void clear_votes_down();
  uint32_t votes_down() const;
  void set_votes_down(uint32_t value);
  private:
  uint32_t _internal_votes_down() const;
  void _internal_set_votes_down(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.VoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float score_;
  uint32_t votes_up_;
  uint32_t votes_down_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_ForSaleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.ForSaleData) */ {
 public:
  inline PublishedFileDetails_ForSaleData() : PublishedFileDetails_ForSaleData(nullptr) {}
  ~PublishedFileDetails_ForSaleData() override;
  explicit constexpr PublishedFileDetails_ForSaleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_ForSaleData(const PublishedFileDetails_ForSaleData& from);
  PublishedFileDetails_ForSaleData(PublishedFileDetails_ForSaleData&& from) noexcept
    : PublishedFileDetails_ForSaleData() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_ForSaleData& operator=(const PublishedFileDetails_ForSaleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_ForSaleData& operator=(PublishedFileDetails_ForSaleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_ForSaleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_ForSaleData* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_ForSaleData*>(
               &_PublishedFileDetails_ForSaleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PublishedFileDetails_ForSaleData& a, PublishedFileDetails_ForSaleData& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_ForSaleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_ForSaleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_ForSaleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_ForSaleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_ForSaleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_ForSaleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_ForSaleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.ForSaleData";
  }
  protected:
  explicit PublishedFileDetails_ForSaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceCategoryFieldNumber = 2,
    kEstatusFieldNumber = 3,
    kIsForSaleFieldNumber = 1,
    kPriceIsPayWhatYouWantFieldNumber = 5,
    kPriceCategoryFloorFieldNumber = 4,
    kDiscountPercentageFieldNumber = 6,
  };
  // optional uint32 price_category = 2;
  bool has_price_category() const;
  private:
  bool _internal_has_price_category() const;
  public:
  void clear_price_category();
  uint32_t price_category() const;
  void set_price_category(uint32_t value);
  private:
  uint32_t _internal_price_category() const;
  void _internal_set_price_category(uint32_t value);
  public:

  // optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
  bool has_estatus() const;
  private:
  bool _internal_has_estatus() const;
  public:
  void clear_estatus();
  ::EPublishedFileForSaleStatus estatus() const;
  void set_estatus(::EPublishedFileForSaleStatus value);
  private:
  ::EPublishedFileForSaleStatus _internal_estatus() const;
  void _internal_set_estatus(::EPublishedFileForSaleStatus value);
  public:

  // optional bool is_for_sale = 1;
  bool has_is_for_sale() const;
  private:
  bool _internal_has_is_for_sale() const;
  public:
  void clear_is_for_sale();
  bool is_for_sale() const;
  void set_is_for_sale(bool value);
  private:
  bool _internal_is_for_sale() const;
  void _internal_set_is_for_sale(bool value);
  public:

  // optional bool price_is_pay_what_you_want = 5;
  bool has_price_is_pay_what_you_want() const;
  private:
  bool _internal_has_price_is_pay_what_you_want() const;
  public:
  void clear_price_is_pay_what_you_want();
  bool price_is_pay_what_you_want() const;
  void set_price_is_pay_what_you_want(bool value);
  private:
  bool _internal_price_is_pay_what_you_want() const;
  void _internal_set_price_is_pay_what_you_want(bool value);
  public:

  // optional uint32 price_category_floor = 4;
  bool has_price_category_floor() const;
  private:
  bool _internal_has_price_category_floor() const;
  public:
  void clear_price_category_floor();
  uint32_t price_category_floor() const;
  void set_price_category_floor(uint32_t value);
  private:
  uint32_t _internal_price_category_floor() const;
  void _internal_set_price_category_floor(uint32_t value);
  public:

  // optional uint32 discount_percentage = 6;
  bool has_discount_percentage() const;
  private:
  bool _internal_has_discount_percentage() const;
  public:
  void clear_discount_percentage();
  uint32_t discount_percentage() const;
  void set_discount_percentage(uint32_t value);
  private:
  uint32_t _internal_discount_percentage() const;
  void _internal_set_discount_percentage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.ForSaleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t price_category_;
  int estatus_;
  bool is_for_sale_;
  bool price_is_pay_what_you_want_;
  uint32_t price_category_floor_;
  uint32_t discount_percentage_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_PlaytimeStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.PlaytimeStats) */ {
 public:
  inline PublishedFileDetails_PlaytimeStats() : PublishedFileDetails_PlaytimeStats(nullptr) {}
  ~PublishedFileDetails_PlaytimeStats() override;
  explicit constexpr PublishedFileDetails_PlaytimeStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_PlaytimeStats(const PublishedFileDetails_PlaytimeStats& from);
  PublishedFileDetails_PlaytimeStats(PublishedFileDetails_PlaytimeStats&& from) noexcept
    : PublishedFileDetails_PlaytimeStats() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_PlaytimeStats& operator=(const PublishedFileDetails_PlaytimeStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_PlaytimeStats& operator=(PublishedFileDetails_PlaytimeStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_PlaytimeStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_PlaytimeStats* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_PlaytimeStats*>(
               &_PublishedFileDetails_PlaytimeStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PublishedFileDetails_PlaytimeStats& a, PublishedFileDetails_PlaytimeStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_PlaytimeStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_PlaytimeStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_PlaytimeStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_PlaytimeStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_PlaytimeStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_PlaytimeStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_PlaytimeStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.PlaytimeStats";
  }
  protected:
  explicit PublishedFileDetails_PlaytimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaytimeSecondsFieldNumber = 1,
    kNumSessionsFieldNumber = 2,
  };
  // optional uint64 playtime_seconds = 1;
  bool has_playtime_seconds() const;
  private:
  bool _internal_has_playtime_seconds() const;
  public:
  void clear_playtime_seconds();
  uint64_t playtime_seconds() const;
  void set_playtime_seconds(uint64_t value);
  private:
  uint64_t _internal_playtime_seconds() const;
  void _internal_set_playtime_seconds(uint64_t value);
  public:

  // optional uint64 num_sessions = 2;
  bool has_num_sessions() const;
  private:
  bool _internal_has_num_sessions() const;
  public:
  void clear_num_sessions();
  uint64_t num_sessions() const;
  void set_num_sessions(uint64_t value);
  private:
  uint64_t _internal_num_sessions() const;
  void _internal_set_num_sessions(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.PlaytimeStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t playtime_seconds_;
  uint64_t num_sessions_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Reaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Reaction) */ {
 public:
  inline PublishedFileDetails_Reaction() : PublishedFileDetails_Reaction(nullptr) {}
  ~PublishedFileDetails_Reaction() override;
  explicit constexpr PublishedFileDetails_Reaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Reaction(const PublishedFileDetails_Reaction& from);
  PublishedFileDetails_Reaction(PublishedFileDetails_Reaction&& from) noexcept
    : PublishedFileDetails_Reaction() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Reaction& operator=(const PublishedFileDetails_Reaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Reaction& operator=(PublishedFileDetails_Reaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails_Reaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Reaction* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Reaction*>(
               &_PublishedFileDetails_Reaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PublishedFileDetails_Reaction& a, PublishedFileDetails_Reaction& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Reaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Reaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails_Reaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails_Reaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails_Reaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails_Reaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Reaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Reaction";
  }
  protected:
  explicit PublishedFileDetails_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactionidFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional uint32 reactionid = 1;
  bool has_reactionid() const;
  private:
  bool _internal_has_reactionid() const;
  public:
  void clear_reactionid();
  uint32_t reactionid() const;
  void set_reactionid(uint32_t value);
  private:
  uint32_t _internal_reactionid() const;
  void _internal_set_reactionid(uint32_t value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Reaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t reactionid_;
  uint32_t count_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails) */ {
 public:
  inline PublishedFileDetails() : PublishedFileDetails(nullptr) {}
  ~PublishedFileDetails() override;
  explicit constexpr PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails(const PublishedFileDetails& from);
  PublishedFileDetails(PublishedFileDetails&& from) noexcept
    : PublishedFileDetails() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails& operator=(const PublishedFileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails& operator=(PublishedFileDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishedFileDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails*>(
               &_PublishedFileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PublishedFileDetails& a, PublishedFileDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishedFileDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishedFileDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishedFileDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishedFileDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails";
  }
  protected:
  explicit PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PublishedFileDetails_Tag Tag;
  typedef PublishedFileDetails_Preview Preview;
  typedef PublishedFileDetails_Child Child;
  typedef PublishedFileDetails_KVTag KVTag;
  typedef PublishedFileDetails_VoteData VoteData;
  typedef PublishedFileDetails_ForSaleData ForSaleData;
  typedef PublishedFileDetails_PlaytimeStats PlaytimeStats;
  typedef PublishedFileDetails_Reaction Reaction;

  // accessors -------------------------------------------------------

  enum : int {
    kPreviewsFieldNumber = 51,
    kTagsFieldNumber = 52,
    kChildrenFieldNumber = 53,
    kKvtagsFieldNumber = 54,
    kAvailableRevisionsFieldNumber = 69,
    kReactionsFieldNumber = 70,
    kContentDescriptoridsFieldNumber = 72,
    kFilenameFieldNumber = 7,
    kFileUrlFieldNumber = 10,
    kPreviewUrlFieldNumber = 11,
    kYoutubevideoidFieldNumber = 12,
    kUrlFieldNumber = 13,
    kTitleFieldNumber = 16,
    kFileDescriptionFieldNumber = 17,
    kShortDescriptionFieldNumber = 18,
    kBanReasonFieldNumber = 29,
    kAppNameFieldNumber = 33,
    kImageUrlFieldNumber = 45,
    kShortcutnameFieldNumber = 48,
    kMetadataFieldNumber = 58,
    kVoteDataFieldNumber = 55,
    kForSaleDataFieldNumber = 57,
    kPlaytimeStatsFieldNumber = 64,
    kPublishedfileidFieldNumber = 2,
    kResultFieldNumber = 1,
    kCreatorAppidFieldNumber = 4,
    kCreatorFieldNumber = 3,
    kConsumerAppidFieldNumber = 5,
    kConsumerShortcutidFieldNumber = 6,
    kFileSizeFieldNumber = 8,
    kPreviewFileSizeFieldNumber = 9,
    kHcontentFileFieldNumber = 14,
    kHcontentPreviewFieldNumber = 15,
    kTimeCreatedFieldNumber = 19,
    kTimeUpdatedFieldNumber = 20,
    kVisibilityFieldNumber = 21,
    kFlagsFieldNumber = 22,
    kWorkshopFileFieldNumber = 23,
    kWorkshopAcceptedFieldNumber = 24,
    kShowSubscribeAllFieldNumber = 25,
    kBannedFieldNumber = 28,
    kNumCommentsDeveloperFieldNumber = 26,
    kBannerFieldNumber = 30,
    kNumCommentsPublicFieldNumber = 27,
    kFileTypeFieldNumber = 34,
    kSubscriptionsFieldNumber = 36,
    kCanBeDeletedFieldNumber = 31,
    kIncompatibleFieldNumber = 32,
    kCanSubscribeFieldNumber = 35,
    kSpoilerTagFieldNumber = 46,
    kFavoritedFieldNumber = 37,
    kFollowersFieldNumber = 38,
    kLifetimeSubscriptionsFieldNumber = 39,
    kLifetimeFavoritedFieldNumber = 40,
    kLifetimeFollowersFieldNumber = 41,
    kViewsFieldNumber = 42,
    kImageWidthFieldNumber = 43,
    kImageHeightFieldNumber = 44,
    kShortcutidFieldNumber = 47,
    kNumChildrenFieldNumber = 49,
    kNumReportsFieldNumber = 50,
    kTimeSubscribedFieldNumber = 56,
    kLifetimePlaytimeFieldNumber = 62,
    kLifetimePlaytimeSessionsFieldNumber = 63,
    kLanguageFieldNumber = 61,
    kMaybeInappropriateSexFieldNumber = 65,
    kMaybeInappropriateViolenceFieldNumber = 66,
    kRevisionChangeNumberFieldNumber = 67,
    kRevisionFieldNumber = 68,
    kBanTextCheckResultFieldNumber = 71,
    kSearchScoreFieldNumber = 73,
  };
  // repeated .PublishedFileDetails.Preview previews = 51;
  int previews_size() const;
  private:
  int _internal_previews_size() const;
  public:
  void clear_previews();
  ::PublishedFileDetails_Preview* mutable_previews(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >*
      mutable_previews();
  private:
  const ::PublishedFileDetails_Preview& _internal_previews(int index) const;
  ::PublishedFileDetails_Preview* _internal_add_previews();
  public:
  const ::PublishedFileDetails_Preview& previews(int index) const;
  ::PublishedFileDetails_Preview* add_previews();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >&
      previews() const;

  // repeated .PublishedFileDetails.Tag tags = 52;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::PublishedFileDetails_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >*
      mutable_tags();
  private:
  const ::PublishedFileDetails_Tag& _internal_tags(int index) const;
  ::PublishedFileDetails_Tag* _internal_add_tags();
  public:
  const ::PublishedFileDetails_Tag& tags(int index) const;
  ::PublishedFileDetails_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >&
      tags() const;

  // repeated .PublishedFileDetails.Child children = 53;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::PublishedFileDetails_Child* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >*
      mutable_children();
  private:
  const ::PublishedFileDetails_Child& _internal_children(int index) const;
  ::PublishedFileDetails_Child* _internal_add_children();
  public:
  const ::PublishedFileDetails_Child& children(int index) const;
  ::PublishedFileDetails_Child* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >&
      children() const;

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  int kvtags_size() const;
  private:
  int _internal_kvtags_size() const;
  public:
  void clear_kvtags();
  ::PublishedFileDetails_KVTag* mutable_kvtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
      mutable_kvtags();
  private:
  const ::PublishedFileDetails_KVTag& _internal_kvtags(int index) const;
  ::PublishedFileDetails_KVTag* _internal_add_kvtags();
  public:
  const ::PublishedFileDetails_KVTag& kvtags(int index) const;
  ::PublishedFileDetails_KVTag* add_kvtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
      kvtags() const;

  // repeated .EPublishedFileRevision available_revisions = 69 [(.description) = "Available revisions"];
  int available_revisions_size() const;
  private:
  int _internal_available_revisions_size() const;
  public:
  void clear_available_revisions();
  private:
  ::EPublishedFileRevision _internal_available_revisions(int index) const;
  void _internal_add_available_revisions(::EPublishedFileRevision value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_available_revisions();
  public:
  ::EPublishedFileRevision available_revisions(int index) const;
  void set_available_revisions(int index, ::EPublishedFileRevision value);
  void add_available_revisions(::EPublishedFileRevision value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& available_revisions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_available_revisions();

  // repeated .PublishedFileDetails.Reaction reactions = 70 [(.description) = "Reactions to this item"];
  int reactions_size() const;
  private:
  int _internal_reactions_size() const;
  public:
  void clear_reactions();
  ::PublishedFileDetails_Reaction* mutable_reactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Reaction >*
      mutable_reactions();
  private:
  const ::PublishedFileDetails_Reaction& _internal_reactions(int index) const;
  ::PublishedFileDetails_Reaction* _internal_add_reactions();
  public:
  const ::PublishedFileDetails_Reaction& reactions(int index) const;
  ::PublishedFileDetails_Reaction* add_reactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Reaction >&
      reactions() const;

  // repeated .EContentDescriptorID content_descriptorids = 72;
  int content_descriptorids_size() const;
  private:
  int _internal_content_descriptorids_size() const;
  public:
  void clear_content_descriptorids();
  private:
  ::EContentDescriptorID _internal_content_descriptorids(int index) const;
  void _internal_add_content_descriptorids(::EContentDescriptorID value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_content_descriptorids();
  public:
  ::EContentDescriptorID content_descriptorids(int index) const;
  void set_content_descriptorids(int index, ::EContentDescriptorID value);
  void add_content_descriptorids(::EContentDescriptorID value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& content_descriptorids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_content_descriptorids();

  // optional string filename = 7;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string file_url = 10;
  bool has_file_url() const;
  private:
  bool _internal_has_file_url() const;
  public:
  void clear_file_url();
  const std::string& file_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_url();
  PROTOBUF_NODISCARD std::string* release_file_url();
  void set_allocated_file_url(std::string* file_url);
  private:
  const std::string& _internal_file_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_url(const std::string& value);
  std::string* _internal_mutable_file_url();
  public:

  // optional string preview_url = 11;
  bool has_preview_url() const;
  private:
  bool _internal_has_preview_url() const;
  public:
  void clear_preview_url();
  const std::string& preview_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preview_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preview_url();
  PROTOBUF_NODISCARD std::string* release_preview_url();
  void set_allocated_preview_url(std::string* preview_url);
  private:
  const std::string& _internal_preview_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preview_url(const std::string& value);
  std::string* _internal_mutable_preview_url();
  public:

  // optional string youtubevideoid = 12;
  bool has_youtubevideoid() const;
  private:
  bool _internal_has_youtubevideoid() const;
  public:
  void clear_youtubevideoid();
  const std::string& youtubevideoid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_youtubevideoid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_youtubevideoid();
  PROTOBUF_NODISCARD std::string* release_youtubevideoid();
  void set_allocated_youtubevideoid(std::string* youtubevideoid);
  private:
  const std::string& _internal_youtubevideoid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youtubevideoid(const std::string& value);
  std::string* _internal_mutable_youtubevideoid();
  public:

  // optional string url = 13;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 16;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 17;
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_description();
  PROTOBUF_NODISCARD std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string short_description = 18;
  bool has_short_description() const;
  private:
  bool _internal_has_short_description() const;
  public:
  void clear_short_description();
  const std::string& short_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_description();
  PROTOBUF_NODISCARD std::string* release_short_description();
  void set_allocated_short_description(std::string* short_description);
  private:
  const std::string& _internal_short_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_description(const std::string& value);
  std::string* _internal_mutable_short_description();
  public:

  // optional string ban_reason = 29;
  bool has_ban_reason() const;
  private:
  bool _internal_has_ban_reason() const;
  public:
  void clear_ban_reason();
  const std::string& ban_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ban_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ban_reason();
  PROTOBUF_NODISCARD std::string* release_ban_reason();
  void set_allocated_ban_reason(std::string* ban_reason);
  private:
  const std::string& _internal_ban_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ban_reason(const std::string& value);
  std::string* _internal_mutable_ban_reason();
  public:

  // optional string app_name = 33;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string image_url = 45;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string shortcutname = 48;
  bool has_shortcutname() const;
  private:
  bool _internal_has_shortcutname() const;
  public:
  void clear_shortcutname();
  const std::string& shortcutname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shortcutname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shortcutname();
  PROTOBUF_NODISCARD std::string* release_shortcutname();
  void set_allocated_shortcutname(std::string* shortcutname);
  private:
  const std::string& _internal_shortcutname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shortcutname(const std::string& value);
  std::string* _internal_mutable_shortcutname();
  public:

  // optional string metadata = 58 [(.description) = "Metadata associated with the item"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional .PublishedFileDetails.VoteData vote_data = 55;
  bool has_vote_data() const;
  private:
  bool _internal_has_vote_data() const;
  public:
  void clear_vote_data();
  const ::PublishedFileDetails_VoteData& vote_data() const;
  PROTOBUF_NODISCARD ::PublishedFileDetails_VoteData* release_vote_data();
  ::PublishedFileDetails_VoteData* mutable_vote_data();
  void set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data);
  private:
  const ::PublishedFileDetails_VoteData& _internal_vote_data() const;
  ::PublishedFileDetails_VoteData* _internal_mutable_vote_data();
  public:
  void unsafe_arena_set_allocated_vote_data(
      ::PublishedFileDetails_VoteData* vote_data);
  ::PublishedFileDetails_VoteData* unsafe_arena_release_vote_data();

  // optional .PublishedFileDetails.ForSaleData for_sale_data = 57 [(.description) = "Pricing information, if applicable."];
  bool has_for_sale_data() const;
  private:
  bool _internal_has_for_sale_data() const;
  public:
  void clear_for_sale_data();
  const ::PublishedFileDetails_ForSaleData& for_sale_data() const;
  PROTOBUF_NODISCARD ::PublishedFileDetails_ForSaleData* release_for_sale_data();
  ::PublishedFileDetails_ForSaleData* mutable_for_sale_data();
  void set_allocated_for_sale_data(::PublishedFileDetails_ForSaleData* for_sale_data);
  private:
  const ::PublishedFileDetails_ForSaleData& _internal_for_sale_data() const;
  ::PublishedFileDetails_ForSaleData* _internal_mutable_for_sale_data();
  public:
  void unsafe_arena_set_allocated_for_sale_data(
      ::PublishedFileDetails_ForSaleData* for_sale_data);
  ::PublishedFileDetails_ForSaleData* unsafe_arena_release_for_sale_data();

  // optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
  bool has_playtime_stats() const;
  private:
  bool _internal_has_playtime_stats() const;
  public:
  void clear_playtime_stats();
  const ::PublishedFileDetails_PlaytimeStats& playtime_stats() const;
  PROTOBUF_NODISCARD ::PublishedFileDetails_PlaytimeStats* release_playtime_stats();
  ::PublishedFileDetails_PlaytimeStats* mutable_playtime_stats();
  void set_allocated_playtime_stats(::PublishedFileDetails_PlaytimeStats* playtime_stats);
  private:
  const ::PublishedFileDetails_PlaytimeStats& _internal_playtime_stats() const;
  ::PublishedFileDetails_PlaytimeStats* _internal_mutable_playtime_stats();
  public:
  void unsafe_arena_set_allocated_playtime_stats(
      ::PublishedFileDetails_PlaytimeStats* playtime_stats);
  ::PublishedFileDetails_PlaytimeStats* unsafe_arena_release_playtime_stats();

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // optional uint32 creator_appid = 4;
  bool has_creator_appid() const;
  private:
  bool _internal_has_creator_appid() const;
  public:
  void clear_creator_appid();
  uint32_t creator_appid() const;
  void set_creator_appid(uint32_t value);
  private:
  uint32_t _internal_creator_appid() const;
  void _internal_set_creator_appid(uint32_t value);
  public:

  // optional fixed64 creator = 3;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  uint64_t creator() const;
  void set_creator(uint64_t value);
  private:
  uint64_t _internal_creator() const;
  void _internal_set_creator(uint64_t value);
  public:

  // optional uint32 consumer_appid = 5;
  bool has_consumer_appid() const;
  private:
  bool _internal_has_consumer_appid() const;
  public:
  void clear_consumer_appid();
  uint32_t consumer_appid() const;
  void set_consumer_appid(uint32_t value);
  private:
  uint32_t _internal_consumer_appid() const;
  void _internal_set_consumer_appid(uint32_t value);
  public:

  // optional uint32 consumer_shortcutid = 6;
  bool has_consumer_shortcutid() const;
  private:
  bool _internal_has_consumer_shortcutid() const;
  public:
  void clear_consumer_shortcutid();
  uint32_t consumer_shortcutid() const;
  void set_consumer_shortcutid(uint32_t value);
  private:
  uint32_t _internal_consumer_shortcutid() const;
  void _internal_set_consumer_shortcutid(uint32_t value);
  public:

  // optional uint64 file_size = 8;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint64_t file_size() const;
  void set_file_size(uint64_t value);
  private:
  uint64_t _internal_file_size() const;
  void _internal_set_file_size(uint64_t value);
  public:

  // optional uint64 preview_file_size = 9;
  bool has_preview_file_size() const;
  private:
  bool _internal_has_preview_file_size() const;
  public:
  void clear_preview_file_size();
  uint64_t preview_file_size() const;
  void set_preview_file_size(uint64_t value);
  private:
  uint64_t _internal_preview_file_size() const;
  void _internal_set_preview_file_size(uint64_t value);
  public:

  // optional fixed64 hcontent_file = 14;
  bool has_hcontent_file() const;
  private:
  bool _internal_has_hcontent_file() const;
  public:
  void clear_hcontent_file();
  uint64_t hcontent_file() const;
  void set_hcontent_file(uint64_t value);
  private:
  uint64_t _internal_hcontent_file() const;
  void _internal_set_hcontent_file(uint64_t value);
  public:

  // optional fixed64 hcontent_preview = 15;
  bool has_hcontent_preview() const;
  private:
  bool _internal_has_hcontent_preview() const;
  public:
  void clear_hcontent_preview();
  uint64_t hcontent_preview() const;
  void set_hcontent_preview(uint64_t value);
  private:
  uint64_t _internal_hcontent_preview() const;
  void _internal_set_hcontent_preview(uint64_t value);
  public:

  // optional uint32 time_created = 19;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional uint32 time_updated = 20;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  uint32_t time_updated() const;
  void set_time_updated(uint32_t value);
  private:
  uint32_t _internal_time_updated() const;
  void _internal_set_time_updated(uint32_t value);
  public:

  // optional uint32 visibility = 21;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  uint32_t visibility() const;
  void set_visibility(uint32_t value);
  private:
  uint32_t _internal_visibility() const;
  void _internal_set_visibility(uint32_t value);
  public:

  // optional uint32 flags = 22;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional bool workshop_file = 23;
  bool has_workshop_file() const;
  private:
  bool _internal_has_workshop_file() const;
  public:
  void clear_workshop_file();
  bool workshop_file() const;
  void set_workshop_file(bool value);
  private:
  bool _internal_workshop_file() const;
  void _internal_set_workshop_file(bool value);
  public:

  // optional bool workshop_accepted = 24;
  bool has_workshop_accepted() const;
  private:
  bool _internal_has_workshop_accepted() const;
  public:
  void clear_workshop_accepted();
  bool workshop_accepted() const;
  void set_workshop_accepted(bool value);
  private:
  bool _internal_workshop_accepted() const;
  void _internal_set_workshop_accepted(bool value);
  public:

  // optional bool show_subscribe_all = 25;
  bool has_show_subscribe_all() const;
  private:
  bool _internal_has_show_subscribe_all() const;
  public:
  void clear_show_subscribe_all();
  bool show_subscribe_all() const;
  void set_show_subscribe_all(bool value);
  private:
  bool _internal_show_subscribe_all() const;
  void _internal_set_show_subscribe_all(bool value);
  public:

  // optional bool banned = 28;
  bool has_banned() const;
  private:
  bool _internal_has_banned() const;
  public:
  void clear_banned();
  bool banned() const;
  void set_banned(bool value);
  private:
  bool _internal_banned() const;
  void _internal_set_banned(bool value);
  public:

  // optional int32 num_comments_developer = 26;
  bool has_num_comments_developer() const;
  private:
  bool _internal_has_num_comments_developer() const;
  public:
  void clear_num_comments_developer();
  int32_t num_comments_developer() const;
  void set_num_comments_developer(int32_t value);
  private:
  int32_t _internal_num_comments_developer() const;
  void _internal_set_num_comments_developer(int32_t value);
  public:

  // optional fixed64 banner = 30;
  bool has_banner() const;
  private:
  bool _internal_has_banner() const;
  public:
  void clear_banner();
  uint64_t banner() const;
  void set_banner(uint64_t value);
  private:
  uint64_t _internal_banner() const;
  void _internal_set_banner(uint64_t value);
  public:

  // optional int32 num_comments_public = 27;
  bool has_num_comments_public() const;
  private:
  bool _internal_has_num_comments_public() const;
  public:
  void clear_num_comments_public();
  int32_t num_comments_public() const;
  void set_num_comments_public(int32_t value);
  private:
  int32_t _internal_num_comments_public() const;
  void _internal_set_num_comments_public(int32_t value);
  public:

  // optional uint32 file_type = 34;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  uint32_t file_type() const;
  void set_file_type(uint32_t value);
  private:
  uint32_t _internal_file_type() const;
  void _internal_set_file_type(uint32_t value);
  public:

  // optional uint32 subscriptions = 36;
  bool has_subscriptions() const;
  private:
  bool _internal_has_subscriptions() const;
  public:
  void clear_subscriptions();
  uint32_t subscriptions() const;
  void set_subscriptions(uint32_t value);
  private:
  uint32_t _internal_subscriptions() const;
  void _internal_set_subscriptions(uint32_t value);
  public:

  // optional bool can_be_deleted = 31;
  bool has_can_be_deleted() const;
  private:
  bool _internal_has_can_be_deleted() const;
  public:
  void clear_can_be_deleted();
  bool can_be_deleted() const;
  void set_can_be_deleted(bool value);
  private:
  bool _internal_can_be_deleted() const;
  void _internal_set_can_be_deleted(bool value);
  public:

  // optional bool incompatible = 32;
  bool has_incompatible() const;
  private:
  bool _internal_has_incompatible() const;
  public:
  void clear_incompatible();
  bool incompatible() const;
  void set_incompatible(bool value);
  private:
  bool _internal_incompatible() const;
  void _internal_set_incompatible(bool value);
  public:

  // optional bool can_subscribe = 35;
  bool has_can_subscribe() const;
  private:
  bool _internal_has_can_subscribe() const;
  public:
  void clear_can_subscribe();
  bool can_subscribe() const;
  void set_can_subscribe(bool value);
  private:
  bool _internal_can_subscribe() const;
  void _internal_set_can_subscribe(bool value);
  public:

  // optional bool spoiler_tag = 46;
  bool has_spoiler_tag() const;
  private:
  bool _internal_has_spoiler_tag() const;
  public:
  void clear_spoiler_tag();
  bool spoiler_tag() const;
  void set_spoiler_tag(bool value);
  private:
  bool _internal_spoiler_tag() const;
  void _internal_set_spoiler_tag(bool value);
  public:

  // optional uint32 favorited = 37;
  bool has_favorited() const;
  private:
  bool _internal_has_favorited() const;
  public:
  void clear_favorited();
  uint32_t favorited() const;
  void set_favorited(uint32_t value);
  private:
  uint32_t _internal_favorited() const;
  void _internal_set_favorited(uint32_t value);
  public:

  // optional uint32 followers = 38;
  bool has_followers() const;
  private:
  bool _internal_has_followers() const;
  public:
  void clear_followers();
  uint32_t followers() const;
  void set_followers(uint32_t value);
  private:
  uint32_t _internal_followers() const;
  void _internal_set_followers(uint32_t value);
  public:

  // optional uint32 lifetime_subscriptions = 39;
  bool has_lifetime_subscriptions() const;
  private:
  bool _internal_has_lifetime_subscriptions() const;
  public:
  void clear_lifetime_subscriptions();
  uint32_t lifetime_subscriptions() const;
  void set_lifetime_subscriptions(uint32_t value);
  private:
  uint32_t _internal_lifetime_subscriptions() const;
  void _internal_set_lifetime_subscriptions(uint32_t value);
  public:

  // optional uint32 lifetime_favorited = 40;
  bool has_lifetime_favorited() const;
  private:
  bool _internal_has_lifetime_favorited() const;
  public:
  void clear_lifetime_favorited();
  uint32_t lifetime_favorited() const;
  void set_lifetime_favorited(uint32_t value);
  private:
  uint32_t _internal_lifetime_favorited() const;
  void _internal_set_lifetime_favorited(uint32_t value);
  public:

  // optional uint32 lifetime_followers = 41;
  bool has_lifetime_followers() const;
  private:
  bool _internal_has_lifetime_followers() const;
  public:
  void clear_lifetime_followers();
  uint32_t lifetime_followers() const;
  void set_lifetime_followers(uint32_t value);
  private:
  uint32_t _internal_lifetime_followers() const;
  void _internal_set_lifetime_followers(uint32_t value);
  public:

  // optional uint32 views = 42;
  bool has_views() const;
  private:
  bool _internal_has_views() const;
  public:
  void clear_views();
  uint32_t views() const;
  void set_views(uint32_t value);
  private:
  uint32_t _internal_views() const;
  void _internal_set_views(uint32_t value);
  public:

  // optional uint32 image_width = 43;
  bool has_image_width() const;
  private:
  bool _internal_has_image_width() const;
  public:
  void clear_image_width();
  uint32_t image_width() const;
  void set_image_width(uint32_t value);
  private:
  uint32_t _internal_image_width() const;
  void _internal_set_image_width(uint32_t value);
  public:

  // optional uint32 image_height = 44;
  bool has_image_height() const;
  private:
  bool _internal_has_image_height() const;
  public:
  void clear_image_height();
  uint32_t image_height() const;
  void set_image_height(uint32_t value);
  private:
  uint32_t _internal_image_height() const;
  void _internal_set_image_height(uint32_t value);
  public:

  // optional uint32 shortcutid = 47;
  bool has_shortcutid() const;
  private:
  bool _internal_has_shortcutid() const;
  public:
  void clear_shortcutid();
  uint32_t shortcutid() const;
  void set_shortcutid(uint32_t value);
  private:
  uint32_t _internal_shortcutid() const;
  void _internal_set_shortcutid(uint32_t value);
  public:

  // optional uint32 num_children = 49;
  bool has_num_children() const;
  private:
  bool _internal_has_num_children() const;
  public:
  void clear_num_children();
  uint32_t num_children() const;
  void set_num_children(uint32_t value);
  private:
  uint32_t _internal_num_children() const;
  void _internal_set_num_children(uint32_t value);
  public:

  // optional uint32 num_reports = 50;
  bool has_num_reports() const;
  private:
  bool _internal_has_num_reports() const;
  public:
  void clear_num_reports();
  uint32_t num_reports() const;
  void set_num_reports(uint32_t value);
  private:
  uint32_t _internal_num_reports() const;
  void _internal_set_num_reports(uint32_t value);
  public:

  // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  bool has_time_subscribed() const;
  private:
  bool _internal_has_time_subscribed() const;
  public:
  void clear_time_subscribed();
  uint32_t time_subscribed() const;
  void set_time_subscribed(uint32_t value);
  private:
  uint32_t _internal_time_subscribed() const;
  void _internal_set_time_subscribed(uint32_t value);
  public:

  // optional uint64 lifetime_playtime = 62;
  bool has_lifetime_playtime() const;
  private:
  bool _internal_has_lifetime_playtime() const;
  public:
  void clear_lifetime_playtime();
  uint64_t lifetime_playtime() const;
  void set_lifetime_playtime(uint64_t value);
  private:
  uint64_t _internal_lifetime_playtime() const;
  void _internal_set_lifetime_playtime(uint64_t value);
  public:

  // optional uint64 lifetime_playtime_sessions = 63;
  bool has_lifetime_playtime_sessions() const;
  private:
  bool _internal_has_lifetime_playtime_sessions() const;
  public:
  void clear_lifetime_playtime_sessions();
  uint64_t lifetime_playtime_sessions() const;
  void set_lifetime_playtime_sessions(uint64_t value);
  private:
  uint64_t _internal_lifetime_playtime_sessions() const;
  void _internal_set_lifetime_playtime_sessions(uint64_t value);
  public:

  // optional int32 language = 61 [default = 0, (.description) = "The language of the title and description."];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional bool maybe_inappropriate_sex = 65;
  bool has_maybe_inappropriate_sex() const;
  private:
  bool _internal_has_maybe_inappropriate_sex() const;
  public:
  void clear_maybe_inappropriate_sex();
  bool maybe_inappropriate_sex() const;
  void set_maybe_inappropriate_sex(bool value);
  private:
  bool _internal_maybe_inappropriate_sex() const;
  void _internal_set_maybe_inappropriate_sex(bool value);
  public:

  // optional bool maybe_inappropriate_violence = 66;
  bool has_maybe_inappropriate_violence() const;
  private:
  bool _internal_has_maybe_inappropriate_violence() const;
  public:
  void clear_maybe_inappropriate_violence();
  bool maybe_inappropriate_violence() const;
  void set_maybe_inappropriate_violence(bool value);
  private:
  bool _internal_maybe_inappropriate_violence() const;
  void _internal_set_maybe_inappropriate_violence(bool value);
  public:

  // optional uint64 revision_change_number = 67 [(.description) = "The change number for the specified revision."];
  bool has_revision_change_number() const;
  private:
  bool _internal_has_revision_change_number() const;
  public:
  void clear_revision_change_number();
  uint64_t revision_change_number() const;
  void set_revision_change_number(uint64_t value);
  private:
  uint64_t _internal_revision_change_number() const;
  void _internal_set_revision_change_number(uint64_t value);
  public:

  // optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default, (.description) = "The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller."];
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::EPublishedFileRevision revision() const;
  void set_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_revision() const;
  void _internal_set_revision(::EPublishedFileRevision value);
  public:

  // optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
  bool has_ban_text_check_result() const;
  private:
  bool _internal_has_ban_text_check_result() const;
  public:
  void clear_ban_text_check_result();
  ::EBanContentCheckResult ban_text_check_result() const;
  void set_ban_text_check_result(::EBanContentCheckResult value);
  private:
  ::EBanContentCheckResult _internal_ban_text_check_result() const;
  void _internal_set_ban_text_check_result(::EBanContentCheckResult value);
  public:

  // optional float search_score = 73 [(.description) = "Search score, admin only"];
  bool has_search_score() const;
  private:
  bool _internal_has_search_score() const;
  public:
  void clear_search_score();
  float search_score() const;
  void set_search_score(float value);
  private:
  float _internal_search_score() const;
  void _internal_set_search_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview > previews_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag > kvtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> available_revisions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Reaction > reactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> content_descriptorids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtubevideoid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ban_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcutname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PublishedFileDetails_VoteData* vote_data_;
  ::PublishedFileDetails_ForSaleData* for_sale_data_;
  ::PublishedFileDetails_PlaytimeStats* playtime_stats_;
  uint64_t publishedfileid_;
  uint32_t result_;
  uint32_t creator_appid_;
  uint64_t creator_;
  uint32_t consumer_appid_;
  uint32_t consumer_shortcutid_;
  uint64_t file_size_;
  uint64_t preview_file_size_;
  uint64_t hcontent_file_;
  uint64_t hcontent_preview_;
  uint32_t time_created_;
  uint32_t time_updated_;
  uint32_t visibility_;
  uint32_t flags_;
  bool workshop_file_;
  bool workshop_accepted_;
  bool show_subscribe_all_;
  bool banned_;
  int32_t num_comments_developer_;
  uint64_t banner_;
  int32_t num_comments_public_;
  uint32_t file_type_;
  uint32_t subscriptions_;
  bool can_be_deleted_;
  bool incompatible_;
  bool can_subscribe_;
  bool spoiler_tag_;
  uint32_t favorited_;
  uint32_t followers_;
  uint32_t lifetime_subscriptions_;
  uint32_t lifetime_favorited_;
  uint32_t lifetime_followers_;
  uint32_t views_;
  uint32_t image_width_;
  uint32_t image_height_;
  uint32_t shortcutid_;
  uint32_t num_children_;
  uint32_t num_reports_;
  uint32_t time_subscribed_;
  uint64_t lifetime_playtime_;
  uint64_t lifetime_playtime_sessions_;
  int32_t language_;
  bool maybe_inappropriate_sex_;
  bool maybe_inappropriate_violence_;
  uint64_t revision_change_number_;
  int revision_;
  int ban_text_check_result_;
  float search_score_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetDetails_Response) */ {
 public:
  inline CPublishedFile_GetDetails_Response() : CPublishedFile_GetDetails_Response(nullptr) {}
  ~CPublishedFile_GetDetails_Response() override;
  explicit constexpr CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from);
  CPublishedFile_GetDetails_Response(CPublishedFile_GetDetails_Response&& from) noexcept
    : CPublishedFile_GetDetails_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetDetails_Response& operator=(const CPublishedFile_GetDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetDetails_Response& operator=(CPublishedFile_GetDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetDetails_Response*>(
               &_CPublishedFile_GetDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CPublishedFile_GetDetails_Response& a, CPublishedFile_GetDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetDetails_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetDetails_Response";
  }
  protected:
  explicit CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfiledetailsFieldNumber = 1,
  };
  // repeated .PublishedFileDetails publishedfiledetails = 1;
  int publishedfiledetails_size() const;
  private:
  int _internal_publishedfiledetails_size() const;
  public:
  void clear_publishedfiledetails();
  ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();
  private:
  const ::PublishedFileDetails& _internal_publishedfiledetails(int index) const;
  ::PublishedFileDetails* _internal_add_publishedfiledetails();
  public:
  const ::PublishedFileDetails& publishedfiledetails(int index) const;
  ::PublishedFileDetails* add_publishedfiledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemInfo_Request_WorkshopItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemInfo_Request.WorkshopItem) */ {
 public:
  inline CPublishedFile_GetItemInfo_Request_WorkshopItem() : CPublishedFile_GetItemInfo_Request_WorkshopItem(nullptr) {}
  ~CPublishedFile_GetItemInfo_Request_WorkshopItem() override;
  explicit constexpr CPublishedFile_GetItemInfo_Request_WorkshopItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemInfo_Request_WorkshopItem(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from);
  CPublishedFile_GetItemInfo_Request_WorkshopItem(CPublishedFile_GetItemInfo_Request_WorkshopItem&& from) noexcept
    : CPublishedFile_GetItemInfo_Request_WorkshopItem() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemInfo_Request_WorkshopItem& operator=(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemInfo_Request_WorkshopItem& operator=(CPublishedFile_GetItemInfo_Request_WorkshopItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemInfo_Request_WorkshopItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemInfo_Request_WorkshopItem* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemInfo_Request_WorkshopItem*>(
               &_CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CPublishedFile_GetItemInfo_Request_WorkshopItem& a, CPublishedFile_GetItemInfo_Request_WorkshopItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemInfo_Request_WorkshopItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemInfo_Request_WorkshopItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemInfo_Request.WorkshopItem";
  }
  protected:
  explicit CPublishedFile_GetItemInfo_Request_WorkshopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedFileIdFieldNumber = 1,
    kTimeUpdatedFieldNumber = 2,
    kDesiredRevisionFieldNumber = 3,
  };
  // optional fixed64 published_file_id = 1;
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional uint32 time_updated = 2;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  uint32_t time_updated() const;
  void set_time_updated(uint32_t value);
  private:
  uint32_t _internal_time_updated() const;
  void _internal_set_time_updated(uint32_t value);
  public:

  // optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemInfo_Request.WorkshopItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t published_file_id_;
  uint32_t time_updated_;
  int desired_revision_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemInfo_Request) */ {
 public:
  inline CPublishedFile_GetItemInfo_Request() : CPublishedFile_GetItemInfo_Request(nullptr) {}
  ~CPublishedFile_GetItemInfo_Request() override;
  explicit constexpr CPublishedFile_GetItemInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemInfo_Request(const CPublishedFile_GetItemInfo_Request& from);
  CPublishedFile_GetItemInfo_Request(CPublishedFile_GetItemInfo_Request&& from) noexcept
    : CPublishedFile_GetItemInfo_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemInfo_Request& operator=(const CPublishedFile_GetItemInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemInfo_Request& operator=(CPublishedFile_GetItemInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemInfo_Request*>(
               &_CPublishedFile_GetItemInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CPublishedFile_GetItemInfo_Request& a, CPublishedFile_GetItemInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemInfo_Request";
  }
  protected:
  explicit CPublishedFile_GetItemInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetItemInfo_Request_WorkshopItem WorkshopItem;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkshopItemsFieldNumber = 3,
    kAppidFieldNumber = 1,
    kLastTimeUpdatedFieldNumber = 2,
  };
  // repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  int workshop_items_size() const;
  private:
  int _internal_workshop_items_size() const;
  public:
  void clear_workshop_items();
  ::CPublishedFile_GetItemInfo_Request_WorkshopItem* mutable_workshop_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >*
      mutable_workshop_items();
  private:
  const ::CPublishedFile_GetItemInfo_Request_WorkshopItem& _internal_workshop_items(int index) const;
  ::CPublishedFile_GetItemInfo_Request_WorkshopItem* _internal_add_workshop_items();
  public:
  const ::CPublishedFile_GetItemInfo_Request_WorkshopItem& workshop_items(int index) const;
  ::CPublishedFile_GetItemInfo_Request_WorkshopItem* add_workshop_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >&
      workshop_items() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 last_time_updated = 2;
  bool has_last_time_updated() const;
  private:
  bool _internal_has_last_time_updated() const;
  public:
  void clear_last_time_updated();
  uint32_t last_time_updated() const;
  void set_last_time_updated(uint32_t value);
  private:
  uint32_t _internal_last_time_updated() const;
  void _internal_set_last_time_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Request_WorkshopItem > workshop_items_;
  uint32_t appid_;
  uint32_t last_time_updated_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemInfo_Response_WorkshopItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo) */ {
 public:
  inline CPublishedFile_GetItemInfo_Response_WorkshopItemInfo() : CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(nullptr) {}
  ~CPublishedFile_GetItemInfo_Response_WorkshopItemInfo() override;
  explicit constexpr CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from);
  CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo&& from) noexcept
    : CPublishedFile_GetItemInfo_Response_WorkshopItemInfo() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& operator=(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& operator=(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo*>(
               &_CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& a, CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemInfo_Response_WorkshopItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemInfo_Response.WorkshopItemInfo";
  }
  protected:
  explicit CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedFileIdFieldNumber = 1,
    kManifestIdFieldNumber = 3,
    kTimeUpdatedFieldNumber = 2,
    kFlagsFieldNumber = 4,
  };
  // optional fixed64 published_file_id = 1;
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional fixed64 manifest_id = 3;
  bool has_manifest_id() const;
  private:
  bool _internal_has_manifest_id() const;
  public:
  void clear_manifest_id();
  uint64_t manifest_id() const;
  void set_manifest_id(uint64_t value);
  private:
  uint64_t _internal_manifest_id() const;
  void _internal_set_manifest_id(uint64_t value);
  public:

  // optional uint32 time_updated = 2;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  uint32_t time_updated() const;
  void set_time_updated(uint32_t value);
  private:
  uint32_t _internal_time_updated() const;
  void _internal_set_time_updated(uint32_t value);
  public:

  // optional uint32 flags = 4;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t published_file_id_;
  uint64_t manifest_id_;
  uint32_t time_updated_;
  uint32_t flags_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemInfo_Response) */ {
 public:
  inline CPublishedFile_GetItemInfo_Response() : CPublishedFile_GetItemInfo_Response(nullptr) {}
  ~CPublishedFile_GetItemInfo_Response() override;
  explicit constexpr CPublishedFile_GetItemInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemInfo_Response(const CPublishedFile_GetItemInfo_Response& from);
  CPublishedFile_GetItemInfo_Response(CPublishedFile_GetItemInfo_Response&& from) noexcept
    : CPublishedFile_GetItemInfo_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemInfo_Response& operator=(const CPublishedFile_GetItemInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemInfo_Response& operator=(CPublishedFile_GetItemInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemInfo_Response*>(
               &_CPublishedFile_GetItemInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CPublishedFile_GetItemInfo_Response& a, CPublishedFile_GetItemInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemInfo_Response";
  }
  protected:
  explicit CPublishedFile_GetItemInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetItemInfo_Response_WorkshopItemInfo WorkshopItemInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkshopItemsFieldNumber = 2,
    kPrivateItemsFieldNumber = 3,
    kUpdateTimeFieldNumber = 1,
  };
  // repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  int workshop_items_size() const;
  private:
  int _internal_workshop_items_size() const;
  public:
  void clear_workshop_items();
  ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* mutable_workshop_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >*
      mutable_workshop_items();
  private:
  const ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& _internal_workshop_items(int index) const;
  ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* _internal_add_workshop_items();
  public:
  const ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& workshop_items(int index) const;
  ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* add_workshop_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >&
      workshop_items() const;

  // repeated fixed64 private_items = 3;
  int private_items_size() const;
  private:
  int _internal_private_items_size() const;
  public:
  void clear_private_items();
  private:
  uint64_t _internal_private_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_private_items() const;
  void _internal_add_private_items(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_private_items();
  public:
  uint64_t private_items(int index) const;
  void set_private_items(int index, uint64_t value);
  void add_private_items(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      private_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_private_items();

  // optional uint32 update_time = 1;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  uint32_t update_time() const;
  void set_update_time(uint32_t value);
  private:
  uint32_t _internal_update_time() const;
  void _internal_set_update_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo > workshop_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > private_items_;
  uint32_t update_time_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Request_KVTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Request.KVTag) */ {
 public:
  inline CPublishedFile_GetUserFiles_Request_KVTag() : CPublishedFile_GetUserFiles_Request_KVTag(nullptr) {}
  ~CPublishedFile_GetUserFiles_Request_KVTag() override;
  explicit constexpr CPublishedFile_GetUserFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Request_KVTag(const CPublishedFile_GetUserFiles_Request_KVTag& from);
  CPublishedFile_GetUserFiles_Request_KVTag(CPublishedFile_GetUserFiles_Request_KVTag&& from) noexcept
    : CPublishedFile_GetUserFiles_Request_KVTag() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Request_KVTag& operator=(const CPublishedFile_GetUserFiles_Request_KVTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Request_KVTag& operator=(CPublishedFile_GetUserFiles_Request_KVTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserFiles_Request_KVTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Request_KVTag* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Request_KVTag*>(
               &_CPublishedFile_GetUserFiles_Request_KVTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CPublishedFile_GetUserFiles_Request_KVTag& a, CPublishedFile_GetUserFiles_Request_KVTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Request_KVTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Request_KVTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Request_KVTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Request_KVTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Request_KVTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Request.KVTag";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Request.KVTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Request_TagGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Request.TagGroup) */ {
 public:
  inline CPublishedFile_GetUserFiles_Request_TagGroup() : CPublishedFile_GetUserFiles_Request_TagGroup(nullptr) {}
  ~CPublishedFile_GetUserFiles_Request_TagGroup() override;
  explicit constexpr CPublishedFile_GetUserFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Request_TagGroup(const CPublishedFile_GetUserFiles_Request_TagGroup& from);
  CPublishedFile_GetUserFiles_Request_TagGroup(CPublishedFile_GetUserFiles_Request_TagGroup&& from) noexcept
    : CPublishedFile_GetUserFiles_Request_TagGroup() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Request_TagGroup& operator=(const CPublishedFile_GetUserFiles_Request_TagGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Request_TagGroup& operator=(CPublishedFile_GetUserFiles_Request_TagGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserFiles_Request_TagGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Request_TagGroup* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Request_TagGroup*>(
               &_CPublishedFile_GetUserFiles_Request_TagGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CPublishedFile_GetUserFiles_Request_TagGroup& a, CPublishedFile_GetUserFiles_Request_TagGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Request_TagGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Request_TagGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Request_TagGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Request_TagGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserFiles_Request_TagGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserFiles_Request_TagGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Request_TagGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Request.TagGroup";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated string tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Request.TagGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Request) */ {
 public:
  inline CPublishedFile_GetUserFiles_Request() : CPublishedFile_GetUserFiles_Request(nullptr) {}
  ~CPublishedFile_GetUserFiles_Request() override;
  explicit constexpr CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from);
  CPublishedFile_GetUserFiles_Request(CPublishedFile_GetUserFiles_Request&& from) noexcept
    : CPublishedFile_GetUserFiles_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Request& operator=(const CPublishedFile_GetUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Request& operator=(CPublishedFile_GetUserFiles_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserFiles_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Request*>(
               &_CPublishedFile_GetUserFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CPublishedFile_GetUserFiles_Request& a, CPublishedFile_GetUserFiles_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserFiles_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserFiles_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Request";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetUserFiles_Request_KVTag KVTag;
  typedef CPublishedFile_GetUserFiles_Request_TagGroup TagGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredtagsFieldNumber = 10,
    kExcludedtagsFieldNumber = 11,
    kRequiredKvTagsFieldNumber = 30,
    kTaggroupsFieldNumber = 34,
    kExcludedContentDescriptorsFieldNumber = 37,
    kTypeFieldNumber = 6,
    kSortmethodFieldNumber = 7,
    kMatchCloudFilenameFieldNumber = 16,
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kShortcutidFieldNumber = 3,
    kPrivacyFieldNumber = 9,
    kFiletypeFieldNumber = 14,
    kCreatorAppidFieldNumber = 15,
    kTotalonlyFieldNumber = 17,
    kIdsOnlyFieldNumber = 18,
    kReturnTagsFieldNumber = 20,
    kReturnPreviewsFieldNumber = 22,
    kStartindexOverrideFieldNumber = 25,
    kCacheMaxAgeSecondsFieldNumber = 27,
    kReturnChildrenFieldNumber = 23,
    kReturnForSaleDataFieldNumber = 26,
    kReturnMetadataFieldNumber = 28,
    kStripDescriptionBbcodeFieldNumber = 32,
    kLanguageFieldNumber = 29,
    kReturnPlaytimeStatsFieldNumber = 31,
    kDesiredRevisionFieldNumber = 33,
    kReturnReactionsFieldNumber = 35,
    kReturnAppsFieldNumber = 36,
    kReturnVoteDataFieldNumber = 19,
    kReturnKvTagsFieldNumber = 21,
    kReturnShortDescriptionFieldNumber = 24,
    kPageFieldNumber = 4,
    kNumperpageFieldNumber = 5,
  };
  // repeated string requiredtags = 10 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  int requiredtags_size() const;
  private:
  int _internal_requiredtags_size() const;
  public:
  void clear_requiredtags();
  const std::string& requiredtags(int index) const;
  std::string* mutable_requiredtags(int index);
  void set_requiredtags(int index, const std::string& value);
  void set_requiredtags(int index, std::string&& value);
  void set_requiredtags(int index, const char* value);
  void set_requiredtags(int index, const char* value, size_t size);
  std::string* add_requiredtags();
  void add_requiredtags(const std::string& value);
  void add_requiredtags(std::string&& value);
  void add_requiredtags(const char* value);
  void add_requiredtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requiredtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requiredtags();
  private:
  const std::string& _internal_requiredtags(int index) const;
  std::string* _internal_add_requiredtags();
  public:

  // repeated string excludedtags = 11 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  int excludedtags_size() const;
  private:
  int _internal_excludedtags_size() const;
  public:
  void clear_excludedtags();
  const std::string& excludedtags(int index) const;
  std::string* mutable_excludedtags(int index);
  void set_excludedtags(int index, const std::string& value);
  void set_excludedtags(int index, std::string&& value);
  void set_excludedtags(int index, const char* value);
  void set_excludedtags(int index, const char* value, size_t size);
  std::string* add_excludedtags();
  void add_excludedtags(const std::string& value);
  void add_excludedtags(std::string&& value);
  void add_excludedtags(const char* value);
  void add_excludedtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedtags();
  private:
  const std::string& _internal_excludedtags(int index) const;
  std::string* _internal_add_excludedtags();
  public:

  // repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.description) = "Required key-value tags to match on."];
  int required_kv_tags_size() const;
  private:
  int _internal_required_kv_tags_size() const;
  public:
  void clear_required_kv_tags();
  ::CPublishedFile_GetUserFiles_Request_KVTag* mutable_required_kv_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_KVTag >*
      mutable_required_kv_tags();
  private:
  const ::CPublishedFile_GetUserFiles_Request_KVTag& _internal_required_kv_tags(int index) const;
  ::CPublishedFile_GetUserFiles_Request_KVTag* _internal_add_required_kv_tags();
  public:
  const ::CPublishedFile_GetUserFiles_Request_KVTag& required_kv_tags(int index) const;
  ::CPublishedFile_GetUserFiles_Request_KVTag* add_required_kv_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_KVTag >&
      required_kv_tags() const;

  // repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  int taggroups_size() const;
  private:
  int _internal_taggroups_size() const;
  public:
  void clear_taggroups();
  ::CPublishedFile_GetUserFiles_Request_TagGroup* mutable_taggroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_TagGroup >*
      mutable_taggroups();
  private:
  const ::CPublishedFile_GetUserFiles_Request_TagGroup& _internal_taggroups(int index) const;
  ::CPublishedFile_GetUserFiles_Request_TagGroup* _internal_add_taggroups();
  public:
  const ::CPublishedFile_GetUserFiles_Request_TagGroup& taggroups(int index) const;
  ::CPublishedFile_GetUserFiles_Request_TagGroup* add_taggroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_TagGroup >&
      taggroups() const;

  // repeated .EContentDescriptorID excluded_content_descriptors = 37 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  int excluded_content_descriptors_size() const;
  private:
  int _internal_excluded_content_descriptors_size() const;
  public:
  void clear_excluded_content_descriptors();
  private:
  ::EContentDescriptorID _internal_excluded_content_descriptors(int index) const;
  void _internal_add_excluded_content_descriptors(::EContentDescriptorID value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_excluded_content_descriptors();
  public:
  ::EContentDescriptorID excluded_content_descriptors(int index) const;
  void set_excluded_content_descriptors(int index, ::EContentDescriptorID value);
  void add_excluded_content_descriptors(::EContentDescriptorID value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& excluded_content_descriptors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_excluded_content_descriptors();

  // optional string type = 6 [default = "myfiles", (.description) = "(Optional) Type of files to be returned."];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string sortmethod = 7 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
  bool has_sortmethod() const;
  private:
  bool _internal_has_sortmethod() const;
  public:
  void clear_sortmethod();
  const std::string& sortmethod() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sortmethod(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sortmethod();
  PROTOBUF_NODISCARD std::string* release_sortmethod();
  void set_allocated_sortmethod(std::string* sortmethod);
  private:
  const std::string& _internal_sortmethod() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sortmethod(const std::string& value);
  std::string* _internal_mutable_sortmethod();
  public:

  // optional string match_cloud_filename = 16 [(.description) = "Match this cloud filename if specified."];
  bool has_match_cloud_filename() const;
  private:
  bool _internal_has_match_cloud_filename() const;
  public:
  void clear_match_cloud_filename();
  const std::string& match_cloud_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_match_cloud_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_match_cloud_filename();
  PROTOBUF_NODISCARD std::string* release_match_cloud_filename();
  void set_allocated_match_cloud_filename(std::string* match_cloud_filename);
  private:
  const std::string& _internal_match_cloud_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match_cloud_filename(const std::string& value);
  std::string* _internal_mutable_match_cloud_filename();
  public:

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of the user whose files are being requested."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2 [(.description) = "App Id of the app that the files were published to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 shortcutid = 3 [(.description) = "(Optional) Shortcut Id to retrieve published files from."];
  bool has_shortcutid() const;
  private:
  bool _internal_has_shortcutid() const;
  public:
  void clear_shortcutid();
  uint32_t shortcutid() const;
  void set_shortcutid(uint32_t value);
  private:
  uint32_t _internal_shortcutid() const;
  void _internal_set_shortcutid(uint32_t value);
  public:

  // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
  bool has_privacy() const;
  private:
  bool _internal_has_privacy() const;
  public:
  void clear_privacy();
  uint32_t privacy() const;
  void set_privacy(uint32_t value);
  private:
  uint32_t _internal_privacy() const;
  void _internal_set_privacy(uint32_t value);
  public:

  // optional uint32 filetype = 14 [(.description) = "(Optional) File type to match files to."];
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  uint32_t filetype() const;
  void set_filetype(uint32_t value);
  private:
  uint32_t _internal_filetype() const;
  void _internal_set_filetype(uint32_t value);
  public:

  // optional uint32 creator_appid = 15 [(.description) = "App Id of the app that published the files, only matched if specified."];
  bool has_creator_appid() const;
  private:
  bool _internal_has_creator_appid() const;
  public:
  void clear_creator_appid();
  uint32_t creator_appid() const;
  void set_creator_appid(uint32_t value);
  private:
  uint32_t _internal_creator_appid() const;
  void _internal_set_creator_appid(uint32_t value);
  public:

  // optional bool totalonly = 17 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  bool has_totalonly() const;
  private:
  bool _internal_has_totalonly() const;
  public:
  void clear_totalonly();
  bool totalonly() const;
  void set_totalonly(bool value);
  private:
  bool _internal_totalonly() const;
  void _internal_set_totalonly(bool value);
  public:

  // optional bool ids_only = 18 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  bool has_ids_only() const;
  private:
  bool _internal_has_ids_only() const;
  public:
  void clear_ids_only();
  bool ids_only() const;
  void set_ids_only(bool value);
  private:
  bool _internal_ids_only() const;
  void _internal_set_ids_only(bool value);
  public:

  // optional bool return_tags = 20 [(.description) = "Return tags in the file details"];
  bool has_return_tags() const;
  private:
  bool _internal_has_return_tags() const;
  public:
  void clear_return_tags();
  bool return_tags() const;
  void set_return_tags(bool value);
  private:
  bool _internal_return_tags() const;
  void _internal_set_return_tags(bool value);
  public:

  // optional bool return_previews = 22 [(.description) = "Return preview image and video details in the file details"];
  bool has_return_previews() const;
  private:
  bool _internal_has_return_previews() const;
  public:
  void clear_return_previews();
  bool return_previews() const;
  void set_return_previews(bool value);
  private:
  bool _internal_return_previews() const;
  void _internal_set_return_previews(bool value);
  public:

  // optional uint32 startindex_override = 25 [(.description) = "Backwards compatible for the client."];
  bool has_startindex_override() const;
  private:
  bool _internal_has_startindex_override() const;
  public:
  void clear_startindex_override();
  uint32_t startindex_override() const;
  void set_startindex_override(uint32_t value);
  private:
  uint32_t _internal_startindex_override() const;
  void _internal_set_startindex_override(uint32_t value);
  public:

  // optional uint32 cache_max_age_seconds = 27 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
  bool has_cache_max_age_seconds() const;
  private:
  bool _internal_has_cache_max_age_seconds() const;
  public:
  void clear_cache_max_age_seconds();
  uint32_t cache_max_age_seconds() const;
  void set_cache_max_age_seconds(uint32_t value);
  private:
  uint32_t _internal_cache_max_age_seconds() const;
  void _internal_set_cache_max_age_seconds(uint32_t value);
  public:

  // optional bool return_children = 23 [(.description) = "Return child item ids in the file details"];
  bool has_return_children() const;
  private:
  bool _internal_has_return_children() const;
  public:
  void clear_return_children();
  bool return_children() const;
  void set_return_children(bool value);
  private:
  bool _internal_return_children() const;
  void _internal_set_return_children(bool value);
  public:

  // optional bool return_for_sale_data = 26 [(.description) = "Return pricing information, if applicable"];
  bool has_return_for_sale_data() const;
  private:
  bool _internal_has_return_for_sale_data() const;
  public:
  void clear_return_for_sale_data();
  bool return_for_sale_data() const;
  void set_return_for_sale_data(bool value);
  private:
  bool _internal_return_for_sale_data() const;
  void _internal_set_return_for_sale_data(bool value);
  public:

  // optional bool return_metadata = 28 [default = false, (.description) = "Populate the metadata field"];
  bool has_return_metadata() const;
  private:
  bool _internal_has_return_metadata() const;
  public:
  void clear_return_metadata();
  bool return_metadata() const;
  void set_return_metadata(bool value);
  private:
  bool _internal_return_metadata() const;
  void _internal_set_return_metadata(bool value);
  public:

  // optional bool strip_description_bbcode = 32 [(.description) = "Strips BBCode from descriptions."];
  bool has_strip_description_bbcode() const;
  private:
  bool _internal_has_strip_description_bbcode() const;
  public:
  void clear_strip_description_bbcode();
  bool strip_description_bbcode() const;
  void set_strip_description_bbcode(bool value);
  private:
  bool _internal_strip_description_bbcode() const;
  void _internal_set_strip_description_bbcode(bool value);
  public:

  // optional int32 language = 29 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional uint32 return_playtime_stats = 31 [(.description) = "Return playtime stats for the specified number of days before today."];
  bool has_return_playtime_stats() const;
  private:
  bool _internal_has_return_playtime_stats() const;
  public:
  void clear_return_playtime_stats();
  uint32_t return_playtime_stats() const;
  void set_return_playtime_stats(uint32_t value);
  private:
  uint32_t _internal_return_playtime_stats() const;
  void _internal_set_return_playtime_stats(uint32_t value);
  public:

  // optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // optional bool return_reactions = 35 [default = false, (.description) = "If true, then reactions to items will be returned."];
  bool has_return_reactions() const;
  private:
  bool _internal_has_return_reactions() const;
  public:
  void clear_return_reactions();
  bool return_reactions() const;
  void set_return_reactions(bool value);
  private:
  bool _internal_return_reactions() const;
  void _internal_set_return_reactions(bool value);
  public:

  // optional bool return_apps = 36 [(.description) = "Return list of apps the items belong to"];
  bool has_return_apps() const;
  private:
  bool _internal_has_return_apps() const;
  public:
  void clear_return_apps();
  bool return_apps() const;
  void set_return_apps(bool value);
  private:
  bool _internal_return_apps() const;
  void _internal_set_return_apps(bool value);
  public:

  // optional bool return_vote_data = 19 [default = true, (.description) = "Return vote data"];
  bool has_return_vote_data() const;
  private:
  bool _internal_has_return_vote_data() const;
  public:
  void clear_return_vote_data();
  bool return_vote_data() const;
  void set_return_vote_data(bool value);
  private:
  bool _internal_return_vote_data() const;
  void _internal_set_return_vote_data(bool value);
  public:

  // optional bool return_kv_tags = 21 [default = true, (.description) = "Return key-value tags in the file details"];
  bool has_return_kv_tags() const;
  private:
  bool _internal_has_return_kv_tags() const;
  public:
  void clear_return_kv_tags();
  bool return_kv_tags() const;
  void set_return_kv_tags(bool value);
  private:
  bool _internal_return_kv_tags() const;
  void _internal_set_return_kv_tags(bool value);
  public:

  // optional bool return_short_description = 24 [default = true, (.description) = "Populate the short_description field instead of file_description"];
  bool has_return_short_description() const;
  private:
  bool _internal_has_return_short_description() const;
  public:
  void clear_return_short_description();
  bool return_short_description() const;
  void set_return_short_description(bool value);
  private:
  bool _internal_return_short_description() const;
  void _internal_set_return_short_description(bool value);
  public:

  // optional uint32 page = 4 [default = 1, (.description) = "(Optional) Starting page for results."];
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // optional uint32 numperpage = 5 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  bool has_numperpage() const;
  private:
  bool _internal_has_numperpage() const;
  public:
  void clear_numperpage();
  uint32_t numperpage() const;
  void set_numperpage(uint32_t value);
  private:
  uint32_t _internal_numperpage() const;
  void _internal_set_numperpage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requiredtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_KVTag > required_kv_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_TagGroup > taggroups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> excluded_content_descriptors_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_sortmethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sortmethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_cloud_filename_;
  uint64_t steamid_;
  uint32_t appid_;
  uint32_t shortcutid_;
  uint32_t privacy_;
  uint32_t filetype_;
  uint32_t creator_appid_;
  bool totalonly_;
  bool ids_only_;
  bool return_tags_;
  bool return_previews_;
  uint32_t startindex_override_;
  uint32_t cache_max_age_seconds_;
  bool return_children_;
  bool return_for_sale_data_;
  bool return_metadata_;
  bool strip_description_bbcode_;
  int32_t language_;
  uint32_t return_playtime_stats_;
  int desired_revision_;
  bool return_reactions_;
  bool return_apps_;
  bool return_vote_data_;
  bool return_kv_tags_;
  bool return_short_description_;
  uint32_t page_;
  uint32_t numperpage_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response_App final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Response.App) */ {
 public:
  inline CPublishedFile_GetUserFiles_Response_App() : CPublishedFile_GetUserFiles_Response_App(nullptr) {}
  ~CPublishedFile_GetUserFiles_Response_App() override;
  explicit constexpr CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from);
  CPublishedFile_GetUserFiles_Response_App(CPublishedFile_GetUserFiles_Response_App&& from) noexcept
    : CPublishedFile_GetUserFiles_Response_App() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Response_App& operator=(const CPublishedFile_GetUserFiles_Response_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Response_App& operator=(CPublishedFile_GetUserFiles_Response_App&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserFiles_Response_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Response_App* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Response_App*>(
               &_CPublishedFile_GetUserFiles_Response_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CPublishedFile_GetUserFiles_Response_App& a, CPublishedFile_GetUserFiles_Response_App& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Response_App* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Response_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Response_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response_App>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Response_App* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Response.App";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAppidFieldNumber = 1,
    kShortcutidFieldNumber = 3,
    kPrivateFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 shortcutid = 3;
  bool has_shortcutid() const;
  private:
  bool _internal_has_shortcutid() const;
  public:
  void clear_shortcutid();
  uint32_t shortcutid() const;
  void set_shortcutid(uint32_t value);
  private:
  uint32_t _internal_shortcutid() const;
  void _internal_set_shortcutid(uint32_t value);
  public:

  // optional bool private = 4;
  bool has_private_() const;
  private:
  bool _internal_has_private_() const;
  public:
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t appid_;
  uint32_t shortcutid_;
  bool private__;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Response) */ {
 public:
  inline CPublishedFile_GetUserFiles_Response() : CPublishedFile_GetUserFiles_Response(nullptr) {}
  ~CPublishedFile_GetUserFiles_Response() override;
  explicit constexpr CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from);
  CPublishedFile_GetUserFiles_Response(CPublishedFile_GetUserFiles_Response&& from) noexcept
    : CPublishedFile_GetUserFiles_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Response& operator=(const CPublishedFile_GetUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Response& operator=(CPublishedFile_GetUserFiles_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserFiles_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Response*>(
               &_CPublishedFile_GetUserFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CPublishedFile_GetUserFiles_Response& a, CPublishedFile_GetUserFiles_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserFiles_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserFiles_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Response";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetUserFiles_Response_App App;

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfiledetailsFieldNumber = 3,
    kAppsFieldNumber = 4,
    kTotalFieldNumber = 1,
    kStartindexFieldNumber = 2,
  };
  // repeated .PublishedFileDetails publishedfiledetails = 3;
  int publishedfiledetails_size() const;
  private:
  int _internal_publishedfiledetails_size() const;
  public:
  void clear_publishedfiledetails();
  ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();
  private:
  const ::PublishedFileDetails& _internal_publishedfiledetails(int index) const;
  ::PublishedFileDetails* _internal_add_publishedfiledetails();
  public:
  const ::PublishedFileDetails& publishedfiledetails(int index) const;
  ::PublishedFileDetails* add_publishedfiledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::CPublishedFile_GetUserFiles_Response_App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
      mutable_apps();
  private:
  const ::CPublishedFile_GetUserFiles_Response_App& _internal_apps(int index) const;
  ::CPublishedFile_GetUserFiles_Response_App* _internal_add_apps();
  public:
  const ::CPublishedFile_GetUserFiles_Response_App& apps(int index) const;
  ::CPublishedFile_GetUserFiles_Response_App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
      apps() const;

  // optional uint32 total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // optional uint32 startindex = 2;
  bool has_startindex() const;
  private:
  bool _internal_has_startindex() const;
  public:
  void clear_startindex();
  uint32_t startindex() const;
  void set_startindex(uint32_t value);
  private:
  uint32_t _internal_startindex() const;
  void _internal_set_startindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App > apps_;
  uint32_t total_;
  uint32_t startindex_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AreFilesInSubscriptionList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_AreFilesInSubscriptionList_Request) */ {
 public:
  inline CPublishedFile_AreFilesInSubscriptionList_Request() : CPublishedFile_AreFilesInSubscriptionList_Request(nullptr) {}
  ~CPublishedFile_AreFilesInSubscriptionList_Request() override;
  explicit constexpr CPublishedFile_AreFilesInSubscriptionList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AreFilesInSubscriptionList_Request(const CPublishedFile_AreFilesInSubscriptionList_Request& from);
  CPublishedFile_AreFilesInSubscriptionList_Request(CPublishedFile_AreFilesInSubscriptionList_Request&& from) noexcept
    : CPublishedFile_AreFilesInSubscriptionList_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AreFilesInSubscriptionList_Request& operator=(const CPublishedFile_AreFilesInSubscriptionList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AreFilesInSubscriptionList_Request& operator=(CPublishedFile_AreFilesInSubscriptionList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AreFilesInSubscriptionList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AreFilesInSubscriptionList_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AreFilesInSubscriptionList_Request*>(
               &_CPublishedFile_AreFilesInSubscriptionList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CPublishedFile_AreFilesInSubscriptionList_Request& a, CPublishedFile_AreFilesInSubscriptionList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AreFilesInSubscriptionList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AreFilesInSubscriptionList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AreFilesInSubscriptionList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AreFilesInSubscriptionList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AreFilesInSubscriptionList_Request";
  }
  protected:
  explicit CPublishedFile_AreFilesInSubscriptionList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 2,
    kAppidFieldNumber = 1,
    kListtypeFieldNumber = 3,
    kFiletypeFieldNumber = 4,
    kWorkshopfiletypeFieldNumber = 5,
  };
  // repeated fixed64 publishedfileids = 2;
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 listtype = 3 [(.description) = "See EUCMListType"];
  bool has_listtype() const;
  private:
  bool _internal_has_listtype() const;
  public:
  void clear_listtype();
  uint32_t listtype() const;
  void set_listtype(uint32_t value);
  private:
  uint32_t _internal_listtype() const;
  void _internal_set_listtype(uint32_t value);
  public:

  // optional uint32 filetype = 4 [(.description) = "See EPublishedFileInfoMatchingFileType"];
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  uint32_t filetype() const;
  void set_filetype(uint32_t value);
  private:
  uint32_t _internal_filetype() const;
  void _internal_set_filetype(uint32_t value);
  public:

  // optional uint32 workshopfiletype = 5 [(.description) = "See EWorkshopFileType.  If specified, overrides filetype"];
  bool has_workshopfiletype() const;
  private:
  bool _internal_has_workshopfiletype() const;
  public:
  void clear_workshopfiletype();
  uint32_t workshopfiletype() const;
  void set_workshopfiletype(uint32_t value);
  private:
  uint32_t _internal_workshopfiletype() const;
  void _internal_set_workshopfiletype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_AreFilesInSubscriptionList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  uint32_t appid_;
  uint32_t listtype_;
  uint32_t filetype_;
  uint32_t workshopfiletype_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AreFilesInSubscriptionList_Response_InList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_AreFilesInSubscriptionList_Response.InList) */ {
 public:
  inline CPublishedFile_AreFilesInSubscriptionList_Response_InList() : CPublishedFile_AreFilesInSubscriptionList_Response_InList(nullptr) {}
  ~CPublishedFile_AreFilesInSubscriptionList_Response_InList() override;
  explicit constexpr CPublishedFile_AreFilesInSubscriptionList_Response_InList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AreFilesInSubscriptionList_Response_InList(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from);
  CPublishedFile_AreFilesInSubscriptionList_Response_InList(CPublishedFile_AreFilesInSubscriptionList_Response_InList&& from) noexcept
    : CPublishedFile_AreFilesInSubscriptionList_Response_InList() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AreFilesInSubscriptionList_Response_InList& operator=(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AreFilesInSubscriptionList_Response_InList& operator=(CPublishedFile_AreFilesInSubscriptionList_Response_InList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AreFilesInSubscriptionList_Response_InList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AreFilesInSubscriptionList_Response_InList* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AreFilesInSubscriptionList_Response_InList*>(
               &_CPublishedFile_AreFilesInSubscriptionList_Response_InList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CPublishedFile_AreFilesInSubscriptionList_Response_InList& a, CPublishedFile_AreFilesInSubscriptionList_Response_InList& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AreFilesInSubscriptionList_Response_InList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AreFilesInSubscriptionList_Response_InList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AreFilesInSubscriptionList_Response_InList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AreFilesInSubscriptionList_Response_InList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Response_InList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AreFilesInSubscriptionList_Response.InList";
  }
  protected:
  explicit CPublishedFile_AreFilesInSubscriptionList_Response_InList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kInlistFieldNumber = 2,
  };
  // optional fixed64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional bool inlist = 2;
  bool has_inlist() const;
  private:
  bool _internal_has_inlist() const;
  public:
  void clear_inlist();
  bool inlist() const;
  void set_inlist(bool value);
  private:
  bool _internal_inlist() const;
  void _internal_set_inlist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  bool inlist_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AreFilesInSubscriptionList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_AreFilesInSubscriptionList_Response) */ {
 public:
  inline CPublishedFile_AreFilesInSubscriptionList_Response() : CPublishedFile_AreFilesInSubscriptionList_Response(nullptr) {}
  ~CPublishedFile_AreFilesInSubscriptionList_Response() override;
  explicit constexpr CPublishedFile_AreFilesInSubscriptionList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AreFilesInSubscriptionList_Response(const CPublishedFile_AreFilesInSubscriptionList_Response& from);
  CPublishedFile_AreFilesInSubscriptionList_Response(CPublishedFile_AreFilesInSubscriptionList_Response&& from) noexcept
    : CPublishedFile_AreFilesInSubscriptionList_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AreFilesInSubscriptionList_Response& operator=(const CPublishedFile_AreFilesInSubscriptionList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AreFilesInSubscriptionList_Response& operator=(CPublishedFile_AreFilesInSubscriptionList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AreFilesInSubscriptionList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AreFilesInSubscriptionList_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AreFilesInSubscriptionList_Response*>(
               &_CPublishedFile_AreFilesInSubscriptionList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CPublishedFile_AreFilesInSubscriptionList_Response& a, CPublishedFile_AreFilesInSubscriptionList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AreFilesInSubscriptionList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AreFilesInSubscriptionList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AreFilesInSubscriptionList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AreFilesInSubscriptionList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AreFilesInSubscriptionList_Response";
  }
  protected:
  explicit CPublishedFile_AreFilesInSubscriptionList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_AreFilesInSubscriptionList_Response_InList InList;

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >*
      mutable_files();
  private:
  const ::CPublishedFile_AreFilesInSubscriptionList_Response_InList& _internal_files(int index) const;
  ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* _internal_add_files();
  public:
  const ::CPublishedFile_AreFilesInSubscriptionList_Response_InList& files(int index) const;
  ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >&
      files() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_AreFilesInSubscriptionList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Update_Request) */ {
 public:
  inline CPublishedFile_Update_Request() : CPublishedFile_Update_Request(nullptr) {}
  ~CPublishedFile_Update_Request() override;
  explicit constexpr CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from);
  CPublishedFile_Update_Request(CPublishedFile_Update_Request&& from) noexcept
    : CPublishedFile_Update_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Update_Request& operator=(const CPublishedFile_Update_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Update_Request& operator=(CPublishedFile_Update_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Update_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Update_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Update_Request*>(
               &_CPublishedFile_Update_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CPublishedFile_Update_Request& a, CPublishedFile_Update_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Update_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Update_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Update_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Update_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Update_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Update_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Update_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Update_Request";
  }
  protected:
  explicit CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kTitleFieldNumber = 3,
    kFileDescriptionFieldNumber = 4,
    kFilenameFieldNumber = 7,
    kPreviewFilenameFieldNumber = 8,
    kPublishedfileidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kVisibilityFieldNumber = 5,
    kImageHeightFieldNumber = 16,
    kSpoilerTagFieldNumber = 10,
    kImageWidthFieldNumber = 15,
  };
  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_description();
  PROTOBUF_NODISCARD std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
  bool has_preview_filename() const;
  private:
  bool _internal_has_preview_filename() const;
  public:
  void clear_preview_filename();
  const std::string& preview_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preview_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preview_filename();
  PROTOBUF_NODISCARD std::string* release_preview_filename();
  void set_allocated_preview_filename(std::string* preview_filename);
  private:
  const std::string& _internal_preview_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preview_filename(const std::string& value);
  std::string* _internal_mutable_preview_filename();
  public:

  // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like to update."];
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  uint32_t visibility() const;
  void set_visibility(uint32_t value);
  private:
  uint32_t _internal_visibility() const;
  void _internal_set_visibility(uint32_t value);
  public:

  // optional uint32 image_height = 16 [(.description) = "(Optional) If this is an image file, you can specify the image height."];
  bool has_image_height() const;
  private:
  bool _internal_has_image_height() const;
  public:
  void clear_image_height();
  uint32_t image_height() const;
  void set_image_height(uint32_t value);
  private:
  uint32_t _internal_image_height() const;
  void _internal_set_image_height(uint32_t value);
  public:

  // optional bool spoiler_tag = 10 [(.description) = "(Optional) Whether this published file should have a spoiler tag attached to it."];
  bool has_spoiler_tag() const;
  private:
  bool _internal_has_spoiler_tag() const;
  public:
  void clear_spoiler_tag();
  bool spoiler_tag() const;
  void set_spoiler_tag(bool value);
  private:
  bool _internal_spoiler_tag() const;
  void _internal_set_spoiler_tag(bool value);
  public:

  // optional uint32 image_width = 15 [(.description) = "(Optional) If this is an image file, you can specify the image width."];
  bool has_image_width() const;
  private:
  bool _internal_has_image_width() const;
  public:
  void clear_image_width();
  uint32_t image_width() const;
  void set_image_width(uint32_t value);
  private:
  uint32_t _internal_image_width() const;
  void _internal_set_image_width(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_filename_;
  uint64_t publishedfileid_;
  uint32_t appid_;
  uint32_t visibility_;
  uint32_t image_height_;
  bool spoiler_tag_;
  uint32_t image_width_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_Update_Response) */ {
 public:
  inline CPublishedFile_Update_Response() : CPublishedFile_Update_Response(nullptr) {}
  explicit constexpr CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from);
  CPublishedFile_Update_Response(CPublishedFile_Update_Response&& from) noexcept
    : CPublishedFile_Update_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Update_Response& operator=(const CPublishedFile_Update_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Update_Response& operator=(CPublishedFile_Update_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Update_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Update_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Update_Response*>(
               &_CPublishedFile_Update_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CPublishedFile_Update_Response& a, CPublishedFile_Update_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Update_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Update_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Update_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Update_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_Update_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_Update_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Update_Response";
  }
  protected:
  explicit CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Delete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Delete_Request) */ {
 public:
  inline CPublishedFile_Delete_Request() : CPublishedFile_Delete_Request(nullptr) {}
  ~CPublishedFile_Delete_Request() override;
  explicit constexpr CPublishedFile_Delete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Delete_Request(const CPublishedFile_Delete_Request& from);
  CPublishedFile_Delete_Request(CPublishedFile_Delete_Request&& from) noexcept
    : CPublishedFile_Delete_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Delete_Request& operator=(const CPublishedFile_Delete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Delete_Request& operator=(CPublishedFile_Delete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Delete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Delete_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Delete_Request*>(
               &_CPublishedFile_Delete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CPublishedFile_Delete_Request& a, CPublishedFile_Delete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Delete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Delete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Delete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Delete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_Delete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_Delete_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Delete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Delete_Request";
  }
  protected:
  explicit CPublishedFile_Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
  };
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to delete."];
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Delete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Delete_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_Delete_Response) */ {
 public:
  inline CPublishedFile_Delete_Response() : CPublishedFile_Delete_Response(nullptr) {}
  explicit constexpr CPublishedFile_Delete_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Delete_Response(const CPublishedFile_Delete_Response& from);
  CPublishedFile_Delete_Response(CPublishedFile_Delete_Response&& from) noexcept
    : CPublishedFile_Delete_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Delete_Response& operator=(const CPublishedFile_Delete_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Delete_Response& operator=(CPublishedFile_Delete_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_Delete_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Delete_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Delete_Response*>(
               &_CPublishedFile_Delete_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CPublishedFile_Delete_Response& a, CPublishedFile_Delete_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Delete_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Delete_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_Delete_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_Delete_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_Delete_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_Delete_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Delete_Response";
  }
  protected:
  explicit CPublishedFile_Delete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Delete_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetChangeHistoryEntry_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetChangeHistoryEntry_Request) */ {
 public:
  inline CPublishedFile_GetChangeHistoryEntry_Request() : CPublishedFile_GetChangeHistoryEntry_Request(nullptr) {}
  ~CPublishedFile_GetChangeHistoryEntry_Request() override;
  explicit constexpr CPublishedFile_GetChangeHistoryEntry_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetChangeHistoryEntry_Request(const CPublishedFile_GetChangeHistoryEntry_Request& from);
  CPublishedFile_GetChangeHistoryEntry_Request(CPublishedFile_GetChangeHistoryEntry_Request&& from) noexcept
    : CPublishedFile_GetChangeHistoryEntry_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetChangeHistoryEntry_Request& operator=(const CPublishedFile_GetChangeHistoryEntry_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetChangeHistoryEntry_Request& operator=(CPublishedFile_GetChangeHistoryEntry_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetChangeHistoryEntry_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetChangeHistoryEntry_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetChangeHistoryEntry_Request*>(
               &_CPublishedFile_GetChangeHistoryEntry_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CPublishedFile_GetChangeHistoryEntry_Request& a, CPublishedFile_GetChangeHistoryEntry_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetChangeHistoryEntry_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetChangeHistoryEntry_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetChangeHistoryEntry_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetChangeHistoryEntry_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetChangeHistoryEntry_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetChangeHistoryEntry_Request";
  }
  protected:
  explicit CPublishedFile_GetChangeHistoryEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional int32 language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetChangeHistoryEntry_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t timestamp_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetChangeHistoryEntry_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetChangeHistoryEntry_Response) */ {
 public:
  inline CPublishedFile_GetChangeHistoryEntry_Response() : CPublishedFile_GetChangeHistoryEntry_Response(nullptr) {}
  ~CPublishedFile_GetChangeHistoryEntry_Response() override;
  explicit constexpr CPublishedFile_GetChangeHistoryEntry_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetChangeHistoryEntry_Response(const CPublishedFile_GetChangeHistoryEntry_Response& from);
  CPublishedFile_GetChangeHistoryEntry_Response(CPublishedFile_GetChangeHistoryEntry_Response&& from) noexcept
    : CPublishedFile_GetChangeHistoryEntry_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetChangeHistoryEntry_Response& operator=(const CPublishedFile_GetChangeHistoryEntry_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetChangeHistoryEntry_Response& operator=(CPublishedFile_GetChangeHistoryEntry_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetChangeHistoryEntry_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetChangeHistoryEntry_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetChangeHistoryEntry_Response*>(
               &_CPublishedFile_GetChangeHistoryEntry_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CPublishedFile_GetChangeHistoryEntry_Response& a, CPublishedFile_GetChangeHistoryEntry_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetChangeHistoryEntry_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetChangeHistoryEntry_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetChangeHistoryEntry_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetChangeHistoryEntry_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetChangeHistoryEntry_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetChangeHistoryEntry_Response";
  }
  protected:
  explicit CPublishedFile_GetChangeHistoryEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeDescriptionFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // optional string change_description = 1;
  bool has_change_description() const;
  private:
  bool _internal_has_change_description() const;
  public:
  void clear_change_description();
  const std::string& change_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_description();
  PROTOBUF_NODISCARD std::string* release_change_description();
  void set_allocated_change_description(std::string* change_description);
  private:
  const std::string& _internal_change_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_description(const std::string& value);
  std::string* _internal_mutable_change_description();
  public:

  // optional int32 language = 2;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetChangeHistoryEntry_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_description_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetChangeHistory_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetChangeHistory_Request) */ {
 public:
  inline CPublishedFile_GetChangeHistory_Request() : CPublishedFile_GetChangeHistory_Request(nullptr) {}
  ~CPublishedFile_GetChangeHistory_Request() override;
  explicit constexpr CPublishedFile_GetChangeHistory_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetChangeHistory_Request(const CPublishedFile_GetChangeHistory_Request& from);
  CPublishedFile_GetChangeHistory_Request(CPublishedFile_GetChangeHistory_Request&& from) noexcept
    : CPublishedFile_GetChangeHistory_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetChangeHistory_Request& operator=(const CPublishedFile_GetChangeHistory_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetChangeHistory_Request& operator=(CPublishedFile_GetChangeHistory_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetChangeHistory_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetChangeHistory_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetChangeHistory_Request*>(
               &_CPublishedFile_GetChangeHistory_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CPublishedFile_GetChangeHistory_Request& a, CPublishedFile_GetChangeHistory_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetChangeHistory_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetChangeHistory_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetChangeHistory_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetChangeHistory_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetChangeHistory_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetChangeHistory_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetChangeHistory_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetChangeHistory_Request";
  }
  protected:
  explicit CPublishedFile_GetChangeHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kTotalOnlyFieldNumber = 2,
    kStartindexFieldNumber = 3,
    kCountFieldNumber = 4,
    kLanguageFieldNumber = 5,
  };
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional bool total_only = 2 [(.description) = "Return the total number of changes only."];
  bool has_total_only() const;
  private:
  bool _internal_has_total_only() const;
  public:
  void clear_total_only();
  bool total_only() const;
  void set_total_only(bool value);
  private:
  bool _internal_total_only() const;
  void _internal_set_total_only(bool value);
  public:

  // optional uint32 startindex = 3;
  bool has_startindex() const;
  private:
  bool _internal_has_startindex() const;
  public:
  void clear_startindex();
  uint32_t startindex() const;
  void set_startindex(uint32_t value);
  private:
  uint32_t _internal_startindex() const;
  void _internal_set_startindex(uint32_t value);
  public:

  // optional uint32 count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional int32 language = 5 [default = 0, (.description) = "Desired language"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetChangeHistory_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  bool total_only_;
  uint32_t startindex_;
  uint32_t count_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetChangeHistory_Response_ChangeLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetChangeHistory_Response.ChangeLog) */ {
 public:
  inline CPublishedFile_GetChangeHistory_Response_ChangeLog() : CPublishedFile_GetChangeHistory_Response_ChangeLog(nullptr) {}
  ~CPublishedFile_GetChangeHistory_Response_ChangeLog() override;
  explicit constexpr CPublishedFile_GetChangeHistory_Response_ChangeLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetChangeHistory_Response_ChangeLog(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from);
  CPublishedFile_GetChangeHistory_Response_ChangeLog(CPublishedFile_GetChangeHistory_Response_ChangeLog&& from) noexcept
    : CPublishedFile_GetChangeHistory_Response_ChangeLog() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetChangeHistory_Response_ChangeLog& operator=(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetChangeHistory_Response_ChangeLog& operator=(CPublishedFile_GetChangeHistory_Response_ChangeLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetChangeHistory_Response_ChangeLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetChangeHistory_Response_ChangeLog* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetChangeHistory_Response_ChangeLog*>(
               &_CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CPublishedFile_GetChangeHistory_Response_ChangeLog& a, CPublishedFile_GetChangeHistory_Response_ChangeLog& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetChangeHistory_Response_ChangeLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetChangeHistory_Response_ChangeLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetChangeHistory_Response.ChangeLog";
  }
  protected:
  explicit CPublishedFile_GetChangeHistory_Response_ChangeLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeDescriptionFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kLanguageFieldNumber = 3,
  };
  // optional string change_description = 2;
  bool has_change_description() const;
  private:
  bool _internal_has_change_description() const;
  public:
  void clear_change_description();
  const std::string& change_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_change_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_change_description();
  PROTOBUF_NODISCARD std::string* release_change_description();
  void set_allocated_change_description(std::string* change_description);
  private:
  const std::string& _internal_change_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_description(const std::string& value);
  std::string* _internal_mutable_change_description();
  public:

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional int32 language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetChangeHistory_Response.ChangeLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr change_description_;
  uint32_t timestamp_;
  int32_t language_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetChangeHistory_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetChangeHistory_Response) */ {
 public:
  inline CPublishedFile_GetChangeHistory_Response() : CPublishedFile_GetChangeHistory_Response(nullptr) {}
  ~CPublishedFile_GetChangeHistory_Response() override;
  explicit constexpr CPublishedFile_GetChangeHistory_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetChangeHistory_Response(const CPublishedFile_GetChangeHistory_Response& from);
  CPublishedFile_GetChangeHistory_Response(CPublishedFile_GetChangeHistory_Response&& from) noexcept
    : CPublishedFile_GetChangeHistory_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetChangeHistory_Response& operator=(const CPublishedFile_GetChangeHistory_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetChangeHistory_Response& operator=(CPublishedFile_GetChangeHistory_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetChangeHistory_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetChangeHistory_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetChangeHistory_Response*>(
               &_CPublishedFile_GetChangeHistory_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CPublishedFile_GetChangeHistory_Response& a, CPublishedFile_GetChangeHistory_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetChangeHistory_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetChangeHistory_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetChangeHistory_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetChangeHistory_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetChangeHistory_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetChangeHistory_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetChangeHistory_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetChangeHistory_Response";
  }
  protected:
  explicit CPublishedFile_GetChangeHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetChangeHistory_Response_ChangeLog ChangeLog;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::CPublishedFile_GetChangeHistory_Response_ChangeLog* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >*
      mutable_changes();
  private:
  const ::CPublishedFile_GetChangeHistory_Response_ChangeLog& _internal_changes(int index) const;
  ::CPublishedFile_GetChangeHistory_Response_ChangeLog* _internal_add_changes();
  public:
  const ::CPublishedFile_GetChangeHistory_Response_ChangeLog& changes(int index) const;
  ::CPublishedFile_GetChangeHistory_Response_ChangeLog* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >&
      changes() const;

  // optional uint32 total = 2;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetChangeHistory_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetChangeHistory_Response_ChangeLog > changes_;
  uint32_t total_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_RefreshVotingQueue_Request) */ {
 public:
  inline CPublishedFile_RefreshVotingQueue_Request() : CPublishedFile_RefreshVotingQueue_Request(nullptr) {}
  ~CPublishedFile_RefreshVotingQueue_Request() override;
  explicit constexpr CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from);
  CPublishedFile_RefreshVotingQueue_Request(CPublishedFile_RefreshVotingQueue_Request&& from) noexcept
    : CPublishedFile_RefreshVotingQueue_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RefreshVotingQueue_Request& operator=(const CPublishedFile_RefreshVotingQueue_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RefreshVotingQueue_Request& operator=(CPublishedFile_RefreshVotingQueue_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RefreshVotingQueue_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RefreshVotingQueue_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RefreshVotingQueue_Request*>(
               &_CPublishedFile_RefreshVotingQueue_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CPublishedFile_RefreshVotingQueue_Request& a, CPublishedFile_RefreshVotingQueue_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RefreshVotingQueue_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RefreshVotingQueue_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RefreshVotingQueue_Request";
  }
  protected:
  explicit CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kExcludedTagsFieldNumber = 5,
    kAppidFieldNumber = 1,
    kMatchingFileTypeFieldNumber = 2,
    kDesiredQueueSizeFieldNumber = 6,
    kDesiredRevisionFieldNumber = 8,
    kMatchAllTagsFieldNumber = 4,
  };
  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  int excluded_tags_size() const;
  private:
  int _internal_excluded_tags_size() const;
  public:
  void clear_excluded_tags();
  const std::string& excluded_tags(int index) const;
  std::string* mutable_excluded_tags(int index);
  void set_excluded_tags(int index, const std::string& value);
  void set_excluded_tags(int index, std::string&& value);
  void set_excluded_tags(int index, const char* value);
  void set_excluded_tags(int index, const char* value, size_t size);
  std::string* add_excluded_tags();
  void add_excluded_tags(const std::string& value);
  void add_excluded_tags(std::string&& value);
  void add_excluded_tags(const char* value);
  void add_excluded_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_tags();
  private:
  const std::string& _internal_excluded_tags(int index) const;
  std::string* _internal_add_excluded_tags();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
  bool has_matching_file_type() const;
  private:
  bool _internal_has_matching_file_type() const;
  public:
  void clear_matching_file_type();
  uint32_t matching_file_type() const;
  void set_matching_file_type(uint32_t value);
  private:
  uint32_t _internal_matching_file_type() const;
  void _internal_set_matching_file_type(uint32_t value);
  public:

  // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  bool has_desired_queue_size() const;
  private:
  bool _internal_has_desired_queue_size() const;
  public:
  void clear_desired_queue_size();
  uint32_t desired_queue_size() const;
  void set_desired_queue_size(uint32_t value);
  private:
  uint32_t _internal_desired_queue_size() const;
  void _internal_set_desired_queue_size(uint32_t value);
  public:

  // optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default, (.description) = "Filter to items that have data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  bool has_match_all_tags() const;
  private:
  bool _internal_has_match_all_tags() const;
  public:
  void clear_match_all_tags();
  bool match_all_tags() const;
  void set_match_all_tags(bool value);
  private:
  bool _internal_match_all_tags() const;
  void _internal_set_match_all_tags(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_tags_;
  uint32_t appid_;
  uint32_t matching_file_type_;
  uint32_t desired_queue_size_;
  int desired_revision_;
  bool match_all_tags_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_RefreshVotingQueue_Response) */ {
 public:
  inline CPublishedFile_RefreshVotingQueue_Response() : CPublishedFile_RefreshVotingQueue_Response(nullptr) {}
  explicit constexpr CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from);
  CPublishedFile_RefreshVotingQueue_Response(CPublishedFile_RefreshVotingQueue_Response&& from) noexcept
    : CPublishedFile_RefreshVotingQueue_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RefreshVotingQueue_Response& operator=(const CPublishedFile_RefreshVotingQueue_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RefreshVotingQueue_Response& operator=(CPublishedFile_RefreshVotingQueue_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RefreshVotingQueue_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RefreshVotingQueue_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RefreshVotingQueue_Response*>(
               &_CPublishedFile_RefreshVotingQueue_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CPublishedFile_RefreshVotingQueue_Response& a, CPublishedFile_RefreshVotingQueue_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RefreshVotingQueue_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RefreshVotingQueue_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RefreshVotingQueue_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RefreshVotingQueue_Response";
  }
  protected:
  explicit CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_QueryFiles_Request_KVTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_QueryFiles_Request.KVTag) */ {
 public:
  inline CPublishedFile_QueryFiles_Request_KVTag() : CPublishedFile_QueryFiles_Request_KVTag(nullptr) {}
  ~CPublishedFile_QueryFiles_Request_KVTag() override;
  explicit constexpr CPublishedFile_QueryFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_QueryFiles_Request_KVTag(const CPublishedFile_QueryFiles_Request_KVTag& from);
  CPublishedFile_QueryFiles_Request_KVTag(CPublishedFile_QueryFiles_Request_KVTag&& from) noexcept
    : CPublishedFile_QueryFiles_Request_KVTag() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_QueryFiles_Request_KVTag& operator=(const CPublishedFile_QueryFiles_Request_KVTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_QueryFiles_Request_KVTag& operator=(CPublishedFile_QueryFiles_Request_KVTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_QueryFiles_Request_KVTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_QueryFiles_Request_KVTag* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_QueryFiles_Request_KVTag*>(
               &_CPublishedFile_QueryFiles_Request_KVTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CPublishedFile_QueryFiles_Request_KVTag& a, CPublishedFile_QueryFiles_Request_KVTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_QueryFiles_Request_KVTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_QueryFiles_Request_KVTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_QueryFiles_Request_KVTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_QueryFiles_Request_KVTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_QueryFiles_Request_KVTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_QueryFiles_Request_KVTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_QueryFiles_Request_KVTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_QueryFiles_Request.KVTag";
  }
  protected:
  explicit CPublishedFile_QueryFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_QueryFiles_Request.KVTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_QueryFiles_Request_TagGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_QueryFiles_Request.TagGroup) */ {
 public:
  inline CPublishedFile_QueryFiles_Request_TagGroup() : CPublishedFile_QueryFiles_Request_TagGroup(nullptr) {}
  ~CPublishedFile_QueryFiles_Request_TagGroup() override;
  explicit constexpr CPublishedFile_QueryFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_QueryFiles_Request_TagGroup(const CPublishedFile_QueryFiles_Request_TagGroup& from);
  CPublishedFile_QueryFiles_Request_TagGroup(CPublishedFile_QueryFiles_Request_TagGroup&& from) noexcept
    : CPublishedFile_QueryFiles_Request_TagGroup() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_QueryFiles_Request_TagGroup& operator=(const CPublishedFile_QueryFiles_Request_TagGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_QueryFiles_Request_TagGroup& operator=(CPublishedFile_QueryFiles_Request_TagGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_QueryFiles_Request_TagGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_QueryFiles_Request_TagGroup* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_QueryFiles_Request_TagGroup*>(
               &_CPublishedFile_QueryFiles_Request_TagGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CPublishedFile_QueryFiles_Request_TagGroup& a, CPublishedFile_QueryFiles_Request_TagGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_QueryFiles_Request_TagGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_QueryFiles_Request_TagGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_QueryFiles_Request_TagGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_QueryFiles_Request_TagGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_QueryFiles_Request_TagGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_QueryFiles_Request_TagGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_QueryFiles_Request_TagGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_QueryFiles_Request.TagGroup";
  }
  protected:
  explicit CPublishedFile_QueryFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated string tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_QueryFiles_Request.TagGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_QueryFiles_Request_DateRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_QueryFiles_Request.DateRange) */ {
 public:
  inline CPublishedFile_QueryFiles_Request_DateRange() : CPublishedFile_QueryFiles_Request_DateRange(nullptr) {}
  ~CPublishedFile_QueryFiles_Request_DateRange() override;
  explicit constexpr CPublishedFile_QueryFiles_Request_DateRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_QueryFiles_Request_DateRange(const CPublishedFile_QueryFiles_Request_DateRange& from);
  CPublishedFile_QueryFiles_Request_DateRange(CPublishedFile_QueryFiles_Request_DateRange&& from) noexcept
    : CPublishedFile_QueryFiles_Request_DateRange() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_QueryFiles_Request_DateRange& operator=(const CPublishedFile_QueryFiles_Request_DateRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_QueryFiles_Request_DateRange& operator=(CPublishedFile_QueryFiles_Request_DateRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_QueryFiles_Request_DateRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_QueryFiles_Request_DateRange* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_QueryFiles_Request_DateRange*>(
               &_CPublishedFile_QueryFiles_Request_DateRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CPublishedFile_QueryFiles_Request_DateRange& a, CPublishedFile_QueryFiles_Request_DateRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_QueryFiles_Request_DateRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_QueryFiles_Request_DateRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_QueryFiles_Request_DateRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_QueryFiles_Request_DateRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_QueryFiles_Request_DateRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_QueryFiles_Request_DateRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_QueryFiles_Request_DateRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_QueryFiles_Request.DateRange";
  }
  protected:
  explicit CPublishedFile_QueryFiles_Request_DateRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampStartFieldNumber = 1,
    kTimestampEndFieldNumber = 2,
  };
  // optional uint32 timestamp_start = 1 [(.description) = "(Optional) Include items with the relevant date field after this value."];
  bool has_timestamp_start() const;
  private:
  bool _internal_has_timestamp_start() const;
  public:
  void clear_timestamp_start();
  uint32_t timestamp_start() const;
  void set_timestamp_start(uint32_t value);
  private:
  uint32_t _internal_timestamp_start() const;
  void _internal_set_timestamp_start(uint32_t value);
  public:

  // optional uint32 timestamp_end = 2 [(.description) = "(Optional) Include items with the relevant date field before this value."];
  bool has_timestamp_end() const;
  private:
  bool _internal_has_timestamp_end() const;
  public:
  void clear_timestamp_end();
  uint32_t timestamp_end() const;
  void set_timestamp_end(uint32_t value);
  private:
  uint32_t _internal_timestamp_end() const;
  void _internal_set_timestamp_end(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_QueryFiles_Request.DateRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t timestamp_start_;
  uint32_t timestamp_end_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_QueryFiles_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_QueryFiles_Request) */ {
 public:
  inline CPublishedFile_QueryFiles_Request() : CPublishedFile_QueryFiles_Request(nullptr) {}
  ~CPublishedFile_QueryFiles_Request() override;
  explicit constexpr CPublishedFile_QueryFiles_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_QueryFiles_Request(const CPublishedFile_QueryFiles_Request& from);
  CPublishedFile_QueryFiles_Request(CPublishedFile_QueryFiles_Request&& from) noexcept
    : CPublishedFile_QueryFiles_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_QueryFiles_Request& operator=(const CPublishedFile_QueryFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_QueryFiles_Request& operator=(CPublishedFile_QueryFiles_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_QueryFiles_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_QueryFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_QueryFiles_Request*>(
               &_CPublishedFile_QueryFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CPublishedFile_QueryFiles_Request& a, CPublishedFile_QueryFiles_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_QueryFiles_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_QueryFiles_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_QueryFiles_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_QueryFiles_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_QueryFiles_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_QueryFiles_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_QueryFiles_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_QueryFiles_Request";
  }
  protected:
  explicit CPublishedFile_QueryFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_QueryFiles_Request_KVTag KVTag;
  typedef CPublishedFile_QueryFiles_Request_TagGroup TagGroup;
  typedef CPublishedFile_QueryFiles_Request_DateRange DateRange;

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredtagsFieldNumber = 6,
    kExcludedtagsFieldNumber = 7,
    kRequiredFlagsFieldNumber = 9,
    kOmittedFlagsFieldNumber = 10,
    kRequiredKvTagsFieldNumber = 34,
    kTaggroupsFieldNumber = 42,
    kExcludedContentDescriptorsFieldNumber = 46,
    kSearchTextFieldNumber = 11,
    kCursorFieldNumber = 39,
    kDateRangeCreatedFieldNumber = 44,
    kDateRangeUpdatedFieldNumber = 45,
    kQueryTypeFieldNumber = 1,
    kPageFieldNumber = 2,
    kCreatorAppidFieldNumber = 4,
    kAppidFieldNumber = 5,
    kChildPublishedfileidFieldNumber = 13,
    kFiletypeFieldNumber = 12,
    kDaysFieldNumber = 14,
    kReturnTagsFieldNumber = 18,
    kReturnKvTagsFieldNumber = 19,
    kReturnPreviewsFieldNumber = 20,
    kReturnChildrenFieldNumber = 21,
    kIncludeRecentVotesOnlyFieldNumber = 15,
    kTotalonlyFieldNumber = 16,
    kIdsOnlyFieldNumber = 35,
    kReturnVoteDataFieldNumber = 17,
    kReturnShortDescriptionFieldNumber = 22,
    kReturnForSaleDataFieldNumber = 30,
    kReturnMetadataFieldNumber = 32,
    kReturnDetailsFieldNumber = 37,
    kCacheMaxAgeSecondsFieldNumber = 31,
    kLanguageFieldNumber = 33,
    kReturnPlaytimeStatsFieldNumber = 36,
    kDesiredRevisionFieldNumber = 40,
    kStripDescriptionBbcodeFieldNumber = 38,
    kReturnReactionsFieldNumber = 43,
    kNumperpageFieldNumber = 3,
    kMatchAllTagsFieldNumber = 8,
  };
  // repeated string requiredtags = 6 [(.description) = "Tags to match on. See match_all_tags parameter below"];
  int requiredtags_size() const;
  private:
  int _internal_requiredtags_size() const;
  public:
  void clear_requiredtags();
  const std::string& requiredtags(int index) const;
  std::string* mutable_requiredtags(int index);
  void set_requiredtags(int index, const std::string& value);
  void set_requiredtags(int index, std::string&& value);
  void set_requiredtags(int index, const char* value);
  void set_requiredtags(int index, const char* value, size_t size);
  std::string* add_requiredtags();
  void add_requiredtags(const std::string& value);
  void add_requiredtags(std::string&& value);
  void add_requiredtags(const char* value);
  void add_requiredtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requiredtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requiredtags();
  private:
  const std::string& _internal_requiredtags(int index) const;
  std::string* _internal_add_requiredtags();
  public:

  // repeated string excludedtags = 7 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  int excludedtags_size() const;
  private:
  int _internal_excludedtags_size() const;
  public:
  void clear_excludedtags();
  const std::string& excludedtags(int index) const;
  std::string* mutable_excludedtags(int index);
  void set_excludedtags(int index, const std::string& value);
  void set_excludedtags(int index, std::string&& value);
  void set_excludedtags(int index, const char* value);
  void set_excludedtags(int index, const char* value, size_t size);
  std::string* add_excludedtags();
  void add_excludedtags(const std::string& value);
  void add_excludedtags(std::string&& value);
  void add_excludedtags(const char* value);
  void add_excludedtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedtags();
  private:
  const std::string& _internal_excludedtags(int index) const;
  std::string* _internal_add_excludedtags();
  public:

  // repeated string required_flags = 9 [(.description) = "Required flags that must be set on any returned items"];
  int required_flags_size() const;
  private:
  int _internal_required_flags_size() const;
  public:
  void clear_required_flags();
  const std::string& required_flags(int index) const;
  std::string* mutable_required_flags(int index);
  void set_required_flags(int index, const std::string& value);
  void set_required_flags(int index, std::string&& value);
  void set_required_flags(int index, const char* value);
  void set_required_flags(int index, const char* value, size_t size);
  std::string* add_required_flags();
  void add_required_flags(const std::string& value);
  void add_required_flags(std::string&& value);
  void add_required_flags(const char* value);
  void add_required_flags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required_flags();
  private:
  const std::string& _internal_required_flags(int index) const;
  std::string* _internal_add_required_flags();
  public:

  // repeated string omitted_flags = 10 [(.description) = "Flags that must not be set on any returned items"];
  int omitted_flags_size() const;
  private:
  int _internal_omitted_flags_size() const;
  public:
  void clear_omitted_flags();
  const std::string& omitted_flags(int index) const;
  std::string* mutable_omitted_flags(int index);
  void set_omitted_flags(int index, const std::string& value);
  void set_omitted_flags(int index, std::string&& value);
  void set_omitted_flags(int index, const char* value);
  void set_omitted_flags(int index, const char* value, size_t size);
  std::string* add_omitted_flags();
  void add_omitted_flags(const std::string& value);
  void add_omitted_flags(std::string&& value);
  void add_omitted_flags(const char* value);
  void add_omitted_flags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& omitted_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_omitted_flags();
  private:
  const std::string& _internal_omitted_flags(int index) const;
  std::string* _internal_add_omitted_flags();
  public:

  // repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.description) = "Required key-value tags to match on."];
  int required_kv_tags_size() const;
  private:
  int _internal_required_kv_tags_size() const;
  public:
  void clear_required_kv_tags();
  ::CPublishedFile_QueryFiles_Request_KVTag* mutable_required_kv_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_KVTag >*
      mutable_required_kv_tags();
  private:
  const ::CPublishedFile_QueryFiles_Request_KVTag& _internal_required_kv_tags(int index) const;
  ::CPublishedFile_QueryFiles_Request_KVTag* _internal_add_required_kv_tags();
  public:
  const ::CPublishedFile_QueryFiles_Request_KVTag& required_kv_tags(int index) const;
  ::CPublishedFile_QueryFiles_Request_KVTag* add_required_kv_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_KVTag >&
      required_kv_tags() const;

  // repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  int taggroups_size() const;
  private:
  int _internal_taggroups_size() const;
  public:
  void clear_taggroups();
  ::CPublishedFile_QueryFiles_Request_TagGroup* mutable_taggroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_TagGroup >*
      mutable_taggroups();
  private:
  const ::CPublishedFile_QueryFiles_Request_TagGroup& _internal_taggroups(int index) const;
  ::CPublishedFile_QueryFiles_Request_TagGroup* _internal_add_taggroups();
  public:
  const ::CPublishedFile_QueryFiles_Request_TagGroup& taggroups(int index) const;
  ::CPublishedFile_QueryFiles_Request_TagGroup* add_taggroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_TagGroup >&
      taggroups() const;

  // repeated .EContentDescriptorID excluded_content_descriptors = 46 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  int excluded_content_descriptors_size() const;
  private:
  int _internal_excluded_content_descriptors_size() const;
  public:
  void clear_excluded_content_descriptors();
  private:
  ::EContentDescriptorID _internal_excluded_content_descriptors(int index) const;
  void _internal_add_excluded_content_descriptors(::EContentDescriptorID value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_excluded_content_descriptors();
  public:
  ::EContentDescriptorID excluded_content_descriptors(int index) const;
  void set_excluded_content_descriptors(int index, ::EContentDescriptorID value);
  void add_excluded_content_descriptors(::EContentDescriptorID value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& excluded_content_descriptors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_excluded_content_descriptors();

  // optional string search_text = 11 [(.description) = "Text to match in the item\'s title or description"];
  bool has_search_text() const;
  private:
  bool _internal_has_search_text() const;
  public:
  void clear_search_text();
  const std::string& search_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_text();
  PROTOBUF_NODISCARD std::string* release_search_text();
  void set_allocated_search_text(std::string* search_text);
  private:
  const std::string& _internal_search_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_text(const std::string& value);
  std::string* _internal_mutable_search_text();
  public:

  // optional string cursor = 39 [(.description) = "Cursor to paginate through the results (set to \'*\' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored."];
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44 [(.description) = "(Optional) Filter to items created within this range."];
  bool has_date_range_created() const;
  private:
  bool _internal_has_date_range_created() const;
  public:
  void clear_date_range_created();
  const ::CPublishedFile_QueryFiles_Request_DateRange& date_range_created() const;
  PROTOBUF_NODISCARD ::CPublishedFile_QueryFiles_Request_DateRange* release_date_range_created();
  ::CPublishedFile_QueryFiles_Request_DateRange* mutable_date_range_created();
  void set_allocated_date_range_created(::CPublishedFile_QueryFiles_Request_DateRange* date_range_created);
  private:
  const ::CPublishedFile_QueryFiles_Request_DateRange& _internal_date_range_created() const;
  ::CPublishedFile_QueryFiles_Request_DateRange* _internal_mutable_date_range_created();
  public:
  void unsafe_arena_set_allocated_date_range_created(
      ::CPublishedFile_QueryFiles_Request_DateRange* date_range_created);
  ::CPublishedFile_QueryFiles_Request_DateRange* unsafe_arena_release_date_range_created();

  // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45 [(.description) = "(Optional) Filter to items updated within this range."];
  bool has_date_range_updated() const;
  private:
  bool _internal_has_date_range_updated() const;
  public:
  void clear_date_range_updated();
  const ::CPublishedFile_QueryFiles_Request_DateRange& date_range_updated() const;
  PROTOBUF_NODISCARD ::CPublishedFile_QueryFiles_Request_DateRange* release_date_range_updated();
  ::CPublishedFile_QueryFiles_Request_DateRange* mutable_date_range_updated();
  void set_allocated_date_range_updated(::CPublishedFile_QueryFiles_Request_DateRange* date_range_updated);
  private:
  const ::CPublishedFile_QueryFiles_Request_DateRange& _internal_date_range_updated() const;
  ::CPublishedFile_QueryFiles_Request_DateRange* _internal_mutable_date_range_updated();
  public:
  void unsafe_arena_set_allocated_date_range_updated(
      ::CPublishedFile_QueryFiles_Request_DateRange* date_range_updated);
  ::CPublishedFile_QueryFiles_Request_DateRange* unsafe_arena_release_date_range_updated();

  // optional uint32 query_type = 1 [(.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
  bool has_query_type() const;
  private:
  bool _internal_has_query_type() const;
  public:
  void clear_query_type();
  uint32_t query_type() const;
  void set_query_type(uint32_t value);
  private:
  uint32_t _internal_query_type() const;
  void _internal_set_query_type(uint32_t value);
  public:

  // optional uint32 page = 2 [(.description) = "Current page"];
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // optional uint32 creator_appid = 4 [(.description) = "App that created the files"];
  bool has_creator_appid() const;
  private:
  bool _internal_has_creator_appid() const;
  public:
  void clear_creator_appid();
  uint32_t creator_appid() const;
  void set_creator_appid(uint32_t value);
  private:
  uint32_t _internal_creator_appid() const;
  void _internal_set_creator_appid(uint32_t value);
  public:

  // optional uint32 appid = 5 [(.description) = "App that consumes the files"];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional fixed64 child_publishedfileid = 13 [(.description) = "Find all items that reference the given item."];
  bool has_child_publishedfileid() const;
  private:
  bool _internal_has_child_publishedfileid() const;
  public:
  void clear_child_publishedfileid();
  uint64_t child_publishedfileid() const;
  void set_child_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_child_publishedfileid() const;
  void _internal_set_child_publishedfileid(uint64_t value);
  public:

  // optional uint32 filetype = 12 [(.description) = "EPublishedFileInfoMatchingFileType"];
  bool has_filetype() const;
  private:
  bool _internal_has_filetype() const;
  public:
  void clear_filetype();
  uint32_t filetype() const;
  void set_filetype(uint32_t value);
  private:
  uint32_t _internal_filetype() const;
  void _internal_set_filetype(uint32_t value);
  public:

  // optional uint32 days = 14 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
  bool has_days() const;
  private:
  bool _internal_has_days() const;
  public:
  void clear_days();
  uint32_t days() const;
  void set_days(uint32_t value);
  private:
  uint32_t _internal_days() const;
  void _internal_set_days(uint32_t value);
  public:

  // optional bool return_tags = 18 [(.description) = "Return tags in the file details"];
  bool has_return_tags() const;
  private:
  bool _internal_has_return_tags() const;
  public:
  void clear_return_tags();
  bool return_tags() const;
  void set_return_tags(bool value);
  private:
  bool _internal_return_tags() const;
  void _internal_set_return_tags(bool value);
  public:

  // optional bool return_kv_tags = 19 [(.description) = "Return key-value tags in the file details"];
  bool has_return_kv_tags() const;
  private:
  bool _internal_has_return_kv_tags() const;
  public:
  void clear_return_kv_tags();
  bool return_kv_tags() const;
  void set_return_kv_tags(bool value);
  private:
  bool _internal_return_kv_tags() const;
  void _internal_set_return_kv_tags(bool value);
  public:

  // optional bool return_previews = 20 [(.description) = "Return preview image and video details in the file details"];
  bool has_return_previews() const;
  private:
  bool _internal_has_return_previews() const;
  public:
  void clear_return_previews();
  bool return_previews() const;
  void set_return_previews(bool value);
  private:
  bool _internal_return_previews() const;
  void _internal_set_return_previews(bool value);
  public:

  // optional bool return_children = 21 [(.description) = "Return child item ids in the file details"];
  bool has_return_children() const;
  private:
  bool _internal_has_return_children() const;
  public:
  void clear_return_children();
  bool return_children() const;
  void set_return_children(bool value);
  private:
  bool _internal_return_children() const;
  void _internal_set_return_children(bool value);
  public:

  // optional bool include_recent_votes_only = 15 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
  bool has_include_recent_votes_only() const;
  private:
  bool _internal_has_include_recent_votes_only() const;
  public:
  void clear_include_recent_votes_only();
  bool include_recent_votes_only() const;
  void set_include_recent_votes_only(bool value);
  private:
  bool _internal_include_recent_votes_only() const;
  void _internal_set_include_recent_votes_only(bool value);
  public:

  // optional bool totalonly = 16 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  bool has_totalonly() const;
  private:
  bool _internal_has_totalonly() const;
  public:
  void clear_totalonly();
  bool totalonly() const;
  void set_totalonly(bool value);
  private:
  bool _internal_totalonly() const;
  void _internal_set_totalonly(bool value);
  public:

  // optional bool ids_only = 35 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  bool has_ids_only() const;
  private:
  bool _internal_has_ids_only() const;
  public:
  void clear_ids_only();
  bool ids_only() const;
  void set_ids_only(bool value);
  private:
  bool _internal_ids_only() const;
  void _internal_set_ids_only(bool value);
  public:

  // optional bool return_vote_data = 17 [(.description) = "Return vote data"];
  bool has_return_vote_data() const;
  private:
  bool _internal_has_return_vote_data() const;
  public:
  void clear_return_vote_data();
  bool return_vote_data() const;
  void set_return_vote_data(bool value);
  private:
  bool _internal_return_vote_data() const;
  void _internal_set_return_vote_data(bool value);
  public:

  // optional bool return_short_description = 22 [(.description) = "Populate the short_description field instead of file_description"];
  bool has_return_short_description() const;
  private:
  bool _internal_has_return_short_description() const;
  public:
  void clear_return_short_description();
  bool return_short_description() const;
  void set_return_short_description(bool value);
  private:
  bool _internal_return_short_description() const;
  void _internal_set_return_short_description(bool value);
  public:

  // optional bool return_for_sale_data = 30 [(.description) = "Return pricing information, if applicable"];
  bool has_return_for_sale_data() const;
  private:
  bool _internal_has_return_for_sale_data() const;
  public:
  void clear_return_for_sale_data();
  bool return_for_sale_data() const;
  void set_return_for_sale_data(bool value);
  private:
  bool _internal_return_for_sale_data() const;
  void _internal_set_return_for_sale_data(bool value);
  public:

  // optional bool return_metadata = 32 [default = false, (.description) = "Populate the metadata"];
  bool has_return_metadata() const;
  private:
  bool _internal_has_return_metadata() const;
  public:
  void clear_return_metadata();
  bool return_metadata() const;
  void set_return_metadata(bool value);
  private:
  bool _internal_return_metadata() const;
  void _internal_set_return_metadata(bool value);
  public:

  // optional bool return_details = 37 [(.description) = "By default, if none of the other \'return_*\' fields are set, only some voting details are returned. Set this to true to return the default set of details."];
  bool has_return_details() const;
  private:
  bool _internal_has_return_details() const;
  public:
  void clear_return_details();
  bool return_details() const;
  void set_return_details(bool value);
  private:
  bool _internal_return_details() const;
  void _internal_set_return_details(bool value);
  public:

  // optional uint32 cache_max_age_seconds = 31 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
  bool has_cache_max_age_seconds() const;
  private:
  bool _internal_has_cache_max_age_seconds() const;
  public:
  void clear_cache_max_age_seconds();
  uint32_t cache_max_age_seconds() const;
  void set_cache_max_age_seconds(uint32_t value);
  private:
  uint32_t _internal_cache_max_age_seconds() const;
  void _internal_set_cache_max_age_seconds(uint32_t value);
  public:

  // optional int32 language = 33 [default = 0, (.description) = "Language to search in and also what gets returned. Defaults to English."];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  int32_t language() const;
  void set_language(int32_t value);
  private:
  int32_t _internal_language() const;
  void _internal_set_language(int32_t value);
  public:

  // optional uint32 return_playtime_stats = 36 [(.description) = "Return playtime stats for the specified number of days before today."];
  bool has_return_playtime_stats() const;
  private:
  bool _internal_has_return_playtime_stats() const;
  public:
  void clear_return_playtime_stats();
  uint32_t return_playtime_stats() const;
  void set_return_playtime_stats(uint32_t value);
  private:
  uint32_t _internal_return_playtime_stats() const;
  void _internal_set_return_playtime_stats(uint32_t value);
  public:

  // optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  bool has_desired_revision() const;
  private:
  bool _internal_has_desired_revision() const;
  public:
  void clear_desired_revision();
  ::EPublishedFileRevision desired_revision() const;
  void set_desired_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_desired_revision() const;
  void _internal_set_desired_revision(::EPublishedFileRevision value);
  public:

  // optional bool strip_description_bbcode = 38 [(.description) = "Strips BBCode from descriptions."];
  bool has_strip_description_bbcode() const;
  private:
  bool _internal_has_strip_description_bbcode() const;
  public:
  void clear_strip_description_bbcode();
  bool strip_description_bbcode() const;
  void set_strip_description_bbcode(bool value);
  private:
  bool _internal_strip_description_bbcode() const;
  void _internal_set_strip_description_bbcode(bool value);
  public:

  // optional bool return_reactions = 43 [default = false, (.description) = "If true, then reactions to items will be returned."];
  bool has_return_reactions() const;
  private:
  bool _internal_has_return_reactions() const;
  public:
  void clear_return_reactions();
  bool return_reactions() const;
  void set_return_reactions(bool value);
  private:
  bool _internal_return_reactions() const;
  void _internal_set_return_reactions(bool value);
  public:

  // optional uint32 numperpage = 3 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  bool has_numperpage() const;
  private:
  bool _internal_has_numperpage() const;
  public:
  void clear_numperpage();
  uint32_t numperpage() const;
  void set_numperpage(uint32_t value);
  private:
  uint32_t _internal_numperpage() const;
  void _internal_set_numperpage(uint32_t value);
  public:

  // optional bool match_all_tags = 8 [default = true, (.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
  bool has_match_all_tags() const;
  private:
  bool _internal_has_match_all_tags() const;
  public:
  void clear_match_all_tags();
  bool match_all_tags() const;
  void set_match_all_tags(bool value);
  private:
  bool _internal_match_all_tags() const;
  void _internal_set_match_all_tags(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_QueryFiles_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requiredtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> omitted_flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_KVTag > required_kv_tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_TagGroup > taggroups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> excluded_content_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::CPublishedFile_QueryFiles_Request_DateRange* date_range_created_;
  ::CPublishedFile_QueryFiles_Request_DateRange* date_range_updated_;
  uint32_t query_type_;
  uint32_t page_;
  uint32_t creator_appid_;
  uint32_t appid_;
  uint64_t child_publishedfileid_;
  uint32_t filetype_;
  uint32_t days_;
  bool return_tags_;
  bool return_kv_tags_;
  bool return_previews_;
  bool return_children_;
  bool include_recent_votes_only_;
  bool totalonly_;
  bool ids_only_;
  bool return_vote_data_;
  bool return_short_description_;
  bool return_for_sale_data_;
  bool return_metadata_;
  bool return_details_;
  uint32_t cache_max_age_seconds_;
  int32_t language_;
  uint32_t return_playtime_stats_;
  int desired_revision_;
  bool strip_description_bbcode_;
  bool return_reactions_;
  uint32_t numperpage_;
  bool match_all_tags_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_QueryFiles_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_QueryFiles_Response) */ {
 public:
  inline CPublishedFile_QueryFiles_Response() : CPublishedFile_QueryFiles_Response(nullptr) {}
  ~CPublishedFile_QueryFiles_Response() override;
  explicit constexpr CPublishedFile_QueryFiles_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_QueryFiles_Response(const CPublishedFile_QueryFiles_Response& from);
  CPublishedFile_QueryFiles_Response(CPublishedFile_QueryFiles_Response&& from) noexcept
    : CPublishedFile_QueryFiles_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_QueryFiles_Response& operator=(const CPublishedFile_QueryFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_QueryFiles_Response& operator=(CPublishedFile_QueryFiles_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_QueryFiles_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_QueryFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_QueryFiles_Response*>(
               &_CPublishedFile_QueryFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CPublishedFile_QueryFiles_Response& a, CPublishedFile_QueryFiles_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_QueryFiles_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_QueryFiles_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_QueryFiles_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_QueryFiles_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_QueryFiles_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_QueryFiles_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_QueryFiles_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_QueryFiles_Response";
  }
  protected:
  explicit CPublishedFile_QueryFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfiledetailsFieldNumber = 2,
    kNextCursorFieldNumber = 3,
    kTotalFieldNumber = 1,
  };
  // repeated .PublishedFileDetails publishedfiledetails = 2 [(.description) = "Each file details will be populated, depending on what return values were requested."];
  int publishedfiledetails_size() const;
  private:
  int _internal_publishedfiledetails_size() const;
  public:
  void clear_publishedfiledetails();
  ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();
  private:
  const ::PublishedFileDetails& _internal_publishedfiledetails(int index) const;
  ::PublishedFileDetails* _internal_add_publishedfiledetails();
  public:
  const ::PublishedFileDetails& publishedfiledetails(int index) const;
  ::PublishedFileDetails* add_publishedfiledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;

  // optional string next_cursor = 3 [(.description) = "If a paging cursor was used, then this will be the next cursor to use for paging through results"];
  bool has_next_cursor() const;
  private:
  bool _internal_has_next_cursor() const;
  public:
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // optional uint32 total = 1 [(.description) = "Number of matches found, not necessarily number of items returned"];
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_QueryFiles_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
  uint32_t total_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AddAppRelationship_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_AddAppRelationship_Request) */ {
 public:
  inline CPublishedFile_AddAppRelationship_Request() : CPublishedFile_AddAppRelationship_Request(nullptr) {}
  ~CPublishedFile_AddAppRelationship_Request() override;
  explicit constexpr CPublishedFile_AddAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AddAppRelationship_Request(const CPublishedFile_AddAppRelationship_Request& from);
  CPublishedFile_AddAppRelationship_Request(CPublishedFile_AddAppRelationship_Request&& from) noexcept
    : CPublishedFile_AddAppRelationship_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AddAppRelationship_Request& operator=(const CPublishedFile_AddAppRelationship_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AddAppRelationship_Request& operator=(CPublishedFile_AddAppRelationship_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AddAppRelationship_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AddAppRelationship_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AddAppRelationship_Request*>(
               &_CPublishedFile_AddAppRelationship_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CPublishedFile_AddAppRelationship_Request& a, CPublishedFile_AddAppRelationship_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AddAppRelationship_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AddAppRelationship_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AddAppRelationship_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AddAppRelationship_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_AddAppRelationship_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_AddAppRelationship_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_AddAppRelationship_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AddAppRelationship_Request";
  }
  protected:
  explicit CPublishedFile_AddAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kRelationshipFieldNumber = 3,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 relationship = 3;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  uint32_t relationship() const;
  void set_relationship(uint32_t value);
  private:
  uint32_t _internal_relationship() const;
  void _internal_set_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_AddAppRelationship_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t appid_;
  uint32_t relationship_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AddAppRelationship_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_AddAppRelationship_Response) */ {
 public:
  inline CPublishedFile_AddAppRelationship_Response() : CPublishedFile_AddAppRelationship_Response(nullptr) {}
  explicit constexpr CPublishedFile_AddAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AddAppRelationship_Response(const CPublishedFile_AddAppRelationship_Response& from);
  CPublishedFile_AddAppRelationship_Response(CPublishedFile_AddAppRelationship_Response&& from) noexcept
    : CPublishedFile_AddAppRelationship_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AddAppRelationship_Response& operator=(const CPublishedFile_AddAppRelationship_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AddAppRelationship_Response& operator=(CPublishedFile_AddAppRelationship_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AddAppRelationship_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AddAppRelationship_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AddAppRelationship_Response*>(
               &_CPublishedFile_AddAppRelationship_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CPublishedFile_AddAppRelationship_Response& a, CPublishedFile_AddAppRelationship_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AddAppRelationship_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AddAppRelationship_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AddAppRelationship_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AddAppRelationship_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_AddAppRelationship_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_AddAppRelationship_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AddAppRelationship_Response";
  }
  protected:
  explicit CPublishedFile_AddAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_AddAppRelationship_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RemoveAppRelationship_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_RemoveAppRelationship_Request) */ {
 public:
  inline CPublishedFile_RemoveAppRelationship_Request() : CPublishedFile_RemoveAppRelationship_Request(nullptr) {}
  ~CPublishedFile_RemoveAppRelationship_Request() override;
  explicit constexpr CPublishedFile_RemoveAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RemoveAppRelationship_Request(const CPublishedFile_RemoveAppRelationship_Request& from);
  CPublishedFile_RemoveAppRelationship_Request(CPublishedFile_RemoveAppRelationship_Request&& from) noexcept
    : CPublishedFile_RemoveAppRelationship_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RemoveAppRelationship_Request& operator=(const CPublishedFile_RemoveAppRelationship_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RemoveAppRelationship_Request& operator=(CPublishedFile_RemoveAppRelationship_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RemoveAppRelationship_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RemoveAppRelationship_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RemoveAppRelationship_Request*>(
               &_CPublishedFile_RemoveAppRelationship_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CPublishedFile_RemoveAppRelationship_Request& a, CPublishedFile_RemoveAppRelationship_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RemoveAppRelationship_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RemoveAppRelationship_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RemoveAppRelationship_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RemoveAppRelationship_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_RemoveAppRelationship_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_RemoveAppRelationship_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_RemoveAppRelationship_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RemoveAppRelationship_Request";
  }
  protected:
  explicit CPublishedFile_RemoveAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kRelationshipFieldNumber = 3,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 relationship = 3;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  uint32_t relationship() const;
  void set_relationship(uint32_t value);
  private:
  uint32_t _internal_relationship() const;
  void _internal_set_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_RemoveAppRelationship_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint32_t appid_;
  uint32_t relationship_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RemoveAppRelationship_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_RemoveAppRelationship_Response) */ {
 public:
  inline CPublishedFile_RemoveAppRelationship_Response() : CPublishedFile_RemoveAppRelationship_Response(nullptr) {}
  explicit constexpr CPublishedFile_RemoveAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RemoveAppRelationship_Response(const CPublishedFile_RemoveAppRelationship_Response& from);
  CPublishedFile_RemoveAppRelationship_Response(CPublishedFile_RemoveAppRelationship_Response&& from) noexcept
    : CPublishedFile_RemoveAppRelationship_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RemoveAppRelationship_Response& operator=(const CPublishedFile_RemoveAppRelationship_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RemoveAppRelationship_Response& operator=(CPublishedFile_RemoveAppRelationship_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RemoveAppRelationship_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RemoveAppRelationship_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RemoveAppRelationship_Response*>(
               &_CPublishedFile_RemoveAppRelationship_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CPublishedFile_RemoveAppRelationship_Response& a, CPublishedFile_RemoveAppRelationship_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RemoveAppRelationship_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RemoveAppRelationship_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RemoveAppRelationship_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RemoveAppRelationship_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_RemoveAppRelationship_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_RemoveAppRelationship_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RemoveAppRelationship_Response";
  }
  protected:
  explicit CPublishedFile_RemoveAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_RemoveAppRelationship_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationships_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationships_Request) */ {
 public:
  inline CPublishedFile_GetAppRelationships_Request() : CPublishedFile_GetAppRelationships_Request(nullptr) {}
  ~CPublishedFile_GetAppRelationships_Request() override;
  explicit constexpr CPublishedFile_GetAppRelationships_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationships_Request(const CPublishedFile_GetAppRelationships_Request& from);
  CPublishedFile_GetAppRelationships_Request(CPublishedFile_GetAppRelationships_Request&& from) noexcept
    : CPublishedFile_GetAppRelationships_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationships_Request& operator=(const CPublishedFile_GetAppRelationships_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationships_Request& operator=(CPublishedFile_GetAppRelationships_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationships_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationships_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationships_Request*>(
               &_CPublishedFile_GetAppRelationships_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CPublishedFile_GetAppRelationships_Request& a, CPublishedFile_GetAppRelationships_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationships_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationships_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationships_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationships_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationships_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationships_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationships_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationships_Request";
  }
  protected:
  explicit CPublishedFile_GetAppRelationships_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationships_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationships_Response_AppRelationship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationships_Response.AppRelationship) */ {
 public:
  inline CPublishedFile_GetAppRelationships_Response_AppRelationship() : CPublishedFile_GetAppRelationships_Response_AppRelationship(nullptr) {}
  ~CPublishedFile_GetAppRelationships_Response_AppRelationship() override;
  explicit constexpr CPublishedFile_GetAppRelationships_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationships_Response_AppRelationship(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from);
  CPublishedFile_GetAppRelationships_Response_AppRelationship(CPublishedFile_GetAppRelationships_Response_AppRelationship&& from) noexcept
    : CPublishedFile_GetAppRelationships_Response_AppRelationship() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationships_Response_AppRelationship& operator=(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationships_Response_AppRelationship& operator=(CPublishedFile_GetAppRelationships_Response_AppRelationship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationships_Response_AppRelationship& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationships_Response_AppRelationship* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationships_Response_AppRelationship*>(
               &_CPublishedFile_GetAppRelationships_Response_AppRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CPublishedFile_GetAppRelationships_Response_AppRelationship& a, CPublishedFile_GetAppRelationships_Response_AppRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationships_Response_AppRelationship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationships_Response_AppRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationships_Response_AppRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationships_Response_AppRelationship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationships_Response_AppRelationship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationships_Response.AppRelationship";
  }
  protected:
  explicit CPublishedFile_GetAppRelationships_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kRelationshipFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 relationship = 2;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  uint32_t relationship() const;
  void set_relationship(uint32_t value);
  private:
  uint32_t _internal_relationship() const;
  void _internal_set_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationships_Response.AppRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t relationship_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationships_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationships_Response) */ {
 public:
  inline CPublishedFile_GetAppRelationships_Response() : CPublishedFile_GetAppRelationships_Response(nullptr) {}
  ~CPublishedFile_GetAppRelationships_Response() override;
  explicit constexpr CPublishedFile_GetAppRelationships_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationships_Response(const CPublishedFile_GetAppRelationships_Response& from);
  CPublishedFile_GetAppRelationships_Response(CPublishedFile_GetAppRelationships_Response&& from) noexcept
    : CPublishedFile_GetAppRelationships_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationships_Response& operator=(const CPublishedFile_GetAppRelationships_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationships_Response& operator=(CPublishedFile_GetAppRelationships_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationships_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationships_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationships_Response*>(
               &_CPublishedFile_GetAppRelationships_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CPublishedFile_GetAppRelationships_Response& a, CPublishedFile_GetAppRelationships_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationships_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationships_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationships_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationships_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationships_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationships_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationships_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationships_Response";
  }
  protected:
  explicit CPublishedFile_GetAppRelationships_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetAppRelationships_Response_AppRelationship AppRelationship;

  // accessors -------------------------------------------------------

  enum : int {
    kAppRelationshipsFieldNumber = 3,
  };
  // repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
  int app_relationships_size() const;
  private:
  int _internal_app_relationships_size() const;
  public:
  void clear_app_relationships();
  ::CPublishedFile_GetAppRelationships_Response_AppRelationship* mutable_app_relationships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >*
      mutable_app_relationships();
  private:
  const ::CPublishedFile_GetAppRelationships_Response_AppRelationship& _internal_app_relationships(int index) const;
  ::CPublishedFile_GetAppRelationships_Response_AppRelationship* _internal_add_app_relationships();
  public:
  const ::CPublishedFile_GetAppRelationships_Response_AppRelationship& app_relationships(int index) const;
  ::CPublishedFile_GetAppRelationships_Response_AppRelationship* add_app_relationships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >&
      app_relationships() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationships_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationships_Response_AppRelationship > app_relationships_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationshipsBatched_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationshipsBatched_Request) */ {
 public:
  inline CPublishedFile_GetAppRelationshipsBatched_Request() : CPublishedFile_GetAppRelationshipsBatched_Request(nullptr) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Request() override;
  explicit constexpr CPublishedFile_GetAppRelationshipsBatched_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationshipsBatched_Request(const CPublishedFile_GetAppRelationshipsBatched_Request& from);
  CPublishedFile_GetAppRelationshipsBatched_Request(CPublishedFile_GetAppRelationshipsBatched_Request&& from) noexcept
    : CPublishedFile_GetAppRelationshipsBatched_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationshipsBatched_Request& operator=(const CPublishedFile_GetAppRelationshipsBatched_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationshipsBatched_Request& operator=(CPublishedFile_GetAppRelationshipsBatched_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationshipsBatched_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationshipsBatched_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationshipsBatched_Request*>(
               &_CPublishedFile_GetAppRelationshipsBatched_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CPublishedFile_GetAppRelationshipsBatched_Request& a, CPublishedFile_GetAppRelationshipsBatched_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationshipsBatched_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationshipsBatched_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationshipsBatched_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationshipsBatched_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationshipsBatched_Request";
  }
  protected:
  explicit CPublishedFile_GetAppRelationshipsBatched_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 1,
    kFilterRelationshipFieldNumber = 2,
  };
  // repeated uint64 publishedfileids = 1;
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // optional uint32 filter_relationship = 2;
  bool has_filter_relationship() const;
  private:
  bool _internal_has_filter_relationship() const;
  public:
  void clear_filter_relationship();
  uint32_t filter_relationship() const;
  void set_filter_relationship(uint32_t value);
  private:
  uint32_t _internal_filter_relationship() const;
  void _internal_set_filter_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationshipsBatched_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  uint32_t filter_relationship_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship) */ {
 public:
  inline CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship() : CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(nullptr) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship() override;
  explicit constexpr CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from);
  CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship&& from) noexcept
    : CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& operator=(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& operator=(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship*>(
               &_CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& a, CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship";
  }
  protected:
  explicit CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kRelationshipFieldNumber = 2,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 relationship = 2;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  uint32_t relationship() const;
  void set_relationship(uint32_t value);
  private:
  uint32_t _internal_relationship() const;
  void _internal_set_relationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t relationship_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship) */ {
 public:
  inline CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship() : CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(nullptr) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship() override;
  explicit constexpr CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from);
  CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship&& from) noexcept
    : CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& operator=(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& operator=(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship*>(
               &_CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& a, CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship";
  }
  protected:
  explicit CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppRelationshipsFieldNumber = 3,
    kPublishedfileidFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
  int app_relationships_size() const;
  private:
  int _internal_app_relationships_size() const;
  public:
  void clear_app_relationships();
  ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* mutable_app_relationships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >*
      mutable_app_relationships();
  private:
  const ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& _internal_app_relationships(int index) const;
  ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* _internal_add_app_relationships();
  public:
  const ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& app_relationships(int index) const;
  ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* add_app_relationships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >&
      app_relationships() const;

  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint32 result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship > app_relationships_;
  uint64_t publishedfileid_;
  uint32_t result_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetAppRelationshipsBatched_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetAppRelationshipsBatched_Response) */ {
 public:
  inline CPublishedFile_GetAppRelationshipsBatched_Response() : CPublishedFile_GetAppRelationshipsBatched_Response(nullptr) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Response() override;
  explicit constexpr CPublishedFile_GetAppRelationshipsBatched_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetAppRelationshipsBatched_Response(const CPublishedFile_GetAppRelationshipsBatched_Response& from);
  CPublishedFile_GetAppRelationshipsBatched_Response(CPublishedFile_GetAppRelationshipsBatched_Response&& from) noexcept
    : CPublishedFile_GetAppRelationshipsBatched_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetAppRelationshipsBatched_Response& operator=(const CPublishedFile_GetAppRelationshipsBatched_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetAppRelationshipsBatched_Response& operator=(CPublishedFile_GetAppRelationshipsBatched_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetAppRelationshipsBatched_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetAppRelationshipsBatched_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetAppRelationshipsBatched_Response*>(
               &_CPublishedFile_GetAppRelationshipsBatched_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CPublishedFile_GetAppRelationshipsBatched_Response& a, CPublishedFile_GetAppRelationshipsBatched_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetAppRelationshipsBatched_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetAppRelationshipsBatched_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetAppRelationshipsBatched_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetAppRelationshipsBatched_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetAppRelationshipsBatched_Response";
  }
  protected:
  explicit CPublishedFile_GetAppRelationshipsBatched_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship AppRelationship;
  typedef CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship PublishedFileAppRelationship;

  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipsFieldNumber = 1,
  };
  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
  int relationships_size() const;
  private:
  int _internal_relationships_size() const;
  public:
  void clear_relationships();
  ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* mutable_relationships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >*
      mutable_relationships();
  private:
  const ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& _internal_relationships(int index) const;
  ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* _internal_add_relationships();
  public:
  const ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& relationships(int index) const;
  ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* add_relationships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >&
      relationships() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetAppRelationshipsBatched_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship > relationships_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StartPlaytimeTracking_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_StartPlaytimeTracking_Request) */ {
 public:
  inline CPublishedFile_StartPlaytimeTracking_Request() : CPublishedFile_StartPlaytimeTracking_Request(nullptr) {}
  ~CPublishedFile_StartPlaytimeTracking_Request() override;
  explicit constexpr CPublishedFile_StartPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StartPlaytimeTracking_Request(const CPublishedFile_StartPlaytimeTracking_Request& from);
  CPublishedFile_StartPlaytimeTracking_Request(CPublishedFile_StartPlaytimeTracking_Request&& from) noexcept
    : CPublishedFile_StartPlaytimeTracking_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StartPlaytimeTracking_Request& operator=(const CPublishedFile_StartPlaytimeTracking_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StartPlaytimeTracking_Request& operator=(CPublishedFile_StartPlaytimeTracking_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StartPlaytimeTracking_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StartPlaytimeTracking_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StartPlaytimeTracking_Request*>(
               &_CPublishedFile_StartPlaytimeTracking_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CPublishedFile_StartPlaytimeTracking_Request& a, CPublishedFile_StartPlaytimeTracking_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StartPlaytimeTracking_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StartPlaytimeTracking_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StartPlaytimeTracking_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StartPlaytimeTracking_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_StartPlaytimeTracking_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_StartPlaytimeTracking_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_StartPlaytimeTracking_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StartPlaytimeTracking_Request";
  }
  protected:
  explicit CPublishedFile_StartPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated uint64 publishedfileids = 2;
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_StartPlaytimeTracking_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StartPlaytimeTracking_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_StartPlaytimeTracking_Response) */ {
 public:
  inline CPublishedFile_StartPlaytimeTracking_Response() : CPublishedFile_StartPlaytimeTracking_Response(nullptr) {}
  explicit constexpr CPublishedFile_StartPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StartPlaytimeTracking_Response(const CPublishedFile_StartPlaytimeTracking_Response& from);
  CPublishedFile_StartPlaytimeTracking_Response(CPublishedFile_StartPlaytimeTracking_Response&& from) noexcept
    : CPublishedFile_StartPlaytimeTracking_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StartPlaytimeTracking_Response& operator=(const CPublishedFile_StartPlaytimeTracking_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StartPlaytimeTracking_Response& operator=(CPublishedFile_StartPlaytimeTracking_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StartPlaytimeTracking_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StartPlaytimeTracking_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StartPlaytimeTracking_Response*>(
               &_CPublishedFile_StartPlaytimeTracking_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CPublishedFile_StartPlaytimeTracking_Response& a, CPublishedFile_StartPlaytimeTracking_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StartPlaytimeTracking_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StartPlaytimeTracking_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StartPlaytimeTracking_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StartPlaytimeTracking_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_StartPlaytimeTracking_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_StartPlaytimeTracking_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StartPlaytimeTracking_Response";
  }
  protected:
  explicit CPublishedFile_StartPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_StartPlaytimeTracking_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StopPlaytimeTracking_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_StopPlaytimeTracking_Request) */ {
 public:
  inline CPublishedFile_StopPlaytimeTracking_Request() : CPublishedFile_StopPlaytimeTracking_Request(nullptr) {}
  ~CPublishedFile_StopPlaytimeTracking_Request() override;
  explicit constexpr CPublishedFile_StopPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StopPlaytimeTracking_Request(const CPublishedFile_StopPlaytimeTracking_Request& from);
  CPublishedFile_StopPlaytimeTracking_Request(CPublishedFile_StopPlaytimeTracking_Request&& from) noexcept
    : CPublishedFile_StopPlaytimeTracking_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StopPlaytimeTracking_Request& operator=(const CPublishedFile_StopPlaytimeTracking_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StopPlaytimeTracking_Request& operator=(CPublishedFile_StopPlaytimeTracking_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StopPlaytimeTracking_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StopPlaytimeTracking_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StopPlaytimeTracking_Request*>(
               &_CPublishedFile_StopPlaytimeTracking_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CPublishedFile_StopPlaytimeTracking_Request& a, CPublishedFile_StopPlaytimeTracking_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StopPlaytimeTracking_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StopPlaytimeTracking_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StopPlaytimeTracking_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StopPlaytimeTracking_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_StopPlaytimeTracking_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_StopPlaytimeTracking_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_StopPlaytimeTracking_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StopPlaytimeTracking_Request";
  }
  protected:
  explicit CPublishedFile_StopPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated uint64 publishedfileids = 2;
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_StopPlaytimeTracking_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StopPlaytimeTracking_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_StopPlaytimeTracking_Response) */ {
 public:
  inline CPublishedFile_StopPlaytimeTracking_Response() : CPublishedFile_StopPlaytimeTracking_Response(nullptr) {}
  explicit constexpr CPublishedFile_StopPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StopPlaytimeTracking_Response(const CPublishedFile_StopPlaytimeTracking_Response& from);
  CPublishedFile_StopPlaytimeTracking_Response(CPublishedFile_StopPlaytimeTracking_Response&& from) noexcept
    : CPublishedFile_StopPlaytimeTracking_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StopPlaytimeTracking_Response& operator=(const CPublishedFile_StopPlaytimeTracking_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StopPlaytimeTracking_Response& operator=(CPublishedFile_StopPlaytimeTracking_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StopPlaytimeTracking_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StopPlaytimeTracking_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StopPlaytimeTracking_Response*>(
               &_CPublishedFile_StopPlaytimeTracking_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CPublishedFile_StopPlaytimeTracking_Response& a, CPublishedFile_StopPlaytimeTracking_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StopPlaytimeTracking_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StopPlaytimeTracking_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StopPlaytimeTracking_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StopPlaytimeTracking_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_StopPlaytimeTracking_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_StopPlaytimeTracking_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StopPlaytimeTracking_Response";
  }
  protected:
  explicit CPublishedFile_StopPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_StopPlaytimeTracking_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) */ {
 public:
  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request() : CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(nullptr) {}
  ~CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request() override;
  explicit constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from);
  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request&& from) noexcept
    : CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& operator=(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& operator=(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request*>(
               &_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& a, CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request";
  }
  protected:
  explicit CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) */ {
 public:
  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response() : CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(nullptr) {}
  explicit constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from);
  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response&& from) noexcept
    : CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& operator=(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& operator=(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response*>(
               &_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& a, CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response";
  }
  protected:
  explicit CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage) */ {
 public:
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage() : CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(nullptr) {}
  ~CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage() override;
  explicit constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from);
  CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage&& from) noexcept
    : CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& operator=(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& operator=(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage*>(
               &_CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& a, CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage";
  }
  protected:
  explicit CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kSecondsActiveFieldNumber = 2,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional float seconds_active = 2;
  bool has_seconds_active() const;
  private:
  bool _internal_has_seconds_active() const;
  public:
  void clear_seconds_active();
  float seconds_active() const;
  void set_seconds_active(float value);
  private:
  float _internal_seconds_active() const;
  void _internal_set_seconds_active(float value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  float seconds_active_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_SetPlaytimeForControllerConfigs_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_SetPlaytimeForControllerConfigs_Request) */ {
 public:
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request() : CPublishedFile_SetPlaytimeForControllerConfigs_Request(nullptr) {}
  ~CPublishedFile_SetPlaytimeForControllerConfigs_Request() override;
  explicit constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_SetPlaytimeForControllerConfigs_Request(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from);
  CPublishedFile_SetPlaytimeForControllerConfigs_Request(CPublishedFile_SetPlaytimeForControllerConfigs_Request&& from) noexcept
    : CPublishedFile_SetPlaytimeForControllerConfigs_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request& operator=(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Request& operator=(CPublishedFile_SetPlaytimeForControllerConfigs_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_SetPlaytimeForControllerConfigs_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_SetPlaytimeForControllerConfigs_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_SetPlaytimeForControllerConfigs_Request*>(
               &_CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request& a, CPublishedFile_SetPlaytimeForControllerConfigs_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_SetPlaytimeForControllerConfigs_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_SetPlaytimeForControllerConfigs_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_SetPlaytimeForControllerConfigs_Request";
  }
  protected:
  explicit CPublishedFile_SetPlaytimeForControllerConfigs_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage ControllerConfigUsage;

  // accessors -------------------------------------------------------

  enum : int {
    kControllerConfigUsageFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  int controller_config_usage_size() const;
  private:
  int _internal_controller_config_usage_size() const;
  public:
  void clear_controller_config_usage();
  ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* mutable_controller_config_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >*
      mutable_controller_config_usage();
  private:
  const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& _internal_controller_config_usage(int index) const;
  ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* _internal_add_controller_config_usage();
  public:
  const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& controller_config_usage(int index) const;
  ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* add_controller_config_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >&
      controller_config_usage() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage > controller_config_usage_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_SetPlaytimeForControllerConfigs_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_SetPlaytimeForControllerConfigs_Response) */ {
 public:
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Response() : CPublishedFile_SetPlaytimeForControllerConfigs_Response(nullptr) {}
  explicit constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_SetPlaytimeForControllerConfigs_Response(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from);
  CPublishedFile_SetPlaytimeForControllerConfigs_Response(CPublishedFile_SetPlaytimeForControllerConfigs_Response&& from) noexcept
    : CPublishedFile_SetPlaytimeForControllerConfigs_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_SetPlaytimeForControllerConfigs_Response& operator=(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_SetPlaytimeForControllerConfigs_Response& operator=(CPublishedFile_SetPlaytimeForControllerConfigs_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_SetPlaytimeForControllerConfigs_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_SetPlaytimeForControllerConfigs_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_SetPlaytimeForControllerConfigs_Response*>(
               &_CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CPublishedFile_SetPlaytimeForControllerConfigs_Response& a, CPublishedFile_SetPlaytimeForControllerConfigs_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_SetPlaytimeForControllerConfigs_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_SetPlaytimeForControllerConfigs_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_SetPlaytimeForControllerConfigs_Response";
  }
  protected:
  explicit CPublishedFile_SetPlaytimeForControllerConfigs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_SetPlaytimeForControllerConfigs_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AddChild_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_AddChild_Request) */ {
 public:
  inline CPublishedFile_AddChild_Request() : CPublishedFile_AddChild_Request(nullptr) {}
  ~CPublishedFile_AddChild_Request() override;
  explicit constexpr CPublishedFile_AddChild_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AddChild_Request(const CPublishedFile_AddChild_Request& from);
  CPublishedFile_AddChild_Request(CPublishedFile_AddChild_Request&& from) noexcept
    : CPublishedFile_AddChild_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AddChild_Request& operator=(const CPublishedFile_AddChild_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AddChild_Request& operator=(CPublishedFile_AddChild_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AddChild_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AddChild_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AddChild_Request*>(
               &_CPublishedFile_AddChild_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CPublishedFile_AddChild_Request& a, CPublishedFile_AddChild_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AddChild_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AddChild_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AddChild_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AddChild_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_AddChild_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_AddChild_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_AddChild_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AddChild_Request";
  }
  protected:
  explicit CPublishedFile_AddChild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kChildPublishedfileidFieldNumber = 2,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint64 child_publishedfileid = 2;
  bool has_child_publishedfileid() const;
  private:
  bool _internal_has_child_publishedfileid() const;
  public:
  void clear_child_publishedfileid();
  uint64_t child_publishedfileid() const;
  void set_child_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_child_publishedfileid() const;
  void _internal_set_child_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_AddChild_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint64_t child_publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_AddChild_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_AddChild_Response) */ {
 public:
  inline CPublishedFile_AddChild_Response() : CPublishedFile_AddChild_Response(nullptr) {}
  explicit constexpr CPublishedFile_AddChild_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_AddChild_Response(const CPublishedFile_AddChild_Response& from);
  CPublishedFile_AddChild_Response(CPublishedFile_AddChild_Response&& from) noexcept
    : CPublishedFile_AddChild_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_AddChild_Response& operator=(const CPublishedFile_AddChild_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_AddChild_Response& operator=(CPublishedFile_AddChild_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_AddChild_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_AddChild_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_AddChild_Response*>(
               &_CPublishedFile_AddChild_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CPublishedFile_AddChild_Response& a, CPublishedFile_AddChild_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_AddChild_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_AddChild_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_AddChild_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_AddChild_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_AddChild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_AddChild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_AddChild_Response";
  }
  protected:
  explicit CPublishedFile_AddChild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_AddChild_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RemoveChild_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_RemoveChild_Request) */ {
 public:
  inline CPublishedFile_RemoveChild_Request() : CPublishedFile_RemoveChild_Request(nullptr) {}
  ~CPublishedFile_RemoveChild_Request() override;
  explicit constexpr CPublishedFile_RemoveChild_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RemoveChild_Request(const CPublishedFile_RemoveChild_Request& from);
  CPublishedFile_RemoveChild_Request(CPublishedFile_RemoveChild_Request&& from) noexcept
    : CPublishedFile_RemoveChild_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RemoveChild_Request& operator=(const CPublishedFile_RemoveChild_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RemoveChild_Request& operator=(CPublishedFile_RemoveChild_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RemoveChild_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RemoveChild_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RemoveChild_Request*>(
               &_CPublishedFile_RemoveChild_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CPublishedFile_RemoveChild_Request& a, CPublishedFile_RemoveChild_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RemoveChild_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RemoveChild_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RemoveChild_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RemoveChild_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_RemoveChild_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_RemoveChild_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_RemoveChild_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RemoveChild_Request";
  }
  protected:
  explicit CPublishedFile_RemoveChild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kChildPublishedfileidFieldNumber = 2,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional uint64 child_publishedfileid = 2;
  bool has_child_publishedfileid() const;
  private:
  bool _internal_has_child_publishedfileid() const;
  public:
  void clear_child_publishedfileid();
  uint64_t child_publishedfileid() const;
  void set_child_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_child_publishedfileid() const;
  void _internal_set_child_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_RemoveChild_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  uint64_t child_publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RemoveChild_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CPublishedFile_RemoveChild_Response) */ {
 public:
  inline CPublishedFile_RemoveChild_Response() : CPublishedFile_RemoveChild_Response(nullptr) {}
  explicit constexpr CPublishedFile_RemoveChild_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RemoveChild_Response(const CPublishedFile_RemoveChild_Response& from);
  CPublishedFile_RemoveChild_Response(CPublishedFile_RemoveChild_Response&& from) noexcept
    : CPublishedFile_RemoveChild_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RemoveChild_Response& operator=(const CPublishedFile_RemoveChild_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RemoveChild_Response& operator=(CPublishedFile_RemoveChild_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_RemoveChild_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RemoveChild_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RemoveChild_Response*>(
               &_CPublishedFile_RemoveChild_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CPublishedFile_RemoveChild_Response& a, CPublishedFile_RemoveChild_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RemoveChild_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RemoveChild_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_RemoveChild_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_RemoveChild_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CPublishedFile_RemoveChild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CPublishedFile_RemoveChild_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RemoveChild_Response";
  }
  protected:
  explicit CPublishedFile_RemoveChild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_RemoveChild_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserVoteSummary_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserVoteSummary_Request) */ {
 public:
  inline CPublishedFile_GetUserVoteSummary_Request() : CPublishedFile_GetUserVoteSummary_Request(nullptr) {}
  ~CPublishedFile_GetUserVoteSummary_Request() override;
  explicit constexpr CPublishedFile_GetUserVoteSummary_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserVoteSummary_Request(const CPublishedFile_GetUserVoteSummary_Request& from);
  CPublishedFile_GetUserVoteSummary_Request(CPublishedFile_GetUserVoteSummary_Request&& from) noexcept
    : CPublishedFile_GetUserVoteSummary_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserVoteSummary_Request& operator=(const CPublishedFile_GetUserVoteSummary_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserVoteSummary_Request& operator=(CPublishedFile_GetUserVoteSummary_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserVoteSummary_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserVoteSummary_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserVoteSummary_Request*>(
               &_CPublishedFile_GetUserVoteSummary_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CPublishedFile_GetUserVoteSummary_Request& a, CPublishedFile_GetUserVoteSummary_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserVoteSummary_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserVoteSummary_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserVoteSummary_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserVoteSummary_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserVoteSummary_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserVoteSummary_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserVoteSummary_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserVoteSummary_Request";
  }
  protected:
  explicit CPublishedFile_GetUserVoteSummary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 1,
  };
  // repeated fixed64 publishedfileids = 1;
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  uint64_t _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_publishedfileids();
  public:
  uint64_t publishedfileids(int index) const;
  void set_publishedfileids(int index, uint64_t value);
  void add_publishedfileids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_publishedfileids();

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserVoteSummary_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > publishedfileids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserVoteSummary_Response_VoteSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserVoteSummary_Response.VoteSummary) */ {
 public:
  inline CPublishedFile_GetUserVoteSummary_Response_VoteSummary() : CPublishedFile_GetUserVoteSummary_Response_VoteSummary(nullptr) {}
  ~CPublishedFile_GetUserVoteSummary_Response_VoteSummary() override;
  explicit constexpr CPublishedFile_GetUserVoteSummary_Response_VoteSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserVoteSummary_Response_VoteSummary(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from);
  CPublishedFile_GetUserVoteSummary_Response_VoteSummary(CPublishedFile_GetUserVoteSummary_Response_VoteSummary&& from) noexcept
    : CPublishedFile_GetUserVoteSummary_Response_VoteSummary() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserVoteSummary_Response_VoteSummary& operator=(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserVoteSummary_Response_VoteSummary& operator=(CPublishedFile_GetUserVoteSummary_Response_VoteSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserVoteSummary_Response_VoteSummary* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserVoteSummary_Response_VoteSummary*>(
               &_CPublishedFile_GetUserVoteSummary_Response_VoteSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CPublishedFile_GetUserVoteSummary_Response_VoteSummary& a, CPublishedFile_GetUserVoteSummary_Response_VoteSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserVoteSummary_Response_VoteSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserVoteSummary_Response_VoteSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserVoteSummary_Response_VoteSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserVoteSummary_Response_VoteSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserVoteSummary_Response_VoteSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserVoteSummary_Response.VoteSummary";
  }
  protected:
  explicit CPublishedFile_GetUserVoteSummary_Response_VoteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kVoteForFieldNumber = 2,
    kVoteAgainstFieldNumber = 3,
    kReportedFieldNumber = 4,
  };
  // optional fixed64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // optional bool vote_for = 2;
  bool has_vote_for() const;
  private:
  bool _internal_has_vote_for() const;
  public:
  void clear_vote_for();
  bool vote_for() const;
  void set_vote_for(bool value);
  private:
  bool _internal_vote_for() const;
  void _internal_set_vote_for(bool value);
  public:

  // optional bool vote_against = 3;
  bool has_vote_against() const;
  private:
  bool _internal_has_vote_against() const;
  public:
  void clear_vote_against();
  bool vote_against() const;
  void set_vote_against(bool value);
  private:
  bool _internal_vote_against() const;
  void _internal_set_vote_against(bool value);
  public:

  // optional bool reported = 4;
  bool has_reported() const;
  private:
  bool _internal_has_reported() const;
  public:
  void clear_reported();
  bool reported() const;
  void set_reported(bool value);
  private:
  bool _internal_reported() const;
  void _internal_set_reported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  bool vote_for_;
  bool vote_against_;
  bool reported_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserVoteSummary_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserVoteSummary_Response) */ {
 public:
  inline CPublishedFile_GetUserVoteSummary_Response() : CPublishedFile_GetUserVoteSummary_Response(nullptr) {}
  ~CPublishedFile_GetUserVoteSummary_Response() override;
  explicit constexpr CPublishedFile_GetUserVoteSummary_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserVoteSummary_Response(const CPublishedFile_GetUserVoteSummary_Response& from);
  CPublishedFile_GetUserVoteSummary_Response(CPublishedFile_GetUserVoteSummary_Response&& from) noexcept
    : CPublishedFile_GetUserVoteSummary_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserVoteSummary_Response& operator=(const CPublishedFile_GetUserVoteSummary_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserVoteSummary_Response& operator=(CPublishedFile_GetUserVoteSummary_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetUserVoteSummary_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserVoteSummary_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserVoteSummary_Response*>(
               &_CPublishedFile_GetUserVoteSummary_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CPublishedFile_GetUserVoteSummary_Response& a, CPublishedFile_GetUserVoteSummary_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserVoteSummary_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserVoteSummary_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserVoteSummary_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserVoteSummary_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetUserVoteSummary_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetUserVoteSummary_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserVoteSummary_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserVoteSummary_Response";
  }
  protected:
  explicit CPublishedFile_GetUserVoteSummary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetUserVoteSummary_Response_VoteSummary VoteSummary;

  // accessors -------------------------------------------------------

  enum : int {
    kSummariesFieldNumber = 1,
  };
  // repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
  int summaries_size() const;
  private:
  int _internal_summaries_size() const;
  public:
  void clear_summaries();
  ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* mutable_summaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >*
      mutable_summaries();
  private:
  const ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary& _internal_summaries(int index) const;
  ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* _internal_add_summaries();
  public:
  const ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary& summaries(int index) const;
  ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* add_summaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >&
      summaries() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserVoteSummary_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary > summaries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemChanges_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemChanges_Request) */ {
 public:
  inline CPublishedFile_GetItemChanges_Request() : CPublishedFile_GetItemChanges_Request(nullptr) {}
  ~CPublishedFile_GetItemChanges_Request() override;
  explicit constexpr CPublishedFile_GetItemChanges_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemChanges_Request(const CPublishedFile_GetItemChanges_Request& from);
  CPublishedFile_GetItemChanges_Request(CPublishedFile_GetItemChanges_Request&& from) noexcept
    : CPublishedFile_GetItemChanges_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemChanges_Request& operator=(const CPublishedFile_GetItemChanges_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemChanges_Request& operator=(CPublishedFile_GetItemChanges_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemChanges_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemChanges_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemChanges_Request*>(
               &_CPublishedFile_GetItemChanges_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CPublishedFile_GetItemChanges_Request& a, CPublishedFile_GetItemChanges_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemChanges_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemChanges_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemChanges_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemChanges_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemChanges_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemChanges_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemChanges_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemChanges_Request";
  }
  protected:
  explicit CPublishedFile_GetItemChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kLastTimeUpdatedFieldNumber = 2,
    kNumItemsMaxFieldNumber = 3,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 last_time_updated = 2;
  bool has_last_time_updated() const;
  private:
  bool _internal_has_last_time_updated() const;
  public:
  void clear_last_time_updated();
  uint32_t last_time_updated() const;
  void set_last_time_updated(uint32_t value);
  private:
  uint32_t _internal_last_time_updated() const;
  void _internal_set_last_time_updated(uint32_t value);
  public:

  // optional uint32 num_items_max = 3;
  bool has_num_items_max() const;
  private:
  bool _internal_has_num_items_max() const;
  public:
  void clear_num_items_max();
  uint32_t num_items_max() const;
  void set_num_items_max(uint32_t value);
  private:
  uint32_t _internal_num_items_max() const;
  void _internal_set_num_items_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemChanges_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t last_time_updated_;
  uint32_t num_items_max_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemChanges_Response_WorkshopItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo) */ {
 public:
  inline CPublishedFile_GetItemChanges_Response_WorkshopItemInfo() : CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(nullptr) {}
  ~CPublishedFile_GetItemChanges_Response_WorkshopItemInfo() override;
  explicit constexpr CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from);
  CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo&& from) noexcept
    : CPublishedFile_GetItemChanges_Response_WorkshopItemInfo() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& operator=(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& operator=(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo*>(
               &_CPublishedFile_GetItemChanges_Response_WorkshopItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& a, CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemChanges_Response_WorkshopItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemChanges_Response.WorkshopItemInfo";
  }
  protected:
  explicit CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedFileIdFieldNumber = 1,
    kManifestIdFieldNumber = 3,
    kTimeUpdatedFieldNumber = 2,
  };
  // optional fixed64 published_file_id = 1;
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional fixed64 manifest_id = 3;
  bool has_manifest_id() const;
  private:
  bool _internal_has_manifest_id() const;
  public:
  void clear_manifest_id();
  uint64_t manifest_id() const;
  void set_manifest_id(uint64_t value);
  private:
  uint64_t _internal_manifest_id() const;
  void _internal_set_manifest_id(uint64_t value);
  public:

  // optional uint32 time_updated = 2;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  uint32_t time_updated() const;
  void set_time_updated(uint32_t value);
  private:
  uint32_t _internal_time_updated() const;
  void _internal_set_time_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t published_file_id_;
  uint64_t manifest_id_;
  uint32_t time_updated_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetItemChanges_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetItemChanges_Response) */ {
 public:
  inline CPublishedFile_GetItemChanges_Response() : CPublishedFile_GetItemChanges_Response(nullptr) {}
  ~CPublishedFile_GetItemChanges_Response() override;
  explicit constexpr CPublishedFile_GetItemChanges_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetItemChanges_Response(const CPublishedFile_GetItemChanges_Response& from);
  CPublishedFile_GetItemChanges_Response(CPublishedFile_GetItemChanges_Response&& from) noexcept
    : CPublishedFile_GetItemChanges_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetItemChanges_Response& operator=(const CPublishedFile_GetItemChanges_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetItemChanges_Response& operator=(CPublishedFile_GetItemChanges_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetItemChanges_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetItemChanges_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetItemChanges_Response*>(
               &_CPublishedFile_GetItemChanges_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CPublishedFile_GetItemChanges_Response& a, CPublishedFile_GetItemChanges_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetItemChanges_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetItemChanges_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetItemChanges_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetItemChanges_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetItemChanges_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetItemChanges_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetItemChanges_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetItemChanges_Response";
  }
  protected:
  explicit CPublishedFile_GetItemChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetItemChanges_Response_WorkshopItemInfo WorkshopItemInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkshopItemsFieldNumber = 2,
    kUpdateTimeFieldNumber = 1,
  };
  // repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
  int workshop_items_size() const;
  private:
  int _internal_workshop_items_size() const;
  public:
  void clear_workshop_items();
  ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* mutable_workshop_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >*
      mutable_workshop_items();
  private:
  const ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& _internal_workshop_items(int index) const;
  ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* _internal_add_workshop_items();
  public:
  const ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& workshop_items(int index) const;
  ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* add_workshop_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >&
      workshop_items() const;

  // optional uint32 update_time = 1;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  uint32_t update_time() const;
  void set_update_time(uint32_t value);
  private:
  uint32_t _internal_update_time() const;
  void _internal_set_update_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetItemChanges_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo > workshop_items_;
  uint32_t update_time_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetContentDescriptors_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetContentDescriptors_Request) */ {
 public:
  inline CPublishedFile_GetContentDescriptors_Request() : CPublishedFile_GetContentDescriptors_Request(nullptr) {}
  ~CPublishedFile_GetContentDescriptors_Request() override;
  explicit constexpr CPublishedFile_GetContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetContentDescriptors_Request(const CPublishedFile_GetContentDescriptors_Request& from);
  CPublishedFile_GetContentDescriptors_Request(CPublishedFile_GetContentDescriptors_Request&& from) noexcept
    : CPublishedFile_GetContentDescriptors_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetContentDescriptors_Request& operator=(const CPublishedFile_GetContentDescriptors_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetContentDescriptors_Request& operator=(CPublishedFile_GetContentDescriptors_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetContentDescriptors_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetContentDescriptors_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetContentDescriptors_Request*>(
               &_CPublishedFile_GetContentDescriptors_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CPublishedFile_GetContentDescriptors_Request& a, CPublishedFile_GetContentDescriptors_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetContentDescriptors_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetContentDescriptors_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetContentDescriptors_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetContentDescriptors_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetContentDescriptors_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetContentDescriptors_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetContentDescriptors_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetContentDescriptors_Request";
  }
  protected:
  explicit CPublishedFile_GetContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
  };
  // optional fixed64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetContentDescriptors_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetContentDescriptors_Response_ContentDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor) */ {
 public:
  inline CPublishedFile_GetContentDescriptors_Response_ContentDescriptor() : CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(nullptr) {}
  ~CPublishedFile_GetContentDescriptors_Response_ContentDescriptor() override;
  explicit constexpr CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from);
  CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor&& from) noexcept
    : CPublishedFile_GetContentDescriptors_Response_ContentDescriptor() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& operator=(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& operator=(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor*>(
               &_CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& a, CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetContentDescriptors_Response_ContentDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetContentDescriptors_Response.ContentDescriptor";
  }
  protected:
  explicit CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kModeratorSetFieldNumber = 4,
    kDescriptoridFieldNumber = 1,
  };
  // optional uint32 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint32_t accountid() const;
  void set_accountid(uint32_t value);
  private:
  uint32_t _internal_accountid() const;
  void _internal_set_accountid(uint32_t value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional bool moderator_set = 4;
  bool has_moderator_set() const;
  private:
  bool _internal_has_moderator_set() const;
  public:
  void clear_moderator_set();
  bool moderator_set() const;
  void set_moderator_set(bool value);
  private:
  bool _internal_moderator_set() const;
  void _internal_set_moderator_set(bool value);
  public:

  // optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
  bool has_descriptorid() const;
  private:
  bool _internal_has_descriptorid() const;
  public:
  void clear_descriptorid();
  ::EContentDescriptorID descriptorid() const;
  void set_descriptorid(::EContentDescriptorID value);
  private:
  ::EContentDescriptorID _internal_descriptorid() const;
  void _internal_set_descriptorid(::EContentDescriptorID value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t accountid_;
  uint32_t timestamp_;
  bool moderator_set_;
  int descriptorid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetContentDescriptors_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetContentDescriptors_Response) */ {
 public:
  inline CPublishedFile_GetContentDescriptors_Response() : CPublishedFile_GetContentDescriptors_Response(nullptr) {}
  ~CPublishedFile_GetContentDescriptors_Response() override;
  explicit constexpr CPublishedFile_GetContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetContentDescriptors_Response(const CPublishedFile_GetContentDescriptors_Response& from);
  CPublishedFile_GetContentDescriptors_Response(CPublishedFile_GetContentDescriptors_Response&& from) noexcept
    : CPublishedFile_GetContentDescriptors_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetContentDescriptors_Response& operator=(const CPublishedFile_GetContentDescriptors_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetContentDescriptors_Response& operator=(CPublishedFile_GetContentDescriptors_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_GetContentDescriptors_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetContentDescriptors_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetContentDescriptors_Response*>(
               &_CPublishedFile_GetContentDescriptors_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CPublishedFile_GetContentDescriptors_Response& a, CPublishedFile_GetContentDescriptors_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetContentDescriptors_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetContentDescriptors_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_GetContentDescriptors_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_GetContentDescriptors_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_GetContentDescriptors_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_GetContentDescriptors_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetContentDescriptors_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetContentDescriptors_Response";
  }
  protected:
  explicit CPublishedFile_GetContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetContentDescriptors_Response_ContentDescriptor ContentDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kContentDescriptorsFieldNumber = 1,
  };
  // repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
  int content_descriptors_size() const;
  private:
  int _internal_content_descriptors_size() const;
  public:
  void clear_content_descriptors();
  ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* mutable_content_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >*
      mutable_content_descriptors();
  private:
  const ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& _internal_content_descriptors(int index) const;
  ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* _internal_add_content_descriptors();
  public:
  const ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& content_descriptors(int index) const;
  ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* add_content_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >&
      content_descriptors() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetContentDescriptors_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor > content_descriptors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_UpdateContentDescriptors_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_UpdateContentDescriptors_Request) */ {
 public:
  inline CPublishedFile_UpdateContentDescriptors_Request() : CPublishedFile_UpdateContentDescriptors_Request(nullptr) {}
  ~CPublishedFile_UpdateContentDescriptors_Request() override;
  explicit constexpr CPublishedFile_UpdateContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_UpdateContentDescriptors_Request(const CPublishedFile_UpdateContentDescriptors_Request& from);
  CPublishedFile_UpdateContentDescriptors_Request(CPublishedFile_UpdateContentDescriptors_Request&& from) noexcept
    : CPublishedFile_UpdateContentDescriptors_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_UpdateContentDescriptors_Request& operator=(const CPublishedFile_UpdateContentDescriptors_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_UpdateContentDescriptors_Request& operator=(CPublishedFile_UpdateContentDescriptors_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_UpdateContentDescriptors_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_UpdateContentDescriptors_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_UpdateContentDescriptors_Request*>(
               &_CPublishedFile_UpdateContentDescriptors_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CPublishedFile_UpdateContentDescriptors_Request& a, CPublishedFile_UpdateContentDescriptors_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_UpdateContentDescriptors_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_UpdateContentDescriptors_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_UpdateContentDescriptors_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_UpdateContentDescriptors_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_UpdateContentDescriptors_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_UpdateContentDescriptors_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_UpdateContentDescriptors_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_UpdateContentDescriptors_Request";
  }
  protected:
  explicit CPublishedFile_UpdateContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsToAddFieldNumber = 2,
    kDescriptorsToRemoveFieldNumber = 3,
    kPublishedfileidFieldNumber = 1,
  };
  // repeated .EContentDescriptorID descriptors_to_add = 2;
  int descriptors_to_add_size() const;
  private:
  int _internal_descriptors_to_add_size() const;
  public:
  void clear_descriptors_to_add();
  private:
  ::EContentDescriptorID _internal_descriptors_to_add(int index) const;
  void _internal_add_descriptors_to_add(::EContentDescriptorID value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_descriptors_to_add();
  public:
  ::EContentDescriptorID descriptors_to_add(int index) const;
  void set_descriptors_to_add(int index, ::EContentDescriptorID value);
  void add_descriptors_to_add(::EContentDescriptorID value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& descriptors_to_add() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_descriptors_to_add();

  // repeated .EContentDescriptorID descriptors_to_remove = 3;
  int descriptors_to_remove_size() const;
  private:
  int _internal_descriptors_to_remove_size() const;
  public:
  void clear_descriptors_to_remove();
  private:
  ::EContentDescriptorID _internal_descriptors_to_remove(int index) const;
  void _internal_add_descriptors_to_remove(::EContentDescriptorID value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_descriptors_to_remove();
  public:
  ::EContentDescriptorID descriptors_to_remove(int index) const;
  void set_descriptors_to_remove(int index, ::EContentDescriptorID value);
  void add_descriptors_to_remove(::EContentDescriptorID value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& descriptors_to_remove() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_descriptors_to_remove();

  // optional fixed64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  uint64_t publishedfileid() const;
  void set_publishedfileid(uint64_t value);
  private:
  uint64_t _internal_publishedfileid() const;
  void _internal_set_publishedfileid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_UpdateContentDescriptors_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> descriptors_to_add_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> descriptors_to_remove_;
  uint64_t publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_UpdateContentDescriptors_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_UpdateContentDescriptors_Response) */ {
 public:
  inline CPublishedFile_UpdateContentDescriptors_Response() : CPublishedFile_UpdateContentDescriptors_Response(nullptr) {}
  ~CPublishedFile_UpdateContentDescriptors_Response() override;
  explicit constexpr CPublishedFile_UpdateContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_UpdateContentDescriptors_Response(const CPublishedFile_UpdateContentDescriptors_Response& from);
  CPublishedFile_UpdateContentDescriptors_Response(CPublishedFile_UpdateContentDescriptors_Response&& from) noexcept
    : CPublishedFile_UpdateContentDescriptors_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_UpdateContentDescriptors_Response& operator=(const CPublishedFile_UpdateContentDescriptors_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_UpdateContentDescriptors_Response& operator=(CPublishedFile_UpdateContentDescriptors_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_UpdateContentDescriptors_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_UpdateContentDescriptors_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_UpdateContentDescriptors_Response*>(
               &_CPublishedFile_UpdateContentDescriptors_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CPublishedFile_UpdateContentDescriptors_Response& a, CPublishedFile_UpdateContentDescriptors_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_UpdateContentDescriptors_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_UpdateContentDescriptors_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_UpdateContentDescriptors_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_UpdateContentDescriptors_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_UpdateContentDescriptors_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_UpdateContentDescriptors_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_UpdateContentDescriptors_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_UpdateContentDescriptors_Response";
  }
  protected:
  explicit CPublishedFile_UpdateContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampUpdatedFieldNumber = 1,
  };
  // optional uint32 timestamp_updated = 1;
  bool has_timestamp_updated() const;
  private:
  bool _internal_has_timestamp_updated() const;
  public:
  void clear_timestamp_updated();
  uint32_t timestamp_updated() const;
  void set_timestamp_updated(uint32_t value);
  private:
  uint32_t _internal_timestamp_updated() const;
  void _internal_set_timestamp_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_UpdateContentDescriptors_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t timestamp_updated_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_FileSubscribed_Notification_RevisionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_FileSubscribed_Notification.RevisionData) */ {
 public:
  inline CPublishedFile_FileSubscribed_Notification_RevisionData() : CPublishedFile_FileSubscribed_Notification_RevisionData(nullptr) {}
  ~CPublishedFile_FileSubscribed_Notification_RevisionData() override;
  explicit constexpr CPublishedFile_FileSubscribed_Notification_RevisionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_FileSubscribed_Notification_RevisionData(const CPublishedFile_FileSubscribed_Notification_RevisionData& from);
  CPublishedFile_FileSubscribed_Notification_RevisionData(CPublishedFile_FileSubscribed_Notification_RevisionData&& from) noexcept
    : CPublishedFile_FileSubscribed_Notification_RevisionData() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_FileSubscribed_Notification_RevisionData& operator=(const CPublishedFile_FileSubscribed_Notification_RevisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_FileSubscribed_Notification_RevisionData& operator=(CPublishedFile_FileSubscribed_Notification_RevisionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_FileSubscribed_Notification_RevisionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_FileSubscribed_Notification_RevisionData* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_FileSubscribed_Notification_RevisionData*>(
               &_CPublishedFile_FileSubscribed_Notification_RevisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CPublishedFile_FileSubscribed_Notification_RevisionData& a, CPublishedFile_FileSubscribed_Notification_RevisionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_FileSubscribed_Notification_RevisionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_FileSubscribed_Notification_RevisionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_FileSubscribed_Notification_RevisionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_FileSubscribed_Notification_RevisionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_FileSubscribed_Notification_RevisionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_FileSubscribed_Notification_RevisionData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_FileSubscribed_Notification_RevisionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_FileSubscribed_Notification.RevisionData";
  }
  protected:
  explicit CPublishedFile_FileSubscribed_Notification_RevisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileHcontentFieldNumber = 2,
    kRevisionFieldNumber = 1,
    kRtimeUpdatedFieldNumber = 3,
  };
  // optional fixed64 file_hcontent = 2 [(.description) = "Manifest GID"];
  bool has_file_hcontent() const;
  private:
  bool _internal_has_file_hcontent() const;
  public:
  void clear_file_hcontent();
  uint64_t file_hcontent() const;
  void set_file_hcontent(uint64_t value);
  private:
  uint64_t _internal_file_hcontent() const;
  void _internal_set_file_hcontent(uint64_t value);
  public:

  // optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::EPublishedFileRevision revision() const;
  void set_revision(::EPublishedFileRevision value);
  private:
  ::EPublishedFileRevision _internal_revision() const;
  void _internal_set_revision(::EPublishedFileRevision value);
  public:

  // optional uint32 rtime_updated = 3 [(.description) = "Last time content updated"];
  bool has_rtime_updated() const;
  private:
  bool _internal_has_rtime_updated() const;
  public:
  void clear_rtime_updated();
  uint32_t rtime_updated() const;
  void set_rtime_updated(uint32_t value);
  private:
  uint32_t _internal_rtime_updated() const;
  void _internal_set_rtime_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_FileSubscribed_Notification.RevisionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t file_hcontent_;
  int revision_;
  uint32_t rtime_updated_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_FileSubscribed_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_FileSubscribed_Notification) */ {
 public:
  inline CPublishedFile_FileSubscribed_Notification() : CPublishedFile_FileSubscribed_Notification(nullptr) {}
  ~CPublishedFile_FileSubscribed_Notification() override;
  explicit constexpr CPublishedFile_FileSubscribed_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_FileSubscribed_Notification(const CPublishedFile_FileSubscribed_Notification& from);
  CPublishedFile_FileSubscribed_Notification(CPublishedFile_FileSubscribed_Notification&& from) noexcept
    : CPublishedFile_FileSubscribed_Notification() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_FileSubscribed_Notification& operator=(const CPublishedFile_FileSubscribed_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_FileSubscribed_Notification& operator=(CPublishedFile_FileSubscribed_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_FileSubscribed_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_FileSubscribed_Notification* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_FileSubscribed_Notification*>(
               &_CPublishedFile_FileSubscribed_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CPublishedFile_FileSubscribed_Notification& a, CPublishedFile_FileSubscribed_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_FileSubscribed_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_FileSubscribed_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_FileSubscribed_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_FileSubscribed_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_FileSubscribed_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_FileSubscribed_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_FileSubscribed_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_FileSubscribed_Notification";
  }
  protected:
  explicit CPublishedFile_FileSubscribed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_FileSubscribed_Notification_RevisionData RevisionData;

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionsFieldNumber = 8,
    kPublishedFileIdFieldNumber = 1,
    kFileHcontentFieldNumber = 3,
    kAppIdFieldNumber = 2,
    kFileSizeFieldNumber = 4,
    kRtimeSubscribedFieldNumber = 5,
    kIsDepotContentFieldNumber = 6,
    kRtimeUpdatedFieldNumber = 7,
  };
  // repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8 [(.description) = "Data for each of the revisions that this item has"];
  int revisions_size() const;
  private:
  int _internal_revisions_size() const;
  public:
  void clear_revisions();
  ::CPublishedFile_FileSubscribed_Notification_RevisionData* mutable_revisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_FileSubscribed_Notification_RevisionData >*
      mutable_revisions();
  private:
  const ::CPublishedFile_FileSubscribed_Notification_RevisionData& _internal_revisions(int index) const;
  ::CPublishedFile_FileSubscribed_Notification_RevisionData* _internal_add_revisions();
  public:
  const ::CPublishedFile_FileSubscribed_Notification_RevisionData& revisions(int index) const;
  ::CPublishedFile_FileSubscribed_Notification_RevisionData* add_revisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_FileSubscribed_Notification_RevisionData >&
      revisions() const;

  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional fixed64 file_hcontent = 3 [(.description) = "UGC file handle or manifest GID"];
  bool has_file_hcontent() const;
  private:
  bool _internal_has_file_hcontent() const;
  public:
  void clear_file_hcontent();
  uint64_t file_hcontent() const;
  void set_file_hcontent(uint64_t value);
  private:
  uint64_t _internal_file_hcontent() const;
  void _internal_set_file_hcontent(uint64_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 file_size = 4;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // optional uint32 rtime_subscribed = 5;
  bool has_rtime_subscribed() const;
  private:
  bool _internal_has_rtime_subscribed() const;
  public:
  void clear_rtime_subscribed();
  uint32_t rtime_subscribed() const;
  void set_rtime_subscribed(uint32_t value);
  private:
  uint32_t _internal_rtime_subscribed() const;
  void _internal_set_rtime_subscribed(uint32_t value);
  public:

  // optional bool is_depot_content = 6 [(.description) = "True if workshop item is delivered via Steampipe"];
  bool has_is_depot_content() const;
  private:
  bool _internal_has_is_depot_content() const;
  public:
  void clear_is_depot_content();
  bool is_depot_content() const;
  void set_is_depot_content(bool value);
  private:
  bool _internal_is_depot_content() const;
  void _internal_set_is_depot_content(bool value);
  public:

  // optional uint32 rtime_updated = 7 [(.description) = "Last time content updated"];
  bool has_rtime_updated() const;
  private:
  bool _internal_has_rtime_updated() const;
  public:
  void clear_rtime_updated();
  uint32_t rtime_updated() const;
  void set_rtime_updated(uint32_t value);
  private:
  uint32_t _internal_rtime_updated() const;
  void _internal_set_rtime_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_FileSubscribed_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_FileSubscribed_Notification_RevisionData > revisions_;
  uint64_t published_file_id_;
  uint64_t file_hcontent_;
  uint32_t app_id_;
  uint32_t file_size_;
  uint32_t rtime_subscribed_;
  bool is_depot_content_;
  uint32_t rtime_updated_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_FileUnsubscribed_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_FileUnsubscribed_Notification) */ {
 public:
  inline CPublishedFile_FileUnsubscribed_Notification() : CPublishedFile_FileUnsubscribed_Notification(nullptr) {}
  ~CPublishedFile_FileUnsubscribed_Notification() override;
  explicit constexpr CPublishedFile_FileUnsubscribed_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_FileUnsubscribed_Notification(const CPublishedFile_FileUnsubscribed_Notification& from);
  CPublishedFile_FileUnsubscribed_Notification(CPublishedFile_FileUnsubscribed_Notification&& from) noexcept
    : CPublishedFile_FileUnsubscribed_Notification() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_FileUnsubscribed_Notification& operator=(const CPublishedFile_FileUnsubscribed_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_FileUnsubscribed_Notification& operator=(CPublishedFile_FileUnsubscribed_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_FileUnsubscribed_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_FileUnsubscribed_Notification* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_FileUnsubscribed_Notification*>(
               &_CPublishedFile_FileUnsubscribed_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CPublishedFile_FileUnsubscribed_Notification& a, CPublishedFile_FileUnsubscribed_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_FileUnsubscribed_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_FileUnsubscribed_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_FileUnsubscribed_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_FileUnsubscribed_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_FileUnsubscribed_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_FileUnsubscribed_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_FileUnsubscribed_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_FileUnsubscribed_Notification";
  }
  protected:
  explicit CPublishedFile_FileUnsubscribed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedFileIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_FileUnsubscribed_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t published_file_id_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_FileDeleted_Client_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_FileDeleted_Client_Notification) */ {
 public:
  inline CPublishedFile_FileDeleted_Client_Notification() : CPublishedFile_FileDeleted_Client_Notification(nullptr) {}
  ~CPublishedFile_FileDeleted_Client_Notification() override;
  explicit constexpr CPublishedFile_FileDeleted_Client_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_FileDeleted_Client_Notification(const CPublishedFile_FileDeleted_Client_Notification& from);
  CPublishedFile_FileDeleted_Client_Notification(CPublishedFile_FileDeleted_Client_Notification&& from) noexcept
    : CPublishedFile_FileDeleted_Client_Notification() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_FileDeleted_Client_Notification& operator=(const CPublishedFile_FileDeleted_Client_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_FileDeleted_Client_Notification& operator=(CPublishedFile_FileDeleted_Client_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPublishedFile_FileDeleted_Client_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_FileDeleted_Client_Notification* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_FileDeleted_Client_Notification*>(
               &_CPublishedFile_FileDeleted_Client_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CPublishedFile_FileDeleted_Client_Notification& a, CPublishedFile_FileDeleted_Client_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_FileDeleted_Client_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_FileDeleted_Client_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPublishedFile_FileDeleted_Client_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPublishedFile_FileDeleted_Client_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPublishedFile_FileDeleted_Client_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPublishedFile_FileDeleted_Client_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_FileDeleted_Client_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_FileDeleted_Client_Notification";
  }
  protected:
  explicit CPublishedFile_FileDeleted_Client_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedFileIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  bool has_published_file_id() const;
  private:
  bool _internal_has_published_file_id() const;
  public:
  void clear_published_file_id();
  uint64_t published_file_id() const;
  void set_published_file_id(uint64_t value);
  private:
  uint64_t _internal_published_file_id() const;
  void _internal_set_published_file_id(uint64_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_FileDeleted_Client_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t published_file_id_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto;
};
// ===================================================================

class PublishedFile_Stub;

class PublishedFile : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PublishedFile() {};
 public:
  virtual ~PublishedFile();

  typedef PublishedFile_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Vote_Request* request,
                       ::CPublishedFile_Vote_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Subscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Subscribe_Request* request,
                       ::CPublishedFile_Subscribe_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Unsubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Unsubscribe_Request* request,
                       ::CPublishedFile_Unsubscribe_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CanSubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_CanSubscribe_Request* request,
                       ::CPublishedFile_CanSubscribe_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSubSectionData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetSubSectionData_Request* request,
                       ::CPublishedFile_GetSubSectionData_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Publish(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Publish_Request* request,
                       ::CPublishedFile_Publish_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetDetails_Request* request,
                       ::CPublishedFile_GetDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetItemInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetItemInfo_Request* request,
                       ::CPublishedFile_GetItemInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserFiles_Request* request,
                       ::CPublishedFile_GetUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserFileCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserFiles_Request* request,
                       ::CPublishedFile_GetUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AreFilesInSubscriptionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AreFilesInSubscriptionList_Request* request,
                       ::CPublishedFile_AreFilesInSubscriptionList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Update_Request* request,
                       ::CPublishedFile_Update_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Delete_Request* request,
                       ::CPublishedFile_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChangeHistoryEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetChangeHistoryEntry_Request* request,
                       ::CPublishedFile_GetChangeHistoryEntry_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetChangeHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetChangeHistory_Request* request,
                       ::CPublishedFile_GetChangeHistory_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RefreshVotingQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RefreshVotingQueue_Request* request,
                       ::CPublishedFile_RefreshVotingQueue_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_QueryFiles_Request* request,
                       ::CPublishedFile_QueryFiles_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AddAppRelationship_Request* request,
                       ::CPublishedFile_AddAppRelationship_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RemoveAppRelationship_Request* request,
                       ::CPublishedFile_RemoveAppRelationship_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAppRelationships(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetAppRelationships_Request* request,
                       ::CPublishedFile_GetAppRelationships_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAppRelationshipsBatched(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetAppRelationshipsBatched_Request* request,
                       ::CPublishedFile_GetAppRelationshipsBatched_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StartPlaytimeTracking_Request* request,
                       ::CPublishedFile_StartPlaytimeTracking_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StopPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StopPlaytimeTracking_Request* request,
                       ::CPublishedFile_StopPlaytimeTracking_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StopPlaytimeTrackingForAllAppItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* request,
                       ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetPlaytimeForControllerConfigs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request* request,
                       ::CPublishedFile_SetPlaytimeForControllerConfigs_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AddChild_Request* request,
                       ::CPublishedFile_AddChild_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RemoveChild_Request* request,
                       ::CPublishedFile_RemoveChild_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserVoteSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserVoteSummary_Request* request,
                       ::CPublishedFile_GetUserVoteSummary_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetItemChanges(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetItemChanges_Request* request,
                       ::CPublishedFile_GetItemChanges_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetContentDescriptors_Request* request,
                       ::CPublishedFile_GetContentDescriptors_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_UpdateContentDescriptors_Request* request,
                       ::CPublishedFile_UpdateContentDescriptors_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PublishedFile);
};

class PublishedFile_Stub : public PublishedFile {
 public:
  PublishedFile_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  PublishedFile_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~PublishedFile_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements PublishedFile ------------------------------------------

  void Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Vote_Request* request,
                       ::CPublishedFile_Vote_Response* response,
                       ::google::protobuf::Closure* done);
  void Subscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Subscribe_Request* request,
                       ::CPublishedFile_Subscribe_Response* response,
                       ::google::protobuf::Closure* done);
  void Unsubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Unsubscribe_Request* request,
                       ::CPublishedFile_Unsubscribe_Response* response,
                       ::google::protobuf::Closure* done);
  void CanSubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_CanSubscribe_Request* request,
                       ::CPublishedFile_CanSubscribe_Response* response,
                       ::google::protobuf::Closure* done);
  void GetSubSectionData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetSubSectionData_Request* request,
                       ::CPublishedFile_GetSubSectionData_Response* response,
                       ::google::protobuf::Closure* done);
  void Publish(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Publish_Request* request,
                       ::CPublishedFile_Publish_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetDetails_Request* request,
                       ::CPublishedFile_GetDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void GetItemInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetItemInfo_Request* request,
                       ::CPublishedFile_GetItemInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserFiles_Request* request,
                       ::CPublishedFile_GetUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserFileCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserFiles_Request* request,
                       ::CPublishedFile_GetUserFiles_Response* response,
                       ::google::protobuf::Closure* done);
  void AreFilesInSubscriptionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AreFilesInSubscriptionList_Request* request,
                       ::CPublishedFile_AreFilesInSubscriptionList_Response* response,
                       ::google::protobuf::Closure* done);
  void Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Update_Request* request,
                       ::CPublishedFile_Update_Response* response,
                       ::google::protobuf::Closure* done);
  void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_Delete_Request* request,
                       ::CPublishedFile_Delete_Response* response,
                       ::google::protobuf::Closure* done);
  void GetChangeHistoryEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetChangeHistoryEntry_Request* request,
                       ::CPublishedFile_GetChangeHistoryEntry_Response* response,
                       ::google::protobuf::Closure* done);
  void GetChangeHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetChangeHistory_Request* request,
                       ::CPublishedFile_GetChangeHistory_Response* response,
                       ::google::protobuf::Closure* done);
  void RefreshVotingQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RefreshVotingQueue_Request* request,
                       ::CPublishedFile_RefreshVotingQueue_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_QueryFiles_Request* request,
                       ::CPublishedFile_QueryFiles_Response* response,
                       ::google::protobuf::Closure* done);
  void AddAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AddAppRelationship_Request* request,
                       ::CPublishedFile_AddAppRelationship_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RemoveAppRelationship_Request* request,
                       ::CPublishedFile_RemoveAppRelationship_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAppRelationships(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetAppRelationships_Request* request,
                       ::CPublishedFile_GetAppRelationships_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAppRelationshipsBatched(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetAppRelationshipsBatched_Request* request,
                       ::CPublishedFile_GetAppRelationshipsBatched_Response* response,
                       ::google::protobuf::Closure* done);
  void StartPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StartPlaytimeTracking_Request* request,
                       ::CPublishedFile_StartPlaytimeTracking_Response* response,
                       ::google::protobuf::Closure* done);
  void StopPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StopPlaytimeTracking_Request* request,
                       ::CPublishedFile_StopPlaytimeTracking_Response* response,
                       ::google::protobuf::Closure* done);
  void StopPlaytimeTrackingForAllAppItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* request,
                       ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* response,
                       ::google::protobuf::Closure* done);
  void SetPlaytimeForControllerConfigs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request* request,
                       ::CPublishedFile_SetPlaytimeForControllerConfigs_Response* response,
                       ::google::protobuf::Closure* done);
  void AddChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_AddChild_Request* request,
                       ::CPublishedFile_AddChild_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_RemoveChild_Request* request,
                       ::CPublishedFile_RemoveChild_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUserVoteSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetUserVoteSummary_Request* request,
                       ::CPublishedFile_GetUserVoteSummary_Response* response,
                       ::google::protobuf::Closure* done);
  void GetItemChanges(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetItemChanges_Request* request,
                       ::CPublishedFile_GetItemChanges_Response* response,
                       ::google::protobuf::Closure* done);
  void GetContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_GetContentDescriptors_Request* request,
                       ::CPublishedFile_GetContentDescriptors_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_UpdateContentDescriptors_Request* request,
                       ::CPublishedFile_UpdateContentDescriptors_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PublishedFile_Stub);
};


// -------------------------------------------------------------------

class PublishedFileClient_Stub;

class PublishedFileClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PublishedFileClient() {};
 public:
  virtual ~PublishedFileClient();

  typedef PublishedFileClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyFileSubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileSubscribed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFileUnsubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileUnsubscribed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFileDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileDeleted_Client_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PublishedFileClient);
};

class PublishedFileClient_Stub : public PublishedFileClient {
 public:
  PublishedFileClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  PublishedFileClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~PublishedFileClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements PublishedFileClient ------------------------------------------

  void NotifyFileSubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileSubscribed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFileUnsubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileUnsubscribed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFileDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CPublishedFile_FileDeleted_Client_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PublishedFileClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPublishedFile_Vote_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Vote_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Vote_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Vote_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_Vote_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Vote_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Vote_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Vote_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Vote_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Vote_Request.publishedfileid)
}

// optional bool vote_up = 2;
inline bool CPublishedFile_Vote_Request::_internal_has_vote_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Vote_Request::has_vote_up() const {
  return _internal_has_vote_up();
}
inline void CPublishedFile_Vote_Request::clear_vote_up() {
  vote_up_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_Vote_Request::_internal_vote_up() const {
  return vote_up_;
}
inline bool CPublishedFile_Vote_Request::vote_up() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Vote_Request.vote_up)
  return _internal_vote_up();
}
inline void CPublishedFile_Vote_Request::_internal_set_vote_up(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_up_ = value;
}
inline void CPublishedFile_Vote_Request::set_vote_up(bool value) {
  _internal_set_vote_up(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Vote_Request.vote_up)
}

// -------------------------------------------------------------------

// CPublishedFile_Vote_Response

// -------------------------------------------------------------------

// CPublishedFile_Subscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Subscribe_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Subscribe_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_Subscribe_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Subscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Subscribe_Request::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_list_type() const {
  return _internal_has_list_type();
}
inline void CPublishedFile_Subscribe_Request::clear_list_type() {
  list_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_Subscribe_Request::_internal_list_type() const {
  return list_type_;
}
inline uint32_t CPublishedFile_Subscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.list_type)
  return _internal_list_type();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_list_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  list_type_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_list_type(uint32_t value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Subscribe_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Subscribe_Request::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPublishedFile_Subscribe_Request::_internal_appid() const {
  return appid_;
}
inline int32_t CPublishedFile_Subscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_appid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Subscribe_Request::_internal_has_notify_client() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_notify_client() const {
  return _internal_has_notify_client();
}
inline void CPublishedFile_Subscribe_Request::clear_notify_client() {
  notify_client_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_Subscribe_Request::_internal_notify_client() const {
  return notify_client_;
}
inline bool CPublishedFile_Subscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.notify_client)
  return _internal_notify_client();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_notify_client(bool value) {
  _has_bits_[0] |= 0x00000008u;
  notify_client_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_notify_client(bool value) {
  _internal_set_notify_client(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Subscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Unsubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_Unsubscribe_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Unsubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_list_type() const {
  return _internal_has_list_type();
}
inline void CPublishedFile_Unsubscribe_Request::clear_list_type() {
  list_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_Unsubscribe_Request::_internal_list_type() const {
  return list_type_;
}
inline uint32_t CPublishedFile_Unsubscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.list_type)
  return _internal_list_type();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_list_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  list_type_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_list_type(uint32_t value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Unsubscribe_Request::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPublishedFile_Unsubscribe_Request::_internal_appid() const {
  return appid_;
}
inline int32_t CPublishedFile_Unsubscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_appid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_appid(int32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_notify_client() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_notify_client() const {
  return _internal_has_notify_client();
}
inline void CPublishedFile_Unsubscribe_Request::clear_notify_client() {
  notify_client_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_Unsubscribe_Request::_internal_notify_client() const {
  return notify_client_;
}
inline bool CPublishedFile_Unsubscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.notify_client)
  return _internal_notify_client();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_notify_client(bool value) {
  _has_bits_[0] |= 0x00000008u;
  notify_client_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_notify_client(bool value) {
  _internal_set_notify_client(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_CanSubscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_CanSubscribe_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_CanSubscribe_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_CanSubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_CanSubscribe_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_CanSubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_CanSubscribe_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_CanSubscribe_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_CanSubscribe_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_CanSubscribe_Request.publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_CanSubscribe_Response

// optional bool can_subscribe = 1;
inline bool CPublishedFile_CanSubscribe_Response::_internal_has_can_subscribe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_CanSubscribe_Response::has_can_subscribe() const {
  return _internal_has_can_subscribe();
}
inline void CPublishedFile_CanSubscribe_Response::clear_can_subscribe() {
  can_subscribe_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPublishedFile_CanSubscribe_Response::_internal_can_subscribe() const {
  return can_subscribe_;
}
inline bool CPublishedFile_CanSubscribe_Response::can_subscribe() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_CanSubscribe_Response.can_subscribe)
  return _internal_can_subscribe();
}
inline void CPublishedFile_CanSubscribe_Response::_internal_set_can_subscribe(bool value) {
  _has_bits_[0] |= 0x00000001u;
  can_subscribe_ = value;
}
inline void CPublishedFile_CanSubscribe_Response::set_can_subscribe(bool value) {
  _internal_set_can_subscribe(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_CanSubscribe_Response.can_subscribe)
}

// -------------------------------------------------------------------

// CPublishedFile_GetSubSectionData_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_GetSubSectionData_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetSubSectionData_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetSubSectionData_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetSubSectionData_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetSubSectionData_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetSubSectionData_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetSubSectionData_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetSubSectionData_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetSubSectionData_Request.publishedfileid)
}

// optional bool for_table_of_contents = 2;
inline bool CPublishedFile_GetSubSectionData_Request::_internal_has_for_table_of_contents() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetSubSectionData_Request::has_for_table_of_contents() const {
  return _internal_has_for_table_of_contents();
}
inline void CPublishedFile_GetSubSectionData_Request::clear_for_table_of_contents() {
  for_table_of_contents_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetSubSectionData_Request::_internal_for_table_of_contents() const {
  return for_table_of_contents_;
}
inline bool CPublishedFile_GetSubSectionData_Request::for_table_of_contents() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetSubSectionData_Request.for_table_of_contents)
  return _internal_for_table_of_contents();
}
inline void CPublishedFile_GetSubSectionData_Request::_internal_set_for_table_of_contents(bool value) {
  _has_bits_[0] |= 0x00000004u;
  for_table_of_contents_ = value;
}
inline void CPublishedFile_GetSubSectionData_Request::set_for_table_of_contents(bool value) {
  _internal_set_for_table_of_contents(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetSubSectionData_Request.for_table_of_contents)
}

// optional uint64 specific_sectionid = 3;
inline bool CPublishedFile_GetSubSectionData_Request::_internal_has_specific_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetSubSectionData_Request::has_specific_sectionid() const {
  return _internal_has_specific_sectionid();
}
inline void CPublishedFile_GetSubSectionData_Request::clear_specific_sectionid() {
  specific_sectionid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_GetSubSectionData_Request::_internal_specific_sectionid() const {
  return specific_sectionid_;
}
inline uint64_t CPublishedFile_GetSubSectionData_Request::specific_sectionid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetSubSectionData_Request.specific_sectionid)
  return _internal_specific_sectionid();
}
inline void CPublishedFile_GetSubSectionData_Request::_internal_set_specific_sectionid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  specific_sectionid_ = value;
}
inline void CPublishedFile_GetSubSectionData_Request::set_specific_sectionid(uint64_t value) {
  _internal_set_specific_sectionid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetSubSectionData_Request.specific_sectionid)
}

// optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
inline bool CPublishedFile_GetSubSectionData_Request::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetSubSectionData_Request::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_GetSubSectionData_Request::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EPublishedFileRevision CPublishedFile_GetSubSectionData_Request::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_GetSubSectionData_Request::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetSubSectionData_Request.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_GetSubSectionData_Request::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  desired_revision_ = value;
}
inline void CPublishedFile_GetSubSectionData_Request::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetSubSectionData_Request.desired_revision)
}

// -------------------------------------------------------------------

// PublishedFileSubSection

// optional uint64 sectionid = 1;
inline bool PublishedFileSubSection::_internal_has_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileSubSection::has_sectionid() const {
  return _internal_has_sectionid();
}
inline void PublishedFileSubSection::clear_sectionid() {
  sectionid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PublishedFileSubSection::_internal_sectionid() const {
  return sectionid_;
}
inline uint64_t PublishedFileSubSection::sectionid() const {
  // @@protoc_insertion_point(field_get:PublishedFileSubSection.sectionid)
  return _internal_sectionid();
}
inline void PublishedFileSubSection::_internal_set_sectionid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  sectionid_ = value;
}
inline void PublishedFileSubSection::set_sectionid(uint64_t value) {
  _internal_set_sectionid(value);
  // @@protoc_insertion_point(field_set:PublishedFileSubSection.sectionid)
}

// optional string title = 2;
inline bool PublishedFileSubSection::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileSubSection::has_title() const {
  return _internal_has_title();
}
inline void PublishedFileSubSection::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileSubSection::title() const {
  // @@protoc_insertion_point(field_get:PublishedFileSubSection.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileSubSection::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileSubSection.title)
}
inline std::string* PublishedFileSubSection::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PublishedFileSubSection.title)
  return _s;
}
inline const std::string& PublishedFileSubSection::_internal_title() const {
  return title_.Get();
}
inline void PublishedFileSubSection::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileSubSection::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileSubSection::release_title() {
  // @@protoc_insertion_point(field_release:PublishedFileSubSection.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileSubSection::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileSubSection.title)
}

// optional string description_text = 3;
inline bool PublishedFileSubSection::_internal_has_description_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileSubSection::has_description_text() const {
  return _internal_has_description_text();
}
inline void PublishedFileSubSection::clear_description_text() {
  description_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileSubSection::description_text() const {
  // @@protoc_insertion_point(field_get:PublishedFileSubSection.description_text)
  return _internal_description_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileSubSection::set_description_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 description_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileSubSection.description_text)
}
inline std::string* PublishedFileSubSection::mutable_description_text() {
  std::string* _s = _internal_mutable_description_text();
  // @@protoc_insertion_point(field_mutable:PublishedFileSubSection.description_text)
  return _s;
}
inline const std::string& PublishedFileSubSection::_internal_description_text() const {
  return description_text_.Get();
}
inline void PublishedFileSubSection::_internal_set_description_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileSubSection::_internal_mutable_description_text() {
  _has_bits_[0] |= 0x00000002u;
  return description_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileSubSection::release_description_text() {
  // @@protoc_insertion_point(field_release:PublishedFileSubSection.description_text)
  if (!_internal_has_description_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = description_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileSubSection::set_allocated_description_text(std::string* description_text) {
  if (description_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileSubSection.description_text)
}

// optional uint32 sort_order = 4;
inline bool PublishedFileSubSection::_internal_has_sort_order() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileSubSection::has_sort_order() const {
  return _internal_has_sort_order();
}
inline void PublishedFileSubSection::clear_sort_order() {
  sort_order_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PublishedFileSubSection::_internal_sort_order() const {
  return sort_order_;
}
inline uint32_t PublishedFileSubSection::sort_order() const {
  // @@protoc_insertion_point(field_get:PublishedFileSubSection.sort_order)
  return _internal_sort_order();
}
inline void PublishedFileSubSection::_internal_set_sort_order(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  sort_order_ = value;
}
inline void PublishedFileSubSection::set_sort_order(uint32_t value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:PublishedFileSubSection.sort_order)
}

// -------------------------------------------------------------------

// CPublishedFile_GetSubSectionData_Response

// repeated .PublishedFileSubSection sub_sections = 1;
inline int CPublishedFile_GetSubSectionData_Response::_internal_sub_sections_size() const {
  return sub_sections_.size();
}
inline int CPublishedFile_GetSubSectionData_Response::sub_sections_size() const {
  return _internal_sub_sections_size();
}
inline void CPublishedFile_GetSubSectionData_Response::clear_sub_sections() {
  sub_sections_.Clear();
}
inline ::PublishedFileSubSection* CPublishedFile_GetSubSectionData_Response::mutable_sub_sections(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetSubSectionData_Response.sub_sections)
  return sub_sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileSubSection >*
CPublishedFile_GetSubSectionData_Response::mutable_sub_sections() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetSubSectionData_Response.sub_sections)
  return &sub_sections_;
}
inline const ::PublishedFileSubSection& CPublishedFile_GetSubSectionData_Response::_internal_sub_sections(int index) const {
  return sub_sections_.Get(index);
}
inline const ::PublishedFileSubSection& CPublishedFile_GetSubSectionData_Response::sub_sections(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetSubSectionData_Response.sub_sections)
  return _internal_sub_sections(index);
}
inline ::PublishedFileSubSection* CPublishedFile_GetSubSectionData_Response::_internal_add_sub_sections() {
  return sub_sections_.Add();
}
inline ::PublishedFileSubSection* CPublishedFile_GetSubSectionData_Response::add_sub_sections() {
  ::PublishedFileSubSection* _add = _internal_add_sub_sections();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetSubSectionData_Response.sub_sections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileSubSection >&
CPublishedFile_GetSubSectionData_Response::sub_sections() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetSubSectionData_Response.sub_sections)
  return sub_sections_;
}

// -------------------------------------------------------------------

// CPublishedFile_Publish_Request

// optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
inline bool CPublishedFile_Publish_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Publish_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CPublishedFile_Publish_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_Publish_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Publish_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  appid_ = value;
}
inline void CPublishedFile_Publish_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.appid)
}

// optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
inline bool CPublishedFile_Publish_Request::_internal_has_consumer_appid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_consumer_appid() const {
  return _internal_has_consumer_appid();
}
inline void CPublishedFile_Publish_Request::clear_consumer_appid() {
  consumer_appid_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CPublishedFile_Publish_Request::_internal_consumer_appid() const {
  return consumer_appid_;
}
inline uint32_t CPublishedFile_Publish_Request::consumer_appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_appid)
  return _internal_consumer_appid();
}
inline void CPublishedFile_Publish_Request::_internal_set_consumer_appid(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  consumer_appid_ = value;
}
inline void CPublishedFile_Publish_Request::set_consumer_appid(uint32_t value) {
  _internal_set_consumer_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_appid)
}

// optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
inline bool CPublishedFile_Publish_Request::_internal_has_cloudfilename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_cloudfilename() const {
  return _internal_has_cloudfilename();
}
inline void CPublishedFile_Publish_Request::clear_cloudfilename() {
  cloudfilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Publish_Request::cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.cloudfilename)
  return _internal_cloudfilename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_cloudfilename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::mutable_cloudfilename() {
  std::string* _s = _internal_mutable_cloudfilename();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.cloudfilename)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_cloudfilename() const {
  return cloudfilename_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_cloudfilename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_cloudfilename() {
  _has_bits_[0] |= 0x00000001u;
  return cloudfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_cloudfilename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.cloudfilename)
  if (!_internal_has_cloudfilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cloudfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudfilename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_cloudfilename(std::string* cloudfilename) {
  if (cloudfilename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cloudfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudfilename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudfilename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.cloudfilename)
}

// optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
inline bool CPublishedFile_Publish_Request::_internal_has_preview_cloudfilename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_preview_cloudfilename() const {
  return _internal_has_preview_cloudfilename();
}
inline void CPublishedFile_Publish_Request::clear_preview_cloudfilename() {
  preview_cloudfilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_Publish_Request::preview_cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.preview_cloudfilename)
  return _internal_preview_cloudfilename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_preview_cloudfilename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::mutable_preview_cloudfilename() {
  std::string* _s = _internal_mutable_preview_cloudfilename();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.preview_cloudfilename)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_preview_cloudfilename() const {
  return preview_cloudfilename_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_preview_cloudfilename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_preview_cloudfilename() {
  _has_bits_[0] |= 0x00000002u;
  return preview_cloudfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_preview_cloudfilename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.preview_cloudfilename)
  if (!_internal_has_preview_cloudfilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = preview_cloudfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_cloudfilename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_preview_cloudfilename(std::string* preview_cloudfilename) {
  if (preview_cloudfilename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preview_cloudfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_cloudfilename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_cloudfilename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.preview_cloudfilename)
}

// optional string title = 5 [(.description) = "Text title for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_title() const {
  return _internal_has_title();
}
inline void CPublishedFile_Publish_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPublishedFile_Publish_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.title)
}
inline std::string* CPublishedFile_Publish_Request::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.title)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_title() const {
  return title_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_title() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.title)
}

// optional string file_description = 6 [(.description) = "Text description for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_file_description() const {
  return _internal_has_file_description();
}
inline void CPublishedFile_Publish_Request::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPublishedFile_Publish_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_description)
  return _internal_file_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_file_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_description)
}
inline std::string* CPublishedFile_Publish_Request::mutable_file_description() {
  std::string* _s = _internal_mutable_file_description();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.file_description)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_file_description() const {
  return file_description_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000008u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.file_description)
}

// optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
inline bool CPublishedFile_Publish_Request::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_file_type() const {
  return _internal_has_file_type();
}
inline void CPublishedFile_Publish_Request::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CPublishedFile_Publish_Request::_internal_file_type() const {
  return file_type_;
}
inline uint32_t CPublishedFile_Publish_Request::file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_type)
  return _internal_file_type();
}
inline void CPublishedFile_Publish_Request::_internal_set_file_type(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  file_type_ = value;
}
inline void CPublishedFile_Publish_Request::set_file_type(uint32_t value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_type)
}

// optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_consumer_shortcut_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_consumer_shortcut_name() const {
  return _internal_has_consumer_shortcut_name();
}
inline void CPublishedFile_Publish_Request::clear_consumer_shortcut_name() {
  consumer_shortcut_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CPublishedFile_Publish_Request::consumer_shortcut_name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return _internal_consumer_shortcut_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_consumer_shortcut_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline std::string* CPublishedFile_Publish_Request::mutable_consumer_shortcut_name() {
  std::string* _s = _internal_mutable_consumer_shortcut_name();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_consumer_shortcut_name() const {
  return consumer_shortcut_name_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_consumer_shortcut_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_consumer_shortcut_name() {
  _has_bits_[0] |= 0x00000010u;
  return consumer_shortcut_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_consumer_shortcut_name() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.consumer_shortcut_name)
  if (!_internal_has_consumer_shortcut_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = consumer_shortcut_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (consumer_shortcut_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    consumer_shortcut_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_consumer_shortcut_name(std::string* consumer_shortcut_name) {
  if (consumer_shortcut_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  consumer_shortcut_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_shortcut_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (consumer_shortcut_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    consumer_shortcut_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.consumer_shortcut_name)
}

// optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
inline bool CPublishedFile_Publish_Request::_internal_has_youtube_username() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_youtube_username() const {
  return _internal_has_youtube_username();
}
inline void CPublishedFile_Publish_Request::clear_youtube_username() {
  youtube_username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CPublishedFile_Publish_Request::youtube_username() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_username)
  return _internal_youtube_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_youtube_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_username)
}
inline std::string* CPublishedFile_Publish_Request::mutable_youtube_username() {
  std::string* _s = _internal_mutable_youtube_username();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_username)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_youtube_username() const {
  return youtube_username_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_youtube_username(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_youtube_username() {
  _has_bits_[0] |= 0x00000020u;
  return youtube_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_youtube_username() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.youtube_username)
  if (!_internal_has_youtube_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = youtube_username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtube_username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtube_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_username(std::string* youtube_username) {
  if (youtube_username != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  youtube_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtube_username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtube_username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtube_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_username)
}

// optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_youtube_videoid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_youtube_videoid() const {
  return _internal_has_youtube_videoid();
}
inline void CPublishedFile_Publish_Request::clear_youtube_videoid() {
  youtube_videoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CPublishedFile_Publish_Request::youtube_videoid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_videoid)
  return _internal_youtube_videoid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_youtube_videoid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_videoid)
}
inline std::string* CPublishedFile_Publish_Request::mutable_youtube_videoid() {
  std::string* _s = _internal_mutable_youtube_videoid();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_videoid)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_youtube_videoid() const {
  return youtube_videoid_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_youtube_videoid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_youtube_videoid() {
  _has_bits_[0] |= 0x00000040u;
  return youtube_videoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_youtube_videoid() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.youtube_videoid)
  if (!_internal_has_youtube_videoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = youtube_videoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtube_videoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtube_videoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_videoid(std::string* youtube_videoid) {
  if (youtube_videoid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  youtube_videoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtube_videoid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtube_videoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtube_videoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_videoid)
}

// optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
inline bool CPublishedFile_Publish_Request::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_visibility() const {
  return _internal_has_visibility();
}
inline void CPublishedFile_Publish_Request::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CPublishedFile_Publish_Request::_internal_visibility() const {
  return visibility_;
}
inline uint32_t CPublishedFile_Publish_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.visibility)
  return _internal_visibility();
}
inline void CPublishedFile_Publish_Request::_internal_set_visibility(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  visibility_ = value;
}
inline void CPublishedFile_Publish_Request::set_visibility(uint32_t value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.visibility)
}

// optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
inline bool CPublishedFile_Publish_Request::_internal_has_redirect_uri() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_redirect_uri() const {
  return _internal_has_redirect_uri();
}
inline void CPublishedFile_Publish_Request::clear_redirect_uri() {
  redirect_uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CPublishedFile_Publish_Request::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.redirect_uri)
  return _internal_redirect_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_redirect_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Request::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.redirect_uri)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_redirect_uri() const {
  return redirect_uri_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_redirect_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_redirect_uri() {
  _has_bits_[0] |= 0x00000080u;
  return redirect_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.redirect_uri)
  if (!_internal_has_redirect_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = redirect_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  redirect_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.redirect_uri)
}

// repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
inline int CPublishedFile_Publish_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_Publish_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_Publish_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_Publish_Request::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_Publish_Request.tags)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_Publish_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_Publish_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.tags)
}
inline std::string* CPublishedFile_Publish_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Publish_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Publish_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_Publish_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Publish_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_Publish_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Publish_Request.tags)
  return &tags_;
}

// optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
inline bool CPublishedFile_Publish_Request::_internal_has_collection_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_collection_type() const {
  return _internal_has_collection_type();
}
inline void CPublishedFile_Publish_Request::clear_collection_type() {
  collection_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CPublishedFile_Publish_Request::collection_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.collection_type)
  return _internal_collection_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_collection_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.collection_type)
}
inline std::string* CPublishedFile_Publish_Request::mutable_collection_type() {
  std::string* _s = _internal_mutable_collection_type();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.collection_type)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_collection_type() const {
  return collection_type_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_collection_type(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_collection_type() {
  _has_bits_[0] |= 0x00000100u;
  return collection_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_collection_type() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.collection_type)
  if (!_internal_has_collection_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = collection_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (collection_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    collection_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_collection_type(std::string* collection_type) {
  if (collection_type != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  collection_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (collection_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    collection_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.collection_type)
}

// optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
inline bool CPublishedFile_Publish_Request::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_game_type() const {
  return _internal_has_game_type();
}
inline void CPublishedFile_Publish_Request::clear_game_type() {
  game_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CPublishedFile_Publish_Request::game_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.game_type)
  return _internal_game_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_game_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.game_type)
}
inline std::string* CPublishedFile_Publish_Request::mutable_game_type() {
  std::string* _s = _internal_mutable_game_type();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.game_type)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_game_type() const {
  return game_type_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_game_type(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_game_type() {
  _has_bits_[0] |= 0x00000200u;
  return game_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_game_type() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.game_type)
  if (!_internal_has_game_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = game_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_game_type(std::string* game_type) {
  if (game_type != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  game_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.game_type)
}

// optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
inline bool CPublishedFile_Publish_Request::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_url() const {
  return _internal_has_url();
}
inline void CPublishedFile_Publish_Request::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CPublishedFile_Publish_Request::url() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Request::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.url)
}
inline std::string* CPublishedFile_Publish_Request::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.url)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Request::_internal_url() const {
  return url_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000400u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Request::release_url() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Request::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.url)
}

// -------------------------------------------------------------------

// CPublishedFile_Publish_Response

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Publish_Response::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Response::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Publish_Response::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_Publish_Response::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Publish_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Publish_Response::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Publish_Response::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.publishedfileid)
}

// optional string redirect_uri = 2;
inline bool CPublishedFile_Publish_Response::_internal_has_redirect_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Response::has_redirect_uri() const {
  return _internal_has_redirect_uri();
}
inline void CPublishedFile_Publish_Response::clear_redirect_uri() {
  redirect_uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Publish_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.redirect_uri)
  return _internal_redirect_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Publish_Response::set_redirect_uri(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Response::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Response.redirect_uri)
  return _s;
}
inline const std::string& CPublishedFile_Publish_Response::_internal_redirect_uri() const {
  return redirect_uri_.Get();
}
inline void CPublishedFile_Publish_Response::_internal_set_redirect_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Response::_internal_mutable_redirect_uri() {
  _has_bits_[0] |= 0x00000001u;
  return redirect_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Publish_Response::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Response.redirect_uri)
  if (!_internal_has_redirect_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = redirect_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Publish_Response::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  redirect_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Response.redirect_uri)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Request

// repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
inline int CPublishedFile_GetDetails_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_GetDetails_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_GetDetails_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_GetDetails_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_GetDetails_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_GetDetails_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline void CPublishedFile_GetDetails_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_GetDetails_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetDetails_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetDetails_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetDetails_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetDetails_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includetags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includetags() const {
  return _internal_has_includetags();
}
inline void CPublishedFile_GetDetails_Request::clear_includetags() {
  includetags_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includetags() const {
  return includetags_;
}
inline bool CPublishedFile_GetDetails_Request::includetags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includetags)
  return _internal_includetags();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includetags(bool value) {
  _has_bits_[0] |= 0x00000001u;
  includetags_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includetags(bool value) {
  _internal_set_includetags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includetags)
}

// optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includeadditionalpreviews() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includeadditionalpreviews() const {
  return _internal_has_includeadditionalpreviews();
}
inline void CPublishedFile_GetDetails_Request::clear_includeadditionalpreviews() {
  includeadditionalpreviews_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includeadditionalpreviews() const {
  return includeadditionalpreviews_;
}
inline bool CPublishedFile_GetDetails_Request::includeadditionalpreviews() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
  return _internal_includeadditionalpreviews();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includeadditionalpreviews(bool value) {
  _has_bits_[0] |= 0x00000002u;
  includeadditionalpreviews_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includeadditionalpreviews(bool value) {
  _internal_set_includeadditionalpreviews(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
}

// optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includechildren() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includechildren() const {
  return _internal_has_includechildren();
}
inline void CPublishedFile_GetDetails_Request::clear_includechildren() {
  includechildren_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includechildren() const {
  return includechildren_;
}
inline bool CPublishedFile_GetDetails_Request::includechildren() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includechildren)
  return _internal_includechildren();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includechildren(bool value) {
  _has_bits_[0] |= 0x00000004u;
  includechildren_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includechildren(bool value) {
  _internal_set_includechildren(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includechildren)
}

// optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includekvtags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includekvtags() const {
  return _internal_has_includekvtags();
}
inline void CPublishedFile_GetDetails_Request::clear_includekvtags() {
  includekvtags_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includekvtags() const {
  return includekvtags_;
}
inline bool CPublishedFile_GetDetails_Request::includekvtags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includekvtags)
  return _internal_includekvtags();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includekvtags(bool value) {
  _has_bits_[0] |= 0x00000008u;
  includekvtags_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includekvtags(bool value) {
  _internal_set_includekvtags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includekvtags)
}

// optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includevotes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includevotes() const {
  return _internal_has_includevotes();
}
inline void CPublishedFile_GetDetails_Request::clear_includevotes() {
  includevotes_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includevotes() const {
  return includevotes_;
}
inline bool CPublishedFile_GetDetails_Request::includevotes() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includevotes)
  return _internal_includevotes();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includevotes(bool value) {
  _has_bits_[0] |= 0x00000010u;
  includevotes_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includevotes(bool value) {
  _internal_set_includevotes(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includevotes)
}

// optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_short_description() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_short_description() const {
  return _internal_has_short_description();
}
inline void CPublishedFile_GetDetails_Request::clear_short_description() {
  short_description_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_short_description() const {
  return short_description_;
}
inline bool CPublishedFile_GetDetails_Request::short_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.short_description)
  return _internal_short_description();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_short_description(bool value) {
  _has_bits_[0] |= 0x00000020u;
  short_description_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_short_description(bool value) {
  _internal_set_short_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.short_description)
}

// optional bool includeforsaledata = 10 [(.description) = "If true, return pricing data, if applicable."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includeforsaledata() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includeforsaledata() const {
  return _internal_has_includeforsaledata();
}
inline void CPublishedFile_GetDetails_Request::clear_includeforsaledata() {
  includeforsaledata_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includeforsaledata() const {
  return includeforsaledata_;
}
inline bool CPublishedFile_GetDetails_Request::includeforsaledata() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includeforsaledata)
  return _internal_includeforsaledata();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includeforsaledata(bool value) {
  _has_bits_[0] |= 0x00000040u;
  includeforsaledata_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includeforsaledata(bool value) {
  _internal_set_includeforsaledata(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includeforsaledata)
}

// optional bool includemetadata = 11 [(.description) = "If true, populate the metadata field."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includemetadata() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includemetadata() const {
  return _internal_has_includemetadata();
}
inline void CPublishedFile_GetDetails_Request::clear_includemetadata() {
  includemetadata_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includemetadata() const {
  return includemetadata_;
}
inline bool CPublishedFile_GetDetails_Request::includemetadata() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includemetadata)
  return _internal_includemetadata();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includemetadata(bool value) {
  _has_bits_[0] |= 0x00000080u;
  includemetadata_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includemetadata(bool value) {
  _internal_set_includemetadata(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includemetadata)
}

// optional int32 language = 12 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetDetails_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CPublishedFile_GetDetails_Request::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetDetails_Request::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.language)
  return _internal_language();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  language_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.language)
}

// optional uint32 return_playtime_stats = 13 [(.description) = "Return playtime stats for the specified number of days before today."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_return_playtime_stats() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_return_playtime_stats() const {
  return _internal_has_return_playtime_stats();
}
inline void CPublishedFile_GetDetails_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CPublishedFile_GetDetails_Request::_internal_return_playtime_stats() const {
  return return_playtime_stats_;
}
inline uint32_t CPublishedFile_GetDetails_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.return_playtime_stats)
  return _internal_return_playtime_stats();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_return_playtime_stats(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  return_playtime_stats_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_return_playtime_stats(uint32_t value) {
  _internal_set_return_playtime_stats(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.return_playtime_stats)
}

// optional uint32 appid = 14;
inline bool CPublishedFile_GetDetails_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetDetails_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CPublishedFile_GetDetails_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  appid_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.appid)
}

// optional bool strip_description_bbcode = 15 [(.description) = "Strips BBCode from descriptions."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_strip_description_bbcode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_strip_description_bbcode() const {
  return _internal_has_strip_description_bbcode();
}
inline void CPublishedFile_GetDetails_Request::clear_strip_description_bbcode() {
  strip_description_bbcode_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_strip_description_bbcode() const {
  return strip_description_bbcode_;
}
inline bool CPublishedFile_GetDetails_Request::strip_description_bbcode() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.strip_description_bbcode)
  return _internal_strip_description_bbcode();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_strip_description_bbcode(bool value) {
  _has_bits_[0] |= 0x00001000u;
  strip_description_bbcode_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_strip_description_bbcode(bool value) {
  _internal_set_strip_description_bbcode(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.strip_description_bbcode)
}

// optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_GetDetails_Request::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::EPublishedFileRevision CPublishedFile_GetDetails_Request::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_GetDetails_Request::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  desired_revision_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.desired_revision)
}

// optional bool includereactions = 17 [default = false, (.description) = "If true, then reactions to items will be returned."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includereactions() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includereactions() const {
  return _internal_has_includereactions();
}
inline void CPublishedFile_GetDetails_Request::clear_includereactions() {
  includereactions_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includereactions() const {
  return includereactions_;
}
inline bool CPublishedFile_GetDetails_Request::includereactions() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includereactions)
  return _internal_includereactions();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includereactions(bool value) {
  _has_bits_[0] |= 0x00002000u;
  includereactions_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includereactions(bool value) {
  _internal_set_includereactions(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includereactions)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Tag

// optional string tag = 1;
inline bool PublishedFileDetails_Tag::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Tag::has_tag() const {
  return _internal_has_tag();
}
inline void PublishedFileDetails_Tag::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_Tag::tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Tag::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.tag)
}
inline std::string* PublishedFileDetails_Tag::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Tag.tag)
  return _s;
}
inline const std::string& PublishedFileDetails_Tag::_internal_tag() const {
  return tag_.Get();
}
inline void PublishedFileDetails_Tag::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Tag::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Tag::release_tag() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Tag.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Tag::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Tag.tag)
}

// optional bool adminonly = 2;
inline bool PublishedFileDetails_Tag::_internal_has_adminonly() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_Tag::has_adminonly() const {
  return _internal_has_adminonly();
}
inline void PublishedFileDetails_Tag::clear_adminonly() {
  adminonly_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PublishedFileDetails_Tag::_internal_adminonly() const {
  return adminonly_;
}
inline bool PublishedFileDetails_Tag::adminonly() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.adminonly)
  return _internal_adminonly();
}
inline void PublishedFileDetails_Tag::_internal_set_adminonly(bool value) {
  _has_bits_[0] |= 0x00000004u;
  adminonly_ = value;
}
inline void PublishedFileDetails_Tag::set_adminonly(bool value) {
  _internal_set_adminonly(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.adminonly)
}

// optional string display_name = 3;
inline bool PublishedFileDetails_Tag::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Tag::has_display_name() const {
  return _internal_has_display_name();
}
inline void PublishedFileDetails_Tag::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails_Tag::display_name() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Tag::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.display_name)
}
inline std::string* PublishedFileDetails_Tag::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Tag.display_name)
  return _s;
}
inline const std::string& PublishedFileDetails_Tag::_internal_display_name() const {
  return display_name_.Get();
}
inline void PublishedFileDetails_Tag::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Tag::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Tag::release_display_name() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Tag.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Tag::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Tag.display_name)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Preview

// optional uint64 previewid = 1;
inline bool PublishedFileDetails_Preview::_internal_has_previewid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_previewid() const {
  return _internal_has_previewid();
}
inline void PublishedFileDetails_Preview::clear_previewid() {
  previewid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t PublishedFileDetails_Preview::_internal_previewid() const {
  return previewid_;
}
inline uint64_t PublishedFileDetails_Preview::previewid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.previewid)
  return _internal_previewid();
}
inline void PublishedFileDetails_Preview::_internal_set_previewid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  previewid_ = value;
}
inline void PublishedFileDetails_Preview::set_previewid(uint64_t value) {
  _internal_set_previewid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.previewid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Preview::_internal_has_sortorder() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_sortorder() const {
  return _internal_has_sortorder();
}
inline void PublishedFileDetails_Preview::clear_sortorder() {
  sortorder_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PublishedFileDetails_Preview::_internal_sortorder() const {
  return sortorder_;
}
inline uint32_t PublishedFileDetails_Preview::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.sortorder)
  return _internal_sortorder();
}
inline void PublishedFileDetails_Preview::_internal_set_sortorder(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  sortorder_ = value;
}
inline void PublishedFileDetails_Preview::set_sortorder(uint32_t value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.sortorder)
}

// optional string url = 3;
inline bool PublishedFileDetails_Preview::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_url() const {
  return _internal_has_url();
}
inline void PublishedFileDetails_Preview::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_Preview::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Preview::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.url)
}
inline std::string* PublishedFileDetails_Preview::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.url)
  return _s;
}
inline const std::string& PublishedFileDetails_Preview::_internal_url() const {
  return url_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::release_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Preview::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.url)
}

// optional uint32 size = 4;
inline bool PublishedFileDetails_Preview::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_size() const {
  return _internal_has_size();
}
inline void PublishedFileDetails_Preview::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PublishedFileDetails_Preview::_internal_size() const {
  return size_;
}
inline uint32_t PublishedFileDetails_Preview::size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.size)
  return _internal_size();
}
inline void PublishedFileDetails_Preview::_internal_set_size(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  size_ = value;
}
inline void PublishedFileDetails_Preview::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.size)
}

// optional string filename = 5;
inline bool PublishedFileDetails_Preview::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_filename() const {
  return _internal_has_filename();
}
inline void PublishedFileDetails_Preview::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails_Preview::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Preview::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.filename)
}
inline std::string* PublishedFileDetails_Preview::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.filename)
  return _s;
}
inline const std::string& PublishedFileDetails_Preview::_internal_filename() const {
  return filename_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::release_filename() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Preview::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.filename)
}

// optional string youtubevideoid = 6;
inline bool PublishedFileDetails_Preview::_internal_has_youtubevideoid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_youtubevideoid() const {
  return _internal_has_youtubevideoid();
}
inline void PublishedFileDetails_Preview::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublishedFileDetails_Preview::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.youtubevideoid)
  return _internal_youtubevideoid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Preview::set_youtubevideoid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.youtubevideoid)
}
inline std::string* PublishedFileDetails_Preview::mutable_youtubevideoid() {
  std::string* _s = _internal_mutable_youtubevideoid();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.youtubevideoid)
  return _s;
}
inline const std::string& PublishedFileDetails_Preview::_internal_youtubevideoid() const {
  return youtubevideoid_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_youtubevideoid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_youtubevideoid() {
  _has_bits_[0] |= 0x00000004u;
  return youtubevideoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.youtubevideoid)
  if (!_internal_has_youtubevideoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = youtubevideoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtubevideoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Preview::set_allocated_youtubevideoid(std::string* youtubevideoid) {
  if (youtubevideoid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  youtubevideoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtubevideoid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtubevideoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.youtubevideoid)
}

// optional uint32 preview_type = 7;
inline bool PublishedFileDetails_Preview::_internal_has_preview_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_preview_type() const {
  return _internal_has_preview_type();
}
inline void PublishedFileDetails_Preview::clear_preview_type() {
  preview_type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PublishedFileDetails_Preview::_internal_preview_type() const {
  return preview_type_;
}
inline uint32_t PublishedFileDetails_Preview::preview_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.preview_type)
  return _internal_preview_type();
}
inline void PublishedFileDetails_Preview::_internal_set_preview_type(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  preview_type_ = value;
}
inline void PublishedFileDetails_Preview::set_preview_type(uint32_t value) {
  _internal_set_preview_type(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.preview_type)
}

// optional string external_reference = 8;
inline bool PublishedFileDetails_Preview::_internal_has_external_reference() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_external_reference() const {
  return _internal_has_external_reference();
}
inline void PublishedFileDetails_Preview::clear_external_reference() {
  external_reference_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PublishedFileDetails_Preview::external_reference() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.external_reference)
  return _internal_external_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_Preview::set_external_reference(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 external_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.external_reference)
}
inline std::string* PublishedFileDetails_Preview::mutable_external_reference() {
  std::string* _s = _internal_mutable_external_reference();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.external_reference)
  return _s;
}
inline const std::string& PublishedFileDetails_Preview::_internal_external_reference() const {
  return external_reference_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_external_reference(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  external_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_external_reference() {
  _has_bits_[0] |= 0x00000008u;
  return external_reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_Preview::release_external_reference() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.external_reference)
  if (!_internal_has_external_reference()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = external_reference_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_reference_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_Preview::set_allocated_external_reference(std::string* external_reference) {
  if (external_reference != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  external_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_reference,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_reference_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.external_reference)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Child

// optional uint64 publishedfileid = 1;
inline bool PublishedFileDetails_Child::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void PublishedFileDetails_Child::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PublishedFileDetails_Child::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t PublishedFileDetails_Child::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.publishedfileid)
  return _internal_publishedfileid();
}
inline void PublishedFileDetails_Child::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void PublishedFileDetails_Child::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.publishedfileid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Child::_internal_has_sortorder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_sortorder() const {
  return _internal_has_sortorder();
}
inline void PublishedFileDetails_Child::clear_sortorder() {
  sortorder_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishedFileDetails_Child::_internal_sortorder() const {
  return sortorder_;
}
inline uint32_t PublishedFileDetails_Child::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.sortorder)
  return _internal_sortorder();
}
inline void PublishedFileDetails_Child::_internal_set_sortorder(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sortorder_ = value;
}
inline void PublishedFileDetails_Child::set_sortorder(uint32_t value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.sortorder)
}

// optional uint32 file_type = 3;
inline bool PublishedFileDetails_Child::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_file_type() const {
  return _internal_has_file_type();
}
inline void PublishedFileDetails_Child::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishedFileDetails_Child::_internal_file_type() const {
  return file_type_;
}
inline uint32_t PublishedFileDetails_Child::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.file_type)
  return _internal_file_type();
}
inline void PublishedFileDetails_Child::_internal_set_file_type(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  file_type_ = value;
}
inline void PublishedFileDetails_Child::set_file_type(uint32_t value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.file_type)
}

// -------------------------------------------------------------------

// PublishedFileDetails_KVTag

// optional string key = 1;
inline bool PublishedFileDetails_KVTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_KVTag::has_key() const {
  return _internal_has_key();
}
inline void PublishedFileDetails_KVTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_KVTag::key() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_KVTag::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.key)
}
inline std::string* PublishedFileDetails_KVTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.key)
  return _s;
}
inline const std::string& PublishedFileDetails_KVTag::_internal_key() const {
  return key_.Get();
}
inline void PublishedFileDetails_KVTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_KVTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.KVTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_KVTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.key)
}

// optional string value = 2;
inline bool PublishedFileDetails_KVTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_KVTag::has_value() const {
  return _internal_has_value();
}
inline void PublishedFileDetails_KVTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails_KVTag::value() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails_KVTag::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.value)
}
inline std::string* PublishedFileDetails_KVTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.value)
  return _s;
}
inline const std::string& PublishedFileDetails_KVTag::_internal_value() const {
  return value_.Get();
}
inline void PublishedFileDetails_KVTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_KVTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.KVTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails_KVTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.value)
}

// -------------------------------------------------------------------

// PublishedFileDetails_VoteData

// optional float score = 1;
inline bool PublishedFileDetails_VoteData::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_score() const {
  return _internal_has_score();
}
inline void PublishedFileDetails_VoteData::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PublishedFileDetails_VoteData::_internal_score() const {
  return score_;
}
inline float PublishedFileDetails_VoteData::score() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.score)
  return _internal_score();
}
inline void PublishedFileDetails_VoteData::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
}
inline void PublishedFileDetails_VoteData::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.score)
}

// optional uint32 votes_up = 2;
inline bool PublishedFileDetails_VoteData::_internal_has_votes_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_votes_up() const {
  return _internal_has_votes_up();
}
inline void PublishedFileDetails_VoteData::clear_votes_up() {
  votes_up_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishedFileDetails_VoteData::_internal_votes_up() const {
  return votes_up_;
}
inline uint32_t PublishedFileDetails_VoteData::votes_up() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_up)
  return _internal_votes_up();
}
inline void PublishedFileDetails_VoteData::_internal_set_votes_up(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  votes_up_ = value;
}
inline void PublishedFileDetails_VoteData::set_votes_up(uint32_t value) {
  _internal_set_votes_up(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_up)
}

// optional uint32 votes_down = 3;
inline bool PublishedFileDetails_VoteData::_internal_has_votes_down() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_votes_down() const {
  return _internal_has_votes_down();
}
inline void PublishedFileDetails_VoteData::clear_votes_down() {
  votes_down_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishedFileDetails_VoteData::_internal_votes_down() const {
  return votes_down_;
}
inline uint32_t PublishedFileDetails_VoteData::votes_down() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_down)
  return _internal_votes_down();
}
inline void PublishedFileDetails_VoteData::_internal_set_votes_down(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  votes_down_ = value;
}
inline void PublishedFileDetails_VoteData::set_votes_down(uint32_t value) {
  _internal_set_votes_down(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_down)
}

// -------------------------------------------------------------------

// PublishedFileDetails_ForSaleData

// optional bool is_for_sale = 1;
inline bool PublishedFileDetails_ForSaleData::_internal_has_is_for_sale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_is_for_sale() const {
  return _internal_has_is_for_sale();
}
inline void PublishedFileDetails_ForSaleData::clear_is_for_sale() {
  is_for_sale_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PublishedFileDetails_ForSaleData::_internal_is_for_sale() const {
  return is_for_sale_;
}
inline bool PublishedFileDetails_ForSaleData::is_for_sale() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.is_for_sale)
  return _internal_is_for_sale();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_is_for_sale(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_for_sale_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_is_for_sale(bool value) {
  _internal_set_is_for_sale(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.is_for_sale)
}

// optional uint32 price_category = 2;
inline bool PublishedFileDetails_ForSaleData::_internal_has_price_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_price_category() const {
  return _internal_has_price_category();
}
inline void PublishedFileDetails_ForSaleData::clear_price_category() {
  price_category_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PublishedFileDetails_ForSaleData::_internal_price_category() const {
  return price_category_;
}
inline uint32_t PublishedFileDetails_ForSaleData::price_category() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.price_category)
  return _internal_price_category();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_price_category(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  price_category_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_price_category(uint32_t value) {
  _internal_set_price_category(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.price_category)
}

// optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
inline bool PublishedFileDetails_ForSaleData::_internal_has_estatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_estatus() const {
  return _internal_has_estatus();
}
inline void PublishedFileDetails_ForSaleData::clear_estatus() {
  estatus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EPublishedFileForSaleStatus PublishedFileDetails_ForSaleData::_internal_estatus() const {
  return static_cast< ::EPublishedFileForSaleStatus >(estatus_);
}
inline ::EPublishedFileForSaleStatus PublishedFileDetails_ForSaleData::estatus() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.estatus)
  return _internal_estatus();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_estatus(::EPublishedFileForSaleStatus value) {
  assert(::EPublishedFileForSaleStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  estatus_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_estatus(::EPublishedFileForSaleStatus value) {
  _internal_set_estatus(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.estatus)
}

// optional uint32 price_category_floor = 4;
inline bool PublishedFileDetails_ForSaleData::_internal_has_price_category_floor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_price_category_floor() const {
  return _internal_has_price_category_floor();
}
inline void PublishedFileDetails_ForSaleData::clear_price_category_floor() {
  price_category_floor_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublishedFileDetails_ForSaleData::_internal_price_category_floor() const {
  return price_category_floor_;
}
inline uint32_t PublishedFileDetails_ForSaleData::price_category_floor() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.price_category_floor)
  return _internal_price_category_floor();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_price_category_floor(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  price_category_floor_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_price_category_floor(uint32_t value) {
  _internal_set_price_category_floor(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.price_category_floor)
}

// optional bool price_is_pay_what_you_want = 5;
inline bool PublishedFileDetails_ForSaleData::_internal_has_price_is_pay_what_you_want() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_price_is_pay_what_you_want() const {
  return _internal_has_price_is_pay_what_you_want();
}
inline void PublishedFileDetails_ForSaleData::clear_price_is_pay_what_you_want() {
  price_is_pay_what_you_want_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PublishedFileDetails_ForSaleData::_internal_price_is_pay_what_you_want() const {
  return price_is_pay_what_you_want_;
}
inline bool PublishedFileDetails_ForSaleData::price_is_pay_what_you_want() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.price_is_pay_what_you_want)
  return _internal_price_is_pay_what_you_want();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_price_is_pay_what_you_want(bool value) {
  _has_bits_[0] |= 0x00000008u;
  price_is_pay_what_you_want_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_price_is_pay_what_you_want(bool value) {
  _internal_set_price_is_pay_what_you_want(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.price_is_pay_what_you_want)
}

// optional uint32 discount_percentage = 6;
inline bool PublishedFileDetails_ForSaleData::_internal_has_discount_percentage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails_ForSaleData::has_discount_percentage() const {
  return _internal_has_discount_percentage();
}
inline void PublishedFileDetails_ForSaleData::clear_discount_percentage() {
  discount_percentage_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PublishedFileDetails_ForSaleData::_internal_discount_percentage() const {
  return discount_percentage_;
}
inline uint32_t PublishedFileDetails_ForSaleData::discount_percentage() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ForSaleData.discount_percentage)
  return _internal_discount_percentage();
}
inline void PublishedFileDetails_ForSaleData::_internal_set_discount_percentage(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  discount_percentage_ = value;
}
inline void PublishedFileDetails_ForSaleData::set_discount_percentage(uint32_t value) {
  _internal_set_discount_percentage(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ForSaleData.discount_percentage)
}

// -------------------------------------------------------------------

// PublishedFileDetails_PlaytimeStats

// optional uint64 playtime_seconds = 1;
inline bool PublishedFileDetails_PlaytimeStats::_internal_has_playtime_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_PlaytimeStats::has_playtime_seconds() const {
  return _internal_has_playtime_seconds();
}
inline void PublishedFileDetails_PlaytimeStats::clear_playtime_seconds() {
  playtime_seconds_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PublishedFileDetails_PlaytimeStats::_internal_playtime_seconds() const {
  return playtime_seconds_;
}
inline uint64_t PublishedFileDetails_PlaytimeStats::playtime_seconds() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.PlaytimeStats.playtime_seconds)
  return _internal_playtime_seconds();
}
inline void PublishedFileDetails_PlaytimeStats::_internal_set_playtime_seconds(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  playtime_seconds_ = value;
}
inline void PublishedFileDetails_PlaytimeStats::set_playtime_seconds(uint64_t value) {
  _internal_set_playtime_seconds(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.PlaytimeStats.playtime_seconds)
}

// optional uint64 num_sessions = 2;
inline bool PublishedFileDetails_PlaytimeStats::_internal_has_num_sessions() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_PlaytimeStats::has_num_sessions() const {
  return _internal_has_num_sessions();
}
inline void PublishedFileDetails_PlaytimeStats::clear_num_sessions() {
  num_sessions_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t PublishedFileDetails_PlaytimeStats::_internal_num_sessions() const {
  return num_sessions_;
}
inline uint64_t PublishedFileDetails_PlaytimeStats::num_sessions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.PlaytimeStats.num_sessions)
  return _internal_num_sessions();
}
inline void PublishedFileDetails_PlaytimeStats::_internal_set_num_sessions(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_sessions_ = value;
}
inline void PublishedFileDetails_PlaytimeStats::set_num_sessions(uint64_t value) {
  _internal_set_num_sessions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.PlaytimeStats.num_sessions)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Reaction

// optional uint32 reactionid = 1;
inline bool PublishedFileDetails_Reaction::_internal_has_reactionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Reaction::has_reactionid() const {
  return _internal_has_reactionid();
}
inline void PublishedFileDetails_Reaction::clear_reactionid() {
  reactionid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PublishedFileDetails_Reaction::_internal_reactionid() const {
  return reactionid_;
}
inline uint32_t PublishedFileDetails_Reaction::reactionid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Reaction.reactionid)
  return _internal_reactionid();
}
inline void PublishedFileDetails_Reaction::_internal_set_reactionid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  reactionid_ = value;
}
inline void PublishedFileDetails_Reaction::set_reactionid(uint32_t value) {
  _internal_set_reactionid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Reaction.reactionid)
}

// optional uint32 count = 2;
inline bool PublishedFileDetails_Reaction::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Reaction::has_count() const {
  return _internal_has_count();
}
inline void PublishedFileDetails_Reaction::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishedFileDetails_Reaction::_internal_count() const {
  return count_;
}
inline uint32_t PublishedFileDetails_Reaction::count() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Reaction.count)
  return _internal_count();
}
inline void PublishedFileDetails_Reaction::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void PublishedFileDetails_Reaction::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Reaction.count)
}

// -------------------------------------------------------------------

// PublishedFileDetails

// optional uint32 result = 1;
inline bool PublishedFileDetails::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_result() const {
  return _internal_has_result();
}
inline void PublishedFileDetails::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t PublishedFileDetails::_internal_result() const {
  return result_;
}
inline uint32_t PublishedFileDetails::result() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.result)
  return _internal_result();
}
inline void PublishedFileDetails::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  result_ = value;
}
inline void PublishedFileDetails::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.result)
}

// optional uint64 publishedfileid = 2;
inline bool PublishedFileDetails::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void PublishedFileDetails::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00010000u;
}
inline uint64_t PublishedFileDetails::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t PublishedFileDetails::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.publishedfileid)
  return _internal_publishedfileid();
}
inline void PublishedFileDetails::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00010000u;
  publishedfileid_ = value;
}
inline void PublishedFileDetails::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.publishedfileid)
}

// optional fixed64 creator = 3;
inline bool PublishedFileDetails::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_creator() const {
  return _internal_has_creator();
}
inline void PublishedFileDetails::clear_creator() {
  creator_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00080000u;
}
inline uint64_t PublishedFileDetails::_internal_creator() const {
  return creator_;
}
inline uint64_t PublishedFileDetails::creator() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator)
  return _internal_creator();
}
inline void PublishedFileDetails::_internal_set_creator(uint64_t value) {
  _has_bits_[0] |= 0x00080000u;
  creator_ = value;
}
inline void PublishedFileDetails::set_creator(uint64_t value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator)
}

// optional uint32 creator_appid = 4;
inline bool PublishedFileDetails::_internal_has_creator_appid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_creator_appid() const {
  return _internal_has_creator_appid();
}
inline void PublishedFileDetails::clear_creator_appid() {
  creator_appid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t PublishedFileDetails::_internal_creator_appid() const {
  return creator_appid_;
}
inline uint32_t PublishedFileDetails::creator_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator_appid)
  return _internal_creator_appid();
}
inline void PublishedFileDetails::_internal_set_creator_appid(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  creator_appid_ = value;
}
inline void PublishedFileDetails::set_creator_appid(uint32_t value) {
  _internal_set_creator_appid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator_appid)
}

// optional uint32 consumer_appid = 5;
inline bool PublishedFileDetails::_internal_has_consumer_appid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_consumer_appid() const {
  return _internal_has_consumer_appid();
}
inline void PublishedFileDetails::clear_consumer_appid() {
  consumer_appid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t PublishedFileDetails::_internal_consumer_appid() const {
  return consumer_appid_;
}
inline uint32_t PublishedFileDetails::consumer_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_appid)
  return _internal_consumer_appid();
}
inline void PublishedFileDetails::_internal_set_consumer_appid(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  consumer_appid_ = value;
}
inline void PublishedFileDetails::set_consumer_appid(uint32_t value) {
  _internal_set_consumer_appid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_appid)
}

// optional uint32 consumer_shortcutid = 6;
inline bool PublishedFileDetails::_internal_has_consumer_shortcutid() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_consumer_shortcutid() const {
  return _internal_has_consumer_shortcutid();
}
inline void PublishedFileDetails::clear_consumer_shortcutid() {
  consumer_shortcutid_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t PublishedFileDetails::_internal_consumer_shortcutid() const {
  return consumer_shortcutid_;
}
inline uint32_t PublishedFileDetails::consumer_shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_shortcutid)
  return _internal_consumer_shortcutid();
}
inline void PublishedFileDetails::_internal_set_consumer_shortcutid(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  consumer_shortcutid_ = value;
}
inline void PublishedFileDetails::set_consumer_shortcutid(uint32_t value) {
  _internal_set_consumer_shortcutid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_shortcutid)
}

// optional string filename = 7;
inline bool PublishedFileDetails::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_filename() const {
  return _internal_has_filename();
}
inline void PublishedFileDetails::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.filename)
}
inline std::string* PublishedFileDetails::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.filename)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_filename() const {
  return filename_.Get();
}
inline void PublishedFileDetails::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_filename() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.filename)
}

// optional uint64 file_size = 8;
inline bool PublishedFileDetails::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_size() const {
  return _internal_has_file_size();
}
inline void PublishedFileDetails::clear_file_size() {
  file_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00400000u;
}
inline uint64_t PublishedFileDetails::_internal_file_size() const {
  return file_size_;
}
inline uint64_t PublishedFileDetails::file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_size)
  return _internal_file_size();
}
inline void PublishedFileDetails::_internal_set_file_size(uint64_t value) {
  _has_bits_[0] |= 0x00400000u;
  file_size_ = value;
}
inline void PublishedFileDetails::set_file_size(uint64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_size)
}

// optional uint64 preview_file_size = 9;
inline bool PublishedFileDetails::_internal_has_preview_file_size() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_preview_file_size() const {
  return _internal_has_preview_file_size();
}
inline void PublishedFileDetails::clear_preview_file_size() {
  preview_file_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00800000u;
}
inline uint64_t PublishedFileDetails::_internal_preview_file_size() const {
  return preview_file_size_;
}
inline uint64_t PublishedFileDetails::preview_file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_file_size)
  return _internal_preview_file_size();
}
inline void PublishedFileDetails::_internal_set_preview_file_size(uint64_t value) {
  _has_bits_[0] |= 0x00800000u;
  preview_file_size_ = value;
}
inline void PublishedFileDetails::set_preview_file_size(uint64_t value) {
  _internal_set_preview_file_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_file_size)
}

// optional string file_url = 10;
inline bool PublishedFileDetails::_internal_has_file_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_url() const {
  return _internal_has_file_url();
}
inline void PublishedFileDetails::clear_file_url() {
  file_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails::file_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_url)
  return _internal_file_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_file_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_url)
}
inline std::string* PublishedFileDetails::mutable_file_url() {
  std::string* _s = _internal_mutable_file_url();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_url)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_file_url() const {
  return file_url_.Get();
}
inline void PublishedFileDetails::_internal_set_file_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_file_url() {
  _has_bits_[0] |= 0x00000002u;
  return file_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_file_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.file_url)
  if (!_internal_has_file_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_file_url(std::string* file_url) {
  if (file_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_url)
}

// optional string preview_url = 11;
inline bool PublishedFileDetails::_internal_has_preview_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_preview_url() const {
  return _internal_has_preview_url();
}
inline void PublishedFileDetails::clear_preview_url() {
  preview_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublishedFileDetails::preview_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_url)
  return _internal_preview_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_preview_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_url)
}
inline std::string* PublishedFileDetails::mutable_preview_url() {
  std::string* _s = _internal_mutable_preview_url();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.preview_url)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_preview_url() const {
  return preview_url_.Get();
}
inline void PublishedFileDetails::_internal_set_preview_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_preview_url() {
  _has_bits_[0] |= 0x00000004u;
  return preview_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_preview_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.preview_url)
  if (!_internal_has_preview_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = preview_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_preview_url(std::string* preview_url) {
  if (preview_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preview_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.preview_url)
}

// optional string youtubevideoid = 12;
inline bool PublishedFileDetails::_internal_has_youtubevideoid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_youtubevideoid() const {
  return _internal_has_youtubevideoid();
}
inline void PublishedFileDetails::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PublishedFileDetails::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.youtubevideoid)
  return _internal_youtubevideoid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_youtubevideoid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.youtubevideoid)
}
inline std::string* PublishedFileDetails::mutable_youtubevideoid() {
  std::string* _s = _internal_mutable_youtubevideoid();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.youtubevideoid)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_youtubevideoid() const {
  return youtubevideoid_.Get();
}
inline void PublishedFileDetails::_internal_set_youtubevideoid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_youtubevideoid() {
  _has_bits_[0] |= 0x00000008u;
  return youtubevideoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.youtubevideoid)
  if (!_internal_has_youtubevideoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = youtubevideoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtubevideoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_youtubevideoid(std::string* youtubevideoid) {
  if (youtubevideoid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  youtubevideoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtubevideoid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (youtubevideoid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.youtubevideoid)
}

// optional string url = 13;
inline bool PublishedFileDetails::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_url() const {
  return _internal_has_url();
}
inline void PublishedFileDetails::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PublishedFileDetails::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.url)
}
inline std::string* PublishedFileDetails::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.url)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_url() const {
  return url_.Get();
}
inline void PublishedFileDetails::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000010u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.url)
}

// optional fixed64 hcontent_file = 14;
inline bool PublishedFileDetails::_internal_has_hcontent_file() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_hcontent_file() const {
  return _internal_has_hcontent_file();
}
inline void PublishedFileDetails::clear_hcontent_file() {
  hcontent_file_ = uint64_t{0u};
  _has_bits_[0] &= ~0x01000000u;
}
inline uint64_t PublishedFileDetails::_internal_hcontent_file() const {
  return hcontent_file_;
}
inline uint64_t PublishedFileDetails::hcontent_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_file)
  return _internal_hcontent_file();
}
inline void PublishedFileDetails::_internal_set_hcontent_file(uint64_t value) {
  _has_bits_[0] |= 0x01000000u;
  hcontent_file_ = value;
}
inline void PublishedFileDetails::set_hcontent_file(uint64_t value) {
  _internal_set_hcontent_file(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_file)
}

// optional fixed64 hcontent_preview = 15;
inline bool PublishedFileDetails::_internal_has_hcontent_preview() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_hcontent_preview() const {
  return _internal_has_hcontent_preview();
}
inline void PublishedFileDetails::clear_hcontent_preview() {
  hcontent_preview_ = uint64_t{0u};
  _has_bits_[0] &= ~0x02000000u;
}
inline uint64_t PublishedFileDetails::_internal_hcontent_preview() const {
  return hcontent_preview_;
}
inline uint64_t PublishedFileDetails::hcontent_preview() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_preview)
  return _internal_hcontent_preview();
}
inline void PublishedFileDetails::_internal_set_hcontent_preview(uint64_t value) {
  _has_bits_[0] |= 0x02000000u;
  hcontent_preview_ = value;
}
inline void PublishedFileDetails::set_hcontent_preview(uint64_t value) {
  _internal_set_hcontent_preview(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_preview)
}

// optional string title = 16;
inline bool PublishedFileDetails::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_title() const {
  return _internal_has_title();
}
inline void PublishedFileDetails::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PublishedFileDetails::title() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.title)
}
inline std::string* PublishedFileDetails::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.title)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_title() const {
  return title_.Get();
}
inline void PublishedFileDetails::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000020u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_title() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.title)
}

// optional string file_description = 17;
inline bool PublishedFileDetails::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_description() const {
  return _internal_has_file_description();
}
inline void PublishedFileDetails::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PublishedFileDetails::file_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_description)
  return _internal_file_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_file_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_description)
}
inline std::string* PublishedFileDetails::mutable_file_description() {
  std::string* _s = _internal_mutable_file_description();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_description)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_file_description() const {
  return file_description_.Get();
}
inline void PublishedFileDetails::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000040u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_file_description() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_description)
}

// optional string short_description = 18;
inline bool PublishedFileDetails::_internal_has_short_description() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_short_description() const {
  return _internal_has_short_description();
}
inline void PublishedFileDetails::clear_short_description() {
  short_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PublishedFileDetails::short_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.short_description)
  return _internal_short_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_short_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.short_description)
}
inline std::string* PublishedFileDetails::mutable_short_description() {
  std::string* _s = _internal_mutable_short_description();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.short_description)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_short_description() const {
  return short_description_.Get();
}
inline void PublishedFileDetails::_internal_set_short_description(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_short_description() {
  _has_bits_[0] |= 0x00000080u;
  return short_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_short_description() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.short_description)
  if (!_internal_has_short_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = short_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_short_description(std::string* short_description) {
  if (short_description != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  short_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (short_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.short_description)
}

// optional uint32 time_created = 19;
inline bool PublishedFileDetails::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_created() const {
  return _internal_has_time_created();
}
inline void PublishedFileDetails::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline uint32_t PublishedFileDetails::_internal_time_created() const {
  return time_created_;
}
inline uint32_t PublishedFileDetails::time_created() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_created)
  return _internal_time_created();
}
inline void PublishedFileDetails::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x04000000u;
  time_created_ = value;
}
inline void PublishedFileDetails::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_created)
}

// optional uint32 time_updated = 20;
inline bool PublishedFileDetails::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void PublishedFileDetails::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline uint32_t PublishedFileDetails::_internal_time_updated() const {
  return time_updated_;
}
inline uint32_t PublishedFileDetails::time_updated() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_updated)
  return _internal_time_updated();
}
inline void PublishedFileDetails::_internal_set_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x08000000u;
  time_updated_ = value;
}
inline void PublishedFileDetails::set_time_updated(uint32_t value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_updated)
}

// optional uint32 visibility = 21;
inline bool PublishedFileDetails::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_visibility() const {
  return _internal_has_visibility();
}
inline void PublishedFileDetails::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t PublishedFileDetails::_internal_visibility() const {
  return visibility_;
}
inline uint32_t PublishedFileDetails::visibility() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.visibility)
  return _internal_visibility();
}
inline void PublishedFileDetails::_internal_set_visibility(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  visibility_ = value;
}
inline void PublishedFileDetails::set_visibility(uint32_t value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.visibility)
}

// optional uint32 flags = 22;
inline bool PublishedFileDetails::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_flags() const {
  return _internal_has_flags();
}
inline void PublishedFileDetails::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t PublishedFileDetails::_internal_flags() const {
  return flags_;
}
inline uint32_t PublishedFileDetails::flags() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.flags)
  return _internal_flags();
}
inline void PublishedFileDetails::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  flags_ = value;
}
inline void PublishedFileDetails::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.flags)
}

// optional bool workshop_file = 23;
inline bool PublishedFileDetails::_internal_has_workshop_file() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_workshop_file() const {
  return _internal_has_workshop_file();
}
inline void PublishedFileDetails::clear_workshop_file() {
  workshop_file_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool PublishedFileDetails::_internal_workshop_file() const {
  return workshop_file_;
}
inline bool PublishedFileDetails::workshop_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_file)
  return _internal_workshop_file();
}
inline void PublishedFileDetails::_internal_set_workshop_file(bool value) {
  _has_bits_[0] |= 0x40000000u;
  workshop_file_ = value;
}
inline void PublishedFileDetails::set_workshop_file(bool value) {
  _internal_set_workshop_file(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_file)
}

// optional bool workshop_accepted = 24;
inline bool PublishedFileDetails::_internal_has_workshop_accepted() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_workshop_accepted() const {
  return _internal_has_workshop_accepted();
}
inline void PublishedFileDetails::clear_workshop_accepted() {
  workshop_accepted_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool PublishedFileDetails::_internal_workshop_accepted() const {
  return workshop_accepted_;
}
inline bool PublishedFileDetails::workshop_accepted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_accepted)
  return _internal_workshop_accepted();
}
inline void PublishedFileDetails::_internal_set_workshop_accepted(bool value) {
  _has_bits_[0] |= 0x80000000u;
  workshop_accepted_ = value;
}
inline void PublishedFileDetails::set_workshop_accepted(bool value) {
  _internal_set_workshop_accepted(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_accepted)
}

// optional bool show_subscribe_all = 25;
inline bool PublishedFileDetails::_internal_has_show_subscribe_all() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_show_subscribe_all() const {
  return _internal_has_show_subscribe_all();
}
inline void PublishedFileDetails::clear_show_subscribe_all() {
  show_subscribe_all_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool PublishedFileDetails::_internal_show_subscribe_all() const {
  return show_subscribe_all_;
}
inline bool PublishedFileDetails::show_subscribe_all() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.show_subscribe_all)
  return _internal_show_subscribe_all();
}
inline void PublishedFileDetails::_internal_set_show_subscribe_all(bool value) {
  _has_bits_[1] |= 0x00000001u;
  show_subscribe_all_ = value;
}
inline void PublishedFileDetails::set_show_subscribe_all(bool value) {
  _internal_set_show_subscribe_all(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.show_subscribe_all)
}

// optional int32 num_comments_developer = 26;
inline bool PublishedFileDetails::_internal_has_num_comments_developer() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_comments_developer() const {
  return _internal_has_num_comments_developer();
}
inline void PublishedFileDetails::clear_num_comments_developer() {
  num_comments_developer_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline int32_t PublishedFileDetails::_internal_num_comments_developer() const {
  return num_comments_developer_;
}
inline int32_t PublishedFileDetails::num_comments_developer() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_developer)
  return _internal_num_comments_developer();
}
inline void PublishedFileDetails::_internal_set_num_comments_developer(int32_t value) {
  _has_bits_[1] |= 0x00000004u;
  num_comments_developer_ = value;
}
inline void PublishedFileDetails::set_num_comments_developer(int32_t value) {
  _internal_set_num_comments_developer(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_developer)
}

// optional int32 num_comments_public = 27;
inline bool PublishedFileDetails::_internal_has_num_comments_public() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_comments_public() const {
  return _internal_has_num_comments_public();
}
inline void PublishedFileDetails::clear_num_comments_public() {
  num_comments_public_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline int32_t PublishedFileDetails::_internal_num_comments_public() const {
  return num_comments_public_;
}
inline int32_t PublishedFileDetails::num_comments_public() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_public)
  return _internal_num_comments_public();
}
inline void PublishedFileDetails::_internal_set_num_comments_public(int32_t value) {
  _has_bits_[1] |= 0x00000010u;
  num_comments_public_ = value;
}
inline void PublishedFileDetails::set_num_comments_public(int32_t value) {
  _internal_set_num_comments_public(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_public)
}

// optional bool banned = 28;
inline bool PublishedFileDetails::_internal_has_banned() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_banned() const {
  return _internal_has_banned();
}
inline void PublishedFileDetails::clear_banned() {
  banned_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool PublishedFileDetails::_internal_banned() const {
  return banned_;
}
inline bool PublishedFileDetails::banned() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banned)
  return _internal_banned();
}
inline void PublishedFileDetails::_internal_set_banned(bool value) {
  _has_bits_[1] |= 0x00000002u;
  banned_ = value;
}
inline void PublishedFileDetails::set_banned(bool value) {
  _internal_set_banned(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banned)
}

// optional string ban_reason = 29;
inline bool PublishedFileDetails::_internal_has_ban_reason() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_ban_reason() const {
  return _internal_has_ban_reason();
}
inline void PublishedFileDetails::clear_ban_reason() {
  ban_reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PublishedFileDetails::ban_reason() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ban_reason)
  return _internal_ban_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_ban_reason(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ban_reason)
}
inline std::string* PublishedFileDetails::mutable_ban_reason() {
  std::string* _s = _internal_mutable_ban_reason();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.ban_reason)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_ban_reason() const {
  return ban_reason_.Get();
}
inline void PublishedFileDetails::_internal_set_ban_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_ban_reason() {
  _has_bits_[0] |= 0x00000100u;
  return ban_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_ban_reason() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.ban_reason)
  if (!_internal_has_ban_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = ban_reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ban_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_ban_reason(std::string* ban_reason) {
  if (ban_reason != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ban_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ban_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ban_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.ban_reason)
}

// optional fixed64 banner = 30;
inline bool PublishedFileDetails::_internal_has_banner() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_banner() const {
  return _internal_has_banner();
}
inline void PublishedFileDetails::clear_banner() {
  banner_ = uint64_t{0u};
  _has_bits_[1] &= ~0x00000008u;
}
inline uint64_t PublishedFileDetails::_internal_banner() const {
  return banner_;
}
inline uint64_t PublishedFileDetails::banner() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banner)
  return _internal_banner();
}
inline void PublishedFileDetails::_internal_set_banner(uint64_t value) {
  _has_bits_[1] |= 0x00000008u;
  banner_ = value;
}
inline void PublishedFileDetails::set_banner(uint64_t value) {
  _internal_set_banner(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banner)
}

// optional bool can_be_deleted = 31;
inline bool PublishedFileDetails::_internal_has_can_be_deleted() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_can_be_deleted() const {
  return _internal_has_can_be_deleted();
}
inline void PublishedFileDetails::clear_can_be_deleted() {
  can_be_deleted_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool PublishedFileDetails::_internal_can_be_deleted() const {
  return can_be_deleted_;
}
inline bool PublishedFileDetails::can_be_deleted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_be_deleted)
  return _internal_can_be_deleted();
}
inline void PublishedFileDetails::_internal_set_can_be_deleted(bool value) {
  _has_bits_[1] |= 0x00000080u;
  can_be_deleted_ = value;
}
inline void PublishedFileDetails::set_can_be_deleted(bool value) {
  _internal_set_can_be_deleted(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_be_deleted)
}

// optional bool incompatible = 32;
inline bool PublishedFileDetails::_internal_has_incompatible() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_incompatible() const {
  return _internal_has_incompatible();
}
inline void PublishedFileDetails::clear_incompatible() {
  incompatible_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool PublishedFileDetails::_internal_incompatible() const {
  return incompatible_;
}
inline bool PublishedFileDetails::incompatible() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.incompatible)
  return _internal_incompatible();
}
inline void PublishedFileDetails::_internal_set_incompatible(bool value) {
  _has_bits_[1] |= 0x00000100u;
  incompatible_ = value;
}
inline void PublishedFileDetails::set_incompatible(bool value) {
  _internal_set_incompatible(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.incompatible)
}

// optional string app_name = 33;
inline bool PublishedFileDetails::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_app_name() const {
  return _internal_has_app_name();
}
inline void PublishedFileDetails::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PublishedFileDetails::app_name() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.app_name)
}
inline std::string* PublishedFileDetails::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.app_name)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_app_name() const {
  return app_name_.Get();
}
inline void PublishedFileDetails::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000200u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_app_name() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.app_name)
}

// optional uint32 file_type = 34;
inline bool PublishedFileDetails::_internal_has_file_type() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_type() const {
  return _internal_has_file_type();
}
inline void PublishedFileDetails::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline uint32_t PublishedFileDetails::_internal_file_type() const {
  return file_type_;
}
inline uint32_t PublishedFileDetails::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_type)
  return _internal_file_type();
}
inline void PublishedFileDetails::_internal_set_file_type(uint32_t value) {
  _has_bits_[1] |= 0x00000020u;
  file_type_ = value;
}
inline void PublishedFileDetails::set_file_type(uint32_t value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_type)
}

// optional bool can_subscribe = 35;
inline bool PublishedFileDetails::_internal_has_can_subscribe() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_can_subscribe() const {
  return _internal_has_can_subscribe();
}
inline void PublishedFileDetails::clear_can_subscribe() {
  can_subscribe_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool PublishedFileDetails::_internal_can_subscribe() const {
  return can_subscribe_;
}
inline bool PublishedFileDetails::can_subscribe() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_subscribe)
  return _internal_can_subscribe();
}
inline void PublishedFileDetails::_internal_set_can_subscribe(bool value) {
  _has_bits_[1] |= 0x00000200u;
  can_subscribe_ = value;
}
inline void PublishedFileDetails::set_can_subscribe(bool value) {
  _internal_set_can_subscribe(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_subscribe)
}

// optional uint32 subscriptions = 36;
inline bool PublishedFileDetails::_internal_has_subscriptions() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_subscriptions() const {
  return _internal_has_subscriptions();
}
inline void PublishedFileDetails::clear_subscriptions() {
  subscriptions_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline uint32_t PublishedFileDetails::_internal_subscriptions() const {
  return subscriptions_;
}
inline uint32_t PublishedFileDetails::subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.subscriptions)
  return _internal_subscriptions();
}
inline void PublishedFileDetails::_internal_set_subscriptions(uint32_t value) {
  _has_bits_[1] |= 0x00000040u;
  subscriptions_ = value;
}
inline void PublishedFileDetails::set_subscriptions(uint32_t value) {
  _internal_set_subscriptions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.subscriptions)
}

// optional uint32 favorited = 37;
inline bool PublishedFileDetails::_internal_has_favorited() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_favorited() const {
  return _internal_has_favorited();
}
inline void PublishedFileDetails::clear_favorited() {
  favorited_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline uint32_t PublishedFileDetails::_internal_favorited() const {
  return favorited_;
}
inline uint32_t PublishedFileDetails::favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.favorited)
  return _internal_favorited();
}
inline void PublishedFileDetails::_internal_set_favorited(uint32_t value) {
  _has_bits_[1] |= 0x00000800u;
  favorited_ = value;
}
inline void PublishedFileDetails::set_favorited(uint32_t value) {
  _internal_set_favorited(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.favorited)
}

// optional uint32 followers = 38;
inline bool PublishedFileDetails::_internal_has_followers() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_followers() const {
  return _internal_has_followers();
}
inline void PublishedFileDetails::clear_followers() {
  followers_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline uint32_t PublishedFileDetails::_internal_followers() const {
  return followers_;
}
inline uint32_t PublishedFileDetails::followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.followers)
  return _internal_followers();
}
inline void PublishedFileDetails::_internal_set_followers(uint32_t value) {
  _has_bits_[1] |= 0x00001000u;
  followers_ = value;
}
inline void PublishedFileDetails::set_followers(uint32_t value) {
  _internal_set_followers(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.followers)
}

// optional uint32 lifetime_subscriptions = 39;
inline bool PublishedFileDetails::_internal_has_lifetime_subscriptions() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_subscriptions() const {
  return _internal_has_lifetime_subscriptions();
}
inline void PublishedFileDetails::clear_lifetime_subscriptions() {
  lifetime_subscriptions_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline uint32_t PublishedFileDetails::_internal_lifetime_subscriptions() const {
  return lifetime_subscriptions_;
}
inline uint32_t PublishedFileDetails::lifetime_subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_subscriptions)
  return _internal_lifetime_subscriptions();
}
inline void PublishedFileDetails::_internal_set_lifetime_subscriptions(uint32_t value) {
  _has_bits_[1] |= 0x00002000u;
  lifetime_subscriptions_ = value;
}
inline void PublishedFileDetails::set_lifetime_subscriptions(uint32_t value) {
  _internal_set_lifetime_subscriptions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_subscriptions)
}

// optional uint32 lifetime_favorited = 40;
inline bool PublishedFileDetails::_internal_has_lifetime_favorited() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_favorited() const {
  return _internal_has_lifetime_favorited();
}
inline void PublishedFileDetails::clear_lifetime_favorited() {
  lifetime_favorited_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline uint32_t PublishedFileDetails::_internal_lifetime_favorited() const {
  return lifetime_favorited_;
}
inline uint32_t PublishedFileDetails::lifetime_favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_favorited)
  return _internal_lifetime_favorited();
}
inline void PublishedFileDetails::_internal_set_lifetime_favorited(uint32_t value) {
  _has_bits_[1] |= 0x00004000u;
  lifetime_favorited_ = value;
}
inline void PublishedFileDetails::set_lifetime_favorited(uint32_t value) {
  _internal_set_lifetime_favorited(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_favorited)
}

// optional uint32 lifetime_followers = 41;
inline bool PublishedFileDetails::_internal_has_lifetime_followers() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_followers() const {
  return _internal_has_lifetime_followers();
}
inline void PublishedFileDetails::clear_lifetime_followers() {
  lifetime_followers_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline uint32_t PublishedFileDetails::_internal_lifetime_followers() const {
  return lifetime_followers_;
}
inline uint32_t PublishedFileDetails::lifetime_followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_followers)
  return _internal_lifetime_followers();
}
inline void PublishedFileDetails::_internal_set_lifetime_followers(uint32_t value) {
  _has_bits_[1] |= 0x00008000u;
  lifetime_followers_ = value;
}
inline void PublishedFileDetails::set_lifetime_followers(uint32_t value) {
  _internal_set_lifetime_followers(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_followers)
}

// optional uint64 lifetime_playtime = 62;
inline bool PublishedFileDetails::_internal_has_lifetime_playtime() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_playtime() const {
  return _internal_has_lifetime_playtime();
}
inline void PublishedFileDetails::clear_lifetime_playtime() {
  lifetime_playtime_ = uint64_t{0u};
  _has_bits_[1] &= ~0x00800000u;
}
inline uint64_t PublishedFileDetails::_internal_lifetime_playtime() const {
  return lifetime_playtime_;
}
inline uint64_t PublishedFileDetails::lifetime_playtime() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_playtime)
  return _internal_lifetime_playtime();
}
inline void PublishedFileDetails::_internal_set_lifetime_playtime(uint64_t value) {
  _has_bits_[1] |= 0x00800000u;
  lifetime_playtime_ = value;
}
inline void PublishedFileDetails::set_lifetime_playtime(uint64_t value) {
  _internal_set_lifetime_playtime(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_playtime)
}

// optional uint64 lifetime_playtime_sessions = 63;
inline bool PublishedFileDetails::_internal_has_lifetime_playtime_sessions() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_playtime_sessions() const {
  return _internal_has_lifetime_playtime_sessions();
}
inline void PublishedFileDetails::clear_lifetime_playtime_sessions() {
  lifetime_playtime_sessions_ = uint64_t{0u};
  _has_bits_[1] &= ~0x01000000u;
}
inline uint64_t PublishedFileDetails::_internal_lifetime_playtime_sessions() const {
  return lifetime_playtime_sessions_;
}
inline uint64_t PublishedFileDetails::lifetime_playtime_sessions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_playtime_sessions)
  return _internal_lifetime_playtime_sessions();
}
inline void PublishedFileDetails::_internal_set_lifetime_playtime_sessions(uint64_t value) {
  _has_bits_[1] |= 0x01000000u;
  lifetime_playtime_sessions_ = value;
}
inline void PublishedFileDetails::set_lifetime_playtime_sessions(uint64_t value) {
  _internal_set_lifetime_playtime_sessions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_playtime_sessions)
}

// optional uint32 views = 42;
inline bool PublishedFileDetails::_internal_has_views() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_views() const {
  return _internal_has_views();
}
inline void PublishedFileDetails::clear_views() {
  views_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline uint32_t PublishedFileDetails::_internal_views() const {
  return views_;
}
inline uint32_t PublishedFileDetails::views() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.views)
  return _internal_views();
}
inline void PublishedFileDetails::_internal_set_views(uint32_t value) {
  _has_bits_[1] |= 0x00010000u;
  views_ = value;
}
inline void PublishedFileDetails::set_views(uint32_t value) {
  _internal_set_views(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.views)
}

// optional uint32 image_width = 43;
inline bool PublishedFileDetails::_internal_has_image_width() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_width() const {
  return _internal_has_image_width();
}
inline void PublishedFileDetails::clear_image_width() {
  image_width_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline uint32_t PublishedFileDetails::_internal_image_width() const {
  return image_width_;
}
inline uint32_t PublishedFileDetails::image_width() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_width)
  return _internal_image_width();
}
inline void PublishedFileDetails::_internal_set_image_width(uint32_t value) {
  _has_bits_[1] |= 0x00020000u;
  image_width_ = value;
}
inline void PublishedFileDetails::set_image_width(uint32_t value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_width)
}

// optional uint32 image_height = 44;
inline bool PublishedFileDetails::_internal_has_image_height() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_height() const {
  return _internal_has_image_height();
}
inline void PublishedFileDetails::clear_image_height() {
  image_height_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline uint32_t PublishedFileDetails::_internal_image_height() const {
  return image_height_;
}
inline uint32_t PublishedFileDetails::image_height() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_height)
  return _internal_image_height();
}
inline void PublishedFileDetails::_internal_set_image_height(uint32_t value) {
  _has_bits_[1] |= 0x00040000u;
  image_height_ = value;
}
inline void PublishedFileDetails::set_image_height(uint32_t value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_height)
}

// optional string image_url = 45;
inline bool PublishedFileDetails::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_url() const {
  return _internal_has_image_url();
}
inline void PublishedFileDetails::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& PublishedFileDetails::image_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_url)
  return _internal_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_url)
}
inline std::string* PublishedFileDetails::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.image_url)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_image_url() const {
  return image_url_.Get();
}
inline void PublishedFileDetails::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000400u;
  return image_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_image_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = image_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.image_url)
}

// optional bool spoiler_tag = 46;
inline bool PublishedFileDetails::_internal_has_spoiler_tag() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_spoiler_tag() const {
  return _internal_has_spoiler_tag();
}
inline void PublishedFileDetails::clear_spoiler_tag() {
  spoiler_tag_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool PublishedFileDetails::_internal_spoiler_tag() const {
  return spoiler_tag_;
}
inline bool PublishedFileDetails::spoiler_tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.spoiler_tag)
  return _internal_spoiler_tag();
}
inline void PublishedFileDetails::_internal_set_spoiler_tag(bool value) {
  _has_bits_[1] |= 0x00000400u;
  spoiler_tag_ = value;
}
inline void PublishedFileDetails::set_spoiler_tag(bool value) {
  _internal_set_spoiler_tag(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.spoiler_tag)
}

// optional uint32 shortcutid = 47;
inline bool PublishedFileDetails::_internal_has_shortcutid() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_shortcutid() const {
  return _internal_has_shortcutid();
}
inline void PublishedFileDetails::clear_shortcutid() {
  shortcutid_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline uint32_t PublishedFileDetails::_internal_shortcutid() const {
  return shortcutid_;
}
inline uint32_t PublishedFileDetails::shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutid)
  return _internal_shortcutid();
}
inline void PublishedFileDetails::_internal_set_shortcutid(uint32_t value) {
  _has_bits_[1] |= 0x00080000u;
  shortcutid_ = value;
}
inline void PublishedFileDetails::set_shortcutid(uint32_t value) {
  _internal_set_shortcutid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutid)
}

// optional string shortcutname = 48;
inline bool PublishedFileDetails::_internal_has_shortcutname() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_shortcutname() const {
  return _internal_has_shortcutname();
}
inline void PublishedFileDetails::clear_shortcutname() {
  shortcutname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& PublishedFileDetails::shortcutname() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutname)
  return _internal_shortcutname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_shortcutname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutname)
}
inline std::string* PublishedFileDetails::mutable_shortcutname() {
  std::string* _s = _internal_mutable_shortcutname();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.shortcutname)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_shortcutname() const {
  return shortcutname_.Get();
}
inline void PublishedFileDetails::_internal_set_shortcutname(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_shortcutname() {
  _has_bits_[0] |= 0x00000800u;
  return shortcutname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_shortcutname() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.shortcutname)
  if (!_internal_has_shortcutname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = shortcutname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shortcutname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shortcutname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_shortcutname(std::string* shortcutname) {
  if (shortcutname != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  shortcutname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortcutname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (shortcutname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    shortcutname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.shortcutname)
}

// optional uint32 num_children = 49;
inline bool PublishedFileDetails::_internal_has_num_children() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_children() const {
  return _internal_has_num_children();
}
inline void PublishedFileDetails::clear_num_children() {
  num_children_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline uint32_t PublishedFileDetails::_internal_num_children() const {
  return num_children_;
}
inline uint32_t PublishedFileDetails::num_children() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_children)
  return _internal_num_children();
}
inline void PublishedFileDetails::_internal_set_num_children(uint32_t value) {
  _has_bits_[1] |= 0x00100000u;
  num_children_ = value;
}
inline void PublishedFileDetails::set_num_children(uint32_t value) {
  _internal_set_num_children(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_children)
}

// optional uint32 num_reports = 50;
inline bool PublishedFileDetails::_internal_has_num_reports() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_reports() const {
  return _internal_has_num_reports();
}
inline void PublishedFileDetails::clear_num_reports() {
  num_reports_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline uint32_t PublishedFileDetails::_internal_num_reports() const {
  return num_reports_;
}
inline uint32_t PublishedFileDetails::num_reports() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_reports)
  return _internal_num_reports();
}
inline void PublishedFileDetails::_internal_set_num_reports(uint32_t value) {
  _has_bits_[1] |= 0x00200000u;
  num_reports_ = value;
}
inline void PublishedFileDetails::set_num_reports(uint32_t value) {
  _internal_set_num_reports(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_reports)
}

// repeated .PublishedFileDetails.Preview previews = 51;
inline int PublishedFileDetails::_internal_previews_size() const {
  return previews_.size();
}
inline int PublishedFileDetails::previews_size() const {
  return _internal_previews_size();
}
inline void PublishedFileDetails::clear_previews() {
  previews_.Clear();
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.previews)
  return previews_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >*
PublishedFileDetails::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.previews)
  return &previews_;
}
inline const ::PublishedFileDetails_Preview& PublishedFileDetails::_internal_previews(int index) const {
  return previews_.Get(index);
}
inline const ::PublishedFileDetails_Preview& PublishedFileDetails::previews(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.previews)
  return _internal_previews(index);
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::_internal_add_previews() {
  return previews_.Add();
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::add_previews() {
  ::PublishedFileDetails_Preview* _add = _internal_add_previews();
  // @@protoc_insertion_point(field_add:PublishedFileDetails.previews)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >&
PublishedFileDetails::previews() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.previews)
  return previews_;
}

// repeated .PublishedFileDetails.Tag tags = 52;
inline int PublishedFileDetails::_internal_tags_size() const {
  return tags_.size();
}
inline int PublishedFileDetails::tags_size() const {
  return _internal_tags_size();
}
inline void PublishedFileDetails::clear_tags() {
  tags_.Clear();
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >*
PublishedFileDetails::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.tags)
  return &tags_;
}
inline const ::PublishedFileDetails_Tag& PublishedFileDetails::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::PublishedFileDetails_Tag& PublishedFileDetails::tags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.tags)
  return _internal_tags(index);
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::_internal_add_tags() {
  return tags_.Add();
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::add_tags() {
  ::PublishedFileDetails_Tag* _add = _internal_add_tags();
  // @@protoc_insertion_point(field_add:PublishedFileDetails.tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >&
PublishedFileDetails::tags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.tags)
  return tags_;
}

// repeated .PublishedFileDetails.Child children = 53;
inline int PublishedFileDetails::_internal_children_size() const {
  return children_.size();
}
inline int PublishedFileDetails::children_size() const {
  return _internal_children_size();
}
inline void PublishedFileDetails::clear_children() {
  children_.Clear();
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >*
PublishedFileDetails::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.children)
  return &children_;
}
inline const ::PublishedFileDetails_Child& PublishedFileDetails::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::PublishedFileDetails_Child& PublishedFileDetails::children(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.children)
  return _internal_children(index);
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::_internal_add_children() {
  return children_.Add();
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::add_children() {
  ::PublishedFileDetails_Child* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:PublishedFileDetails.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >&
PublishedFileDetails::children() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.children)
  return children_;
}

// repeated .PublishedFileDetails.KVTag kvtags = 54;
inline int PublishedFileDetails::_internal_kvtags_size() const {
  return kvtags_.size();
}
inline int PublishedFileDetails::kvtags_size() const {
  return _internal_kvtags_size();
}
inline void PublishedFileDetails::clear_kvtags() {
  kvtags_.Clear();
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::mutable_kvtags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.kvtags)
  return kvtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
PublishedFileDetails::mutable_kvtags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.kvtags)
  return &kvtags_;
}
inline const ::PublishedFileDetails_KVTag& PublishedFileDetails::_internal_kvtags(int index) const {
  return kvtags_.Get(index);
}
inline const ::PublishedFileDetails_KVTag& PublishedFileDetails::kvtags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.kvtags)
  return _internal_kvtags(index);
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::_internal_add_kvtags() {
  return kvtags_.Add();
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::add_kvtags() {
  ::PublishedFileDetails_KVTag* _add = _internal_add_kvtags();
  // @@protoc_insertion_point(field_add:PublishedFileDetails.kvtags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
PublishedFileDetails::kvtags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.kvtags)
  return kvtags_;
}

// optional .PublishedFileDetails.VoteData vote_data = 55;
inline bool PublishedFileDetails::_internal_has_vote_data() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || vote_data_ != nullptr);
  return value;
}
inline bool PublishedFileDetails::has_vote_data() const {
  return _internal_has_vote_data();
}
inline void PublishedFileDetails::clear_vote_data() {
  if (vote_data_ != nullptr) vote_data_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::PublishedFileDetails_VoteData& PublishedFileDetails::_internal_vote_data() const {
  const ::PublishedFileDetails_VoteData* p = vote_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PublishedFileDetails_VoteData&>(
      ::_PublishedFileDetails_VoteData_default_instance_);
}
inline const ::PublishedFileDetails_VoteData& PublishedFileDetails::vote_data() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.vote_data)
  return _internal_vote_data();
}
inline void PublishedFileDetails::unsafe_arena_set_allocated_vote_data(
    ::PublishedFileDetails_VoteData* vote_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_data_);
  }
  vote_data_ = vote_data;
  if (vote_data) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishedFileDetails.vote_data)
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::release_vote_data() {
  _has_bits_[0] &= ~0x00002000u;
  ::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::unsafe_arena_release_vote_data() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.vote_data)
  _has_bits_[0] &= ~0x00002000u;
  ::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = nullptr;
  return temp;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::_internal_mutable_vote_data() {
  _has_bits_[0] |= 0x00002000u;
  if (vote_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PublishedFileDetails_VoteData>(GetArenaForAllocation());
    vote_data_ = p;
  }
  return vote_data_;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::mutable_vote_data() {
  ::PublishedFileDetails_VoteData* _msg = _internal_mutable_vote_data();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.vote_data)
  return _msg;
}
inline void PublishedFileDetails::set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vote_data_;
  }
  if (vote_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PublishedFileDetails_VoteData>::GetOwningArena(vote_data);
    if (message_arena != submessage_arena) {
      vote_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  vote_data_ = vote_data;
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.vote_data)
}

// optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
inline bool PublishedFileDetails::_internal_has_playtime_stats() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || playtime_stats_ != nullptr);
  return value;
}
inline bool PublishedFileDetails::has_playtime_stats() const {
  return _internal_has_playtime_stats();
}
inline void PublishedFileDetails::clear_playtime_stats() {
  if (playtime_stats_ != nullptr) playtime_stats_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::PublishedFileDetails_PlaytimeStats& PublishedFileDetails::_internal_playtime_stats() const {
  const ::PublishedFileDetails_PlaytimeStats* p = playtime_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::PublishedFileDetails_PlaytimeStats&>(
      ::_PublishedFileDetails_PlaytimeStats_default_instance_);
}
inline const ::PublishedFileDetails_PlaytimeStats& PublishedFileDetails::playtime_stats() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.playtime_stats)
  return _internal_playtime_stats();
}
inline void PublishedFileDetails::unsafe_arena_set_allocated_playtime_stats(
    ::PublishedFileDetails_PlaytimeStats* playtime_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playtime_stats_);
  }
  playtime_stats_ = playtime_stats;
  if (playtime_stats) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishedFileDetails.playtime_stats)
}
inline ::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::release_playtime_stats() {
  _has_bits_[0] &= ~0x00008000u;
  ::PublishedFileDetails_PlaytimeStats* temp = playtime_stats_;
  playtime_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::unsafe_arena_release_playtime_stats() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.playtime_stats)
  _has_bits_[0] &= ~0x00008000u;
  ::PublishedFileDetails_PlaytimeStats* temp = playtime_stats_;
  playtime_stats_ = nullptr;
  return temp;
}
inline ::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::_internal_mutable_playtime_stats() {
  _has_bits_[0] |= 0x00008000u;
  if (playtime_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::PublishedFileDetails_PlaytimeStats>(GetArenaForAllocation());
    playtime_stats_ = p;
  }
  return playtime_stats_;
}
inline ::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::mutable_playtime_stats() {
  ::PublishedFileDetails_PlaytimeStats* _msg = _internal_mutable_playtime_stats();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.playtime_stats)
  return _msg;
}
inline void PublishedFileDetails::set_allocated_playtime_stats(::PublishedFileDetails_PlaytimeStats* playtime_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete playtime_stats_;
  }
  if (playtime_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PublishedFileDetails_PlaytimeStats>::GetOwningArena(playtime_stats);
    if (message_arena != submessage_arena) {
      playtime_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playtime_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  playtime_stats_ = playtime_stats;
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.playtime_stats)
}

// optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
inline bool PublishedFileDetails::_internal_has_time_subscribed() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_subscribed() const {
  return _internal_has_time_subscribed();
}
inline void PublishedFileDetails::clear_time_subscribed() {
  time_subscribed_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline uint32_t PublishedFileDetails::_internal_time_subscribed() const {
  return time_subscribed_;
}
inline uint32_t PublishedFileDetails::time_subscribed() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_subscribed)
  return _internal_time_subscribed();
}
inline void PublishedFileDetails::_internal_set_time_subscribed(uint32_t value) {
  _has_bits_[1] |= 0x00400000u;
  time_subscribed_ = value;
}
inline void PublishedFileDetails::set_time_subscribed(uint32_t value) {
  _internal_set_time_subscribed(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_subscribed)
}

// optional .PublishedFileDetails.ForSaleData for_sale_data = 57 [(.description) = "Pricing information, if applicable."];
inline bool PublishedFileDetails::_internal_has_for_sale_data() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || for_sale_data_ != nullptr);
  return value;
}
inline bool PublishedFileDetails::has_for_sale_data() const {
  return _internal_has_for_sale_data();
}
inline void PublishedFileDetails::clear_for_sale_data() {
  if (for_sale_data_ != nullptr) for_sale_data_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::PublishedFileDetails_ForSaleData& PublishedFileDetails::_internal_for_sale_data() const {
  const ::PublishedFileDetails_ForSaleData* p = for_sale_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PublishedFileDetails_ForSaleData&>(
      ::_PublishedFileDetails_ForSaleData_default_instance_);
}
inline const ::PublishedFileDetails_ForSaleData& PublishedFileDetails::for_sale_data() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.for_sale_data)
  return _internal_for_sale_data();
}
inline void PublishedFileDetails::unsafe_arena_set_allocated_for_sale_data(
    ::PublishedFileDetails_ForSaleData* for_sale_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(for_sale_data_);
  }
  for_sale_data_ = for_sale_data;
  if (for_sale_data) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishedFileDetails.for_sale_data)
}
inline ::PublishedFileDetails_ForSaleData* PublishedFileDetails::release_for_sale_data() {
  _has_bits_[0] &= ~0x00004000u;
  ::PublishedFileDetails_ForSaleData* temp = for_sale_data_;
  for_sale_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PublishedFileDetails_ForSaleData* PublishedFileDetails::unsafe_arena_release_for_sale_data() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.for_sale_data)
  _has_bits_[0] &= ~0x00004000u;
  ::PublishedFileDetails_ForSaleData* temp = for_sale_data_;
  for_sale_data_ = nullptr;
  return temp;
}
inline ::PublishedFileDetails_ForSaleData* PublishedFileDetails::_internal_mutable_for_sale_data() {
  _has_bits_[0] |= 0x00004000u;
  if (for_sale_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PublishedFileDetails_ForSaleData>(GetArenaForAllocation());
    for_sale_data_ = p;
  }
  return for_sale_data_;
}
inline ::PublishedFileDetails_ForSaleData* PublishedFileDetails::mutable_for_sale_data() {
  ::PublishedFileDetails_ForSaleData* _msg = _internal_mutable_for_sale_data();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.for_sale_data)
  return _msg;
}
inline void PublishedFileDetails::set_allocated_for_sale_data(::PublishedFileDetails_ForSaleData* for_sale_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete for_sale_data_;
  }
  if (for_sale_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PublishedFileDetails_ForSaleData>::GetOwningArena(for_sale_data);
    if (message_arena != submessage_arena) {
      for_sale_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, for_sale_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  for_sale_data_ = for_sale_data;
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.for_sale_data)
}

// optional string metadata = 58 [(.description) = "Metadata associated with the item"];
inline bool PublishedFileDetails::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_metadata() const {
  return _internal_has_metadata();
}
inline void PublishedFileDetails::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& PublishedFileDetails::metadata() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishedFileDetails::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublishedFileDetails.metadata)
}
inline std::string* PublishedFileDetails::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.metadata)
  return _s;
}
inline const std::string& PublishedFileDetails::_internal_metadata() const {
  return metadata_.Get();
}
inline void PublishedFileDetails::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00001000u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishedFileDetails::release_metadata() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishedFileDetails::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.metadata)
}

// optional int32 language = 61 [default = 0, (.description) = "The language of the title and description."];
inline bool PublishedFileDetails::_internal_has_language() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_language() const {
  return _internal_has_language();
}
inline void PublishedFileDetails::clear_language() {
  language_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline int32_t PublishedFileDetails::_internal_language() const {
  return language_;
}
inline int32_t PublishedFileDetails::language() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.language)
  return _internal_language();
}
inline void PublishedFileDetails::_internal_set_language(int32_t value) {
  _has_bits_[1] |= 0x02000000u;
  language_ = value;
}
inline void PublishedFileDetails::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.language)
}

// optional bool maybe_inappropriate_sex = 65;
inline bool PublishedFileDetails::_internal_has_maybe_inappropriate_sex() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_maybe_inappropriate_sex() const {
  return _internal_has_maybe_inappropriate_sex();
}
inline void PublishedFileDetails::clear_maybe_inappropriate_sex() {
  maybe_inappropriate_sex_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool PublishedFileDetails::_internal_maybe_inappropriate_sex() const {
  return maybe_inappropriate_sex_;
}
inline bool PublishedFileDetails::maybe_inappropriate_sex() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.maybe_inappropriate_sex)
  return _internal_maybe_inappropriate_sex();
}
inline void PublishedFileDetails::_internal_set_maybe_inappropriate_sex(bool value) {
  _has_bits_[1] |= 0x04000000u;
  maybe_inappropriate_sex_ = value;
}
inline void PublishedFileDetails::set_maybe_inappropriate_sex(bool value) {
  _internal_set_maybe_inappropriate_sex(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.maybe_inappropriate_sex)
}

// optional bool maybe_inappropriate_violence = 66;
inline bool PublishedFileDetails::_internal_has_maybe_inappropriate_violence() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_maybe_inappropriate_violence() const {
  return _internal_has_maybe_inappropriate_violence();
}
inline void PublishedFileDetails::clear_maybe_inappropriate_violence() {
  maybe_inappropriate_violence_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool PublishedFileDetails::_internal_maybe_inappropriate_violence() const {
  return maybe_inappropriate_violence_;
}
inline bool PublishedFileDetails::maybe_inappropriate_violence() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.maybe_inappropriate_violence)
  return _internal_maybe_inappropriate_violence();
}
inline void PublishedFileDetails::_internal_set_maybe_inappropriate_violence(bool value) {
  _has_bits_[1] |= 0x08000000u;
  maybe_inappropriate_violence_ = value;
}
inline void PublishedFileDetails::set_maybe_inappropriate_violence(bool value) {
  _internal_set_maybe_inappropriate_violence(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.maybe_inappropriate_violence)
}

// repeated .EContentDescriptorID content_descriptorids = 72;
inline int PublishedFileDetails::_internal_content_descriptorids_size() const {
  return content_descriptorids_.size();
}
inline int PublishedFileDetails::content_descriptorids_size() const {
  return _internal_content_descriptorids_size();
}
inline void PublishedFileDetails::clear_content_descriptorids() {
  content_descriptorids_.Clear();
}
inline ::EContentDescriptorID PublishedFileDetails::_internal_content_descriptorids(int index) const {
  return static_cast< ::EContentDescriptorID >(content_descriptorids_.Get(index));
}
inline ::EContentDescriptorID PublishedFileDetails::content_descriptorids(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.content_descriptorids)
  return _internal_content_descriptorids(index);
}
inline void PublishedFileDetails::set_content_descriptorids(int index, ::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  content_descriptorids_.Set(index, value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.content_descriptorids)
}
inline void PublishedFileDetails::_internal_add_content_descriptorids(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  content_descriptorids_.Add(value);
}
inline void PublishedFileDetails::add_content_descriptorids(::EContentDescriptorID value) {
  _internal_add_content_descriptorids(value);
  // @@protoc_insertion_point(field_add:PublishedFileDetails.content_descriptorids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PublishedFileDetails::content_descriptorids() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.content_descriptorids)
  return content_descriptorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PublishedFileDetails::_internal_mutable_content_descriptorids() {
  return &content_descriptorids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PublishedFileDetails::mutable_content_descriptorids() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.content_descriptorids)
  return _internal_mutable_content_descriptorids();
}

// optional uint64 revision_change_number = 67 [(.description) = "The change number for the specified revision."];
inline bool PublishedFileDetails::_internal_has_revision_change_number() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_revision_change_number() const {
  return _internal_has_revision_change_number();
}
inline void PublishedFileDetails::clear_revision_change_number() {
  revision_change_number_ = uint64_t{0u};
  _has_bits_[1] &= ~0x10000000u;
}
inline uint64_t PublishedFileDetails::_internal_revision_change_number() const {
  return revision_change_number_;
}
inline uint64_t PublishedFileDetails::revision_change_number() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.revision_change_number)
  return _internal_revision_change_number();
}
inline void PublishedFileDetails::_internal_set_revision_change_number(uint64_t value) {
  _has_bits_[1] |= 0x10000000u;
  revision_change_number_ = value;
}
inline void PublishedFileDetails::set_revision_change_number(uint64_t value) {
  _internal_set_revision_change_number(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.revision_change_number)
}

// optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default, (.description) = "The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller."];
inline bool PublishedFileDetails::_internal_has_revision() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_revision() const {
  return _internal_has_revision();
}
inline void PublishedFileDetails::clear_revision() {
  revision_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::EPublishedFileRevision PublishedFileDetails::_internal_revision() const {
  return static_cast< ::EPublishedFileRevision >(revision_);
}
inline ::EPublishedFileRevision PublishedFileDetails::revision() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.revision)
  return _internal_revision();
}
inline void PublishedFileDetails::_internal_set_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[1] |= 0x20000000u;
  revision_ = value;
}
inline void PublishedFileDetails::set_revision(::EPublishedFileRevision value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.revision)
}

// repeated .EPublishedFileRevision available_revisions = 69 [(.description) = "Available revisions"];
inline int PublishedFileDetails::_internal_available_revisions_size() const {
  return available_revisions_.size();
}
inline int PublishedFileDetails::available_revisions_size() const {
  return _internal_available_revisions_size();
}
inline void PublishedFileDetails::clear_available_revisions() {
  available_revisions_.Clear();
}
inline ::EPublishedFileRevision PublishedFileDetails::_internal_available_revisions(int index) const {
  return static_cast< ::EPublishedFileRevision >(available_revisions_.Get(index));
}
inline ::EPublishedFileRevision PublishedFileDetails::available_revisions(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.available_revisions)
  return _internal_available_revisions(index);
}
inline void PublishedFileDetails::set_available_revisions(int index, ::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  available_revisions_.Set(index, value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.available_revisions)
}
inline void PublishedFileDetails::_internal_add_available_revisions(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  available_revisions_.Add(value);
}
inline void PublishedFileDetails::add_available_revisions(::EPublishedFileRevision value) {
  _internal_add_available_revisions(value);
  // @@protoc_insertion_point(field_add:PublishedFileDetails.available_revisions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PublishedFileDetails::available_revisions() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.available_revisions)
  return available_revisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PublishedFileDetails::_internal_mutable_available_revisions() {
  return &available_revisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PublishedFileDetails::mutable_available_revisions() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.available_revisions)
  return _internal_mutable_available_revisions();
}

// repeated .PublishedFileDetails.Reaction reactions = 70 [(.description) = "Reactions to this item"];
inline int PublishedFileDetails::_internal_reactions_size() const {
  return reactions_.size();
}
inline int PublishedFileDetails::reactions_size() const {
  return _internal_reactions_size();
}
inline void PublishedFileDetails::clear_reactions() {
  reactions_.Clear();
}
inline ::PublishedFileDetails_Reaction* PublishedFileDetails::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.reactions)
  return reactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Reaction >*
PublishedFileDetails::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.reactions)
  return &reactions_;
}
inline const ::PublishedFileDetails_Reaction& PublishedFileDetails::_internal_reactions(int index) const {
  return reactions_.Get(index);
}
inline const ::PublishedFileDetails_Reaction& PublishedFileDetails::reactions(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.reactions)
  return _internal_reactions(index);
}
inline ::PublishedFileDetails_Reaction* PublishedFileDetails::_internal_add_reactions() {
  return reactions_.Add();
}
inline ::PublishedFileDetails_Reaction* PublishedFileDetails::add_reactions() {
  ::PublishedFileDetails_Reaction* _add = _internal_add_reactions();
  // @@protoc_insertion_point(field_add:PublishedFileDetails.reactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Reaction >&
PublishedFileDetails::reactions() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.reactions)
  return reactions_;
}

// optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
inline bool PublishedFileDetails::_internal_has_ban_text_check_result() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_ban_text_check_result() const {
  return _internal_has_ban_text_check_result();
}
inline void PublishedFileDetails::clear_ban_text_check_result() {
  ban_text_check_result_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::EBanContentCheckResult PublishedFileDetails::_internal_ban_text_check_result() const {
  return static_cast< ::EBanContentCheckResult >(ban_text_check_result_);
}
inline ::EBanContentCheckResult PublishedFileDetails::ban_text_check_result() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ban_text_check_result)
  return _internal_ban_text_check_result();
}
inline void PublishedFileDetails::_internal_set_ban_text_check_result(::EBanContentCheckResult value) {
  assert(::EBanContentCheckResult_IsValid(value));
  _has_bits_[1] |= 0x40000000u;
  ban_text_check_result_ = value;
}
inline void PublishedFileDetails::set_ban_text_check_result(::EBanContentCheckResult value) {
  _internal_set_ban_text_check_result(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ban_text_check_result)
}

// optional float search_score = 73 [(.description) = "Search score, admin only"];
inline bool PublishedFileDetails::_internal_has_search_score() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_search_score() const {
  return _internal_has_search_score();
}
inline void PublishedFileDetails::clear_search_score() {
  search_score_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float PublishedFileDetails::_internal_search_score() const {
  return search_score_;
}
inline float PublishedFileDetails::search_score() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.search_score)
  return _internal_search_score();
}
inline void PublishedFileDetails::_internal_set_search_score(float value) {
  _has_bits_[1] |= 0x80000000u;
  search_score_ = value;
}
inline void PublishedFileDetails::set_search_score(float value) {
  _internal_set_search_score(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.search_score)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Response

// repeated .PublishedFileDetails publishedfiledetails = 1;
inline int CPublishedFile_GetDetails_Response::_internal_publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline int CPublishedFile_GetDetails_Response::publishedfiledetails_size() const {
  return _internal_publishedfiledetails_size();
}
inline void CPublishedFile_GetDetails_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetDetails_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
inline const ::PublishedFileDetails& CPublishedFile_GetDetails_Response::_internal_publishedfiledetails(int index) const {
  return publishedfiledetails_.Get(index);
}
inline const ::PublishedFileDetails& CPublishedFile_GetDetails_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return _internal_publishedfiledetails(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::_internal_add_publishedfiledetails() {
  return publishedfiledetails_.Add();
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::add_publishedfiledetails() {
  ::PublishedFileDetails* _add = _internal_add_publishedfiledetails();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetDetails_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemInfo_Request_WorkshopItem

// optional fixed64 published_file_id = 1;
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_GetItemInfo_Request_WorkshopItem::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.WorkshopItem.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Request.WorkshopItem.published_file_id)
}

// optional uint32 time_updated = 2;
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_time_updated() const {
  return time_updated_;
}
inline uint32_t CPublishedFile_GetItemInfo_Request_WorkshopItem::time_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.WorkshopItem.time_updated)
  return _internal_time_updated();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_set_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_updated_ = value;
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_time_updated(uint32_t value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Request.WorkshopItem.time_updated)
}

// optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Request_WorkshopItem::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EPublishedFileRevision CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_GetItemInfo_Request_WorkshopItem::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.WorkshopItem.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  desired_revision_ = value;
}
inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Request.WorkshopItem.desired_revision)
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemInfo_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_GetItemInfo_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetItemInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetItemInfo_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetItemInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetItemInfo_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_GetItemInfo_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Request.appid)
}

// optional uint32 last_time_updated = 2;
inline bool CPublishedFile_GetItemInfo_Request::_internal_has_last_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Request::has_last_time_updated() const {
  return _internal_has_last_time_updated();
}
inline void CPublishedFile_GetItemInfo_Request::clear_last_time_updated() {
  last_time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetItemInfo_Request::_internal_last_time_updated() const {
  return last_time_updated_;
}
inline uint32_t CPublishedFile_GetItemInfo_Request::last_time_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.last_time_updated)
  return _internal_last_time_updated();
}
inline void CPublishedFile_GetItemInfo_Request::_internal_set_last_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_time_updated_ = value;
}
inline void CPublishedFile_GetItemInfo_Request::set_last_time_updated(uint32_t value) {
  _internal_set_last_time_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Request.last_time_updated)
}

// repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
inline int CPublishedFile_GetItemInfo_Request::_internal_workshop_items_size() const {
  return workshop_items_.size();
}
inline int CPublishedFile_GetItemInfo_Request::workshop_items_size() const {
  return _internal_workshop_items_size();
}
inline void CPublishedFile_GetItemInfo_Request::clear_workshop_items() {
  workshop_items_.Clear();
}
inline ::CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request::mutable_workshop_items(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >*
CPublishedFile_GetItemInfo_Request::mutable_workshop_items() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetItemInfo_Request.workshop_items)
  return &workshop_items_;
}
inline const ::CPublishedFile_GetItemInfo_Request_WorkshopItem& CPublishedFile_GetItemInfo_Request::_internal_workshop_items(int index) const {
  return workshop_items_.Get(index);
}
inline const ::CPublishedFile_GetItemInfo_Request_WorkshopItem& CPublishedFile_GetItemInfo_Request::workshop_items(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Request.workshop_items)
  return _internal_workshop_items(index);
}
inline ::CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request::_internal_add_workshop_items() {
  return workshop_items_.Add();
}
inline ::CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request::add_workshop_items() {
  ::CPublishedFile_GetItemInfo_Request_WorkshopItem* _add = _internal_add_workshop_items();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetItemInfo_Request.workshop_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >&
CPublishedFile_GetItemInfo_Request::workshop_items() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemInfo_Response_WorkshopItemInfo

// optional fixed64 published_file_id = 1;
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.published_file_id)
}

// optional uint32 time_updated = 2;
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_time_updated() const {
  return time_updated_;
}
inline uint32_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::time_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.time_updated)
  return _internal_time_updated();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_set_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_updated_ = value;
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_time_updated(uint32_t value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.time_updated)
}

// optional fixed64 manifest_id = 3;
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_has_manifest_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_manifest_id() const {
  return _internal_has_manifest_id();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_manifest_id() {
  manifest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_manifest_id() const {
  return manifest_id_;
}
inline uint64_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::manifest_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.manifest_id)
  return _internal_manifest_id();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_set_manifest_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  manifest_id_ = value;
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_manifest_id(uint64_t value) {
  _internal_set_manifest_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.manifest_id)
}

// optional uint32 flags = 4;
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_flags() const {
  return _internal_has_flags();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_flags() const {
  return flags_;
}
inline uint32_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::flags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.flags)
  return _internal_flags();
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.flags)
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemInfo_Response

// optional uint32 update_time = 1;
inline bool CPublishedFile_GetItemInfo_Response::_internal_has_update_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemInfo_Response::has_update_time() const {
  return _internal_has_update_time();
}
inline void CPublishedFile_GetItemInfo_Response::clear_update_time() {
  update_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetItemInfo_Response::_internal_update_time() const {
  return update_time_;
}
inline uint32_t CPublishedFile_GetItemInfo_Response::update_time() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.update_time)
  return _internal_update_time();
}
inline void CPublishedFile_GetItemInfo_Response::_internal_set_update_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  update_time_ = value;
}
inline void CPublishedFile_GetItemInfo_Response::set_update_time(uint32_t value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.update_time)
}

// repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
inline int CPublishedFile_GetItemInfo_Response::_internal_workshop_items_size() const {
  return workshop_items_.size();
}
inline int CPublishedFile_GetItemInfo_Response::workshop_items_size() const {
  return _internal_workshop_items_size();
}
inline void CPublishedFile_GetItemInfo_Response::clear_workshop_items() {
  workshop_items_.Clear();
}
inline ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response::mutable_workshop_items(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >*
CPublishedFile_GetItemInfo_Response::mutable_workshop_items() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetItemInfo_Response.workshop_items)
  return &workshop_items_;
}
inline const ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& CPublishedFile_GetItemInfo_Response::_internal_workshop_items(int index) const {
  return workshop_items_.Get(index);
}
inline const ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& CPublishedFile_GetItemInfo_Response::workshop_items(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.workshop_items)
  return _internal_workshop_items(index);
}
inline ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response::_internal_add_workshop_items() {
  return workshop_items_.Add();
}
inline ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response::add_workshop_items() {
  ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* _add = _internal_add_workshop_items();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetItemInfo_Response.workshop_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >&
CPublishedFile_GetItemInfo_Response::workshop_items() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_;
}

// repeated fixed64 private_items = 3;
inline int CPublishedFile_GetItemInfo_Response::_internal_private_items_size() const {
  return private_items_.size();
}
inline int CPublishedFile_GetItemInfo_Response::private_items_size() const {
  return _internal_private_items_size();
}
inline void CPublishedFile_GetItemInfo_Response::clear_private_items() {
  private_items_.Clear();
}
inline uint64_t CPublishedFile_GetItemInfo_Response::_internal_private_items(int index) const {
  return private_items_.Get(index);
}
inline uint64_t CPublishedFile_GetItemInfo_Response::private_items(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemInfo_Response.private_items)
  return _internal_private_items(index);
}
inline void CPublishedFile_GetItemInfo_Response::set_private_items(int index, uint64_t value) {
  private_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemInfo_Response.private_items)
}
inline void CPublishedFile_GetItemInfo_Response::_internal_add_private_items(uint64_t value) {
  private_items_.Add(value);
}
inline void CPublishedFile_GetItemInfo_Response::add_private_items(uint64_t value) {
  _internal_add_private_items(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetItemInfo_Response.private_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetItemInfo_Response::_internal_private_items() const {
  return private_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetItemInfo_Response::private_items() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetItemInfo_Response.private_items)
  return _internal_private_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetItemInfo_Response::_internal_mutable_private_items() {
  return &private_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetItemInfo_Response::mutable_private_items() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetItemInfo_Response.private_items)
  return _internal_mutable_private_items();
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Request_KVTag

// optional string key = 1;
inline bool CPublishedFile_GetUserFiles_Request_KVTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request_KVTag::has_key() const {
  return _internal_has_key();
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request_KVTag::key() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.KVTag.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Request_KVTag::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.KVTag.key)
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.KVTag.key)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request_KVTag::_internal_key() const {
  return key_.Get();
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.KVTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.KVTag.key)
}

// optional string value = 2;
inline bool CPublishedFile_GetUserFiles_Request_KVTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request_KVTag::has_value() const {
  return _internal_has_value();
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request_KVTag::value() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.KVTag.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Request_KVTag::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.KVTag.value)
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.KVTag.value)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request_KVTag::_internal_value() const {
  return value_.Get();
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.KVTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetUserFiles_Request_KVTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.KVTag.value)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Request_TagGroup

// repeated string tags = 1;
inline int CPublishedFile_GetUserFiles_Request_TagGroup::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_GetUserFiles_Request_TagGroup::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_GetUserFiles_Request_TagGroup::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request_TagGroup::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_GetUserFiles_Request_TagGroup::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_GetUserFiles_Request_TagGroup::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline std::string* CPublishedFile_GetUserFiles_Request_TagGroup::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_GetUserFiles_Request_TagGroup::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_GetUserFiles_Request_TagGroup::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_GetUserFiles_Request_TagGroup::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.TagGroup.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Request

// optional fixed64 steamid = 1 [(.description) = "Steam ID of the user whose files are being requested."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CPublishedFile_GetUserFiles_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CPublishedFile_GetUserFiles_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CPublishedFile_GetUserFiles_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.steamid)
  return _internal_steamid();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  steamid_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.steamid)
}

// optional uint32 appid = 2 [(.description) = "App Id of the app that the files were published to."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetUserFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.appid)
}

// optional uint32 shortcutid = 3 [(.description) = "(Optional) Shortcut Id to retrieve published files from."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_shortcutid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_shortcutid() const {
  return _internal_has_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Request::clear_shortcutid() {
  shortcutid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_shortcutid() const {
  return shortcutid_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::shortcutid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.shortcutid)
  return _internal_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_shortcutid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  shortcutid_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_shortcutid(uint32_t value) {
  _internal_set_shortcutid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.shortcutid)
}

// optional uint32 page = 4 [default = 1, (.description) = "(Optional) Starting page for results."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_page() const {
  return _internal_has_page();
}
inline void CPublishedFile_GetUserFiles_Request::clear_page() {
  page_ = 1u;
  _has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_page() const {
  return page_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.page)
  return _internal_page();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_page(uint32_t value) {
  _has_bits_[0] |= 0x08000000u;
  page_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.page)
}

// optional uint32 numperpage = 5 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_numperpage() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_numperpage() const {
  return _internal_has_numperpage();
}
inline void CPublishedFile_GetUserFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_numperpage() const {
  return numperpage_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.numperpage)
  return _internal_numperpage();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_numperpage(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  numperpage_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_numperpage(uint32_t value) {
  _internal_set_numperpage(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.numperpage)
}

// optional string type = 6 [default = "myfiles", (.description) = "(Optional) Type of files to be returned."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_type() const {
  return _internal_has_type();
}
inline void CPublishedFile_GetUserFiles_Request::clear_type() {
  type_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.type)
  if (type_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_type_.get();
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Request::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.type)
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.type)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_type() const {
  return type_.Get();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::release_type() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void CPublishedFile_GetUserFiles_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(nullptr, type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.type)
}

// optional string sortmethod = 7 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_sortmethod() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_sortmethod() const {
  return _internal_has_sortmethod();
}
inline void CPublishedFile_GetUserFiles_Request::clear_sortmethod() {
  sortmethod_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::sortmethod() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.sortmethod)
  if (sortmethod_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_sortmethod_.get();
  return _internal_sortmethod();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Request::set_sortmethod(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_sortmethod() {
  std::string* _s = _internal_mutable_sortmethod();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.sortmethod)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_sortmethod() const {
  return sortmethod_.Get();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_sortmethod(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_mutable_sortmethod() {
  _has_bits_[0] |= 0x00000002u;
  return sortmethod_.Mutable(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::release_sortmethod() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.sortmethod)
  if (!_internal_has_sortmethod()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sortmethod_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
  return p;
}
inline void CPublishedFile_GetUserFiles_Request::set_allocated_sortmethod(std::string* sortmethod) {
  if (sortmethod != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sortmethod_.SetAllocated(nullptr, sortmethod,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.sortmethod)
}

// optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_privacy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_privacy() const {
  return _internal_has_privacy();
}
inline void CPublishedFile_GetUserFiles_Request::clear_privacy() {
  privacy_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_privacy() const {
  return privacy_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::privacy() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.privacy)
  return _internal_privacy();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_privacy(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  privacy_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_privacy(uint32_t value) {
  _internal_set_privacy(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.privacy)
}

// repeated string requiredtags = 10 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
inline int CPublishedFile_GetUserFiles_Request::_internal_requiredtags_size() const {
  return requiredtags_.size();
}
inline int CPublishedFile_GetUserFiles_Request::requiredtags_size() const {
  return _internal_requiredtags_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
inline std::string* CPublishedFile_GetUserFiles_Request::add_requiredtags() {
  std::string* _s = _internal_add_requiredtags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_GetUserFiles_Request.requiredtags)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_requiredtags(int index) const {
  return requiredtags_.Get(index);
}
inline const std::string& CPublishedFile_GetUserFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.requiredtags)
  return _internal_requiredtags(index);
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const std::string& value) {
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, std::string&& value) {
  requiredtags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_add_requiredtags() {
  return requiredtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(std::string&& value) {
  requiredtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_GetUserFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_GetUserFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 11 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
inline int CPublishedFile_GetUserFiles_Request::_internal_excludedtags_size() const {
  return excludedtags_.size();
}
inline int CPublishedFile_GetUserFiles_Request::excludedtags_size() const {
  return _internal_excludedtags_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
inline std::string* CPublishedFile_GetUserFiles_Request::add_excludedtags() {
  std::string* _s = _internal_add_excludedtags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_GetUserFiles_Request.excludedtags)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_excludedtags(int index) const {
  return excludedtags_.Get(index);
}
inline const std::string& CPublishedFile_GetUserFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.excludedtags)
  return _internal_excludedtags(index);
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const std::string& value) {
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, std::string&& value) {
  excludedtags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_add_excludedtags() {
  return excludedtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(std::string&& value) {
  excludedtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_GetUserFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_GetUserFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return &excludedtags_;
}

// repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.description) = "Required key-value tags to match on."];
inline int CPublishedFile_GetUserFiles_Request::_internal_required_kv_tags_size() const {
  return required_kv_tags_.size();
}
inline int CPublishedFile_GetUserFiles_Request::required_kv_tags_size() const {
  return _internal_required_kv_tags_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_required_kv_tags() {
  required_kv_tags_.Clear();
}
inline ::CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request::mutable_required_kv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_KVTag >*
CPublishedFile_GetUserFiles_Request::mutable_required_kv_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return &required_kv_tags_;
}
inline const ::CPublishedFile_GetUserFiles_Request_KVTag& CPublishedFile_GetUserFiles_Request::_internal_required_kv_tags(int index) const {
  return required_kv_tags_.Get(index);
}
inline const ::CPublishedFile_GetUserFiles_Request_KVTag& CPublishedFile_GetUserFiles_Request::required_kv_tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return _internal_required_kv_tags(index);
}
inline ::CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request::_internal_add_required_kv_tags() {
  return required_kv_tags_.Add();
}
inline ::CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request::add_required_kv_tags() {
  ::CPublishedFile_GetUserFiles_Request_KVTag* _add = _internal_add_required_kv_tags();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_KVTag >&
CPublishedFile_GetUserFiles_Request::required_kv_tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_;
}

// optional uint32 filetype = 14 [(.description) = "(Optional) File type to match files to."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_filetype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_filetype() const {
  return _internal_has_filetype();
}
inline void CPublishedFile_GetUserFiles_Request::clear_filetype() {
  filetype_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_filetype() const {
  return filetype_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::filetype() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.filetype)
  return _internal_filetype();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_filetype(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  filetype_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_filetype(uint32_t value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.filetype)
}

// optional uint32 creator_appid = 15 [(.description) = "App Id of the app that published the files, only matched if specified."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_creator_appid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_creator_appid() const {
  return _internal_has_creator_appid();
}
inline void CPublishedFile_GetUserFiles_Request::clear_creator_appid() {
  creator_appid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_creator_appid() const {
  return creator_appid_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::creator_appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.creator_appid)
  return _internal_creator_appid();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_creator_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  creator_appid_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_creator_appid(uint32_t value) {
  _internal_set_creator_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.creator_appid)
}

// optional string match_cloud_filename = 16 [(.description) = "Match this cloud filename if specified."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_match_cloud_filename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_match_cloud_filename() const {
  return _internal_has_match_cloud_filename();
}
inline void CPublishedFile_GetUserFiles_Request::clear_match_cloud_filename() {
  match_cloud_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::match_cloud_filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  return _internal_match_cloud_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Request::set_match_cloud_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 match_cloud_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_match_cloud_filename() {
  std::string* _s = _internal_mutable_match_cloud_filename();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_match_cloud_filename() const {
  return match_cloud_filename_.Get();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_match_cloud_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  match_cloud_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_mutable_match_cloud_filename() {
  _has_bits_[0] |= 0x00000004u;
  return match_cloud_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Request::release_match_cloud_filename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  if (!_internal_has_match_cloud_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = match_cloud_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (match_cloud_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    match_cloud_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetUserFiles_Request::set_allocated_match_cloud_filename(std::string* match_cloud_filename) {
  if (match_cloud_filename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  match_cloud_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_cloud_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (match_cloud_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    match_cloud_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}

// optional uint32 cache_max_age_seconds = 27 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_cache_max_age_seconds() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_cache_max_age_seconds() const {
  return _internal_has_cache_max_age_seconds();
}
inline void CPublishedFile_GetUserFiles_Request::clear_cache_max_age_seconds() {
  cache_max_age_seconds_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_cache_max_age_seconds() const {
  return cache_max_age_seconds_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::cache_max_age_seconds() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.cache_max_age_seconds)
  return _internal_cache_max_age_seconds();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_cache_max_age_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  cache_max_age_seconds_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_cache_max_age_seconds(uint32_t value) {
  _internal_set_cache_max_age_seconds(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.cache_max_age_seconds)
}

// optional int32 language = 29 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetUserFiles_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline int32_t CPublishedFile_GetUserFiles_Request::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetUserFiles_Request::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.language)
  return _internal_language();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00080000u;
  language_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.language)
}

// repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
inline int CPublishedFile_GetUserFiles_Request::_internal_taggroups_size() const {
  return taggroups_.size();
}
inline int CPublishedFile_GetUserFiles_Request::taggroups_size() const {
  return _internal_taggroups_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_taggroups() {
  taggroups_.Clear();
}
inline ::CPublishedFile_GetUserFiles_Request_TagGroup* CPublishedFile_GetUserFiles_Request::mutable_taggroups(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.taggroups)
  return taggroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_TagGroup >*
CPublishedFile_GetUserFiles_Request::mutable_taggroups() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.taggroups)
  return &taggroups_;
}
inline const ::CPublishedFile_GetUserFiles_Request_TagGroup& CPublishedFile_GetUserFiles_Request::_internal_taggroups(int index) const {
  return taggroups_.Get(index);
}
inline const ::CPublishedFile_GetUserFiles_Request_TagGroup& CPublishedFile_GetUserFiles_Request::taggroups(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.taggroups)
  return _internal_taggroups(index);
}
inline ::CPublishedFile_GetUserFiles_Request_TagGroup* CPublishedFile_GetUserFiles_Request::_internal_add_taggroups() {
  return taggroups_.Add();
}
inline ::CPublishedFile_GetUserFiles_Request_TagGroup* CPublishedFile_GetUserFiles_Request::add_taggroups() {
  ::CPublishedFile_GetUserFiles_Request_TagGroup* _add = _internal_add_taggroups();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.taggroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Request_TagGroup >&
CPublishedFile_GetUserFiles_Request::taggroups() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.taggroups)
  return taggroups_;
}

// repeated .EContentDescriptorID excluded_content_descriptors = 37 [(.description) = "(Optional) Filter out items that have these content descriptors."];
inline int CPublishedFile_GetUserFiles_Request::_internal_excluded_content_descriptors_size() const {
  return excluded_content_descriptors_.size();
}
inline int CPublishedFile_GetUserFiles_Request::excluded_content_descriptors_size() const {
  return _internal_excluded_content_descriptors_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_excluded_content_descriptors() {
  excluded_content_descriptors_.Clear();
}
inline ::EContentDescriptorID CPublishedFile_GetUserFiles_Request::_internal_excluded_content_descriptors(int index) const {
  return static_cast< ::EContentDescriptorID >(excluded_content_descriptors_.Get(index));
}
inline ::EContentDescriptorID CPublishedFile_GetUserFiles_Request::excluded_content_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.excluded_content_descriptors)
  return _internal_excluded_content_descriptors(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_excluded_content_descriptors(int index, ::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  excluded_content_descriptors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excluded_content_descriptors)
}
inline void CPublishedFile_GetUserFiles_Request::_internal_add_excluded_content_descriptors(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  excluded_content_descriptors_.Add(value);
}
inline void CPublishedFile_GetUserFiles_Request::add_excluded_content_descriptors(::EContentDescriptorID value) {
  _internal_add_excluded_content_descriptors(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excluded_content_descriptors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CPublishedFile_GetUserFiles_Request::excluded_content_descriptors() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.excluded_content_descriptors)
  return excluded_content_descriptors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_GetUserFiles_Request::_internal_mutable_excluded_content_descriptors() {
  return &excluded_content_descriptors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_GetUserFiles_Request::mutable_excluded_content_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.excluded_content_descriptors)
  return _internal_mutable_excluded_content_descriptors();
}

// optional bool totalonly = 17 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_totalonly() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_totalonly() const {
  return _internal_has_totalonly();
}
inline void CPublishedFile_GetUserFiles_Request::clear_totalonly() {
  totalonly_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_totalonly() const {
  return totalonly_;
}
inline bool CPublishedFile_GetUserFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.totalonly)
  return _internal_totalonly();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_totalonly(bool value) {
  _has_bits_[0] |= 0x00000200u;
  totalonly_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_totalonly(bool value) {
  _internal_set_totalonly(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.totalonly)
}

// optional bool ids_only = 18 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_ids_only() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_ids_only() const {
  return _internal_has_ids_only();
}
inline void CPublishedFile_GetUserFiles_Request::clear_ids_only() {
  ids_only_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_ids_only() const {
  return ids_only_;
}
inline bool CPublishedFile_GetUserFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.ids_only)
  return _internal_ids_only();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_ids_only(bool value) {
  _has_bits_[0] |= 0x00000400u;
  ids_only_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_ids_only(bool value) {
  _internal_set_ids_only(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.ids_only)
}

// optional bool return_vote_data = 19 [default = true, (.description) = "Return vote data"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_vote_data() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_vote_data() const {
  return _internal_has_return_vote_data();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_vote_data() {
  return_vote_data_ = true;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_vote_data() const {
  return return_vote_data_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_vote_data() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_vote_data)
  return _internal_return_vote_data();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_vote_data(bool value) {
  _has_bits_[0] |= 0x01000000u;
  return_vote_data_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_vote_data(bool value) {
  _internal_set_return_vote_data(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_vote_data)
}

// optional bool return_tags = 20 [(.description) = "Return tags in the file details"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_tags() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_tags() const {
  return _internal_has_return_tags();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_tags() {
  return_tags_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_tags() const {
  return return_tags_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_tags)
  return _internal_return_tags();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_tags(bool value) {
  _has_bits_[0] |= 0x00000800u;
  return_tags_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_tags(bool value) {
  _internal_set_return_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_tags)
}

// optional bool return_kv_tags = 21 [default = true, (.description) = "Return key-value tags in the file details"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_kv_tags() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_kv_tags() const {
  return _internal_has_return_kv_tags();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_kv_tags() {
  return_kv_tags_ = true;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_kv_tags() const {
  return return_kv_tags_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_kv_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_kv_tags)
  return _internal_return_kv_tags();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_kv_tags(bool value) {
  _has_bits_[0] |= 0x02000000u;
  return_kv_tags_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_kv_tags(bool value) {
  _internal_set_return_kv_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_kv_tags)
}

// optional bool return_previews = 22 [(.description) = "Return preview image and video details in the file details"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_previews() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_previews() const {
  return _internal_has_return_previews();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_previews() {
  return_previews_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_previews() const {
  return return_previews_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_previews() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_previews)
  return _internal_return_previews();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_previews(bool value) {
  _has_bits_[0] |= 0x00001000u;
  return_previews_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_previews(bool value) {
  _internal_set_return_previews(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_previews)
}

// optional bool return_children = 23 [(.description) = "Return child item ids in the file details"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_children() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_children() const {
  return _internal_has_return_children();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_children() {
  return_children_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_children() const {
  return return_children_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_children() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_children)
  return _internal_return_children();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_children(bool value) {
  _has_bits_[0] |= 0x00008000u;
  return_children_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_children(bool value) {
  _internal_set_return_children(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_children)
}

// optional bool return_short_description = 24 [default = true, (.description) = "Populate the short_description field instead of file_description"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_short_description() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_short_description() const {
  return _internal_has_return_short_description();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_short_description() {
  return_short_description_ = true;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_short_description() const {
  return return_short_description_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_short_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_short_description)
  return _internal_return_short_description();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_short_description(bool value) {
  _has_bits_[0] |= 0x04000000u;
  return_short_description_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_short_description(bool value) {
  _internal_set_return_short_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_short_description)
}

// optional bool return_for_sale_data = 26 [(.description) = "Return pricing information, if applicable"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_for_sale_data() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_for_sale_data() const {
  return _internal_has_return_for_sale_data();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_for_sale_data() {
  return_for_sale_data_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_for_sale_data() const {
  return return_for_sale_data_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_for_sale_data() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_for_sale_data)
  return _internal_return_for_sale_data();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_for_sale_data(bool value) {
  _has_bits_[0] |= 0x00010000u;
  return_for_sale_data_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_for_sale_data(bool value) {
  _internal_set_return_for_sale_data(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_for_sale_data)
}

// optional bool return_metadata = 28 [default = false, (.description) = "Populate the metadata field"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_metadata() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_metadata() const {
  return _internal_has_return_metadata();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_metadata() {
  return_metadata_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_metadata() const {
  return return_metadata_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_metadata() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_metadata)
  return _internal_return_metadata();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_metadata(bool value) {
  _has_bits_[0] |= 0x00020000u;
  return_metadata_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_metadata(bool value) {
  _internal_set_return_metadata(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_metadata)
}

// optional uint32 return_playtime_stats = 31 [(.description) = "Return playtime stats for the specified number of days before today."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_playtime_stats() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_playtime_stats() const {
  return _internal_has_return_playtime_stats();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_return_playtime_stats() const {
  return return_playtime_stats_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_playtime_stats)
  return _internal_return_playtime_stats();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_playtime_stats(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  return_playtime_stats_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_playtime_stats(uint32_t value) {
  _internal_set_return_playtime_stats(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_playtime_stats)
}

// optional bool strip_description_bbcode = 32 [(.description) = "Strips BBCode from descriptions."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_strip_description_bbcode() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_strip_description_bbcode() const {
  return _internal_has_strip_description_bbcode();
}
inline void CPublishedFile_GetUserFiles_Request::clear_strip_description_bbcode() {
  strip_description_bbcode_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_strip_description_bbcode() const {
  return strip_description_bbcode_;
}
inline bool CPublishedFile_GetUserFiles_Request::strip_description_bbcode() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.strip_description_bbcode)
  return _internal_strip_description_bbcode();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_strip_description_bbcode(bool value) {
  _has_bits_[0] |= 0x00040000u;
  strip_description_bbcode_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_strip_description_bbcode(bool value) {
  _internal_set_strip_description_bbcode(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.strip_description_bbcode)
}

// optional bool return_reactions = 35 [default = false, (.description) = "If true, then reactions to items will be returned."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_reactions() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_reactions() const {
  return _internal_has_return_reactions();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_reactions() {
  return_reactions_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_reactions() const {
  return return_reactions_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_reactions() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_reactions)
  return _internal_return_reactions();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_reactions(bool value) {
  _has_bits_[0] |= 0x00400000u;
  return_reactions_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_reactions(bool value) {
  _internal_set_return_reactions(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_reactions)
}

// optional uint32 startindex_override = 25 [(.description) = "Backwards compatible for the client."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_startindex_override() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_startindex_override() const {
  return _internal_has_startindex_override();
}
inline void CPublishedFile_GetUserFiles_Request::clear_startindex_override() {
  startindex_override_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::_internal_startindex_override() const {
  return startindex_override_;
}
inline uint32_t CPublishedFile_GetUserFiles_Request::startindex_override() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.startindex_override)
  return _internal_startindex_override();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_startindex_override(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  startindex_override_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_startindex_override(uint32_t value) {
  _internal_set_startindex_override(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.startindex_override)
}

// optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_GetUserFiles_Request::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::EPublishedFileRevision CPublishedFile_GetUserFiles_Request::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_GetUserFiles_Request::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  desired_revision_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.desired_revision)
}

// optional bool return_apps = 36 [(.description) = "Return list of apps the items belong to"];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_return_apps() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_return_apps() const {
  return _internal_has_return_apps();
}
inline void CPublishedFile_GetUserFiles_Request::clear_return_apps() {
  return_apps_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_return_apps() const {
  return return_apps_;
}
inline bool CPublishedFile_GetUserFiles_Request::return_apps() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.return_apps)
  return _internal_return_apps();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_return_apps(bool value) {
  _has_bits_[0] |= 0x00800000u;
  return_apps_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_return_apps(bool value) {
  _internal_set_return_apps(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.return_apps)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response_App

// optional uint32 appid = 1;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetUserFiles_Response_App::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetUserFiles_Response_App::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.appid)
}

// optional string name = 2;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_name() const {
  return _internal_has_name();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetUserFiles_Response_App::name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetUserFiles_Response_App::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.name)
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.App.name)
  return _s;
}
inline const std::string& CPublishedFile_GetUserFiles_Response_App::_internal_name() const {
  return name_.Get();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::release_name() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Response.App.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Response.App.name)
}

// optional uint32 shortcutid = 3;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_shortcutid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_shortcutid() const {
  return _internal_has_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_shortcutid() {
  shortcutid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_GetUserFiles_Response_App::_internal_shortcutid() const {
  return shortcutid_;
}
inline uint32_t CPublishedFile_GetUserFiles_Response_App::shortcutid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.shortcutid)
  return _internal_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_shortcutid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  shortcutid_ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_shortcutid(uint32_t value) {
  _internal_set_shortcutid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.shortcutid)
}

// optional bool private = 4;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_private_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_private_() const {
  return _internal_has_private_();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_private_() {
  private__ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_private_() const {
  return private__;
}
inline bool CPublishedFile_GetUserFiles_Response_App::private_() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.private)
  return _internal_private_();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_private_(bool value) {
  _has_bits_[0] |= 0x00000008u;
  private__ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.private)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response

// optional uint32 total = 1;
inline bool CPublishedFile_GetUserFiles_Response::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response::has_total() const {
  return _internal_has_total();
}
inline void CPublishedFile_GetUserFiles_Response::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetUserFiles_Response::_internal_total() const {
  return total_;
}
inline uint32_t CPublishedFile_GetUserFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.total)
  return _internal_total();
}
inline void CPublishedFile_GetUserFiles_Response::_internal_set_total(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void CPublishedFile_GetUserFiles_Response::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.total)
}

// optional uint32 startindex = 2;
inline bool CPublishedFile_GetUserFiles_Response::_internal_has_startindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response::has_startindex() const {
  return _internal_has_startindex();
}
inline void CPublishedFile_GetUserFiles_Response::clear_startindex() {
  startindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetUserFiles_Response::_internal_startindex() const {
  return startindex_;
}
inline uint32_t CPublishedFile_GetUserFiles_Response::startindex() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.startindex)
  return _internal_startindex();
}
inline void CPublishedFile_GetUserFiles_Response::_internal_set_startindex(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  startindex_ = value;
}
inline void CPublishedFile_GetUserFiles_Response::set_startindex(uint32_t value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.startindex)
}

// repeated .PublishedFileDetails publishedfiledetails = 3;
inline int CPublishedFile_GetUserFiles_Response::_internal_publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline int CPublishedFile_GetUserFiles_Response::publishedfiledetails_size() const {
  return _internal_publishedfiledetails_size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
inline const ::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::_internal_publishedfiledetails(int index) const {
  return publishedfiledetails_.Get(index);
}
inline const ::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return _internal_publishedfiledetails(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::_internal_add_publishedfiledetails() {
  return publishedfiledetails_.Add();
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::add_publishedfiledetails() {
  ::PublishedFileDetails* _add = _internal_add_publishedfiledetails();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetUserFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
inline int CPublishedFile_GetUserFiles_Response::_internal_apps_size() const {
  return apps_.size();
}
inline int CPublishedFile_GetUserFiles_Response::apps_size() const {
  return _internal_apps_size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_apps() {
  apps_.Clear();
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
CPublishedFile_GetUserFiles_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.apps)
  return &apps_;
}
inline const ::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.apps)
  return _internal_apps(index);
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::_internal_add_apps() {
  return apps_.Add();
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::add_apps() {
  ::CPublishedFile_GetUserFiles_Response_App* _add = _internal_add_apps();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.apps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
CPublishedFile_GetUserFiles_Response::apps() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.apps)
  return apps_;
}

// -------------------------------------------------------------------

// CPublishedFile_AreFilesInSubscriptionList_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Request.appid)
}

// repeated fixed64 publishedfileids = 2;
inline int CPublishedFile_AreFilesInSubscriptionList_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_AreFilesInSubscriptionList_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_AreFilesInSubscriptionList_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_AreFilesInSubscriptionList_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Request.publishedfileids)
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_AreFilesInSubscriptionList_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_AreFilesInSubscriptionList_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_AreFilesInSubscriptionList_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_AreFilesInSubscriptionList_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_AreFilesInSubscriptionList_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_AreFilesInSubscriptionList_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_AreFilesInSubscriptionList_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// optional uint32 listtype = 3 [(.description) = "See EUCMListType"];
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::_internal_has_listtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::has_listtype() const {
  return _internal_has_listtype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::clear_listtype() {
  listtype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::_internal_listtype() const {
  return listtype_;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::listtype() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Request.listtype)
  return _internal_listtype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::_internal_set_listtype(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  listtype_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::set_listtype(uint32_t value) {
  _internal_set_listtype(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Request.listtype)
}

// optional uint32 filetype = 4 [(.description) = "See EPublishedFileInfoMatchingFileType"];
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::_internal_has_filetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::has_filetype() const {
  return _internal_has_filetype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::clear_filetype() {
  filetype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::_internal_filetype() const {
  return filetype_;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::filetype() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Request.filetype)
  return _internal_filetype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::_internal_set_filetype(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  filetype_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::set_filetype(uint32_t value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Request.filetype)
}

// optional uint32 workshopfiletype = 5 [(.description) = "See EWorkshopFileType.  If specified, overrides filetype"];
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::_internal_has_workshopfiletype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Request::has_workshopfiletype() const {
  return _internal_has_workshopfiletype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::clear_workshopfiletype() {
  workshopfiletype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::_internal_workshopfiletype() const {
  return workshopfiletype_;
}
inline uint32_t CPublishedFile_AreFilesInSubscriptionList_Request::workshopfiletype() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Request.workshopfiletype)
  return _internal_workshopfiletype();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::_internal_set_workshopfiletype(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  workshopfiletype_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Request::set_workshopfiletype(uint32_t value) {
  _internal_set_workshopfiletype(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Request.workshopfiletype)
}

// -------------------------------------------------------------------

// CPublishedFile_AreFilesInSubscriptionList_Response_InList

// optional fixed64 publishedfileid = 1;
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_AreFilesInSubscriptionList_Response_InList::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Response.InList.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Response.InList.publishedfileid)
}

// optional bool inlist = 2;
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_has_inlist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::has_inlist() const {
  return _internal_has_inlist();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::clear_inlist() {
  inlist_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_inlist() const {
  return inlist_;
}
inline bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::inlist() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Response.InList.inlist)
  return _internal_inlist();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::_internal_set_inlist(bool value) {
  _has_bits_[0] |= 0x00000002u;
  inlist_ = value;
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::set_inlist(bool value) {
  _internal_set_inlist(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AreFilesInSubscriptionList_Response.InList.inlist)
}

// -------------------------------------------------------------------

// CPublishedFile_AreFilesInSubscriptionList_Response

// repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
inline int CPublishedFile_AreFilesInSubscriptionList_Response::_internal_files_size() const {
  return files_.size();
}
inline int CPublishedFile_AreFilesInSubscriptionList_Response::files_size() const {
  return _internal_files_size();
}
inline void CPublishedFile_AreFilesInSubscriptionList_Response::clear_files() {
  files_.Clear();
}
inline ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* CPublishedFile_AreFilesInSubscriptionList_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_AreFilesInSubscriptionList_Response.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >*
CPublishedFile_AreFilesInSubscriptionList_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_AreFilesInSubscriptionList_Response.files)
  return &files_;
}
inline const ::CPublishedFile_AreFilesInSubscriptionList_Response_InList& CPublishedFile_AreFilesInSubscriptionList_Response::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CPublishedFile_AreFilesInSubscriptionList_Response_InList& CPublishedFile_AreFilesInSubscriptionList_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AreFilesInSubscriptionList_Response.files)
  return _internal_files(index);
}
inline ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* CPublishedFile_AreFilesInSubscriptionList_Response::_internal_add_files() {
  return files_.Add();
}
inline ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* CPublishedFile_AreFilesInSubscriptionList_Response::add_files() {
  ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:CPublishedFile_AreFilesInSubscriptionList_Response.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >&
CPublishedFile_AreFilesInSubscriptionList_Response::files() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_AreFilesInSubscriptionList_Response.files)
  return files_;
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Request

// optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
inline bool CPublishedFile_Update_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Update_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPublishedFile_Update_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_Update_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Update_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CPublishedFile_Update_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.appid)
}

// optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like to update."];
inline bool CPublishedFile_Update_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Update_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CPublishedFile_Update_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Update_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Update_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Update_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.publishedfileid)
}

// optional string title = 3 [(.description) = "(Optional) Title of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_title() const {
  return _internal_has_title();
}
inline void CPublishedFile_Update_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Update_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Update_Request::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.title)
}
inline std::string* CPublishedFile_Update_Request::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.title)
  return _s;
}
inline const std::string& CPublishedFile_Update_Request::_internal_title() const {
  return title_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::release_title() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Update_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.title)
}

// optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_file_description() const {
  return _internal_has_file_description();
}
inline void CPublishedFile_Update_Request::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_Update_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.file_description)
  return _internal_file_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Update_Request::set_file_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.file_description)
}
inline std::string* CPublishedFile_Update_Request::mutable_file_description() {
  std::string* _s = _internal_mutable_file_description();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.file_description)
  return _s;
}
inline const std::string& CPublishedFile_Update_Request::_internal_file_description() const {
  return file_description_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000002u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Update_Request::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.file_description)
}

// optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_visibility() const {
  return _internal_has_visibility();
}
inline void CPublishedFile_Update_Request::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPublishedFile_Update_Request::_internal_visibility() const {
  return visibility_;
}
inline uint32_t CPublishedFile_Update_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.visibility)
  return _internal_visibility();
}
inline void CPublishedFile_Update_Request::_internal_set_visibility(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  visibility_ = value;
}
inline void CPublishedFile_Update_Request::set_visibility(uint32_t value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.visibility)
}

// repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
inline int CPublishedFile_Update_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_Update_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_Update_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_Update_Request::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_Update_Request.tags)
  return _s;
}
inline const std::string& CPublishedFile_Update_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_Update_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_Update_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Update_Request::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.tags)
}
inline std::string* CPublishedFile_Update_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Update_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Update_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_Update_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Update_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_Update_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Update_Request.tags)
  return &tags_;
}

// optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CPublishedFile_Update_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPublishedFile_Update_Request::filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Update_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.filename)
}
inline std::string* CPublishedFile_Update_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.filename)
  return _s;
}
inline const std::string& CPublishedFile_Update_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000004u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Update_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.filename)
}

// optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_preview_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_preview_filename() const {
  return _internal_has_preview_filename();
}
inline void CPublishedFile_Update_Request::clear_preview_filename() {
  preview_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPublishedFile_Update_Request::preview_filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.preview_filename)
  return _internal_preview_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_Update_Request::set_preview_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.preview_filename)
}
inline std::string* CPublishedFile_Update_Request::mutable_preview_filename() {
  std::string* _s = _internal_mutable_preview_filename();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.preview_filename)
  return _s;
}
inline const std::string& CPublishedFile_Update_Request::_internal_preview_filename() const {
  return preview_filename_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_preview_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_preview_filename() {
  _has_bits_[0] |= 0x00000008u;
  return preview_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_Update_Request::release_preview_filename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.preview_filename)
  if (!_internal_has_preview_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = preview_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_Update_Request::set_allocated_preview_filename(std::string* preview_filename) {
  if (preview_filename != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preview_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preview_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preview_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.preview_filename)
}

// optional bool spoiler_tag = 10 [(.description) = "(Optional) Whether this published file should have a spoiler tag attached to it."];
inline bool CPublishedFile_Update_Request::_internal_has_spoiler_tag() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_spoiler_tag() const {
  return _internal_has_spoiler_tag();
}
inline void CPublishedFile_Update_Request::clear_spoiler_tag() {
  spoiler_tag_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CPublishedFile_Update_Request::_internal_spoiler_tag() const {
  return spoiler_tag_;
}
inline bool CPublishedFile_Update_Request::spoiler_tag() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.spoiler_tag)
  return _internal_spoiler_tag();
}
inline void CPublishedFile_Update_Request::_internal_set_spoiler_tag(bool value) {
  _has_bits_[0] |= 0x00000100u;
  spoiler_tag_ = value;
}
inline void CPublishedFile_Update_Request::set_spoiler_tag(bool value) {
  _internal_set_spoiler_tag(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.spoiler_tag)
}

// optional uint32 image_width = 15 [(.description) = "(Optional) If this is an image file, you can specify the image width."];
inline bool CPublishedFile_Update_Request::_internal_has_image_width() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_image_width() const {
  return _internal_has_image_width();
}
inline void CPublishedFile_Update_Request::clear_image_width() {
  image_width_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CPublishedFile_Update_Request::_internal_image_width() const {
  return image_width_;
}
inline uint32_t CPublishedFile_Update_Request::image_width() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.image_width)
  return _internal_image_width();
}
inline void CPublishedFile_Update_Request::_internal_set_image_width(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  image_width_ = value;
}
inline void CPublishedFile_Update_Request::set_image_width(uint32_t value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.image_width)
}

// optional uint32 image_height = 16 [(.description) = "(Optional) If this is an image file, you can specify the image height."];
inline bool CPublishedFile_Update_Request::_internal_has_image_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_image_height() const {
  return _internal_has_image_height();
}
inline void CPublishedFile_Update_Request::clear_image_height() {
  image_height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CPublishedFile_Update_Request::_internal_image_height() const {
  return image_height_;
}
inline uint32_t CPublishedFile_Update_Request::image_height() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.image_height)
  return _internal_image_height();
}
inline void CPublishedFile_Update_Request::_internal_set_image_height(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  image_height_ = value;
}
inline void CPublishedFile_Update_Request::set_image_height(uint32_t value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.image_height)
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Response

// -------------------------------------------------------------------

// CPublishedFile_Delete_Request

// optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to delete."];
inline bool CPublishedFile_Delete_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Delete_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Delete_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_Delete_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_Delete_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Delete_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Delete_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Delete_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Delete_Request.publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_Delete_Response

// -------------------------------------------------------------------

// CPublishedFile_GetChangeHistoryEntry_Request

// optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
inline bool CPublishedFile_GetChangeHistoryEntry_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistoryEntry_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetChangeHistoryEntry_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetChangeHistoryEntry_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistoryEntry_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistoryEntry_Request.publishedfileid)
}

// optional uint32 timestamp = 2;
inline bool CPublishedFile_GetChangeHistoryEntry_Request::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistoryEntry_Request::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetChangeHistoryEntry_Request::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CPublishedFile_GetChangeHistoryEntry_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistoryEntry_Request.timestamp)
  return _internal_timestamp();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistoryEntry_Request.timestamp)
}

// optional int32 language = 3;
inline bool CPublishedFile_GetChangeHistoryEntry_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistoryEntry_Request::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPublishedFile_GetChangeHistoryEntry_Request::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetChangeHistoryEntry_Request::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistoryEntry_Request.language)
  return _internal_language();
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  language_ = value;
}
inline void CPublishedFile_GetChangeHistoryEntry_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistoryEntry_Request.language)
}

// -------------------------------------------------------------------

// CPublishedFile_GetChangeHistoryEntry_Response

// optional string change_description = 1;
inline bool CPublishedFile_GetChangeHistoryEntry_Response::_internal_has_change_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistoryEntry_Response::has_change_description() const {
  return _internal_has_change_description();
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::clear_change_description() {
  change_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetChangeHistoryEntry_Response::change_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  return _internal_change_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetChangeHistoryEntry_Response::set_change_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}
inline std::string* CPublishedFile_GetChangeHistoryEntry_Response::mutable_change_description() {
  std::string* _s = _internal_mutable_change_description();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  return _s;
}
inline const std::string& CPublishedFile_GetChangeHistoryEntry_Response::_internal_change_description() const {
  return change_description_.Get();
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::_internal_set_change_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetChangeHistoryEntry_Response::_internal_mutable_change_description() {
  _has_bits_[0] |= 0x00000001u;
  return change_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetChangeHistoryEntry_Response::release_change_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  if (!_internal_has_change_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = change_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::set_allocated_change_description(std::string* change_description) {
  if (change_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  change_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}

// optional int32 language = 2;
inline bool CPublishedFile_GetChangeHistoryEntry_Response::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistoryEntry_Response::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CPublishedFile_GetChangeHistoryEntry_Response::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetChangeHistoryEntry_Response::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistoryEntry_Response.language)
  return _internal_language();
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  language_ = value;
}
inline void CPublishedFile_GetChangeHistoryEntry_Response::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistoryEntry_Response.language)
}

// -------------------------------------------------------------------

// CPublishedFile_GetChangeHistory_Request

// optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
inline bool CPublishedFile_GetChangeHistory_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetChangeHistory_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetChangeHistory_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetChangeHistory_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetChangeHistory_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetChangeHistory_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Request.publishedfileid)
}

// optional bool total_only = 2 [(.description) = "Return the total number of changes only."];
inline bool CPublishedFile_GetChangeHistory_Request::_internal_has_total_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Request::has_total_only() const {
  return _internal_has_total_only();
}
inline void CPublishedFile_GetChangeHistory_Request::clear_total_only() {
  total_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_GetChangeHistory_Request::_internal_total_only() const {
  return total_only_;
}
inline bool CPublishedFile_GetChangeHistory_Request::total_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Request.total_only)
  return _internal_total_only();
}
inline void CPublishedFile_GetChangeHistory_Request::_internal_set_total_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  total_only_ = value;
}
inline void CPublishedFile_GetChangeHistory_Request::set_total_only(bool value) {
  _internal_set_total_only(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Request.total_only)
}

// optional uint32 startindex = 3;
inline bool CPublishedFile_GetChangeHistory_Request::_internal_has_startindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Request::has_startindex() const {
  return _internal_has_startindex();
}
inline void CPublishedFile_GetChangeHistory_Request::clear_startindex() {
  startindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_GetChangeHistory_Request::_internal_startindex() const {
  return startindex_;
}
inline uint32_t CPublishedFile_GetChangeHistory_Request::startindex() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Request.startindex)
  return _internal_startindex();
}
inline void CPublishedFile_GetChangeHistory_Request::_internal_set_startindex(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  startindex_ = value;
}
inline void CPublishedFile_GetChangeHistory_Request::set_startindex(uint32_t value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Request.startindex)
}

// optional uint32 count = 4;
inline bool CPublishedFile_GetChangeHistory_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Request::has_count() const {
  return _internal_has_count();
}
inline void CPublishedFile_GetChangeHistory_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPublishedFile_GetChangeHistory_Request::_internal_count() const {
  return count_;
}
inline uint32_t CPublishedFile_GetChangeHistory_Request::count() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Request.count)
  return _internal_count();
}
inline void CPublishedFile_GetChangeHistory_Request::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
}
inline void CPublishedFile_GetChangeHistory_Request::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Request.count)
}

// optional int32 language = 5 [default = 0, (.description) = "Desired language"];
inline bool CPublishedFile_GetChangeHistory_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Request::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetChangeHistory_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CPublishedFile_GetChangeHistory_Request::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetChangeHistory_Request::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Request.language)
  return _internal_language();
}
inline void CPublishedFile_GetChangeHistory_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  language_ = value;
}
inline void CPublishedFile_GetChangeHistory_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Request.language)
}

// -------------------------------------------------------------------

// CPublishedFile_GetChangeHistory_Response_ChangeLog

// optional uint32 timestamp = 1;
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CPublishedFile_GetChangeHistory_Response_ChangeLog::timestamp() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Response.ChangeLog.timestamp)
  return _internal_timestamp();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Response.ChangeLog.timestamp)
}

// optional string change_description = 2;
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_has_change_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_change_description() const {
  return _internal_has_change_description();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_change_description() {
  change_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetChangeHistory_Response_ChangeLog::change_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  return _internal_change_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_change_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}
inline std::string* CPublishedFile_GetChangeHistory_Response_ChangeLog::mutable_change_description() {
  std::string* _s = _internal_mutable_change_description();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  return _s;
}
inline const std::string& CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_change_description() const {
  return change_description_.Get();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_set_change_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_mutable_change_description() {
  _has_bits_[0] |= 0x00000001u;
  return change_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_GetChangeHistory_Response_ChangeLog::release_change_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  if (!_internal_has_change_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = change_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_allocated_change_description(std::string* change_description) {
  if (change_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  change_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), change_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (change_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}

// optional int32 language = 3;
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_GetChangeHistory_Response_ChangeLog::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Response.ChangeLog.language)
  return _internal_language();
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  language_ = value;
}
inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Response.ChangeLog.language)
}

// -------------------------------------------------------------------

// CPublishedFile_GetChangeHistory_Response

// repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
inline int CPublishedFile_GetChangeHistory_Response::_internal_changes_size() const {
  return changes_.size();
}
inline int CPublishedFile_GetChangeHistory_Response::changes_size() const {
  return _internal_changes_size();
}
inline void CPublishedFile_GetChangeHistory_Response::clear_changes() {
  changes_.Clear();
}
inline ::CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetChangeHistory_Response.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >*
CPublishedFile_GetChangeHistory_Response::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetChangeHistory_Response.changes)
  return &changes_;
}
inline const ::CPublishedFile_GetChangeHistory_Response_ChangeLog& CPublishedFile_GetChangeHistory_Response::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::CPublishedFile_GetChangeHistory_Response_ChangeLog& CPublishedFile_GetChangeHistory_Response::changes(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Response.changes)
  return _internal_changes(index);
}
inline ::CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response::_internal_add_changes() {
  return changes_.Add();
}
inline ::CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response::add_changes() {
  ::CPublishedFile_GetChangeHistory_Response_ChangeLog* _add = _internal_add_changes();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetChangeHistory_Response.changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >&
CPublishedFile_GetChangeHistory_Response::changes() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetChangeHistory_Response.changes)
  return changes_;
}

// optional uint32 total = 2;
inline bool CPublishedFile_GetChangeHistory_Response::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetChangeHistory_Response::has_total() const {
  return _internal_has_total();
}
inline void CPublishedFile_GetChangeHistory_Response::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetChangeHistory_Response::_internal_total() const {
  return total_;
}
inline uint32_t CPublishedFile_GetChangeHistory_Response::total() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetChangeHistory_Response.total)
  return _internal_total();
}
inline void CPublishedFile_GetChangeHistory_Response::_internal_set_total(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void CPublishedFile_GetChangeHistory_Response::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetChangeHistory_Response.total)
}

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.appid)
}

// optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_matching_file_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_matching_file_type() const {
  return _internal_has_matching_file_type();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_matching_file_type() {
  matching_file_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::_internal_matching_file_type() const {
  return matching_file_type_;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::matching_file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
  return _internal_matching_file_type();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_matching_file_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  matching_file_type_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_matching_file_type(uint32_t value) {
  _internal_set_matching_file_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
}

// repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
inline int CPublishedFile_RefreshVotingQueue_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_RefreshVotingQueue_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_RefreshVotingQueue_Request.tags)
  return _s;
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_RefreshVotingQueue_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return &tags_;
}

// optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_match_all_tags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_match_all_tags() const {
  return _internal_has_match_all_tags();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_match_all_tags() const {
  return match_all_tags_;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
  return _internal_match_all_tags();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_match_all_tags(bool value) {
  _has_bits_[0] |= 0x00000010u;
  match_all_tags_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_match_all_tags(bool value) {
  _internal_set_match_all_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
}

// repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
inline int CPublishedFile_RefreshVotingQueue_Request::_internal_excluded_tags_size() const {
  return excluded_tags_.size();
}
inline int CPublishedFile_RefreshVotingQueue_Request::excluded_tags_size() const {
  return _internal_excluded_tags_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_excluded_tags() {
  excluded_tags_.Clear();
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags() {
  std::string* _s = _internal_add_excluded_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return _s;
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::_internal_excluded_tags(int index) const {
  return excluded_tags_.Get(index);
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::excluded_tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return _internal_excluded_tags(index);
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const std::string& value) {
  excluded_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, std::string&& value) {
  excluded_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value, size_t size) {
  excluded_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::_internal_add_excluded_tags() {
  return excluded_tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const std::string& value) {
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(std::string&& value) {
  excluded_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value, size_t size) {
  excluded_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_RefreshVotingQueue_Request::excluded_tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return &excluded_tags_;
}

// optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_desired_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_desired_queue_size() const {
  return _internal_has_desired_queue_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_desired_queue_size() {
  desired_queue_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::_internal_desired_queue_size() const {
  return desired_queue_size_;
}
inline uint32_t CPublishedFile_RefreshVotingQueue_Request::desired_queue_size() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
  return _internal_desired_queue_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_desired_queue_size(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  desired_queue_size_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_desired_queue_size(uint32_t value) {
  _internal_set_desired_queue_size(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
}

// optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default, (.description) = "Filter to items that have data for the specified revision."];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EPublishedFileRevision CPublishedFile_RefreshVotingQueue_Request::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_RefreshVotingQueue_Request::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  desired_revision_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.desired_revision)
}

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Response

// -------------------------------------------------------------------

// CPublishedFile_QueryFiles_Request_KVTag

// optional string key = 1;
inline bool CPublishedFile_QueryFiles_Request_KVTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request_KVTag::has_key() const {
  return _internal_has_key();
}
inline void CPublishedFile_QueryFiles_Request_KVTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_QueryFiles_Request_KVTag::key() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.KVTag.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_QueryFiles_Request_KVTag::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.KVTag.key)
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.KVTag.key)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request_KVTag::_internal_key() const {
  return key_.Get();
}
inline void CPublishedFile_QueryFiles_Request_KVTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.KVTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_QueryFiles_Request_KVTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.KVTag.key)
}

// optional string value = 2;
inline bool CPublishedFile_QueryFiles_Request_KVTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request_KVTag::has_value() const {
  return _internal_has_value();
}
inline void CPublishedFile_QueryFiles_Request_KVTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_QueryFiles_Request_KVTag::value() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.KVTag.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_QueryFiles_Request_KVTag::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.KVTag.value)
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.KVTag.value)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request_KVTag::_internal_value() const {
  return value_.Get();
}
inline void CPublishedFile_QueryFiles_Request_KVTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.KVTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_QueryFiles_Request_KVTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.KVTag.value)
}

// -------------------------------------------------------------------

// CPublishedFile_QueryFiles_Request_TagGroup

// repeated string tags = 1;
inline int CPublishedFile_QueryFiles_Request_TagGroup::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_QueryFiles_Request_TagGroup::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_QueryFiles_Request_TagGroup::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_QueryFiles_Request.TagGroup.tags)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request_TagGroup::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_QueryFiles_Request_TagGroup::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.TagGroup.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_QueryFiles_Request_TagGroup::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.TagGroup.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline std::string* CPublishedFile_QueryFiles_Request_TagGroup::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline void CPublishedFile_QueryFiles_Request_TagGroup::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_QueryFiles_Request.TagGroup.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_QueryFiles_Request_TagGroup::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.TagGroup.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_QueryFiles_Request_TagGroup::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.TagGroup.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// CPublishedFile_QueryFiles_Request_DateRange

// optional uint32 timestamp_start = 1 [(.description) = "(Optional) Include items with the relevant date field after this value."];
inline bool CPublishedFile_QueryFiles_Request_DateRange::_internal_has_timestamp_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request_DateRange::has_timestamp_start() const {
  return _internal_has_timestamp_start();
}
inline void CPublishedFile_QueryFiles_Request_DateRange::clear_timestamp_start() {
  timestamp_start_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_QueryFiles_Request_DateRange::_internal_timestamp_start() const {
  return timestamp_start_;
}
inline uint32_t CPublishedFile_QueryFiles_Request_DateRange::timestamp_start() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.DateRange.timestamp_start)
  return _internal_timestamp_start();
}
inline void CPublishedFile_QueryFiles_Request_DateRange::_internal_set_timestamp_start(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_start_ = value;
}
inline void CPublishedFile_QueryFiles_Request_DateRange::set_timestamp_start(uint32_t value) {
  _internal_set_timestamp_start(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.DateRange.timestamp_start)
}

// optional uint32 timestamp_end = 2 [(.description) = "(Optional) Include items with the relevant date field before this value."];
inline bool CPublishedFile_QueryFiles_Request_DateRange::_internal_has_timestamp_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request_DateRange::has_timestamp_end() const {
  return _internal_has_timestamp_end();
}
inline void CPublishedFile_QueryFiles_Request_DateRange::clear_timestamp_end() {
  timestamp_end_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_QueryFiles_Request_DateRange::_internal_timestamp_end() const {
  return timestamp_end_;
}
inline uint32_t CPublishedFile_QueryFiles_Request_DateRange::timestamp_end() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.DateRange.timestamp_end)
  return _internal_timestamp_end();
}
inline void CPublishedFile_QueryFiles_Request_DateRange::_internal_set_timestamp_end(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_end_ = value;
}
inline void CPublishedFile_QueryFiles_Request_DateRange::set_timestamp_end(uint32_t value) {
  _internal_set_timestamp_end(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.DateRange.timestamp_end)
}

// -------------------------------------------------------------------

// CPublishedFile_QueryFiles_Request

// optional uint32 query_type = 1 [(.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_query_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_query_type() const {
  return _internal_has_query_type();
}
inline void CPublishedFile_QueryFiles_Request::clear_query_type() {
  query_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_query_type() const {
  return query_type_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::query_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.query_type)
  return _internal_query_type();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_query_type(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  query_type_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_query_type(uint32_t value) {
  _internal_set_query_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.query_type)
}

// optional uint32 page = 2 [(.description) = "Current page"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_page() const {
  return _internal_has_page();
}
inline void CPublishedFile_QueryFiles_Request::clear_page() {
  page_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_page() const {
  return page_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.page)
  return _internal_page();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_page(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  page_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.page)
}

// optional string cursor = 39 [(.description) = "Cursor to paginate through the results (set to \'*\' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_cursor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_cursor() const {
  return _internal_has_cursor();
}
inline void CPublishedFile_QueryFiles_Request::clear_cursor() {
  cursor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_QueryFiles_Request::cursor() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_QueryFiles_Request::set_cursor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.cursor)
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.cursor)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_cursor() const {
  return cursor_.Get();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_cursor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_mutable_cursor() {
  _has_bits_[0] |= 0x00000002u;
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request::release_cursor() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.cursor)
  if (!_internal_has_cursor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cursor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cursor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_QueryFiles_Request::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cursor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.cursor)
}

// optional uint32 numperpage = 3 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_numperpage() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_numperpage() const {
  return _internal_has_numperpage();
}
inline void CPublishedFile_QueryFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_numperpage() const {
  return numperpage_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.numperpage)
  return _internal_numperpage();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_numperpage(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  numperpage_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_numperpage(uint32_t value) {
  _internal_set_numperpage(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.numperpage)
}

// optional uint32 creator_appid = 4 [(.description) = "App that created the files"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_creator_appid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_creator_appid() const {
  return _internal_has_creator_appid();
}
inline void CPublishedFile_QueryFiles_Request::clear_creator_appid() {
  creator_appid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_creator_appid() const {
  return creator_appid_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::creator_appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.creator_appid)
  return _internal_creator_appid();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_creator_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  creator_appid_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_creator_appid(uint32_t value) {
  _internal_set_creator_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.creator_appid)
}

// optional uint32 appid = 5 [(.description) = "App that consumes the files"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_QueryFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  appid_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.appid)
}

// repeated string requiredtags = 6 [(.description) = "Tags to match on. See match_all_tags parameter below"];
inline int CPublishedFile_QueryFiles_Request::_internal_requiredtags_size() const {
  return requiredtags_.size();
}
inline int CPublishedFile_QueryFiles_Request::requiredtags_size() const {
  return _internal_requiredtags_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
inline std::string* CPublishedFile_QueryFiles_Request::add_requiredtags() {
  std::string* _s = _internal_add_requiredtags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_QueryFiles_Request.requiredtags)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_requiredtags(int index) const {
  return requiredtags_.Get(index);
}
inline const std::string& CPublishedFile_QueryFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.requiredtags)
  return _internal_requiredtags(index);
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
inline void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const std::string& value) {
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, std::string&& value) {
  requiredtags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_add_requiredtags() {
  return requiredtags_.Add();
}
inline void CPublishedFile_QueryFiles_Request::add_requiredtags(const std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::add_requiredtags(std::string&& value) {
  requiredtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::add_requiredtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline void CPublishedFile_QueryFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_QueryFiles_Request.requiredtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_QueryFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_QueryFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 7 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
inline int CPublishedFile_QueryFiles_Request::_internal_excludedtags_size() const {
  return excludedtags_.size();
}
inline int CPublishedFile_QueryFiles_Request::excludedtags_size() const {
  return _internal_excludedtags_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
inline std::string* CPublishedFile_QueryFiles_Request::add_excludedtags() {
  std::string* _s = _internal_add_excludedtags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_QueryFiles_Request.excludedtags)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_excludedtags(int index) const {
  return excludedtags_.Get(index);
}
inline const std::string& CPublishedFile_QueryFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.excludedtags)
  return _internal_excludedtags(index);
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
inline void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const std::string& value) {
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, std::string&& value) {
  excludedtags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_add_excludedtags() {
  return excludedtags_.Add();
}
inline void CPublishedFile_QueryFiles_Request::add_excludedtags(const std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::add_excludedtags(std::string&& value) {
  excludedtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::add_excludedtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline void CPublishedFile_QueryFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_QueryFiles_Request.excludedtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_QueryFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_QueryFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.excludedtags)
  return &excludedtags_;
}

// optional bool match_all_tags = 8 [default = true, (.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_match_all_tags() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_match_all_tags() const {
  return _internal_has_match_all_tags();
}
inline void CPublishedFile_QueryFiles_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_match_all_tags() const {
  return match_all_tags_;
}
inline bool CPublishedFile_QueryFiles_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.match_all_tags)
  return _internal_match_all_tags();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_match_all_tags(bool value) {
  _has_bits_[0] |= 0x40000000u;
  match_all_tags_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_match_all_tags(bool value) {
  _internal_set_match_all_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.match_all_tags)
}

// repeated string required_flags = 9 [(.description) = "Required flags that must be set on any returned items"];
inline int CPublishedFile_QueryFiles_Request::_internal_required_flags_size() const {
  return required_flags_.size();
}
inline int CPublishedFile_QueryFiles_Request::required_flags_size() const {
  return _internal_required_flags_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_required_flags() {
  required_flags_.Clear();
}
inline std::string* CPublishedFile_QueryFiles_Request::add_required_flags() {
  std::string* _s = _internal_add_required_flags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_QueryFiles_Request.required_flags)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_required_flags(int index) const {
  return required_flags_.Get(index);
}
inline const std::string& CPublishedFile_QueryFiles_Request::required_flags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.required_flags)
  return _internal_required_flags(index);
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_required_flags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_.Mutable(index);
}
inline void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const std::string& value) {
  required_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_required_flags(int index, std::string&& value) {
  required_flags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const char* value, size_t size) {
  required_flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_QueryFiles_Request.required_flags)
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_add_required_flags() {
  return required_flags_.Add();
}
inline void CPublishedFile_QueryFiles_Request::add_required_flags(const std::string& value) {
  required_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_required_flags(std::string&& value) {
  required_flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_required_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_QueryFiles_Request.required_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_required_flags(const char* value, size_t size) {
  required_flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_QueryFiles_Request.required_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_QueryFiles_Request::required_flags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_QueryFiles_Request::mutable_required_flags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.required_flags)
  return &required_flags_;
}

// repeated string omitted_flags = 10 [(.description) = "Flags that must not be set on any returned items"];
inline int CPublishedFile_QueryFiles_Request::_internal_omitted_flags_size() const {
  return omitted_flags_.size();
}
inline int CPublishedFile_QueryFiles_Request::omitted_flags_size() const {
  return _internal_omitted_flags_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_omitted_flags() {
  omitted_flags_.Clear();
}
inline std::string* CPublishedFile_QueryFiles_Request::add_omitted_flags() {
  std::string* _s = _internal_add_omitted_flags();
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_QueryFiles_Request.omitted_flags)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_omitted_flags(int index) const {
  return omitted_flags_.Get(index);
}
inline const std::string& CPublishedFile_QueryFiles_Request::omitted_flags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.omitted_flags)
  return _internal_omitted_flags(index);
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_omitted_flags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_.Mutable(index);
}
inline void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const std::string& value) {
  omitted_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, std::string&& value) {
  omitted_flags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  omitted_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const char* value, size_t size) {
  omitted_flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_add_omitted_flags() {
  return omitted_flags_.Add();
}
inline void CPublishedFile_QueryFiles_Request::add_omitted_flags(const std::string& value) {
  omitted_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_omitted_flags(std::string&& value) {
  omitted_flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_omitted_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  omitted_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline void CPublishedFile_QueryFiles_Request::add_omitted_flags(const char* value, size_t size) {
  omitted_flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_QueryFiles_Request.omitted_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_QueryFiles_Request::omitted_flags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_QueryFiles_Request::mutable_omitted_flags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.omitted_flags)
  return &omitted_flags_;
}

// optional string search_text = 11 [(.description) = "Text to match in the item\'s title or description"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_search_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_search_text() const {
  return _internal_has_search_text();
}
inline void CPublishedFile_QueryFiles_Request::clear_search_text() {
  search_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_QueryFiles_Request::search_text() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.search_text)
  return _internal_search_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_QueryFiles_Request::set_search_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 search_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.search_text)
}
inline std::string* CPublishedFile_QueryFiles_Request::mutable_search_text() {
  std::string* _s = _internal_mutable_search_text();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.search_text)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Request::_internal_search_text() const {
  return search_text_.Get();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_search_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request::_internal_mutable_search_text() {
  _has_bits_[0] |= 0x00000001u;
  return search_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Request::release_search_text() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.search_text)
  if (!_internal_has_search_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = search_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_QueryFiles_Request::set_allocated_search_text(std::string* search_text) {
  if (search_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.search_text)
}

// optional uint32 filetype = 12 [(.description) = "EPublishedFileInfoMatchingFileType"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_filetype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_filetype() const {
  return _internal_has_filetype();
}
inline void CPublishedFile_QueryFiles_Request::clear_filetype() {
  filetype_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_filetype() const {
  return filetype_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::filetype() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.filetype)
  return _internal_filetype();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_filetype(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  filetype_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_filetype(uint32_t value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.filetype)
}

// optional fixed64 child_publishedfileid = 13 [(.description) = "Find all items that reference the given item."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_child_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_child_publishedfileid() const {
  return _internal_has_child_publishedfileid();
}
inline void CPublishedFile_QueryFiles_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CPublishedFile_QueryFiles_Request::_internal_child_publishedfileid() const {
  return child_publishedfileid_;
}
inline uint64_t CPublishedFile_QueryFiles_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.child_publishedfileid)
  return _internal_child_publishedfileid();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_child_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  child_publishedfileid_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_child_publishedfileid(uint64_t value) {
  _internal_set_child_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.child_publishedfileid)
}

// optional uint32 days = 14 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_days() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_days() const {
  return _internal_has_days();
}
inline void CPublishedFile_QueryFiles_Request::clear_days() {
  days_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_days() const {
  return days_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::days() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.days)
  return _internal_days();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_days(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  days_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_days(uint32_t value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.days)
}

// optional bool include_recent_votes_only = 15 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_include_recent_votes_only() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_include_recent_votes_only() const {
  return _internal_has_include_recent_votes_only();
}
inline void CPublishedFile_QueryFiles_Request::clear_include_recent_votes_only() {
  include_recent_votes_only_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_include_recent_votes_only() const {
  return include_recent_votes_only_;
}
inline bool CPublishedFile_QueryFiles_Request::include_recent_votes_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.include_recent_votes_only)
  return _internal_include_recent_votes_only();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_include_recent_votes_only(bool value) {
  _has_bits_[0] |= 0x00008000u;
  include_recent_votes_only_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_include_recent_votes_only(bool value) {
  _internal_set_include_recent_votes_only(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.include_recent_votes_only)
}

// optional uint32 cache_max_age_seconds = 31 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_cache_max_age_seconds() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_cache_max_age_seconds() const {
  return _internal_has_cache_max_age_seconds();
}
inline void CPublishedFile_QueryFiles_Request::clear_cache_max_age_seconds() {
  cache_max_age_seconds_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_cache_max_age_seconds() const {
  return cache_max_age_seconds_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::cache_max_age_seconds() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.cache_max_age_seconds)
  return _internal_cache_max_age_seconds();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_cache_max_age_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00800000u;
  cache_max_age_seconds_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_cache_max_age_seconds(uint32_t value) {
  _internal_set_cache_max_age_seconds(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.cache_max_age_seconds)
}

// optional int32 language = 33 [default = 0, (.description) = "Language to search in and also what gets returned. Defaults to English."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_language() const {
  return _internal_has_language();
}
inline void CPublishedFile_QueryFiles_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline int32_t CPublishedFile_QueryFiles_Request::_internal_language() const {
  return language_;
}
inline int32_t CPublishedFile_QueryFiles_Request::language() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.language)
  return _internal_language();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_language(int32_t value) {
  _has_bits_[0] |= 0x01000000u;
  language_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_language(int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.language)
}

// repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.description) = "Required key-value tags to match on."];
inline int CPublishedFile_QueryFiles_Request::_internal_required_kv_tags_size() const {
  return required_kv_tags_.size();
}
inline int CPublishedFile_QueryFiles_Request::required_kv_tags_size() const {
  return _internal_required_kv_tags_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_required_kv_tags() {
  required_kv_tags_.Clear();
}
inline ::CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request::mutable_required_kv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_KVTag >*
CPublishedFile_QueryFiles_Request::mutable_required_kv_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.required_kv_tags)
  return &required_kv_tags_;
}
inline const ::CPublishedFile_QueryFiles_Request_KVTag& CPublishedFile_QueryFiles_Request::_internal_required_kv_tags(int index) const {
  return required_kv_tags_.Get(index);
}
inline const ::CPublishedFile_QueryFiles_Request_KVTag& CPublishedFile_QueryFiles_Request::required_kv_tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.required_kv_tags)
  return _internal_required_kv_tags(index);
}
inline ::CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request::_internal_add_required_kv_tags() {
  return required_kv_tags_.Add();
}
inline ::CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request::add_required_kv_tags() {
  ::CPublishedFile_QueryFiles_Request_KVTag* _add = _internal_add_required_kv_tags();
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.required_kv_tags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_KVTag >&
CPublishedFile_QueryFiles_Request::required_kv_tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_;
}

// repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
inline int CPublishedFile_QueryFiles_Request::_internal_taggroups_size() const {
  return taggroups_.size();
}
inline int CPublishedFile_QueryFiles_Request::taggroups_size() const {
  return _internal_taggroups_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_taggroups() {
  taggroups_.Clear();
}
inline ::CPublishedFile_QueryFiles_Request_TagGroup* CPublishedFile_QueryFiles_Request::mutable_taggroups(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.taggroups)
  return taggroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_TagGroup >*
CPublishedFile_QueryFiles_Request::mutable_taggroups() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.taggroups)
  return &taggroups_;
}
inline const ::CPublishedFile_QueryFiles_Request_TagGroup& CPublishedFile_QueryFiles_Request::_internal_taggroups(int index) const {
  return taggroups_.Get(index);
}
inline const ::CPublishedFile_QueryFiles_Request_TagGroup& CPublishedFile_QueryFiles_Request::taggroups(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.taggroups)
  return _internal_taggroups(index);
}
inline ::CPublishedFile_QueryFiles_Request_TagGroup* CPublishedFile_QueryFiles_Request::_internal_add_taggroups() {
  return taggroups_.Add();
}
inline ::CPublishedFile_QueryFiles_Request_TagGroup* CPublishedFile_QueryFiles_Request::add_taggroups() {
  ::CPublishedFile_QueryFiles_Request_TagGroup* _add = _internal_add_taggroups();
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.taggroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_QueryFiles_Request_TagGroup >&
CPublishedFile_QueryFiles_Request::taggroups() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.taggroups)
  return taggroups_;
}

// optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44 [(.description) = "(Optional) Filter to items created within this range."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_date_range_created() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || date_range_created_ != nullptr);
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_date_range_created() const {
  return _internal_has_date_range_created();
}
inline void CPublishedFile_QueryFiles_Request::clear_date_range_created() {
  if (date_range_created_ != nullptr) date_range_created_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CPublishedFile_QueryFiles_Request_DateRange& CPublishedFile_QueryFiles_Request::_internal_date_range_created() const {
  const ::CPublishedFile_QueryFiles_Request_DateRange* p = date_range_created_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPublishedFile_QueryFiles_Request_DateRange&>(
      ::_CPublishedFile_QueryFiles_Request_DateRange_default_instance_);
}
inline const ::CPublishedFile_QueryFiles_Request_DateRange& CPublishedFile_QueryFiles_Request::date_range_created() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.date_range_created)
  return _internal_date_range_created();
}
inline void CPublishedFile_QueryFiles_Request::unsafe_arena_set_allocated_date_range_created(
    ::CPublishedFile_QueryFiles_Request_DateRange* date_range_created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_range_created_);
  }
  date_range_created_ = date_range_created;
  if (date_range_created) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPublishedFile_QueryFiles_Request.date_range_created)
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::release_date_range_created() {
  _has_bits_[0] &= ~0x00000004u;
  ::CPublishedFile_QueryFiles_Request_DateRange* temp = date_range_created_;
  date_range_created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::unsafe_arena_release_date_range_created() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.date_range_created)
  _has_bits_[0] &= ~0x00000004u;
  ::CPublishedFile_QueryFiles_Request_DateRange* temp = date_range_created_;
  date_range_created_ = nullptr;
  return temp;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::_internal_mutable_date_range_created() {
  _has_bits_[0] |= 0x00000004u;
  if (date_range_created_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPublishedFile_QueryFiles_Request_DateRange>(GetArenaForAllocation());
    date_range_created_ = p;
  }
  return date_range_created_;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::mutable_date_range_created() {
  ::CPublishedFile_QueryFiles_Request_DateRange* _msg = _internal_mutable_date_range_created();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.date_range_created)
  return _msg;
}
inline void CPublishedFile_QueryFiles_Request::set_allocated_date_range_created(::CPublishedFile_QueryFiles_Request_DateRange* date_range_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete date_range_created_;
  }
  if (date_range_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPublishedFile_QueryFiles_Request_DateRange>::GetOwningArena(date_range_created);
    if (message_arena != submessage_arena) {
      date_range_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_range_created, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  date_range_created_ = date_range_created;
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.date_range_created)
}

// optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45 [(.description) = "(Optional) Filter to items updated within this range."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_date_range_updated() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || date_range_updated_ != nullptr);
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_date_range_updated() const {
  return _internal_has_date_range_updated();
}
inline void CPublishedFile_QueryFiles_Request::clear_date_range_updated() {
  if (date_range_updated_ != nullptr) date_range_updated_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CPublishedFile_QueryFiles_Request_DateRange& CPublishedFile_QueryFiles_Request::_internal_date_range_updated() const {
  const ::CPublishedFile_QueryFiles_Request_DateRange* p = date_range_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPublishedFile_QueryFiles_Request_DateRange&>(
      ::_CPublishedFile_QueryFiles_Request_DateRange_default_instance_);
}
inline const ::CPublishedFile_QueryFiles_Request_DateRange& CPublishedFile_QueryFiles_Request::date_range_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.date_range_updated)
  return _internal_date_range_updated();
}
inline void CPublishedFile_QueryFiles_Request::unsafe_arena_set_allocated_date_range_updated(
    ::CPublishedFile_QueryFiles_Request_DateRange* date_range_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_range_updated_);
  }
  date_range_updated_ = date_range_updated;
  if (date_range_updated) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPublishedFile_QueryFiles_Request.date_range_updated)
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::release_date_range_updated() {
  _has_bits_[0] &= ~0x00000008u;
  ::CPublishedFile_QueryFiles_Request_DateRange* temp = date_range_updated_;
  date_range_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::unsafe_arena_release_date_range_updated() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Request.date_range_updated)
  _has_bits_[0] &= ~0x00000008u;
  ::CPublishedFile_QueryFiles_Request_DateRange* temp = date_range_updated_;
  date_range_updated_ = nullptr;
  return temp;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::_internal_mutable_date_range_updated() {
  _has_bits_[0] |= 0x00000008u;
  if (date_range_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPublishedFile_QueryFiles_Request_DateRange>(GetArenaForAllocation());
    date_range_updated_ = p;
  }
  return date_range_updated_;
}
inline ::CPublishedFile_QueryFiles_Request_DateRange* CPublishedFile_QueryFiles_Request::mutable_date_range_updated() {
  ::CPublishedFile_QueryFiles_Request_DateRange* _msg = _internal_mutable_date_range_updated();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Request.date_range_updated)
  return _msg;
}
inline void CPublishedFile_QueryFiles_Request::set_allocated_date_range_updated(::CPublishedFile_QueryFiles_Request_DateRange* date_range_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete date_range_updated_;
  }
  if (date_range_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPublishedFile_QueryFiles_Request_DateRange>::GetOwningArena(date_range_updated);
    if (message_arena != submessage_arena) {
      date_range_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_range_updated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  date_range_updated_ = date_range_updated;
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Request.date_range_updated)
}

// repeated .EContentDescriptorID excluded_content_descriptors = 46 [(.description) = "(Optional) Filter out items that have these content descriptors."];
inline int CPublishedFile_QueryFiles_Request::_internal_excluded_content_descriptors_size() const {
  return excluded_content_descriptors_.size();
}
inline int CPublishedFile_QueryFiles_Request::excluded_content_descriptors_size() const {
  return _internal_excluded_content_descriptors_size();
}
inline void CPublishedFile_QueryFiles_Request::clear_excluded_content_descriptors() {
  excluded_content_descriptors_.Clear();
}
inline ::EContentDescriptorID CPublishedFile_QueryFiles_Request::_internal_excluded_content_descriptors(int index) const {
  return static_cast< ::EContentDescriptorID >(excluded_content_descriptors_.Get(index));
}
inline ::EContentDescriptorID CPublishedFile_QueryFiles_Request::excluded_content_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.excluded_content_descriptors)
  return _internal_excluded_content_descriptors(index);
}
inline void CPublishedFile_QueryFiles_Request::set_excluded_content_descriptors(int index, ::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  excluded_content_descriptors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.excluded_content_descriptors)
}
inline void CPublishedFile_QueryFiles_Request::_internal_add_excluded_content_descriptors(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  excluded_content_descriptors_.Add(value);
}
inline void CPublishedFile_QueryFiles_Request::add_excluded_content_descriptors(::EContentDescriptorID value) {
  _internal_add_excluded_content_descriptors(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Request.excluded_content_descriptors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CPublishedFile_QueryFiles_Request::excluded_content_descriptors() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Request.excluded_content_descriptors)
  return excluded_content_descriptors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_QueryFiles_Request::_internal_mutable_excluded_content_descriptors() {
  return &excluded_content_descriptors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_QueryFiles_Request::mutable_excluded_content_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Request.excluded_content_descriptors)
  return _internal_mutable_excluded_content_descriptors();
}

// optional bool totalonly = 16 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_totalonly() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_totalonly() const {
  return _internal_has_totalonly();
}
inline void CPublishedFile_QueryFiles_Request::clear_totalonly() {
  totalonly_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_totalonly() const {
  return totalonly_;
}
inline bool CPublishedFile_QueryFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.totalonly)
  return _internal_totalonly();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_totalonly(bool value) {
  _has_bits_[0] |= 0x00010000u;
  totalonly_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_totalonly(bool value) {
  _internal_set_totalonly(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.totalonly)
}

// optional bool ids_only = 35 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_ids_only() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_ids_only() const {
  return _internal_has_ids_only();
}
inline void CPublishedFile_QueryFiles_Request::clear_ids_only() {
  ids_only_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_ids_only() const {
  return ids_only_;
}
inline bool CPublishedFile_QueryFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.ids_only)
  return _internal_ids_only();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_ids_only(bool value) {
  _has_bits_[0] |= 0x00020000u;
  ids_only_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_ids_only(bool value) {
  _internal_set_ids_only(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.ids_only)
}

// optional bool return_vote_data = 17 [(.description) = "Return vote data"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_vote_data() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_vote_data() const {
  return _internal_has_return_vote_data();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_vote_data() {
  return_vote_data_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_vote_data() const {
  return return_vote_data_;
}
inline bool CPublishedFile_QueryFiles_Request::return_vote_data() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_vote_data)
  return _internal_return_vote_data();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_vote_data(bool value) {
  _has_bits_[0] |= 0x00040000u;
  return_vote_data_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_vote_data(bool value) {
  _internal_set_return_vote_data(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_vote_data)
}

// optional bool return_tags = 18 [(.description) = "Return tags in the file details"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_tags() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_tags() const {
  return _internal_has_return_tags();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_tags() {
  return_tags_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_tags() const {
  return return_tags_;
}
inline bool CPublishedFile_QueryFiles_Request::return_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_tags)
  return _internal_return_tags();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_tags(bool value) {
  _has_bits_[0] |= 0x00000800u;
  return_tags_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_tags(bool value) {
  _internal_set_return_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_tags)
}

// optional bool return_kv_tags = 19 [(.description) = "Return key-value tags in the file details"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_kv_tags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_kv_tags() const {
  return _internal_has_return_kv_tags();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_kv_tags() {
  return_kv_tags_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_kv_tags() const {
  return return_kv_tags_;
}
inline bool CPublishedFile_QueryFiles_Request::return_kv_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_kv_tags)
  return _internal_return_kv_tags();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_kv_tags(bool value) {
  _has_bits_[0] |= 0x00001000u;
  return_kv_tags_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_kv_tags(bool value) {
  _internal_set_return_kv_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_kv_tags)
}

// optional bool return_previews = 20 [(.description) = "Return preview image and video details in the file details"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_previews() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_previews() const {
  return _internal_has_return_previews();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_previews() {
  return_previews_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_previews() const {
  return return_previews_;
}
inline bool CPublishedFile_QueryFiles_Request::return_previews() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_previews)
  return _internal_return_previews();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_previews(bool value) {
  _has_bits_[0] |= 0x00002000u;
  return_previews_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_previews(bool value) {
  _internal_set_return_previews(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_previews)
}

// optional bool return_children = 21 [(.description) = "Return child item ids in the file details"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_children() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_children() const {
  return _internal_has_return_children();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_children() {
  return_children_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_children() const {
  return return_children_;
}
inline bool CPublishedFile_QueryFiles_Request::return_children() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_children)
  return _internal_return_children();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_children(bool value) {
  _has_bits_[0] |= 0x00004000u;
  return_children_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_children(bool value) {
  _internal_set_return_children(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_children)
}

// optional bool return_short_description = 22 [(.description) = "Populate the short_description field instead of file_description"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_short_description() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_short_description() const {
  return _internal_has_return_short_description();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_short_description() {
  return_short_description_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_short_description() const {
  return return_short_description_;
}
inline bool CPublishedFile_QueryFiles_Request::return_short_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_short_description)
  return _internal_return_short_description();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_short_description(bool value) {
  _has_bits_[0] |= 0x00080000u;
  return_short_description_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_short_description(bool value) {
  _internal_set_return_short_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_short_description)
}

// optional bool return_for_sale_data = 30 [(.description) = "Return pricing information, if applicable"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_for_sale_data() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_for_sale_data() const {
  return _internal_has_return_for_sale_data();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_for_sale_data() {
  return_for_sale_data_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_for_sale_data() const {
  return return_for_sale_data_;
}
inline bool CPublishedFile_QueryFiles_Request::return_for_sale_data() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_for_sale_data)
  return _internal_return_for_sale_data();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_for_sale_data(bool value) {
  _has_bits_[0] |= 0x00100000u;
  return_for_sale_data_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_for_sale_data(bool value) {
  _internal_set_return_for_sale_data(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_for_sale_data)
}

// optional bool return_metadata = 32 [default = false, (.description) = "Populate the metadata"];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_metadata() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_metadata() const {
  return _internal_has_return_metadata();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_metadata() {
  return_metadata_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_metadata() const {
  return return_metadata_;
}
inline bool CPublishedFile_QueryFiles_Request::return_metadata() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_metadata)
  return _internal_return_metadata();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_metadata(bool value) {
  _has_bits_[0] |= 0x00200000u;
  return_metadata_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_metadata(bool value) {
  _internal_set_return_metadata(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_metadata)
}

// optional uint32 return_playtime_stats = 36 [(.description) = "Return playtime stats for the specified number of days before today."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_playtime_stats() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_playtime_stats() const {
  return _internal_has_return_playtime_stats();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CPublishedFile_QueryFiles_Request::_internal_return_playtime_stats() const {
  return return_playtime_stats_;
}
inline uint32_t CPublishedFile_QueryFiles_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_playtime_stats)
  return _internal_return_playtime_stats();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_playtime_stats(uint32_t value) {
  _has_bits_[0] |= 0x02000000u;
  return_playtime_stats_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_playtime_stats(uint32_t value) {
  _internal_set_return_playtime_stats(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_playtime_stats)
}

// optional bool return_details = 37 [(.description) = "By default, if none of the other \'return_*\' fields are set, only some voting details are returned. Set this to true to return the default set of details."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_details() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_details() const {
  return _internal_has_return_details();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_details() {
  return_details_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_details() const {
  return return_details_;
}
inline bool CPublishedFile_QueryFiles_Request::return_details() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_details)
  return _internal_return_details();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_details(bool value) {
  _has_bits_[0] |= 0x00400000u;
  return_details_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_details(bool value) {
  _internal_set_return_details(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_details)
}

// optional bool strip_description_bbcode = 38 [(.description) = "Strips BBCode from descriptions."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_strip_description_bbcode() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_strip_description_bbcode() const {
  return _internal_has_strip_description_bbcode();
}
inline void CPublishedFile_QueryFiles_Request::clear_strip_description_bbcode() {
  strip_description_bbcode_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_strip_description_bbcode() const {
  return strip_description_bbcode_;
}
inline bool CPublishedFile_QueryFiles_Request::strip_description_bbcode() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.strip_description_bbcode)
  return _internal_strip_description_bbcode();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_strip_description_bbcode(bool value) {
  _has_bits_[0] |= 0x08000000u;
  strip_description_bbcode_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_strip_description_bbcode(bool value) {
  _internal_set_strip_description_bbcode(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.strip_description_bbcode)
}

// optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_desired_revision() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_desired_revision() const {
  return _internal_has_desired_revision();
}
inline void CPublishedFile_QueryFiles_Request::clear_desired_revision() {
  desired_revision_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::EPublishedFileRevision CPublishedFile_QueryFiles_Request::_internal_desired_revision() const {
  return static_cast< ::EPublishedFileRevision >(desired_revision_);
}
inline ::EPublishedFileRevision CPublishedFile_QueryFiles_Request::desired_revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.desired_revision)
  return _internal_desired_revision();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_desired_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  desired_revision_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_desired_revision(::EPublishedFileRevision value) {
  _internal_set_desired_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.desired_revision)
}

// optional bool return_reactions = 43 [default = false, (.description) = "If true, then reactions to items will be returned."];
inline bool CPublishedFile_QueryFiles_Request::_internal_has_return_reactions() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Request::has_return_reactions() const {
  return _internal_has_return_reactions();
}
inline void CPublishedFile_QueryFiles_Request::clear_return_reactions() {
  return_reactions_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool CPublishedFile_QueryFiles_Request::_internal_return_reactions() const {
  return return_reactions_;
}
inline bool CPublishedFile_QueryFiles_Request::return_reactions() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Request.return_reactions)
  return _internal_return_reactions();
}
inline void CPublishedFile_QueryFiles_Request::_internal_set_return_reactions(bool value) {
  _has_bits_[0] |= 0x10000000u;
  return_reactions_ = value;
}
inline void CPublishedFile_QueryFiles_Request::set_return_reactions(bool value) {
  _internal_set_return_reactions(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Request.return_reactions)
}

// -------------------------------------------------------------------

// CPublishedFile_QueryFiles_Response

// optional uint32 total = 1 [(.description) = "Number of matches found, not necessarily number of items returned"];
inline bool CPublishedFile_QueryFiles_Response::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Response::has_total() const {
  return _internal_has_total();
}
inline void CPublishedFile_QueryFiles_Response::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_QueryFiles_Response::_internal_total() const {
  return total_;
}
inline uint32_t CPublishedFile_QueryFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Response.total)
  return _internal_total();
}
inline void CPublishedFile_QueryFiles_Response::_internal_set_total(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  total_ = value;
}
inline void CPublishedFile_QueryFiles_Response::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Response.total)
}

// repeated .PublishedFileDetails publishedfiledetails = 2 [(.description) = "Each file details will be populated, depending on what return values were requested."];
inline int CPublishedFile_QueryFiles_Response::_internal_publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline int CPublishedFile_QueryFiles_Response::publishedfiledetails_size() const {
  return _internal_publishedfiledetails_size();
}
inline void CPublishedFile_QueryFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline ::PublishedFileDetails* CPublishedFile_QueryFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_QueryFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
inline const ::PublishedFileDetails& CPublishedFile_QueryFiles_Response::_internal_publishedfiledetails(int index) const {
  return publishedfiledetails_.Get(index);
}
inline const ::PublishedFileDetails& CPublishedFile_QueryFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return _internal_publishedfiledetails(index);
}
inline ::PublishedFileDetails* CPublishedFile_QueryFiles_Response::_internal_add_publishedfiledetails() {
  return publishedfiledetails_.Add();
}
inline ::PublishedFileDetails* CPublishedFile_QueryFiles_Response::add_publishedfiledetails() {
  ::PublishedFileDetails* _add = _internal_add_publishedfiledetails();
  // @@protoc_insertion_point(field_add:CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_QueryFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// optional string next_cursor = 3 [(.description) = "If a paging cursor was used, then this will be the next cursor to use for paging through results"];
inline bool CPublishedFile_QueryFiles_Response::_internal_has_next_cursor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_QueryFiles_Response::has_next_cursor() const {
  return _internal_has_next_cursor();
}
inline void CPublishedFile_QueryFiles_Response::clear_next_cursor() {
  next_cursor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_QueryFiles_Response::next_cursor() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_QueryFiles_Response.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPublishedFile_QueryFiles_Response::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPublishedFile_QueryFiles_Response.next_cursor)
}
inline std::string* CPublishedFile_QueryFiles_Response::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:CPublishedFile_QueryFiles_Response.next_cursor)
  return _s;
}
inline const std::string& CPublishedFile_QueryFiles_Response::_internal_next_cursor() const {
  return next_cursor_.Get();
}
inline void CPublishedFile_QueryFiles_Response::_internal_set_next_cursor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Response::_internal_mutable_next_cursor() {
  _has_bits_[0] |= 0x00000001u;
  return next_cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPublishedFile_QueryFiles_Response::release_next_cursor() {
  // @@protoc_insertion_point(field_release:CPublishedFile_QueryFiles_Response.next_cursor)
  if (!_internal_has_next_cursor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = next_cursor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_cursor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CPublishedFile_QueryFiles_Response::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_cursor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_cursor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_QueryFiles_Response.next_cursor)
}

// -------------------------------------------------------------------

// CPublishedFile_AddAppRelationship_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_AddAppRelationship_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_AddAppRelationship_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_AddAppRelationship_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_AddAppRelationship_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_AddAppRelationship_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AddAppRelationship_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_AddAppRelationship_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_AddAppRelationship_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AddAppRelationship_Request.publishedfileid)
}

// optional uint32 appid = 2;
inline bool CPublishedFile_AddAppRelationship_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_AddAppRelationship_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_AddAppRelationship_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_AddAppRelationship_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_AddAppRelationship_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AddAppRelationship_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_AddAppRelationship_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPublishedFile_AddAppRelationship_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AddAppRelationship_Request.appid)
}

// optional uint32 relationship = 3;
inline bool CPublishedFile_AddAppRelationship_Request::_internal_has_relationship() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_AddAppRelationship_Request::has_relationship() const {
  return _internal_has_relationship();
}
inline void CPublishedFile_AddAppRelationship_Request::clear_relationship() {
  relationship_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_AddAppRelationship_Request::_internal_relationship() const {
  return relationship_;
}
inline uint32_t CPublishedFile_AddAppRelationship_Request::relationship() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AddAppRelationship_Request.relationship)
  return _internal_relationship();
}
inline void CPublishedFile_AddAppRelationship_Request::_internal_set_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  relationship_ = value;
}
inline void CPublishedFile_AddAppRelationship_Request::set_relationship(uint32_t value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AddAppRelationship_Request.relationship)
}

// -------------------------------------------------------------------

// CPublishedFile_AddAppRelationship_Response

// -------------------------------------------------------------------

// CPublishedFile_RemoveAppRelationship_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_RemoveAppRelationship_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_RemoveAppRelationship_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_RemoveAppRelationship_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_RemoveAppRelationship_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_RemoveAppRelationship_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RemoveAppRelationship_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_RemoveAppRelationship_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_RemoveAppRelationship_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RemoveAppRelationship_Request.publishedfileid)
}

// optional uint32 appid = 2;
inline bool CPublishedFile_RemoveAppRelationship_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_RemoveAppRelationship_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_RemoveAppRelationship_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_RemoveAppRelationship_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_RemoveAppRelationship_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RemoveAppRelationship_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_RemoveAppRelationship_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPublishedFile_RemoveAppRelationship_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RemoveAppRelationship_Request.appid)
}

// optional uint32 relationship = 3;
inline bool CPublishedFile_RemoveAppRelationship_Request::_internal_has_relationship() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_RemoveAppRelationship_Request::has_relationship() const {
  return _internal_has_relationship();
}
inline void CPublishedFile_RemoveAppRelationship_Request::clear_relationship() {
  relationship_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_RemoveAppRelationship_Request::_internal_relationship() const {
  return relationship_;
}
inline uint32_t CPublishedFile_RemoveAppRelationship_Request::relationship() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RemoveAppRelationship_Request.relationship)
  return _internal_relationship();
}
inline void CPublishedFile_RemoveAppRelationship_Request::_internal_set_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  relationship_ = value;
}
inline void CPublishedFile_RemoveAppRelationship_Request::set_relationship(uint32_t value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RemoveAppRelationship_Request.relationship)
}

// -------------------------------------------------------------------

// CPublishedFile_RemoveAppRelationship_Response

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationships_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_GetAppRelationships_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationships_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetAppRelationships_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetAppRelationships_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetAppRelationships_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationships_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetAppRelationships_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetAppRelationships_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationships_Request.publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationships_Response_AppRelationship

// optional uint32 appid = 1;
inline bool CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationships_Response_AppRelationship::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetAppRelationships_Response_AppRelationship::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationships_Response.AppRelationship.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationships_Response.AppRelationship.appid)
}

// optional uint32 relationship = 2;
inline bool CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_has_relationship() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationships_Response_AppRelationship::has_relationship() const {
  return _internal_has_relationship();
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::clear_relationship() {
  relationship_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_relationship() const {
  return relationship_;
}
inline uint32_t CPublishedFile_GetAppRelationships_Response_AppRelationship::relationship() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationships_Response.AppRelationship.relationship)
  return _internal_relationship();
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::_internal_set_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  relationship_ = value;
}
inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::set_relationship(uint32_t value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationships_Response.AppRelationship.relationship)
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationships_Response

// repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
inline int CPublishedFile_GetAppRelationships_Response::_internal_app_relationships_size() const {
  return app_relationships_.size();
}
inline int CPublishedFile_GetAppRelationships_Response::app_relationships_size() const {
  return _internal_app_relationships_size();
}
inline void CPublishedFile_GetAppRelationships_Response::clear_app_relationships() {
  app_relationships_.Clear();
}
inline ::CPublishedFile_GetAppRelationships_Response_AppRelationship* CPublishedFile_GetAppRelationships_Response::mutable_app_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetAppRelationships_Response.app_relationships)
  return app_relationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >*
CPublishedFile_GetAppRelationships_Response::mutable_app_relationships() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetAppRelationships_Response.app_relationships)
  return &app_relationships_;
}
inline const ::CPublishedFile_GetAppRelationships_Response_AppRelationship& CPublishedFile_GetAppRelationships_Response::_internal_app_relationships(int index) const {
  return app_relationships_.Get(index);
}
inline const ::CPublishedFile_GetAppRelationships_Response_AppRelationship& CPublishedFile_GetAppRelationships_Response::app_relationships(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationships_Response.app_relationships)
  return _internal_app_relationships(index);
}
inline ::CPublishedFile_GetAppRelationships_Response_AppRelationship* CPublishedFile_GetAppRelationships_Response::_internal_add_app_relationships() {
  return app_relationships_.Add();
}
inline ::CPublishedFile_GetAppRelationships_Response_AppRelationship* CPublishedFile_GetAppRelationships_Response::add_app_relationships() {
  ::CPublishedFile_GetAppRelationships_Response_AppRelationship* _add = _internal_add_app_relationships();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetAppRelationships_Response.app_relationships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >&
CPublishedFile_GetAppRelationships_Response::app_relationships() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetAppRelationships_Response.app_relationships)
  return app_relationships_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationshipsBatched_Request

// repeated uint64 publishedfileids = 1;
inline int CPublishedFile_GetAppRelationshipsBatched_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_GetAppRelationshipsBatched_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_GetAppRelationshipsBatched_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_GetAppRelationshipsBatched_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Request.publishedfileids)
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetAppRelationshipsBatched_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetAppRelationshipsBatched_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetAppRelationshipsBatched_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetAppRelationshipsBatched_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetAppRelationshipsBatched_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetAppRelationshipsBatched_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetAppRelationshipsBatched_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// optional uint32 filter_relationship = 2;
inline bool CPublishedFile_GetAppRelationshipsBatched_Request::_internal_has_filter_relationship() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationshipsBatched_Request::has_filter_relationship() const {
  return _internal_has_filter_relationship();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::clear_filter_relationship() {
  filter_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Request::_internal_filter_relationship() const {
  return filter_relationship_;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Request::filter_relationship() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Request.filter_relationship)
  return _internal_filter_relationship();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::_internal_set_filter_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  filter_relationship_ = value;
}
inline void CPublishedFile_GetAppRelationshipsBatched_Request::set_filter_relationship(uint32_t value) {
  _internal_set_filter_relationship(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Request.filter_relationship)
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship

// optional uint32 appid = 1;
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship.appid)
}

// optional uint32 relationship = 2;
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_has_relationship() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::has_relationship() const {
  return _internal_has_relationship();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::clear_relationship() {
  relationship_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_relationship() const {
  return relationship_;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::relationship() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship.relationship)
  return _internal_relationship();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_internal_set_relationship(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  relationship_ = value;
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::set_relationship(uint32_t value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship.relationship)
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.publishedfileid)
}

// optional uint32 result = 2;
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::has_result() const {
  return _internal_has_result();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_result() const {
  return result_;
}
inline uint32_t CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::result() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.result)
  return _internal_result();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.result)
}

// repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
inline int CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_app_relationships_size() const {
  return app_relationships_.size();
}
inline int CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::app_relationships_size() const {
  return _internal_app_relationships_size();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::clear_app_relationships() {
  app_relationships_.Clear();
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::mutable_app_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships)
  return app_relationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >*
CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::mutable_app_relationships() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships)
  return &app_relationships_;
}
inline const ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_app_relationships(int index) const {
  return app_relationships_.Get(index);
}
inline const ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::app_relationships(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships)
  return _internal_app_relationships(index);
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_internal_add_app_relationships() {
  return app_relationships_.Add();
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::add_app_relationships() {
  ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* _add = _internal_add_app_relationships();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >&
CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::app_relationships() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships)
  return app_relationships_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetAppRelationshipsBatched_Response

// repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
inline int CPublishedFile_GetAppRelationshipsBatched_Response::_internal_relationships_size() const {
  return relationships_.size();
}
inline int CPublishedFile_GetAppRelationshipsBatched_Response::relationships_size() const {
  return _internal_relationships_size();
}
inline void CPublishedFile_GetAppRelationshipsBatched_Response::clear_relationships() {
  relationships_.Clear();
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response::mutable_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetAppRelationshipsBatched_Response.relationships)
  return relationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >*
CPublishedFile_GetAppRelationshipsBatched_Response::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetAppRelationshipsBatched_Response.relationships)
  return &relationships_;
}
inline const ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& CPublishedFile_GetAppRelationshipsBatched_Response::_internal_relationships(int index) const {
  return relationships_.Get(index);
}
inline const ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& CPublishedFile_GetAppRelationshipsBatched_Response::relationships(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetAppRelationshipsBatched_Response.relationships)
  return _internal_relationships(index);
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response::_internal_add_relationships() {
  return relationships_.Add();
}
inline ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* CPublishedFile_GetAppRelationshipsBatched_Response::add_relationships() {
  ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* _add = _internal_add_relationships();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetAppRelationshipsBatched_Response.relationships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >&
CPublishedFile_GetAppRelationshipsBatched_Response::relationships() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetAppRelationshipsBatched_Response.relationships)
  return relationships_;
}

// -------------------------------------------------------------------

// CPublishedFile_StartPlaytimeTracking_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_StartPlaytimeTracking_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_StartPlaytimeTracking_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_StartPlaytimeTracking_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_StartPlaytimeTracking_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_StartPlaytimeTracking_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_StartPlaytimeTracking_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_StartPlaytimeTracking_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_StartPlaytimeTracking_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_StartPlaytimeTracking_Request.appid)
}

// repeated uint64 publishedfileids = 2;
inline int CPublishedFile_StartPlaytimeTracking_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_StartPlaytimeTracking_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_StartPlaytimeTracking_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_StartPlaytimeTracking_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_StartPlaytimeTracking_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_StartPlaytimeTracking_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
}
inline void CPublishedFile_StartPlaytimeTracking_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_StartPlaytimeTracking_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_StartPlaytimeTracking_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_StartPlaytimeTracking_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_StartPlaytimeTracking_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_StartPlaytimeTracking_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// -------------------------------------------------------------------

// CPublishedFile_StartPlaytimeTracking_Response

// -------------------------------------------------------------------

// CPublishedFile_StopPlaytimeTracking_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_StopPlaytimeTracking_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_StopPlaytimeTracking_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_StopPlaytimeTracking_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_StopPlaytimeTracking_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_StopPlaytimeTracking_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_StopPlaytimeTracking_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_StopPlaytimeTracking_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_StopPlaytimeTracking_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_StopPlaytimeTracking_Request.appid)
}

// repeated uint64 publishedfileids = 2;
inline int CPublishedFile_StopPlaytimeTracking_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_StopPlaytimeTracking_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_StopPlaytimeTracking_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_StopPlaytimeTracking_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_StopPlaytimeTracking_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_StopPlaytimeTracking_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
}
inline void CPublishedFile_StopPlaytimeTracking_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_StopPlaytimeTracking_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_StopPlaytimeTracking_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_StopPlaytimeTracking_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_StopPlaytimeTracking_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_StopPlaytimeTracking_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// -------------------------------------------------------------------

// CPublishedFile_StopPlaytimeTracking_Response

// -------------------------------------------------------------------

// CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.appid)
}

// -------------------------------------------------------------------

// CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response

// -------------------------------------------------------------------

// CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.publishedfileid)
}

// optional float seconds_active = 2;
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_has_seconds_active() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::has_seconds_active() const {
  return _internal_has_seconds_active();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_seconds_active() {
  seconds_active_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_seconds_active() const {
  return seconds_active_;
}
inline float CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::seconds_active() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.seconds_active)
  return _internal_seconds_active();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_internal_set_seconds_active(float value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_active_ = value;
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_seconds_active(float value) {
  _internal_set_seconds_active(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.seconds_active)
}

// -------------------------------------------------------------------

// CPublishedFile_SetPlaytimeForControllerConfigs_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_SetPlaytimeForControllerConfigs_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_SetPlaytimeForControllerConfigs_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_SetPlaytimeForControllerConfigs_Request.appid)
}

// repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
inline int CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_controller_config_usage_size() const {
  return controller_config_usage_.size();
}
inline int CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage_size() const {
  return _internal_controller_config_usage_size();
}
inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::clear_controller_config_usage() {
  controller_config_usage_.Clear();
}
inline ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request::mutable_controller_config_usage(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >*
CPublishedFile_SetPlaytimeForControllerConfigs_Request::mutable_controller_config_usage() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return &controller_config_usage_;
}
inline const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_controller_config_usage(int index) const {
  return controller_config_usage_.Get(index);
}
inline const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return _internal_controller_config_usage(index);
}
inline ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request::_internal_add_controller_config_usage() {
  return controller_config_usage_.Add();
}
inline ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request::add_controller_config_usage() {
  ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* _add = _internal_add_controller_config_usage();
  // @@protoc_insertion_point(field_add:CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >&
CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_;
}

// -------------------------------------------------------------------

// CPublishedFile_SetPlaytimeForControllerConfigs_Response

// -------------------------------------------------------------------

// CPublishedFile_AddChild_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_AddChild_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_AddChild_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_AddChild_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_AddChild_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_AddChild_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AddChild_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_AddChild_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_AddChild_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AddChild_Request.publishedfileid)
}

// optional uint64 child_publishedfileid = 2;
inline bool CPublishedFile_AddChild_Request::_internal_has_child_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_AddChild_Request::has_child_publishedfileid() const {
  return _internal_has_child_publishedfileid();
}
inline void CPublishedFile_AddChild_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_AddChild_Request::_internal_child_publishedfileid() const {
  return child_publishedfileid_;
}
inline uint64_t CPublishedFile_AddChild_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_AddChild_Request.child_publishedfileid)
  return _internal_child_publishedfileid();
}
inline void CPublishedFile_AddChild_Request::_internal_set_child_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  child_publishedfileid_ = value;
}
inline void CPublishedFile_AddChild_Request::set_child_publishedfileid(uint64_t value) {
  _internal_set_child_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_AddChild_Request.child_publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_AddChild_Response

// -------------------------------------------------------------------

// CPublishedFile_RemoveChild_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_RemoveChild_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_RemoveChild_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_RemoveChild_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_RemoveChild_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_RemoveChild_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RemoveChild_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_RemoveChild_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_RemoveChild_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RemoveChild_Request.publishedfileid)
}

// optional uint64 child_publishedfileid = 2;
inline bool CPublishedFile_RemoveChild_Request::_internal_has_child_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_RemoveChild_Request::has_child_publishedfileid() const {
  return _internal_has_child_publishedfileid();
}
inline void CPublishedFile_RemoveChild_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_RemoveChild_Request::_internal_child_publishedfileid() const {
  return child_publishedfileid_;
}
inline uint64_t CPublishedFile_RemoveChild_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RemoveChild_Request.child_publishedfileid)
  return _internal_child_publishedfileid();
}
inline void CPublishedFile_RemoveChild_Request::_internal_set_child_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  child_publishedfileid_ = value;
}
inline void CPublishedFile_RemoveChild_Request::set_child_publishedfileid(uint64_t value) {
  _internal_set_child_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RemoveChild_Request.child_publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_RemoveChild_Response

// -------------------------------------------------------------------

// CPublishedFile_GetUserVoteSummary_Request

// repeated fixed64 publishedfileids = 1;
inline int CPublishedFile_GetUserVoteSummary_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_GetUserVoteSummary_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_GetUserVoteSummary_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline uint64_t CPublishedFile_GetUserVoteSummary_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline uint64_t CPublishedFile_GetUserVoteSummary_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_GetUserVoteSummary_Request::set_publishedfileids(int index, uint64_t value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserVoteSummary_Request.publishedfileids)
}
inline void CPublishedFile_GetUserVoteSummary_Request::_internal_add_publishedfileids(uint64_t value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_GetUserVoteSummary_Request::add_publishedfileids(uint64_t value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserVoteSummary_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetUserVoteSummary_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPublishedFile_GetUserVoteSummary_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserVoteSummary_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetUserVoteSummary_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPublishedFile_GetUserVoteSummary_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserVoteSummary_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserVoteSummary_Response_VoteSummary

// optional fixed64 publishedfileid = 1;
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetUserVoteSummary_Response_VoteSummary::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.publishedfileid)
}

// optional bool vote_for = 2;
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_has_vote_for() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::has_vote_for() const {
  return _internal_has_vote_for();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::clear_vote_for() {
  vote_for_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_vote_for() const {
  return vote_for_;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::vote_for() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.vote_for)
  return _internal_vote_for();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_set_vote_for(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_for_ = value;
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::set_vote_for(bool value) {
  _internal_set_vote_for(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.vote_for)
}

// optional bool vote_against = 3;
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_has_vote_against() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::has_vote_against() const {
  return _internal_has_vote_against();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::clear_vote_against() {
  vote_against_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_vote_against() const {
  return vote_against_;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::vote_against() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.vote_against)
  return _internal_vote_against();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_set_vote_against(bool value) {
  _has_bits_[0] |= 0x00000004u;
  vote_against_ = value;
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::set_vote_against(bool value) {
  _internal_set_vote_against(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.vote_against)
}

// optional bool reported = 4;
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_has_reported() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::has_reported() const {
  return _internal_has_reported();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::clear_reported() {
  reported_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_reported() const {
  return reported_;
}
inline bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::reported() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.reported)
  return _internal_reported();
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_internal_set_reported(bool value) {
  _has_bits_[0] |= 0x00000008u;
  reported_ = value;
}
inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::set_reported(bool value) {
  _internal_set_reported(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserVoteSummary_Response.VoteSummary.reported)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserVoteSummary_Response

// repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
inline int CPublishedFile_GetUserVoteSummary_Response::_internal_summaries_size() const {
  return summaries_.size();
}
inline int CPublishedFile_GetUserVoteSummary_Response::summaries_size() const {
  return _internal_summaries_size();
}
inline void CPublishedFile_GetUserVoteSummary_Response::clear_summaries() {
  summaries_.Clear();
}
inline ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* CPublishedFile_GetUserVoteSummary_Response::mutable_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserVoteSummary_Response.summaries)
  return summaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >*
CPublishedFile_GetUserVoteSummary_Response::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserVoteSummary_Response.summaries)
  return &summaries_;
}
inline const ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary& CPublishedFile_GetUserVoteSummary_Response::_internal_summaries(int index) const {
  return summaries_.Get(index);
}
inline const ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary& CPublishedFile_GetUserVoteSummary_Response::summaries(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserVoteSummary_Response.summaries)
  return _internal_summaries(index);
}
inline ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* CPublishedFile_GetUserVoteSummary_Response::_internal_add_summaries() {
  return summaries_.Add();
}
inline ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* CPublishedFile_GetUserVoteSummary_Response::add_summaries() {
  ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* _add = _internal_add_summaries();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserVoteSummary_Response.summaries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >&
CPublishedFile_GetUserVoteSummary_Response::summaries() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserVoteSummary_Response.summaries)
  return summaries_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemChanges_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_GetItemChanges_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetItemChanges_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetItemChanges_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_GetItemChanges_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Request.appid)
}

// optional uint32 last_time_updated = 2;
inline bool CPublishedFile_GetItemChanges_Request::_internal_has_last_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Request::has_last_time_updated() const {
  return _internal_has_last_time_updated();
}
inline void CPublishedFile_GetItemChanges_Request::clear_last_time_updated() {
  last_time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::_internal_last_time_updated() const {
  return last_time_updated_;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::last_time_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Request.last_time_updated)
  return _internal_last_time_updated();
}
inline void CPublishedFile_GetItemChanges_Request::_internal_set_last_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  last_time_updated_ = value;
}
inline void CPublishedFile_GetItemChanges_Request::set_last_time_updated(uint32_t value) {
  _internal_set_last_time_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Request.last_time_updated)
}

// optional uint32 num_items_max = 3;
inline bool CPublishedFile_GetItemChanges_Request::_internal_has_num_items_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Request::has_num_items_max() const {
  return _internal_has_num_items_max();
}
inline void CPublishedFile_GetItemChanges_Request::clear_num_items_max() {
  num_items_max_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::_internal_num_items_max() const {
  return num_items_max_;
}
inline uint32_t CPublishedFile_GetItemChanges_Request::num_items_max() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Request.num_items_max)
  return _internal_num_items_max();
}
inline void CPublishedFile_GetItemChanges_Request::_internal_set_num_items_max(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_items_max_ = value;
}
inline void CPublishedFile_GetItemChanges_Request::set_num_items_max(uint32_t value) {
  _internal_set_num_items_max(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Request.num_items_max)
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemChanges_Response_WorkshopItemInfo

// optional fixed64 published_file_id = 1;
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.published_file_id)
}

// optional uint32 time_updated = 2;
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_time_updated() const {
  return time_updated_;
}
inline uint32_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::time_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.time_updated)
  return _internal_time_updated();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_set_time_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_updated_ = value;
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::set_time_updated(uint32_t value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.time_updated)
}

// optional fixed64 manifest_id = 3;
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_has_manifest_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::has_manifest_id() const {
  return _internal_has_manifest_id();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::clear_manifest_id() {
  manifest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_manifest_id() const {
  return manifest_id_;
}
inline uint64_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::manifest_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.manifest_id)
  return _internal_manifest_id();
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_internal_set_manifest_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  manifest_id_ = value;
}
inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::set_manifest_id(uint64_t value) {
  _internal_set_manifest_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo.manifest_id)
}

// -------------------------------------------------------------------

// CPublishedFile_GetItemChanges_Response

// optional uint32 update_time = 1;
inline bool CPublishedFile_GetItemChanges_Response::_internal_has_update_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetItemChanges_Response::has_update_time() const {
  return _internal_has_update_time();
}
inline void CPublishedFile_GetItemChanges_Response::clear_update_time() {
  update_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetItemChanges_Response::_internal_update_time() const {
  return update_time_;
}
inline uint32_t CPublishedFile_GetItemChanges_Response::update_time() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Response.update_time)
  return _internal_update_time();
}
inline void CPublishedFile_GetItemChanges_Response::_internal_set_update_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  update_time_ = value;
}
inline void CPublishedFile_GetItemChanges_Response::set_update_time(uint32_t value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetItemChanges_Response.update_time)
}

// repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
inline int CPublishedFile_GetItemChanges_Response::_internal_workshop_items_size() const {
  return workshop_items_.size();
}
inline int CPublishedFile_GetItemChanges_Response::workshop_items_size() const {
  return _internal_workshop_items_size();
}
inline void CPublishedFile_GetItemChanges_Response::clear_workshop_items() {
  workshop_items_.Clear();
}
inline ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* CPublishedFile_GetItemChanges_Response::mutable_workshop_items(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetItemChanges_Response.workshop_items)
  return workshop_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >*
CPublishedFile_GetItemChanges_Response::mutable_workshop_items() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetItemChanges_Response.workshop_items)
  return &workshop_items_;
}
inline const ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& CPublishedFile_GetItemChanges_Response::_internal_workshop_items(int index) const {
  return workshop_items_.Get(index);
}
inline const ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& CPublishedFile_GetItemChanges_Response::workshop_items(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetItemChanges_Response.workshop_items)
  return _internal_workshop_items(index);
}
inline ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* CPublishedFile_GetItemChanges_Response::_internal_add_workshop_items() {
  return workshop_items_.Add();
}
inline ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* CPublishedFile_GetItemChanges_Response::add_workshop_items() {
  ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* _add = _internal_add_workshop_items();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetItemChanges_Response.workshop_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >&
CPublishedFile_GetItemChanges_Response::workshop_items() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetItemChanges_Response.workshop_items)
  return workshop_items_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetContentDescriptors_Request

// optional fixed64 publishedfileid = 1;
inline bool CPublishedFile_GetContentDescriptors_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetContentDescriptors_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_GetContentDescriptors_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_GetContentDescriptors_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_GetContentDescriptors_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_GetContentDescriptors_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_GetContentDescriptors_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetContentDescriptors_Request.publishedfileid)
}

// -------------------------------------------------------------------

// CPublishedFile_GetContentDescriptors_Response_ContentDescriptor

// optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_has_descriptorid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::has_descriptorid() const {
  return _internal_has_descriptorid();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::clear_descriptorid() {
  descriptorid_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EContentDescriptorID CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_descriptorid() const {
  return static_cast< ::EContentDescriptorID >(descriptorid_);
}
inline ::EContentDescriptorID CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::descriptorid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.descriptorid)
  return _internal_descriptorid();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_set_descriptorid(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  descriptorid_ = value;
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::set_descriptorid(::EContentDescriptorID value) {
  _internal_set_descriptorid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.descriptorid)
}

// optional uint32 accountid = 2;
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::has_accountid() const {
  return _internal_has_accountid();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_accountid() const {
  return accountid_;
}
inline uint32_t CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::accountid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.accountid)
  return _internal_accountid();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_set_accountid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::set_accountid(uint32_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.accountid)
}

// optional uint32 timestamp = 3;
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::timestamp() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.timestamp)
  return _internal_timestamp();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.timestamp)
}

// optional bool moderator_set = 4;
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_has_moderator_set() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::has_moderator_set() const {
  return _internal_has_moderator_set();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::clear_moderator_set() {
  moderator_set_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_moderator_set() const {
  return moderator_set_;
}
inline bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::moderator_set() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.moderator_set)
  return _internal_moderator_set();
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_internal_set_moderator_set(bool value) {
  _has_bits_[0] |= 0x00000004u;
  moderator_set_ = value;
}
inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::set_moderator_set(bool value) {
  _internal_set_moderator_set(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.moderator_set)
}

// -------------------------------------------------------------------

// CPublishedFile_GetContentDescriptors_Response

// repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
inline int CPublishedFile_GetContentDescriptors_Response::_internal_content_descriptors_size() const {
  return content_descriptors_.size();
}
inline int CPublishedFile_GetContentDescriptors_Response::content_descriptors_size() const {
  return _internal_content_descriptors_size();
}
inline void CPublishedFile_GetContentDescriptors_Response::clear_content_descriptors() {
  content_descriptors_.Clear();
}
inline ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* CPublishedFile_GetContentDescriptors_Response::mutable_content_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetContentDescriptors_Response.content_descriptors)
  return content_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >*
CPublishedFile_GetContentDescriptors_Response::mutable_content_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetContentDescriptors_Response.content_descriptors)
  return &content_descriptors_;
}
inline const ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& CPublishedFile_GetContentDescriptors_Response::_internal_content_descriptors(int index) const {
  return content_descriptors_.Get(index);
}
inline const ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& CPublishedFile_GetContentDescriptors_Response::content_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetContentDescriptors_Response.content_descriptors)
  return _internal_content_descriptors(index);
}
inline ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* CPublishedFile_GetContentDescriptors_Response::_internal_add_content_descriptors() {
  return content_descriptors_.Add();
}
inline ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* CPublishedFile_GetContentDescriptors_Response::add_content_descriptors() {
  ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* _add = _internal_add_content_descriptors();
  // @@protoc_insertion_point(field_add:CPublishedFile_GetContentDescriptors_Response.content_descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >&
CPublishedFile_GetContentDescriptors_Response::content_descriptors() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetContentDescriptors_Response.content_descriptors)
  return content_descriptors_;
}

// -------------------------------------------------------------------

// CPublishedFile_UpdateContentDescriptors_Request

// optional fixed64 publishedfileid = 1;
inline bool CPublishedFile_UpdateContentDescriptors_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_UpdateContentDescriptors_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_UpdateContentDescriptors_Request::clear_publishedfileid() {
  publishedfileid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_UpdateContentDescriptors_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline uint64_t CPublishedFile_UpdateContentDescriptors_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_UpdateContentDescriptors_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_UpdateContentDescriptors_Request::_internal_set_publishedfileid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_UpdateContentDescriptors_Request::set_publishedfileid(uint64_t value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_UpdateContentDescriptors_Request.publishedfileid)
}

// repeated .EContentDescriptorID descriptors_to_add = 2;
inline int CPublishedFile_UpdateContentDescriptors_Request::_internal_descriptors_to_add_size() const {
  return descriptors_to_add_.size();
}
inline int CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_add_size() const {
  return _internal_descriptors_to_add_size();
}
inline void CPublishedFile_UpdateContentDescriptors_Request::clear_descriptors_to_add() {
  descriptors_to_add_.Clear();
}
inline ::EContentDescriptorID CPublishedFile_UpdateContentDescriptors_Request::_internal_descriptors_to_add(int index) const {
  return static_cast< ::EContentDescriptorID >(descriptors_to_add_.Get(index));
}
inline ::EContentDescriptorID CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_add(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add)
  return _internal_descriptors_to_add(index);
}
inline void CPublishedFile_UpdateContentDescriptors_Request::set_descriptors_to_add(int index, ::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  descriptors_to_add_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add)
}
inline void CPublishedFile_UpdateContentDescriptors_Request::_internal_add_descriptors_to_add(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  descriptors_to_add_.Add(value);
}
inline void CPublishedFile_UpdateContentDescriptors_Request::add_descriptors_to_add(::EContentDescriptorID value) {
  _internal_add_descriptors_to_add(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_add() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add)
  return descriptors_to_add_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_UpdateContentDescriptors_Request::_internal_mutable_descriptors_to_add() {
  return &descriptors_to_add_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_UpdateContentDescriptors_Request::mutable_descriptors_to_add() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add)
  return _internal_mutable_descriptors_to_add();
}

// repeated .EContentDescriptorID descriptors_to_remove = 3;
inline int CPublishedFile_UpdateContentDescriptors_Request::_internal_descriptors_to_remove_size() const {
  return descriptors_to_remove_.size();
}
inline int CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_remove_size() const {
  return _internal_descriptors_to_remove_size();
}
inline void CPublishedFile_UpdateContentDescriptors_Request::clear_descriptors_to_remove() {
  descriptors_to_remove_.Clear();
}
inline ::EContentDescriptorID CPublishedFile_UpdateContentDescriptors_Request::_internal_descriptors_to_remove(int index) const {
  return static_cast< ::EContentDescriptorID >(descriptors_to_remove_.Get(index));
}
inline ::EContentDescriptorID CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove)
  return _internal_descriptors_to_remove(index);
}
inline void CPublishedFile_UpdateContentDescriptors_Request::set_descriptors_to_remove(int index, ::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  descriptors_to_remove_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove)
}
inline void CPublishedFile_UpdateContentDescriptors_Request::_internal_add_descriptors_to_remove(::EContentDescriptorID value) {
  assert(::EContentDescriptorID_IsValid(value));
  descriptors_to_remove_.Add(value);
}
inline void CPublishedFile_UpdateContentDescriptors_Request::add_descriptors_to_remove(::EContentDescriptorID value) {
  _internal_add_descriptors_to_remove(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CPublishedFile_UpdateContentDescriptors_Request::descriptors_to_remove() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove)
  return descriptors_to_remove_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_UpdateContentDescriptors_Request::_internal_mutable_descriptors_to_remove() {
  return &descriptors_to_remove_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CPublishedFile_UpdateContentDescriptors_Request::mutable_descriptors_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove)
  return _internal_mutable_descriptors_to_remove();
}

// -------------------------------------------------------------------

// CPublishedFile_UpdateContentDescriptors_Response

// optional uint32 timestamp_updated = 1;
inline bool CPublishedFile_UpdateContentDescriptors_Response::_internal_has_timestamp_updated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_UpdateContentDescriptors_Response::has_timestamp_updated() const {
  return _internal_has_timestamp_updated();
}
inline void CPublishedFile_UpdateContentDescriptors_Response::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CPublishedFile_UpdateContentDescriptors_Response::_internal_timestamp_updated() const {
  return timestamp_updated_;
}
inline uint32_t CPublishedFile_UpdateContentDescriptors_Response::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_UpdateContentDescriptors_Response.timestamp_updated)
  return _internal_timestamp_updated();
}
inline void CPublishedFile_UpdateContentDescriptors_Response::_internal_set_timestamp_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_updated_ = value;
}
inline void CPublishedFile_UpdateContentDescriptors_Response::set_timestamp_updated(uint32_t value) {
  _internal_set_timestamp_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_UpdateContentDescriptors_Response.timestamp_updated)
}

// -------------------------------------------------------------------

// CPublishedFile_FileSubscribed_Notification_RevisionData

// optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_has_revision() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::has_revision() const {
  return _internal_has_revision();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::clear_revision() {
  revision_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EPublishedFileRevision CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_revision() const {
  return static_cast< ::EPublishedFileRevision >(revision_);
}
inline ::EPublishedFileRevision CPublishedFile_FileSubscribed_Notification_RevisionData::revision() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.RevisionData.revision)
  return _internal_revision();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_set_revision(::EPublishedFileRevision value) {
  assert(::EPublishedFileRevision_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  revision_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::set_revision(::EPublishedFileRevision value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.RevisionData.revision)
}

// optional fixed64 file_hcontent = 2 [(.description) = "Manifest GID"];
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_has_file_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::has_file_hcontent() const {
  return _internal_has_file_hcontent();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::clear_file_hcontent() {
  file_hcontent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_file_hcontent() const {
  return file_hcontent_;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification_RevisionData::file_hcontent() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.RevisionData.file_hcontent)
  return _internal_file_hcontent();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_set_file_hcontent(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  file_hcontent_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::set_file_hcontent(uint64_t value) {
  _internal_set_file_hcontent(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.RevisionData.file_hcontent)
}

// optional uint32 rtime_updated = 3 [(.description) = "Last time content updated"];
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_has_rtime_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification_RevisionData::has_rtime_updated() const {
  return _internal_has_rtime_updated();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::clear_rtime_updated() {
  rtime_updated_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_rtime_updated() const {
  return rtime_updated_;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification_RevisionData::rtime_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.RevisionData.rtime_updated)
  return _internal_rtime_updated();
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::_internal_set_rtime_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  rtime_updated_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification_RevisionData::set_rtime_updated(uint32_t value) {
  _internal_set_rtime_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.RevisionData.rtime_updated)
}

// -------------------------------------------------------------------

// CPublishedFile_FileSubscribed_Notification

// optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.published_file_id)
}

// optional uint32 app_id = 2;
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.app_id)
  return _internal_app_id();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.app_id)
}

// optional fixed64 file_hcontent = 3 [(.description) = "UGC file handle or manifest GID"];
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_file_hcontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_file_hcontent() const {
  return _internal_has_file_hcontent();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_file_hcontent() {
  file_hcontent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification::_internal_file_hcontent() const {
  return file_hcontent_;
}
inline uint64_t CPublishedFile_FileSubscribed_Notification::file_hcontent() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.file_hcontent)
  return _internal_file_hcontent();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_file_hcontent(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  file_hcontent_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_file_hcontent(uint64_t value) {
  _internal_set_file_hcontent(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.file_hcontent)
}

// optional uint32 file_size = 4;
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_file_size() const {
  return _internal_has_file_size();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::_internal_file_size() const {
  return file_size_;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::file_size() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.file_size)
  return _internal_file_size();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_file_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.file_size)
}

// optional uint32 rtime_subscribed = 5;
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_rtime_subscribed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_rtime_subscribed() const {
  return _internal_has_rtime_subscribed();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_rtime_subscribed() {
  rtime_subscribed_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::_internal_rtime_subscribed() const {
  return rtime_subscribed_;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::rtime_subscribed() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.rtime_subscribed)
  return _internal_rtime_subscribed();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_rtime_subscribed(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  rtime_subscribed_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_rtime_subscribed(uint32_t value) {
  _internal_set_rtime_subscribed(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.rtime_subscribed)
}

// optional bool is_depot_content = 6 [(.description) = "True if workshop item is delivered via Steampipe"];
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_is_depot_content() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_is_depot_content() const {
  return _internal_has_is_depot_content();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_is_depot_content() {
  is_depot_content_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPublishedFile_FileSubscribed_Notification::_internal_is_depot_content() const {
  return is_depot_content_;
}
inline bool CPublishedFile_FileSubscribed_Notification::is_depot_content() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.is_depot_content)
  return _internal_is_depot_content();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_is_depot_content(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_depot_content_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_is_depot_content(bool value) {
  _internal_set_is_depot_content(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.is_depot_content)
}

// optional uint32 rtime_updated = 7 [(.description) = "Last time content updated"];
inline bool CPublishedFile_FileSubscribed_Notification::_internal_has_rtime_updated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_FileSubscribed_Notification::has_rtime_updated() const {
  return _internal_has_rtime_updated();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_rtime_updated() {
  rtime_updated_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::_internal_rtime_updated() const {
  return rtime_updated_;
}
inline uint32_t CPublishedFile_FileSubscribed_Notification::rtime_updated() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.rtime_updated)
  return _internal_rtime_updated();
}
inline void CPublishedFile_FileSubscribed_Notification::_internal_set_rtime_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  rtime_updated_ = value;
}
inline void CPublishedFile_FileSubscribed_Notification::set_rtime_updated(uint32_t value) {
  _internal_set_rtime_updated(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileSubscribed_Notification.rtime_updated)
}

// repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8 [(.description) = "Data for each of the revisions that this item has"];
inline int CPublishedFile_FileSubscribed_Notification::_internal_revisions_size() const {
  return revisions_.size();
}
inline int CPublishedFile_FileSubscribed_Notification::revisions_size() const {
  return _internal_revisions_size();
}
inline void CPublishedFile_FileSubscribed_Notification::clear_revisions() {
  revisions_.Clear();
}
inline ::CPublishedFile_FileSubscribed_Notification_RevisionData* CPublishedFile_FileSubscribed_Notification::mutable_revisions(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_FileSubscribed_Notification.revisions)
  return revisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_FileSubscribed_Notification_RevisionData >*
CPublishedFile_FileSubscribed_Notification::mutable_revisions() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_FileSubscribed_Notification.revisions)
  return &revisions_;
}
inline const ::CPublishedFile_FileSubscribed_Notification_RevisionData& CPublishedFile_FileSubscribed_Notification::_internal_revisions(int index) const {
  return revisions_.Get(index);
}
inline const ::CPublishedFile_FileSubscribed_Notification_RevisionData& CPublishedFile_FileSubscribed_Notification::revisions(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileSubscribed_Notification.revisions)
  return _internal_revisions(index);
}
inline ::CPublishedFile_FileSubscribed_Notification_RevisionData* CPublishedFile_FileSubscribed_Notification::_internal_add_revisions() {
  return revisions_.Add();
}
inline ::CPublishedFile_FileSubscribed_Notification_RevisionData* CPublishedFile_FileSubscribed_Notification::add_revisions() {
  ::CPublishedFile_FileSubscribed_Notification_RevisionData* _add = _internal_add_revisions();
  // @@protoc_insertion_point(field_add:CPublishedFile_FileSubscribed_Notification.revisions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_FileSubscribed_Notification_RevisionData >&
CPublishedFile_FileSubscribed_Notification::revisions() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_FileSubscribed_Notification.revisions)
  return revisions_;
}

// -------------------------------------------------------------------

// CPublishedFile_FileUnsubscribed_Notification

// optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
inline bool CPublishedFile_FileUnsubscribed_Notification::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_FileUnsubscribed_Notification::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_FileUnsubscribed_Notification::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_FileUnsubscribed_Notification::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_FileUnsubscribed_Notification::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileUnsubscribed_Notification.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_FileUnsubscribed_Notification::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_FileUnsubscribed_Notification::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileUnsubscribed_Notification.published_file_id)
}

// optional uint32 app_id = 2;
inline bool CPublishedFile_FileUnsubscribed_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_FileUnsubscribed_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CPublishedFile_FileUnsubscribed_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_FileUnsubscribed_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CPublishedFile_FileUnsubscribed_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileUnsubscribed_Notification.app_id)
  return _internal_app_id();
}
inline void CPublishedFile_FileUnsubscribed_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CPublishedFile_FileUnsubscribed_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileUnsubscribed_Notification.app_id)
}

// -------------------------------------------------------------------

// CPublishedFile_FileDeleted_Client_Notification

// optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
inline bool CPublishedFile_FileDeleted_Client_Notification::_internal_has_published_file_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_FileDeleted_Client_Notification::has_published_file_id() const {
  return _internal_has_published_file_id();
}
inline void CPublishedFile_FileDeleted_Client_Notification::clear_published_file_id() {
  published_file_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CPublishedFile_FileDeleted_Client_Notification::_internal_published_file_id() const {
  return published_file_id_;
}
inline uint64_t CPublishedFile_FileDeleted_Client_Notification::published_file_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileDeleted_Client_Notification.published_file_id)
  return _internal_published_file_id();
}
inline void CPublishedFile_FileDeleted_Client_Notification::_internal_set_published_file_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  published_file_id_ = value;
}
inline void CPublishedFile_FileDeleted_Client_Notification::set_published_file_id(uint64_t value) {
  _internal_set_published_file_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileDeleted_Client_Notification.published_file_id)
}

// optional uint32 app_id = 2;
inline bool CPublishedFile_FileDeleted_Client_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_FileDeleted_Client_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CPublishedFile_FileDeleted_Client_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CPublishedFile_FileDeleted_Client_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CPublishedFile_FileDeleted_Client_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_FileDeleted_Client_Notification.app_id)
  return _internal_app_id();
}
inline void CPublishedFile_FileDeleted_Client_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CPublishedFile_FileDeleted_Client_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_FileDeleted_Client_Notification.app_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EPublishedFileRevision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPublishedFileRevision>() {
  return ::EPublishedFileRevision_descriptor();
}
template <> struct is_proto_enum< ::EPublishedFileForSaleStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPublishedFileForSaleStatus>() {
  return ::EPublishedFileForSaleStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamclient_2eproto
