// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gameservers.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgameservers_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgameservers_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto;
class CGameServers_GameServerQuery_Response;
struct CGameServers_GameServerQuery_ResponseDefaultTypeInternal;
extern CGameServers_GameServerQuery_ResponseDefaultTypeInternal _CGameServers_GameServerQuery_Response_default_instance_;
class CGameServers_GetServerIPsBySteamID_Request;
struct CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal;
extern CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal _CGameServers_GetServerIPsBySteamID_Request_default_instance_;
class CGameServers_GetServerList_Request;
struct CGameServers_GetServerList_RequestDefaultTypeInternal;
extern CGameServers_GetServerList_RequestDefaultTypeInternal _CGameServers_GetServerList_Request_default_instance_;
class CGameServers_GetServerList_Response;
struct CGameServers_GetServerList_ResponseDefaultTypeInternal;
extern CGameServers_GetServerList_ResponseDefaultTypeInternal _CGameServers_GetServerList_Response_default_instance_;
class CGameServers_GetServerList_Response_Server;
struct CGameServers_GetServerList_Response_ServerDefaultTypeInternal;
extern CGameServers_GetServerList_Response_ServerDefaultTypeInternal _CGameServers_GetServerList_Response_Server_default_instance_;
class CGameServers_GetServerSteamIDsByIP_Request;
struct CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal;
extern CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal _CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
class CGameServers_IPsWithSteamIDs_Response;
struct CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal;
extern CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_default_instance_;
class CGameServers_IPsWithSteamIDs_Response_Server;
struct CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal;
extern CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
class CGameServers_QueryByFakeIP_Request;
struct CGameServers_QueryByFakeIP_RequestDefaultTypeInternal;
extern CGameServers_QueryByFakeIP_RequestDefaultTypeInternal _CGameServers_QueryByFakeIP_Request_default_instance_;
class CMsgGameServerPingQueryData;
struct CMsgGameServerPingQueryDataDefaultTypeInternal;
extern CMsgGameServerPingQueryDataDefaultTypeInternal _CMsgGameServerPingQueryData_default_instance_;
class CMsgGameServerPlayersQueryData;
struct CMsgGameServerPlayersQueryDataDefaultTypeInternal;
extern CMsgGameServerPlayersQueryDataDefaultTypeInternal _CMsgGameServerPlayersQueryData_default_instance_;
class CMsgGameServerPlayersQueryData_Player;
struct CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal;
extern CMsgGameServerPlayersQueryData_PlayerDefaultTypeInternal _CMsgGameServerPlayersQueryData_Player_default_instance_;
class CMsgGameServerRulesQueryData;
struct CMsgGameServerRulesQueryDataDefaultTypeInternal;
extern CMsgGameServerRulesQueryDataDefaultTypeInternal _CMsgGameServerRulesQueryData_default_instance_;
class CMsgGameServerRulesQueryData_Rule;
struct CMsgGameServerRulesQueryData_RuleDefaultTypeInternal;
extern CMsgGameServerRulesQueryData_RuleDefaultTypeInternal _CMsgGameServerRulesQueryData_Rule_default_instance_;
class GameServerClient_QueryServerData_Request;
struct GameServerClient_QueryServerData_RequestDefaultTypeInternal;
extern GameServerClient_QueryServerData_RequestDefaultTypeInternal _GameServerClient_QueryServerData_Request_default_instance_;
class GameServerClient_QueryServerData_Response;
struct GameServerClient_QueryServerData_ResponseDefaultTypeInternal;
extern GameServerClient_QueryServerData_ResponseDefaultTypeInternal _GameServerClient_QueryServerData_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameServers_GameServerQuery_Response* Arena::CreateMaybeMessage<::CGameServers_GameServerQuery_Response>(Arena*);
template<> ::CGameServers_GetServerIPsBySteamID_Request* Arena::CreateMaybeMessage<::CGameServers_GetServerIPsBySteamID_Request>(Arena*);
template<> ::CGameServers_GetServerList_Request* Arena::CreateMaybeMessage<::CGameServers_GetServerList_Request>(Arena*);
template<> ::CGameServers_GetServerList_Response* Arena::CreateMaybeMessage<::CGameServers_GetServerList_Response>(Arena*);
template<> ::CGameServers_GetServerList_Response_Server* Arena::CreateMaybeMessage<::CGameServers_GetServerList_Response_Server>(Arena*);
template<> ::CGameServers_GetServerSteamIDsByIP_Request* Arena::CreateMaybeMessage<::CGameServers_GetServerSteamIDsByIP_Request>(Arena*);
template<> ::CGameServers_IPsWithSteamIDs_Response* Arena::CreateMaybeMessage<::CGameServers_IPsWithSteamIDs_Response>(Arena*);
template<> ::CGameServers_IPsWithSteamIDs_Response_Server* Arena::CreateMaybeMessage<::CGameServers_IPsWithSteamIDs_Response_Server>(Arena*);
template<> ::CGameServers_QueryByFakeIP_Request* Arena::CreateMaybeMessage<::CGameServers_QueryByFakeIP_Request>(Arena*);
template<> ::CMsgGameServerPingQueryData* Arena::CreateMaybeMessage<::CMsgGameServerPingQueryData>(Arena*);
template<> ::CMsgGameServerPlayersQueryData* Arena::CreateMaybeMessage<::CMsgGameServerPlayersQueryData>(Arena*);
template<> ::CMsgGameServerPlayersQueryData_Player* Arena::CreateMaybeMessage<::CMsgGameServerPlayersQueryData_Player>(Arena*);
template<> ::CMsgGameServerRulesQueryData* Arena::CreateMaybeMessage<::CMsgGameServerRulesQueryData>(Arena*);
template<> ::CMsgGameServerRulesQueryData_Rule* Arena::CreateMaybeMessage<::CMsgGameServerRulesQueryData_Rule>(Arena*);
template<> ::GameServerClient_QueryServerData_Request* Arena::CreateMaybeMessage<::GameServerClient_QueryServerData_Request>(Arena*);
template<> ::GameServerClient_QueryServerData_Response* Arena::CreateMaybeMessage<::GameServerClient_QueryServerData_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CGameServers_QueryByFakeIP_Request_EQueryType : int {
  CGameServers_QueryByFakeIP_Request_EQueryType_Query_Invalid = 0,
  CGameServers_QueryByFakeIP_Request_EQueryType_Query_Ping = 1,
  CGameServers_QueryByFakeIP_Request_EQueryType_Query_Players = 2,
  CGameServers_QueryByFakeIP_Request_EQueryType_Query_Rules = 3
};
bool CGameServers_QueryByFakeIP_Request_EQueryType_IsValid(int value);
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_MIN = CGameServers_QueryByFakeIP_Request_EQueryType_Query_Invalid;
constexpr CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_MAX = CGameServers_QueryByFakeIP_Request_EQueryType_Query_Rules;
constexpr int CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_ARRAYSIZE = CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CGameServers_QueryByFakeIP_Request_EQueryType_descriptor();
template<typename T>
inline const std::string& CGameServers_QueryByFakeIP_Request_EQueryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CGameServers_QueryByFakeIP_Request_EQueryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CGameServers_QueryByFakeIP_Request_EQueryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CGameServers_QueryByFakeIP_Request_EQueryType_descriptor(), enum_t_value);
}
inline bool CGameServers_QueryByFakeIP_Request_EQueryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CGameServers_QueryByFakeIP_Request_EQueryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CGameServers_QueryByFakeIP_Request_EQueryType>(
    CGameServers_QueryByFakeIP_Request_EQueryType_descriptor(), name, value);
}
// ===================================================================

class CGameServers_GetServerList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GetServerList_Request) */ {
 public:
  inline CGameServers_GetServerList_Request() : CGameServers_GetServerList_Request(nullptr) {}
  ~CGameServers_GetServerList_Request() override;
  explicit constexpr CGameServers_GetServerList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GetServerList_Request(const CGameServers_GetServerList_Request& from);
  CGameServers_GetServerList_Request(CGameServers_GetServerList_Request&& from) noexcept
    : CGameServers_GetServerList_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Request& operator=(const CGameServers_GetServerList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GetServerList_Request& operator=(CGameServers_GetServerList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GetServerList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GetServerList_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Request*>(
               &_CGameServers_GetServerList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameServers_GetServerList_Request& a, CGameServers_GetServerList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GetServerList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GetServerList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GetServerList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GetServerList_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GetServerList_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GetServerList_Request";
  }
  protected:
  explicit CGameServers_GetServerList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // optional string filter = 1 [(.description) = "Query filter string."];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // optional uint32 limit = 2 [default = 100, (.description) = "The maximum number of servers to return in the response"];
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGameServers_GetServerList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  uint32_t limit_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerList_Response_Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GetServerList_Response.Server) */ {
 public:
  inline CGameServers_GetServerList_Response_Server() : CGameServers_GetServerList_Response_Server(nullptr) {}
  ~CGameServers_GetServerList_Response_Server() override;
  explicit constexpr CGameServers_GetServerList_Response_Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GetServerList_Response_Server(const CGameServers_GetServerList_Response_Server& from);
  CGameServers_GetServerList_Response_Server(CGameServers_GetServerList_Response_Server&& from) noexcept
    : CGameServers_GetServerList_Response_Server() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Response_Server& operator=(const CGameServers_GetServerList_Response_Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GetServerList_Response_Server& operator=(CGameServers_GetServerList_Response_Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GetServerList_Response_Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GetServerList_Response_Server* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Response_Server*>(
               &_CGameServers_GetServerList_Response_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameServers_GetServerList_Response_Server& a, CGameServers_GetServerList_Response_Server& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GetServerList_Response_Server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GetServerList_Response_Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GetServerList_Response_Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response_Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GetServerList_Response_Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GetServerList_Response_Server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Response_Server* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GetServerList_Response.Server";
  }
  protected:
  explicit CGameServers_GetServerList_Response_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kNameFieldNumber = 5,
    kGamedirFieldNumber = 7,
    kVersionFieldNumber = 8,
    kProductFieldNumber = 9,
    kMapFieldNumber = 14,
    kOsFieldNumber = 17,
    kGametypeFieldNumber = 18,
    kGameportFieldNumber = 2,
    kSpecportFieldNumber = 3,
    kSteamidFieldNumber = 4,
    kAppidFieldNumber = 6,
    kRegionFieldNumber = 10,
    kPlayersFieldNumber = 11,
    kMaxPlayersFieldNumber = 12,
    kBotsFieldNumber = 13,
    kSecureFieldNumber = 15,
    kDedicatedFieldNumber = 16,
  };
  // optional string addr = 1 [(.description) = "The server\'s IP and query port"];
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string gamedir = 7;
  bool has_gamedir() const;
  private:
  bool _internal_has_gamedir() const;
  public:
  void clear_gamedir();
  const std::string& gamedir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedir();
  PROTOBUF_NODISCARD std::string* release_gamedir();
  void set_allocated_gamedir(std::string* gamedir);
  private:
  const std::string& _internal_gamedir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedir(const std::string& value);
  std::string* _internal_mutable_gamedir();
  public:

  // optional string version = 8;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string product = 9;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // optional string map = 14;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional string os = 17;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  const std::string& os() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os();
  PROTOBUF_NODISCARD std::string* release_os();
  void set_allocated_os(std::string* os);
  private:
  const std::string& _internal_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // optional string gametype = 18;
  bool has_gametype() const;
  private:
  bool _internal_has_gametype() const;
  public:
  void clear_gametype();
  const std::string& gametype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gametype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gametype();
  PROTOBUF_NODISCARD std::string* release_gametype();
  void set_allocated_gametype(std::string* gametype);
  private:
  const std::string& _internal_gametype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gametype(const std::string& value);
  std::string* _internal_mutable_gametype();
  public:

  // optional uint32 gameport = 2;
  bool has_gameport() const;
  private:
  bool _internal_has_gameport() const;
  public:
  void clear_gameport();
  uint32_t gameport() const;
  void set_gameport(uint32_t value);
  private:
  uint32_t _internal_gameport() const;
  void _internal_set_gameport(uint32_t value);
  public:

  // optional uint32 specport = 3;
  bool has_specport() const;
  private:
  bool _internal_has_specport() const;
  public:
  void clear_specport();
  uint32_t specport() const;
  void set_specport(uint32_t value);
  private:
  uint32_t _internal_specport() const;
  void _internal_set_specport(uint32_t value);
  public:

  // optional fixed64 steamid = 4;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 6;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional int32 region = 10;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  int32_t region() const;
  void set_region(int32_t value);
  private:
  int32_t _internal_region() const;
  void _internal_set_region(int32_t value);
  public:

  // optional int32 players = 11;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  int32_t players() const;
  void set_players(int32_t value);
  private:
  int32_t _internal_players() const;
  void _internal_set_players(int32_t value);
  public:

  // optional int32 max_players = 12;
  bool has_max_players() const;
  private:
  bool _internal_has_max_players() const;
  public:
  void clear_max_players();
  int32_t max_players() const;
  void set_max_players(int32_t value);
  private:
  int32_t _internal_max_players() const;
  void _internal_set_max_players(int32_t value);
  public:

  // optional int32 bots = 13;
  bool has_bots() const;
  private:
  bool _internal_has_bots() const;
  public:
  void clear_bots();
  int32_t bots() const;
  void set_bots(int32_t value);
  private:
  int32_t _internal_bots() const;
  void _internal_set_bots(int32_t value);
  public:

  // optional bool secure = 15;
  bool has_secure() const;
  private:
  bool _internal_has_secure() const;
  public:
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);
  private:
  bool _internal_secure() const;
  void _internal_set_secure(bool value);
  public:

  // optional bool dedicated = 16;
  bool has_dedicated() const;
  private:
  bool _internal_has_dedicated() const;
  public:
  void clear_dedicated();
  bool dedicated() const;
  void set_dedicated(bool value);
  private:
  bool _internal_dedicated() const;
  void _internal_set_dedicated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CGameServers_GetServerList_Response.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gametype_;
  uint32_t gameport_;
  uint32_t specport_;
  uint64_t steamid_;
  uint32_t appid_;
  int32_t region_;
  int32_t players_;
  int32_t max_players_;
  int32_t bots_;
  bool secure_;
  bool dedicated_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GetServerList_Response) */ {
 public:
  inline CGameServers_GetServerList_Response() : CGameServers_GetServerList_Response(nullptr) {}
  ~CGameServers_GetServerList_Response() override;
  explicit constexpr CGameServers_GetServerList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GetServerList_Response(const CGameServers_GetServerList_Response& from);
  CGameServers_GetServerList_Response(CGameServers_GetServerList_Response&& from) noexcept
    : CGameServers_GetServerList_Response() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerList_Response& operator=(const CGameServers_GetServerList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GetServerList_Response& operator=(CGameServers_GetServerList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GetServerList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GetServerList_Response* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerList_Response*>(
               &_CGameServers_GetServerList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameServers_GetServerList_Response& a, CGameServers_GetServerList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GetServerList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GetServerList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GetServerList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GetServerList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GetServerList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GetServerList_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GetServerList_Response";
  }
  protected:
  explicit CGameServers_GetServerList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameServers_GetServerList_Response_Server Server;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .CGameServers_GetServerList_Response.Server servers = 1 [(.description) = "List of servers matching the filter"];
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::CGameServers_GetServerList_Response_Server* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_GetServerList_Response_Server >*
      mutable_servers();
  private:
  const ::CGameServers_GetServerList_Response_Server& _internal_servers(int index) const;
  ::CGameServers_GetServerList_Response_Server* _internal_add_servers();
  public:
  const ::CGameServers_GetServerList_Response_Server& servers(int index) const;
  ::CGameServers_GetServerList_Response_Server* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_GetServerList_Response_Server >&
      servers() const;

  // @@protoc_insertion_point(class_scope:CGameServers_GetServerList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_GetServerList_Response_Server > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerSteamIDsByIP_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GetServerSteamIDsByIP_Request) */ {
 public:
  inline CGameServers_GetServerSteamIDsByIP_Request() : CGameServers_GetServerSteamIDsByIP_Request(nullptr) {}
  ~CGameServers_GetServerSteamIDsByIP_Request() override;
  explicit constexpr CGameServers_GetServerSteamIDsByIP_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GetServerSteamIDsByIP_Request(const CGameServers_GetServerSteamIDsByIP_Request& from);
  CGameServers_GetServerSteamIDsByIP_Request(CGameServers_GetServerSteamIDsByIP_Request&& from) noexcept
    : CGameServers_GetServerSteamIDsByIP_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerSteamIDsByIP_Request& operator=(const CGameServers_GetServerSteamIDsByIP_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GetServerSteamIDsByIP_Request& operator=(CGameServers_GetServerSteamIDsByIP_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GetServerSteamIDsByIP_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GetServerSteamIDsByIP_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerSteamIDsByIP_Request*>(
               &_CGameServers_GetServerSteamIDsByIP_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CGameServers_GetServerSteamIDsByIP_Request& a, CGameServers_GetServerSteamIDsByIP_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GetServerSteamIDsByIP_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GetServerSteamIDsByIP_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GetServerSteamIDsByIP_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GetServerSteamIDsByIP_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GetServerSteamIDsByIP_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GetServerSteamIDsByIP_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerSteamIDsByIP_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GetServerSteamIDsByIP_Request";
  }
  protected:
  explicit CGameServers_GetServerSteamIDsByIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpsFieldNumber = 1,
  };
  // repeated string server_ips = 1;
  int server_ips_size() const;
  private:
  int _internal_server_ips_size() const;
  public:
  void clear_server_ips();
  const std::string& server_ips(int index) const;
  std::string* mutable_server_ips(int index);
  void set_server_ips(int index, const std::string& value);
  void set_server_ips(int index, std::string&& value);
  void set_server_ips(int index, const char* value);
  void set_server_ips(int index, const char* value, size_t size);
  std::string* add_server_ips();
  void add_server_ips(const std::string& value);
  void add_server_ips(std::string&& value);
  void add_server_ips(const char* value);
  void add_server_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& server_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_server_ips();
  private:
  const std::string& _internal_server_ips(int index) const;
  std::string* _internal_add_server_ips();
  public:

  // @@protoc_insertion_point(class_scope:CGameServers_GetServerSteamIDsByIP_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> server_ips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_IPsWithSteamIDs_Response_Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_IPsWithSteamIDs_Response.Server) */ {
 public:
  inline CGameServers_IPsWithSteamIDs_Response_Server() : CGameServers_IPsWithSteamIDs_Response_Server(nullptr) {}
  ~CGameServers_IPsWithSteamIDs_Response_Server() override;
  explicit constexpr CGameServers_IPsWithSteamIDs_Response_Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_IPsWithSteamIDs_Response_Server(const CGameServers_IPsWithSteamIDs_Response_Server& from);
  CGameServers_IPsWithSteamIDs_Response_Server(CGameServers_IPsWithSteamIDs_Response_Server&& from) noexcept
    : CGameServers_IPsWithSteamIDs_Response_Server() {
    *this = ::std::move(from);
  }

  inline CGameServers_IPsWithSteamIDs_Response_Server& operator=(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_IPsWithSteamIDs_Response_Server& operator=(CGameServers_IPsWithSteamIDs_Response_Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_IPsWithSteamIDs_Response_Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_IPsWithSteamIDs_Response_Server* internal_default_instance() {
    return reinterpret_cast<const CGameServers_IPsWithSteamIDs_Response_Server*>(
               &_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameServers_IPsWithSteamIDs_Response_Server& a, CGameServers_IPsWithSteamIDs_Response_Server& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_IPsWithSteamIDs_Response_Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response_Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_IPsWithSteamIDs_Response_Server* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_IPsWithSteamIDs_Response.Server";
  }
  protected:
  explicit CGameServers_IPsWithSteamIDs_Response_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kSteamidFieldNumber = 2,
  };
  // optional string addr = 1;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGameServers_IPsWithSteamIDs_Response.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_IPsWithSteamIDs_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_IPsWithSteamIDs_Response) */ {
 public:
  inline CGameServers_IPsWithSteamIDs_Response() : CGameServers_IPsWithSteamIDs_Response(nullptr) {}
  ~CGameServers_IPsWithSteamIDs_Response() override;
  explicit constexpr CGameServers_IPsWithSteamIDs_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_IPsWithSteamIDs_Response(const CGameServers_IPsWithSteamIDs_Response& from);
  CGameServers_IPsWithSteamIDs_Response(CGameServers_IPsWithSteamIDs_Response&& from) noexcept
    : CGameServers_IPsWithSteamIDs_Response() {
    *this = ::std::move(from);
  }

  inline CGameServers_IPsWithSteamIDs_Response& operator=(const CGameServers_IPsWithSteamIDs_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_IPsWithSteamIDs_Response& operator=(CGameServers_IPsWithSteamIDs_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_IPsWithSteamIDs_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_IPsWithSteamIDs_Response* internal_default_instance() {
    return reinterpret_cast<const CGameServers_IPsWithSteamIDs_Response*>(
               &_CGameServers_IPsWithSteamIDs_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CGameServers_IPsWithSteamIDs_Response& a, CGameServers_IPsWithSteamIDs_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_IPsWithSteamIDs_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_IPsWithSteamIDs_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_IPsWithSteamIDs_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_IPsWithSteamIDs_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_IPsWithSteamIDs_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_IPsWithSteamIDs_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_IPsWithSteamIDs_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_IPsWithSteamIDs_Response";
  }
  protected:
  explicit CGameServers_IPsWithSteamIDs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameServers_IPsWithSteamIDs_Response_Server Server;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::CGameServers_IPsWithSteamIDs_Response_Server* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_IPsWithSteamIDs_Response_Server >*
      mutable_servers();
  private:
  const ::CGameServers_IPsWithSteamIDs_Response_Server& _internal_servers(int index) const;
  ::CGameServers_IPsWithSteamIDs_Response_Server* _internal_add_servers();
  public:
  const ::CGameServers_IPsWithSteamIDs_Response_Server& servers(int index) const;
  ::CGameServers_IPsWithSteamIDs_Response_Server* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_IPsWithSteamIDs_Response_Server >&
      servers() const;

  // @@protoc_insertion_point(class_scope:CGameServers_IPsWithSteamIDs_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_IPsWithSteamIDs_Response_Server > servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GetServerIPsBySteamID_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GetServerIPsBySteamID_Request) */ {
 public:
  inline CGameServers_GetServerIPsBySteamID_Request() : CGameServers_GetServerIPsBySteamID_Request(nullptr) {}
  ~CGameServers_GetServerIPsBySteamID_Request() override;
  explicit constexpr CGameServers_GetServerIPsBySteamID_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GetServerIPsBySteamID_Request(const CGameServers_GetServerIPsBySteamID_Request& from);
  CGameServers_GetServerIPsBySteamID_Request(CGameServers_GetServerIPsBySteamID_Request&& from) noexcept
    : CGameServers_GetServerIPsBySteamID_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_GetServerIPsBySteamID_Request& operator=(const CGameServers_GetServerIPsBySteamID_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GetServerIPsBySteamID_Request& operator=(CGameServers_GetServerIPsBySteamID_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GetServerIPsBySteamID_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GetServerIPsBySteamID_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GetServerIPsBySteamID_Request*>(
               &_CGameServers_GetServerIPsBySteamID_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CGameServers_GetServerIPsBySteamID_Request& a, CGameServers_GetServerIPsBySteamID_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GetServerIPsBySteamID_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GetServerIPsBySteamID_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GetServerIPsBySteamID_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GetServerIPsBySteamID_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GetServerIPsBySteamID_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GetServerIPsBySteamID_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GetServerIPsBySteamID_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GetServerIPsBySteamID_Request";
  }
  protected:
  explicit CGameServers_GetServerIPsBySteamID_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerSteamidsFieldNumber = 1,
  };
  // repeated fixed64 server_steamids = 1;
  int server_steamids_size() const;
  private:
  int _internal_server_steamids_size() const;
  public:
  void clear_server_steamids();
  private:
  uint64_t _internal_server_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_server_steamids() const;
  void _internal_add_server_steamids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_server_steamids();
  public:
  uint64_t server_steamids(int index) const;
  void set_server_steamids(int index, uint64_t value);
  void add_server_steamids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      server_steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_server_steamids();

  // @@protoc_insertion_point(class_scope:CGameServers_GetServerIPsBySteamID_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > server_steamids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_QueryByFakeIP_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_QueryByFakeIP_Request) */ {
 public:
  inline CGameServers_QueryByFakeIP_Request() : CGameServers_QueryByFakeIP_Request(nullptr) {}
  ~CGameServers_QueryByFakeIP_Request() override;
  explicit constexpr CGameServers_QueryByFakeIP_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_QueryByFakeIP_Request(const CGameServers_QueryByFakeIP_Request& from);
  CGameServers_QueryByFakeIP_Request(CGameServers_QueryByFakeIP_Request&& from) noexcept
    : CGameServers_QueryByFakeIP_Request() {
    *this = ::std::move(from);
  }

  inline CGameServers_QueryByFakeIP_Request& operator=(const CGameServers_QueryByFakeIP_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_QueryByFakeIP_Request& operator=(CGameServers_QueryByFakeIP_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_QueryByFakeIP_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_QueryByFakeIP_Request* internal_default_instance() {
    return reinterpret_cast<const CGameServers_QueryByFakeIP_Request*>(
               &_CGameServers_QueryByFakeIP_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CGameServers_QueryByFakeIP_Request& a, CGameServers_QueryByFakeIP_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_QueryByFakeIP_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_QueryByFakeIP_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_QueryByFakeIP_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_QueryByFakeIP_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_QueryByFakeIP_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_QueryByFakeIP_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_QueryByFakeIP_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_QueryByFakeIP_Request";
  }
  protected:
  explicit CGameServers_QueryByFakeIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameServers_QueryByFakeIP_Request_EQueryType EQueryType;
  static constexpr EQueryType Query_Invalid =
    CGameServers_QueryByFakeIP_Request_EQueryType_Query_Invalid;
  static constexpr EQueryType Query_Ping =
    CGameServers_QueryByFakeIP_Request_EQueryType_Query_Ping;
  static constexpr EQueryType Query_Players =
    CGameServers_QueryByFakeIP_Request_EQueryType_Query_Players;
  static constexpr EQueryType Query_Rules =
    CGameServers_QueryByFakeIP_Request_EQueryType_Query_Rules;
  static inline bool EQueryType_IsValid(int value) {
    return CGameServers_QueryByFakeIP_Request_EQueryType_IsValid(value);
  }
  static constexpr EQueryType EQueryType_MIN =
    CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_MIN;
  static constexpr EQueryType EQueryType_MAX =
    CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_MAX;
  static constexpr int EQueryType_ARRAYSIZE =
    CGameServers_QueryByFakeIP_Request_EQueryType_EQueryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EQueryType_descriptor() {
    return CGameServers_QueryByFakeIP_Request_EQueryType_descriptor();
  }
  template<typename T>
  static inline const std::string& EQueryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EQueryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EQueryType_Name.");
    return CGameServers_QueryByFakeIP_Request_EQueryType_Name(enum_t_value);
  }
  static inline bool EQueryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EQueryType* value) {
    return CGameServers_QueryByFakeIP_Request_EQueryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFakeIpFieldNumber = 1,
    kFakePortFieldNumber = 2,
    kAppIdFieldNumber = 3,
    kQueryTypeFieldNumber = 4,
  };
  // optional uint32 fake_ip = 1 [(.description) = "FakeIP of server to query."];
  bool has_fake_ip() const;
  private:
  bool _internal_has_fake_ip() const;
  public:
  void clear_fake_ip();
  uint32_t fake_ip() const;
  void set_fake_ip(uint32_t value);
  private:
  uint32_t _internal_fake_ip() const;
  void _internal_set_fake_ip(uint32_t value);
  public:

  // optional uint32 fake_port = 2 [(.description) = "Fake port of server to query."];
  bool has_fake_port() const;
  private:
  bool _internal_has_fake_port() const;
  public:
  void clear_fake_port();
  uint32_t fake_port() const;
  void set_fake_port(uint32_t value);
  private:
  uint32_t _internal_fake_port() const;
  void _internal_set_fake_port(uint32_t value);
  public:

  // optional uint32 app_id = 3 [(.description) = "AppID to use.  Each AppID has its own FakeIP address."];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid, (.description) = "What type of query?"];
  bool has_query_type() const;
  private:
  bool _internal_has_query_type() const;
  public:
  void clear_query_type();
  ::CGameServers_QueryByFakeIP_Request_EQueryType query_type() const;
  void set_query_type(::CGameServers_QueryByFakeIP_Request_EQueryType value);
  private:
  ::CGameServers_QueryByFakeIP_Request_EQueryType _internal_query_type() const;
  void _internal_set_query_type(::CGameServers_QueryByFakeIP_Request_EQueryType value);
  public:

  // @@protoc_insertion_point(class_scope:CGameServers_QueryByFakeIP_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t fake_ip_;
  uint32_t fake_port_;
  uint32_t app_id_;
  int query_type_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerPingQueryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerPingQueryData) */ {
 public:
  inline CMsgGameServerPingQueryData() : CMsgGameServerPingQueryData(nullptr) {}
  ~CMsgGameServerPingQueryData() override;
  explicit constexpr CMsgGameServerPingQueryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerPingQueryData(const CMsgGameServerPingQueryData& from);
  CMsgGameServerPingQueryData(CMsgGameServerPingQueryData&& from) noexcept
    : CMsgGameServerPingQueryData() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerPingQueryData& operator=(const CMsgGameServerPingQueryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerPingQueryData& operator=(CMsgGameServerPingQueryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerPingQueryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerPingQueryData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerPingQueryData*>(
               &_CMsgGameServerPingQueryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgGameServerPingQueryData& a, CMsgGameServerPingQueryData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerPingQueryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerPingQueryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerPingQueryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerPingQueryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerPingQueryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameServerPingQueryData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerPingQueryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerPingQueryData";
  }
  protected:
  explicit CMsgGameServerPingQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectatorServerNameFieldNumber = 5,
    kServerNameFieldNumber = 6,
    kGamedirFieldNumber = 9,
    kMapFieldNumber = 10,
    kGameDescriptionFieldNumber = 11,
    kGametypeFieldNumber = 12,
    kVersionFieldNumber = 19,
    kSdrLocationStringFieldNumber = 21,
    kServerIpFieldNumber = 1,
    kQueryPortFieldNumber = 2,
    kGamePortFieldNumber = 3,
    kSpectatorPortFieldNumber = 4,
    kAppIdFieldNumber = 8,
    kSteamidFieldNumber = 7,
    kNumPlayersFieldNumber = 13,
    kMaxPlayersFieldNumber = 14,
    kNumBotsFieldNumber = 15,
    kPasswordFieldNumber = 16,
    kSecureFieldNumber = 17,
    kDedicatedFieldNumber = 18,
    kSdrPopidFieldNumber = 20,
  };
  // optional string spectator_server_name = 5;
  bool has_spectator_server_name() const;
  private:
  bool _internal_has_spectator_server_name() const;
  public:
  void clear_spectator_server_name();
  const std::string& spectator_server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spectator_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spectator_server_name();
  PROTOBUF_NODISCARD std::string* release_spectator_server_name();
  void set_allocated_spectator_server_name(std::string* spectator_server_name);
  private:
  const std::string& _internal_spectator_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spectator_server_name(const std::string& value);
  std::string* _internal_mutable_spectator_server_name();
  public:

  // optional string server_name = 6;
  bool has_server_name() const;
  private:
  bool _internal_has_server_name() const;
  public:
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // optional string gamedir = 9;
  bool has_gamedir() const;
  private:
  bool _internal_has_gamedir() const;
  public:
  void clear_gamedir();
  const std::string& gamedir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedir();
  PROTOBUF_NODISCARD std::string* release_gamedir();
  void set_allocated_gamedir(std::string* gamedir);
  private:
  const std::string& _internal_gamedir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedir(const std::string& value);
  std::string* _internal_mutable_gamedir();
  public:

  // optional string map = 10;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional string game_description = 11;
  bool has_game_description() const;
  private:
  bool _internal_has_game_description() const;
  public:
  void clear_game_description();
  const std::string& game_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_description();
  PROTOBUF_NODISCARD std::string* release_game_description();
  void set_allocated_game_description(std::string* game_description);
  private:
  const std::string& _internal_game_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_description(const std::string& value);
  std::string* _internal_mutable_game_description();
  public:

  // optional string gametype = 12;
  bool has_gametype() const;
  private:
  bool _internal_has_gametype() const;
  public:
  void clear_gametype();
  const std::string& gametype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gametype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gametype();
  PROTOBUF_NODISCARD std::string* release_gametype();
  void set_allocated_gametype(std::string* gametype);
  private:
  const std::string& _internal_gametype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gametype(const std::string& value);
  std::string* _internal_mutable_gametype();
  public:

  // optional string version = 19;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string sdr_location_string = 21;
  bool has_sdr_location_string() const;
  private:
  bool _internal_has_sdr_location_string() const;
  public:
  void clear_sdr_location_string();
  const std::string& sdr_location_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdr_location_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdr_location_string();
  PROTOBUF_NODISCARD std::string* release_sdr_location_string();
  void set_allocated_sdr_location_string(std::string* sdr_location_string);
  private:
  const std::string& _internal_sdr_location_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdr_location_string(const std::string& value);
  std::string* _internal_mutable_sdr_location_string();
  public:

  // optional .CMsgIPAddress server_ip = 1;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  const ::CMsgIPAddress& server_ip() const;
  PROTOBUF_NODISCARD ::CMsgIPAddress* release_server_ip();
  ::CMsgIPAddress* mutable_server_ip();
  void set_allocated_server_ip(::CMsgIPAddress* server_ip);
  private:
  const ::CMsgIPAddress& _internal_server_ip() const;
  ::CMsgIPAddress* _internal_mutable_server_ip();
  public:
  void unsafe_arena_set_allocated_server_ip(
      ::CMsgIPAddress* server_ip);
  ::CMsgIPAddress* unsafe_arena_release_server_ip();

  // optional uint32 query_port = 2;
  bool has_query_port() const;
  private:
  bool _internal_has_query_port() const;
  public:
  void clear_query_port();
  uint32_t query_port() const;
  void set_query_port(uint32_t value);
  private:
  uint32_t _internal_query_port() const;
  void _internal_set_query_port(uint32_t value);
  public:

  // optional uint32 game_port = 3;
  bool has_game_port() const;
  private:
  bool _internal_has_game_port() const;
  public:
  void clear_game_port();
  uint32_t game_port() const;
  void set_game_port(uint32_t value);
  private:
  uint32_t _internal_game_port() const;
  void _internal_set_game_port(uint32_t value);
  public:

  // optional uint32 spectator_port = 4;
  bool has_spectator_port() const;
  private:
  bool _internal_has_spectator_port() const;
  public:
  void clear_spectator_port();
  uint32_t spectator_port() const;
  void set_spectator_port(uint32_t value);
  private:
  uint32_t _internal_spectator_port() const;
  void _internal_set_spectator_port(uint32_t value);
  public:

  // optional uint32 app_id = 8;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional fixed64 steamid = 7;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 num_players = 13;
  bool has_num_players() const;
  private:
  bool _internal_has_num_players() const;
  public:
  void clear_num_players();
  uint32_t num_players() const;
  void set_num_players(uint32_t value);
  private:
  uint32_t _internal_num_players() const;
  void _internal_set_num_players(uint32_t value);
  public:

  // optional uint32 max_players = 14;
  bool has_max_players() const;
  private:
  bool _internal_has_max_players() const;
  public:
  void clear_max_players();
  uint32_t max_players() const;
  void set_max_players(uint32_t value);
  private:
  uint32_t _internal_max_players() const;
  void _internal_set_max_players(uint32_t value);
  public:

  // optional uint32 num_bots = 15;
  bool has_num_bots() const;
  private:
  bool _internal_has_num_bots() const;
  public:
  void clear_num_bots();
  uint32_t num_bots() const;
  void set_num_bots(uint32_t value);
  private:
  uint32_t _internal_num_bots() const;
  void _internal_set_num_bots(uint32_t value);
  public:

  // optional bool password = 16;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  bool password() const;
  void set_password(bool value);
  private:
  bool _internal_password() const;
  void _internal_set_password(bool value);
  public:

  // optional bool secure = 17;
  bool has_secure() const;
  private:
  bool _internal_has_secure() const;
  public:
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);
  private:
  bool _internal_secure() const;
  void _internal_set_secure(bool value);
  public:

  // optional bool dedicated = 18;
  bool has_dedicated() const;
  private:
  bool _internal_has_dedicated() const;
  public:
  void clear_dedicated();
  bool dedicated() const;
  void set_dedicated(bool value);
  private:
  bool _internal_dedicated() const;
  void _internal_set_dedicated(bool value);
  public:

  // optional fixed32 sdr_popid = 20;
  bool has_sdr_popid() const;
  private:
  bool _internal_has_sdr_popid() const;
  public:
  void clear_sdr_popid();
  uint32_t sdr_popid() const;
  void set_sdr_popid(uint32_t value);
  private:
  uint32_t _internal_sdr_popid() const;
  void _internal_set_sdr_popid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerPingQueryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spectator_server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gametype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdr_location_string_;
  ::CMsgIPAddress* server_ip_;
  uint32_t query_port_;
  uint32_t game_port_;
  uint32_t spectator_port_;
  uint32_t app_id_;
  uint64_t steamid_;
  uint32_t num_players_;
  uint32_t max_players_;
  uint32_t num_bots_;
  bool password_;
  bool secure_;
  bool dedicated_;
  uint32_t sdr_popid_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerPlayersQueryData_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerPlayersQueryData.Player) */ {
 public:
  inline CMsgGameServerPlayersQueryData_Player() : CMsgGameServerPlayersQueryData_Player(nullptr) {}
  ~CMsgGameServerPlayersQueryData_Player() override;
  explicit constexpr CMsgGameServerPlayersQueryData_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerPlayersQueryData_Player(const CMsgGameServerPlayersQueryData_Player& from);
  CMsgGameServerPlayersQueryData_Player(CMsgGameServerPlayersQueryData_Player&& from) noexcept
    : CMsgGameServerPlayersQueryData_Player() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerPlayersQueryData_Player& operator=(const CMsgGameServerPlayersQueryData_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerPlayersQueryData_Player& operator=(CMsgGameServerPlayersQueryData_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerPlayersQueryData_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerPlayersQueryData_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerPlayersQueryData_Player*>(
               &_CMsgGameServerPlayersQueryData_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgGameServerPlayersQueryData_Player& a, CMsgGameServerPlayersQueryData_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerPlayersQueryData_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerPlayersQueryData_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerPlayersQueryData_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerPlayersQueryData_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerPlayersQueryData_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameServerPlayersQueryData_Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerPlayersQueryData_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerPlayersQueryData.Player";
  }
  protected:
  explicit CMsgGameServerPlayersQueryData_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
    kTimePlayedFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // optional uint32 time_played = 3;
  bool has_time_played() const;
  private:
  bool _internal_has_time_played() const;
  public:
  void clear_time_played();
  uint32_t time_played() const;
  void set_time_played(uint32_t value);
  private:
  uint32_t _internal_time_played() const;
  void _internal_set_time_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerPlayersQueryData.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t score_;
  uint32_t time_played_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerPlayersQueryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerPlayersQueryData) */ {
 public:
  inline CMsgGameServerPlayersQueryData() : CMsgGameServerPlayersQueryData(nullptr) {}
  ~CMsgGameServerPlayersQueryData() override;
  explicit constexpr CMsgGameServerPlayersQueryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerPlayersQueryData(const CMsgGameServerPlayersQueryData& from);
  CMsgGameServerPlayersQueryData(CMsgGameServerPlayersQueryData&& from) noexcept
    : CMsgGameServerPlayersQueryData() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerPlayersQueryData& operator=(const CMsgGameServerPlayersQueryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerPlayersQueryData& operator=(CMsgGameServerPlayersQueryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerPlayersQueryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerPlayersQueryData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerPlayersQueryData*>(
               &_CMsgGameServerPlayersQueryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgGameServerPlayersQueryData& a, CMsgGameServerPlayersQueryData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerPlayersQueryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerPlayersQueryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerPlayersQueryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerPlayersQueryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerPlayersQueryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameServerPlayersQueryData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerPlayersQueryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerPlayersQueryData";
  }
  protected:
  explicit CMsgGameServerPlayersQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerPlayersQueryData_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .CMsgGameServerPlayersQueryData.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGameServerPlayersQueryData_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerPlayersQueryData_Player >*
      mutable_players();
  private:
  const ::CMsgGameServerPlayersQueryData_Player& _internal_players(int index) const;
  ::CMsgGameServerPlayersQueryData_Player* _internal_add_players();
  public:
  const ::CMsgGameServerPlayersQueryData_Player& players(int index) const;
  ::CMsgGameServerPlayersQueryData_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerPlayersQueryData_Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgGameServerPlayersQueryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerPlayersQueryData_Player > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerRulesQueryData_Rule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerRulesQueryData.Rule) */ {
 public:
  inline CMsgGameServerRulesQueryData_Rule() : CMsgGameServerRulesQueryData_Rule(nullptr) {}
  ~CMsgGameServerRulesQueryData_Rule() override;
  explicit constexpr CMsgGameServerRulesQueryData_Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerRulesQueryData_Rule(const CMsgGameServerRulesQueryData_Rule& from);
  CMsgGameServerRulesQueryData_Rule(CMsgGameServerRulesQueryData_Rule&& from) noexcept
    : CMsgGameServerRulesQueryData_Rule() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerRulesQueryData_Rule& operator=(const CMsgGameServerRulesQueryData_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerRulesQueryData_Rule& operator=(CMsgGameServerRulesQueryData_Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerRulesQueryData_Rule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerRulesQueryData_Rule* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerRulesQueryData_Rule*>(
               &_CMsgGameServerRulesQueryData_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgGameServerRulesQueryData_Rule& a, CMsgGameServerRulesQueryData_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerRulesQueryData_Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerRulesQueryData_Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerRulesQueryData_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerRulesQueryData_Rule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerRulesQueryData_Rule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameServerRulesQueryData_Rule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerRulesQueryData_Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerRulesQueryData.Rule";
  }
  protected:
  explicit CMsgGameServerRulesQueryData_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string rule = 1;
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  const std::string& rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rule();
  PROTOBUF_NODISCARD std::string* release_rule();
  void set_allocated_rule(std::string* rule);
  private:
  const std::string& _internal_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule(const std::string& value);
  std::string* _internal_mutable_rule();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerRulesQueryData.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerRulesQueryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerRulesQueryData) */ {
 public:
  inline CMsgGameServerRulesQueryData() : CMsgGameServerRulesQueryData(nullptr) {}
  ~CMsgGameServerRulesQueryData() override;
  explicit constexpr CMsgGameServerRulesQueryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerRulesQueryData(const CMsgGameServerRulesQueryData& from);
  CMsgGameServerRulesQueryData(CMsgGameServerRulesQueryData&& from) noexcept
    : CMsgGameServerRulesQueryData() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerRulesQueryData& operator=(const CMsgGameServerRulesQueryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerRulesQueryData& operator=(CMsgGameServerRulesQueryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerRulesQueryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerRulesQueryData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerRulesQueryData*>(
               &_CMsgGameServerRulesQueryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgGameServerRulesQueryData& a, CMsgGameServerRulesQueryData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerRulesQueryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerRulesQueryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerRulesQueryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerRulesQueryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerRulesQueryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGameServerRulesQueryData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerRulesQueryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerRulesQueryData";
  }
  protected:
  explicit CMsgGameServerRulesQueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerRulesQueryData_Rule Rule;

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .CMsgGameServerRulesQueryData.Rule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::CMsgGameServerRulesQueryData_Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerRulesQueryData_Rule >*
      mutable_rules();
  private:
  const ::CMsgGameServerRulesQueryData_Rule& _internal_rules(int index) const;
  ::CMsgGameServerRulesQueryData_Rule* _internal_add_rules();
  public:
  const ::CMsgGameServerRulesQueryData_Rule& rules(int index) const;
  ::CMsgGameServerRulesQueryData_Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerRulesQueryData_Rule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:CMsgGameServerRulesQueryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerRulesQueryData_Rule > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameServers_GameServerQuery_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameServers_GameServerQuery_Response) */ {
 public:
  inline CGameServers_GameServerQuery_Response() : CGameServers_GameServerQuery_Response(nullptr) {}
  ~CGameServers_GameServerQuery_Response() override;
  explicit constexpr CGameServers_GameServerQuery_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameServers_GameServerQuery_Response(const CGameServers_GameServerQuery_Response& from);
  CGameServers_GameServerQuery_Response(CGameServers_GameServerQuery_Response&& from) noexcept
    : CGameServers_GameServerQuery_Response() {
    *this = ::std::move(from);
  }

  inline CGameServers_GameServerQuery_Response& operator=(const CGameServers_GameServerQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameServers_GameServerQuery_Response& operator=(CGameServers_GameServerQuery_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameServers_GameServerQuery_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameServers_GameServerQuery_Response* internal_default_instance() {
    return reinterpret_cast<const CGameServers_GameServerQuery_Response*>(
               &_CGameServers_GameServerQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CGameServers_GameServerQuery_Response& a, CGameServers_GameServerQuery_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameServers_GameServerQuery_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameServers_GameServerQuery_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameServers_GameServerQuery_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameServers_GameServerQuery_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameServers_GameServerQuery_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameServers_GameServerQuery_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameServers_GameServerQuery_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameServers_GameServerQuery_Response";
  }
  protected:
  explicit CGameServers_GameServerQuery_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingDataFieldNumber = 1,
    kPlayersDataFieldNumber = 2,
    kRulesDataFieldNumber = 3,
  };
  // optional .CMsgGameServerPingQueryData ping_data = 1;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::CMsgGameServerPingQueryData& ping_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerPingQueryData* release_ping_data();
  ::CMsgGameServerPingQueryData* mutable_ping_data();
  void set_allocated_ping_data(::CMsgGameServerPingQueryData* ping_data);
  private:
  const ::CMsgGameServerPingQueryData& _internal_ping_data() const;
  ::CMsgGameServerPingQueryData* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::CMsgGameServerPingQueryData* ping_data);
  ::CMsgGameServerPingQueryData* unsafe_arena_release_ping_data();

  // optional .CMsgGameServerPlayersQueryData players_data = 2;
  bool has_players_data() const;
  private:
  bool _internal_has_players_data() const;
  public:
  void clear_players_data();
  const ::CMsgGameServerPlayersQueryData& players_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerPlayersQueryData* release_players_data();
  ::CMsgGameServerPlayersQueryData* mutable_players_data();
  void set_allocated_players_data(::CMsgGameServerPlayersQueryData* players_data);
  private:
  const ::CMsgGameServerPlayersQueryData& _internal_players_data() const;
  ::CMsgGameServerPlayersQueryData* _internal_mutable_players_data();
  public:
  void unsafe_arena_set_allocated_players_data(
      ::CMsgGameServerPlayersQueryData* players_data);
  ::CMsgGameServerPlayersQueryData* unsafe_arena_release_players_data();

  // optional .CMsgGameServerRulesQueryData rules_data = 3;
  bool has_rules_data() const;
  private:
  bool _internal_has_rules_data() const;
  public:
  void clear_rules_data();
  const ::CMsgGameServerRulesQueryData& rules_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerRulesQueryData* release_rules_data();
  ::CMsgGameServerRulesQueryData* mutable_rules_data();
  void set_allocated_rules_data(::CMsgGameServerRulesQueryData* rules_data);
  private:
  const ::CMsgGameServerRulesQueryData& _internal_rules_data() const;
  ::CMsgGameServerRulesQueryData* _internal_mutable_rules_data();
  public:
  void unsafe_arena_set_allocated_rules_data(
      ::CMsgGameServerRulesQueryData* rules_data);
  ::CMsgGameServerRulesQueryData* unsafe_arena_release_rules_data();

  // @@protoc_insertion_point(class_scope:CGameServers_GameServerQuery_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGameServerPingQueryData* ping_data_;
  ::CMsgGameServerPlayersQueryData* players_data_;
  ::CMsgGameServerRulesQueryData* rules_data_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class GameServerClient_QueryServerData_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:GameServerClient_QueryServerData_Request) */ {
 public:
  inline GameServerClient_QueryServerData_Request() : GameServerClient_QueryServerData_Request(nullptr) {}
  explicit constexpr GameServerClient_QueryServerData_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerClient_QueryServerData_Request(const GameServerClient_QueryServerData_Request& from);
  GameServerClient_QueryServerData_Request(GameServerClient_QueryServerData_Request&& from) noexcept
    : GameServerClient_QueryServerData_Request() {
    *this = ::std::move(from);
  }

  inline GameServerClient_QueryServerData_Request& operator=(const GameServerClient_QueryServerData_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerClient_QueryServerData_Request& operator=(GameServerClient_QueryServerData_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerClient_QueryServerData_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerClient_QueryServerData_Request* internal_default_instance() {
    return reinterpret_cast<const GameServerClient_QueryServerData_Request*>(
               &_GameServerClient_QueryServerData_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GameServerClient_QueryServerData_Request& a, GameServerClient_QueryServerData_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerClient_QueryServerData_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerClient_QueryServerData_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameServerClient_QueryServerData_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameServerClient_QueryServerData_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GameServerClient_QueryServerData_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GameServerClient_QueryServerData_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerClient_QueryServerData_Request";
  }
  protected:
  explicit GameServerClient_QueryServerData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameServerClient_QueryServerData_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class GameServerClient_QueryServerData_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameServerClient_QueryServerData_Response) */ {
 public:
  inline GameServerClient_QueryServerData_Response() : GameServerClient_QueryServerData_Response(nullptr) {}
  ~GameServerClient_QueryServerData_Response() override;
  explicit constexpr GameServerClient_QueryServerData_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerClient_QueryServerData_Response(const GameServerClient_QueryServerData_Response& from);
  GameServerClient_QueryServerData_Response(GameServerClient_QueryServerData_Response&& from) noexcept
    : GameServerClient_QueryServerData_Response() {
    *this = ::std::move(from);
  }

  inline GameServerClient_QueryServerData_Response& operator=(const GameServerClient_QueryServerData_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerClient_QueryServerData_Response& operator=(GameServerClient_QueryServerData_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerClient_QueryServerData_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerClient_QueryServerData_Response* internal_default_instance() {
    return reinterpret_cast<const GameServerClient_QueryServerData_Response*>(
               &_GameServerClient_QueryServerData_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameServerClient_QueryServerData_Response& a, GameServerClient_QueryServerData_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerClient_QueryServerData_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerClient_QueryServerData_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameServerClient_QueryServerData_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameServerClient_QueryServerData_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameServerClient_QueryServerData_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameServerClient_QueryServerData_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerClient_QueryServerData_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerClient_QueryServerData_Response";
  }
  protected:
  explicit GameServerClient_QueryServerData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingDataFieldNumber = 1,
    kPlayersDataFieldNumber = 2,
    kRulesDataFieldNumber = 3,
  };
  // optional .CMsgGameServerPingQueryData ping_data = 1;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::CMsgGameServerPingQueryData& ping_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerPingQueryData* release_ping_data();
  ::CMsgGameServerPingQueryData* mutable_ping_data();
  void set_allocated_ping_data(::CMsgGameServerPingQueryData* ping_data);
  private:
  const ::CMsgGameServerPingQueryData& _internal_ping_data() const;
  ::CMsgGameServerPingQueryData* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::CMsgGameServerPingQueryData* ping_data);
  ::CMsgGameServerPingQueryData* unsafe_arena_release_ping_data();

  // optional .CMsgGameServerPlayersQueryData players_data = 2;
  bool has_players_data() const;
  private:
  bool _internal_has_players_data() const;
  public:
  void clear_players_data();
  const ::CMsgGameServerPlayersQueryData& players_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerPlayersQueryData* release_players_data();
  ::CMsgGameServerPlayersQueryData* mutable_players_data();
  void set_allocated_players_data(::CMsgGameServerPlayersQueryData* players_data);
  private:
  const ::CMsgGameServerPlayersQueryData& _internal_players_data() const;
  ::CMsgGameServerPlayersQueryData* _internal_mutable_players_data();
  public:
  void unsafe_arena_set_allocated_players_data(
      ::CMsgGameServerPlayersQueryData* players_data);
  ::CMsgGameServerPlayersQueryData* unsafe_arena_release_players_data();

  // optional .CMsgGameServerRulesQueryData rules_data = 3;
  bool has_rules_data() const;
  private:
  bool _internal_has_rules_data() const;
  public:
  void clear_rules_data();
  const ::CMsgGameServerRulesQueryData& rules_data() const;
  PROTOBUF_NODISCARD ::CMsgGameServerRulesQueryData* release_rules_data();
  ::CMsgGameServerRulesQueryData* mutable_rules_data();
  void set_allocated_rules_data(::CMsgGameServerRulesQueryData* rules_data);
  private:
  const ::CMsgGameServerRulesQueryData& _internal_rules_data() const;
  ::CMsgGameServerRulesQueryData* _internal_mutable_rules_data();
  public:
  void unsafe_arena_set_allocated_rules_data(
      ::CMsgGameServerRulesQueryData* rules_data);
  ::CMsgGameServerRulesQueryData* unsafe_arena_release_rules_data();

  // @@protoc_insertion_point(class_scope:GameServerClient_QueryServerData_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGameServerPingQueryData* ping_data_;
  ::CMsgGameServerPlayersQueryData* players_data_;
  ::CMsgGameServerRulesQueryData* rules_data_;
  friend struct ::TableStruct_steammessages_5fgameservers_2esteamclient_2eproto;
};
// ===================================================================

class GameServers_Stub;

class GameServers : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameServers() {};
 public:
  virtual ~GameServers();

  typedef GameServers_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetServerList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerList_Request* request,
                       ::CGameServers_GetServerList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetServerSteamIDsByIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerSteamIDsByIP_Request* request,
                       ::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetServerIPsBySteamID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerIPsBySteamID_Request* request,
                       ::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryByFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_QueryByFakeIP_Request* request,
                       ::CGameServers_GameServerQuery_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServers);
};

class GameServers_Stub : public GameServers {
 public:
  GameServers_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameServers_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameServers_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameServers ------------------------------------------

  void GetServerList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerList_Request* request,
                       ::CGameServers_GetServerList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetServerSteamIDsByIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerSteamIDsByIP_Request* request,
                       ::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  void GetServerIPsBySteamID(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_GetServerIPsBySteamID_Request* request,
                       ::CGameServers_IPsWithSteamIDs_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryByFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameServers_QueryByFakeIP_Request* request,
                       ::CGameServers_GameServerQuery_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServers_Stub);
};


// -------------------------------------------------------------------

class GameServerClient_Stub;

class GameServerClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameServerClient() {};
 public:
  virtual ~GameServerClient();

  typedef GameServerClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void QueryServerData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GameServerClient_QueryServerData_Request* request,
                       ::GameServerClient_QueryServerData_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServerClient);
};

class GameServerClient_Stub : public GameServerClient {
 public:
  GameServerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameServerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameServerClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameServerClient ------------------------------------------

  void QueryServerData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GameServerClient_QueryServerData_Request* request,
                       ::GameServerClient_QueryServerData_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameServerClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameServers_GetServerList_Request

// optional string filter = 1 [(.description) = "Query filter string."];
inline bool CGameServers_GetServerList_Request::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Request::has_filter() const {
  return _internal_has_filter();
}
inline void CGameServers_GetServerList_Request::clear_filter() {
  filter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameServers_GetServerList_Request::filter() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Request.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Request::set_filter(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Request.filter)
}
inline std::string* CGameServers_GetServerList_Request::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Request.filter)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Request::_internal_filter() const {
  return filter_.Get();
}
inline void CGameServers_GetServerList_Request::_internal_set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Request::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Request::release_filter() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Request.filter)
  if (!_internal_has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Request::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Request.filter)
}

// optional uint32 limit = 2 [default = 100, (.description) = "The maximum number of servers to return in the response"];
inline bool CGameServers_GetServerList_Request::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Request::has_limit() const {
  return _internal_has_limit();
}
inline void CGameServers_GetServerList_Request::clear_limit() {
  limit_ = 100u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGameServers_GetServerList_Request::_internal_limit() const {
  return limit_;
}
inline uint32_t CGameServers_GetServerList_Request::limit() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Request.limit)
  return _internal_limit();
}
inline void CGameServers_GetServerList_Request::_internal_set_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
}
inline void CGameServers_GetServerList_Request::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Request.limit)
}

// -------------------------------------------------------------------

// CGameServers_GetServerList_Response_Server

// optional string addr = 1 [(.description) = "The server\'s IP and query port"];
inline bool CGameServers_GetServerList_Response_Server::_internal_has_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_addr() const {
  return _internal_has_addr();
}
inline void CGameServers_GetServerList_Response_Server::clear_addr() {
  addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.addr)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.addr)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_addr() const {
  return addr_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.addr)
  if (!_internal_has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.addr)
}

// optional uint32 gameport = 2;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_gameport() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_gameport() const {
  return _internal_has_gameport();
}
inline void CGameServers_GetServerList_Response_Server::clear_gameport() {
  gameport_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CGameServers_GetServerList_Response_Server::_internal_gameport() const {
  return gameport_;
}
inline uint32_t CGameServers_GetServerList_Response_Server::gameport() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.gameport)
  return _internal_gameport();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_gameport(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  gameport_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_gameport(uint32_t value) {
  _internal_set_gameport(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.gameport)
}

// optional uint32 specport = 3;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_specport() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_specport() const {
  return _internal_has_specport();
}
inline void CGameServers_GetServerList_Response_Server::clear_specport() {
  specport_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CGameServers_GetServerList_Response_Server::_internal_specport() const {
  return specport_;
}
inline uint32_t CGameServers_GetServerList_Response_Server::specport() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.specport)
  return _internal_specport();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_specport(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  specport_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_specport(uint32_t value) {
  _internal_set_specport(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.specport)
}

// optional fixed64 steamid = 4;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameServers_GetServerList_Response_Server::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CGameServers_GetServerList_Response_Server::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CGameServers_GetServerList_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.steamid)
  return _internal_steamid();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  steamid_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.steamid)
}

// optional string name = 5;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_name() const {
  return _internal_has_name();
}
inline void CGameServers_GetServerList_Response_Server::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::name() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.name)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.name)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_name() const {
  return name_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_name() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.name)
}

// optional uint32 appid = 6;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_appid() const {
  return _internal_has_appid();
}
inline void CGameServers_GetServerList_Response_Server::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CGameServers_GetServerList_Response_Server::_internal_appid() const {
  return appid_;
}
inline uint32_t CGameServers_GetServerList_Response_Server::appid() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.appid)
  return _internal_appid();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  appid_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.appid)
}

// optional string gamedir = 7;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_gamedir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_gamedir() const {
  return _internal_has_gamedir();
}
inline void CGameServers_GetServerList_Response_Server::clear_gamedir() {
  gamedir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::gamedir() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.gamedir)
  return _internal_gamedir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_gamedir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.gamedir)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_gamedir() {
  std::string* _s = _internal_mutable_gamedir();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.gamedir)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_gamedir() const {
  return gamedir_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_gamedir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_gamedir() {
  _has_bits_[0] |= 0x00000004u;
  return gamedir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_gamedir() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.gamedir)
  if (!_internal_has_gamedir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = gamedir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gamedir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_gamedir(std::string* gamedir) {
  if (gamedir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gamedir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamedir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gamedir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.gamedir)
}

// optional string version = 8;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_version() const {
  return _internal_has_version();
}
inline void CGameServers_GetServerList_Response_Server::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::version() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.version)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.version)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_version() const {
  return version_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000008u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_version() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.version)
}

// optional string product = 9;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_product() const {
  return _internal_has_product();
}
inline void CGameServers_GetServerList_Response_Server::clear_product() {
  product_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::product() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_product(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.product)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.product)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_product() const {
  return product_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_product(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_product() {
  _has_bits_[0] |= 0x00000010u;
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_product() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.product)
  if (!_internal_has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = product_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.product)
}

// optional int32 region = 10;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_region() const {
  return _internal_has_region();
}
inline void CGameServers_GetServerList_Response_Server::clear_region() {
  region_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t CGameServers_GetServerList_Response_Server::_internal_region() const {
  return region_;
}
inline int32_t CGameServers_GetServerList_Response_Server::region() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.region)
  return _internal_region();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_region(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  region_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_region(int32_t value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.region)
}

// optional int32 players = 11;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_players() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_players() const {
  return _internal_has_players();
}
inline void CGameServers_GetServerList_Response_Server::clear_players() {
  players_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t CGameServers_GetServerList_Response_Server::_internal_players() const {
  return players_;
}
inline int32_t CGameServers_GetServerList_Response_Server::players() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.players)
  return _internal_players();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_players(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  players_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_players(int32_t value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.players)
}

// optional int32 max_players = 12;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_max_players() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_max_players() const {
  return _internal_has_max_players();
}
inline void CGameServers_GetServerList_Response_Server::clear_max_players() {
  max_players_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline int32_t CGameServers_GetServerList_Response_Server::_internal_max_players() const {
  return max_players_;
}
inline int32_t CGameServers_GetServerList_Response_Server::max_players() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.max_players)
  return _internal_max_players();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_max_players(int32_t value) {
  _has_bits_[0] |= 0x00004000u;
  max_players_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_max_players(int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.max_players)
}

// optional int32 bots = 13;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_bots() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_bots() const {
  return _internal_has_bots();
}
inline void CGameServers_GetServerList_Response_Server::clear_bots() {
  bots_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t CGameServers_GetServerList_Response_Server::_internal_bots() const {
  return bots_;
}
inline int32_t CGameServers_GetServerList_Response_Server::bots() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.bots)
  return _internal_bots();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_bots(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  bots_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_bots(int32_t value) {
  _internal_set_bots(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.bots)
}

// optional string map = 14;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_map() const {
  return _internal_has_map();
}
inline void CGameServers_GetServerList_Response_Server::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::map() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.map)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.map)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_map() const {
  return map_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000020u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_map() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.map)
}

// optional bool secure = 15;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_secure() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_secure() const {
  return _internal_has_secure();
}
inline void CGameServers_GetServerList_Response_Server::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CGameServers_GetServerList_Response_Server::_internal_secure() const {
  return secure_;
}
inline bool CGameServers_GetServerList_Response_Server::secure() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.secure)
  return _internal_secure();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_secure(bool value) {
  _has_bits_[0] |= 0x00010000u;
  secure_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_secure(bool value) {
  _internal_set_secure(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.secure)
}

// optional bool dedicated = 16;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_dedicated() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_dedicated() const {
  return _internal_has_dedicated();
}
inline void CGameServers_GetServerList_Response_Server::clear_dedicated() {
  dedicated_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CGameServers_GetServerList_Response_Server::_internal_dedicated() const {
  return dedicated_;
}
inline bool CGameServers_GetServerList_Response_Server::dedicated() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.dedicated)
  return _internal_dedicated();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_dedicated(bool value) {
  _has_bits_[0] |= 0x00020000u;
  dedicated_ = value;
}
inline void CGameServers_GetServerList_Response_Server::set_dedicated(bool value) {
  _internal_set_dedicated(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.dedicated)
}

// optional string os = 17;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_os() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_os() const {
  return _internal_has_os();
}
inline void CGameServers_GetServerList_Response_Server::clear_os() {
  os_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::os() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.os)
  return _internal_os();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_os(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.os)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_os() {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.os)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_os() const {
  return os_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_os(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  os_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_os() {
  _has_bits_[0] |= 0x00000040u;
  return os_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_os() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.os)
  if (!_internal_has_os()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = os_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.os)
}

// optional string gametype = 18;
inline bool CGameServers_GetServerList_Response_Server::_internal_has_gametype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameServers_GetServerList_Response_Server::has_gametype() const {
  return _internal_has_gametype();
}
inline void CGameServers_GetServerList_Response_Server::clear_gametype() {
  gametype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CGameServers_GetServerList_Response_Server::gametype() const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.Server.gametype)
  return _internal_gametype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_GetServerList_Response_Server::set_gametype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_GetServerList_Response.Server.gametype)
}
inline std::string* CGameServers_GetServerList_Response_Server::mutable_gametype() {
  std::string* _s = _internal_mutable_gametype();
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.Server.gametype)
  return _s;
}
inline const std::string& CGameServers_GetServerList_Response_Server::_internal_gametype() const {
  return gametype_.Get();
}
inline void CGameServers_GetServerList_Response_Server::_internal_set_gametype(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::_internal_mutable_gametype() {
  _has_bits_[0] |= 0x00000080u;
  return gametype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_GetServerList_Response_Server::release_gametype() {
  // @@protoc_insertion_point(field_release:CGameServers_GetServerList_Response.Server.gametype)
  if (!_internal_has_gametype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = gametype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gametype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_GetServerList_Response_Server::set_allocated_gametype(std::string* gametype) {
  if (gametype != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  gametype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gametype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gametype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GetServerList_Response.Server.gametype)
}

// -------------------------------------------------------------------

// CGameServers_GetServerList_Response

// repeated .CGameServers_GetServerList_Response.Server servers = 1 [(.description) = "List of servers matching the filter"];
inline int CGameServers_GetServerList_Response::_internal_servers_size() const {
  return servers_.size();
}
inline int CGameServers_GetServerList_Response::servers_size() const {
  return _internal_servers_size();
}
inline void CGameServers_GetServerList_Response::clear_servers() {
  servers_.Clear();
}
inline ::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerList_Response.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_GetServerList_Response_Server >*
CGameServers_GetServerList_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:CGameServers_GetServerList_Response.servers)
  return &servers_;
}
inline const ::CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerList_Response.servers)
  return _internal_servers(index);
}
inline ::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::_internal_add_servers() {
  return servers_.Add();
}
inline ::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::add_servers() {
  ::CGameServers_GetServerList_Response_Server* _add = _internal_add_servers();
  // @@protoc_insertion_point(field_add:CGameServers_GetServerList_Response.servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_GetServerList_Response_Server >&
CGameServers_GetServerList_Response::servers() const {
  // @@protoc_insertion_point(field_list:CGameServers_GetServerList_Response.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CGameServers_GetServerSteamIDsByIP_Request

// repeated string server_ips = 1;
inline int CGameServers_GetServerSteamIDsByIP_Request::_internal_server_ips_size() const {
  return server_ips_.size();
}
inline int CGameServers_GetServerSteamIDsByIP_Request::server_ips_size() const {
  return _internal_server_ips_size();
}
inline void CGameServers_GetServerSteamIDsByIP_Request::clear_server_ips() {
  server_ips_.Clear();
}
inline std::string* CGameServers_GetServerSteamIDsByIP_Request::add_server_ips() {
  std::string* _s = _internal_add_server_ips();
  // @@protoc_insertion_point(field_add_mutable:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return _s;
}
inline const std::string& CGameServers_GetServerSteamIDsByIP_Request::_internal_server_ips(int index) const {
  return server_ips_.Get(index);
}
inline const std::string& CGameServers_GetServerSteamIDsByIP_Request::server_ips(int index) const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return _internal_server_ips(index);
}
inline std::string* CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips(int index) {
  // @@protoc_insertion_point(field_mutable:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Mutable(index);
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const std::string& value) {
  server_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, std::string&& value) {
  server_ips_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value, size_t size) {
  server_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline std::string* CGameServers_GetServerSteamIDsByIP_Request::_internal_add_server_ips() {
  return server_ips_.Add();
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const std::string& value) {
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(std::string&& value) {
  server_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value, size_t size) {
  server_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CGameServers_GetServerSteamIDsByIP_Request::server_ips() const {
  // @@protoc_insertion_point(field_list:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips() {
  // @@protoc_insertion_point(field_mutable_list:CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return &server_ips_;
}

// -------------------------------------------------------------------

// CGameServers_IPsWithSteamIDs_Response_Server

// optional string addr = 1;
inline bool CGameServers_IPsWithSteamIDs_Response_Server::_internal_has_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameServers_IPsWithSteamIDs_Response_Server::has_addr() const {
  return _internal_has_addr();
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::clear_addr() {
  addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameServers_IPsWithSteamIDs_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
inline std::string* CGameServers_IPsWithSteamIDs_Response_Server::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return _s;
}
inline const std::string& CGameServers_IPsWithSteamIDs_Response_Server::_internal_addr() const {
  return addr_.Get();
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::_internal_set_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CGameServers_IPsWithSteamIDs_Response_Server::_internal_mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CGameServers_IPsWithSteamIDs_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:CGameServers_IPsWithSteamIDs_Response.Server.addr)
  if (!_internal_has_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CGameServers_IPsWithSteamIDs_Response.Server.addr)
}

// optional fixed64 steamid = 2;
inline bool CGameServers_IPsWithSteamIDs_Response_Server::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameServers_IPsWithSteamIDs_Response_Server::has_steamid() const {
  return _internal_has_steamid();
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CGameServers_IPsWithSteamIDs_Response_Server::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CGameServers_IPsWithSteamIDs_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:CGameServers_IPsWithSteamIDs_Response.Server.steamid)
  return _internal_steamid();
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CGameServers_IPsWithSteamIDs_Response_Server::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CGameServers_IPsWithSteamIDs_Response.Server.steamid)
}

// -------------------------------------------------------------------

// CGameServers_IPsWithSteamIDs_Response

// repeated .CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
inline int CGameServers_IPsWithSteamIDs_Response::_internal_servers_size() const {
  return servers_.size();
}
inline int CGameServers_IPsWithSteamIDs_Response::servers_size() const {
  return _internal_servers_size();
}
inline void CGameServers_IPsWithSteamIDs_Response::clear_servers() {
  servers_.Clear();
}
inline ::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_IPsWithSteamIDs_Response_Server >*
CGameServers_IPsWithSteamIDs_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:CGameServers_IPsWithSteamIDs_Response.servers)
  return &servers_;
}
inline const ::CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:CGameServers_IPsWithSteamIDs_Response.servers)
  return _internal_servers(index);
}
inline ::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::_internal_add_servers() {
  return servers_.Add();
}
inline ::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::add_servers() {
  ::CGameServers_IPsWithSteamIDs_Response_Server* _add = _internal_add_servers();
  // @@protoc_insertion_point(field_add:CGameServers_IPsWithSteamIDs_Response.servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameServers_IPsWithSteamIDs_Response_Server >&
CGameServers_IPsWithSteamIDs_Response::servers() const {
  // @@protoc_insertion_point(field_list:CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_;
}

// -------------------------------------------------------------------

// CGameServers_GetServerIPsBySteamID_Request

// repeated fixed64 server_steamids = 1;
inline int CGameServers_GetServerIPsBySteamID_Request::_internal_server_steamids_size() const {
  return server_steamids_.size();
}
inline int CGameServers_GetServerIPsBySteamID_Request::server_steamids_size() const {
  return _internal_server_steamids_size();
}
inline void CGameServers_GetServerIPsBySteamID_Request::clear_server_steamids() {
  server_steamids_.Clear();
}
inline uint64_t CGameServers_GetServerIPsBySteamID_Request::_internal_server_steamids(int index) const {
  return server_steamids_.Get(index);
}
inline uint64_t CGameServers_GetServerIPsBySteamID_Request::server_steamids(int index) const {
  // @@protoc_insertion_point(field_get:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return _internal_server_steamids(index);
}
inline void CGameServers_GetServerIPsBySteamID_Request::set_server_steamids(int index, uint64_t value) {
  server_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
inline void CGameServers_GetServerIPsBySteamID_Request::_internal_add_server_steamids(uint64_t value) {
  server_steamids_.Add(value);
}
inline void CGameServers_GetServerIPsBySteamID_Request::add_server_steamids(uint64_t value) {
  _internal_add_server_steamids(value);
  // @@protoc_insertion_point(field_add:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CGameServers_GetServerIPsBySteamID_Request::_internal_server_steamids() const {
  return server_steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CGameServers_GetServerIPsBySteamID_Request::server_steamids() const {
  // @@protoc_insertion_point(field_list:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return _internal_server_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CGameServers_GetServerIPsBySteamID_Request::_internal_mutable_server_steamids() {
  return &server_steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CGameServers_GetServerIPsBySteamID_Request::mutable_server_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return _internal_mutable_server_steamids();
}

// -------------------------------------------------------------------

// CGameServers_QueryByFakeIP_Request

// optional uint32 fake_ip = 1 [(.description) = "FakeIP of server to query."];
inline bool CGameServers_QueryByFakeIP_Request::_internal_has_fake_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameServers_QueryByFakeIP_Request::has_fake_ip() const {
  return _internal_has_fake_ip();
}
inline void CGameServers_QueryByFakeIP_Request::clear_fake_ip() {
  fake_ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::_internal_fake_ip() const {
  return fake_ip_;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::fake_ip() const {
  // @@protoc_insertion_point(field_get:CGameServers_QueryByFakeIP_Request.fake_ip)
  return _internal_fake_ip();
}
inline void CGameServers_QueryByFakeIP_Request::_internal_set_fake_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  fake_ip_ = value;
}
inline void CGameServers_QueryByFakeIP_Request::set_fake_ip(uint32_t value) {
  _internal_set_fake_ip(value);
  // @@protoc_insertion_point(field_set:CGameServers_QueryByFakeIP_Request.fake_ip)
}

// optional uint32 fake_port = 2 [(.description) = "Fake port of server to query."];
inline bool CGameServers_QueryByFakeIP_Request::_internal_has_fake_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameServers_QueryByFakeIP_Request::has_fake_port() const {
  return _internal_has_fake_port();
}
inline void CGameServers_QueryByFakeIP_Request::clear_fake_port() {
  fake_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::_internal_fake_port() const {
  return fake_port_;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::fake_port() const {
  // @@protoc_insertion_point(field_get:CGameServers_QueryByFakeIP_Request.fake_port)
  return _internal_fake_port();
}
inline void CGameServers_QueryByFakeIP_Request::_internal_set_fake_port(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fake_port_ = value;
}
inline void CGameServers_QueryByFakeIP_Request::set_fake_port(uint32_t value) {
  _internal_set_fake_port(value);
  // @@protoc_insertion_point(field_set:CGameServers_QueryByFakeIP_Request.fake_port)
}

// optional uint32 app_id = 3 [(.description) = "AppID to use.  Each AppID has its own FakeIP address."];
inline bool CGameServers_QueryByFakeIP_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameServers_QueryByFakeIP_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void CGameServers_QueryByFakeIP_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CGameServers_QueryByFakeIP_Request::app_id() const {
  // @@protoc_insertion_point(field_get:CGameServers_QueryByFakeIP_Request.app_id)
  return _internal_app_id();
}
inline void CGameServers_QueryByFakeIP_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CGameServers_QueryByFakeIP_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CGameServers_QueryByFakeIP_Request.app_id)
}

// optional .CGameServers_QueryByFakeIP_Request.EQueryType query_type = 4 [default = Query_Invalid, (.description) = "What type of query?"];
inline bool CGameServers_QueryByFakeIP_Request::_internal_has_query_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameServers_QueryByFakeIP_Request::has_query_type() const {
  return _internal_has_query_type();
}
inline void CGameServers_QueryByFakeIP_Request::clear_query_type() {
  query_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::_internal_query_type() const {
  return static_cast< ::CGameServers_QueryByFakeIP_Request_EQueryType >(query_type_);
}
inline ::CGameServers_QueryByFakeIP_Request_EQueryType CGameServers_QueryByFakeIP_Request::query_type() const {
  // @@protoc_insertion_point(field_get:CGameServers_QueryByFakeIP_Request.query_type)
  return _internal_query_type();
}
inline void CGameServers_QueryByFakeIP_Request::_internal_set_query_type(::CGameServers_QueryByFakeIP_Request_EQueryType value) {
  assert(::CGameServers_QueryByFakeIP_Request_EQueryType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  query_type_ = value;
}
inline void CGameServers_QueryByFakeIP_Request::set_query_type(::CGameServers_QueryByFakeIP_Request_EQueryType value) {
  _internal_set_query_type(value);
  // @@protoc_insertion_point(field_set:CGameServers_QueryByFakeIP_Request.query_type)
}

// -------------------------------------------------------------------

// CMsgGameServerPingQueryData

// optional .CMsgIPAddress server_ip = 1;
inline bool CMsgGameServerPingQueryData::_internal_has_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || server_ip_ != nullptr);
  return value;
}
inline bool CMsgGameServerPingQueryData::has_server_ip() const {
  return _internal_has_server_ip();
}
inline const ::CMsgIPAddress& CMsgGameServerPingQueryData::_internal_server_ip() const {
  const ::CMsgIPAddress* p = server_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgGameServerPingQueryData::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.server_ip)
  return _internal_server_ip();
}
inline void CMsgGameServerPingQueryData::unsafe_arena_set_allocated_server_ip(
    ::CMsgIPAddress* server_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_ip_);
  }
  server_ip_ = server_ip;
  if (server_ip) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameServerPingQueryData.server_ip)
}
inline ::CMsgIPAddress* CMsgGameServerPingQueryData::release_server_ip() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgIPAddress* temp = server_ip_;
  server_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgIPAddress* CMsgGameServerPingQueryData::unsafe_arena_release_server_ip() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.server_ip)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgIPAddress* temp = server_ip_;
  server_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgGameServerPingQueryData::_internal_mutable_server_ip() {
  _has_bits_[0] |= 0x00000100u;
  if (server_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArenaForAllocation());
    server_ip_ = p;
  }
  return server_ip_;
}
inline ::CMsgIPAddress* CMsgGameServerPingQueryData::mutable_server_ip() {
  ::CMsgIPAddress* _msg = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.server_ip)
  return _msg;
}
inline void CMsgGameServerPingQueryData::set_allocated_server_ip(::CMsgIPAddress* server_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_ip_);
  }
  if (server_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_ip));
    if (message_arena != submessage_arena) {
      server_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  server_ip_ = server_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.server_ip)
}

// optional uint32 query_port = 2;
inline bool CMsgGameServerPingQueryData::_internal_has_query_port() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_query_port() const {
  return _internal_has_query_port();
}
inline void CMsgGameServerPingQueryData::clear_query_port() {
  query_port_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_query_port() const {
  return query_port_;
}
inline uint32_t CMsgGameServerPingQueryData::query_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.query_port)
  return _internal_query_port();
}
inline void CMsgGameServerPingQueryData::_internal_set_query_port(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  query_port_ = value;
}
inline void CMsgGameServerPingQueryData::set_query_port(uint32_t value) {
  _internal_set_query_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.query_port)
}

// optional uint32 game_port = 3;
inline bool CMsgGameServerPingQueryData::_internal_has_game_port() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_game_port() const {
  return _internal_has_game_port();
}
inline void CMsgGameServerPingQueryData::clear_game_port() {
  game_port_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_game_port() const {
  return game_port_;
}
inline uint32_t CMsgGameServerPingQueryData::game_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.game_port)
  return _internal_game_port();
}
inline void CMsgGameServerPingQueryData::_internal_set_game_port(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  game_port_ = value;
}
inline void CMsgGameServerPingQueryData::set_game_port(uint32_t value) {
  _internal_set_game_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.game_port)
}

// optional uint32 spectator_port = 4;
inline bool CMsgGameServerPingQueryData::_internal_has_spectator_port() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_spectator_port() const {
  return _internal_has_spectator_port();
}
inline void CMsgGameServerPingQueryData::clear_spectator_port() {
  spectator_port_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_spectator_port() const {
  return spectator_port_;
}
inline uint32_t CMsgGameServerPingQueryData::spectator_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.spectator_port)
  return _internal_spectator_port();
}
inline void CMsgGameServerPingQueryData::_internal_set_spectator_port(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  spectator_port_ = value;
}
inline void CMsgGameServerPingQueryData::set_spectator_port(uint32_t value) {
  _internal_set_spectator_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.spectator_port)
}

// optional string spectator_server_name = 5;
inline bool CMsgGameServerPingQueryData::_internal_has_spectator_server_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_spectator_server_name() const {
  return _internal_has_spectator_server_name();
}
inline void CMsgGameServerPingQueryData::clear_spectator_server_name() {
  spectator_server_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerPingQueryData::spectator_server_name() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.spectator_server_name)
  return _internal_spectator_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_spectator_server_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 spectator_server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.spectator_server_name)
}
inline std::string* CMsgGameServerPingQueryData::mutable_spectator_server_name() {
  std::string* _s = _internal_mutable_spectator_server_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.spectator_server_name)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_spectator_server_name() const {
  return spectator_server_name_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_spectator_server_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  spectator_server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_spectator_server_name() {
  _has_bits_[0] |= 0x00000001u;
  return spectator_server_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_spectator_server_name() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.spectator_server_name)
  if (!_internal_has_spectator_server_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = spectator_server_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spectator_server_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spectator_server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_spectator_server_name(std::string* spectator_server_name) {
  if (spectator_server_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  spectator_server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spectator_server_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spectator_server_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spectator_server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.spectator_server_name)
}

// optional string server_name = 6;
inline bool CMsgGameServerPingQueryData::_internal_has_server_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_server_name() const {
  return _internal_has_server_name();
}
inline void CMsgGameServerPingQueryData::clear_server_name() {
  server_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameServerPingQueryData::server_name() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_server_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.server_name)
}
inline std::string* CMsgGameServerPingQueryData::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.server_name)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_server_name() const {
  return server_name_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_server_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_server_name() {
  _has_bits_[0] |= 0x00000002u;
  return server_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_server_name() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.server_name)
  if (!_internal_has_server_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = server_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.server_name)
}

// optional fixed64 steamid = 7;
inline bool CMsgGameServerPingQueryData::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGameServerPingQueryData::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CMsgGameServerPingQueryData::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgGameServerPingQueryData::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.steamid)
  return _internal_steamid();
}
inline void CMsgGameServerPingQueryData::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  steamid_ = value;
}
inline void CMsgGameServerPingQueryData::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.steamid)
}

// optional uint32 app_id = 8;
inline bool CMsgGameServerPingQueryData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgGameServerPingQueryData::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgGameServerPingQueryData::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.app_id)
  return _internal_app_id();
}
inline void CMsgGameServerPingQueryData::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  app_id_ = value;
}
inline void CMsgGameServerPingQueryData::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.app_id)
}

// optional string gamedir = 9;
inline bool CMsgGameServerPingQueryData::_internal_has_gamedir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_gamedir() const {
  return _internal_has_gamedir();
}
inline void CMsgGameServerPingQueryData::clear_gamedir() {
  gamedir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameServerPingQueryData::gamedir() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.gamedir)
  return _internal_gamedir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_gamedir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.gamedir)
}
inline std::string* CMsgGameServerPingQueryData::mutable_gamedir() {
  std::string* _s = _internal_mutable_gamedir();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.gamedir)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_gamedir() const {
  return gamedir_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_gamedir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gamedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_gamedir() {
  _has_bits_[0] |= 0x00000004u;
  return gamedir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_gamedir() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.gamedir)
  if (!_internal_has_gamedir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = gamedir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gamedir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_gamedir(std::string* gamedir) {
  if (gamedir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gamedir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamedir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gamedir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gamedir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.gamedir)
}

// optional string map = 10;
inline bool CMsgGameServerPingQueryData::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_map() const {
  return _internal_has_map();
}
inline void CMsgGameServerPingQueryData::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgGameServerPingQueryData::map() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.map)
}
inline std::string* CMsgGameServerPingQueryData::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.map)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_map() const {
  return map_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000008u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_map() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.map)
}

// optional string game_description = 11;
inline bool CMsgGameServerPingQueryData::_internal_has_game_description() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_game_description() const {
  return _internal_has_game_description();
}
inline void CMsgGameServerPingQueryData::clear_game_description() {
  game_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgGameServerPingQueryData::game_description() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.game_description)
  return _internal_game_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_game_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 game_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.game_description)
}
inline std::string* CMsgGameServerPingQueryData::mutable_game_description() {
  std::string* _s = _internal_mutable_game_description();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.game_description)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_game_description() const {
  return game_description_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_game_description(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  game_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_game_description() {
  _has_bits_[0] |= 0x00000010u;
  return game_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_game_description() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.game_description)
  if (!_internal_has_game_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = game_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_game_description(std::string* game_description) {
  if (game_description != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  game_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.game_description)
}

// optional string gametype = 12;
inline bool CMsgGameServerPingQueryData::_internal_has_gametype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_gametype() const {
  return _internal_has_gametype();
}
inline void CMsgGameServerPingQueryData::clear_gametype() {
  gametype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgGameServerPingQueryData::gametype() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.gametype)
  return _internal_gametype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_gametype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.gametype)
}
inline std::string* CMsgGameServerPingQueryData::mutable_gametype() {
  std::string* _s = _internal_mutable_gametype();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.gametype)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_gametype() const {
  return gametype_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_gametype(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  gametype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_gametype() {
  _has_bits_[0] |= 0x00000020u;
  return gametype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_gametype() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.gametype)
  if (!_internal_has_gametype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = gametype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gametype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_gametype(std::string* gametype) {
  if (gametype != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gametype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gametype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gametype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gametype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.gametype)
}

// optional uint32 num_players = 13;
inline bool CMsgGameServerPingQueryData::_internal_has_num_players() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_num_players() const {
  return _internal_has_num_players();
}
inline void CMsgGameServerPingQueryData::clear_num_players() {
  num_players_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_num_players() const {
  return num_players_;
}
inline uint32_t CMsgGameServerPingQueryData::num_players() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.num_players)
  return _internal_num_players();
}
inline void CMsgGameServerPingQueryData::_internal_set_num_players(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  num_players_ = value;
}
inline void CMsgGameServerPingQueryData::set_num_players(uint32_t value) {
  _internal_set_num_players(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.num_players)
}

// optional uint32 max_players = 14;
inline bool CMsgGameServerPingQueryData::_internal_has_max_players() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_max_players() const {
  return _internal_has_max_players();
}
inline void CMsgGameServerPingQueryData::clear_max_players() {
  max_players_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_max_players() const {
  return max_players_;
}
inline uint32_t CMsgGameServerPingQueryData::max_players() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.max_players)
  return _internal_max_players();
}
inline void CMsgGameServerPingQueryData::_internal_set_max_players(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  max_players_ = value;
}
inline void CMsgGameServerPingQueryData::set_max_players(uint32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.max_players)
}

// optional uint32 num_bots = 15;
inline bool CMsgGameServerPingQueryData::_internal_has_num_bots() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_num_bots() const {
  return _internal_has_num_bots();
}
inline void CMsgGameServerPingQueryData::clear_num_bots() {
  num_bots_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_num_bots() const {
  return num_bots_;
}
inline uint32_t CMsgGameServerPingQueryData::num_bots() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.num_bots)
  return _internal_num_bots();
}
inline void CMsgGameServerPingQueryData::_internal_set_num_bots(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  num_bots_ = value;
}
inline void CMsgGameServerPingQueryData::set_num_bots(uint32_t value) {
  _internal_set_num_bots(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.num_bots)
}

// optional bool password = 16;
inline bool CMsgGameServerPingQueryData::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_password() const {
  return _internal_has_password();
}
inline void CMsgGameServerPingQueryData::clear_password() {
  password_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgGameServerPingQueryData::_internal_password() const {
  return password_;
}
inline bool CMsgGameServerPingQueryData::password() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.password)
  return _internal_password();
}
inline void CMsgGameServerPingQueryData::_internal_set_password(bool value) {
  _has_bits_[0] |= 0x00020000u;
  password_ = value;
}
inline void CMsgGameServerPingQueryData::set_password(bool value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.password)
}

// optional bool secure = 17;
inline bool CMsgGameServerPingQueryData::_internal_has_secure() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_secure() const {
  return _internal_has_secure();
}
inline void CMsgGameServerPingQueryData::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgGameServerPingQueryData::_internal_secure() const {
  return secure_;
}
inline bool CMsgGameServerPingQueryData::secure() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.secure)
  return _internal_secure();
}
inline void CMsgGameServerPingQueryData::_internal_set_secure(bool value) {
  _has_bits_[0] |= 0x00040000u;
  secure_ = value;
}
inline void CMsgGameServerPingQueryData::set_secure(bool value) {
  _internal_set_secure(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.secure)
}

// optional bool dedicated = 18;
inline bool CMsgGameServerPingQueryData::_internal_has_dedicated() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_dedicated() const {
  return _internal_has_dedicated();
}
inline void CMsgGameServerPingQueryData::clear_dedicated() {
  dedicated_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CMsgGameServerPingQueryData::_internal_dedicated() const {
  return dedicated_;
}
inline bool CMsgGameServerPingQueryData::dedicated() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.dedicated)
  return _internal_dedicated();
}
inline void CMsgGameServerPingQueryData::_internal_set_dedicated(bool value) {
  _has_bits_[0] |= 0x00080000u;
  dedicated_ = value;
}
inline void CMsgGameServerPingQueryData::set_dedicated(bool value) {
  _internal_set_dedicated(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.dedicated)
}

// optional string version = 19;
inline bool CMsgGameServerPingQueryData::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_version() const {
  return _internal_has_version();
}
inline void CMsgGameServerPingQueryData::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgGameServerPingQueryData::version() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.version)
}
inline std::string* CMsgGameServerPingQueryData::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.version)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_version() const {
  return version_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000040u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_version() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.version)
}

// optional fixed32 sdr_popid = 20;
inline bool CMsgGameServerPingQueryData::_internal_has_sdr_popid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_sdr_popid() const {
  return _internal_has_sdr_popid();
}
inline void CMsgGameServerPingQueryData::clear_sdr_popid() {
  sdr_popid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgGameServerPingQueryData::_internal_sdr_popid() const {
  return sdr_popid_;
}
inline uint32_t CMsgGameServerPingQueryData::sdr_popid() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.sdr_popid)
  return _internal_sdr_popid();
}
inline void CMsgGameServerPingQueryData::_internal_set_sdr_popid(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  sdr_popid_ = value;
}
inline void CMsgGameServerPingQueryData::set_sdr_popid(uint32_t value) {
  _internal_set_sdr_popid(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.sdr_popid)
}

// optional string sdr_location_string = 21;
inline bool CMsgGameServerPingQueryData::_internal_has_sdr_location_string() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameServerPingQueryData::has_sdr_location_string() const {
  return _internal_has_sdr_location_string();
}
inline void CMsgGameServerPingQueryData::clear_sdr_location_string() {
  sdr_location_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgGameServerPingQueryData::sdr_location_string() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPingQueryData.sdr_location_string)
  return _internal_sdr_location_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPingQueryData::set_sdr_location_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 sdr_location_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPingQueryData.sdr_location_string)
}
inline std::string* CMsgGameServerPingQueryData::mutable_sdr_location_string() {
  std::string* _s = _internal_mutable_sdr_location_string();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPingQueryData.sdr_location_string)
  return _s;
}
inline const std::string& CMsgGameServerPingQueryData::_internal_sdr_location_string() const {
  return sdr_location_string_.Get();
}
inline void CMsgGameServerPingQueryData::_internal_set_sdr_location_string(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  sdr_location_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::_internal_mutable_sdr_location_string() {
  _has_bits_[0] |= 0x00000080u;
  return sdr_location_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPingQueryData::release_sdr_location_string() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPingQueryData.sdr_location_string)
  if (!_internal_has_sdr_location_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = sdr_location_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdr_location_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sdr_location_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPingQueryData::set_allocated_sdr_location_string(std::string* sdr_location_string) {
  if (sdr_location_string != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sdr_location_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdr_location_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdr_location_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sdr_location_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPingQueryData.sdr_location_string)
}

// -------------------------------------------------------------------

// CMsgGameServerPlayersQueryData_Player

// optional string name = 1;
inline bool CMsgGameServerPlayersQueryData_Player::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerPlayersQueryData_Player::has_name() const {
  return _internal_has_name();
}
inline void CMsgGameServerPlayersQueryData_Player::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerPlayersQueryData_Player::name() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPlayersQueryData.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerPlayersQueryData_Player::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerPlayersQueryData.Player.name)
}
inline std::string* CMsgGameServerPlayersQueryData_Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPlayersQueryData.Player.name)
  return _s;
}
inline const std::string& CMsgGameServerPlayersQueryData_Player::_internal_name() const {
  return name_.Get();
}
inline void CMsgGameServerPlayersQueryData_Player::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPlayersQueryData_Player::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerPlayersQueryData_Player::release_name() {
  // @@protoc_insertion_point(field_release:CMsgGameServerPlayersQueryData.Player.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerPlayersQueryData_Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerPlayersQueryData.Player.name)
}

// optional uint32 score = 2;
inline bool CMsgGameServerPlayersQueryData_Player::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerPlayersQueryData_Player::has_score() const {
  return _internal_has_score();
}
inline void CMsgGameServerPlayersQueryData_Player::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameServerPlayersQueryData_Player::_internal_score() const {
  return score_;
}
inline uint32_t CMsgGameServerPlayersQueryData_Player::score() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPlayersQueryData.Player.score)
  return _internal_score();
}
inline void CMsgGameServerPlayersQueryData_Player::_internal_set_score(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void CMsgGameServerPlayersQueryData_Player::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPlayersQueryData.Player.score)
}

// optional uint32 time_played = 3;
inline bool CMsgGameServerPlayersQueryData_Player::_internal_has_time_played() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerPlayersQueryData_Player::has_time_played() const {
  return _internal_has_time_played();
}
inline void CMsgGameServerPlayersQueryData_Player::clear_time_played() {
  time_played_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameServerPlayersQueryData_Player::_internal_time_played() const {
  return time_played_;
}
inline uint32_t CMsgGameServerPlayersQueryData_Player::time_played() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPlayersQueryData.Player.time_played)
  return _internal_time_played();
}
inline void CMsgGameServerPlayersQueryData_Player::_internal_set_time_played(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_played_ = value;
}
inline void CMsgGameServerPlayersQueryData_Player::set_time_played(uint32_t value) {
  _internal_set_time_played(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerPlayersQueryData.Player.time_played)
}

// -------------------------------------------------------------------

// CMsgGameServerPlayersQueryData

// repeated .CMsgGameServerPlayersQueryData.Player players = 1;
inline int CMsgGameServerPlayersQueryData::_internal_players_size() const {
  return players_.size();
}
inline int CMsgGameServerPlayersQueryData::players_size() const {
  return _internal_players_size();
}
inline void CMsgGameServerPlayersQueryData::clear_players() {
  players_.Clear();
}
inline ::CMsgGameServerPlayersQueryData_Player* CMsgGameServerPlayersQueryData::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerPlayersQueryData.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerPlayersQueryData_Player >*
CMsgGameServerPlayersQueryData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerPlayersQueryData.players)
  return &players_;
}
inline const ::CMsgGameServerPlayersQueryData_Player& CMsgGameServerPlayersQueryData::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgGameServerPlayersQueryData_Player& CMsgGameServerPlayersQueryData::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerPlayersQueryData.players)
  return _internal_players(index);
}
inline ::CMsgGameServerPlayersQueryData_Player* CMsgGameServerPlayersQueryData::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgGameServerPlayersQueryData_Player* CMsgGameServerPlayersQueryData::add_players() {
  ::CMsgGameServerPlayersQueryData_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgGameServerPlayersQueryData.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerPlayersQueryData_Player >&
CMsgGameServerPlayersQueryData::players() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerPlayersQueryData.players)
  return players_;
}

// -------------------------------------------------------------------

// CMsgGameServerRulesQueryData_Rule

// optional string rule = 1;
inline bool CMsgGameServerRulesQueryData_Rule::_internal_has_rule() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerRulesQueryData_Rule::has_rule() const {
  return _internal_has_rule();
}
inline void CMsgGameServerRulesQueryData_Rule::clear_rule() {
  rule_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerRulesQueryData_Rule::rule() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerRulesQueryData.Rule.rule)
  return _internal_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerRulesQueryData_Rule::set_rule(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerRulesQueryData.Rule.rule)
}
inline std::string* CMsgGameServerRulesQueryData_Rule::mutable_rule() {
  std::string* _s = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerRulesQueryData.Rule.rule)
  return _s;
}
inline const std::string& CMsgGameServerRulesQueryData_Rule::_internal_rule() const {
  return rule_.Get();
}
inline void CMsgGameServerRulesQueryData_Rule::_internal_set_rule(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerRulesQueryData_Rule::_internal_mutable_rule() {
  _has_bits_[0] |= 0x00000001u;
  return rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerRulesQueryData_Rule::release_rule() {
  // @@protoc_insertion_point(field_release:CMsgGameServerRulesQueryData.Rule.rule)
  if (!_internal_has_rule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = rule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerRulesQueryData_Rule::set_allocated_rule(std::string* rule) {
  if (rule != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rule_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerRulesQueryData.Rule.rule)
}

// optional string value = 2;
inline bool CMsgGameServerRulesQueryData_Rule::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerRulesQueryData_Rule::has_value() const {
  return _internal_has_value();
}
inline void CMsgGameServerRulesQueryData_Rule::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameServerRulesQueryData_Rule::value() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerRulesQueryData.Rule.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerRulesQueryData_Rule::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerRulesQueryData.Rule.value)
}
inline std::string* CMsgGameServerRulesQueryData_Rule::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerRulesQueryData.Rule.value)
  return _s;
}
inline const std::string& CMsgGameServerRulesQueryData_Rule::_internal_value() const {
  return value_.Get();
}
inline void CMsgGameServerRulesQueryData_Rule::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerRulesQueryData_Rule::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGameServerRulesQueryData_Rule::release_value() {
  // @@protoc_insertion_point(field_release:CMsgGameServerRulesQueryData.Rule.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerRulesQueryData_Rule::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerRulesQueryData.Rule.value)
}

// -------------------------------------------------------------------

// CMsgGameServerRulesQueryData

// repeated .CMsgGameServerRulesQueryData.Rule rules = 1;
inline int CMsgGameServerRulesQueryData::_internal_rules_size() const {
  return rules_.size();
}
inline int CMsgGameServerRulesQueryData::rules_size() const {
  return _internal_rules_size();
}
inline void CMsgGameServerRulesQueryData::clear_rules() {
  rules_.Clear();
}
inline ::CMsgGameServerRulesQueryData_Rule* CMsgGameServerRulesQueryData::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerRulesQueryData.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerRulesQueryData_Rule >*
CMsgGameServerRulesQueryData::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerRulesQueryData.rules)
  return &rules_;
}
inline const ::CMsgGameServerRulesQueryData_Rule& CMsgGameServerRulesQueryData::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::CMsgGameServerRulesQueryData_Rule& CMsgGameServerRulesQueryData::rules(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerRulesQueryData.rules)
  return _internal_rules(index);
}
inline ::CMsgGameServerRulesQueryData_Rule* CMsgGameServerRulesQueryData::_internal_add_rules() {
  return rules_.Add();
}
inline ::CMsgGameServerRulesQueryData_Rule* CMsgGameServerRulesQueryData::add_rules() {
  ::CMsgGameServerRulesQueryData_Rule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:CMsgGameServerRulesQueryData.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerRulesQueryData_Rule >&
CMsgGameServerRulesQueryData::rules() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerRulesQueryData.rules)
  return rules_;
}

// -------------------------------------------------------------------

// CGameServers_GameServerQuery_Response

// optional .CMsgGameServerPingQueryData ping_data = 1;
inline bool CGameServers_GameServerQuery_Response::_internal_has_ping_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ping_data_ != nullptr);
  return value;
}
inline bool CGameServers_GameServerQuery_Response::has_ping_data() const {
  return _internal_has_ping_data();
}
inline void CGameServers_GameServerQuery_Response::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGameServerPingQueryData& CGameServers_GameServerQuery_Response::_internal_ping_data() const {
  const ::CMsgGameServerPingQueryData* p = ping_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerPingQueryData&>(
      ::_CMsgGameServerPingQueryData_default_instance_);
}
inline const ::CMsgGameServerPingQueryData& CGameServers_GameServerQuery_Response::ping_data() const {
  // @@protoc_insertion_point(field_get:CGameServers_GameServerQuery_Response.ping_data)
  return _internal_ping_data();
}
inline void CGameServers_GameServerQuery_Response::unsafe_arena_set_allocated_ping_data(
    ::CMsgGameServerPingQueryData* ping_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameServers_GameServerQuery_Response.ping_data)
}
inline ::CMsgGameServerPingQueryData* CGameServers_GameServerQuery_Response::release_ping_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGameServerPingQueryData* temp = ping_data_;
  ping_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerPingQueryData* CGameServers_GameServerQuery_Response::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:CGameServers_GameServerQuery_Response.ping_data)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGameServerPingQueryData* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerPingQueryData* CGameServers_GameServerQuery_Response::_internal_mutable_ping_data() {
  _has_bits_[0] |= 0x00000001u;
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerPingQueryData>(GetArenaForAllocation());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::CMsgGameServerPingQueryData* CGameServers_GameServerQuery_Response::mutable_ping_data() {
  ::CMsgGameServerPingQueryData* _msg = _internal_mutable_ping_data();
  // @@protoc_insertion_point(field_mutable:CGameServers_GameServerQuery_Response.ping_data)
  return _msg;
}
inline void CGameServers_GameServerQuery_Response::set_allocated_ping_data(::CMsgGameServerPingQueryData* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ping_data_;
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerPingQueryData>::GetOwningArena(ping_data);
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GameServerQuery_Response.ping_data)
}

// optional .CMsgGameServerPlayersQueryData players_data = 2;
inline bool CGameServers_GameServerQuery_Response::_internal_has_players_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || players_data_ != nullptr);
  return value;
}
inline bool CGameServers_GameServerQuery_Response::has_players_data() const {
  return _internal_has_players_data();
}
inline void CGameServers_GameServerQuery_Response::clear_players_data() {
  if (players_data_ != nullptr) players_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGameServerPlayersQueryData& CGameServers_GameServerQuery_Response::_internal_players_data() const {
  const ::CMsgGameServerPlayersQueryData* p = players_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerPlayersQueryData&>(
      ::_CMsgGameServerPlayersQueryData_default_instance_);
}
inline const ::CMsgGameServerPlayersQueryData& CGameServers_GameServerQuery_Response::players_data() const {
  // @@protoc_insertion_point(field_get:CGameServers_GameServerQuery_Response.players_data)
  return _internal_players_data();
}
inline void CGameServers_GameServerQuery_Response::unsafe_arena_set_allocated_players_data(
    ::CMsgGameServerPlayersQueryData* players_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players_data_);
  }
  players_data_ = players_data;
  if (players_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameServers_GameServerQuery_Response.players_data)
}
inline ::CMsgGameServerPlayersQueryData* CGameServers_GameServerQuery_Response::release_players_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGameServerPlayersQueryData* temp = players_data_;
  players_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerPlayersQueryData* CGameServers_GameServerQuery_Response::unsafe_arena_release_players_data() {
  // @@protoc_insertion_point(field_release:CGameServers_GameServerQuery_Response.players_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGameServerPlayersQueryData* temp = players_data_;
  players_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerPlayersQueryData* CGameServers_GameServerQuery_Response::_internal_mutable_players_data() {
  _has_bits_[0] |= 0x00000002u;
  if (players_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerPlayersQueryData>(GetArenaForAllocation());
    players_data_ = p;
  }
  return players_data_;
}
inline ::CMsgGameServerPlayersQueryData* CGameServers_GameServerQuery_Response::mutable_players_data() {
  ::CMsgGameServerPlayersQueryData* _msg = _internal_mutable_players_data();
  // @@protoc_insertion_point(field_mutable:CGameServers_GameServerQuery_Response.players_data)
  return _msg;
}
inline void CGameServers_GameServerQuery_Response::set_allocated_players_data(::CMsgGameServerPlayersQueryData* players_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete players_data_;
  }
  if (players_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerPlayersQueryData>::GetOwningArena(players_data);
    if (message_arena != submessage_arena) {
      players_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  players_data_ = players_data;
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GameServerQuery_Response.players_data)
}

// optional .CMsgGameServerRulesQueryData rules_data = 3;
inline bool CGameServers_GameServerQuery_Response::_internal_has_rules_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rules_data_ != nullptr);
  return value;
}
inline bool CGameServers_GameServerQuery_Response::has_rules_data() const {
  return _internal_has_rules_data();
}
inline void CGameServers_GameServerQuery_Response::clear_rules_data() {
  if (rules_data_ != nullptr) rules_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGameServerRulesQueryData& CGameServers_GameServerQuery_Response::_internal_rules_data() const {
  const ::CMsgGameServerRulesQueryData* p = rules_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerRulesQueryData&>(
      ::_CMsgGameServerRulesQueryData_default_instance_);
}
inline const ::CMsgGameServerRulesQueryData& CGameServers_GameServerQuery_Response::rules_data() const {
  // @@protoc_insertion_point(field_get:CGameServers_GameServerQuery_Response.rules_data)
  return _internal_rules_data();
}
inline void CGameServers_GameServerQuery_Response::unsafe_arena_set_allocated_rules_data(
    ::CMsgGameServerRulesQueryData* rules_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rules_data_);
  }
  rules_data_ = rules_data;
  if (rules_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameServers_GameServerQuery_Response.rules_data)
}
inline ::CMsgGameServerRulesQueryData* CGameServers_GameServerQuery_Response::release_rules_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGameServerRulesQueryData* temp = rules_data_;
  rules_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerRulesQueryData* CGameServers_GameServerQuery_Response::unsafe_arena_release_rules_data() {
  // @@protoc_insertion_point(field_release:CGameServers_GameServerQuery_Response.rules_data)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGameServerRulesQueryData* temp = rules_data_;
  rules_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerRulesQueryData* CGameServers_GameServerQuery_Response::_internal_mutable_rules_data() {
  _has_bits_[0] |= 0x00000004u;
  if (rules_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerRulesQueryData>(GetArenaForAllocation());
    rules_data_ = p;
  }
  return rules_data_;
}
inline ::CMsgGameServerRulesQueryData* CGameServers_GameServerQuery_Response::mutable_rules_data() {
  ::CMsgGameServerRulesQueryData* _msg = _internal_mutable_rules_data();
  // @@protoc_insertion_point(field_mutable:CGameServers_GameServerQuery_Response.rules_data)
  return _msg;
}
inline void CGameServers_GameServerQuery_Response::set_allocated_rules_data(::CMsgGameServerRulesQueryData* rules_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rules_data_;
  }
  if (rules_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerRulesQueryData>::GetOwningArena(rules_data);
    if (message_arena != submessage_arena) {
      rules_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rules_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rules_data_ = rules_data;
  // @@protoc_insertion_point(field_set_allocated:CGameServers_GameServerQuery_Response.rules_data)
}

// -------------------------------------------------------------------

// GameServerClient_QueryServerData_Request

// -------------------------------------------------------------------

// GameServerClient_QueryServerData_Response

// optional .CMsgGameServerPingQueryData ping_data = 1;
inline bool GameServerClient_QueryServerData_Response::_internal_has_ping_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ping_data_ != nullptr);
  return value;
}
inline bool GameServerClient_QueryServerData_Response::has_ping_data() const {
  return _internal_has_ping_data();
}
inline void GameServerClient_QueryServerData_Response::clear_ping_data() {
  if (ping_data_ != nullptr) ping_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGameServerPingQueryData& GameServerClient_QueryServerData_Response::_internal_ping_data() const {
  const ::CMsgGameServerPingQueryData* p = ping_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerPingQueryData&>(
      ::_CMsgGameServerPingQueryData_default_instance_);
}
inline const ::CMsgGameServerPingQueryData& GameServerClient_QueryServerData_Response::ping_data() const {
  // @@protoc_insertion_point(field_get:GameServerClient_QueryServerData_Response.ping_data)
  return _internal_ping_data();
}
inline void GameServerClient_QueryServerData_Response::unsafe_arena_set_allocated_ping_data(
    ::CMsgGameServerPingQueryData* ping_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameServerClient_QueryServerData_Response.ping_data)
}
inline ::CMsgGameServerPingQueryData* GameServerClient_QueryServerData_Response::release_ping_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGameServerPingQueryData* temp = ping_data_;
  ping_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerPingQueryData* GameServerClient_QueryServerData_Response::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:GameServerClient_QueryServerData_Response.ping_data)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGameServerPingQueryData* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerPingQueryData* GameServerClient_QueryServerData_Response::_internal_mutable_ping_data() {
  _has_bits_[0] |= 0x00000001u;
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerPingQueryData>(GetArenaForAllocation());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::CMsgGameServerPingQueryData* GameServerClient_QueryServerData_Response::mutable_ping_data() {
  ::CMsgGameServerPingQueryData* _msg = _internal_mutable_ping_data();
  // @@protoc_insertion_point(field_mutable:GameServerClient_QueryServerData_Response.ping_data)
  return _msg;
}
inline void GameServerClient_QueryServerData_Response::set_allocated_ping_data(::CMsgGameServerPingQueryData* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ping_data_;
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerPingQueryData>::GetOwningArena(ping_data);
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:GameServerClient_QueryServerData_Response.ping_data)
}

// optional .CMsgGameServerPlayersQueryData players_data = 2;
inline bool GameServerClient_QueryServerData_Response::_internal_has_players_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || players_data_ != nullptr);
  return value;
}
inline bool GameServerClient_QueryServerData_Response::has_players_data() const {
  return _internal_has_players_data();
}
inline void GameServerClient_QueryServerData_Response::clear_players_data() {
  if (players_data_ != nullptr) players_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGameServerPlayersQueryData& GameServerClient_QueryServerData_Response::_internal_players_data() const {
  const ::CMsgGameServerPlayersQueryData* p = players_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerPlayersQueryData&>(
      ::_CMsgGameServerPlayersQueryData_default_instance_);
}
inline const ::CMsgGameServerPlayersQueryData& GameServerClient_QueryServerData_Response::players_data() const {
  // @@protoc_insertion_point(field_get:GameServerClient_QueryServerData_Response.players_data)
  return _internal_players_data();
}
inline void GameServerClient_QueryServerData_Response::unsafe_arena_set_allocated_players_data(
    ::CMsgGameServerPlayersQueryData* players_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players_data_);
  }
  players_data_ = players_data;
  if (players_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameServerClient_QueryServerData_Response.players_data)
}
inline ::CMsgGameServerPlayersQueryData* GameServerClient_QueryServerData_Response::release_players_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGameServerPlayersQueryData* temp = players_data_;
  players_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerPlayersQueryData* GameServerClient_QueryServerData_Response::unsafe_arena_release_players_data() {
  // @@protoc_insertion_point(field_release:GameServerClient_QueryServerData_Response.players_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGameServerPlayersQueryData* temp = players_data_;
  players_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerPlayersQueryData* GameServerClient_QueryServerData_Response::_internal_mutable_players_data() {
  _has_bits_[0] |= 0x00000002u;
  if (players_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerPlayersQueryData>(GetArenaForAllocation());
    players_data_ = p;
  }
  return players_data_;
}
inline ::CMsgGameServerPlayersQueryData* GameServerClient_QueryServerData_Response::mutable_players_data() {
  ::CMsgGameServerPlayersQueryData* _msg = _internal_mutable_players_data();
  // @@protoc_insertion_point(field_mutable:GameServerClient_QueryServerData_Response.players_data)
  return _msg;
}
inline void GameServerClient_QueryServerData_Response::set_allocated_players_data(::CMsgGameServerPlayersQueryData* players_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete players_data_;
  }
  if (players_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerPlayersQueryData>::GetOwningArena(players_data);
    if (message_arena != submessage_arena) {
      players_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  players_data_ = players_data;
  // @@protoc_insertion_point(field_set_allocated:GameServerClient_QueryServerData_Response.players_data)
}

// optional .CMsgGameServerRulesQueryData rules_data = 3;
inline bool GameServerClient_QueryServerData_Response::_internal_has_rules_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rules_data_ != nullptr);
  return value;
}
inline bool GameServerClient_QueryServerData_Response::has_rules_data() const {
  return _internal_has_rules_data();
}
inline void GameServerClient_QueryServerData_Response::clear_rules_data() {
  if (rules_data_ != nullptr) rules_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGameServerRulesQueryData& GameServerClient_QueryServerData_Response::_internal_rules_data() const {
  const ::CMsgGameServerRulesQueryData* p = rules_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameServerRulesQueryData&>(
      ::_CMsgGameServerRulesQueryData_default_instance_);
}
inline const ::CMsgGameServerRulesQueryData& GameServerClient_QueryServerData_Response::rules_data() const {
  // @@protoc_insertion_point(field_get:GameServerClient_QueryServerData_Response.rules_data)
  return _internal_rules_data();
}
inline void GameServerClient_QueryServerData_Response::unsafe_arena_set_allocated_rules_data(
    ::CMsgGameServerRulesQueryData* rules_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rules_data_);
  }
  rules_data_ = rules_data;
  if (rules_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameServerClient_QueryServerData_Response.rules_data)
}
inline ::CMsgGameServerRulesQueryData* GameServerClient_QueryServerData_Response::release_rules_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGameServerRulesQueryData* temp = rules_data_;
  rules_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameServerRulesQueryData* GameServerClient_QueryServerData_Response::unsafe_arena_release_rules_data() {
  // @@protoc_insertion_point(field_release:GameServerClient_QueryServerData_Response.rules_data)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGameServerRulesQueryData* temp = rules_data_;
  rules_data_ = nullptr;
  return temp;
}
inline ::CMsgGameServerRulesQueryData* GameServerClient_QueryServerData_Response::_internal_mutable_rules_data() {
  _has_bits_[0] |= 0x00000004u;
  if (rules_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameServerRulesQueryData>(GetArenaForAllocation());
    rules_data_ = p;
  }
  return rules_data_;
}
inline ::CMsgGameServerRulesQueryData* GameServerClient_QueryServerData_Response::mutable_rules_data() {
  ::CMsgGameServerRulesQueryData* _msg = _internal_mutable_rules_data();
  // @@protoc_insertion_point(field_mutable:GameServerClient_QueryServerData_Response.rules_data)
  return _msg;
}
inline void GameServerClient_QueryServerData_Response::set_allocated_rules_data(::CMsgGameServerRulesQueryData* rules_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rules_data_;
  }
  if (rules_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGameServerRulesQueryData>::GetOwningArena(rules_data);
    if (message_arena != submessage_arena) {
      rules_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rules_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rules_data_ = rules_data;
  // @@protoc_insertion_point(field_set_allocated:GameServerClient_QueryServerData_Response.rules_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CGameServers_QueryByFakeIP_Request_EQueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CGameServers_QueryByFakeIP_Request_EQueryType>() {
  return ::CGameServers_QueryByFakeIP_Request_EQueryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgameservers_2esteamclient_2eproto
