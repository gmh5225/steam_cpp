// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_service_messages.proto

#include "steammessages_remoteclient_service_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_CreateSession_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CreateSession_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateSession_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateSession_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateSession_RequestDefaultTypeInternal _CRemoteClient_CreateSession_Request_default_instance_;
constexpr CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , euniverse_(0){}
struct CRemoteClient_CreateSession_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CreateSession_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateSession_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateSession_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateSession_ResponseDefaultTypeInternal _CRemoteClient_CreateSession_Response_default_instance_;
constexpr CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct CRemoteClient_StartPairing_RequestDefaultTypeInternal {
  constexpr CRemoteClient_StartPairing_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_StartPairing_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_StartPairing_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_StartPairing_RequestDefaultTypeInternal _CRemoteClient_StartPairing_Request_default_instance_;
constexpr CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u){}
struct CRemoteClient_StartPairing_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_StartPairing_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_StartPairing_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_StartPairing_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_StartPairing_ResponseDefaultTypeInternal _CRemoteClient_StartPairing_Response_default_instance_;
constexpr CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u})
  , device_id_(uint64_t{0u}){}
struct CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal {
  constexpr CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_SetPairingInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_SetPairingInfo_Request_default_instance_;
constexpr CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_SetPairingInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_SetPairingInfo_Response_default_instance_;
constexpr CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u){}
struct CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal {
  constexpr CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_GetPairingInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal _CRemoteClient_GetPairingInfo_Request_default_instance_;
constexpr CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u})
  , device_id_(uint64_t{0u}){}
struct CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_GetPairingInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal _CRemoteClient_GetPairingInfo_Response_default_instance_;
constexpr CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct CRemoteClient_CancelPairing_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CancelPairing_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CancelPairing_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CancelPairing_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CancelPairing_RequestDefaultTypeInternal _CRemoteClient_CancelPairing_Request_default_instance_;
constexpr CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_CancelPairing_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CancelPairing_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CancelPairing_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CancelPairing_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CancelPairing_ResponseDefaultTypeInternal _CRemoteClient_CancelPairing_Response_default_instance_;
constexpr CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , device_id_(uint64_t{0u}){}
struct CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_RegisterStatusUpdate_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_RegisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_RegisterStatusUpdate_Notification_default_instance_;
constexpr CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_UnregisterStatusUpdate_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_UnregisterStatusUpdate_NotificationDefaultTypeInternal _CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_;
constexpr CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , remote_client_id_(uint64_t{0u}){}
struct CRemoteClient_Online_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_Online_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_Online_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_Online_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_Online_NotificationDefaultTypeInternal _CRemoteClient_Online_Notification_default_instance_;
constexpr CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CRemoteClient_RemotePacket_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_RemotePacket_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_RemotePacket_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_RemotePacket_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_RemotePacket_NotificationDefaultTypeInternal _CRemoteClient_RemotePacket_Notification_default_instance_;
constexpr CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u}){}
struct CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_ReplyPacket_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal _CRemoteClient_ReplyPacket_Notification_default_instance_;
constexpr CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct CRemoteClient_GetReplies_RequestDefaultTypeInternal {
  constexpr CRemoteClient_GetReplies_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetReplies_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_GetReplies_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetReplies_RequestDefaultTypeInternal _CRemoteClient_GetReplies_Request_default_instance_;
constexpr CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(){}
struct CRemoteClient_GetReplies_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_GetReplies_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_GetReplies_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_GetReplies_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_GetReplies_ResponseDefaultTypeInternal _CRemoteClient_GetReplies_Response_default_instance_;
constexpr CRemoteClient_AllocateTURNServer_Request::CRemoteClient_AllocateTURNServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : credentials_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cellid_(0u){}
struct CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal {
  constexpr CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateTURNServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateTURNServer_RequestDefaultTypeInternal _CRemoteClient_AllocateTURNServer_Request_default_instance_;
constexpr CRemoteClient_AllocateTURNServer_Response::CRemoteClient_AllocateTURNServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : turn_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateTURNServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateTURNServer_ResponseDefaultTypeInternal _CRemoteClient_AllocateTURNServer_Response_default_instance_;
constexpr CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : credentials_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cellid_(0u){}
struct CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal {
  constexpr CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateRelayServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateRelayServer_RequestDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Request_default_instance_;
constexpr CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateRelayServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateRelayServer_ResponseDefaultTypeInternal _CRemoteClient_AllocateRelayServer_Response_default_instance_;
constexpr CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CRemoteClient_AllocateSDR_RequestDefaultTypeInternal {
  constexpr CRemoteClient_AllocateSDR_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateSDR_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateSDR_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateSDR_RequestDefaultTypeInternal _CRemoteClient_AllocateSDR_Request_default_instance_;
constexpr CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_AllocateSDR_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_AllocateSDR_ResponseDefaultTypeInternal _CRemoteClient_AllocateSDR_Response_default_instance_;
constexpr CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , clientid_(uint64_t{0u}){}
struct CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_SteamBroadcast_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SteamBroadcast_NotificationDefaultTypeInternal _CRemoteClient_SteamBroadcast_Notification_default_instance_;
constexpr CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , src_clientid_(uint64_t{0u})
  , dst_clientid_(uint64_t{0u})
  , secretid_(0u){}
struct CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal {
  constexpr CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal() {}
  union {
    CRemoteClient_SteamToSteam_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_SteamToSteam_NotificationDefaultTypeInternal _CRemoteClient_SteamToSteam_Notification_default_instance_;
constexpr CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_account_id_(0u)
  , client_account_id_(0u)
  , appid_(0u)
  , device_form_factor_(0)
  , remote_play_together_(false)
  , guest_session_(false){}
struct CRemotePlay_SessionStarted_RequestDefaultTypeInternal {
  constexpr CRemotePlay_SessionStarted_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStarted_RequestDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStarted_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStarted_RequestDefaultTypeInternal _CRemotePlay_SessionStarted_Request_default_instance_;
constexpr CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(uint64_t{0u}){}
struct CRemotePlay_SessionStarted_ResponseDefaultTypeInternal {
  constexpr CRemotePlay_SessionStarted_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStarted_ResponseDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStarted_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStarted_ResponseDefaultTypeInternal _CRemotePlay_SessionStarted_Response_default_instance_;
constexpr CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_id_(uint64_t{0u})
  , used_x264_(false)
  , used_h264_(false)
  , used_hevc_(false){}
struct CRemotePlay_SessionStopped_NotificationDefaultTypeInternal {
  constexpr CRemotePlay_SessionStopped_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlay_SessionStopped_NotificationDefaultTypeInternal() {}
  union {
    CRemotePlay_SessionStopped_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlay_SessionStopped_NotificationDefaultTypeInternal _CRemotePlay_SessionStopped_Notification_default_instance_;
constexpr CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , guestid_(0u)
  , keyboard_enabled_(false)
  , mouse_enabled_(false)
  , controller_enabled_(false){}
struct CRemotePlayTogether_Notification_PlayerDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_PlayerDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_PlayerDefaultTypeInternal _CRemotePlayTogether_Notification_Player_default_instance_;
constexpr CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , slotid_(0u){}
struct CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_ControllerSlot_obsolete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_ControllerSlot_obsoleteDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_;
constexpr CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , slotid_(0u)
  , controller_type_(0){}
struct CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_ControllerSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_ControllerSlotDefaultTypeInternal _CRemotePlayTogether_Notification_ControllerSlot_default_instance_;
constexpr CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_obsolete_()
  , controller_slots_obsolete_()
  , player_slots_()
  , controller_slots_()
  , host_steamid_(uint64_t{0u})
  , host_clientid_(uint64_t{0u})
  , host_gameid_(uint64_t{0u})
  , has_new_players_(false){}
struct CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal {
  constexpr CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification_GroupUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_Notification_GroupUpdatedDefaultTypeInternal _CRemotePlayTogether_Notification_GroupUpdated_default_instance_;
constexpr CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , _oneof_case_{}{}
struct CRemotePlayTogether_NotificationDefaultTypeInternal {
  constexpr CRemotePlayTogether_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemotePlayTogether_NotificationDefaultTypeInternal() {}
  union {
    CRemotePlayTogether_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemotePlayTogether_NotificationDefaultTypeInternal _CRemotePlayTogether_Notification_default_instance_;
constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : launch_parameters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_CreateRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_CreateRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_;
constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_DeleteRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_DeleteRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_DeleteRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_DeleteRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_;
constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal {
  constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal() {}
  union {
    CRemoteClient_LookupRemotePlayTogetherInvitation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_LookupRemotePlayTogetherInvitation_RequestDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_;
constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitation_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal {
  constexpr CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal() {}
  union {
    CRemoteClient_LookupRemotePlayTogetherInvitation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CRemoteClient_LookupRemotePlayTogetherInvitation_ResponseDefaultTypeInternal _CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[39];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateSession_Response, euniverse_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Request, session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_StartPairing_Response, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, device_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Request, request_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SetPairingInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Request, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, device_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetPairingInfo_Response, request_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Request, session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CancelPairing_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RegisterStatusUpdate_Notification, device_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_UnregisterStatusUpdate_Notification, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_Online_Notification, remote_client_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_RemotePacket_Notification, payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_ReplyPacket_Notification, payload_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Request, session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_GetReplies_Response, payload_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Request, credentials_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateTURNServer_Response, turn_server_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Request, credentials_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateRelayServer_Response, relay_server_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_AllocateSDR_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamBroadcast_Notification, payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, src_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, dst_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, secretid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_SteamToSteam_Notification, encrypted_payload_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, host_account_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, client_account_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, device_form_factor_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, remote_play_together_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Request, guest_session_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStarted_Response, record_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, record_id_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_x264_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_h264_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlay_SessionStopped_Notification, used_hevc_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, guestid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, avatar_hash_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, keyboard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, mouse_enabled_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_Player, controller_enabled_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, slotid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot_obsolete, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, slotid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, player_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_ControllerSlot, controller_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_steamid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_clientid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, players_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, host_gameid_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, controller_slots_obsolete_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, has_new_players_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, player_slots_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification_GroupUpdated, controller_slots_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, steamid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRemotePlayTogether_Notification, Message_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request, launch_parameters_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response, invitation_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, invitation_code_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request, invitation_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response, invitation_url_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CRemoteClient_CreateSession_Request)},
  { 6, 14, -1, sizeof(::CRemoteClient_CreateSession_Response)},
  { 16, 23, -1, sizeof(::CRemoteClient_StartPairing_Request)},
  { 24, 31, -1, sizeof(::CRemoteClient_StartPairing_Response)},
  { 32, 41, -1, sizeof(::CRemoteClient_SetPairingInfo_Request)},
  { 44, -1, -1, sizeof(::CRemoteClient_SetPairingInfo_Response)},
  { 50, 57, -1, sizeof(::CRemoteClient_GetPairingInfo_Request)},
  { 58, 67, -1, sizeof(::CRemoteClient_GetPairingInfo_Response)},
  { 70, 77, -1, sizeof(::CRemoteClient_CancelPairing_Request)},
  { 78, -1, -1, sizeof(::CRemoteClient_CancelPairing_Response)},
  { 84, 93, -1, sizeof(::CRemoteClient_RegisterStatusUpdate_Notification)},
  { 96, 104, -1, sizeof(::CRemoteClient_UnregisterStatusUpdate_Notification)},
  { 106, 114, -1, sizeof(::CRemoteClient_Online_Notification)},
  { 116, 125, -1, sizeof(::CRemoteClient_RemotePacket_Notification)},
  { 128, 136, -1, sizeof(::CRemoteClient_ReplyPacket_Notification)},
  { 138, 145, -1, sizeof(::CRemoteClient_GetReplies_Request)},
  { 146, -1, -1, sizeof(::CRemoteClient_GetReplies_Response)},
  { 153, 161, -1, sizeof(::CRemoteClient_AllocateTURNServer_Request)},
  { 163, 170, -1, sizeof(::CRemoteClient_AllocateTURNServer_Response)},
  { 171, 179, -1, sizeof(::CRemoteClient_AllocateRelayServer_Request)},
  { 181, 188, -1, sizeof(::CRemoteClient_AllocateRelayServer_Response)},
  { 189, 196, -1, sizeof(::CRemoteClient_AllocateSDR_Request)},
  { 197, -1, -1, sizeof(::CRemoteClient_AllocateSDR_Response)},
  { 203, 212, -1, sizeof(::CRemoteClient_SteamBroadcast_Notification)},
  { 215, 226, -1, sizeof(::CRemoteClient_SteamToSteam_Notification)},
  { 231, 243, -1, sizeof(::CRemotePlay_SessionStarted_Request)},
  { 249, 256, -1, sizeof(::CRemotePlay_SessionStarted_Response)},
  { 257, 267, -1, sizeof(::CRemotePlay_SessionStopped_Notification)},
  { 271, 283, -1, sizeof(::CRemotePlayTogether_Notification_Player)},
  { 289, 297, -1, sizeof(::CRemotePlayTogether_Notification_ControllerSlot_obsolete)},
  { 299, 308, -1, sizeof(::CRemotePlayTogether_Notification_ControllerSlot)},
  { 311, 325, -1, sizeof(::CRemotePlayTogether_Notification_GroupUpdated)},
  { 333, 342, -1, sizeof(::CRemotePlayTogether_Notification)},
  { 344, 352, -1, sizeof(::CRemoteClient_CreateRemotePlayTogetherInvitation_Request)},
  { 354, 361, -1, sizeof(::CRemoteClient_CreateRemotePlayTogetherInvitation_Response)},
  { 362, 369, -1, sizeof(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)},
  { 370, -1, -1, sizeof(::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)},
  { 376, 383, -1, sizeof(::CRemoteClient_LookupRemotePlayTogetherInvitation_Request)},
  { 384, 391, -1, sizeof(::CRemoteClient_LookupRemotePlayTogetherInvitation_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateSession_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateSession_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_StartPairing_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_StartPairing_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SetPairingInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SetPairingInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetPairingInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetPairingInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CancelPairing_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CancelPairing_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_RegisterStatusUpdate_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_UnregisterStatusUpdate_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_Online_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_RemotePacket_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_ReplyPacket_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetReplies_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_GetReplies_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateTURNServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateTURNServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateRelayServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateRelayServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateSDR_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_AllocateSDR_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SteamBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_SteamToSteam_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStarted_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStarted_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlay_SessionStopped_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_ControllerSlot_obsolete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_ControllerSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_GroupUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemotePlayTogether_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_CreateRemotePlayTogetherInvitation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_DeleteRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_DeleteRemotePlayTogetherInvitation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_LookupRemotePlayTogetherInvitation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CRemoteClient_LookupRemotePlayTogetherInvitation_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1steammessages_remoteclient_service_mes"
  "sages.proto\"%\n#CRemoteClient_CreateSessi"
  "on_Request\"M\n$CRemoteClient_CreateSessio"
  "n_Response\022\022\n\nsession_id\030\001 \001(\006\022\021\n\teunive"
  "rse\030\002 \001(\005\"8\n\"CRemoteClient_StartPairing_"
  "Request\022\022\n\nsession_id\030\001 \001(\006\"2\n#CRemoteCl"
  "ient_StartPairing_Response\022\013\n\003pin\030\001 \001(\r\""
  "^\n$CRemoteClient_SetPairingInfo_Request\022"
  "\022\n\nsession_id\030\001 \001(\006\022\021\n\tdevice_id\030\002 \001(\006\022\017"
  "\n\007request\030\003 \001(\014\"\'\n%CRemoteClient_SetPair"
  "ingInfo_Response\"3\n$CRemoteClient_GetPai"
  "ringInfo_Request\022\013\n\003pin\030\001 \001(\r\"_\n%CRemote"
  "Client_GetPairingInfo_Response\022\022\n\nsessio"
  "n_id\030\001 \001(\006\022\021\n\tdevice_id\030\002 \001(\006\022\017\n\007request"
  "\030\003 \001(\014\"9\n#CRemoteClient_CancelPairing_Re"
  "quest\022\022\n\nsession_id\030\001 \001(\006\"&\n$CRemoteClie"
  "nt_CancelPairing_Response\"i\n/CRemoteClie"
  "nt_RegisterStatusUpdate_Notification\022\022\n\n"
  "session_id\030\001 \001(\006\022\017\n\007steamid\030\002 \001(\006\022\021\n\tdev"
  "ice_id\030\003 \001(\006\"X\n1CRemoteClient_Unregister"
  "StatusUpdate_Notification\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007steamid\030\002 \001(\006\"N\n!CRemoteClient_"
  "Online_Notification\022\017\n\007steamid\030\001 \001(\006\022\030\n\020"
  "remote_client_id\030\002 \001(\006\"_\n\'CRemoteClient_"
  "RemotePacket_Notification\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007steamid\030\002 \001(\006\022\017\n\007payload\030\004 \001(\014\""
  "M\n&CRemoteClient_ReplyPacket_Notificatio"
  "n\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007payload\030\002 \001(\014\"6"
  "\n CRemoteClient_GetReplies_Request\022\022\n\nse"
  "ssion_id\030\001 \001(\006\"4\n!CRemoteClient_GetRepli"
  "es_Response\022\017\n\007payload\030\001 \003(\014\"O\n(CRemoteC"
  "lient_AllocateTURNServer_Request\022\016\n\006cell"
  "id\030\001 \001(\r\022\023\n\013credentials\030\002 \001(\t\"@\n)CRemote"
  "Client_AllocateTURNServer_Response\022\023\n\013tu"
  "rn_server\030\001 \001(\t\"P\n)CRemoteClient_Allocat"
  "eRelayServer_Request\022\016\n\006cellid\030\001 \001(\r\022\023\n\013"
  "credentials\030\002 \001(\t\"B\n*CRemoteClient_Alloc"
  "ateRelayServer_Response\022\024\n\014relay_server\030"
  "\001 \001(\t\"2\n!CRemoteClient_AllocateSDR_Reque"
  "st\022\r\n\005appid\030\001 \001(\r\"$\n\"CRemoteClient_Alloc"
  "ateSDR_Response\"_\n)CRemoteClient_SteamBr"
  "oadcast_Notification\022\017\n\007steamid\030\001 \001(\006\022\020\n"
  "\010clientid\030\002 \001(\006\022\017\n\007payload\030\003 \001(\014\"\223\001\n\'CRe"
  "moteClient_SteamToSteam_Notification\022\017\n\007"
  "steamid\030\001 \001(\006\022\024\n\014src_clientid\030\002 \001(\006\022\024\n\014d"
  "st_clientid\030\003 \001(\006\022\020\n\010secretid\030\004 \001(\r\022\031\n\021e"
  "ncrypted_payload\030\005 \001(\014\"\270\001\n\"CRemotePlay_S"
  "essionStarted_Request\022\027\n\017host_account_id"
  "\030\001 \001(\r\022\031\n\021client_account_id\030\002 \001(\r\022\r\n\005app"
  "id\030\003 \001(\r\022\032\n\022device_form_factor\030\004 \001(\005\022\034\n\024"
  "remote_play_together\030\005 \001(\010\022\025\n\rguest_sess"
  "ion\030\006 \001(\010\"8\n#CRemotePlay_SessionStarted_"
  "Response\022\021\n\trecord_id\030\001 \001(\006\"u\n\'CRemotePl"
  "ay_SessionStopped_Notification\022\021\n\trecord"
  "_id\030\001 \001(\006\022\021\n\tused_x264\030\002 \001(\010\022\021\n\tused_h26"
  "4\030\003 \001(\010\022\021\n\tused_hevc\030\004 \001(\010\"\267\006\n CRemotePl"
  "ayTogether_Notification\022\017\n\007steamid\030\001 \001(\006"
  "\022G\n\rgroup_updated\030\002 \001(\0132..CRemotePlayTog"
  "ether_Notification.GroupUpdatedH\000\032\214\001\n\006Pl"
  "ayer\022\017\n\007steamid\030\001 \001(\006\022\017\n\007guestid\030\002 \001(\r\022\023"
  "\n\013avatar_hash\030\003 \001(\014\022\030\n\020keyboard_enabled\030"
  "\004 \001(\010\022\025\n\rmouse_enabled\030\005 \001(\010\022\032\n\022controll"
  "er_enabled\030\006 \001(\010\032:\n\027ControllerSlot_obsol"
  "ete\022\016\n\006slotid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\006\032s\n\016"
  "ControllerSlot\022\016\n\006slotid\030\001 \001(\r\0228\n\006player"
  "\030\002 \001(\0132(.CRemotePlayTogether_Notificatio"
  "n.Player\022\027\n\017controller_type\030\003 \001(\005\032\355\002\n\014Gr"
  "oupUpdated\022\024\n\014host_steamid\030\001 \001(\006\022\025\n\rhost"
  "_clientid\030\002 \001(\006\022\030\n\020players_obsolete\030\003 \003("
  "\006\022\023\n\013host_gameid\030\004 \001(\006\022\\\n\031controller_slo"
  "ts_obsolete\030\005 \003(\01329.CRemotePlayTogether_"
  "Notification.ControllerSlot_obsolete\022\027\n\017"
  "has_new_players\030\006 \001(\010\022>\n\014player_slots\030\007 "
  "\003(\0132(.CRemotePlayTogether_Notification.P"
  "layer\022J\n\020controller_slots\030\010 \003(\01320.CRemot"
  "ePlayTogether_Notification.ControllerSlo"
  "tB\t\n\007Message\"d\n8CRemoteClient_CreateRemo"
  "tePlayTogetherInvitation_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\031\n\021launch_parameters\030\002 \001(\t\"T\n9CR"
  "emoteClient_CreateRemotePlayTogetherInvi"
  "tation_Response\022\027\n\017invitation_code\030\001 \001(\t"
  "\"S\n8CRemoteClient_DeleteRemotePlayTogeth"
  "erInvitation_Request\022\027\n\017invitation_code\030"
  "\001 \001(\t\";\n9CRemoteClient_DeleteRemotePlayT"
  "ogetherInvitation_Response\"S\n8CRemoteCli"
  "ent_LookupRemotePlayTogetherInvitation_R"
  "equest\022\027\n\017invitation_code\030\001 \001(\t\"S\n9CRemo"
  "teClient_LookupRemotePlayTogetherInvitat"
  "ion_Response\022\026\n\016invitation_url\030\001 \001(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto = {
  false, false, 3556, descriptor_table_protodef_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, "steammessages_remoteclient_service_messages.proto", 
  &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once, nullptr, 0, 39,
  schemas, file_default_instances, TableStruct_steammessages_5fremoteclient_5fservice_5fmessages_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_5fservice_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter() {
  return &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fremoteclient_5fservice_5fmessages_2eproto(&descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto);

// ===================================================================

class CRemoteClient_CreateSession_Request::_Internal {
 public:
};

CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateSession_Request)
}
CRemoteClient_CreateSession_Request::CRemoteClient_CreateSession_Request(const CRemoteClient_CreateSession_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateSession_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CreateSession_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CreateSession_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateSession_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[0]);
}

// ===================================================================

class CRemoteClient_CreateSession_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateSession_Response>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_euniverse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateSession_Response)
}
CRemoteClient_CreateSession_Response::CRemoteClient_CreateSession_Response(const CRemoteClient_CreateSession_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&euniverse_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateSession_Response)
}

inline void CRemoteClient_CreateSession_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&euniverse_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
}

CRemoteClient_CreateSession_Response::~CRemoteClient_CreateSession_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateSession_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_CreateSession_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_CreateSession_Response::ArenaDtor(void* object) {
  CRemoteClient_CreateSession_Response* _this = reinterpret_cast< CRemoteClient_CreateSession_Response* >(object);
  (void)_this;
}
void CRemoteClient_CreateSession_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateSession_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&euniverse_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(euniverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateSession_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 euniverse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_euniverse(&has_bits);
          euniverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_CreateSession_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateSession_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional int32 euniverse = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_euniverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateSession_Response)
  return target;
}

size_t CRemoteClient_CreateSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateSession_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 euniverse = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_euniverse());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CreateSession_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_CreateSession_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CreateSession_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_CreateSession_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_CreateSession_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_CreateSession_Response &>(from));
}


void CRemoteClient_CreateSession_Response::MergeFrom(const CRemoteClient_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      euniverse_ = from.euniverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_CreateSession_Response::CopyFrom(const CRemoteClient_CreateSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateSession_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateSession_Response::InternalSwap(CRemoteClient_CreateSession_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_CreateSession_Response, euniverse_)
      + sizeof(CRemoteClient_CreateSession_Response::euniverse_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_CreateSession_Response, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateSession_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[1]);
}

// ===================================================================

class CRemoteClient_StartPairing_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_StartPairing_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_StartPairing_Request)
}
CRemoteClient_StartPairing_Request::CRemoteClient_StartPairing_Request(const CRemoteClient_StartPairing_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_StartPairing_Request)
}

inline void CRemoteClient_StartPairing_Request::SharedCtor() {
session_id_ = uint64_t{0u};
}

CRemoteClient_StartPairing_Request::~CRemoteClient_StartPairing_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_StartPairing_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_StartPairing_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_StartPairing_Request::ArenaDtor(void* object) {
  CRemoteClient_StartPairing_Request* _this = reinterpret_cast< CRemoteClient_StartPairing_Request* >(object);
  (void)_this;
}
void CRemoteClient_StartPairing_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_StartPairing_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_StartPairing_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_StartPairing_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_StartPairing_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_StartPairing_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_StartPairing_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_StartPairing_Request)
  return target;
}

size_t CRemoteClient_StartPairing_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_StartPairing_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_StartPairing_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_StartPairing_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_StartPairing_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_StartPairing_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_StartPairing_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_StartPairing_Request &>(from));
}


void CRemoteClient_StartPairing_Request::MergeFrom(const CRemoteClient_StartPairing_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_StartPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_StartPairing_Request::CopyFrom(const CRemoteClient_StartPairing_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_StartPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_StartPairing_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_StartPairing_Request::InternalSwap(CRemoteClient_StartPairing_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_StartPairing_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[2]);
}

// ===================================================================

class CRemoteClient_StartPairing_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_StartPairing_Response>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_StartPairing_Response)
}
CRemoteClient_StartPairing_Response::CRemoteClient_StartPairing_Response(const CRemoteClient_StartPairing_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_StartPairing_Response)
}

inline void CRemoteClient_StartPairing_Response::SharedCtor() {
pin_ = 0u;
}

CRemoteClient_StartPairing_Response::~CRemoteClient_StartPairing_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_StartPairing_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_StartPairing_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_StartPairing_Response::ArenaDtor(void* object) {
  CRemoteClient_StartPairing_Response* _this = reinterpret_cast< CRemoteClient_StartPairing_Response* >(object);
  (void)_this;
}
void CRemoteClient_StartPairing_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_StartPairing_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_StartPairing_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_StartPairing_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_StartPairing_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pin(&has_bits);
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_StartPairing_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_StartPairing_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_StartPairing_Response)
  return target;
}

size_t CRemoteClient_StartPairing_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_StartPairing_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_StartPairing_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_StartPairing_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_StartPairing_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_StartPairing_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_StartPairing_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_StartPairing_Response &>(from));
}


void CRemoteClient_StartPairing_Response::MergeFrom(const CRemoteClient_StartPairing_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_StartPairing_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_set_pin(from._internal_pin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_StartPairing_Response::CopyFrom(const CRemoteClient_StartPairing_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_StartPairing_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_StartPairing_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_StartPairing_Response::InternalSwap(CRemoteClient_StartPairing_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_StartPairing_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[3]);
}

// ===================================================================

class CRemoteClient_SetPairingInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SetPairingInfo_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SetPairingInfo_Request)
}
CRemoteClient_SetPairingInfo_Request::CRemoteClient_SetPairingInfo_Request(const CRemoteClient_SetPairingInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SetPairingInfo_Request)
}

inline void CRemoteClient_SetPairingInfo_Request::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_SetPairingInfo_Request::~CRemoteClient_SetPairingInfo_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SetPairingInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_SetPairingInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SetPairingInfo_Request::ArenaDtor(void* object) {
  CRemoteClient_SetPairingInfo_Request* _this = reinterpret_cast< CRemoteClient_SetPairingInfo_Request* >(object);
  (void)_this;
}
void CRemoteClient_SetPairingInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SetPairingInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SetPairingInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SetPairingInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SetPairingInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_SetPairingInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SetPairingInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_device_id(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SetPairingInfo_Request)
  return target;
}

size_t CRemoteClient_SetPairingInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SetPairingInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_request());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_SetPairingInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_SetPairingInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_SetPairingInfo_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_SetPairingInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_SetPairingInfo_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_SetPairingInfo_Request &>(from));
}


void CRemoteClient_SetPairingInfo_Request::MergeFrom(const CRemoteClient_SetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_SetPairingInfo_Request::CopyFrom(const CRemoteClient_SetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SetPairingInfo_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_SetPairingInfo_Request::InternalSwap(CRemoteClient_SetPairingInfo_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_, lhs_arena,
      &other->request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SetPairingInfo_Request, device_id_)
      + sizeof(CRemoteClient_SetPairingInfo_Request::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SetPairingInfo_Request, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SetPairingInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[4]);
}

// ===================================================================

class CRemoteClient_SetPairingInfo_Response::_Internal {
 public:
};

CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SetPairingInfo_Response)
}
CRemoteClient_SetPairingInfo_Response::CRemoteClient_SetPairingInfo_Response(const CRemoteClient_SetPairingInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SetPairingInfo_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_SetPairingInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_SetPairingInfo_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SetPairingInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[5]);
}

// ===================================================================

class CRemoteClient_GetPairingInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetPairingInfo_Request>()._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetPairingInfo_Request)
}
CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(const CRemoteClient_GetPairingInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetPairingInfo_Request)
}

inline void CRemoteClient_GetPairingInfo_Request::SharedCtor() {
pin_ = 0u;
}

CRemoteClient_GetPairingInfo_Request::~CRemoteClient_GetPairingInfo_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetPairingInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_GetPairingInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_GetPairingInfo_Request::ArenaDtor(void* object) {
  CRemoteClient_GetPairingInfo_Request* _this = reinterpret_cast< CRemoteClient_GetPairingInfo_Request* >(object);
  (void)_this;
}
void CRemoteClient_GetPairingInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetPairingInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetPairingInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetPairingInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetPairingInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pin(&has_bits);
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_GetPairingInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetPairingInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetPairingInfo_Request)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetPairingInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_GetPairingInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_GetPairingInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_GetPairingInfo_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_GetPairingInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_GetPairingInfo_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_GetPairingInfo_Request &>(from));
}


void CRemoteClient_GetPairingInfo_Request::MergeFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_set_pin(from._internal_pin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_GetPairingInfo_Request::CopyFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Request::InternalSwap(CRemoteClient_GetPairingInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetPairingInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[6]);
}

// ===================================================================

class CRemoteClient_GetPairingInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetPairingInfo_Response>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetPairingInfo_Response)
}
CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(const CRemoteClient_GetPairingInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetPairingInfo_Response)
}

inline void CRemoteClient_GetPairingInfo_Response::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_GetPairingInfo_Response::~CRemoteClient_GetPairingInfo_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetPairingInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_GetPairingInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_GetPairingInfo_Response::ArenaDtor(void* object) {
  CRemoteClient_GetPairingInfo_Response* _this = reinterpret_cast< CRemoteClient_GetPairingInfo_Response* >(object);
  (void)_this;
}
void CRemoteClient_GetPairingInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetPairingInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetPairingInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetPairingInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetPairingInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_GetPairingInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetPairingInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_device_id(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetPairingInfo_Response)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetPairingInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_request());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_GetPairingInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_GetPairingInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_GetPairingInfo_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_GetPairingInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_GetPairingInfo_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_GetPairingInfo_Response &>(from));
}


void CRemoteClient_GetPairingInfo_Response::MergeFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_request(from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_GetPairingInfo_Response::CopyFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Response::InternalSwap(CRemoteClient_GetPairingInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_, lhs_arena,
      &other->request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_GetPairingInfo_Response, device_id_)
      + sizeof(CRemoteClient_GetPairingInfo_Response::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_GetPairingInfo_Response, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetPairingInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[7]);
}

// ===================================================================

class CRemoteClient_CancelPairing_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CancelPairing_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CancelPairing_Request)
}
CRemoteClient_CancelPairing_Request::CRemoteClient_CancelPairing_Request(const CRemoteClient_CancelPairing_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CancelPairing_Request)
}

inline void CRemoteClient_CancelPairing_Request::SharedCtor() {
session_id_ = uint64_t{0u};
}

CRemoteClient_CancelPairing_Request::~CRemoteClient_CancelPairing_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CancelPairing_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_CancelPairing_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_CancelPairing_Request::ArenaDtor(void* object) {
  CRemoteClient_CancelPairing_Request* _this = reinterpret_cast< CRemoteClient_CancelPairing_Request* >(object);
  (void)_this;
}
void CRemoteClient_CancelPairing_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CancelPairing_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CancelPairing_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CancelPairing_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CancelPairing_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_CancelPairing_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CancelPairing_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CancelPairing_Request)
  return target;
}

size_t CRemoteClient_CancelPairing_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CancelPairing_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CancelPairing_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_CancelPairing_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CancelPairing_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_CancelPairing_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_CancelPairing_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_CancelPairing_Request &>(from));
}


void CRemoteClient_CancelPairing_Request::MergeFrom(const CRemoteClient_CancelPairing_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CancelPairing_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_CancelPairing_Request::CopyFrom(const CRemoteClient_CancelPairing_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CancelPairing_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CancelPairing_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_CancelPairing_Request::InternalSwap(CRemoteClient_CancelPairing_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CancelPairing_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[8]);
}

// ===================================================================

class CRemoteClient_CancelPairing_Response::_Internal {
 public:
};

CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CancelPairing_Response)
}
CRemoteClient_CancelPairing_Response::CRemoteClient_CancelPairing_Response(const CRemoteClient_CancelPairing_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CancelPairing_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CancelPairing_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CancelPairing_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CancelPairing_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[9]);
}

// ===================================================================

class CRemoteClient_RegisterStatusUpdate_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_RegisterStatusUpdate_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_RegisterStatusUpdate_Notification)
}
CRemoteClient_RegisterStatusUpdate_Notification::CRemoteClient_RegisterStatusUpdate_Notification(const CRemoteClient_RegisterStatusUpdate_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_RegisterStatusUpdate_Notification)
}

inline void CRemoteClient_RegisterStatusUpdate_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_RegisterStatusUpdate_Notification::~CRemoteClient_RegisterStatusUpdate_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_RegisterStatusUpdate_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_RegisterStatusUpdate_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_RegisterStatusUpdate_Notification::ArenaDtor(void* object) {
  CRemoteClient_RegisterStatusUpdate_Notification* _this = reinterpret_cast< CRemoteClient_RegisterStatusUpdate_Notification* >(object);
  (void)_this;
}
void CRemoteClient_RegisterStatusUpdate_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_RegisterStatusUpdate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_RegisterStatusUpdate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_RegisterStatusUpdate_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_RegisterStatusUpdate_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_RegisterStatusUpdate_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_RegisterStatusUpdate_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional fixed64 device_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_RegisterStatusUpdate_Notification)
  return target;
}

size_t CRemoteClient_RegisterStatusUpdate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_RegisterStatusUpdate_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_RegisterStatusUpdate_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_RegisterStatusUpdate_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_RegisterStatusUpdate_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_RegisterStatusUpdate_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_RegisterStatusUpdate_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_RegisterStatusUpdate_Notification &>(from));
}


void CRemoteClient_RegisterStatusUpdate_Notification::MergeFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_RegisterStatusUpdate_Notification::CopyFrom(const CRemoteClient_RegisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_RegisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_RegisterStatusUpdate_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_RegisterStatusUpdate_Notification::InternalSwap(CRemoteClient_RegisterStatusUpdate_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_RegisterStatusUpdate_Notification, device_id_)
      + sizeof(CRemoteClient_RegisterStatusUpdate_Notification::device_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_RegisterStatusUpdate_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_RegisterStatusUpdate_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[10]);
}

// ===================================================================

class CRemoteClient_UnregisterStatusUpdate_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_UnregisterStatusUpdate_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_UnregisterStatusUpdate_Notification)
}
CRemoteClient_UnregisterStatusUpdate_Notification::CRemoteClient_UnregisterStatusUpdate_Notification(const CRemoteClient_UnregisterStatusUpdate_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_UnregisterStatusUpdate_Notification)
}

inline void CRemoteClient_UnregisterStatusUpdate_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
}

CRemoteClient_UnregisterStatusUpdate_Notification::~CRemoteClient_UnregisterStatusUpdate_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_UnregisterStatusUpdate_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_UnregisterStatusUpdate_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::ArenaDtor(void* object) {
  CRemoteClient_UnregisterStatusUpdate_Notification* _this = reinterpret_cast< CRemoteClient_UnregisterStatusUpdate_Notification* >(object);
  (void)_this;
}
void CRemoteClient_UnregisterStatusUpdate_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_UnregisterStatusUpdate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_UnregisterStatusUpdate_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_UnregisterStatusUpdate_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_UnregisterStatusUpdate_Notification)
  return target;
}

size_t CRemoteClient_UnregisterStatusUpdate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_UnregisterStatusUpdate_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_UnregisterStatusUpdate_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_UnregisterStatusUpdate_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_UnregisterStatusUpdate_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_UnregisterStatusUpdate_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_UnregisterStatusUpdate_Notification &>(from));
}


void CRemoteClient_UnregisterStatusUpdate_Notification::MergeFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_UnregisterStatusUpdate_Notification::CopyFrom(const CRemoteClient_UnregisterStatusUpdate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_UnregisterStatusUpdate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_UnregisterStatusUpdate_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_UnregisterStatusUpdate_Notification::InternalSwap(CRemoteClient_UnregisterStatusUpdate_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_UnregisterStatusUpdate_Notification, steamid_)
      + sizeof(CRemoteClient_UnregisterStatusUpdate_Notification::steamid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_UnregisterStatusUpdate_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_UnregisterStatusUpdate_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[11]);
}

// ===================================================================

class CRemoteClient_Online_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_Online_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_Online_Notification)
}
CRemoteClient_Online_Notification::CRemoteClient_Online_Notification(const CRemoteClient_Online_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_client_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_Online_Notification)
}

inline void CRemoteClient_Online_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_client_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
}

CRemoteClient_Online_Notification::~CRemoteClient_Online_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_Online_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_Online_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_Online_Notification::ArenaDtor(void* object) {
  CRemoteClient_Online_Notification* _this = reinterpret_cast< CRemoteClient_Online_Notification* >(object);
  (void)_this;
}
void CRemoteClient_Online_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_Online_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_Online_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_Online_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_client_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(remote_client_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_Online_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 remote_client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_remote_client_id(&has_bits);
          remote_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_Online_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_Online_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 remote_client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_remote_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_Online_Notification)
  return target;
}

size_t CRemoteClient_Online_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_Online_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 remote_client_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_Online_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_Online_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_Online_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_Online_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_Online_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_Online_Notification &>(from));
}


void CRemoteClient_Online_Notification::MergeFrom(const CRemoteClient_Online_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_Online_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      remote_client_id_ = from.remote_client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_Online_Notification::CopyFrom(const CRemoteClient_Online_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_Online_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_Online_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_Online_Notification::InternalSwap(CRemoteClient_Online_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_Online_Notification, remote_client_id_)
      + sizeof(CRemoteClient_Online_Notification::remote_client_id_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_Online_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_Online_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[12]);
}

// ===================================================================

class CRemoteClient_RemotePacket_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_RemotePacket_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_RemotePacket_Notification)
}
CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(const CRemoteClient_RemotePacket_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_RemotePacket_Notification)
}

inline void CRemoteClient_RemotePacket_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
}

CRemoteClient_RemotePacket_Notification::~CRemoteClient_RemotePacket_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_RemotePacket_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_RemotePacket_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_RemotePacket_Notification::ArenaDtor(void* object) {
  CRemoteClient_RemotePacket_Notification* _this = reinterpret_cast< CRemoteClient_RemotePacket_Notification* >(object);
  (void)_this;
}
void CRemoteClient_RemotePacket_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_RemotePacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_RemotePacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_RemotePacket_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_RemotePacket_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_RemotePacket_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_RemotePacket_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_RemotePacket_Notification)
  return target;
}

size_t CRemoteClient_RemotePacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_RemotePacket_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_RemotePacket_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_RemotePacket_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_RemotePacket_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_RemotePacket_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_RemotePacket_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_RemotePacket_Notification &>(from));
}


void CRemoteClient_RemotePacket_Notification::MergeFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_RemotePacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_RemotePacket_Notification::CopyFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_RemotePacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_RemotePacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_RemotePacket_Notification::InternalSwap(CRemoteClient_RemotePacket_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_RemotePacket_Notification, steamid_)
      + sizeof(CRemoteClient_RemotePacket_Notification::steamid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_RemotePacket_Notification, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_RemotePacket_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[13]);
}

// ===================================================================

class CRemoteClient_ReplyPacket_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_ReplyPacket_Notification>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_ReplyPacket_Notification)
}
CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(const CRemoteClient_ReplyPacket_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_ReplyPacket_Notification)
}

inline void CRemoteClient_ReplyPacket_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_ = uint64_t{0u};
}

CRemoteClient_ReplyPacket_Notification::~CRemoteClient_ReplyPacket_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_ReplyPacket_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_ReplyPacket_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_ReplyPacket_Notification::ArenaDtor(void* object) {
  CRemoteClient_ReplyPacket_Notification* _this = reinterpret_cast< CRemoteClient_ReplyPacket_Notification* >(object);
  (void)_this;
}
void CRemoteClient_ReplyPacket_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_ReplyPacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_ReplyPacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_ReplyPacket_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_ReplyPacket_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_ReplyPacket_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_ReplyPacket_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_ReplyPacket_Notification)
  return target;
}

size_t CRemoteClient_ReplyPacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_ReplyPacket_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_ReplyPacket_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_ReplyPacket_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_ReplyPacket_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_ReplyPacket_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_ReplyPacket_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_ReplyPacket_Notification &>(from));
}


void CRemoteClient_ReplyPacket_Notification::MergeFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_ReplyPacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_ReplyPacket_Notification::CopyFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_ReplyPacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_ReplyPacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_ReplyPacket_Notification::InternalSwap(CRemoteClient_ReplyPacket_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_ReplyPacket_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[14]);
}

// ===================================================================

class CRemoteClient_GetReplies_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_GetReplies_Request>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetReplies_Request)
}
CRemoteClient_GetReplies_Request::CRemoteClient_GetReplies_Request(const CRemoteClient_GetReplies_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetReplies_Request)
}

inline void CRemoteClient_GetReplies_Request::SharedCtor() {
session_id_ = uint64_t{0u};
}

CRemoteClient_GetReplies_Request::~CRemoteClient_GetReplies_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetReplies_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_GetReplies_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_GetReplies_Request::ArenaDtor(void* object) {
  CRemoteClient_GetReplies_Request* _this = reinterpret_cast< CRemoteClient_GetReplies_Request* >(object);
  (void)_this;
}
void CRemoteClient_GetReplies_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetReplies_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetReplies_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetReplies_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetReplies_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_GetReplies_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetReplies_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetReplies_Request)
  return target;
}

size_t CRemoteClient_GetReplies_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetReplies_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_GetReplies_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_GetReplies_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_GetReplies_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_GetReplies_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_GetReplies_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_GetReplies_Request &>(from));
}


void CRemoteClient_GetReplies_Request::MergeFrom(const CRemoteClient_GetReplies_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetReplies_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_GetReplies_Request::CopyFrom(const CRemoteClient_GetReplies_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetReplies_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetReplies_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_GetReplies_Request::InternalSwap(CRemoteClient_GetReplies_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetReplies_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[15]);
}

// ===================================================================

class CRemoteClient_GetReplies_Response::_Internal {
 public:
};

CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  payload_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_GetReplies_Response)
}
CRemoteClient_GetReplies_Response::CRemoteClient_GetReplies_Response(const CRemoteClient_GetReplies_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_GetReplies_Response)
}

inline void CRemoteClient_GetReplies_Response::SharedCtor() {
}

CRemoteClient_GetReplies_Response::~CRemoteClient_GetReplies_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_GetReplies_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_GetReplies_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_GetReplies_Response::ArenaDtor(void* object) {
  CRemoteClient_GetReplies_Response* _this = reinterpret_cast< CRemoteClient_GetReplies_Response* >(object);
  (void)_this;
}
void CRemoteClient_GetReplies_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_GetReplies_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_GetReplies_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_GetReplies_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_GetReplies_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_payload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_GetReplies_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_GetReplies_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes payload = 1;
  for (int i = 0, n = this->_internal_payload_size(); i < n; i++) {
    const auto& s = this->_internal_payload(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_GetReplies_Response)
  return target;
}

size_t CRemoteClient_GetReplies_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_GetReplies_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes payload = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(payload_.size());
  for (int i = 0, n = payload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      payload_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_GetReplies_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_GetReplies_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_GetReplies_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_GetReplies_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_GetReplies_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_GetReplies_Response &>(from));
}


void CRemoteClient_GetReplies_Response::MergeFrom(const CRemoteClient_GetReplies_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_GetReplies_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_GetReplies_Response::CopyFrom(const CRemoteClient_GetReplies_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_GetReplies_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetReplies_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_GetReplies_Response::InternalSwap(CRemoteClient_GetReplies_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  payload_.InternalSwap(&other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_GetReplies_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[16]);
}

// ===================================================================

class CRemoteClient_AllocateTURNServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateTURNServer_Request>()._has_bits_);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateTURNServer_Request::CRemoteClient_AllocateTURNServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateTURNServer_Request)
}
CRemoteClient_AllocateTURNServer_Request::CRemoteClient_AllocateTURNServer_Request(const CRemoteClient_AllocateTURNServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credentials()) {
    credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credentials(), 
      GetArenaForAllocation());
  }
  cellid_ = from.cellid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateTURNServer_Request)
}

inline void CRemoteClient_AllocateTURNServer_Request::SharedCtor() {
credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cellid_ = 0u;
}

CRemoteClient_AllocateTURNServer_Request::~CRemoteClient_AllocateTURNServer_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateTURNServer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_AllocateTURNServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  credentials_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateTURNServer_Request::ArenaDtor(void* object) {
  CRemoteClient_AllocateTURNServer_Request* _this = reinterpret_cast< CRemoteClient_AllocateTURNServer_Request* >(object);
  (void)_this;
}
void CRemoteClient_AllocateTURNServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateTURNServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateTURNServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateTURNServer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    credentials_.ClearNonDefaultToEmpty();
  }
  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateTURNServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cellid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_credentials();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateTURNServer_Request.credentials");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_AllocateTURNServer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateTURNServer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cellid(), target);
  }

  // optional string credentials = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_credentials().data(), static_cast<int>(this->_internal_credentials().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateTURNServer_Request.credentials");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_credentials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateTURNServer_Request)
  return target;
}

size_t CRemoteClient_AllocateTURNServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateTURNServer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string credentials = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_credentials());
    }

    // optional uint32 cellid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateTURNServer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_AllocateTURNServer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateTURNServer_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_AllocateTURNServer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_AllocateTURNServer_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_AllocateTURNServer_Request &>(from));
}


void CRemoteClient_AllocateTURNServer_Request::MergeFrom(const CRemoteClient_AllocateTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateTURNServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_credentials(from._internal_credentials());
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_AllocateTURNServer_Request::CopyFrom(const CRemoteClient_AllocateTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateTURNServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateTURNServer_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateTURNServer_Request::InternalSwap(CRemoteClient_AllocateTURNServer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &credentials_, lhs_arena,
      &other->credentials_, rhs_arena
  );
  swap(cellid_, other->cellid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateTURNServer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[17]);
}

// ===================================================================

class CRemoteClient_AllocateTURNServer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateTURNServer_Response>()._has_bits_);
  static void set_has_turn_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateTURNServer_Response::CRemoteClient_AllocateTURNServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateTURNServer_Response)
}
CRemoteClient_AllocateTURNServer_Response::CRemoteClient_AllocateTURNServer_Response(const CRemoteClient_AllocateTURNServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_turn_server()) {
    turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_turn_server(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateTURNServer_Response)
}

inline void CRemoteClient_AllocateTURNServer_Response::SharedCtor() {
turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_AllocateTURNServer_Response::~CRemoteClient_AllocateTURNServer_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateTURNServer_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_AllocateTURNServer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  turn_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateTURNServer_Response::ArenaDtor(void* object) {
  CRemoteClient_AllocateTURNServer_Response* _this = reinterpret_cast< CRemoteClient_AllocateTURNServer_Response* >(object);
  (void)_this;
}
void CRemoteClient_AllocateTURNServer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateTURNServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateTURNServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateTURNServer_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    turn_server_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateTURNServer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string turn_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_turn_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateTURNServer_Response.turn_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_AllocateTURNServer_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateTURNServer_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string turn_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_turn_server().data(), static_cast<int>(this->_internal_turn_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateTURNServer_Response.turn_server");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_turn_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateTURNServer_Response)
  return target;
}

size_t CRemoteClient_AllocateTURNServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateTURNServer_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string turn_server = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_turn_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateTURNServer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_AllocateTURNServer_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateTURNServer_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_AllocateTURNServer_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_AllocateTURNServer_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_AllocateTURNServer_Response &>(from));
}


void CRemoteClient_AllocateTURNServer_Response::MergeFrom(const CRemoteClient_AllocateTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateTURNServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_server()) {
    _internal_set_turn_server(from._internal_turn_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_AllocateTURNServer_Response::CopyFrom(const CRemoteClient_AllocateTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateTURNServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateTURNServer_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateTURNServer_Response::InternalSwap(CRemoteClient_AllocateTURNServer_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &turn_server_, lhs_arena,
      &other->turn_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateTURNServer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[18]);
}

// ===================================================================

class CRemoteClient_AllocateRelayServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateRelayServer_Request>()._has_bits_);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateRelayServer_Request)
}
CRemoteClient_AllocateRelayServer_Request::CRemoteClient_AllocateRelayServer_Request(const CRemoteClient_AllocateRelayServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_credentials()) {
    credentials_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_credentials(), 
      GetArenaForAllocation());
  }
  cellid_ = from.cellid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateRelayServer_Request)
}

inline void CRemoteClient_AllocateRelayServer_Request::SharedCtor() {
credentials_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  credentials_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cellid_ = 0u;
}

CRemoteClient_AllocateRelayServer_Request::~CRemoteClient_AllocateRelayServer_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateRelayServer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_AllocateRelayServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  credentials_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateRelayServer_Request::ArenaDtor(void* object) {
  CRemoteClient_AllocateRelayServer_Request* _this = reinterpret_cast< CRemoteClient_AllocateRelayServer_Request* >(object);
  (void)_this;
}
void CRemoteClient_AllocateRelayServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateRelayServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateRelayServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateRelayServer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    credentials_.ClearNonDefaultToEmpty();
  }
  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateRelayServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cellid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_credentials();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateRelayServer_Request.credentials");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_AllocateRelayServer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateRelayServer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cellid(), target);
  }

  // optional string credentials = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_credentials().data(), static_cast<int>(this->_internal_credentials().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateRelayServer_Request.credentials");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_credentials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateRelayServer_Request)
  return target;
}

size_t CRemoteClient_AllocateRelayServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateRelayServer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string credentials = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_credentials());
    }

    // optional uint32 cellid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateRelayServer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_AllocateRelayServer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateRelayServer_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_AllocateRelayServer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_AllocateRelayServer_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_AllocateRelayServer_Request &>(from));
}


void CRemoteClient_AllocateRelayServer_Request::MergeFrom(const CRemoteClient_AllocateRelayServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateRelayServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_credentials(from._internal_credentials());
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_AllocateRelayServer_Request::CopyFrom(const CRemoteClient_AllocateRelayServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateRelayServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateRelayServer_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateRelayServer_Request::InternalSwap(CRemoteClient_AllocateRelayServer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &credentials_, lhs_arena,
      &other->credentials_, rhs_arena
  );
  swap(cellid_, other->cellid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateRelayServer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[19]);
}

// ===================================================================

class CRemoteClient_AllocateRelayServer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateRelayServer_Response>()._has_bits_);
  static void set_has_relay_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateRelayServer_Response)
}
CRemoteClient_AllocateRelayServer_Response::CRemoteClient_AllocateRelayServer_Response(const CRemoteClient_AllocateRelayServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_relay_server()) {
    relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relay_server(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateRelayServer_Response)
}

inline void CRemoteClient_AllocateRelayServer_Response::SharedCtor() {
relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_AllocateRelayServer_Response::~CRemoteClient_AllocateRelayServer_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateRelayServer_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_AllocateRelayServer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  relay_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_AllocateRelayServer_Response::ArenaDtor(void* object) {
  CRemoteClient_AllocateRelayServer_Response* _this = reinterpret_cast< CRemoteClient_AllocateRelayServer_Response* >(object);
  (void)_this;
}
void CRemoteClient_AllocateRelayServer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateRelayServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateRelayServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateRelayServer_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relay_server_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateRelayServer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string relay_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relay_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_AllocateRelayServer_Response.relay_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_AllocateRelayServer_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateRelayServer_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relay_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relay_server().data(), static_cast<int>(this->_internal_relay_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_AllocateRelayServer_Response.relay_server");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relay_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateRelayServer_Response)
  return target;
}

size_t CRemoteClient_AllocateRelayServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateRelayServer_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string relay_server = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relay_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateRelayServer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_AllocateRelayServer_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateRelayServer_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_AllocateRelayServer_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_AllocateRelayServer_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_AllocateRelayServer_Response &>(from));
}


void CRemoteClient_AllocateRelayServer_Response::MergeFrom(const CRemoteClient_AllocateRelayServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateRelayServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relay_server()) {
    _internal_set_relay_server(from._internal_relay_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_AllocateRelayServer_Response::CopyFrom(const CRemoteClient_AllocateRelayServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateRelayServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateRelayServer_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateRelayServer_Response::InternalSwap(CRemoteClient_AllocateRelayServer_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &relay_server_, lhs_arena,
      &other->relay_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateRelayServer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[20]);
}

// ===================================================================

class CRemoteClient_AllocateSDR_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_AllocateSDR_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateSDR_Request)
}
CRemoteClient_AllocateSDR_Request::CRemoteClient_AllocateSDR_Request(const CRemoteClient_AllocateSDR_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateSDR_Request)
}

inline void CRemoteClient_AllocateSDR_Request::SharedCtor() {
appid_ = 0u;
}

CRemoteClient_AllocateSDR_Request::~CRemoteClient_AllocateSDR_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_AllocateSDR_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_AllocateSDR_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemoteClient_AllocateSDR_Request::ArenaDtor(void* object) {
  CRemoteClient_AllocateSDR_Request* _this = reinterpret_cast< CRemoteClient_AllocateSDR_Request* >(object);
  (void)_this;
}
void CRemoteClient_AllocateSDR_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_AllocateSDR_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_AllocateSDR_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_AllocateSDR_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_AllocateSDR_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_AllocateSDR_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_AllocateSDR_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_AllocateSDR_Request)
  return target;
}

size_t CRemoteClient_AllocateSDR_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_AllocateSDR_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateSDR_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_AllocateSDR_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateSDR_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_AllocateSDR_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_AllocateSDR_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_AllocateSDR_Request &>(from));
}


void CRemoteClient_AllocateSDR_Request::MergeFrom(const CRemoteClient_AllocateSDR_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_AllocateSDR_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_AllocateSDR_Request::CopyFrom(const CRemoteClient_AllocateSDR_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_AllocateSDR_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_AllocateSDR_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_AllocateSDR_Request::InternalSwap(CRemoteClient_AllocateSDR_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateSDR_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[21]);
}

// ===================================================================

class CRemoteClient_AllocateSDR_Response::_Internal {
 public:
};

CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_AllocateSDR_Response)
}
CRemoteClient_AllocateSDR_Response::CRemoteClient_AllocateSDR_Response(const CRemoteClient_AllocateSDR_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_AllocateSDR_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_AllocateSDR_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_AllocateSDR_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_AllocateSDR_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[22]);
}

// ===================================================================

class CRemoteClient_SteamBroadcast_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SteamBroadcast_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SteamBroadcast_Notification)
}
CRemoteClient_SteamBroadcast_Notification::CRemoteClient_SteamBroadcast_Notification(const CRemoteClient_SteamBroadcast_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SteamBroadcast_Notification)
}

inline void CRemoteClient_SteamBroadcast_Notification::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
}

CRemoteClient_SteamBroadcast_Notification::~CRemoteClient_SteamBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SteamBroadcast_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_SteamBroadcast_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SteamBroadcast_Notification::ArenaDtor(void* object) {
  CRemoteClient_SteamBroadcast_Notification* _this = reinterpret_cast< CRemoteClient_SteamBroadcast_Notification* >(object);
  (void)_this;
}
void CRemoteClient_SteamBroadcast_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SteamBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SteamBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SteamBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(clientid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SteamBroadcast_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_SteamBroadcast_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SteamBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 clientid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_clientid(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SteamBroadcast_Notification)
  return target;
}

size_t CRemoteClient_SteamBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SteamBroadcast_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 clientid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_SteamBroadcast_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_SteamBroadcast_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_SteamBroadcast_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_SteamBroadcast_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_SteamBroadcast_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_SteamBroadcast_Notification &>(from));
}


void CRemoteClient_SteamBroadcast_Notification::MergeFrom(const CRemoteClient_SteamBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SteamBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_SteamBroadcast_Notification::CopyFrom(const CRemoteClient_SteamBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SteamBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SteamBroadcast_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_SteamBroadcast_Notification::InternalSwap(CRemoteClient_SteamBroadcast_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamBroadcast_Notification, clientid_)
      + sizeof(CRemoteClient_SteamBroadcast_Notification::clientid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamBroadcast_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SteamBroadcast_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[23]);
}

// ===================================================================

class CRemoteClient_SteamToSteam_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_SteamToSteam_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_src_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dst_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_secretid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encrypted_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_SteamToSteam_Notification)
}
CRemoteClient_SteamToSteam_Notification::CRemoteClient_SteamToSteam_Notification(const CRemoteClient_SteamToSteam_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encrypted_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encrypted_payload()) {
    encrypted_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&secretid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_SteamToSteam_Notification)
}

inline void CRemoteClient_SteamToSteam_Notification::SharedCtor() {
encrypted_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encrypted_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&secretid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
}

CRemoteClient_SteamToSteam_Notification::~CRemoteClient_SteamToSteam_Notification() {
  // @@protoc_insertion_point(destructor:CRemoteClient_SteamToSteam_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_SteamToSteam_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encrypted_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_SteamToSteam_Notification::ArenaDtor(void* object) {
  CRemoteClient_SteamToSteam_Notification* _this = reinterpret_cast< CRemoteClient_SteamToSteam_Notification* >(object);
  (void)_this;
}
void CRemoteClient_SteamToSteam_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_SteamToSteam_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_SteamToSteam_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_SteamToSteam_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encrypted_payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secretid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(secretid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_SteamToSteam_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 src_clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_src_clientid(&has_bits);
          src_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 dst_clientid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dst_clientid(&has_bits);
          dst_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secretid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_secretid(&has_bits);
          secretid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encrypted_payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_encrypted_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_SteamToSteam_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_SteamToSteam_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 src_clientid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_src_clientid(), target);
  }

  // optional fixed64 dst_clientid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_dst_clientid(), target);
  }

  // optional uint32 secretid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_secretid(), target);
  }

  // optional bytes encrypted_payload = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_encrypted_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_SteamToSteam_Notification)
  return target;
}

size_t CRemoteClient_SteamToSteam_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_SteamToSteam_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes encrypted_payload = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_payload());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 src_clientid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 dst_clientid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 secretid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_secretid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_SteamToSteam_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_SteamToSteam_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_SteamToSteam_Notification::GetClassData() const { return &_class_data_; }

void CRemoteClient_SteamToSteam_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_SteamToSteam_Notification *>(to)->MergeFrom(
      static_cast<const CRemoteClient_SteamToSteam_Notification &>(from));
}


void CRemoteClient_SteamToSteam_Notification::MergeFrom(const CRemoteClient_SteamToSteam_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_SteamToSteam_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_payload(from._internal_encrypted_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_clientid_ = from.src_clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dst_clientid_ = from.dst_clientid_;
    }
    if (cached_has_bits & 0x00000010u) {
      secretid_ = from.secretid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_SteamToSteam_Notification::CopyFrom(const CRemoteClient_SteamToSteam_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_SteamToSteam_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_SteamToSteam_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_SteamToSteam_Notification::InternalSwap(CRemoteClient_SteamToSteam_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encrypted_payload_, lhs_arena,
      &other->encrypted_payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamToSteam_Notification, secretid_)
      + sizeof(CRemoteClient_SteamToSteam_Notification::secretid_)
      - PROTOBUF_FIELD_OFFSET(CRemoteClient_SteamToSteam_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_SteamToSteam_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[24]);
}

// ===================================================================

class CRemotePlay_SessionStarted_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStarted_Request>()._has_bits_);
  static void set_has_host_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_form_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_play_together(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guest_session(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStarted_Request)
}
CRemotePlay_SessionStarted_Request::CRemotePlay_SessionStarted_Request(const CRemotePlay_SessionStarted_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&host_account_id_, &from.host_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guest_session_) -
    reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStarted_Request)
}

inline void CRemotePlay_SessionStarted_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&host_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guest_session_) -
    reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
}

CRemotePlay_SessionStarted_Request::~CRemotePlay_SessionStarted_Request() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStarted_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlay_SessionStarted_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemotePlay_SessionStarted_Request::ArenaDtor(void* object) {
  CRemotePlay_SessionStarted_Request* _this = reinterpret_cast< CRemotePlay_SessionStarted_Request* >(object);
  (void)_this;
}
void CRemotePlay_SessionStarted_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStarted_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStarted_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStarted_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&host_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guest_session_) -
        reinterpret_cast<char*>(&host_account_id_)) + sizeof(guest_session_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStarted_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 host_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_host_account_id(&has_bits);
          host_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_account_id(&has_bits);
          client_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_form_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_device_form_factor(&has_bits);
          device_form_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remote_play_together = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_remote_play_together(&has_bits);
          remote_play_together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool guest_session = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_guest_session(&has_bits);
          guest_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlay_SessionStarted_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStarted_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_host_account_id(), target);
  }

  // optional uint32 client_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_account_id(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional int32 device_form_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_device_form_factor(), target);
  }

  // optional bool remote_play_together = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_remote_play_together(), target);
  }

  // optional bool guest_session = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_guest_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStarted_Request)
  return target;
}

size_t CRemotePlay_SessionStarted_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStarted_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 host_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_host_account_id());
    }

    // optional uint32 client_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_account_id());
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 device_form_factor = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_device_form_factor());
    }

    // optional bool remote_play_together = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool guest_session = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlay_SessionStarted_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlay_SessionStarted_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlay_SessionStarted_Request::GetClassData() const { return &_class_data_; }

void CRemotePlay_SessionStarted_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlay_SessionStarted_Request *>(to)->MergeFrom(
      static_cast<const CRemotePlay_SessionStarted_Request &>(from));
}


void CRemotePlay_SessionStarted_Request::MergeFrom(const CRemotePlay_SessionStarted_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStarted_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      host_account_id_ = from.host_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_account_id_ = from.client_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_form_factor_ = from.device_form_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      remote_play_together_ = from.remote_play_together_;
    }
    if (cached_has_bits & 0x00000020u) {
      guest_session_ = from.guest_session_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlay_SessionStarted_Request::CopyFrom(const CRemotePlay_SessionStarted_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStarted_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStarted_Request::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStarted_Request::InternalSwap(CRemotePlay_SessionStarted_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStarted_Request, guest_session_)
      + sizeof(CRemotePlay_SessionStarted_Request::guest_session_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStarted_Request, host_account_id_)>(
          reinterpret_cast<char*>(&host_account_id_),
          reinterpret_cast<char*>(&other->host_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStarted_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[25]);
}

// ===================================================================

class CRemotePlay_SessionStarted_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStarted_Response>()._has_bits_);
  static void set_has_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStarted_Response)
}
CRemotePlay_SessionStarted_Response::CRemotePlay_SessionStarted_Response(const CRemotePlay_SessionStarted_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_ = from.record_id_;
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStarted_Response)
}

inline void CRemotePlay_SessionStarted_Response::SharedCtor() {
record_id_ = uint64_t{0u};
}

CRemotePlay_SessionStarted_Response::~CRemotePlay_SessionStarted_Response() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStarted_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlay_SessionStarted_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemotePlay_SessionStarted_Response::ArenaDtor(void* object) {
  CRemotePlay_SessionStarted_Response* _this = reinterpret_cast< CRemotePlay_SessionStarted_Response* >(object);
  (void)_this;
}
void CRemotePlay_SessionStarted_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStarted_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStarted_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStarted_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStarted_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_record_id(&has_bits);
          record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlay_SessionStarted_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStarted_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_record_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStarted_Response)
  return target;
}

size_t CRemotePlay_SessionStarted_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStarted_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 record_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlay_SessionStarted_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlay_SessionStarted_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlay_SessionStarted_Response::GetClassData() const { return &_class_data_; }

void CRemotePlay_SessionStarted_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlay_SessionStarted_Response *>(to)->MergeFrom(
      static_cast<const CRemotePlay_SessionStarted_Response &>(from));
}


void CRemotePlay_SessionStarted_Response::MergeFrom(const CRemotePlay_SessionStarted_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStarted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_record_id()) {
    _internal_set_record_id(from._internal_record_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlay_SessionStarted_Response::CopyFrom(const CRemotePlay_SessionStarted_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStarted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStarted_Response::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStarted_Response::InternalSwap(CRemotePlay_SessionStarted_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(record_id_, other->record_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStarted_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[26]);
}

// ===================================================================

class CRemotePlay_SessionStopped_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlay_SessionStopped_Notification>()._has_bits_);
  static void set_has_record_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_used_x264(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_used_h264(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_used_hevc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlay_SessionStopped_Notification)
}
CRemotePlay_SessionStopped_Notification::CRemotePlay_SessionStopped_Notification(const CRemotePlay_SessionStopped_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&record_id_, &from.record_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_hevc_) -
    reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlay_SessionStopped_Notification)
}

inline void CRemotePlay_SessionStopped_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&record_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_hevc_) -
    reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
}

CRemotePlay_SessionStopped_Notification::~CRemotePlay_SessionStopped_Notification() {
  // @@protoc_insertion_point(destructor:CRemotePlay_SessionStopped_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlay_SessionStopped_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemotePlay_SessionStopped_Notification::ArenaDtor(void* object) {
  CRemotePlay_SessionStopped_Notification* _this = reinterpret_cast< CRemotePlay_SessionStopped_Notification* >(object);
  (void)_this;
}
void CRemotePlay_SessionStopped_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlay_SessionStopped_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlay_SessionStopped_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlay_SessionStopped_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&record_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_hevc_) -
        reinterpret_cast<char*>(&record_id_)) + sizeof(used_hevc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlay_SessionStopped_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 record_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_record_id(&has_bits);
          record_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_x264 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_used_x264(&has_bits);
          used_x264_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_h264 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_used_h264(&has_bits);
          used_h264_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_hevc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_used_hevc(&has_bits);
          used_hevc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlay_SessionStopped_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlay_SessionStopped_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 record_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_record_id(), target);
  }

  // optional bool used_x264 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_used_x264(), target);
  }

  // optional bool used_h264 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_used_h264(), target);
  }

  // optional bool used_hevc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_used_hevc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlay_SessionStopped_Notification)
  return target;
}

size_t CRemotePlay_SessionStopped_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlay_SessionStopped_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 record_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool used_x264 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool used_h264 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool used_hevc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlay_SessionStopped_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlay_SessionStopped_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlay_SessionStopped_Notification::GetClassData() const { return &_class_data_; }

void CRemotePlay_SessionStopped_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlay_SessionStopped_Notification *>(to)->MergeFrom(
      static_cast<const CRemotePlay_SessionStopped_Notification &>(from));
}


void CRemotePlay_SessionStopped_Notification::MergeFrom(const CRemotePlay_SessionStopped_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlay_SessionStopped_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      record_id_ = from.record_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_x264_ = from.used_x264_;
    }
    if (cached_has_bits & 0x00000004u) {
      used_h264_ = from.used_h264_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_hevc_ = from.used_hevc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlay_SessionStopped_Notification::CopyFrom(const CRemotePlay_SessionStopped_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlay_SessionStopped_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlay_SessionStopped_Notification::IsInitialized() const {
  return true;
}

void CRemotePlay_SessionStopped_Notification::InternalSwap(CRemotePlay_SessionStopped_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStopped_Notification, used_hevc_)
      + sizeof(CRemotePlay_SessionStopped_Notification::used_hevc_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlay_SessionStopped_Notification, record_id_)>(
          reinterpret_cast<char*>(&record_id_),
          reinterpret_cast<char*>(&other->record_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlay_SessionStopped_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[27]);
}

// ===================================================================

class CRemotePlayTogether_Notification_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_Player>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avatar_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keyboard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mouse_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_controller_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.Player)
}
CRemotePlayTogether_Notification_Player::CRemotePlayTogether_Notification_Player(const CRemotePlayTogether_Notification_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_hash()) {
    avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_enabled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.Player)
}

inline void CRemotePlayTogether_Notification_Player::SharedCtor() {
avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_enabled_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
}

CRemotePlayTogether_Notification_Player::~CRemotePlayTogether_Notification_Player() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlayTogether_Notification_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  avatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemotePlayTogether_Notification_Player::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_Player* _this = reinterpret_cast< CRemotePlayTogether_Notification_Player* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatar_hash_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_enabled_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(controller_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guestid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guestid(&has_bits);
          guestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes avatar_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keyboard_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_keyboard_enabled(&has_bits);
          keyboard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mouse_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mouse_enabled(&has_bits);
          mouse_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_controller_enabled(&has_bits);
          controller_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlayTogether_Notification_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 guestid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guestid(), target);
  }

  // optional bytes avatar_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar_hash(), target);
  }

  // optional bool keyboard_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_keyboard_enabled(), target);
  }

  // optional bool mouse_enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mouse_enabled(), target);
  }

  // optional bool controller_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_controller_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.Player)
  return target;
}

size_t CRemotePlayTogether_Notification_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes avatar_hash = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatar_hash());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 guestid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_guestid());
    }

    // optional bool keyboard_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool mouse_enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool controller_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlayTogether_Notification_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlayTogether_Notification_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlayTogether_Notification_Player::GetClassData() const { return &_class_data_; }

void CRemotePlayTogether_Notification_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlayTogether_Notification_Player *>(to)->MergeFrom(
      static_cast<const CRemotePlayTogether_Notification_Player &>(from));
}


void CRemotePlayTogether_Notification_Player::MergeFrom(const CRemotePlayTogether_Notification_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatar_hash(from._internal_avatar_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      guestid_ = from.guestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      keyboard_enabled_ = from.keyboard_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      mouse_enabled_ = from.mouse_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_enabled_ = from.controller_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlayTogether_Notification_Player::CopyFrom(const CRemotePlayTogether_Notification_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_Player::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_Player::InternalSwap(CRemotePlayTogether_Notification_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_hash_, lhs_arena,
      &other->avatar_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_Player, controller_enabled_)
      + sizeof(CRemotePlayTogether_Notification_Player::controller_enabled_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_Player, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[28]);
}

// ===================================================================

class CRemotePlayTogether_Notification_ControllerSlot_obsolete::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_ControllerSlot_obsolete>()._has_bits_);
  static void set_has_slotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
}
CRemotePlayTogether_Notification_ControllerSlot_obsolete::CRemotePlayTogether_Notification_ControllerSlot_obsolete(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&slotid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
}

inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slotid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
}

CRemotePlayTogether_Notification_ControllerSlot_obsolete::~CRemotePlayTogether_Notification_ControllerSlot_obsolete() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_ControllerSlot_obsolete* _this = reinterpret_cast< CRemotePlayTogether_Notification_ControllerSlot_obsolete* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_ControllerSlot_obsolete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_ControllerSlot_obsolete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(slotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_ControllerSlot_obsolete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slotid(&has_bits);
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlayTogether_Notification_ControllerSlot_obsolete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slotid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slotid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  return target;
}

size_t CRemotePlayTogether_Notification_ControllerSlot_obsolete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 slotid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slotid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlayTogether_Notification_ControllerSlot_obsolete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlayTogether_Notification_ControllerSlot_obsolete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlayTogether_Notification_ControllerSlot_obsolete::GetClassData() const { return &_class_data_; }

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlayTogether_Notification_ControllerSlot_obsolete *>(to)->MergeFrom(
      static_cast<const CRemotePlayTogether_Notification_ControllerSlot_obsolete &>(from));
}


void CRemotePlayTogether_Notification_ControllerSlot_obsolete::MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      slotid_ = from.slotid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot_obsolete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_ControllerSlot_obsolete::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_ControllerSlot_obsolete::InternalSwap(CRemotePlayTogether_Notification_ControllerSlot_obsolete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot_obsolete, slotid_)
      + sizeof(CRemotePlayTogether_Notification_ControllerSlot_obsolete::slotid_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot_obsolete, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_ControllerSlot_obsolete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[29]);
}

// ===================================================================

class CRemotePlayTogether_Notification_ControllerSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_ControllerSlot>()._has_bits_);
  static void set_has_slotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CRemotePlayTogether_Notification_Player& player(const CRemotePlayTogether_Notification_ControllerSlot* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CRemotePlayTogether_Notification_Player&
CRemotePlayTogether_Notification_ControllerSlot::_Internal::player(const CRemotePlayTogether_Notification_ControllerSlot* msg) {
  return *msg->player_;
}
CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.ControllerSlot)
}
CRemotePlayTogether_Notification_ControllerSlot::CRemotePlayTogether_Notification_ControllerSlot(const CRemotePlayTogether_Notification_ControllerSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::CRemotePlayTogether_Notification_Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&slotid_, &from.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&slotid_)) + sizeof(controller_type_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.ControllerSlot)
}

inline void CRemotePlayTogether_Notification_ControllerSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_type_) -
    reinterpret_cast<char*>(&player_)) + sizeof(controller_type_));
}

CRemotePlayTogether_Notification_ControllerSlot::~CRemotePlayTogether_Notification_ControllerSlot() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.ControllerSlot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlayTogether_Notification_ControllerSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void CRemotePlayTogether_Notification_ControllerSlot::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_ControllerSlot* _this = reinterpret_cast< CRemotePlayTogether_Notification_ControllerSlot* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_ControllerSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_ControllerSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_ControllerSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.ControllerSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != nullptr);
    player_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&slotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_type_) -
        reinterpret_cast<char*>(&slotid_)) + sizeof(controller_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_ControllerSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slotid(&has_bits);
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CRemotePlayTogether_Notification.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_controller_type(&has_bits);
          controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlayTogether_Notification_ControllerSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.ControllerSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slotid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slotid(), target);
  }

  // optional .CRemotePlayTogether_Notification.Player player = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  // optional int32 controller_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_controller_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.ControllerSlot)
  return target;
}

size_t CRemotePlayTogether_Notification_ControllerSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.ControllerSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CRemotePlayTogether_Notification.Player player = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_);
    }

    // optional uint32 slotid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slotid());
    }

    // optional int32 controller_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controller_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlayTogether_Notification_ControllerSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlayTogether_Notification_ControllerSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlayTogether_Notification_ControllerSlot::GetClassData() const { return &_class_data_; }

void CRemotePlayTogether_Notification_ControllerSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlayTogether_Notification_ControllerSlot *>(to)->MergeFrom(
      static_cast<const CRemotePlayTogether_Notification_ControllerSlot &>(from));
}


void CRemotePlayTogether_Notification_ControllerSlot::MergeFrom(const CRemotePlayTogether_Notification_ControllerSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player()->::CRemotePlayTogether_Notification_Player::MergeFrom(from._internal_player());
    }
    if (cached_has_bits & 0x00000002u) {
      slotid_ = from.slotid_;
    }
    if (cached_has_bits & 0x00000004u) {
      controller_type_ = from.controller_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlayTogether_Notification_ControllerSlot::CopyFrom(const CRemotePlayTogether_Notification_ControllerSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.ControllerSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_ControllerSlot::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_ControllerSlot::InternalSwap(CRemotePlayTogether_Notification_ControllerSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot, controller_type_)
      + sizeof(CRemotePlayTogether_Notification_ControllerSlot::controller_type_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_ControllerSlot, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_ControllerSlot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[30]);
}

// ===================================================================

class CRemotePlayTogether_Notification_GroupUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification_GroupUpdated>()._has_bits_);
  static void set_has_host_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_new_players(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_obsolete_(arena),
  controller_slots_obsolete_(arena),
  player_slots_(arena),
  controller_slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification.GroupUpdated)
}
CRemotePlayTogether_Notification_GroupUpdated::CRemotePlayTogether_Notification_GroupUpdated(const CRemotePlayTogether_Notification_GroupUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_obsolete_(from.players_obsolete_),
      controller_slots_obsolete_(from.controller_slots_obsolete_),
      player_slots_(from.player_slots_),
      controller_slots_(from.controller_slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&host_steamid_, &from.host_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_new_players_) -
    reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification.GroupUpdated)
}

inline void CRemotePlayTogether_Notification_GroupUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&host_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_new_players_) -
    reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
}

CRemotePlayTogether_Notification_GroupUpdated::~CRemotePlayTogether_Notification_GroupUpdated() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification.GroupUpdated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlayTogether_Notification_GroupUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CRemotePlayTogether_Notification_GroupUpdated::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification_GroupUpdated* _this = reinterpret_cast< CRemotePlayTogether_Notification_GroupUpdated* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification_GroupUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification_GroupUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification_GroupUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification.GroupUpdated)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_obsolete_.Clear();
  controller_slots_obsolete_.Clear();
  player_slots_.Clear();
  controller_slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&host_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_new_players_) -
        reinterpret_cast<char*>(&host_steamid_)) + sizeof(has_new_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification_GroupUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 host_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_host_steamid(&has_bits);
          host_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 host_clientid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_host_clientid(&has_bits);
          host_clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 players_obsolete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_players_obsolete(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_players_obsolete(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 host_gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_host_gameid(&has_bits);
          host_gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_slots_obsolete(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_new_players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_new_players(&has_bits);
          has_new_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlayTogether_Notification_GroupUpdated::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification.GroupUpdated)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 host_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_host_steamid(), target);
  }

  // optional fixed64 host_clientid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_host_clientid(), target);
  }

  // repeated fixed64 players_obsolete = 3;
  for (int i = 0, n = this->_internal_players_obsolete_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_players_obsolete(i), target);
  }

  // optional fixed64 host_gameid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_host_gameid(), target);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_slots_obsolete_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_controller_slots_obsolete(i), target, stream);
  }

  // optional bool has_new_players = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_has_new_players(), target);
  }

  // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_player_slots(i), target, stream);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_controller_slots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification.GroupUpdated)
  return target;
}

size_t CRemotePlayTogether_Notification_GroupUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification.GroupUpdated)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 players_obsolete = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_players_obsolete_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_obsolete_size());
    total_size += data_size;
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot_obsolete controller_slots_obsolete = 5;
  total_size += 1UL * this->_internal_controller_slots_obsolete_size();
  for (const auto& msg : this->controller_slots_obsolete_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRemotePlayTogether_Notification.Player player_slots = 7;
  total_size += 1UL * this->_internal_player_slots_size();
  for (const auto& msg : this->player_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRemotePlayTogether_Notification.ControllerSlot controller_slots = 8;
  total_size += 1UL * this->_internal_controller_slots_size();
  for (const auto& msg : this->controller_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 host_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 host_clientid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 host_gameid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool has_new_players = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlayTogether_Notification_GroupUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlayTogether_Notification_GroupUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlayTogether_Notification_GroupUpdated::GetClassData() const { return &_class_data_; }

void CRemotePlayTogether_Notification_GroupUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlayTogether_Notification_GroupUpdated *>(to)->MergeFrom(
      static_cast<const CRemotePlayTogether_Notification_GroupUpdated &>(from));
}


void CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(const CRemotePlayTogether_Notification_GroupUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  players_obsolete_.MergeFrom(from.players_obsolete_);
  controller_slots_obsolete_.MergeFrom(from.controller_slots_obsolete_);
  player_slots_.MergeFrom(from.player_slots_);
  controller_slots_.MergeFrom(from.controller_slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      host_steamid_ = from.host_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      host_clientid_ = from.host_clientid_;
    }
    if (cached_has_bits & 0x00000004u) {
      host_gameid_ = from.host_gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_new_players_ = from.has_new_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlayTogether_Notification_GroupUpdated::CopyFrom(const CRemotePlayTogether_Notification_GroupUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification.GroupUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification_GroupUpdated::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification_GroupUpdated::InternalSwap(CRemotePlayTogether_Notification_GroupUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_obsolete_.InternalSwap(&other->players_obsolete_);
  controller_slots_obsolete_.InternalSwap(&other->controller_slots_obsolete_);
  player_slots_.InternalSwap(&other->player_slots_);
  controller_slots_.InternalSwap(&other->controller_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_GroupUpdated, has_new_players_)
      + sizeof(CRemotePlayTogether_Notification_GroupUpdated::has_new_players_)
      - PROTOBUF_FIELD_OFFSET(CRemotePlayTogether_Notification_GroupUpdated, host_steamid_)>(
          reinterpret_cast<char*>(&host_steamid_),
          reinterpret_cast<char*>(&other->host_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification_GroupUpdated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[31]);
}

// ===================================================================

class CRemotePlayTogether_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemotePlayTogether_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CRemotePlayTogether_Notification_GroupUpdated& group_updated(const CRemotePlayTogether_Notification* msg);
};

const ::CRemotePlayTogether_Notification_GroupUpdated&
CRemotePlayTogether_Notification::_Internal::group_updated(const CRemotePlayTogether_Notification* msg) {
  return *msg->Message_.group_updated_;
}
void CRemotePlayTogether_Notification::set_allocated_group_updated(::CRemotePlayTogether_Notification_GroupUpdated* group_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Message();
  if (group_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CRemotePlayTogether_Notification_GroupUpdated>::GetOwningArena(group_updated);
    if (message_arena != submessage_arena) {
      group_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_updated, submessage_arena);
    }
    set_has_group_updated();
    Message_.group_updated_ = group_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:CRemotePlayTogether_Notification.group_updated)
}
CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemotePlayTogether_Notification)
}
CRemotePlayTogether_Notification::CRemotePlayTogether_Notification(const CRemotePlayTogether_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  clear_has_Message();
  switch (from.Message_case()) {
    case kGroupUpdated: {
      _internal_mutable_group_updated()->::CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(from._internal_group_updated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRemotePlayTogether_Notification)
}

inline void CRemotePlayTogether_Notification::SharedCtor() {
steamid_ = uint64_t{0u};
clear_has_Message();
}

CRemotePlayTogether_Notification::~CRemotePlayTogether_Notification() {
  // @@protoc_insertion_point(destructor:CRemotePlayTogether_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemotePlayTogether_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void CRemotePlayTogether_Notification::ArenaDtor(void* object) {
  CRemotePlayTogether_Notification* _this = reinterpret_cast< CRemotePlayTogether_Notification* >(object);
  (void)_this;
}
void CRemotePlayTogether_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemotePlayTogether_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemotePlayTogether_Notification::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:CRemotePlayTogether_Notification)
  switch (Message_case()) {
    case kGroupUpdated: {
      if (GetArenaForAllocation() == nullptr) {
        delete Message_.group_updated_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void CRemotePlayTogether_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemotePlayTogether_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  clear_Message();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemotePlayTogether_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemotePlayTogether_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemotePlayTogether_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
  if (_internal_has_group_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemotePlayTogether_Notification)
  return target;
}

size_t CRemotePlayTogether_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemotePlayTogether_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  switch (Message_case()) {
    // .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;
    case kGroupUpdated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Message_.group_updated_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemotePlayTogether_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemotePlayTogether_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemotePlayTogether_Notification::GetClassData() const { return &_class_data_; }

void CRemotePlayTogether_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemotePlayTogether_Notification *>(to)->MergeFrom(
      static_cast<const CRemotePlayTogether_Notification &>(from));
}


void CRemotePlayTogether_Notification::MergeFrom(const CRemotePlayTogether_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemotePlayTogether_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  switch (from.Message_case()) {
    case kGroupUpdated: {
      _internal_mutable_group_updated()->::CRemotePlayTogether_Notification_GroupUpdated::MergeFrom(from._internal_group_updated());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemotePlayTogether_Notification::CopyFrom(const CRemotePlayTogether_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemotePlayTogether_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemotePlayTogether_Notification::IsInitialized() const {
  return true;
}

void CRemotePlayTogether_Notification::InternalSwap(CRemotePlayTogether_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(Message_, other->Message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemotePlayTogether_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[32]);
}

// ===================================================================

class CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
}
CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CRemoteClient_CreateRemotePlayTogetherInvitation_Request(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  launch_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    launch_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_launch_parameters()) {
    launch_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_parameters(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
}

inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SharedCtor() {
launch_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  launch_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CRemoteClient_CreateRemotePlayTogetherInvitation_Request::~CRemoteClient_CreateRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  launch_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_CreateRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_CreateRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    launch_parameters_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string launch_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_launch_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string launch_parameters = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_launch_parameters().data(), static_cast<int>(this->_internal_launch_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_launch_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_CreateRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string launch_parameters = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_launch_parameters());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CreateRemotePlayTogetherInvitation_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_CreateRemotePlayTogetherInvitation_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CreateRemotePlayTogetherInvitation_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_CreateRemotePlayTogetherInvitation_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_CreateRemotePlayTogetherInvitation_Request &>(from));
}


void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_launch_parameters(from._internal_launch_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &launch_parameters_, lhs_arena,
      &other->launch_parameters_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[33]);
}

// ===================================================================

class CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
}
CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CRemoteClient_CreateRemotePlayTogetherInvitation_Response(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
}

inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_CreateRemotePlayTogetherInvitation_Response::~CRemoteClient_CreateRemotePlayTogetherInvitation_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::ArenaDtor(void* object) {
  CRemoteClient_CreateRemotePlayTogetherInvitation_Response* _this = reinterpret_cast< CRemoteClient_CreateRemotePlayTogetherInvitation_Response* >(object);
  (void)_this;
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  return target;
}

size_t CRemoteClient_CreateRemotePlayTogetherInvitation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_CreateRemotePlayTogetherInvitation_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_CreateRemotePlayTogetherInvitation_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_CreateRemotePlayTogetherInvitation_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_CreateRemotePlayTogetherInvitation_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_CreateRemotePlayTogetherInvitation_Response &>(from));
}


void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::MergeFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::CopyFrom(const CRemoteClient_CreateRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_CreateRemotePlayTogetherInvitation_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_CreateRemotePlayTogetherInvitation_Response::InternalSwap(CRemoteClient_CreateRemotePlayTogetherInvitation_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, lhs_arena,
      &other->invitation_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_CreateRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[34]);
}

// ===================================================================

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
}
CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
}

inline void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::~CRemoteClient_DeleteRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request &>(from));
}


void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, lhs_arena,
      &other->invitation_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[35]);
}

// ===================================================================

class CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::_Internal {
 public:
};

CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
}
CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response(const CRemoteClient_DeleteRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[36]);
}

// ===================================================================

class CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_LookupRemotePlayTogetherInvitation_Request>()._has_bits_);
  static void set_has_invitation_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
}
CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CRemoteClient_LookupRemotePlayTogetherInvitation_Request(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitation_code()) {
    invitation_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
}

inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SharedCtor() {
invitation_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitation_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_LookupRemotePlayTogetherInvitation_Request::~CRemoteClient_LookupRemotePlayTogetherInvitation_Request() {
  // @@protoc_insertion_point(destructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::ArenaDtor(void* object) {
  CRemoteClient_LookupRemotePlayTogetherInvitation_Request* _this = reinterpret_cast< CRemoteClient_LookupRemotePlayTogetherInvitation_Request* >(object);
  (void)_this;
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invitation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invitation_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_code().data(), static_cast<int>(this->_internal_invitation_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  return target;
}

size_t CRemoteClient_LookupRemotePlayTogetherInvitation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_LookupRemotePlayTogetherInvitation_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_LookupRemotePlayTogetherInvitation_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_LookupRemotePlayTogetherInvitation_Request::GetClassData() const { return &_class_data_; }

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_LookupRemotePlayTogetherInvitation_Request *>(to)->MergeFrom(
      static_cast<const CRemoteClient_LookupRemotePlayTogetherInvitation_Request &>(from));
}


void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_code()) {
    _internal_set_invitation_code(from._internal_invitation_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_LookupRemotePlayTogetherInvitation_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Request::InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_code_, lhs_arena,
      &other->invitation_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_LookupRemotePlayTogetherInvitation_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[37]);
}

// ===================================================================

class CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CRemoteClient_LookupRemotePlayTogetherInvitation_Response>()._has_bits_);
  static void set_has_invitation_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
}
CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CRemoteClient_LookupRemotePlayTogetherInvitation_Response(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invitation_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitation_url()) {
    invitation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitation_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
}

inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SharedCtor() {
invitation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invitation_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRemoteClient_LookupRemotePlayTogetherInvitation_Response::~CRemoteClient_LookupRemotePlayTogetherInvitation_Response() {
  // @@protoc_insertion_point(destructor:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invitation_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::ArenaDtor(void* object) {
  CRemoteClient_LookupRemotePlayTogetherInvitation_Response* _this = reinterpret_cast< CRemoteClient_LookupRemotePlayTogetherInvitation_Response* >(object);
  (void)_this;
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitation_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invitation_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invitation_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invitation_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitation_url().data(), static_cast<int>(this->_internal_invitation_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invitation_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  return target;
}

size_t CRemoteClient_LookupRemotePlayTogetherInvitation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invitation_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitation_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRemoteClient_LookupRemotePlayTogetherInvitation_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRemoteClient_LookupRemotePlayTogetherInvitation_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRemoteClient_LookupRemotePlayTogetherInvitation_Response::GetClassData() const { return &_class_data_; }

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRemoteClient_LookupRemotePlayTogetherInvitation_Response *>(to)->MergeFrom(
      static_cast<const CRemoteClient_LookupRemotePlayTogetherInvitation_Response &>(from));
}


void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::MergeFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invitation_url()) {
    _internal_set_invitation_url(from._internal_invitation_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::CopyFrom(const CRemoteClient_LookupRemotePlayTogetherInvitation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_LookupRemotePlayTogetherInvitation_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_LookupRemotePlayTogetherInvitation_Response::InternalSwap(CRemoteClient_LookupRemotePlayTogetherInvitation_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invitation_url_, lhs_arena,
      &other->invitation_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRemoteClient_LookupRemotePlayTogetherInvitation_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_5fservice_5fmessages_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_5fservice_5fmessages_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateSession_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CreateSession_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateSession_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CreateSession_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_StartPairing_Request* Arena::CreateMaybeMessage< ::CRemoteClient_StartPairing_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_StartPairing_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_StartPairing_Response* Arena::CreateMaybeMessage< ::CRemoteClient_StartPairing_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_StartPairing_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SetPairingInfo_Request* Arena::CreateMaybeMessage< ::CRemoteClient_SetPairingInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SetPairingInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SetPairingInfo_Response* Arena::CreateMaybeMessage< ::CRemoteClient_SetPairingInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SetPairingInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetPairingInfo_Request* Arena::CreateMaybeMessage< ::CRemoteClient_GetPairingInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetPairingInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetPairingInfo_Response* Arena::CreateMaybeMessage< ::CRemoteClient_GetPairingInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetPairingInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CancelPairing_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CancelPairing_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CancelPairing_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CancelPairing_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CancelPairing_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CancelPairing_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_RegisterStatusUpdate_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_RegisterStatusUpdate_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_RegisterStatusUpdate_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_UnregisterStatusUpdate_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_UnregisterStatusUpdate_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_UnregisterStatusUpdate_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_Online_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_Online_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_Online_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_RemotePacket_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_RemotePacket_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_RemotePacket_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_ReplyPacket_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_ReplyPacket_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_ReplyPacket_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetReplies_Request* Arena::CreateMaybeMessage< ::CRemoteClient_GetReplies_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetReplies_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_GetReplies_Response* Arena::CreateMaybeMessage< ::CRemoteClient_GetReplies_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_GetReplies_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateTURNServer_Request* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateTURNServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateTURNServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateTURNServer_Response* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateTURNServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateTURNServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateRelayServer_Request* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateRelayServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateRelayServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateRelayServer_Response* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateRelayServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateRelayServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateSDR_Request* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateSDR_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateSDR_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_AllocateSDR_Response* Arena::CreateMaybeMessage< ::CRemoteClient_AllocateSDR_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_AllocateSDR_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SteamBroadcast_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_SteamBroadcast_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SteamBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_SteamToSteam_Notification* Arena::CreateMaybeMessage< ::CRemoteClient_SteamToSteam_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_SteamToSteam_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStarted_Request* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStarted_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStarted_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStarted_Response* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStarted_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStarted_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlay_SessionStopped_Notification* Arena::CreateMaybeMessage< ::CRemotePlay_SessionStopped_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlay_SessionStopped_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_Player* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_ControllerSlot_obsolete* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_ControllerSlot_obsolete >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_ControllerSlot* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_ControllerSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_ControllerSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification_GroupUpdated* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification_GroupUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification_GroupUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemotePlayTogether_Notification* Arena::CreateMaybeMessage< ::CRemotePlayTogether_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemotePlayTogether_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request* Arena::CreateMaybeMessage< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response* Arena::CreateMaybeMessage< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRemoteClient_LookupRemotePlayTogetherInvitation_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
