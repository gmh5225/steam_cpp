// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_partnerapps.steamclient.proto

#include "steammessages_partnerapps.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CPartnerApps_RequestUploadToken_Request::CPartnerApps_RequestUploadToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CPartnerApps_RequestUploadToken_RequestDefaultTypeInternal {
  constexpr CPartnerApps_RequestUploadToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_RequestUploadToken_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_RequestUploadToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_RequestUploadToken_RequestDefaultTypeInternal _CPartnerApps_RequestUploadToken_Request_default_instance_;
constexpr CPartnerApps_RequestUploadToken_Response::CPartnerApps_RequestUploadToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_token_(uint64_t{0u})
  , routing_id_(uint64_t{0u}){}
struct CPartnerApps_RequestUploadToken_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_RequestUploadToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_RequestUploadToken_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_RequestUploadToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_RequestUploadToken_ResponseDefaultTypeInternal _CPartnerApps_RequestUploadToken_Response_default_instance_;
constexpr CPartnerApps_FinishUpload_Request::CPartnerApps_FinishUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_token_(uint64_t{0u})
  , routing_id_(uint64_t{0u})
  , app_id_(0u){}
struct CPartnerApps_FinishUpload_RequestDefaultTypeInternal {
  constexpr CPartnerApps_FinishUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUpload_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUpload_RequestDefaultTypeInternal _CPartnerApps_FinishUpload_Request_default_instance_;
constexpr CPartnerApps_FinishUploadKVSign_Response::CPartnerApps_FinishUploadKVSign_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_installscript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPartnerApps_FinishUploadKVSign_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_FinishUploadKVSign_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUploadKVSign_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUploadKVSign_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUploadKVSign_ResponseDefaultTypeInternal _CPartnerApps_FinishUploadKVSign_Response_default_instance_;
constexpr CPartnerApps_FinishUploadLegacyDRM_Request::CPartnerApps_FinishUploadLegacyDRM_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tool_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_token_(uint64_t{0u})
  , routing_id_(uint64_t{0u})
  , app_id_(0u)
  , flags_(0u)
  , use_cloud_(false){}
struct CPartnerApps_FinishUploadLegacyDRM_RequestDefaultTypeInternal {
  constexpr CPartnerApps_FinishUploadLegacyDRM_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUploadLegacyDRM_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUploadLegacyDRM_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUploadLegacyDRM_RequestDefaultTypeInternal _CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_;
constexpr CPartnerApps_FinishUploadLegacyDRM_Response::CPartnerApps_FinishUploadLegacyDRM_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPartnerApps_FinishUploadLegacyDRM_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_FinishUploadLegacyDRM_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUploadLegacyDRM_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUploadLegacyDRM_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUploadLegacyDRM_ResponseDefaultTypeInternal _CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_;
constexpr CPartnerApps_FinishUpload_Response::CPartnerApps_FinishUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPartnerApps_FinishUpload_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_FinishUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUpload_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUpload_ResponseDefaultTypeInternal _CPartnerApps_FinishUpload_Response_default_instance_;
constexpr CPartnerApps_FinishUploadDepot_Request::CPartnerApps_FinishUploadDepot_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_token_(uint64_t{0u})
  , routing_id_(uint64_t{0u})
  , app_id_(0u)
  , depot_id_(0u)
  , build_flags_(0u){}
struct CPartnerApps_FinishUploadDepot_RequestDefaultTypeInternal {
  constexpr CPartnerApps_FinishUploadDepot_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUploadDepot_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUploadDepot_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUploadDepot_RequestDefaultTypeInternal _CPartnerApps_FinishUploadDepot_Request_default_instance_;
constexpr CPartnerApps_FinishUploadDepot_Response::CPartnerApps_FinishUploadDepot_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_routing_id_(uint64_t{0u}){}
struct CPartnerApps_FinishUploadDepot_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_FinishUploadDepot_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FinishUploadDepot_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_FinishUploadDepot_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FinishUploadDepot_ResponseDefaultTypeInternal _CPartnerApps_FinishUploadDepot_Response_default_instance_;
constexpr CPartnerApps_GetDepotBuildResult_Request::CPartnerApps_GetDepotBuildResult_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_token_(uint64_t{0u})
  , routing_id_(uint64_t{0u}){}
struct CPartnerApps_GetDepotBuildResult_RequestDefaultTypeInternal {
  constexpr CPartnerApps_GetDepotBuildResult_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_GetDepotBuildResult_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_GetDepotBuildResult_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_GetDepotBuildResult_RequestDefaultTypeInternal _CPartnerApps_GetDepotBuildResult_Request_default_instance_;
constexpr CPartnerApps_GetDepotBuildResult_Response::CPartnerApps_GetDepotBuildResult_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manifest_id_(uint64_t{0u}){}
struct CPartnerApps_GetDepotBuildResult_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_GetDepotBuildResult_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_GetDepotBuildResult_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_GetDepotBuildResult_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_GetDepotBuildResult_ResponseDefaultTypeInternal _CPartnerApps_GetDepotBuildResult_Response_default_instance_;
constexpr CPartnerApps_FindDRMUploads_Request::CPartnerApps_FindDRMUploads_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0){}
struct CPartnerApps_FindDRMUploads_RequestDefaultTypeInternal {
  constexpr CPartnerApps_FindDRMUploads_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FindDRMUploads_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_FindDRMUploads_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FindDRMUploads_RequestDefaultTypeInternal _CPartnerApps_FindDRMUploads_Request_default_instance_;
constexpr CPartnerApps_ExistingDRMUpload::CPartnerApps_ExistingDRMUpload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , supplied_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mod_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , orig_file_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , actor_id_(0)
  , flags_(0u)
  , timestamp_(0u){}
struct CPartnerApps_ExistingDRMUploadDefaultTypeInternal {
  constexpr CPartnerApps_ExistingDRMUploadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_ExistingDRMUploadDefaultTypeInternal() {}
  union {
    CPartnerApps_ExistingDRMUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_ExistingDRMUploadDefaultTypeInternal _CPartnerApps_ExistingDRMUpload_default_instance_;
constexpr CPartnerApps_FindDRMUploads_Response::CPartnerApps_FindDRMUploads_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uploads_(){}
struct CPartnerApps_FindDRMUploads_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_FindDRMUploads_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_FindDRMUploads_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_FindDRMUploads_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_FindDRMUploads_ResponseDefaultTypeInternal _CPartnerApps_FindDRMUploads_Response_default_instance_;
constexpr CPartnerApps_Download_Request::CPartnerApps_Download_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0){}
struct CPartnerApps_Download_RequestDefaultTypeInternal {
  constexpr CPartnerApps_Download_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_Download_RequestDefaultTypeInternal() {}
  union {
    CPartnerApps_Download_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_Download_RequestDefaultTypeInternal _CPartnerApps_Download_Request_default_instance_;
constexpr CPartnerApps_Download_Response::CPartnerApps_Download_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : download_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0){}
struct CPartnerApps_Download_ResponseDefaultTypeInternal {
  constexpr CPartnerApps_Download_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartnerApps_Download_ResponseDefaultTypeInternal() {}
  union {
    CPartnerApps_Download_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartnerApps_Download_ResponseDefaultTypeInternal _CPartnerApps_Download_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fpartnerapps_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Response, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Response, location_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_RequestUploadToken_Response, routing_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Request, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Request, routing_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Request, app_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadKVSign_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadKVSign_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadKVSign_Response, signed_installscript_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, routing_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, flags_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, tool_name_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Request, use_cloud_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadLegacyDRM_Response, file_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, routing_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Request, build_flags_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FinishUploadDepot_Response, build_routing_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Request, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Request, routing_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Response, manifest_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_GetDepotBuildResult_Response, error_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FindDRMUploads_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FindDRMUploads_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FindDRMUploads_Request, app_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, file_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, app_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, actor_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, supplied_name_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, flags_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, mod_type_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_ExistingDRMUpload, orig_file_id_),
  0,
  4,
  5,
  1,
  6,
  2,
  7,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FindDRMUploads_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_FindDRMUploads_Response, uploads_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Request, file_id_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Request, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Response, download_url_),
  PROTOBUF_FIELD_OFFSET(::CPartnerApps_Download_Response, app_id_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CPartnerApps_RequestUploadToken_Request)},
  { 10, 19, -1, sizeof(::CPartnerApps_RequestUploadToken_Response)},
  { 22, 31, -1, sizeof(::CPartnerApps_FinishUpload_Request)},
  { 34, 41, -1, sizeof(::CPartnerApps_FinishUploadKVSign_Response)},
  { 42, 54, -1, sizeof(::CPartnerApps_FinishUploadLegacyDRM_Request)},
  { 60, 67, -1, sizeof(::CPartnerApps_FinishUploadLegacyDRM_Response)},
  { 68, -1, -1, sizeof(::CPartnerApps_FinishUpload_Response)},
  { 74, 85, -1, sizeof(::CPartnerApps_FinishUploadDepot_Request)},
  { 90, 97, -1, sizeof(::CPartnerApps_FinishUploadDepot_Response)},
  { 98, 106, -1, sizeof(::CPartnerApps_GetDepotBuildResult_Request)},
  { 108, 116, -1, sizeof(::CPartnerApps_GetDepotBuildResult_Response)},
  { 118, 125, -1, sizeof(::CPartnerApps_FindDRMUploads_Request)},
  { 126, 140, -1, sizeof(::CPartnerApps_ExistingDRMUpload)},
  { 148, -1, -1, sizeof(::CPartnerApps_FindDRMUploads_Response)},
  { 155, 163, -1, sizeof(::CPartnerApps_Download_Request)},
  { 165, 173, -1, sizeof(::CPartnerApps_Download_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_RequestUploadToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_RequestUploadToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUploadKVSign_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUploadLegacyDRM_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUploadLegacyDRM_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUploadDepot_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FinishUploadDepot_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_GetDepotBuildResult_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_GetDepotBuildResult_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FindDRMUploads_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_ExistingDRMUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_FindDRMUploads_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_Download_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartnerApps_Download_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fpartnerapps_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steammessages_partnerapps.steamclient."
  "proto\032\030steammessages_base.proto\032,steamme"
  "ssages_unified_base.steamclient.proto\"J\n"
  "\'CPartnerApps_RequestUploadToken_Request"
  "\022\020\n\010filename\030\001 \001(\t\022\r\n\005appid\030\002 \001(\r\"f\n(CPa"
  "rtnerApps_RequestUploadToken_Response\022\024\n"
  "\014upload_token\030\001 \001(\004\022\020\n\010location\030\002 \001(\t\022\022\n"
  "\nrouting_id\030\003 \001(\004\"]\n!CPartnerApps_Finish"
  "Upload_Request\022\024\n\014upload_token\030\001 \001(\004\022\022\n\n"
  "routing_id\030\002 \001(\004\022\016\n\006app_id\030\003 \001(\r\"H\n(CPar"
  "tnerApps_FinishUploadKVSign_Response\022\034\n\024"
  "signed_installscript\030\001 \001(\t\"\314\001\n*CPartnerA"
  "pps_FinishUploadLegacyDRM_Request\022\024\n\014upl"
  "oad_token\030\001 \001(\004\022\022\n\nrouting_id\030\002 \001(\004\022\016\n\006a"
  "pp_id\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\022\021\n\ttool_name\030"
  "\005 \001(\t\022B\n\tuse_cloud\030\006 \001(\010:\005falseB(\202\265\030$use"
  " cloud storage for build products\">\n+CPa"
  "rtnerApps_FinishUploadLegacyDRM_Response"
  "\022\017\n\007file_id\030\001 \001(\t\"$\n\"CPartnerApps_Finish"
  "Upload_Response\"\211\001\n&CPartnerApps_FinishU"
  "ploadDepot_Request\022\024\n\014upload_token\030\001 \001(\004"
  "\022\022\n\nrouting_id\030\002 \001(\004\022\016\n\006app_id\030\003 \001(\r\022\020\n\010"
  "depot_id\030\004 \001(\r\022\023\n\013build_flags\030\005 \001(\r\"C\n\'C"
  "PartnerApps_FinishUploadDepot_Response\022\030"
  "\n\020build_routing_id\030\001 \001(\004\"T\n(CPartnerApps"
  "_GetDepotBuildResult_Request\022\024\n\014upload_t"
  "oken\030\001 \001(\004\022\022\n\nrouting_id\030\002 \001(\004\"S\n)CPartn"
  "erApps_GetDepotBuildResult_Response\022\023\n\013m"
  "anifest_id\030\001 \001(\004\022\021\n\terror_msg\030\002 \001(\t\"5\n#C"
  "PartnerApps_FindDRMUploads_Request\022\016\n\006ap"
  "p_id\030\001 \001(\005\"\264\001\n\036CPartnerApps_ExistingDRMU"
  "pload\022\017\n\007file_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\r\022\020"
  "\n\010actor_id\030\003 \001(\005\022\025\n\rsupplied_name\030\005 \001(\t\022"
  "\r\n\005flags\030\006 \001(\r\022\020\n\010mod_type\030\007 \001(\t\022\021\n\ttime"
  "stamp\030\010 \001(\007\022\024\n\014orig_file_id\030\t \001(\t\"X\n$CPa"
  "rtnerApps_FindDRMUploads_Response\0220\n\007upl"
  "oads\030\001 \003(\0132\037.CPartnerApps_ExistingDRMUpl"
  "oad\"@\n\035CPartnerApps_Download_Request\022\017\n\007"
  "file_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\005\"F\n\036CPartne"
  "rApps_Download_Response\022\024\n\014download_url\030"
  "\001 \001(\t\022\016\n\006app_id\030\002 \001(\0052\241\016\n\013PartnerApps\022\261\001"
  "\n\030RequestKVSignUploadToken\022(.CPartnerApp"
  "s_RequestUploadToken_Request\032).CPartnerA"
  "pps_RequestUploadToken_Response\"@\202\265\030<Req"
  "uest upload token for installscript file"
  " upload / signing\022\256\001\n\025RequestDRMUploadTo"
  "ken\022(.CPartnerApps_RequestUploadToken_Re"
  "quest\032).CPartnerApps_RequestUploadToken_"
  "Response\"@\202\265\030<Request upload token for e"
  "xecutable file upload / processing\022\265\001\n\025R"
  "equestCEGUploadToken\022(.CPartnerApps_Requ"
  "estUploadToken_Request\032).CPartnerApps_Re"
  "questUploadToken_Response\"G\202\265\030CRequest u"
  "pload token for custom executable file u"
  "pload / processing\022\243\001\n\027RequestDepotUploa"
  "dToken\022(.CPartnerApps_RequestUploadToken"
  "_Request\032).CPartnerApps_RequestUploadTok"
  "en_Response\"3\202\265\030/Request upload token fo"
  "r steampipe depot upload\022\253\001\n\022FinishUploa"
  "dKVSign\022\".CPartnerApps_FinishUpload_Requ"
  "est\032).CPartnerApps_FinishUploadKVSign_Re"
  "sponse\"F\202\265\030BCommit method to sign an ins"
  "tallscript after an upload is complete\022\244"
  "\001\n\025FinishUploadDRMUpload\022+.CPartnerApps_"
  "FinishUploadLegacyDRM_Request\032,.CPartner"
  "Apps_FinishUploadLegacyDRM_Response\"0\202\265\030"
  ",Commit method for executable file proce"
  "ssing\022\231\001\n\025FinishUploadCEGUpload\022\".CPartn"
  "erApps_FinishUpload_Request\032#.CPartnerAp"
  "ps_FinishUpload_Response\"7\202\265\0303Commit met"
  "hod for custom executable file processin"
  "g\022\245\001\n\027FinishUploadDepotUpload\022\'.CPartner"
  "Apps_FinishUploadDepot_Request\032(.CPartne"
  "rApps_FinishUploadDepot_Response\"7\202\265\0303Co"
  "mmit method for custom executable file p"
  "rocessing\022\244\001\n\023GetDepotBuildResult\022).CPar"
  "tnerApps_GetDepotBuildResult_Request\032*.C"
  "PartnerApps_GetDepotBuildResult_Response"
  "\"6\202\265\0302Get build status for previously up"
  "loaded depot ZIP\022\215\001\n\016FindDRMUploads\022$.CP"
  "artnerApps_FindDRMUploads_Request\032%.CPar"
  "tnerApps_FindDRMUploads_Response\".\202\265\030*Fi"
  "nds N most recent prior uploads by appid"
  "\022K\n\010Download\022\036.CPartnerApps_Download_Req"
  "uest\032\037.CPartnerApps_Download_Response\0322\202"
  "\265\030.Service methods for app management by"
  " partnersB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto = {
  false, false, 3454, descriptor_table_protodef_steammessages_5fpartnerapps_2esteamclient_2eproto, "steammessages_partnerapps.steamclient.proto", 
  &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once, descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_steammessages_5fpartnerapps_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fpartnerapps_2esteamclient_2eproto(&descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto);

// ===================================================================

class CPartnerApps_RequestUploadToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_RequestUploadToken_Request>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPartnerApps_RequestUploadToken_Request::CPartnerApps_RequestUploadToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_RequestUploadToken_Request)
}
CPartnerApps_RequestUploadToken_Request::CPartnerApps_RequestUploadToken_Request(const CPartnerApps_RequestUploadToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_RequestUploadToken_Request)
}

inline void CPartnerApps_RequestUploadToken_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CPartnerApps_RequestUploadToken_Request::~CPartnerApps_RequestUploadToken_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_RequestUploadToken_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_RequestUploadToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_RequestUploadToken_Request::ArenaDtor(void* object) {
  CPartnerApps_RequestUploadToken_Request* _this = reinterpret_cast< CPartnerApps_RequestUploadToken_Request* >(object);
  (void)_this;
}
void CPartnerApps_RequestUploadToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_RequestUploadToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_RequestUploadToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_RequestUploadToken_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_RequestUploadToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_RequestUploadToken_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_RequestUploadToken_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_RequestUploadToken_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_RequestUploadToken_Request.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_RequestUploadToken_Request)
  return target;
}

size_t CPartnerApps_RequestUploadToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_RequestUploadToken_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_RequestUploadToken_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_RequestUploadToken_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_RequestUploadToken_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_RequestUploadToken_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_RequestUploadToken_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_RequestUploadToken_Request &>(from));
}


void CPartnerApps_RequestUploadToken_Request::MergeFrom(const CPartnerApps_RequestUploadToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_RequestUploadToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_RequestUploadToken_Request::CopyFrom(const CPartnerApps_RequestUploadToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_RequestUploadToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_RequestUploadToken_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_RequestUploadToken_Request::InternalSwap(CPartnerApps_RequestUploadToken_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_RequestUploadToken_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[0]);
}

// ===================================================================

class CPartnerApps_RequestUploadToken_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_RequestUploadToken_Response>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPartnerApps_RequestUploadToken_Response::CPartnerApps_RequestUploadToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_RequestUploadToken_Response)
}
CPartnerApps_RequestUploadToken_Response::CPartnerApps_RequestUploadToken_Response(const CPartnerApps_RequestUploadToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_location()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  ::memcpy(&upload_token_, &from.upload_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_RequestUploadToken_Response)
}

inline void CPartnerApps_RequestUploadToken_Response::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
}

CPartnerApps_RequestUploadToken_Response::~CPartnerApps_RequestUploadToken_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_RequestUploadToken_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_RequestUploadToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_RequestUploadToken_Response::ArenaDtor(void* object) {
  CPartnerApps_RequestUploadToken_Response* _this = reinterpret_cast< CPartnerApps_RequestUploadToken_Response* >(object);
  (void)_this;
}
void CPartnerApps_RequestUploadToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_RequestUploadToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_RequestUploadToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_RequestUploadToken_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    location_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&upload_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&routing_id_) -
        reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_RequestUploadToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_token(&has_bits);
          upload_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_RequestUploadToken_Response.location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 routing_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_routing_id(&has_bits);
          routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_RequestUploadToken_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_RequestUploadToken_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_token(), target);
  }

  // optional string location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_RequestUploadToken_Response.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  // optional uint64 routing_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_routing_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_RequestUploadToken_Response)
  return target;
}

size_t CPartnerApps_RequestUploadToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_RequestUploadToken_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location());
    }

    // optional uint64 upload_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_token());
    }

    // optional uint64 routing_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_routing_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_RequestUploadToken_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_RequestUploadToken_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_RequestUploadToken_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_RequestUploadToken_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_RequestUploadToken_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_RequestUploadToken_Response &>(from));
}


void CPartnerApps_RequestUploadToken_Response::MergeFrom(const CPartnerApps_RequestUploadToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_RequestUploadToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      routing_id_ = from.routing_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_RequestUploadToken_Response::CopyFrom(const CPartnerApps_RequestUploadToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_RequestUploadToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_RequestUploadToken_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_RequestUploadToken_Response::InternalSwap(CPartnerApps_RequestUploadToken_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, routing_id_)
      + sizeof(CPartnerApps_RequestUploadToken_Response::routing_id_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_RequestUploadToken_Response, upload_token_)>(
          reinterpret_cast<char*>(&upload_token_),
          reinterpret_cast<char*>(&other->upload_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_RequestUploadToken_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[1]);
}

// ===================================================================

class CPartnerApps_FinishUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUpload_Request>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPartnerApps_FinishUpload_Request::CPartnerApps_FinishUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUpload_Request)
}
CPartnerApps_FinishUpload_Request::CPartnerApps_FinishUpload_Request(const CPartnerApps_FinishUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_token_, &from.upload_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUpload_Request)
}

inline void CPartnerApps_FinishUpload_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(app_id_));
}

CPartnerApps_FinishUpload_Request::~CPartnerApps_FinishUpload_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_FinishUpload_Request::ArenaDtor(void* object) {
  CPartnerApps_FinishUpload_Request* _this = reinterpret_cast< CPartnerApps_FinishUpload_Request* >(object);
  (void)_this;
}
void CPartnerApps_FinishUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&upload_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&upload_token_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_token(&has_bits);
          upload_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 routing_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_routing_id(&has_bits);
          routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_routing_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUpload_Request)
  return target;
}

size_t CPartnerApps_FinishUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_token());
    }

    // optional uint64 routing_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_routing_id());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUpload_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUpload_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUpload_Request &>(from));
}


void CPartnerApps_FinishUpload_Request::MergeFrom(const CPartnerApps_FinishUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      routing_id_ = from.routing_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUpload_Request::CopyFrom(const CPartnerApps_FinishUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUpload_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUpload_Request::InternalSwap(CPartnerApps_FinishUpload_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, app_id_)
      + sizeof(CPartnerApps_FinishUpload_Request::app_id_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUpload_Request, upload_token_)>(
          reinterpret_cast<char*>(&upload_token_),
          reinterpret_cast<char*>(&other->upload_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[2]);
}

// ===================================================================

class CPartnerApps_FinishUploadKVSign_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUploadKVSign_Response>()._has_bits_);
  static void set_has_signed_installscript(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPartnerApps_FinishUploadKVSign_Response::CPartnerApps_FinishUploadKVSign_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUploadKVSign_Response)
}
CPartnerApps_FinishUploadKVSign_Response::CPartnerApps_FinishUploadKVSign_Response(const CPartnerApps_FinishUploadKVSign_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_installscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signed_installscript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signed_installscript()) {
    signed_installscript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_installscript(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUploadKVSign_Response)
}

inline void CPartnerApps_FinishUploadKVSign_Response::SharedCtor() {
signed_installscript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signed_installscript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPartnerApps_FinishUploadKVSign_Response::~CPartnerApps_FinishUploadKVSign_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUploadKVSign_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUploadKVSign_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signed_installscript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadKVSign_Response::ArenaDtor(void* object) {
  CPartnerApps_FinishUploadKVSign_Response* _this = reinterpret_cast< CPartnerApps_FinishUploadKVSign_Response* >(object);
  (void)_this;
}
void CPartnerApps_FinishUploadKVSign_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUploadKVSign_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUploadKVSign_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUploadKVSign_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signed_installscript_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUploadKVSign_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string signed_installscript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signed_installscript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_FinishUploadKVSign_Response.signed_installscript");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUploadKVSign_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUploadKVSign_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string signed_installscript = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signed_installscript().data(), static_cast<int>(this->_internal_signed_installscript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_FinishUploadKVSign_Response.signed_installscript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signed_installscript(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUploadKVSign_Response)
  return target;
}

size_t CPartnerApps_FinishUploadKVSign_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUploadKVSign_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string signed_installscript = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signed_installscript());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUploadKVSign_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUploadKVSign_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUploadKVSign_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUploadKVSign_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUploadKVSign_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUploadKVSign_Response &>(from));
}


void CPartnerApps_FinishUploadKVSign_Response::MergeFrom(const CPartnerApps_FinishUploadKVSign_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUploadKVSign_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signed_installscript()) {
    _internal_set_signed_installscript(from._internal_signed_installscript());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUploadKVSign_Response::CopyFrom(const CPartnerApps_FinishUploadKVSign_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUploadKVSign_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadKVSign_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadKVSign_Response::InternalSwap(CPartnerApps_FinishUploadKVSign_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signed_installscript_, lhs_arena,
      &other->signed_installscript_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUploadKVSign_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[3]);
}

// ===================================================================

class CPartnerApps_FinishUploadLegacyDRM_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUploadLegacyDRM_Request>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tool_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_cloud(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPartnerApps_FinishUploadLegacyDRM_Request::CPartnerApps_FinishUploadLegacyDRM_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUploadLegacyDRM_Request)
}
CPartnerApps_FinishUploadLegacyDRM_Request::CPartnerApps_FinishUploadLegacyDRM_Request(const CPartnerApps_FinishUploadLegacyDRM_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tool_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tool_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tool_name()) {
    tool_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tool_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&upload_token_, &from.upload_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_cloud_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(use_cloud_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUploadLegacyDRM_Request)
}

inline void CPartnerApps_FinishUploadLegacyDRM_Request::SharedCtor() {
tool_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tool_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_cloud_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(use_cloud_));
}

CPartnerApps_FinishUploadLegacyDRM_Request::~CPartnerApps_FinishUploadLegacyDRM_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUploadLegacyDRM_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUploadLegacyDRM_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tool_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadLegacyDRM_Request::ArenaDtor(void* object) {
  CPartnerApps_FinishUploadLegacyDRM_Request* _this = reinterpret_cast< CPartnerApps_FinishUploadLegacyDRM_Request* >(object);
  (void)_this;
}
void CPartnerApps_FinishUploadLegacyDRM_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUploadLegacyDRM_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUploadLegacyDRM_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUploadLegacyDRM_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tool_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&upload_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_cloud_) -
        reinterpret_cast<char*>(&upload_token_)) + sizeof(use_cloud_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUploadLegacyDRM_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_token(&has_bits);
          upload_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 routing_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_routing_id(&has_bits);
          routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tool_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tool_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_FinishUploadLegacyDRM_Request.tool_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_cloud = 6 [default = false, (.description) = "use cloud storage for build products"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_cloud(&has_bits);
          use_cloud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUploadLegacyDRM_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUploadLegacyDRM_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_routing_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  // optional string tool_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tool_name().data(), static_cast<int>(this->_internal_tool_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_FinishUploadLegacyDRM_Request.tool_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tool_name(), target);
  }

  // optional bool use_cloud = 6 [default = false, (.description) = "use cloud storage for build products"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_cloud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUploadLegacyDRM_Request)
  return target;
}

size_t CPartnerApps_FinishUploadLegacyDRM_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUploadLegacyDRM_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tool_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tool_name());
    }

    // optional uint64 upload_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_token());
    }

    // optional uint64 routing_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_routing_id());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 flags = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional bool use_cloud = 6 [default = false, (.description) = "use cloud storage for build products"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUploadLegacyDRM_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUploadLegacyDRM_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUploadLegacyDRM_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUploadLegacyDRM_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUploadLegacyDRM_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUploadLegacyDRM_Request &>(from));
}


void CPartnerApps_FinishUploadLegacyDRM_Request::MergeFrom(const CPartnerApps_FinishUploadLegacyDRM_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUploadLegacyDRM_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tool_name(from._internal_tool_name());
    }
    if (cached_has_bits & 0x00000002u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      routing_id_ = from.routing_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_cloud_ = from.use_cloud_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUploadLegacyDRM_Request::CopyFrom(const CPartnerApps_FinishUploadLegacyDRM_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUploadLegacyDRM_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadLegacyDRM_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadLegacyDRM_Request::InternalSwap(CPartnerApps_FinishUploadLegacyDRM_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tool_name_, lhs_arena,
      &other->tool_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, use_cloud_)
      + sizeof(CPartnerApps_FinishUploadLegacyDRM_Request::use_cloud_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUploadLegacyDRM_Request, upload_token_)>(
          reinterpret_cast<char*>(&upload_token_),
          reinterpret_cast<char*>(&other->upload_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUploadLegacyDRM_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[4]);
}

// ===================================================================

class CPartnerApps_FinishUploadLegacyDRM_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUploadLegacyDRM_Response>()._has_bits_);
  static void set_has_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPartnerApps_FinishUploadLegacyDRM_Response::CPartnerApps_FinishUploadLegacyDRM_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUploadLegacyDRM_Response)
}
CPartnerApps_FinishUploadLegacyDRM_Response::CPartnerApps_FinishUploadLegacyDRM_Response(const CPartnerApps_FinishUploadLegacyDRM_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_id()) {
    file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUploadLegacyDRM_Response)
}

inline void CPartnerApps_FinishUploadLegacyDRM_Response::SharedCtor() {
file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPartnerApps_FinishUploadLegacyDRM_Response::~CPartnerApps_FinishUploadLegacyDRM_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUploadLegacyDRM_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUploadLegacyDRM_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_FinishUploadLegacyDRM_Response::ArenaDtor(void* object) {
  CPartnerApps_FinishUploadLegacyDRM_Response* _this = reinterpret_cast< CPartnerApps_FinishUploadLegacyDRM_Response* >(object);
  (void)_this;
}
void CPartnerApps_FinishUploadLegacyDRM_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUploadLegacyDRM_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUploadLegacyDRM_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUploadLegacyDRM_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUploadLegacyDRM_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_FinishUploadLegacyDRM_Response.file_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUploadLegacyDRM_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUploadLegacyDRM_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_FinishUploadLegacyDRM_Response.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUploadLegacyDRM_Response)
  return target;
}

size_t CPartnerApps_FinishUploadLegacyDRM_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUploadLegacyDRM_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string file_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUploadLegacyDRM_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUploadLegacyDRM_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUploadLegacyDRM_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUploadLegacyDRM_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUploadLegacyDRM_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUploadLegacyDRM_Response &>(from));
}


void CPartnerApps_FinishUploadLegacyDRM_Response::MergeFrom(const CPartnerApps_FinishUploadLegacyDRM_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUploadLegacyDRM_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_id()) {
    _internal_set_file_id(from._internal_file_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUploadLegacyDRM_Response::CopyFrom(const CPartnerApps_FinishUploadLegacyDRM_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUploadLegacyDRM_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadLegacyDRM_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadLegacyDRM_Response::InternalSwap(CPartnerApps_FinishUploadLegacyDRM_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUploadLegacyDRM_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[5]);
}

// ===================================================================

class CPartnerApps_FinishUpload_Response::_Internal {
 public:
};

CPartnerApps_FinishUpload_Response::CPartnerApps_FinishUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUpload_Response)
}
CPartnerApps_FinishUpload_Response::CPartnerApps_FinishUpload_Response(const CPartnerApps_FinishUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUpload_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUpload_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[6]);
}

// ===================================================================

class CPartnerApps_FinishUploadDepot_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUploadDepot_Request>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_build_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPartnerApps_FinishUploadDepot_Request::CPartnerApps_FinishUploadDepot_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUploadDepot_Request)
}
CPartnerApps_FinishUploadDepot_Request::CPartnerApps_FinishUploadDepot_Request(const CPartnerApps_FinishUploadDepot_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_token_, &from.upload_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_flags_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(build_flags_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUploadDepot_Request)
}

inline void CPartnerApps_FinishUploadDepot_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_flags_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(build_flags_));
}

CPartnerApps_FinishUploadDepot_Request::~CPartnerApps_FinishUploadDepot_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUploadDepot_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUploadDepot_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_FinishUploadDepot_Request::ArenaDtor(void* object) {
  CPartnerApps_FinishUploadDepot_Request* _this = reinterpret_cast< CPartnerApps_FinishUploadDepot_Request* >(object);
  (void)_this;
}
void CPartnerApps_FinishUploadDepot_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUploadDepot_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUploadDepot_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUploadDepot_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&upload_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_flags_) -
        reinterpret_cast<char*>(&upload_token_)) + sizeof(build_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUploadDepot_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_token(&has_bits);
          upload_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 routing_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_routing_id(&has_bits);
          routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depot_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 build_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_build_flags(&has_bits);
          build_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUploadDepot_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUploadDepot_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_routing_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional uint32 depot_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_depot_id(), target);
  }

  // optional uint32 build_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_build_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUploadDepot_Request)
  return target;
}

size_t CPartnerApps_FinishUploadDepot_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUploadDepot_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_token());
    }

    // optional uint64 routing_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_routing_id());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 depot_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional uint32 build_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_build_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUploadDepot_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUploadDepot_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUploadDepot_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUploadDepot_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUploadDepot_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUploadDepot_Request &>(from));
}


void CPartnerApps_FinishUploadDepot_Request::MergeFrom(const CPartnerApps_FinishUploadDepot_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUploadDepot_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      routing_id_ = from.routing_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      build_flags_ = from.build_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUploadDepot_Request::CopyFrom(const CPartnerApps_FinishUploadDepot_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUploadDepot_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadDepot_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadDepot_Request::InternalSwap(CPartnerApps_FinishUploadDepot_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUploadDepot_Request, build_flags_)
      + sizeof(CPartnerApps_FinishUploadDepot_Request::build_flags_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_FinishUploadDepot_Request, upload_token_)>(
          reinterpret_cast<char*>(&upload_token_),
          reinterpret_cast<char*>(&other->upload_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUploadDepot_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[7]);
}

// ===================================================================

class CPartnerApps_FinishUploadDepot_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FinishUploadDepot_Response>()._has_bits_);
  static void set_has_build_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPartnerApps_FinishUploadDepot_Response::CPartnerApps_FinishUploadDepot_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FinishUploadDepot_Response)
}
CPartnerApps_FinishUploadDepot_Response::CPartnerApps_FinishUploadDepot_Response(const CPartnerApps_FinishUploadDepot_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_routing_id_ = from.build_routing_id_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FinishUploadDepot_Response)
}

inline void CPartnerApps_FinishUploadDepot_Response::SharedCtor() {
build_routing_id_ = uint64_t{0u};
}

CPartnerApps_FinishUploadDepot_Response::~CPartnerApps_FinishUploadDepot_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FinishUploadDepot_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FinishUploadDepot_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_FinishUploadDepot_Response::ArenaDtor(void* object) {
  CPartnerApps_FinishUploadDepot_Response* _this = reinterpret_cast< CPartnerApps_FinishUploadDepot_Response* >(object);
  (void)_this;
}
void CPartnerApps_FinishUploadDepot_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FinishUploadDepot_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FinishUploadDepot_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FinishUploadDepot_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_routing_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FinishUploadDepot_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 build_routing_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_build_routing_id(&has_bits);
          build_routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FinishUploadDepot_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FinishUploadDepot_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_routing_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_build_routing_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FinishUploadDepot_Response)
  return target;
}

size_t CPartnerApps_FinishUploadDepot_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FinishUploadDepot_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 build_routing_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_build_routing_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FinishUploadDepot_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FinishUploadDepot_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FinishUploadDepot_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_FinishUploadDepot_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FinishUploadDepot_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FinishUploadDepot_Response &>(from));
}


void CPartnerApps_FinishUploadDepot_Response::MergeFrom(const CPartnerApps_FinishUploadDepot_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FinishUploadDepot_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_build_routing_id()) {
    _internal_set_build_routing_id(from._internal_build_routing_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FinishUploadDepot_Response::CopyFrom(const CPartnerApps_FinishUploadDepot_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FinishUploadDepot_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FinishUploadDepot_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FinishUploadDepot_Response::InternalSwap(CPartnerApps_FinishUploadDepot_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(build_routing_id_, other->build_routing_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FinishUploadDepot_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[8]);
}

// ===================================================================

class CPartnerApps_GetDepotBuildResult_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_GetDepotBuildResult_Request>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPartnerApps_GetDepotBuildResult_Request::CPartnerApps_GetDepotBuildResult_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_GetDepotBuildResult_Request)
}
CPartnerApps_GetDepotBuildResult_Request::CPartnerApps_GetDepotBuildResult_Request(const CPartnerApps_GetDepotBuildResult_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_token_, &from.upload_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_GetDepotBuildResult_Request)
}

inline void CPartnerApps_GetDepotBuildResult_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_id_) -
    reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
}

CPartnerApps_GetDepotBuildResult_Request::~CPartnerApps_GetDepotBuildResult_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_GetDepotBuildResult_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_GetDepotBuildResult_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_GetDepotBuildResult_Request::ArenaDtor(void* object) {
  CPartnerApps_GetDepotBuildResult_Request* _this = reinterpret_cast< CPartnerApps_GetDepotBuildResult_Request* >(object);
  (void)_this;
}
void CPartnerApps_GetDepotBuildResult_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_GetDepotBuildResult_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_GetDepotBuildResult_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_GetDepotBuildResult_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&upload_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&routing_id_) -
        reinterpret_cast<char*>(&upload_token_)) + sizeof(routing_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_GetDepotBuildResult_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_token(&has_bits);
          upload_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 routing_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_routing_id(&has_bits);
          routing_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_GetDepotBuildResult_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_GetDepotBuildResult_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_token(), target);
  }

  // optional uint64 routing_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_routing_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_GetDepotBuildResult_Request)
  return target;
}

size_t CPartnerApps_GetDepotBuildResult_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_GetDepotBuildResult_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_token());
    }

    // optional uint64 routing_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_routing_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_GetDepotBuildResult_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_GetDepotBuildResult_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_GetDepotBuildResult_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_GetDepotBuildResult_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_GetDepotBuildResult_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_GetDepotBuildResult_Request &>(from));
}


void CPartnerApps_GetDepotBuildResult_Request::MergeFrom(const CPartnerApps_GetDepotBuildResult_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_GetDepotBuildResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_ = from.upload_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      routing_id_ = from.routing_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_GetDepotBuildResult_Request::CopyFrom(const CPartnerApps_GetDepotBuildResult_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_GetDepotBuildResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_GetDepotBuildResult_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_GetDepotBuildResult_Request::InternalSwap(CPartnerApps_GetDepotBuildResult_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_GetDepotBuildResult_Request, routing_id_)
      + sizeof(CPartnerApps_GetDepotBuildResult_Request::routing_id_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_GetDepotBuildResult_Request, upload_token_)>(
          reinterpret_cast<char*>(&upload_token_),
          reinterpret_cast<char*>(&other->upload_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_GetDepotBuildResult_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[9]);
}

// ===================================================================

class CPartnerApps_GetDepotBuildResult_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_GetDepotBuildResult_Response>()._has_bits_);
  static void set_has_manifest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPartnerApps_GetDepotBuildResult_Response::CPartnerApps_GetDepotBuildResult_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_GetDepotBuildResult_Response)
}
CPartnerApps_GetDepotBuildResult_Response::CPartnerApps_GetDepotBuildResult_Response(const CPartnerApps_GetDepotBuildResult_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_msg()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArenaForAllocation());
  }
  manifest_id_ = from.manifest_id_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_GetDepotBuildResult_Response)
}

inline void CPartnerApps_GetDepotBuildResult_Response::SharedCtor() {
error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manifest_id_ = uint64_t{0u};
}

CPartnerApps_GetDepotBuildResult_Response::~CPartnerApps_GetDepotBuildResult_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_GetDepotBuildResult_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_GetDepotBuildResult_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_GetDepotBuildResult_Response::ArenaDtor(void* object) {
  CPartnerApps_GetDepotBuildResult_Response* _this = reinterpret_cast< CPartnerApps_GetDepotBuildResult_Response* >(object);
  (void)_this;
}
void CPartnerApps_GetDepotBuildResult_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_GetDepotBuildResult_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_GetDepotBuildResult_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_GetDepotBuildResult_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmpty();
  }
  manifest_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_GetDepotBuildResult_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 manifest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_manifest_id(&has_bits);
          manifest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_GetDepotBuildResult_Response.error_msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_GetDepotBuildResult_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_GetDepotBuildResult_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 manifest_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_manifest_id(), target);
  }

  // optional string error_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_GetDepotBuildResult_Response.error_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_GetDepotBuildResult_Response)
  return target;
}

size_t CPartnerApps_GetDepotBuildResult_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_GetDepotBuildResult_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_msg());
    }

    // optional uint64 manifest_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_manifest_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_GetDepotBuildResult_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_GetDepotBuildResult_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_GetDepotBuildResult_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_GetDepotBuildResult_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_GetDepotBuildResult_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_GetDepotBuildResult_Response &>(from));
}


void CPartnerApps_GetDepotBuildResult_Response::MergeFrom(const CPartnerApps_GetDepotBuildResult_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_GetDepotBuildResult_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_msg(from._internal_error_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_ = from.manifest_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_GetDepotBuildResult_Response::CopyFrom(const CPartnerApps_GetDepotBuildResult_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_GetDepotBuildResult_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_GetDepotBuildResult_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_GetDepotBuildResult_Response::InternalSwap(CPartnerApps_GetDepotBuildResult_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_msg_, lhs_arena,
      &other->error_msg_, rhs_arena
  );
  swap(manifest_id_, other->manifest_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_GetDepotBuildResult_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[10]);
}

// ===================================================================

class CPartnerApps_FindDRMUploads_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_FindDRMUploads_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPartnerApps_FindDRMUploads_Request::CPartnerApps_FindDRMUploads_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FindDRMUploads_Request)
}
CPartnerApps_FindDRMUploads_Request::CPartnerApps_FindDRMUploads_Request(const CPartnerApps_FindDRMUploads_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FindDRMUploads_Request)
}

inline void CPartnerApps_FindDRMUploads_Request::SharedCtor() {
app_id_ = 0;
}

CPartnerApps_FindDRMUploads_Request::~CPartnerApps_FindDRMUploads_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FindDRMUploads_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FindDRMUploads_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_FindDRMUploads_Request::ArenaDtor(void* object) {
  CPartnerApps_FindDRMUploads_Request* _this = reinterpret_cast< CPartnerApps_FindDRMUploads_Request* >(object);
  (void)_this;
}
void CPartnerApps_FindDRMUploads_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FindDRMUploads_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FindDRMUploads_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FindDRMUploads_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FindDRMUploads_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FindDRMUploads_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FindDRMUploads_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FindDRMUploads_Request)
  return target;
}

size_t CPartnerApps_FindDRMUploads_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FindDRMUploads_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FindDRMUploads_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FindDRMUploads_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FindDRMUploads_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_FindDRMUploads_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FindDRMUploads_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FindDRMUploads_Request &>(from));
}


void CPartnerApps_FindDRMUploads_Request::MergeFrom(const CPartnerApps_FindDRMUploads_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FindDRMUploads_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FindDRMUploads_Request::CopyFrom(const CPartnerApps_FindDRMUploads_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FindDRMUploads_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FindDRMUploads_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_FindDRMUploads_Request::InternalSwap(CPartnerApps_FindDRMUploads_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FindDRMUploads_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[11]);
}

// ===================================================================

class CPartnerApps_ExistingDRMUpload::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_ExistingDRMUpload>()._has_bits_);
  static void set_has_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_actor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_supplied_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mod_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_orig_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPartnerApps_ExistingDRMUpload::CPartnerApps_ExistingDRMUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_ExistingDRMUpload)
}
CPartnerApps_ExistingDRMUpload::CPartnerApps_ExistingDRMUpload(const CPartnerApps_ExistingDRMUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_id()) {
    file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_id(), 
      GetArenaForAllocation());
  }
  supplied_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    supplied_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_supplied_name()) {
    supplied_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_supplied_name(), 
      GetArenaForAllocation());
  }
  mod_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mod_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mod_type()) {
    mod_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mod_type(), 
      GetArenaForAllocation());
  }
  orig_file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    orig_file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_orig_file_id()) {
    orig_file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orig_file_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_ExistingDRMUpload)
}

inline void CPartnerApps_ExistingDRMUpload::SharedCtor() {
file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
supplied_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  supplied_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mod_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mod_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
orig_file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  orig_file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(timestamp_));
}

CPartnerApps_ExistingDRMUpload::~CPartnerApps_ExistingDRMUpload() {
  // @@protoc_insertion_point(destructor:CPartnerApps_ExistingDRMUpload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_ExistingDRMUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supplied_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orig_file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_ExistingDRMUpload::ArenaDtor(void* object) {
  CPartnerApps_ExistingDRMUpload* _this = reinterpret_cast< CPartnerApps_ExistingDRMUpload* >(object);
  (void)_this;
}
void CPartnerApps_ExistingDRMUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_ExistingDRMUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_ExistingDRMUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_ExistingDRMUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      file_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      supplied_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      mod_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      orig_file_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_ExistingDRMUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_ExistingDRMUpload.file_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_actor_id(&has_bits);
          actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string supplied_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_supplied_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_ExistingDRMUpload.supplied_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mod_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mod_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_ExistingDRMUpload.mod_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string orig_file_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_orig_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_ExistingDRMUpload.orig_file_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_ExistingDRMUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_ExistingDRMUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_ExistingDRMUpload.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional int32 actor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actor_id(), target);
  }

  // optional string supplied_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_supplied_name().data(), static_cast<int>(this->_internal_supplied_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_ExistingDRMUpload.supplied_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_supplied_name(), target);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  // optional string mod_type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mod_type().data(), static_cast<int>(this->_internal_mod_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_ExistingDRMUpload.mod_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mod_type(), target);
  }

  // optional fixed32 timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_timestamp(), target);
  }

  // optional string orig_file_id = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orig_file_id().data(), static_cast<int>(this->_internal_orig_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_ExistingDRMUpload.orig_file_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_orig_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_ExistingDRMUpload)
  return target;
}

size_t CPartnerApps_ExistingDRMUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_ExistingDRMUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_id());
    }

    // optional string supplied_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_supplied_name());
    }

    // optional string mod_type = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mod_type());
    }

    // optional string orig_file_id = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orig_file_id());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 actor_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actor_id());
    }

    // optional uint32 flags = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional fixed32 timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_ExistingDRMUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_ExistingDRMUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_ExistingDRMUpload::GetClassData() const { return &_class_data_; }

void CPartnerApps_ExistingDRMUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_ExistingDRMUpload *>(to)->MergeFrom(
      static_cast<const CPartnerApps_ExistingDRMUpload &>(from));
}


void CPartnerApps_ExistingDRMUpload::MergeFrom(const CPartnerApps_ExistingDRMUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_ExistingDRMUpload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_id(from._internal_file_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_supplied_name(from._internal_supplied_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mod_type(from._internal_mod_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_orig_file_id(from._internal_orig_file_id());
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      actor_id_ = from.actor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_ExistingDRMUpload::CopyFrom(const CPartnerApps_ExistingDRMUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_ExistingDRMUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_ExistingDRMUpload::IsInitialized() const {
  return true;
}

void CPartnerApps_ExistingDRMUpload::InternalSwap(CPartnerApps_ExistingDRMUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &supplied_name_, lhs_arena,
      &other->supplied_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mod_type_, lhs_arena,
      &other->mod_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &orig_file_id_, lhs_arena,
      &other->orig_file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, timestamp_)
      + sizeof(CPartnerApps_ExistingDRMUpload::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CPartnerApps_ExistingDRMUpload, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_ExistingDRMUpload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[12]);
}

// ===================================================================

class CPartnerApps_FindDRMUploads_Response::_Internal {
 public:
};

CPartnerApps_FindDRMUploads_Response::CPartnerApps_FindDRMUploads_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uploads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_FindDRMUploads_Response)
}
CPartnerApps_FindDRMUploads_Response::CPartnerApps_FindDRMUploads_Response(const CPartnerApps_FindDRMUploads_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uploads_(from.uploads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_FindDRMUploads_Response)
}

inline void CPartnerApps_FindDRMUploads_Response::SharedCtor() {
}

CPartnerApps_FindDRMUploads_Response::~CPartnerApps_FindDRMUploads_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_FindDRMUploads_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_FindDRMUploads_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPartnerApps_FindDRMUploads_Response::ArenaDtor(void* object) {
  CPartnerApps_FindDRMUploads_Response* _this = reinterpret_cast< CPartnerApps_FindDRMUploads_Response* >(object);
  (void)_this;
}
void CPartnerApps_FindDRMUploads_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_FindDRMUploads_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_FindDRMUploads_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_FindDRMUploads_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uploads_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_FindDRMUploads_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPartnerApps_ExistingDRMUpload uploads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uploads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_FindDRMUploads_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_FindDRMUploads_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPartnerApps_ExistingDRMUpload uploads = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uploads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uploads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_FindDRMUploads_Response)
  return target;
}

size_t CPartnerApps_FindDRMUploads_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_FindDRMUploads_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPartnerApps_ExistingDRMUpload uploads = 1;
  total_size += 1UL * this->_internal_uploads_size();
  for (const auto& msg : this->uploads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_FindDRMUploads_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_FindDRMUploads_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_FindDRMUploads_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_FindDRMUploads_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_FindDRMUploads_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_FindDRMUploads_Response &>(from));
}


void CPartnerApps_FindDRMUploads_Response::MergeFrom(const CPartnerApps_FindDRMUploads_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_FindDRMUploads_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  uploads_.MergeFrom(from.uploads_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_FindDRMUploads_Response::CopyFrom(const CPartnerApps_FindDRMUploads_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_FindDRMUploads_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_FindDRMUploads_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_FindDRMUploads_Response::InternalSwap(CPartnerApps_FindDRMUploads_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uploads_.InternalSwap(&other->uploads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_FindDRMUploads_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[13]);
}

// ===================================================================

class CPartnerApps_Download_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_Download_Request>()._has_bits_);
  static void set_has_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPartnerApps_Download_Request::CPartnerApps_Download_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_Download_Request)
}
CPartnerApps_Download_Request::CPartnerApps_Download_Request(const CPartnerApps_Download_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_id()) {
    file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_id(), 
      GetArenaForAllocation());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_Download_Request)
}

inline void CPartnerApps_Download_Request::SharedCtor() {
file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_ = 0;
}

CPartnerApps_Download_Request::~CPartnerApps_Download_Request() {
  // @@protoc_insertion_point(destructor:CPartnerApps_Download_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_Download_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_Download_Request::ArenaDtor(void* object) {
  CPartnerApps_Download_Request* _this = reinterpret_cast< CPartnerApps_Download_Request* >(object);
  (void)_this;
}
void CPartnerApps_Download_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_Download_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_Download_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_Download_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_id_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_Download_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_Download_Request.file_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_Download_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_Download_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_Download_Request.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_Download_Request)
  return target;
}

size_t CPartnerApps_Download_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_Download_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_id());
    }

    // optional int32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_Download_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_Download_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_Download_Request::GetClassData() const { return &_class_data_; }

void CPartnerApps_Download_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_Download_Request *>(to)->MergeFrom(
      static_cast<const CPartnerApps_Download_Request &>(from));
}


void CPartnerApps_Download_Request::MergeFrom(const CPartnerApps_Download_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_Download_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_id(from._internal_file_id());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_Download_Request::CopyFrom(const CPartnerApps_Download_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_Download_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_Download_Request::IsInitialized() const {
  return true;
}

void CPartnerApps_Download_Request::InternalSwap(CPartnerApps_Download_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_Download_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[14]);
}

// ===================================================================

class CPartnerApps_Download_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartnerApps_Download_Response>()._has_bits_);
  static void set_has_download_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPartnerApps_Download_Response::CPartnerApps_Download_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPartnerApps_Download_Response)
}
CPartnerApps_Download_Response::CPartnerApps_Download_Response(const CPartnerApps_Download_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  download_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    download_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_download_url()) {
    download_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_download_url(), 
      GetArenaForAllocation());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CPartnerApps_Download_Response)
}

inline void CPartnerApps_Download_Response::SharedCtor() {
download_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  download_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_ = 0;
}

CPartnerApps_Download_Response::~CPartnerApps_Download_Response() {
  // @@protoc_insertion_point(destructor:CPartnerApps_Download_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPartnerApps_Download_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  download_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPartnerApps_Download_Response::ArenaDtor(void* object) {
  CPartnerApps_Download_Response* _this = reinterpret_cast< CPartnerApps_Download_Response* >(object);
  (void)_this;
}
void CPartnerApps_Download_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartnerApps_Download_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartnerApps_Download_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartnerApps_Download_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    download_url_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartnerApps_Download_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string download_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_download_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPartnerApps_Download_Response.download_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPartnerApps_Download_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartnerApps_Download_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string download_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_download_url().data(), static_cast<int>(this->_internal_download_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPartnerApps_Download_Response.download_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_download_url(), target);
  }

  // optional int32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartnerApps_Download_Response)
  return target;
}

size_t CPartnerApps_Download_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartnerApps_Download_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string download_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_url());
    }

    // optional int32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPartnerApps_Download_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPartnerApps_Download_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPartnerApps_Download_Response::GetClassData() const { return &_class_data_; }

void CPartnerApps_Download_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPartnerApps_Download_Response *>(to)->MergeFrom(
      static_cast<const CPartnerApps_Download_Response &>(from));
}


void CPartnerApps_Download_Response::MergeFrom(const CPartnerApps_Download_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartnerApps_Download_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_download_url(from._internal_download_url());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPartnerApps_Download_Response::CopyFrom(const CPartnerApps_Download_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartnerApps_Download_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartnerApps_Download_Response::IsInitialized() const {
  return true;
}

void CPartnerApps_Download_Response::InternalSwap(CPartnerApps_Download_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &download_url_, lhs_arena,
      &other->download_url_, rhs_arena
  );
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartnerApps_Download_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpartnerapps_2esteamclient_2eproto[15]);
}

// ===================================================================

PartnerApps::~PartnerApps() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PartnerApps::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpartnerapps_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PartnerApps::GetDescriptor() {
  return descriptor();
}

void PartnerApps::RequestKVSignUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_RequestUploadToken_Request*,
                         ::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestKVSignUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::RequestDRMUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_RequestUploadToken_Request*,
                         ::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestDRMUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::RequestCEGUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_RequestUploadToken_Request*,
                         ::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestCEGUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::RequestDepotUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_RequestUploadToken_Request*,
                         ::CPartnerApps_RequestUploadToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestDepotUploadToken() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadKVSign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_FinishUpload_Request*,
                         ::CPartnerApps_FinishUploadKVSign_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadKVSign() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadDRMUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_FinishUploadLegacyDRM_Request*,
                         ::CPartnerApps_FinishUploadLegacyDRM_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadDRMUpload() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadCEGUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_FinishUpload_Request*,
                         ::CPartnerApps_FinishUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadCEGUpload() not implemented.");
  done->Run();
}

void PartnerApps::FinishUploadDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_FinishUploadDepot_Request*,
                         ::CPartnerApps_FinishUploadDepot_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinishUploadDepotUpload() not implemented.");
  done->Run();
}

void PartnerApps::GetDepotBuildResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_GetDepotBuildResult_Request*,
                         ::CPartnerApps_GetDepotBuildResult_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDepotBuildResult() not implemented.");
  done->Run();
}

void PartnerApps::FindDRMUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_FindDRMUploads_Request*,
                         ::CPartnerApps_FindDRMUploads_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FindDRMUploads() not implemented.");
  done->Run();
}

void PartnerApps::Download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPartnerApps_Download_Request*,
                         ::CPartnerApps_Download_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Download() not implemented.");
  done->Run();
}

void PartnerApps::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fpartnerapps_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      RequestKVSignUploadToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_RequestUploadToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_RequestUploadToken_Response*>(
                 response),
             done);
      break;
    case 1:
      RequestDRMUploadToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_RequestUploadToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_RequestUploadToken_Response*>(
                 response),
             done);
      break;
    case 2:
      RequestCEGUploadToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_RequestUploadToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_RequestUploadToken_Response*>(
                 response),
             done);
      break;
    case 3:
      RequestDepotUploadToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_RequestUploadToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_RequestUploadToken_Response*>(
                 response),
             done);
      break;
    case 4:
      FinishUploadKVSign(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_FinishUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_FinishUploadKVSign_Response*>(
                 response),
             done);
      break;
    case 5:
      FinishUploadDRMUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_FinishUploadLegacyDRM_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_FinishUploadLegacyDRM_Response*>(
                 response),
             done);
      break;
    case 6:
      FinishUploadCEGUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_FinishUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_FinishUpload_Response*>(
                 response),
             done);
      break;
    case 7:
      FinishUploadDepotUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_FinishUploadDepot_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_FinishUploadDepot_Response*>(
                 response),
             done);
      break;
    case 8:
      GetDepotBuildResult(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_GetDepotBuildResult_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_GetDepotBuildResult_Response*>(
                 response),
             done);
      break;
    case 9:
      FindDRMUploads(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_FindDRMUploads_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_FindDRMUploads_Response*>(
                 response),
             done);
      break;
    case 10:
      Download(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPartnerApps_Download_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPartnerApps_Download_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PartnerApps::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 1:
      return ::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 2:
      return ::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 3:
      return ::CPartnerApps_RequestUploadToken_Request::default_instance();
    case 4:
      return ::CPartnerApps_FinishUpload_Request::default_instance();
    case 5:
      return ::CPartnerApps_FinishUploadLegacyDRM_Request::default_instance();
    case 6:
      return ::CPartnerApps_FinishUpload_Request::default_instance();
    case 7:
      return ::CPartnerApps_FinishUploadDepot_Request::default_instance();
    case 8:
      return ::CPartnerApps_GetDepotBuildResult_Request::default_instance();
    case 9:
      return ::CPartnerApps_FindDRMUploads_Request::default_instance();
    case 10:
      return ::CPartnerApps_Download_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PartnerApps::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 1:
      return ::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 2:
      return ::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 3:
      return ::CPartnerApps_RequestUploadToken_Response::default_instance();
    case 4:
      return ::CPartnerApps_FinishUploadKVSign_Response::default_instance();
    case 5:
      return ::CPartnerApps_FinishUploadLegacyDRM_Response::default_instance();
    case 6:
      return ::CPartnerApps_FinishUpload_Response::default_instance();
    case 7:
      return ::CPartnerApps_FinishUploadDepot_Response::default_instance();
    case 8:
      return ::CPartnerApps_GetDepotBuildResult_Response::default_instance();
    case 9:
      return ::CPartnerApps_FindDRMUploads_Response::default_instance();
    case 10:
      return ::CPartnerApps_Download_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PartnerApps_Stub::PartnerApps_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PartnerApps_Stub::PartnerApps_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
PartnerApps_Stub::~PartnerApps_Stub() {
  if (owns_channel_) delete channel_;
}

void PartnerApps_Stub::RequestKVSignUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_RequestUploadToken_Request* request,
                              ::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PartnerApps_Stub::RequestDRMUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_RequestUploadToken_Request* request,
                              ::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PartnerApps_Stub::RequestCEGUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_RequestUploadToken_Request* request,
                              ::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PartnerApps_Stub::RequestDepotUploadToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_RequestUploadToken_Request* request,
                              ::CPartnerApps_RequestUploadToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadKVSign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_FinishUpload_Request* request,
                              ::CPartnerApps_FinishUploadKVSign_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadDRMUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_FinishUploadLegacyDRM_Request* request,
                              ::CPartnerApps_FinishUploadLegacyDRM_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadCEGUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_FinishUpload_Request* request,
                              ::CPartnerApps_FinishUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PartnerApps_Stub::FinishUploadDepotUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_FinishUploadDepot_Request* request,
                              ::CPartnerApps_FinishUploadDepot_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void PartnerApps_Stub::GetDepotBuildResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_GetDepotBuildResult_Request* request,
                              ::CPartnerApps_GetDepotBuildResult_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void PartnerApps_Stub::FindDRMUploads(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_FindDRMUploads_Request* request,
                              ::CPartnerApps_FindDRMUploads_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void PartnerApps_Stub::Download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPartnerApps_Download_Request* request,
                              ::CPartnerApps_Download_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPartnerApps_RequestUploadToken_Request* Arena::CreateMaybeMessage< ::CPartnerApps_RequestUploadToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_RequestUploadToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_RequestUploadToken_Response* Arena::CreateMaybeMessage< ::CPartnerApps_RequestUploadToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_RequestUploadToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUpload_Request* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUploadKVSign_Response* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUploadKVSign_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUploadKVSign_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUploadLegacyDRM_Request* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUploadLegacyDRM_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUploadLegacyDRM_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUploadLegacyDRM_Response* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUploadLegacyDRM_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUploadLegacyDRM_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUpload_Response* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUploadDepot_Request* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUploadDepot_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUploadDepot_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FinishUploadDepot_Response* Arena::CreateMaybeMessage< ::CPartnerApps_FinishUploadDepot_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FinishUploadDepot_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_GetDepotBuildResult_Request* Arena::CreateMaybeMessage< ::CPartnerApps_GetDepotBuildResult_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_GetDepotBuildResult_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_GetDepotBuildResult_Response* Arena::CreateMaybeMessage< ::CPartnerApps_GetDepotBuildResult_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_GetDepotBuildResult_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FindDRMUploads_Request* Arena::CreateMaybeMessage< ::CPartnerApps_FindDRMUploads_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FindDRMUploads_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_ExistingDRMUpload* Arena::CreateMaybeMessage< ::CPartnerApps_ExistingDRMUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_ExistingDRMUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_FindDRMUploads_Response* Arena::CreateMaybeMessage< ::CPartnerApps_FindDRMUploads_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_FindDRMUploads_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_Download_Request* Arena::CreateMaybeMessage< ::CPartnerApps_Download_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_Download_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartnerApps_Download_Response* Arena::CreateMaybeMessage< ::CPartnerApps_Download_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartnerApps_Download_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
