// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_virtualcontroller.proto

#include "steammessages_virtualcontroller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CVirtualControllerElement::CVirtualControllerElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visible_(false)
  , x_position_(0)
  , y_position_(0)
  , y_scale_(1)
  , type_(-1)

  , x_scale_(1){}
struct CVirtualControllerElementDefaultTypeInternal {
  constexpr CVirtualControllerElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerElementDefaultTypeInternal() {}
  union {
    CVirtualControllerElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerElementDefaultTypeInternal _CVirtualControllerElement_default_instance_;
constexpr CVirtualControllerColor::CVirtualControllerColor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(1)
  , g_(1)
  , b_(1)
  , a_(1){}
struct CVirtualControllerColorDefaultTypeInternal {
  constexpr CVirtualControllerColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerColorDefaultTypeInternal() {}
  union {
    CVirtualControllerColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerColorDefaultTypeInternal _CVirtualControllerColor_default_instance_;
constexpr CVirtualControllerLayout::CVirtualControllerLayout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , color_(nullptr)
  , layout_version_(0)
  , actionset_id_(0){}
struct CVirtualControllerLayoutDefaultTypeInternal {
  constexpr CVirtualControllerLayoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerLayoutDefaultTypeInternal() {}
  union {
    CVirtualControllerLayout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerLayoutDefaultTypeInternal _CVirtualControllerLayout_default_instance_;
constexpr CVirtualControllerLayouts::CVirtualControllerLayouts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : layouts_()
  , mouse_mode_(0)

  , pinch_zoom_x_(0)
  , pinch_zoom_y_(0)
  , pinch_zoom_enabled_(false)
  , shaken_(false)
  , mouse_offscreen_(false)
  , pinch_zoom_scale_(1)
  , input_mode_(2)

  , trackpad_sensitivity_(1){}
struct CVirtualControllerLayoutsDefaultTypeInternal {
  constexpr CVirtualControllerLayoutsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerLayoutsDefaultTypeInternal() {}
  union {
    CVirtualControllerLayouts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerLayoutsDefaultTypeInternal _CVirtualControllerLayouts_default_instance_;
constexpr CVirtualControllerConfig_Control::CVirtualControllerConfig_Control(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_foreground_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_background_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_source_(0)
  , input_mode_(0)
  , input_element_(0)
  , output_gamepad_(0)
  , output_keyboard_(0)
  , output_mouse_(0)
  , input_toggle_(false)
  , input_activate_stick_or_trackpad_(0)
  , activation_type_(0)
  , long_press_ms_(0)
  , double_press_ms_(0){}
struct CVirtualControllerConfig_ControlDefaultTypeInternal {
  constexpr CVirtualControllerConfig_ControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerConfig_ControlDefaultTypeInternal() {}
  union {
    CVirtualControllerConfig_Control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerConfig_ControlDefaultTypeInternal _CVirtualControllerConfig_Control_default_instance_;
constexpr CVirtualControllerConfig_ActionSet::CVirtualControllerConfig_ActionSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controls_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , parent_id_(0){}
struct CVirtualControllerConfig_ActionSetDefaultTypeInternal {
  constexpr CVirtualControllerConfig_ActionSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerConfig_ActionSetDefaultTypeInternal() {}
  union {
    CVirtualControllerConfig_ActionSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerConfig_ActionSetDefaultTypeInternal _CVirtualControllerConfig_ActionSet_default_instance_;
constexpr CVirtualControllerConfig::CVirtualControllerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionsets_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_mouse_mode_(2)
{}
struct CVirtualControllerConfigDefaultTypeInternal {
  constexpr CVirtualControllerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerConfigDefaultTypeInternal() {}
  union {
    CVirtualControllerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerConfigDefaultTypeInternal _CVirtualControllerConfig_default_instance_;
constexpr CVirtualControllerLayoutPackage::CVirtualControllerLayoutPackage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , layouts_(nullptr)
  , creator_(uint64_t{0u})
  , appid_(0u)
  , initial_revision_(0u)
  , saved_revision_(0u){}
struct CVirtualControllerLayoutPackageDefaultTypeInternal {
  constexpr CVirtualControllerLayoutPackageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerLayoutPackageDefaultTypeInternal() {}
  union {
    CVirtualControllerLayoutPackage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerLayoutPackageDefaultTypeInternal _CVirtualControllerLayoutPackage_default_instance_;
constexpr CVirtualControllerGlobalConfig::CVirtualControllerGlobalConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feedback_enabled_(false)
  , shake_fade_enabled_(false)
  , gyroscope_enabled_(true)
  , auto_fade_enabled_(true)
  , rumble_enabled_(true){}
struct CVirtualControllerGlobalConfigDefaultTypeInternal {
  constexpr CVirtualControllerGlobalConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CVirtualControllerGlobalConfigDefaultTypeInternal() {}
  union {
    CVirtualControllerGlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CVirtualControllerGlobalConfigDefaultTypeInternal _CVirtualControllerGlobalConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fvirtualcontroller_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fvirtualcontroller_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fvirtualcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, type_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, visible_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, x_position_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, y_position_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, x_scale_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerElement, y_scale_),
  4,
  0,
  1,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, r_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, g_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, b_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerColor, a_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, layout_version_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, actionset_id_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, elements_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayout, color_),
  1,
  2,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, layouts_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, input_mode_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, mouse_mode_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, trackpad_sensitivity_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, pinch_zoom_enabled_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, pinch_zoom_x_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, pinch_zoom_y_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, pinch_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, shaken_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayouts, mouse_offscreen_),
  ~0u,
  7,
  0,
  8,
  3,
  1,
  2,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, name_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, icon_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, input_source_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, input_mode_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, input_element_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, output_gamepad_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, output_keyboard_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, output_mouse_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, icon_foreground_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, icon_background_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, input_toggle_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, input_activate_stick_or_trackpad_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, activation_type_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, long_press_ms_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_Control, double_press_ms_),
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  2,
  3,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, id_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, parent_id_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, name_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig_ActionSet, controls_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig, name_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig, actionsets_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerConfig, default_mouse_mode_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, appid_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, creator_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, initial_revision_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, saved_revision_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, config_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerLayoutPackage, layouts_),
  3,
  2,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, feedback_enabled_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, gyroscope_enabled_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, auto_fade_enabled_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, rumble_enabled_),
  PROTOBUF_FIELD_OFFSET(::CVirtualControllerGlobalConfig, shake_fade_enabled_),
  0,
  2,
  3,
  4,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::CVirtualControllerElement)},
  { 18, 28, -1, sizeof(::CVirtualControllerColor)},
  { 32, 42, -1, sizeof(::CVirtualControllerLayout)},
  { 46, 62, -1, sizeof(::CVirtualControllerLayouts)},
  { 72, 93, -1, sizeof(::CVirtualControllerConfig_Control)},
  { 108, 118, -1, sizeof(::CVirtualControllerConfig_ActionSet)},
  { 122, 131, -1, sizeof(::CVirtualControllerConfig)},
  { 134, 146, -1, sizeof(::CVirtualControllerLayoutPackage)},
  { 152, 163, -1, sizeof(::CVirtualControllerGlobalConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerLayout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerLayouts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerConfig_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerConfig_ActionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerLayoutPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CVirtualControllerGlobalConfig_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fvirtualcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_virtualcontroller.proto\""
  "\301\001\n\031CVirtualControllerElement\022C\n\004type\030\001 "
  "\001(\0162\027.EControllerElementType:\034k_EControl"
  "lerElementTypeNone\022\017\n\007visible\030\002 \001(\010\022\022\n\nx"
  "_position\030\003 \001(\002\022\022\n\ny_position\030\004 \001(\002\022\022\n\007x"
  "_scale\030\005 \001(\002:\0011\022\022\n\007y_scale\030\006 \001(\002:\0011\"Q\n\027C"
  "VirtualControllerColor\022\014\n\001r\030\001 \001(\002:\0011\022\014\n\001"
  "g\030\002 \001(\002:\0011\022\014\n\001b\030\003 \001(\002:\0011\022\014\n\001a\030\004 \001(\002:\0011\"\237"
  "\001\n\030CVirtualControllerLayout\022\026\n\016layout_ve"
  "rsion\030\001 \001(\005\022\024\n\014actionset_id\030\002 \001(\005\022,\n\010ele"
  "ments\030\004 \003(\0132\032.CVirtualControllerElement\022"
  "\'\n\005color\030\005 \001(\0132\030.CVirtualControllerColor"
  "\"\362\002\n\031CVirtualControllerLayouts\022*\n\007layout"
  "s\030\001 \003(\0132\031.CVirtualControllerLayout\0227\n\nin"
  "put_mode\030\002 \001(\0162\013.EInputMode:\026k_EInputMod"
  "eController\0224\n\nmouse_mode\030\003 \001(\0162\013.EMouse"
  "Mode:\023k_EMouseModeUnknown\022\037\n\024trackpad_se"
  "nsitivity\030\004 \001(\002:\0011\022!\n\022pinch_zoom_enabled"
  "\030\005 \001(\010:\005false\022\027\n\014pinch_zoom_x\030\006 \001(\002:\0010\022\027"
  "\n\014pinch_zoom_y\030\007 \001(\002:\0010\022\033\n\020pinch_zoom_sc"
  "ale\030\010 \001(\002:\0011\022\016\n\006shaken\030\t \001(\010\022\027\n\017mouse_of"
  "fscreen\030\n \001(\010\"\200\005\n\030CVirtualControllerConf"
  "ig\022\014\n\004name\030\001 \001(\t\0227\n\nactionsets\030\002 \003(\0132#.C"
  "VirtualControllerConfig.ActionSet\022C\n\022def"
  "ault_mouse_mode\030\003 \001(\0162\013.EMouseMode:\032k_EM"
  "ouseModeAbsoluteCursor\032\350\002\n\007Control\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\022\024\n\014input_source\030\003"
  " \001(\005\022\022\n\ninput_mode\030\004 \001(\005\022\025\n\rinput_elemen"
  "t\030\005 \001(\005\022\026\n\016output_gamepad\030\006 \001(\005\022\027\n\017outpu"
  "t_keyboard\030\007 \001(\005\022\024\n\014output_mouse\030\010 \001(\005\022\027"
  "\n\017icon_foreground\030\t \001(\t\022\027\n\017icon_backgrou"
  "nd\030\n \001(\t\022\024\n\014input_toggle\030\013 \001(\010\022(\n input_"
  "activate_stick_or_trackpad\030\014 \001(\005\022\027\n\017acti"
  "vation_type\030\r \001(\005\022\025\n\rlong_press_ms\030\016 \001(\005"
  "\022\027\n\017double_press_ms\030\017 \001(\005\032m\n\tActionSet\022\n"
  "\n\002id\030\001 \001(\005\022\021\n\tparent_id\030\002 \001(\005\022\014\n\004name\030\003 "
  "\001(\t\0223\n\010controls\030\004 \003(\0132!.CVirtualControll"
  "erConfig.Control\"\313\001\n\037CVirtualControllerL"
  "ayoutPackage\022\r\n\005appid\030\001 \001(\r\022\017\n\007creator\030\002"
  " \001(\004\022\030\n\020initial_revision\030\003 \001(\r\022\026\n\016saved_"
  "revision\030\004 \001(\r\022)\n\006config\030\005 \001(\0132\031.CVirtua"
  "lControllerConfig\022+\n\007layouts\030\006 \001(\0132\032.CVi"
  "rtualControllerLayouts\"\266\001\n\036CVirtualContr"
  "ollerGlobalConfig\022\030\n\020feedback_enabled\030\001 "
  "\001(\010\022\037\n\021gyroscope_enabled\030\002 \001(\010:\004true\022\037\n\021"
  "auto_fade_enabled\030\003 \001(\010:\004true\022\034\n\016rumble_"
  "enabled\030\004 \001(\010:\004true\022\032\n\022shake_fade_enable"
  "d\030\005 \001(\010*|\n\nEInputMode\022\027\n\023k_EInputModeUnk"
  "nown\020\000\022\025\n\021k_EInputModeMouse\020\001\022\032\n\026k_EInpu"
  "tModeController\020\002\022\"\n\036k_EInputModeMouseAn"
  "dController\020\003*\226\001\n\nEMouseMode\022\027\n\023k_EMouse"
  "ModeUnknown\020\000\022\036\n\032k_EMouseModeRelativeCur"
  "sor\020\001\022\036\n\032k_EMouseModeAbsoluteCursor\020\002\022\025\n"
  "\021k_EMouseModeTouch\020\003\022\030\n\024k_EMouseModeRela"
  "tive\020\004*\246\014\n\026EControllerElementType\022)\n\034k_E"
  "ControllerElementTypeNone\020\377\377\377\377\377\377\377\377\377\001\022!\n\035"
  "k_EControllerElementTypeThumb\020\000\022\'\n#k_ECo"
  "ntrollerElementTypeButtonSteam\020\001\022(\n$k_EC"
  "ontrollerElementTypeJoystickLeft\020\002\022.\n*k_"
  "EControllerElementTypeButtonJoystickLeft"
  "\020\003\022)\n%k_EControllerElementTypeJoystickRi"
  "ght\020\004\022/\n+k_EControllerElementTypeButtonJ"
  "oystickRight\020\005\022 \n\034k_EControllerElementTy"
  "peDPad\020\006\022#\n\037k_EControllerElementTypeButt"
  "onA\020\007\022#\n\037k_EControllerElementTypeButtonB"
  "\020\010\022#\n\037k_EControllerElementTypeButtonX\020\t\022"
  "#\n\037k_EControllerElementTypeButtonY\020\n\022(\n$"
  "k_EControllerElementTypeButtonSelect\020\013\022\'"
  "\n#k_EControllerElementTypeButtonStart\020\014\022"
  "-\n)k_EControllerElementTypeButtonTrigger"
  "Left\020\r\022.\n*k_EControllerElementTypeButton"
  "TriggerRight\020\016\022,\n(k_EControllerElementTy"
  "peButtonBumperLeft\020\017\022-\n)k_EControllerEle"
  "mentTypeButtonBumperRight\020\020\022(\n$k_EContro"
  "llerElementTypeButtonMacro0\020\021\022(\n$k_ECont"
  "rollerElementTypeButtonMacro1\020\022\022(\n$k_ECo"
  "ntrollerElementTypeButtonMacro2\020\023\022(\n$k_E"
  "ControllerElementTypeButtonMacro3\020\024\022(\n$k"
  "_EControllerElementTypeButtonMacro4\020\025\022(\n"
  "$k_EControllerElementTypeButtonMacro5\020\026\022"
  "(\n$k_EControllerElementTypeButtonMacro6\020"
  "\027\022(\n$k_EControllerElementTypeButtonMacro"
  "7\020\030\022*\n&k_EControllerElementTypeTrackpadC"
  "enter\020\031\022(\n$k_EControllerElementTypeTrack"
  "padLeft\020\032\022)\n%k_EControllerElementTypeTra"
  "ckpadRight\020\033\022$\n k_EControllerElementType"
  "Keyboard\020\034\022+\n\'k_EControllerElementTypeMa"
  "gnifyingGlass\020\035\022.\n*k_EControllerElementT"
  "ypeButtonMacro1Finger\020\036\022.\n*k_EController"
  "ElementTypeButtonMacro2Finger\020\037\022\'\n#k_ECo"
  "ntrollerElementTypeRecordInput\020 \022)\n%k_EC"
  "ontrollerElementTypePlaybackInput\020!\022!\n\035k"
  "_EControllerElementTypePaste\020\"\022\037\n\033k_ECon"
  "trollerElementTypeMax\020#"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fvirtualcontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvirtualcontroller_2eproto = {
  false, false, 3743, descriptor_table_protodef_steammessages_5fvirtualcontroller_2eproto, "steammessages_virtualcontroller.proto", 
  &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_steammessages_5fvirtualcontroller_2eproto::offsets,
  file_level_metadata_steammessages_5fvirtualcontroller_2eproto, file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto, file_level_service_descriptors_steammessages_5fvirtualcontroller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter() {
  return &descriptor_table_steammessages_5fvirtualcontroller_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fvirtualcontroller_2eproto(&descriptor_table_steammessages_5fvirtualcontroller_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInputMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvirtualcontroller_2eproto);
  return file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[0];
}
bool EInputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMouseMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvirtualcontroller_2eproto);
  return file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[1];
}
bool EMouseMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EControllerElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fvirtualcontroller_2eproto);
  return file_level_enum_descriptors_steammessages_5fvirtualcontroller_2eproto[2];
}
bool EControllerElementType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CVirtualControllerElement::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerElement>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CVirtualControllerElement::CVirtualControllerElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerElement)
}
CVirtualControllerElement::CVirtualControllerElement(const CVirtualControllerElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&visible_, &from.visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_scale_) -
    reinterpret_cast<char*>(&visible_)) + sizeof(x_scale_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerElement)
}

inline void CVirtualControllerElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visible_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_position_) -
    reinterpret_cast<char*>(&visible_)) + sizeof(y_position_));
y_scale_ = 1;
type_ = -1;
x_scale_ = 1;
}

CVirtualControllerElement::~CVirtualControllerElement() {
  // @@protoc_insertion_point(destructor:CVirtualControllerElement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVirtualControllerElement::ArenaDtor(void* object) {
  CVirtualControllerElement* _this = reinterpret_cast< CVirtualControllerElement* >(object);
  (void)_this;
}
void CVirtualControllerElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerElement::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_position_) -
        reinterpret_cast<char*>(&visible_)) + sizeof(y_position_));
    y_scale_ = 1;
    type_ = -1;
    x_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EControllerElementType_IsValid(val))) {
            _internal_set_type(static_cast<::EControllerElementType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x_position(&has_bits);
          x_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y_position(&has_bits);
          y_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float x_scale = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_x_scale(&has_bits);
          x_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_scale = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_y_scale(&has_bits);
          y_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool visible = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_visible(), target);
  }

  // optional float x_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x_position(), target);
  }

  // optional float y_position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y_position(), target);
  }

  // optional float x_scale = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_x_scale(), target);
  }

  // optional float y_scale = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_y_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerElement)
  return target;
}

size_t CVirtualControllerElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool visible = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float x_position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y_position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y_scale = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float x_scale = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerElement::GetClassData() const { return &_class_data_; }

void CVirtualControllerElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerElement *>(to)->MergeFrom(
      static_cast<const CVirtualControllerElement &>(from));
}


void CVirtualControllerElement::MergeFrom(const CVirtualControllerElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerElement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_position_ = from.x_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_position_ = from.y_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_scale_ = from.y_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_scale_ = from.x_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerElement::CopyFrom(const CVirtualControllerElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerElement::IsInitialized() const {
  return true;
}

void CVirtualControllerElement::InternalSwap(CVirtualControllerElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerElement, y_position_)
      + sizeof(CVirtualControllerElement::y_position_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerElement, visible_)>(
          reinterpret_cast<char*>(&visible_),
          reinterpret_cast<char*>(&other->visible_));
  swap(y_scale_, other->y_scale_);
  swap(type_, other->type_);
  swap(x_scale_, other->x_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[0]);
}

// ===================================================================

class CVirtualControllerColor::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerColor>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CVirtualControllerColor::CVirtualControllerColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerColor)
}
CVirtualControllerColor::CVirtualControllerColor(const CVirtualControllerColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerColor)
}

inline void CVirtualControllerColor::SharedCtor() {
r_ = 1;
g_ = 1;
b_ = 1;
a_ = 1;
}

CVirtualControllerColor::~CVirtualControllerColor() {
  // @@protoc_insertion_point(destructor:CVirtualControllerColor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVirtualControllerColor::ArenaDtor(void* object) {
  CVirtualControllerColor* _this = reinterpret_cast< CVirtualControllerColor* >(object);
  (void)_this;
}
void CVirtualControllerColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerColor::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    r_ = 1;
    g_ = 1;
    b_ = 1;
    a_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float r = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float g = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float b = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float a = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float r = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // optional float g = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // optional float b = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // optional float a = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerColor)
  return target;
}

size_t CVirtualControllerColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float r = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float g = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float a = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerColor::GetClassData() const { return &_class_data_; }

void CVirtualControllerColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerColor *>(to)->MergeFrom(
      static_cast<const CVirtualControllerColor &>(from));
}


void CVirtualControllerColor::MergeFrom(const CVirtualControllerColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerColor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerColor::CopyFrom(const CVirtualControllerColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerColor::IsInitialized() const {
  return true;
}

void CVirtualControllerColor::InternalSwap(CVirtualControllerColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerColor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[1]);
}

// ===================================================================

class CVirtualControllerLayout::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerLayout>()._has_bits_);
  static void set_has_layout_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_actionset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CVirtualControllerColor& color(const CVirtualControllerLayout* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CVirtualControllerColor&
CVirtualControllerLayout::_Internal::color(const CVirtualControllerLayout* msg) {
  return *msg->color_;
}
CVirtualControllerLayout::CVirtualControllerLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerLayout)
}
CVirtualControllerLayout::CVirtualControllerLayout(const CVirtualControllerLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::CVirtualControllerColor(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&layout_version_, &from.layout_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionset_id_) -
    reinterpret_cast<char*>(&layout_version_)) + sizeof(actionset_id_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerLayout)
}

inline void CVirtualControllerLayout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actionset_id_) -
    reinterpret_cast<char*>(&color_)) + sizeof(actionset_id_));
}

CVirtualControllerLayout::~CVirtualControllerLayout() {
  // @@protoc_insertion_point(destructor:CVirtualControllerLayout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerLayout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void CVirtualControllerLayout::ArenaDtor(void* object) {
  CVirtualControllerLayout* _this = reinterpret_cast< CVirtualControllerLayout* >(object);
  (void)_this;
}
void CVirtualControllerLayout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerLayout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&layout_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&actionset_id_) -
        reinterpret_cast<char*>(&layout_version_)) + sizeof(actionset_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerLayout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 layout_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_layout_version(&has_bits);
          layout_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actionset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_actionset_id(&has_bits);
          actionset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVirtualControllerElement elements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CVirtualControllerColor color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerLayout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerLayout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layout_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layout_version(), target);
  }

  // optional int32 actionset_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionset_id(), target);
  }

  // repeated .CVirtualControllerElement elements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_elements(i), target, stream);
  }

  // optional .CVirtualControllerColor color = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerLayout)
  return target;
}

size_t CVirtualControllerLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerLayout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVirtualControllerElement elements = 4;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CVirtualControllerColor color = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional int32 layout_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_layout_version());
    }

    // optional int32 actionset_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actionset_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerLayout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerLayout::GetClassData() const { return &_class_data_; }

void CVirtualControllerLayout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerLayout *>(to)->MergeFrom(
      static_cast<const CVirtualControllerLayout &>(from));
}


void CVirtualControllerLayout::MergeFrom(const CVirtualControllerLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerLayout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::CVirtualControllerColor::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      layout_version_ = from.layout_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      actionset_id_ = from.actionset_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerLayout::CopyFrom(const CVirtualControllerLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayout::IsInitialized() const {
  return true;
}

void CVirtualControllerLayout::InternalSwap(CVirtualControllerLayout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerLayout, actionset_id_)
      + sizeof(CVirtualControllerLayout::actionset_id_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerLayout, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerLayout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[2]);
}

// ===================================================================

class CVirtualControllerLayouts::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerLayouts>()._has_bits_);
  static void set_has_input_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mouse_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trackpad_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pinch_zoom_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pinch_zoom_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pinch_zoom_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pinch_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shaken(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mouse_offscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CVirtualControllerLayouts::CVirtualControllerLayouts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layouts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerLayouts)
}
CVirtualControllerLayouts::CVirtualControllerLayouts(const CVirtualControllerLayouts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      layouts_(from.layouts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mouse_mode_, &from.mouse_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&trackpad_sensitivity_) -
    reinterpret_cast<char*>(&mouse_mode_)) + sizeof(trackpad_sensitivity_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerLayouts)
}

inline void CVirtualControllerLayouts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mouse_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mouse_offscreen_) -
    reinterpret_cast<char*>(&mouse_mode_)) + sizeof(mouse_offscreen_));
pinch_zoom_scale_ = 1;
input_mode_ = 2;
trackpad_sensitivity_ = 1;
}

CVirtualControllerLayouts::~CVirtualControllerLayouts() {
  // @@protoc_insertion_point(destructor:CVirtualControllerLayouts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerLayouts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVirtualControllerLayouts::ArenaDtor(void* object) {
  CVirtualControllerLayouts* _this = reinterpret_cast< CVirtualControllerLayouts* >(object);
  (void)_this;
}
void CVirtualControllerLayouts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerLayouts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerLayouts::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerLayouts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layouts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mouse_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mouse_offscreen_) -
        reinterpret_cast<char*>(&mouse_mode_)) + sizeof(mouse_offscreen_));
    pinch_zoom_scale_ = 1;
    input_mode_ = 2;
  }
  trackpad_sensitivity_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerLayouts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CVirtualControllerLayout layouts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layouts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EInputMode input_mode = 2 [default = k_EInputModeController];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EInputMode_IsValid(val))) {
            _internal_set_input_mode(static_cast<::EInputMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EMouseMode mouse_mode = 3 [default = k_EMouseModeUnknown];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMouseMode_IsValid(val))) {
            _internal_set_mouse_mode(static_cast<::EMouseMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float trackpad_sensitivity = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_trackpad_sensitivity(&has_bits);
          trackpad_sensitivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool pinch_zoom_enabled = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pinch_zoom_enabled(&has_bits);
          pinch_zoom_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pinch_zoom_x = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_pinch_zoom_x(&has_bits);
          pinch_zoom_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pinch_zoom_y = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pinch_zoom_y(&has_bits);
          pinch_zoom_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pinch_zoom_scale = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_pinch_zoom_scale(&has_bits);
          pinch_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool shaken = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_shaken(&has_bits);
          shaken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mouse_offscreen = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mouse_offscreen(&has_bits);
          mouse_offscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerLayouts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerLayouts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CVirtualControllerLayout layouts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layouts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layouts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .EInputMode input_mode = 2 [default = k_EInputModeController];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_input_mode(), target);
  }

  // optional .EMouseMode mouse_mode = 3 [default = k_EMouseModeUnknown];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mouse_mode(), target);
  }

  // optional float trackpad_sensitivity = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_trackpad_sensitivity(), target);
  }

  // optional bool pinch_zoom_enabled = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pinch_zoom_enabled(), target);
  }

  // optional float pinch_zoom_x = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pinch_zoom_x(), target);
  }

  // optional float pinch_zoom_y = 7 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pinch_zoom_y(), target);
  }

  // optional float pinch_zoom_scale = 8 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_pinch_zoom_scale(), target);
  }

  // optional bool shaken = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_shaken(), target);
  }

  // optional bool mouse_offscreen = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_mouse_offscreen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerLayouts)
  return target;
}

size_t CVirtualControllerLayouts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerLayouts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVirtualControllerLayout layouts = 1;
  total_size += 1UL * this->_internal_layouts_size();
  for (const auto& msg : this->layouts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .EMouseMode mouse_mode = 3 [default = k_EMouseModeUnknown];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mouse_mode());
    }

    // optional float pinch_zoom_x = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pinch_zoom_y = 7 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool pinch_zoom_enabled = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool shaken = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool mouse_offscreen = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float pinch_zoom_scale = 8 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional .EInputMode input_mode = 2 [default = k_EInputModeController];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_mode());
    }

  }
  // optional float trackpad_sensitivity = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerLayouts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerLayouts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerLayouts::GetClassData() const { return &_class_data_; }

void CVirtualControllerLayouts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerLayouts *>(to)->MergeFrom(
      static_cast<const CVirtualControllerLayouts &>(from));
}


void CVirtualControllerLayouts::MergeFrom(const CVirtualControllerLayouts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerLayouts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layouts_.MergeFrom(from.layouts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mouse_mode_ = from.mouse_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      pinch_zoom_x_ = from.pinch_zoom_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pinch_zoom_y_ = from.pinch_zoom_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      pinch_zoom_enabled_ = from.pinch_zoom_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      shaken_ = from.shaken_;
    }
    if (cached_has_bits & 0x00000020u) {
      mouse_offscreen_ = from.mouse_offscreen_;
    }
    if (cached_has_bits & 0x00000040u) {
      pinch_zoom_scale_ = from.pinch_zoom_scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_mode_ = from.input_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_trackpad_sensitivity(from._internal_trackpad_sensitivity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerLayouts::CopyFrom(const CVirtualControllerLayouts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerLayouts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayouts::IsInitialized() const {
  return true;
}

void CVirtualControllerLayouts::InternalSwap(CVirtualControllerLayouts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layouts_.InternalSwap(&other->layouts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerLayouts, mouse_offscreen_)
      + sizeof(CVirtualControllerLayouts::mouse_offscreen_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerLayouts, mouse_mode_)>(
          reinterpret_cast<char*>(&mouse_mode_),
          reinterpret_cast<char*>(&other->mouse_mode_));
  swap(pinch_zoom_scale_, other->pinch_zoom_scale_);
  swap(input_mode_, other->input_mode_);
  swap(trackpad_sensitivity_, other->trackpad_sensitivity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerLayouts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[3]);
}

// ===================================================================

class CVirtualControllerConfig_Control::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerConfig_Control>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_input_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_element(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_gamepad(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_output_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_mouse(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_icon_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_background(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_toggle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_input_activate_stick_or_trackpad(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_activation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_long_press_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_double_press_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CVirtualControllerConfig_Control::CVirtualControllerConfig_Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerConfig.Control)
}
CVirtualControllerConfig_Control::CVirtualControllerConfig_Control(const CVirtualControllerConfig_Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  icon_foreground_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_foreground_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_foreground()) {
    icon_foreground_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_foreground(), 
      GetArenaForAllocation());
  }
  icon_background_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_background_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_background()) {
    icon_background_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_background(), 
      GetArenaForAllocation());
  }
  ::memcpy(&input_source_, &from.input_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&double_press_ms_) -
    reinterpret_cast<char*>(&input_source_)) + sizeof(double_press_ms_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerConfig.Control)
}

inline void CVirtualControllerConfig_Control::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_foreground_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_foreground_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_background_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_background_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&double_press_ms_) -
    reinterpret_cast<char*>(&input_source_)) + sizeof(double_press_ms_));
}

CVirtualControllerConfig_Control::~CVirtualControllerConfig_Control() {
  // @@protoc_insertion_point(destructor:CVirtualControllerConfig.Control)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerConfig_Control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_foreground_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_background_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig_Control::ArenaDtor(void* object) {
  CVirtualControllerConfig_Control* _this = reinterpret_cast< CVirtualControllerConfig_Control* >(object);
  (void)_this;
}
void CVirtualControllerConfig_Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerConfig_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerConfig_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerConfig.Control)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_foreground_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_background_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&input_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_gamepad_) -
        reinterpret_cast<char*>(&input_source_)) + sizeof(output_gamepad_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&output_keyboard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&double_press_ms_) -
        reinterpret_cast<char*>(&output_keyboard_)) + sizeof(double_press_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerConfig_Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.Control.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.Control.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_input_source(&has_bits);
          input_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_input_mode(&has_bits);
          input_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_element = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_input_element(&has_bits);
          input_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_gamepad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_output_gamepad(&has_bits);
          output_gamepad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_keyboard = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_output_keyboard(&has_bits);
          output_keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output_mouse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_output_mouse(&has_bits);
          output_mouse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_foreground = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_icon_foreground();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.Control.icon_foreground");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_background = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_icon_background();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.Control.icon_background");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_toggle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_input_toggle(&has_bits);
          input_toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 input_activate_stick_or_trackpad = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_input_activate_stick_or_trackpad(&has_bits);
          input_activate_stick_or_trackpad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 activation_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_activation_type(&has_bits);
          activation_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 long_press_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_long_press_ms(&has_bits);
          long_press_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 double_press_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_double_press_ms(&has_bits);
          double_press_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerConfig_Control::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerConfig.Control)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.Control.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.Control.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // optional int32 input_source = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_input_source(), target);
  }

  // optional int32 input_mode = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_mode(), target);
  }

  // optional int32 input_element = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_input_element(), target);
  }

  // optional int32 output_gamepad = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_output_gamepad(), target);
  }

  // optional int32 output_keyboard = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_output_keyboard(), target);
  }

  // optional int32 output_mouse = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_output_mouse(), target);
  }

  // optional string icon_foreground = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_foreground().data(), static_cast<int>(this->_internal_icon_foreground().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.Control.icon_foreground");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_icon_foreground(), target);
  }

  // optional string icon_background = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_background().data(), static_cast<int>(this->_internal_icon_background().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.Control.icon_background");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_icon_background(), target);
  }

  // optional bool input_toggle = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_input_toggle(), target);
  }

  // optional int32 input_activate_stick_or_trackpad = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_input_activate_stick_or_trackpad(), target);
  }

  // optional int32 activation_type = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_activation_type(), target);
  }

  // optional int32 long_press_ms = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_long_press_ms(), target);
  }

  // optional int32 double_press_ms = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_double_press_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerConfig.Control)
  return target;
}

size_t CVirtualControllerConfig_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerConfig.Control)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string icon_foreground = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_foreground());
    }

    // optional string icon_background = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_background());
    }

    // optional int32 input_source = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input_source());
    }

    // optional int32 input_mode = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input_mode());
    }

    // optional int32 input_element = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input_element());
    }

    // optional int32 output_gamepad = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_output_gamepad());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 output_keyboard = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_output_keyboard());
    }

    // optional int32 output_mouse = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_output_mouse());
    }

    // optional bool input_toggle = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 input_activate_stick_or_trackpad = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input_activate_stick_or_trackpad());
    }

    // optional int32 activation_type = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_activation_type());
    }

    // optional int32 long_press_ms = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_long_press_ms());
    }

    // optional int32 double_press_ms = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_double_press_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerConfig_Control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerConfig_Control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerConfig_Control::GetClassData() const { return &_class_data_; }

void CVirtualControllerConfig_Control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerConfig_Control *>(to)->MergeFrom(
      static_cast<const CVirtualControllerConfig_Control &>(from));
}


void CVirtualControllerConfig_Control::MergeFrom(const CVirtualControllerConfig_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerConfig.Control)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon_foreground(from._internal_icon_foreground());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon_background(from._internal_icon_background());
    }
    if (cached_has_bits & 0x00000010u) {
      input_source_ = from.input_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_mode_ = from.input_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_element_ = from.input_element_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_gamepad_ = from.output_gamepad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      output_keyboard_ = from.output_keyboard_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_mouse_ = from.output_mouse_;
    }
    if (cached_has_bits & 0x00000400u) {
      input_toggle_ = from.input_toggle_;
    }
    if (cached_has_bits & 0x00000800u) {
      input_activate_stick_or_trackpad_ = from.input_activate_stick_or_trackpad_;
    }
    if (cached_has_bits & 0x00001000u) {
      activation_type_ = from.activation_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      long_press_ms_ = from.long_press_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      double_press_ms_ = from.double_press_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerConfig_Control::CopyFrom(const CVirtualControllerConfig_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerConfig.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig_Control::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig_Control::InternalSwap(CVirtualControllerConfig_Control* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_foreground_, lhs_arena,
      &other->icon_foreground_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_background_, lhs_arena,
      &other->icon_background_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerConfig_Control, double_press_ms_)
      + sizeof(CVirtualControllerConfig_Control::double_press_ms_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerConfig_Control, input_source_)>(
          reinterpret_cast<char*>(&input_source_),
          reinterpret_cast<char*>(&other->input_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerConfig_Control::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[4]);
}

// ===================================================================

class CVirtualControllerConfig_ActionSet::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerConfig_ActionSet>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVirtualControllerConfig_ActionSet::CVirtualControllerConfig_ActionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controls_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerConfig.ActionSet)
}
CVirtualControllerConfig_ActionSet::CVirtualControllerConfig_ActionSet(const CVirtualControllerConfig_ActionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerConfig.ActionSet)
}

inline void CVirtualControllerConfig_ActionSet::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
}

CVirtualControllerConfig_ActionSet::~CVirtualControllerConfig_ActionSet() {
  // @@protoc_insertion_point(destructor:CVirtualControllerConfig.ActionSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerConfig_ActionSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig_ActionSet::ArenaDtor(void* object) {
  CVirtualControllerConfig_ActionSet* _this = reinterpret_cast< CVirtualControllerConfig_ActionSet* >(object);
  (void)_this;
}
void CVirtualControllerConfig_ActionSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerConfig_ActionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerConfig_ActionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerConfig.ActionSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(parent_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerConfig_ActionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.ActionSet.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVirtualControllerConfig.Control controls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerConfig_ActionSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerConfig.ActionSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int32 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.ActionSet.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .CVirtualControllerConfig.Control controls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_controls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerConfig.ActionSet)
  return target;
}

size_t CVirtualControllerConfig_ActionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerConfig.ActionSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVirtualControllerConfig.Control controls = 4;
  total_size += 1UL * this->_internal_controls_size();
  for (const auto& msg : this->controls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 parent_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_parent_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerConfig_ActionSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerConfig_ActionSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerConfig_ActionSet::GetClassData() const { return &_class_data_; }

void CVirtualControllerConfig_ActionSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerConfig_ActionSet *>(to)->MergeFrom(
      static_cast<const CVirtualControllerConfig_ActionSet &>(from));
}


void CVirtualControllerConfig_ActionSet::MergeFrom(const CVirtualControllerConfig_ActionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerConfig.ActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_id_ = from.parent_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerConfig_ActionSet::CopyFrom(const CVirtualControllerConfig_ActionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerConfig.ActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig_ActionSet::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig_ActionSet::InternalSwap(CVirtualControllerConfig_ActionSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controls_.InternalSwap(&other->controls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerConfig_ActionSet, parent_id_)
      + sizeof(CVirtualControllerConfig_ActionSet::parent_id_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerConfig_ActionSet, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerConfig_ActionSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[5]);
}

// ===================================================================

class CVirtualControllerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_mouse_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVirtualControllerConfig::CVirtualControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actionsets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerConfig)
}
CVirtualControllerConfig::CVirtualControllerConfig(const CVirtualControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      actionsets_(from.actionsets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  default_mouse_mode_ = from.default_mouse_mode_;
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerConfig)
}

inline void CVirtualControllerConfig::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_mouse_mode_ = 2;
}

CVirtualControllerConfig::~CVirtualControllerConfig() {
  // @@protoc_insertion_point(destructor:CVirtualControllerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CVirtualControllerConfig::ArenaDtor(void* object) {
  CVirtualControllerConfig* _this = reinterpret_cast< CVirtualControllerConfig* >(object);
  (void)_this;
}
void CVirtualControllerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionsets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    default_mouse_mode_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CVirtualControllerConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EMouseMode default_mouse_mode = 3 [default = k_EMouseModeAbsoluteCursor];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMouseMode_IsValid(val))) {
            _internal_set_default_mouse_mode(static_cast<::EMouseMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVirtualControllerConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actionsets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actionsets(i), target, stream);
  }

  // optional .EMouseMode default_mouse_mode = 3 [default = k_EMouseModeAbsoluteCursor];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_default_mouse_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerConfig)
  return target;
}

size_t CVirtualControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVirtualControllerConfig.ActionSet actionsets = 2;
  total_size += 1UL * this->_internal_actionsets_size();
  for (const auto& msg : this->actionsets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .EMouseMode default_mouse_mode = 3 [default = k_EMouseModeAbsoluteCursor];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_mouse_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerConfig::GetClassData() const { return &_class_data_; }

void CVirtualControllerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerConfig *>(to)->MergeFrom(
      static_cast<const CVirtualControllerConfig &>(from));
}


void CVirtualControllerConfig::MergeFrom(const CVirtualControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actionsets_.MergeFrom(from.actionsets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      default_mouse_mode_ = from.default_mouse_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerConfig::CopyFrom(const CVirtualControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerConfig::IsInitialized() const {
  return true;
}

void CVirtualControllerConfig::InternalSwap(CVirtualControllerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actionsets_.InternalSwap(&other->actionsets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(default_mouse_mode_, other->default_mouse_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[6]);
}

// ===================================================================

class CVirtualControllerLayoutPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerLayoutPackage>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_saved_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CVirtualControllerConfig& config(const CVirtualControllerLayoutPackage* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CVirtualControllerLayouts& layouts(const CVirtualControllerLayoutPackage* msg);
  static void set_has_layouts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CVirtualControllerConfig&
CVirtualControllerLayoutPackage::_Internal::config(const CVirtualControllerLayoutPackage* msg) {
  return *msg->config_;
}
const ::CVirtualControllerLayouts&
CVirtualControllerLayoutPackage::_Internal::layouts(const CVirtualControllerLayoutPackage* msg) {
  return *msg->layouts_;
}
CVirtualControllerLayoutPackage::CVirtualControllerLayoutPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerLayoutPackage)
}
CVirtualControllerLayoutPackage::CVirtualControllerLayoutPackage(const CVirtualControllerLayoutPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::CVirtualControllerConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_layouts()) {
    layouts_ = new ::CVirtualControllerLayouts(*from.layouts_);
  } else {
    layouts_ = nullptr;
  }
  ::memcpy(&creator_, &from.creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_revision_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(saved_revision_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerLayoutPackage)
}

inline void CVirtualControllerLayoutPackage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saved_revision_) -
    reinterpret_cast<char*>(&config_)) + sizeof(saved_revision_));
}

CVirtualControllerLayoutPackage::~CVirtualControllerLayoutPackage() {
  // @@protoc_insertion_point(destructor:CVirtualControllerLayoutPackage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerLayoutPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete layouts_;
}

void CVirtualControllerLayoutPackage::ArenaDtor(void* object) {
  CVirtualControllerLayoutPackage* _this = reinterpret_cast< CVirtualControllerLayoutPackage* >(object);
  (void)_this;
}
void CVirtualControllerLayoutPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerLayoutPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerLayoutPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerLayoutPackage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layouts_ != nullptr);
      layouts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saved_revision_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(saved_revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerLayoutPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_creator(&has_bits);
          creator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 initial_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_initial_revision(&has_bits);
          initial_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 saved_revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_saved_revision(&has_bits);
          saved_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CVirtualControllerConfig config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CVirtualControllerLayouts layouts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_layouts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerLayoutPackage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerLayoutPackage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 creator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_creator(), target);
  }

  // optional uint32 initial_revision = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initial_revision(), target);
  }

  // optional uint32 saved_revision = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_saved_revision(), target);
  }

  // optional .CVirtualControllerConfig config = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::config(this), target, stream);
  }

  // optional .CVirtualControllerLayouts layouts = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::layouts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerLayoutPackage)
  return target;
}

size_t CVirtualControllerLayoutPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerLayoutPackage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CVirtualControllerConfig config = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .CVirtualControllerLayouts layouts = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layouts_);
    }

    // optional uint64 creator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_creator());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 initial_revision = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_initial_revision());
    }

    // optional uint32 saved_revision = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_saved_revision());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerLayoutPackage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerLayoutPackage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerLayoutPackage::GetClassData() const { return &_class_data_; }

void CVirtualControllerLayoutPackage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerLayoutPackage *>(to)->MergeFrom(
      static_cast<const CVirtualControllerLayoutPackage &>(from));
}


void CVirtualControllerLayoutPackage::MergeFrom(const CVirtualControllerLayoutPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerLayoutPackage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_config()->::CVirtualControllerConfig::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layouts()->::CVirtualControllerLayouts::MergeFrom(from._internal_layouts());
    }
    if (cached_has_bits & 0x00000004u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_revision_ = from.initial_revision_;
    }
    if (cached_has_bits & 0x00000020u) {
      saved_revision_ = from.saved_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerLayoutPackage::CopyFrom(const CVirtualControllerLayoutPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerLayoutPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerLayoutPackage::IsInitialized() const {
  return true;
}

void CVirtualControllerLayoutPackage::InternalSwap(CVirtualControllerLayoutPackage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerLayoutPackage, saved_revision_)
      + sizeof(CVirtualControllerLayoutPackage::saved_revision_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerLayoutPackage, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerLayoutPackage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[7]);
}

// ===================================================================

class CVirtualControllerGlobalConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CVirtualControllerGlobalConfig>()._has_bits_);
  static void set_has_feedback_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gyroscope_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auto_fade_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rumble_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shake_fade_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CVirtualControllerGlobalConfig::CVirtualControllerGlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CVirtualControllerGlobalConfig)
}
CVirtualControllerGlobalConfig::CVirtualControllerGlobalConfig(const CVirtualControllerGlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&feedback_enabled_, &from.feedback_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rumble_enabled_) -
    reinterpret_cast<char*>(&feedback_enabled_)) + sizeof(rumble_enabled_));
  // @@protoc_insertion_point(copy_constructor:CVirtualControllerGlobalConfig)
}

inline void CVirtualControllerGlobalConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feedback_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shake_fade_enabled_) -
    reinterpret_cast<char*>(&feedback_enabled_)) + sizeof(shake_fade_enabled_));
gyroscope_enabled_ = true;
auto_fade_enabled_ = true;
rumble_enabled_ = true;
}

CVirtualControllerGlobalConfig::~CVirtualControllerGlobalConfig() {
  // @@protoc_insertion_point(destructor:CVirtualControllerGlobalConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CVirtualControllerGlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CVirtualControllerGlobalConfig::ArenaDtor(void* object) {
  CVirtualControllerGlobalConfig* _this = reinterpret_cast< CVirtualControllerGlobalConfig* >(object);
  (void)_this;
}
void CVirtualControllerGlobalConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CVirtualControllerGlobalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CVirtualControllerGlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CVirtualControllerGlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feedback_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shake_fade_enabled_) -
      reinterpret_cast<char*>(&feedback_enabled_)) + sizeof(shake_fade_enabled_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    gyroscope_enabled_ = true;
    auto_fade_enabled_ = true;
    rumble_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVirtualControllerGlobalConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool feedback_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_feedback_enabled(&has_bits);
          feedback_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gyroscope_enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gyroscope_enabled(&has_bits);
          gyroscope_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_fade_enabled = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_auto_fade_enabled(&has_bits);
          auto_fade_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rumble_enabled = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rumble_enabled(&has_bits);
          rumble_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shake_fade_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shake_fade_enabled(&has_bits);
          shake_fade_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVirtualControllerGlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVirtualControllerGlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool feedback_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_feedback_enabled(), target);
  }

  // optional bool gyroscope_enabled = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_gyroscope_enabled(), target);
  }

  // optional bool auto_fade_enabled = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_auto_fade_enabled(), target);
  }

  // optional bool rumble_enabled = 4 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rumble_enabled(), target);
  }

  // optional bool shake_fade_enabled = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_shake_fade_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVirtualControllerGlobalConfig)
  return target;
}

size_t CVirtualControllerGlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVirtualControllerGlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool feedback_enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool shake_fade_enabled = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool gyroscope_enabled = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool auto_fade_enabled = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rumble_enabled = 4 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVirtualControllerGlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CVirtualControllerGlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVirtualControllerGlobalConfig::GetClassData() const { return &_class_data_; }

void CVirtualControllerGlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CVirtualControllerGlobalConfig *>(to)->MergeFrom(
      static_cast<const CVirtualControllerGlobalConfig &>(from));
}


void CVirtualControllerGlobalConfig::MergeFrom(const CVirtualControllerGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CVirtualControllerGlobalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      feedback_enabled_ = from.feedback_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      shake_fade_enabled_ = from.shake_fade_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      gyroscope_enabled_ = from.gyroscope_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      auto_fade_enabled_ = from.auto_fade_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      rumble_enabled_ = from.rumble_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVirtualControllerGlobalConfig::CopyFrom(const CVirtualControllerGlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVirtualControllerGlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVirtualControllerGlobalConfig::IsInitialized() const {
  return true;
}

void CVirtualControllerGlobalConfig::InternalSwap(CVirtualControllerGlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVirtualControllerGlobalConfig, shake_fade_enabled_)
      + sizeof(CVirtualControllerGlobalConfig::shake_fade_enabled_)
      - PROTOBUF_FIELD_OFFSET(CVirtualControllerGlobalConfig, feedback_enabled_)>(
          reinterpret_cast<char*>(&feedback_enabled_),
          reinterpret_cast<char*>(&other->feedback_enabled_));
  swap(gyroscope_enabled_, other->gyroscope_enabled_);
  swap(auto_fade_enabled_, other->auto_fade_enabled_);
  swap(rumble_enabled_, other->rumble_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CVirtualControllerGlobalConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fvirtualcontroller_2eproto_getter, &descriptor_table_steammessages_5fvirtualcontroller_2eproto_once,
      file_level_metadata_steammessages_5fvirtualcontroller_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CVirtualControllerElement* Arena::CreateMaybeMessage< ::CVirtualControllerElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerElement >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerColor* Arena::CreateMaybeMessage< ::CVirtualControllerColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerColor >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerLayout* Arena::CreateMaybeMessage< ::CVirtualControllerLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerLayouts* Arena::CreateMaybeMessage< ::CVirtualControllerLayouts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerLayouts >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerConfig_Control* Arena::CreateMaybeMessage< ::CVirtualControllerConfig_Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerConfig_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerConfig_ActionSet* Arena::CreateMaybeMessage< ::CVirtualControllerConfig_ActionSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerConfig_ActionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerConfig* Arena::CreateMaybeMessage< ::CVirtualControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerLayoutPackage* Arena::CreateMaybeMessage< ::CVirtualControllerLayoutPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerLayoutPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::CVirtualControllerGlobalConfig* Arena::CreateMaybeMessage< ::CVirtualControllerGlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVirtualControllerGlobalConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
