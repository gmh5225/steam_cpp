// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient.proto

#include "steammessages_remoteclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgRemoteClientStatus::CMsgRemoteClientStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , client_id_(uint64_t{0u})
  , instance_id_(uint64_t{0u}){}
struct CMsgRemoteClientStatusDefaultTypeInternal {
  constexpr CMsgRemoteClientStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientStatusDefaultTypeInternal() {}
  union {
    CMsgRemoteClientStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientStatusDefaultTypeInternal _CMsgRemoteClientStatus_default_instance_;
constexpr CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_to_download_(uint64_t{0u})
  , bytes_downloaded_(uint64_t{0u})
  , bytes_to_process_(uint64_t{0u})
  , time_update_start_(0u)
  , update_result_(0)
  , bytes_processed_(uint64_t{0u})
  , update_state_(0u)
  , estimated_seconds_remaining_(-1){}
struct CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal {
  constexpr CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal() {}
  union {
    CMsgRemoteClientAppStatus_AppUpdateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_;
constexpr CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : categories_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal {
  constexpr CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal() {}
  union {
    CMsgRemoteClientAppStatus_ShortcutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_;
constexpr CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_info_(nullptr)
  , shortcut_info_(nullptr)
  , app_id_(0u)
  , app_state_(0u)
  , launch_available_(true){}
struct CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal {
  constexpr CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal() {}
  union {
    CMsgRemoteClientAppStatus_AppStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal _CMsgRemoteClientAppStatus_AppStatus_default_instance_;
constexpr CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_updates_(){}
struct CMsgRemoteClientAppStatusDefaultTypeInternal {
  constexpr CMsgRemoteClientAppStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientAppStatusDefaultTypeInternal() {}
  union {
    CMsgRemoteClientAppStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientAppStatusDefaultTypeInternal _CMsgRemoteClientAppStatus_default_instance_;
constexpr CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_type_(0u)
  , controller_subtype_(0u){}
struct CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal {
  constexpr CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal() {}
  union {
    CMsgRemoteClientStartStream_ReservedGamepad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_;
constexpr CMsgRemoteClientStartStream::CMsgRemoteClientStartStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gamepads_()
  , supported_transport_()
  , unlock_parental_lock_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , environment_(0)
  , gamepad_count_(0)
  , lock_parental_lock_(false)
  , maximum_resolution_x_(0)
  , maximum_resolution_y_(0)
  , launch_option_(-1)
  , audio_channel_count_(2){}
struct CMsgRemoteClientStartStreamDefaultTypeInternal {
  constexpr CMsgRemoteClientStartStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientStartStreamDefaultTypeInternal() {}
  union {
    CMsgRemoteClientStartStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientStartStreamDefaultTypeInternal _CMsgRemoteClientStartStream_default_instance_;
constexpr CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : launch_options_()
  , auth_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , relay_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , launch_task_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , launch_task_detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_port_(0u)
  , launch_tasks_done_(0)
  , launch_tasks_total_(0)
  , e_launch_result_(2)
  , transport_(1)
{}
struct CMsgRemoteClientStartStreamResponseDefaultTypeInternal {
  constexpr CMsgRemoteClientStartStreamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientStartStreamResponseDefaultTypeInternal() {}
  union {
    CMsgRemoteClientStartStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientStartStreamResponseDefaultTypeInternal _CMsgRemoteClientStartStreamResponse_default_instance_;
constexpr CMsgRemoteClientPing::CMsgRemoteClientPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRemoteClientPingDefaultTypeInternal {
  constexpr CMsgRemoteClientPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientPingDefaultTypeInternal() {}
  union {
    CMsgRemoteClientPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientPingDefaultTypeInternal _CMsgRemoteClientPing_default_instance_;
constexpr CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRemoteClientPingResponseDefaultTypeInternal {
  constexpr CMsgRemoteClientPingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientPingResponseDefaultTypeInternal() {}
  union {
    CMsgRemoteClientPingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientPingResponseDefaultTypeInternal _CMsgRemoteClientPingResponse_default_instance_;
constexpr CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_()
  , eula_id_()
  , eula_version_(){}
struct CMsgRemoteClientAcceptEULADefaultTypeInternal {
  constexpr CMsgRemoteClientAcceptEULADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientAcceptEULADefaultTypeInternal() {}
  union {
    CMsgRemoteClientAcceptEULA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientAcceptEULADefaultTypeInternal _CMsgRemoteClientAcceptEULA_default_instance_;
constexpr CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , controller_index_(0u){}
struct CMsgRemoteClientGetControllerConfigDefaultTypeInternal {
  constexpr CMsgRemoteClientGetControllerConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientGetControllerConfigDefaultTypeInternal() {}
  union {
    CMsgRemoteClientGetControllerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientGetControllerConfigDefaultTypeInternal _CMsgRemoteClientGetControllerConfig_default_instance_;
constexpr CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_vdf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2){}
struct CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal {
  constexpr CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal() {}
  union {
    CMsgRemoteClientGetControllerConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal _CMsgRemoteClientGetControllerConfigResponse_default_instance_;
constexpr CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct CMsgRemoteClientStreamingEnabledDefaultTypeInternal {
  constexpr CMsgRemoteClientStreamingEnabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRemoteClientStreamingEnabledDefaultTypeInternal() {}
  union {
    CMsgRemoteClientStreamingEnabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRemoteClientStreamingEnabledDefaultTypeInternal _CMsgRemoteClientStreamingEnabled_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fremoteclient_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fremoteclient_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fremoteclient_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fremoteclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStatus, client_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStatus, instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStatus, status_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, time_update_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_download_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_process_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_processed_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, estimated_seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, update_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppUpdateInfo, update_state_),
  3,
  0,
  1,
  2,
  5,
  7,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, categories_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_ShortcutInfo, exepath_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, app_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, update_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, shortcut_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus_AppStatus, launch_available_),
  2,
  3,
  0,
  1,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAppStatus, status_updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream_ReservedGamepad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream_ReservedGamepad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream_ReservedGamepad, controller_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream_ReservedGamepad, controller_subtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, environment_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, gamepad_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, launch_option_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, lock_parental_lock_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, unlock_parental_lock_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, maximum_resolution_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, maximum_resolution_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, gamepads_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, audio_channel_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStream, supported_transport_),
  1,
  2,
  3,
  7,
  4,
  0,
  5,
  6,
  ~0u,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, e_launch_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, stream_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, launch_options_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, auth_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, transport_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, relay_server_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, launch_task_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, launch_task_detail_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, launch_tasks_done_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStartStreamResponse, launch_tasks_total_),
  7,
  4,
  ~0u,
  0,
  8,
  1,
  2,
  3,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAcceptEULA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAcceptEULA, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAcceptEULA, eula_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientAcceptEULA, eula_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfig, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfig, controller_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfigResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfigResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientGetControllerConfigResponse, config_vdf_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStreamingEnabled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStreamingEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoteClientStreamingEnabled, enabled_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgRemoteClientStatus)},
  { 12, 26, -1, sizeof(::CMsgRemoteClientAppStatus_AppUpdateInfo)},
  { 34, 44, -1, sizeof(::CMsgRemoteClientAppStatus_ShortcutInfo)},
  { 48, 59, -1, sizeof(::CMsgRemoteClientAppStatus_AppStatus)},
  { 64, -1, -1, sizeof(::CMsgRemoteClientAppStatus)},
  { 71, 79, -1, sizeof(::CMsgRemoteClientStartStream_ReservedGamepad)},
  { 81, 98, -1, sizeof(::CMsgRemoteClientStartStream)},
  { 109, 125, -1, sizeof(::CMsgRemoteClientStartStreamResponse)},
  { 135, -1, -1, sizeof(::CMsgRemoteClientPing)},
  { 141, -1, -1, sizeof(::CMsgRemoteClientPingResponse)},
  { 147, -1, -1, sizeof(::CMsgRemoteClientAcceptEULA)},
  { 156, 164, -1, sizeof(::CMsgRemoteClientGetControllerConfig)},
  { 166, 174, -1, sizeof(::CMsgRemoteClientGetControllerConfigResponse)},
  { 176, 183, -1, sizeof(::CMsgRemoteClientStreamingEnabled)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientAppStatus_AppStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientAppStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientStartStream_ReservedGamepad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientStartStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientStartStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientPingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientAcceptEULA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientGetControllerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientGetControllerConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRemoteClientStreamingEnabled_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fremoteclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n steammessages_remoteclient.proto\032\030stea"
  "mmessages_base.proto\032*steammessages_remo"
  "teclient_discovery.proto\"r\n\026CMsgRemoteCl"
  "ientStatus\022\021\n\tclient_id\030\001 \001(\004\022\023\n\013instanc"
  "e_id\030\002 \001(\004\0220\n\006status\030\003 \001(\0132 .CMsgRemoteC"
  "lientBroadcastStatus\"\345\004\n\031CMsgRemoteClien"
  "tAppStatus\022<\n\016status_updates\030\001 \003(\0132$.CMs"
  "gRemoteClientAppStatus.AppStatus\032\350\001\n\rApp"
  "UpdateInfo\022\031\n\021time_update_start\030\001 \001(\007\022\031\n"
  "\021bytes_to_download\030\002 \001(\004\022\030\n\020bytes_downlo"
  "aded\030\003 \001(\004\022\030\n\020bytes_to_process\030\004 \001(\004\022\027\n\017"
  "bytes_processed\030\005 \001(\004\022\'\n\033estimated_secon"
  "ds_remaining\030\006 \001(\005:\002-1\022\025\n\rupdate_result\030"
  "\007 \001(\005\022\024\n\014update_state\030\010 \001(\r\032O\n\014ShortcutI"
  "nfo\022\014\n\004name\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\022\022\n\ncateg"
  "ories\030\003 \003(\t\022\017\n\007exepath\030\004 \001(\t\032\315\001\n\tAppStat"
  "us\022\016\n\006app_id\030\001 \001(\r\022\021\n\tapp_state\030\002 \001(\r\022=\n"
  "\013update_info\030\003 \001(\0132(.CMsgRemoteClientApp"
  "Status.AppUpdateInfo\022>\n\rshortcut_info\030\004 "
  "\001(\0132\'.CMsgRemoteClientAppStatus.Shortcut"
  "Info\022\036\n\020launch_available\030\005 \001(\010:\004true\"\311\003\n"
  "\033CMsgRemoteClientStartStream\022\016\n\006app_id\030\001"
  " \001(\r\022\023\n\013environment\030\002 \001(\005\022\025\n\rgamepad_cou"
  "nt\030\003 \001(\005\022\031\n\rlaunch_option\030\004 \001(\005:\002-1\022!\n\022l"
  "ock_parental_lock\030\005 \001(\010:\005false\022\034\n\024unlock"
  "_parental_lock\030\006 \001(\t\022\034\n\024maximum_resoluti"
  "on_x\030\007 \001(\005\022\034\n\024maximum_resolution_y\030\010 \001(\005"
  "\022>\n\010gamepads\030\t \003(\0132,.CMsgRemoteClientSta"
  "rtStream.ReservedGamepad\022\036\n\023audio_channe"
  "l_count\030\n \001(\005:\0012\022.\n\023supported_transport\030"
  "\013 \003(\0162\021.EStreamTransport\032F\n\017ReservedGame"
  "pad\022\027\n\017controller_type\030\001 \001(\r\022\032\n\022controll"
  "er_subtype\030\002 \001(\r\"\275\002\n#CMsgRemoteClientSta"
  "rtStreamResponse\022\032\n\017e_launch_result\030\001 \001("
  "\005:\0012\022\023\n\013stream_port\030\002 \001(\r\022\026\n\016launch_opti"
  "ons\030\003 \003(\005\022\022\n\nauth_token\030\004 \001(\014\022;\n\ttranspo"
  "rt\030\005 \001(\0162\021.EStreamTransport:\025k_EStreamTr"
  "ansportUDP\022\024\n\014relay_server\030\006 \001(\t\022\023\n\013laun"
  "ch_task\030\007 \001(\t\022\032\n\022launch_task_detail\030\010 \001("
  "\t\022\031\n\021launch_tasks_done\030\t \001(\005\022\032\n\022launch_t"
  "asks_total\030\n \001(\005\"\026\n\024CMsgRemoteClientPing"
  "\"\036\n\034CMsgRemoteClientPingResponse\"S\n\032CMsg"
  "RemoteClientAcceptEULA\022\016\n\006app_id\030\001 \003(\r\022\017"
  "\n\007eula_id\030\002 \003(\t\022\024\n\014eula_version\030\003 \003(\r\"O\n"
  "#CMsgRemoteClientGetControllerConfig\022\016\n\006"
  "app_id\030\001 \001(\r\022\030\n\020controller_index\030\003 \001(\r\"U"
  "\n+CMsgRemoteClientGetControllerConfigRes"
  "ponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\022\n\nconfig_vdf\030"
  "\002 \001(\014\"3\n CMsgRemoteClientStreamingEnable"
  "d\022\017\n\007enabled\030\001 \002(\010B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fremoteclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5fremoteclient_5fdiscovery_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fremoteclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_2eproto = {
  false, false, 1985, descriptor_table_protodef_steammessages_5fremoteclient_2eproto, "steammessages_remoteclient.proto", 
  &descriptor_table_steammessages_5fremoteclient_2eproto_once, descriptor_table_steammessages_5fremoteclient_2eproto_deps, 2, 14,
  schemas, file_default_instances, TableStruct_steammessages_5fremoteclient_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_2eproto, file_level_enum_descriptors_steammessages_5fremoteclient_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fremoteclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fremoteclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fremoteclient_2eproto(&descriptor_table_steammessages_5fremoteclient_2eproto);

// ===================================================================

class CMsgRemoteClientStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientStatus>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgRemoteClientBroadcastStatus& status(const CMsgRemoteClientStatus* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgRemoteClientBroadcastStatus&
CMsgRemoteClientStatus::_Internal::status(const CMsgRemoteClientStatus* msg) {
  return *msg->status_;
}
void CMsgRemoteClientStatus::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgRemoteClientStatus::CMsgRemoteClientStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientStatus)
}
CMsgRemoteClientStatus::CMsgRemoteClientStatus(const CMsgRemoteClientStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::CMsgRemoteClientBroadcastStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientStatus)
}

inline void CMsgRemoteClientStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(instance_id_));
}

CMsgRemoteClientStatus::~CMsgRemoteClientStatus() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void CMsgRemoteClientStatus::ArenaDtor(void* object) {
  CMsgRemoteClientStatus* _this = reinterpret_cast< CMsgRemoteClientStatus* >(object);
  (void)_this;
}
void CMsgRemoteClientStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRemoteClientBroadcastStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  // optional uint64 instance_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_instance_id(), target);
  }

  // optional .CMsgRemoteClientBroadcastStatus status = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientStatus)
  return target;
}

size_t CMsgRemoteClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgRemoteClientBroadcastStatus status = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional uint64 client_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint64 instance_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_instance_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientStatus::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientStatus *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientStatus &>(from));
}


void CMsgRemoteClientStatus::MergeFrom(const CMsgRemoteClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::CMsgRemoteClientBroadcastStatus::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientStatus::CopyFrom(const CMsgRemoteClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStatus::InternalSwap(CMsgRemoteClientStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStatus, instance_id_)
      + sizeof(CMsgRemoteClientStatus::instance_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStatus, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[0]);
}

// ===================================================================

class CMsgRemoteClientAppStatus_AppUpdateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientAppStatus_AppUpdateInfo>()._has_bits_);
  static void set_has_time_update_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_to_download(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bytes_to_process(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bytes_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_estimated_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_update_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_update_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientAppStatus.AppUpdateInfo)
}
CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo(const CMsgRemoteClientAppStatus_AppUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bytes_to_download_, &from.bytes_to_download_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_seconds_remaining_) -
    reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(estimated_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientAppStatus.AppUpdateInfo)
}

inline void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bytes_to_download_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_state_) -
    reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(update_state_));
estimated_seconds_remaining_ = -1;
}

CMsgRemoteClientAppStatus_AppUpdateInfo::~CMsgRemoteClientAppStatus_AppUpdateInfo() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::ArenaDtor(void* object) {
  CMsgRemoteClientAppStatus_AppUpdateInfo* _this = reinterpret_cast< CMsgRemoteClientAppStatus_AppUpdateInfo* >(object);
  (void)_this;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientAppStatus.AppUpdateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bytes_to_download_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_state_) -
        reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(update_state_));
    estimated_seconds_remaining_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientAppStatus_AppUpdateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 time_update_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_time_update_start(&has_bits);
          time_update_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_to_download = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bytes_to_download(&has_bits);
          bytes_to_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_to_process = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes_to_process(&has_bits);
          bytes_to_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_processed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bytes_processed(&has_bits);
          bytes_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 estimated_seconds_remaining = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_estimated_seconds_remaining(&has_bits);
          estimated_seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 update_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_update_result(&has_bits);
          update_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 update_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_update_state(&has_bits);
          update_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientAppStatus_AppUpdateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientAppStatus.AppUpdateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_update_start = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_time_update_start(), target);
  }

  // optional uint64 bytes_to_download = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_to_download(), target);
  }

  // optional uint64 bytes_downloaded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bytes_downloaded(), target);
  }

  // optional uint64 bytes_to_process = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bytes_to_process(), target);
  }

  // optional uint64 bytes_processed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_processed(), target);
  }

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_estimated_seconds_remaining(), target);
  }

  // optional int32 update_result = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_update_result(), target);
  }

  // optional uint32 update_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_update_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientAppStatus.AppUpdateInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientAppStatus.AppUpdateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bytes_to_download = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_download());
    }

    // optional uint64 bytes_downloaded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_downloaded());
    }

    // optional uint64 bytes_to_process = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_process());
    }

    // optional fixed32 time_update_start = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 update_result = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_update_result());
    }

    // optional uint64 bytes_processed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_processed());
    }

    // optional uint32 update_state = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_update_state());
    }

    // optional int32 estimated_seconds_remaining = 6 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_estimated_seconds_remaining());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientAppStatus_AppUpdateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientAppStatus_AppUpdateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientAppStatus_AppUpdateInfo::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientAppStatus_AppUpdateInfo *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientAppStatus_AppUpdateInfo &>(from));
}


void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientAppStatus.AppUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bytes_to_download_ = from.bytes_to_download_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_to_process_ = from.bytes_to_process_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_update_start_ = from.time_update_start_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_result_ = from.update_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_processed_ = from.bytes_processed_;
    }
    if (cached_has_bits & 0x00000040u) {
      update_state_ = from.update_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      estimated_seconds_remaining_ = from.estimated_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::CopyFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppUpdateInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::InternalSwap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, update_state_)
      + sizeof(CMsgRemoteClientAppStatus_AppUpdateInfo::update_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_download_)>(
          reinterpret_cast<char*>(&bytes_to_download_),
          reinterpret_cast<char*>(&other->bytes_to_download_));
  swap(estimated_seconds_remaining_, other->estimated_seconds_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientAppStatus_AppUpdateInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[1]);
}

// ===================================================================

class CMsgRemoteClientAppStatus_ShortcutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientAppStatus_ShortcutInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exepath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  categories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientAppStatus.ShortcutInfo)
}
CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo(const CMsgRemoteClientAppStatus_ShortcutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  exepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exepath()) {
    exepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exepath(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientAppStatus.ShortcutInfo)
}

inline void CMsgRemoteClientAppStatus_ShortcutInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgRemoteClientAppStatus_ShortcutInfo::~CMsgRemoteClientAppStatus_ShortcutInfo() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientAppStatus.ShortcutInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientAppStatus_ShortcutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientAppStatus_ShortcutInfo::ArenaDtor(void* object) {
  CMsgRemoteClientAppStatus_ShortcutInfo* _this = reinterpret_cast< CMsgRemoteClientAppStatus_ShortcutInfo* >(object);
  (void)_this;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientAppStatus_ShortcutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientAppStatus_ShortcutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientAppStatus.ShortcutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      exepath_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientAppStatus_ShortcutInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientAppStatus.ShortcutInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientAppStatus.ShortcutInfo.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientAppStatus.ShortcutInfo.categories");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string exepath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_exepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientAppStatus.ShortcutInfo.exepath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientAppStatus_ShortcutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientAppStatus.ShortcutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientAppStatus.ShortcutInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientAppStatus.ShortcutInfo.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // repeated string categories = 3;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientAppStatus.ShortcutInfo.categories");
    target = stream->WriteString(3, s, target);
  }

  // optional string exepath = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exepath().data(), static_cast<int>(this->_internal_exepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientAppStatus.ShortcutInfo.exepath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientAppStatus.ShortcutInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_ShortcutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientAppStatus.ShortcutInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(categories_.size());
  for (int i = 0, n = categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      categories_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string exepath = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exepath());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientAppStatus_ShortcutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientAppStatus_ShortcutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientAppStatus_ShortcutInfo::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientAppStatus_ShortcutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientAppStatus_ShortcutInfo *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientAppStatus_ShortcutInfo &>(from));
}


void CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientAppStatus.ShortcutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_exepath(from._internal_exepath());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientAppStatus_ShortcutInfo::CopyFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientAppStatus.ShortcutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_ShortcutInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::InternalSwap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  categories_.InternalSwap(&other->categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exepath_, lhs_arena,
      &other->exepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientAppStatus_ShortcutInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[2]);
}

// ===================================================================

class CMsgRemoteClientAppStatus_AppStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientAppStatus_AppStatus>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgRemoteClientAppStatus_AppUpdateInfo& update_info(const CMsgRemoteClientAppStatus_AppStatus* msg);
  static void set_has_update_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgRemoteClientAppStatus_ShortcutInfo& shortcut_info(const CMsgRemoteClientAppStatus_AppStatus* msg);
  static void set_has_shortcut_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_available(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgRemoteClientAppStatus_AppUpdateInfo&
CMsgRemoteClientAppStatus_AppStatus::_Internal::update_info(const CMsgRemoteClientAppStatus_AppStatus* msg) {
  return *msg->update_info_;
}
const ::CMsgRemoteClientAppStatus_ShortcutInfo&
CMsgRemoteClientAppStatus_AppStatus::_Internal::shortcut_info(const CMsgRemoteClientAppStatus_AppStatus* msg) {
  return *msg->shortcut_info_;
}
CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientAppStatus.AppStatus)
}
CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus(const CMsgRemoteClientAppStatus_AppStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update_info()) {
    update_info_ = new ::CMsgRemoteClientAppStatus_AppUpdateInfo(*from.update_info_);
  } else {
    update_info_ = nullptr;
  }
  if (from._internal_has_shortcut_info()) {
    shortcut_info_ = new ::CMsgRemoteClientAppStatus_ShortcutInfo(*from.shortcut_info_);
  } else {
    shortcut_info_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_available_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(launch_available_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientAppStatus.AppStatus)
}

inline void CMsgRemoteClientAppStatus_AppStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_state_) -
    reinterpret_cast<char*>(&update_info_)) + sizeof(app_state_));
launch_available_ = true;
}

CMsgRemoteClientAppStatus_AppStatus::~CMsgRemoteClientAppStatus_AppStatus() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientAppStatus.AppStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientAppStatus_AppStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete update_info_;
  if (this != internal_default_instance()) delete shortcut_info_;
}

void CMsgRemoteClientAppStatus_AppStatus::ArenaDtor(void* object) {
  CMsgRemoteClientAppStatus_AppStatus* _this = reinterpret_cast< CMsgRemoteClientAppStatus_AppStatus* >(object);
  (void)_this;
}
void CMsgRemoteClientAppStatus_AppStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientAppStatus_AppStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientAppStatus_AppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientAppStatus.AppStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_info_ != nullptr);
      update_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shortcut_info_ != nullptr);
      shortcut_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_state_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(app_state_));
    launch_available_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientAppStatus_AppStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_state(&has_bits);
          app_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shortcut_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool launch_available = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_launch_available(&has_bits);
          launch_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientAppStatus_AppStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientAppStatus.AppStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 app_state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_state(), target);
  }

  // optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::update_info(this), target, stream);
  }

  // optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shortcut_info(this), target, stream);
  }

  // optional bool launch_available = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_launch_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientAppStatus.AppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientAppStatus.AppStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_info_);
    }

    // optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_info_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 app_state = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_state());
    }

    // optional bool launch_available = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientAppStatus_AppStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientAppStatus_AppStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientAppStatus_AppStatus::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientAppStatus_AppStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientAppStatus_AppStatus *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientAppStatus_AppStatus &>(from));
}


void CMsgRemoteClientAppStatus_AppStatus::MergeFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientAppStatus.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_update_info()->::CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(from._internal_update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shortcut_info()->::CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(from._internal_shortcut_info());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_state_ = from.app_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      launch_available_ = from.launch_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientAppStatus_AppStatus::CopyFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientAppStatus.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppStatus::InternalSwap(CMsgRemoteClientAppStatus_AppStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, app_state_)
      + sizeof(CMsgRemoteClientAppStatus_AppStatus::app_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, update_info_)>(
          reinterpret_cast<char*>(&update_info_),
          reinterpret_cast<char*>(&other->update_info_));
  swap(launch_available_, other->launch_available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientAppStatus_AppStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[3]);
}

// ===================================================================

class CMsgRemoteClientAppStatus::_Internal {
 public:
};

CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  status_updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientAppStatus)
}
CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus(const CMsgRemoteClientAppStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      status_updates_(from.status_updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientAppStatus)
}

inline void CMsgRemoteClientAppStatus::SharedCtor() {
}

CMsgRemoteClientAppStatus::~CMsgRemoteClientAppStatus() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientAppStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientAppStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientAppStatus::ArenaDtor(void* object) {
  CMsgRemoteClientAppStatus* _this = reinterpret_cast< CMsgRemoteClientAppStatus* >(object);
  (void)_this;
}
void CMsgRemoteClientAppStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientAppStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientAppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientAppStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientAppStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientAppStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientAppStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_status_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientAppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientAppStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  total_size += 1UL * this->_internal_status_updates_size();
  for (const auto& msg : this->status_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientAppStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientAppStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientAppStatus::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientAppStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientAppStatus *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientAppStatus &>(from));
}


void CMsgRemoteClientAppStatus::MergeFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientAppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  status_updates_.MergeFrom(from.status_updates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientAppStatus::CopyFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientAppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus::InternalSwap(CMsgRemoteClientAppStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_updates_.InternalSwap(&other->status_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientAppStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[4]);
}

// ===================================================================

class CMsgRemoteClientStartStream_ReservedGamepad::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientStartStream_ReservedGamepad>()._has_bits_);
  static void set_has_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientStartStream.ReservedGamepad)
}
CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad(const CMsgRemoteClientStartStream_ReservedGamepad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controller_type_, &from.controller_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_subtype_) -
    reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientStartStream.ReservedGamepad)
}

inline void CMsgRemoteClientStartStream_ReservedGamepad::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controller_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_subtype_) -
    reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
}

CMsgRemoteClientStartStream_ReservedGamepad::~CMsgRemoteClientStartStream_ReservedGamepad() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientStartStream.ReservedGamepad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientStartStream_ReservedGamepad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientStartStream_ReservedGamepad::ArenaDtor(void* object) {
  CMsgRemoteClientStartStream_ReservedGamepad* _this = reinterpret_cast< CMsgRemoteClientStartStream_ReservedGamepad* >(object);
  (void)_this;
}
void CMsgRemoteClientStartStream_ReservedGamepad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientStartStream_ReservedGamepad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientStartStream_ReservedGamepad::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientStartStream.ReservedGamepad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&controller_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_subtype_) -
        reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientStartStream_ReservedGamepad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 controller_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_controller_type(&has_bits);
          controller_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 controller_subtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_controller_subtype(&has_bits);
          controller_subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientStartStream_ReservedGamepad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientStartStream.ReservedGamepad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_controller_type(), target);
  }

  // optional uint32 controller_subtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_controller_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientStartStream.ReservedGamepad)
  return target;
}

size_t CMsgRemoteClientStartStream_ReservedGamepad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientStartStream.ReservedGamepad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 controller_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_controller_type());
    }

    // optional uint32 controller_subtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_controller_subtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientStartStream_ReservedGamepad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientStartStream_ReservedGamepad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientStartStream_ReservedGamepad::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientStartStream_ReservedGamepad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientStartStream_ReservedGamepad *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientStartStream_ReservedGamepad &>(from));
}


void CMsgRemoteClientStartStream_ReservedGamepad::MergeFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientStartStream.ReservedGamepad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      controller_type_ = from.controller_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_subtype_ = from.controller_subtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientStartStream_ReservedGamepad::CopyFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientStartStream.ReservedGamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream_ReservedGamepad::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream_ReservedGamepad::InternalSwap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, controller_subtype_)
      + sizeof(CMsgRemoteClientStartStream_ReservedGamepad::controller_subtype_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, controller_type_)>(
          reinterpret_cast<char*>(&controller_type_),
          reinterpret_cast<char*>(&other->controller_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientStartStream_ReservedGamepad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[5]);
}

// ===================================================================

class CMsgRemoteClientStartStream::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientStartStream>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gamepad_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_launch_option(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lock_parental_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unlock_parental_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_resolution_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maximum_resolution_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_audio_channel_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgRemoteClientStartStream::CMsgRemoteClientStartStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gamepads_(arena),
  supported_transport_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientStartStream)
}
CMsgRemoteClientStartStream::CMsgRemoteClientStartStream(const CMsgRemoteClientStartStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gamepads_(from.gamepads_),
      supported_transport_(from.supported_transport_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unlock_parental_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unlock_parental_lock_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unlock_parental_lock()) {
    unlock_parental_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unlock_parental_lock(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_count_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(audio_channel_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientStartStream)
}

inline void CMsgRemoteClientStartStream::SharedCtor() {
unlock_parental_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unlock_parental_lock_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maximum_resolution_y_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(maximum_resolution_y_));
launch_option_ = -1;
audio_channel_count_ = 2;
}

CMsgRemoteClientStartStream::~CMsgRemoteClientStartStream() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientStartStream)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientStartStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unlock_parental_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStream::ArenaDtor(void* object) {
  CMsgRemoteClientStartStream* _this = reinterpret_cast< CMsgRemoteClientStartStream* >(object);
  (void)_this;
}
void CMsgRemoteClientStartStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientStartStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientStartStream::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientStartStream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamepads_.Clear();
  supported_transport_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unlock_parental_lock_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maximum_resolution_y_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(maximum_resolution_y_));
    launch_option_ = -1;
  }
  audio_channel_count_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientStartStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 environment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_environment(&has_bits);
          environment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gamepad_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gamepad_count(&has_bits);
          gamepad_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 launch_option = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_launch_option(&has_bits);
          launch_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lock_parental_lock = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lock_parental_lock(&has_bits);
          lock_parental_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unlock_parental_lock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_unlock_parental_lock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientStartStream.unlock_parental_lock");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maximum_resolution_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_maximum_resolution_x(&has_bits);
          maximum_resolution_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maximum_resolution_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_maximum_resolution_y(&has_bits);
          maximum_resolution_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gamepads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 audio_channel_count = 10 [default = 2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_audio_channel_count(&has_bits);
          audio_channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EStreamTransport supported_transport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EStreamTransport_IsValid(val))) {
              _internal_add_supported_transport(static_cast<::EStreamTransport>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_supported_transport(), ptr, ctx, ::EStreamTransport_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientStartStream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientStartStream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional int32 environment = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_environment(), target);
  }

  // optional int32 gamepad_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gamepad_count(), target);
  }

  // optional int32 launch_option = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_launch_option(), target);
  }

  // optional bool lock_parental_lock = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_lock_parental_lock(), target);
  }

  // optional string unlock_parental_lock = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unlock_parental_lock().data(), static_cast<int>(this->_internal_unlock_parental_lock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientStartStream.unlock_parental_lock");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_unlock_parental_lock(), target);
  }

  // optional int32 maximum_resolution_x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_maximum_resolution_x(), target);
  }

  // optional int32 maximum_resolution_y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maximum_resolution_y(), target);
  }

  // repeated .CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gamepads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_gamepads(i), target, stream);
  }

  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_audio_channel_count(), target);
  }

  // repeated .EStreamTransport supported_transport = 11;
  for (int i = 0, n = this->_internal_supported_transport_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        11, this->_internal_supported_transport(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientStartStream)
  return target;
}

size_t CMsgRemoteClientStartStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientStartStream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  total_size += 1UL * this->_internal_gamepads_size();
  for (const auto& msg : this->gamepads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EStreamTransport supported_transport = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_transport_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_transport(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unlock_parental_lock = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unlock_parental_lock());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 environment = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_environment());
    }

    // optional int32 gamepad_count = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gamepad_count());
    }

    // optional bool lock_parental_lock = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 maximum_resolution_x = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maximum_resolution_x());
    }

    // optional int32 maximum_resolution_y = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maximum_resolution_y());
    }

    // optional int32 launch_option = 4 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_launch_option());
    }

  }
  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_audio_channel_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientStartStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientStartStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientStartStream::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientStartStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientStartStream *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientStartStream &>(from));
}


void CMsgRemoteClientStartStream::MergeFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientStartStream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gamepads_.MergeFrom(from.gamepads_);
  supported_transport_.MergeFrom(from.supported_transport_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unlock_parental_lock(from._internal_unlock_parental_lock());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      environment_ = from.environment_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamepad_count_ = from.gamepad_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      lock_parental_lock_ = from.lock_parental_lock_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      launch_option_ = from.launch_option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_audio_channel_count(from._internal_audio_channel_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientStartStream::CopyFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientStartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream::InternalSwap(CMsgRemoteClientStartStream* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamepads_.InternalSwap(&other->gamepads_);
  supported_transport_.InternalSwap(&other->supported_transport_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unlock_parental_lock_, lhs_arena,
      &other->unlock_parental_lock_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStream, maximum_resolution_y_)
      + sizeof(CMsgRemoteClientStartStream::maximum_resolution_y_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStream, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(launch_option_, other->launch_option_);
  swap(audio_channel_count_, other->audio_channel_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientStartStream::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[6]);
}

// ===================================================================

class CMsgRemoteClientStartStreamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientStartStreamResponse>()._has_bits_);
  static void set_has_e_launch_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stream_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_auth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_relay_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_task(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launch_task_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_launch_tasks_done(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_launch_tasks_total(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  launch_options_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientStartStreamResponse)
}
CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse(const CMsgRemoteClientStartStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      launch_options_(from.launch_options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auth_token()) {
    auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_token(), 
      GetArenaForAllocation());
  }
  relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_relay_server()) {
    relay_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relay_server(), 
      GetArenaForAllocation());
  }
  launch_task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    launch_task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_launch_task()) {
    launch_task_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_task(), 
      GetArenaForAllocation());
  }
  launch_task_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    launch_task_detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_launch_task_detail()) {
    launch_task_detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_task_detail(), 
      GetArenaForAllocation());
  }
  ::memcpy(&stream_port_, &from.stream_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&transport_) -
    reinterpret_cast<char*>(&stream_port_)) + sizeof(transport_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientStartStreamResponse)
}

inline void CMsgRemoteClientStartStreamResponse::SharedCtor() {
auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
relay_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  relay_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
launch_task_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  launch_task_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
launch_task_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  launch_task_detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&launch_tasks_total_) -
    reinterpret_cast<char*>(&stream_port_)) + sizeof(launch_tasks_total_));
e_launch_result_ = 2;
transport_ = 1;
}

CMsgRemoteClientStartStreamResponse::~CMsgRemoteClientStartStreamResponse() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientStartStreamResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientStartStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relay_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  launch_task_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  launch_task_detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStreamResponse::ArenaDtor(void* object) {
  CMsgRemoteClientStartStreamResponse* _this = reinterpret_cast< CMsgRemoteClientStartStreamResponse* >(object);
  (void)_this;
}
void CMsgRemoteClientStartStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientStartStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientStartStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientStartStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launch_options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      auth_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      relay_server_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      launch_task_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      launch_task_detail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&stream_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_tasks_total_) -
        reinterpret_cast<char*>(&stream_port_)) + sizeof(launch_tasks_total_));
    e_launch_result_ = 2;
  }
  transport_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientStartStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 e_launch_result = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_e_launch_result(&has_bits);
          e_launch_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stream_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stream_port(&has_bits);
          stream_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 launch_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_launch_options(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_launch_options(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes auth_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EStreamTransport transport = 5 [default = k_EStreamTransportUDP];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStreamTransport_IsValid(val))) {
            _internal_set_transport(static_cast<::EStreamTransport>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string relay_server = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_relay_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientStartStreamResponse.relay_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string launch_task = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_launch_task();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientStartStreamResponse.launch_task");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string launch_task_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_launch_task_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientStartStreamResponse.launch_task_detail");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 launch_tasks_done = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_launch_tasks_done(&has_bits);
          launch_tasks_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 launch_tasks_total = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_launch_tasks_total(&has_bits);
          launch_tasks_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientStartStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientStartStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 e_launch_result = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_e_launch_result(), target);
  }

  // optional uint32 stream_port = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_port(), target);
  }

  // repeated int32 launch_options = 3;
  for (int i = 0, n = this->_internal_launch_options_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_launch_options(i), target);
  }

  // optional bytes auth_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_auth_token(), target);
  }

  // optional .EStreamTransport transport = 5 [default = k_EStreamTransportUDP];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_transport(), target);
  }

  // optional string relay_server = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relay_server().data(), static_cast<int>(this->_internal_relay_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientStartStreamResponse.relay_server");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_relay_server(), target);
  }

  // optional string launch_task = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_launch_task().data(), static_cast<int>(this->_internal_launch_task().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientStartStreamResponse.launch_task");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_launch_task(), target);
  }

  // optional string launch_task_detail = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_launch_task_detail().data(), static_cast<int>(this->_internal_launch_task_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientStartStreamResponse.launch_task_detail");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_launch_task_detail(), target);
  }

  // optional int32 launch_tasks_done = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_launch_tasks_done(), target);
  }

  // optional int32 launch_tasks_total = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_launch_tasks_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientStartStreamResponse)
  return target;
}

size_t CMsgRemoteClientStartStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientStartStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 launch_options = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->launch_options_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_launch_options_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes auth_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_auth_token());
    }

    // optional string relay_server = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relay_server());
    }

    // optional string launch_task = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_launch_task());
    }

    // optional string launch_task_detail = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_launch_task_detail());
    }

    // optional uint32 stream_port = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_port());
    }

    // optional int32 launch_tasks_done = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_launch_tasks_done());
    }

    // optional int32 launch_tasks_total = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_launch_tasks_total());
    }

    // optional int32 e_launch_result = 1 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_e_launch_result());
    }

  }
  // optional .EStreamTransport transport = 5 [default = k_EStreamTransportUDP];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientStartStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientStartStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientStartStreamResponse::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientStartStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientStartStreamResponse *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientStartStreamResponse &>(from));
}


void CMsgRemoteClientStartStreamResponse::MergeFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientStartStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  launch_options_.MergeFrom(from.launch_options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_auth_token(from._internal_auth_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_relay_server(from._internal_relay_server());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_launch_task(from._internal_launch_task());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_launch_task_detail(from._internal_launch_task_detail());
    }
    if (cached_has_bits & 0x00000010u) {
      stream_port_ = from.stream_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      launch_tasks_done_ = from.launch_tasks_done_;
    }
    if (cached_has_bits & 0x00000040u) {
      launch_tasks_total_ = from.launch_tasks_total_;
    }
    if (cached_has_bits & 0x00000080u) {
      e_launch_result_ = from.e_launch_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_transport(from._internal_transport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientStartStreamResponse::CopyFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientStartStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStreamResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStreamResponse::InternalSwap(CMsgRemoteClientStartStreamResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  launch_options_.InternalSwap(&other->launch_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_token_, lhs_arena,
      &other->auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &relay_server_, lhs_arena,
      &other->relay_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &launch_task_, lhs_arena,
      &other->launch_task_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &launch_task_detail_, lhs_arena,
      &other->launch_task_detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, launch_tasks_total_)
      + sizeof(CMsgRemoteClientStartStreamResponse::launch_tasks_total_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, stream_port_)>(
          reinterpret_cast<char*>(&stream_port_),
          reinterpret_cast<char*>(&other->stream_port_));
  swap(e_launch_result_, other->e_launch_result_);
  swap(transport_, other->transport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientStartStreamResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[7]);
}

// ===================================================================

class CMsgRemoteClientPing::_Internal {
 public:
};

CMsgRemoteClientPing::CMsgRemoteClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientPing)
}
CMsgRemoteClientPing::CMsgRemoteClientPing(const CMsgRemoteClientPing& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientPing)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientPing::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[8]);
}

// ===================================================================

class CMsgRemoteClientPingResponse::_Internal {
 public:
};

CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientPingResponse)
}
CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse(const CMsgRemoteClientPingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientPingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientPingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientPingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientPingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[9]);
}

// ===================================================================

class CMsgRemoteClientAcceptEULA::_Internal {
 public:
};

CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_id_(arena),
  eula_id_(arena),
  eula_version_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientAcceptEULA)
}
CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA(const CMsgRemoteClientAcceptEULA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_id_(from.app_id_),
      eula_id_(from.eula_id_),
      eula_version_(from.eula_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientAcceptEULA)
}

inline void CMsgRemoteClientAcceptEULA::SharedCtor() {
}

CMsgRemoteClientAcceptEULA::~CMsgRemoteClientAcceptEULA() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientAcceptEULA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientAcceptEULA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientAcceptEULA::ArenaDtor(void* object) {
  CMsgRemoteClientAcceptEULA* _this = reinterpret_cast< CMsgRemoteClientAcceptEULA* >(object);
  (void)_this;
}
void CMsgRemoteClientAcceptEULA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientAcceptEULA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientAcceptEULA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientAcceptEULA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.Clear();
  eula_id_.Clear();
  eula_version_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientAcceptEULA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string eula_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_eula_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRemoteClientAcceptEULA.eula_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 eula_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eula_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_eula_version(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientAcceptEULA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientAcceptEULA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  for (int i = 0, n = this->_internal_app_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(i), target);
  }

  // repeated string eula_id = 2;
  for (int i = 0, n = this->_internal_eula_id_size(); i < n; i++) {
    const auto& s = this->_internal_eula_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRemoteClientAcceptEULA.eula_id");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint32 eula_version = 3;
  for (int i = 0, n = this->_internal_eula_version_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_eula_version(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientAcceptEULA)
  return target;
}

size_t CMsgRemoteClientAcceptEULA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientAcceptEULA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_app_id_size());
    total_size += data_size;
  }

  // repeated string eula_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(eula_id_.size());
  for (int i = 0, n = eula_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      eula_id_.Get(i));
  }

  // repeated uint32 eula_version = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->eula_version_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_eula_version_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientAcceptEULA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientAcceptEULA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientAcceptEULA::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientAcceptEULA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientAcceptEULA *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientAcceptEULA &>(from));
}


void CMsgRemoteClientAcceptEULA::MergeFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientAcceptEULA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_id_.MergeFrom(from.app_id_);
  eula_id_.MergeFrom(from.eula_id_);
  eula_version_.MergeFrom(from.eula_version_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientAcceptEULA::CopyFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientAcceptEULA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAcceptEULA::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAcceptEULA::InternalSwap(CMsgRemoteClientAcceptEULA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  app_id_.InternalSwap(&other->app_id_);
  eula_id_.InternalSwap(&other->eula_id_);
  eula_version_.InternalSwap(&other->eula_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientAcceptEULA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[10]);
}

// ===================================================================

class CMsgRemoteClientGetControllerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientGetControllerConfig>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientGetControllerConfig)
}
CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig(const CMsgRemoteClientGetControllerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientGetControllerConfig)
}

inline void CMsgRemoteClientGetControllerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
}

CMsgRemoteClientGetControllerConfig::~CMsgRemoteClientGetControllerConfig() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientGetControllerConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientGetControllerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientGetControllerConfig::ArenaDtor(void* object) {
  CMsgRemoteClientGetControllerConfig* _this = reinterpret_cast< CMsgRemoteClientGetControllerConfig* >(object);
  (void)_this;
}
void CMsgRemoteClientGetControllerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientGetControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientGetControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientGetControllerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_index_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientGetControllerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 controller_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientGetControllerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientGetControllerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 controller_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_controller_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientGetControllerConfig)
  return target;
}

size_t CMsgRemoteClientGetControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientGetControllerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 controller_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_controller_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientGetControllerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientGetControllerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientGetControllerConfig::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientGetControllerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientGetControllerConfig *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientGetControllerConfig &>(from));
}


void CMsgRemoteClientGetControllerConfig::MergeFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientGetControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_index_ = from.controller_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientGetControllerConfig::CopyFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientGetControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfig::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfig::InternalSwap(CMsgRemoteClientGetControllerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, controller_index_)
      + sizeof(CMsgRemoteClientGetControllerConfig::controller_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientGetControllerConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[11]);
}

// ===================================================================

class CMsgRemoteClientGetControllerConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientGetControllerConfigResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config_vdf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientGetControllerConfigResponse)
}
CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse(const CMsgRemoteClientGetControllerConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_vdf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    config_vdf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_config_vdf()) {
    config_vdf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_vdf(), 
      GetArenaForAllocation());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientGetControllerConfigResponse)
}

inline void CMsgRemoteClientGetControllerConfigResponse::SharedCtor() {
config_vdf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  config_vdf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
eresult_ = 2;
}

CMsgRemoteClientGetControllerConfigResponse::~CMsgRemoteClientGetControllerConfigResponse() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientGetControllerConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientGetControllerConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_vdf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientGetControllerConfigResponse::ArenaDtor(void* object) {
  CMsgRemoteClientGetControllerConfigResponse* _this = reinterpret_cast< CMsgRemoteClientGetControllerConfigResponse* >(object);
  (void)_this;
}
void CMsgRemoteClientGetControllerConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientGetControllerConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientGetControllerConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientGetControllerConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      config_vdf_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientGetControllerConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes config_vdf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_config_vdf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientGetControllerConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientGetControllerConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bytes config_vdf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_config_vdf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientGetControllerConfigResponse)
  return target;
}

size_t CMsgRemoteClientGetControllerConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientGetControllerConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes config_vdf = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_config_vdf());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientGetControllerConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientGetControllerConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientGetControllerConfigResponse::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientGetControllerConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientGetControllerConfigResponse *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientGetControllerConfigResponse &>(from));
}


void CMsgRemoteClientGetControllerConfigResponse::MergeFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientGetControllerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_config_vdf(from._internal_config_vdf());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientGetControllerConfigResponse::CopyFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientGetControllerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfigResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfigResponse::InternalSwap(CMsgRemoteClientGetControllerConfigResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_vdf_, lhs_arena,
      &other->config_vdf_, rhs_arena
  );
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientGetControllerConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[12]);
}

// ===================================================================

class CMsgRemoteClientStreamingEnabled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoteClientStreamingEnabled>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRemoteClientStreamingEnabled)
}
CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled(const CMsgRemoteClientStreamingEnabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:CMsgRemoteClientStreamingEnabled)
}

inline void CMsgRemoteClientStreamingEnabled::SharedCtor() {
enabled_ = false;
}

CMsgRemoteClientStreamingEnabled::~CMsgRemoteClientStreamingEnabled() {
  // @@protoc_insertion_point(destructor:CMsgRemoteClientStreamingEnabled)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRemoteClientStreamingEnabled::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoteClientStreamingEnabled::ArenaDtor(void* object) {
  CMsgRemoteClientStreamingEnabled* _this = reinterpret_cast< CMsgRemoteClientStreamingEnabled* >(object);
  (void)_this;
}
void CMsgRemoteClientStreamingEnabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRemoteClientStreamingEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRemoteClientStreamingEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoteClientStreamingEnabled)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoteClientStreamingEnabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoteClientStreamingEnabled::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoteClientStreamingEnabled)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoteClientStreamingEnabled)
  return target;
}

size_t CMsgRemoteClientStreamingEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoteClientStreamingEnabled)
  size_t total_size = 0;

  // required bool enabled = 1;
  if (_internal_has_enabled()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoteClientStreamingEnabled::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRemoteClientStreamingEnabled::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoteClientStreamingEnabled::GetClassData() const { return &_class_data_; }

void CMsgRemoteClientStreamingEnabled::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRemoteClientStreamingEnabled *>(to)->MergeFrom(
      static_cast<const CMsgRemoteClientStreamingEnabled &>(from));
}


void CMsgRemoteClientStreamingEnabled::MergeFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoteClientStreamingEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoteClientStreamingEnabled::CopyFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoteClientStreamingEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStreamingEnabled::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgRemoteClientStreamingEnabled::InternalSwap(CMsgRemoteClientStreamingEnabled* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoteClientStreamingEnabled::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fremoteclient_2eproto_getter, &descriptor_table_steammessages_5fremoteclient_2eproto_once,
      file_level_metadata_steammessages_5fremoteclient_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientStatus* Arena::CreateMaybeMessage< ::CMsgRemoteClientStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientAppStatus_AppUpdateInfo* Arena::CreateMaybeMessage< ::CMsgRemoteClientAppStatus_AppUpdateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientAppStatus_AppUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientAppStatus_ShortcutInfo* Arena::CreateMaybeMessage< ::CMsgRemoteClientAppStatus_ShortcutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientAppStatus_ShortcutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientAppStatus_AppStatus* Arena::CreateMaybeMessage< ::CMsgRemoteClientAppStatus_AppStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientAppStatus_AppStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientAppStatus* Arena::CreateMaybeMessage< ::CMsgRemoteClientAppStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientAppStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientStartStream_ReservedGamepad* Arena::CreateMaybeMessage< ::CMsgRemoteClientStartStream_ReservedGamepad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientStartStream_ReservedGamepad >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientStartStream* Arena::CreateMaybeMessage< ::CMsgRemoteClientStartStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientStartStream >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientStartStreamResponse* Arena::CreateMaybeMessage< ::CMsgRemoteClientStartStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientStartStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientPing* Arena::CreateMaybeMessage< ::CMsgRemoteClientPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientPingResponse* Arena::CreateMaybeMessage< ::CMsgRemoteClientPingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientAcceptEULA* Arena::CreateMaybeMessage< ::CMsgRemoteClientAcceptEULA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientAcceptEULA >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientGetControllerConfig* Arena::CreateMaybeMessage< ::CMsgRemoteClientGetControllerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientGetControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientGetControllerConfigResponse* Arena::CreateMaybeMessage< ::CMsgRemoteClientGetControllerConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientGetControllerConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoteClientStreamingEnabled* Arena::CreateMaybeMessage< ::CMsgRemoteClientStreamingEnabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoteClientStreamingEnabled >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
