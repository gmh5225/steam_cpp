// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_service.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
#include "steammessages_remoteclient_service_messages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================


// ===================================================================

class RemoteClient_Stub;

class RemoteClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RemoteClient() {};
 public:
  virtual ~RemoteClient();

  typedef RemoteClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetPairingInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_GetPairingInfo_Request* request,
                       ::CRemoteClient_GetPairingInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyOnline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_Online_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyReplyPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_ReplyPacket_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AllocateTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateTURNServer_Request* request,
                       ::CRemoteClient_AllocateTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AllocateRelayServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateRelayServer_Request* request,
                       ::CRemoteClient_AllocateRelayServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AllocateSDR(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateSDR_Request* request,
                       ::CRemoteClient_AllocateSDR_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendSteamBroadcastPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendSteamToSteamPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamToSteam_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendRemotePlaySessionStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlay_SessionStarted_Request* request,
                       ::CRemotePlay_SessionStarted_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendRemotePlaySessionStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlay_SessionStopped_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendRemotePlayTogetherPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlayTogether_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateRemotePlayTogetherInvitation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request* request,
                       ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteRemotePlayTogetherInvitation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* request,
                       ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RemoteClient);
};

class RemoteClient_Stub : public RemoteClient {
 public:
  RemoteClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RemoteClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RemoteClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RemoteClient ------------------------------------------

  void GetPairingInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_GetPairingInfo_Request* request,
                       ::CRemoteClient_GetPairingInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyOnline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_Online_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyReplyPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_ReplyPacket_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void AllocateTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateTURNServer_Request* request,
                       ::CRemoteClient_AllocateTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  void AllocateRelayServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateRelayServer_Request* request,
                       ::CRemoteClient_AllocateRelayServer_Response* response,
                       ::google::protobuf::Closure* done);
  void AllocateSDR(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_AllocateSDR_Request* request,
                       ::CRemoteClient_AllocateSDR_Response* response,
                       ::google::protobuf::Closure* done);
  void SendSteamBroadcastPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendSteamToSteamPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamToSteam_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendRemotePlaySessionStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlay_SessionStarted_Request* request,
                       ::CRemotePlay_SessionStarted_Response* response,
                       ::google::protobuf::Closure* done);
  void SendRemotePlaySessionStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlay_SessionStopped_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendRemotePlayTogetherPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlayTogether_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateRemotePlayTogetherInvitation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_CreateRemotePlayTogetherInvitation_Request* request,
                       ::CRemoteClient_CreateRemotePlayTogetherInvitation_Response* response,
                       ::google::protobuf::Closure* done);
  void DeleteRemotePlayTogetherInvitation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Request* request,
                       ::CRemoteClient_DeleteRemotePlayTogetherInvitation_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RemoteClient_Stub);
};


// -------------------------------------------------------------------

class RemoteClientSteamClient_Stub;

class RemoteClientSteamClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RemoteClientSteamClient() {};
 public:
  virtual ~RemoteClientSteamClient();

  typedef RemoteClientSteamClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyRegisterStatusUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_RegisterStatusUpdate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyUnregisterStatusUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_UnregisterStatusUpdate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyRemotePacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_RemotePacket_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifySteamBroadcastPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifySteamToSteamPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamToSteam_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyRemotePlayTogetherPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlayTogether_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RemoteClientSteamClient);
};

class RemoteClientSteamClient_Stub : public RemoteClientSteamClient {
 public:
  RemoteClientSteamClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RemoteClientSteamClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RemoteClientSteamClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RemoteClientSteamClient ------------------------------------------

  void NotifyRegisterStatusUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_RegisterStatusUpdate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyUnregisterStatusUpdate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_UnregisterStatusUpdate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyRemotePacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_RemotePacket_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifySteamBroadcastPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifySteamToSteamPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemoteClient_SteamToSteam_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyRemotePlayTogetherPacket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CRemotePlayTogether_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RemoteClientSteamClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto
