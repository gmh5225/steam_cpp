// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_siteserverui.proto

#include "steammessages_siteserverui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SiteServerUI_Login_Request::SiteServerUI_Login_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamguardcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remember_password_(false){}
struct SiteServerUI_Login_RequestDefaultTypeInternal {
  constexpr SiteServerUI_Login_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Login_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_Login_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Login_RequestDefaultTypeInternal _SiteServerUI_Login_Request_default_instance_;
constexpr SiteServerUI_Login_Response::SiteServerUI_Login_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logon_state_(0)
  , logon_eresult_(0){}
struct SiteServerUI_Login_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_Login_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Login_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_Login_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Login_ResponseDefaultTypeInternal _SiteServerUI_Login_Response_default_instance_;
constexpr SiteServerUI_LoginStatus_Request::SiteServerUI_LoginStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_LoginStatus_RequestDefaultTypeInternal {
  constexpr SiteServerUI_LoginStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_LoginStatus_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_LoginStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_LoginStatus_RequestDefaultTypeInternal _SiteServerUI_LoginStatus_Request_default_instance_;
constexpr SiteServerUI_LoginStatus_Response::SiteServerUI_LoginStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cached_credentials_(false)
  , logon_state_(0)
  , logon_eresult_(0){}
struct SiteServerUI_LoginStatus_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_LoginStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_LoginStatus_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_LoginStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_LoginStatus_ResponseDefaultTypeInternal _SiteServerUI_LoginStatus_Response_default_instance_;
constexpr SiteServerUI_CancelLogin_Request::SiteServerUI_CancelLogin_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_CancelLogin_RequestDefaultTypeInternal {
  constexpr SiteServerUI_CancelLogin_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_CancelLogin_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_CancelLogin_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_CancelLogin_RequestDefaultTypeInternal _SiteServerUI_CancelLogin_Request_default_instance_;
constexpr SiteServerUI_CancelLogin_Response::SiteServerUI_CancelLogin_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logon_state_(0)
  , logon_eresult_(0){}
struct SiteServerUI_CancelLogin_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_CancelLogin_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_CancelLogin_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_CancelLogin_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_CancelLogin_ResponseDefaultTypeInternal _SiteServerUI_CancelLogin_Response_default_instance_;
constexpr SiteServerUI_Logout_Request::SiteServerUI_Logout_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_Logout_RequestDefaultTypeInternal {
  constexpr SiteServerUI_Logout_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Logout_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_Logout_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Logout_RequestDefaultTypeInternal _SiteServerUI_Logout_Request_default_instance_;
constexpr SiteServerUI_Logout_Response::SiteServerUI_Logout_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logon_state_(0)
  , logout_eresult_(0){}
struct SiteServerUI_Logout_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_Logout_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Logout_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_Logout_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Logout_ResponseDefaultTypeInternal _SiteServerUI_Logout_Response_default_instance_;
constexpr SiteServerUI_Quit_Request::SiteServerUI_Quit_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : restart_(false){}
struct SiteServerUI_Quit_RequestDefaultTypeInternal {
  constexpr SiteServerUI_Quit_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Quit_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_Quit_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Quit_RequestDefaultTypeInternal _SiteServerUI_Quit_Request_default_instance_;
constexpr SiteServerUI_Quit_Response::SiteServerUI_Quit_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_Quit_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_Quit_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Quit_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_Quit_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Quit_ResponseDefaultTypeInternal _SiteServerUI_Quit_Response_default_instance_;
constexpr SiteServerUI_Status_Request::SiteServerUI_Status_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_Status_RequestDefaultTypeInternal {
  constexpr SiteServerUI_Status_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Status_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_Status_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Status_RequestDefaultTypeInternal _SiteServerUI_Status_Request_default_instance_;
constexpr SiteServerUI_Status_Response::SiteServerUI_Status_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logon_state_(0)
  , logon_eresult_(0)
  , connected_(false)
  , cache_enabled_(false)
  , acct_status_(0){}
struct SiteServerUI_Status_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_Status_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_Status_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_Status_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_Status_ResponseDefaultTypeInternal _SiteServerUI_Status_Response_default_instance_;
constexpr SiteServerUI_GetLanguage_Request::SiteServerUI_GetLanguage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_GetLanguage_RequestDefaultTypeInternal {
  constexpr SiteServerUI_GetLanguage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_GetLanguage_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_GetLanguage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_GetLanguage_RequestDefaultTypeInternal _SiteServerUI_GetLanguage_Request_default_instance_;
constexpr SiteServerUI_GetLanguage_Response::SiteServerUI_GetLanguage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteServerUI_GetLanguage_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_GetLanguage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_GetLanguage_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_GetLanguage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_GetLanguage_ResponseDefaultTypeInternal _SiteServerUI_GetLanguage_Response_default_instance_;
constexpr SiteServerUI_SetLanguage_Request::SiteServerUI_SetLanguage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteServerUI_SetLanguage_RequestDefaultTypeInternal {
  constexpr SiteServerUI_SetLanguage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_SetLanguage_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_SetLanguage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_SetLanguage_RequestDefaultTypeInternal _SiteServerUI_SetLanguage_Request_default_instance_;
constexpr SiteServerUI_SetLanguage_Response::SiteServerUI_SetLanguage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_SetLanguage_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_SetLanguage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_SetLanguage_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_SetLanguage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_SetLanguage_ResponseDefaultTypeInternal _SiteServerUI_SetLanguage_Response_default_instance_;
constexpr SiteServerUI_ClientStatus_Request::SiteServerUI_ClientStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_ClientStatus_RequestDefaultTypeInternal {
  constexpr SiteServerUI_ClientStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ClientStatus_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_ClientStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ClientStatus_RequestDefaultTypeInternal _SiteServerUI_ClientStatus_Request_default_instance_;
constexpr SiteServerUI_ClientStatus_Response_ClientInfo::SiteServerUI_ClientStatus_Response_ClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(0u)
  , connected_(false)
  , instance_id_(uint64_t{0u}){}
struct SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal {
  constexpr SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal() {}
  union {
    SiteServerUI_ClientStatus_Response_ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal _SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_;
constexpr SiteServerUI_ClientStatus_Response_Payment::SiteServerUI_ClientStatus_Response_Payment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transid_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , time_created_(0)
  , purchase_status_(0){}
struct SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal {
  constexpr SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal() {}
  union {
    SiteServerUI_ClientStatus_Response_Payment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal _SiteServerUI_ClientStatus_Response_Payment_default_instance_;
constexpr SiteServerUI_ClientStatus_Response::SiteServerUI_ClientStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clients_()
  , payments_(){}
struct SiteServerUI_ClientStatus_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_ClientStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ClientStatus_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_ClientStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ClientStatus_ResponseDefaultTypeInternal _SiteServerUI_ClientStatus_Response_default_instance_;
constexpr SiteServerUI_ContentCacheStatus_Request::SiteServerUI_ContentCacheStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal {
  constexpr SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_ContentCacheStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal _SiteServerUI_ContentCacheStatus_Request_default_instance_;
constexpr SiteServerUI_ContentCacheStatus_Response::SiteServerUI_ContentCacheStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cache_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , explicit_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , max_size_gb_(0u)
  , enabled_(false)
  , p2p_enabled_(false)
  , external_process_(false)
  , current_size_gb_(0u)
  , current_bw_(uint64_t{0u})
  , total_bytes_served_(uint64_t{0u}){}
struct SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_ContentCacheStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal _SiteServerUI_ContentCacheStatus_Response_default_instance_;
constexpr SiteServerUI_ContentCacheConfig_Request::SiteServerUI_ContentCacheConfig_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cache_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , explicit_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , max_size_gb_(0u)
  , enabled_(false)
  , p2p_enabled_(false)
  , external_process_(false){}
struct SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal {
  constexpr SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal() {}
  union {
    SiteServerUI_ContentCacheConfig_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal _SiteServerUI_ContentCacheConfig_Request_default_instance_;
constexpr SiteServerUI_ContentCacheConfig_Response::SiteServerUI_ContentCacheConfig_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal {
  constexpr SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal() {}
  union {
    SiteServerUI_ContentCacheConfig_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal _SiteServerUI_ContentCacheConfig_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fsiteserverui_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fsiteserverui_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fsiteserverui_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fsiteserverui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, username_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, password_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, steamguardcode_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Request, remember_password_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Login_Response, logon_eresult_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, username_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, cached_credentials_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_LoginStatus_Response, logon_eresult_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_CancelLogin_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_CancelLogin_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_CancelLogin_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_CancelLogin_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_CancelLogin_Response, logon_eresult_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Logout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Logout_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Logout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Logout_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Logout_Response, logout_eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Quit_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Quit_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Quit_Request, restart_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Quit_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, logon_eresult_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, connected_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, cache_enabled_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_Status_Response, acct_status_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_GetLanguage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_GetLanguage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_GetLanguage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_GetLanguage_Response, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_SetLanguage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_SetLanguage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_SetLanguage_Request, language_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_SetLanguage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, connected_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_ClientInfo, instance_id_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, transid_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, steamid_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, amount_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, time_created_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, purchase_status_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, hostname_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, persona_name_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, profile_url_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response_Payment, avatar_url_),
  5,
  6,
  0,
  7,
  8,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response, clients_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ClientStatus_Response, payments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, enabled_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, port_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, cache_location_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, max_size_gb_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, p2p_enabled_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, explicit_ip_address_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, external_process_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, current_size_gb_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, current_bw_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheStatus_Response, total_bytes_served_),
  4,
  2,
  0,
  3,
  5,
  1,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, enabled_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, port_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, cache_location_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, max_size_gb_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, p2p_enabled_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, external_process_),
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Request, explicit_ip_address_),
  4,
  2,
  0,
  3,
  5,
  6,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SiteServerUI_ContentCacheConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::SiteServerUI_Login_Request)},
  { 14, 22, -1, sizeof(::SiteServerUI_Login_Response)},
  { 24, -1, -1, sizeof(::SiteServerUI_LoginStatus_Request)},
  { 30, 40, -1, sizeof(::SiteServerUI_LoginStatus_Response)},
  { 44, -1, -1, sizeof(::SiteServerUI_CancelLogin_Request)},
  { 50, 58, -1, sizeof(::SiteServerUI_CancelLogin_Response)},
  { 60, -1, -1, sizeof(::SiteServerUI_Logout_Request)},
  { 66, 74, -1, sizeof(::SiteServerUI_Logout_Response)},
  { 76, 83, -1, sizeof(::SiteServerUI_Quit_Request)},
  { 84, -1, -1, sizeof(::SiteServerUI_Quit_Response)},
  { 90, -1, -1, sizeof(::SiteServerUI_Status_Request)},
  { 96, 107, -1, sizeof(::SiteServerUI_Status_Response)},
  { 112, -1, -1, sizeof(::SiteServerUI_GetLanguage_Request)},
  { 118, 125, -1, sizeof(::SiteServerUI_GetLanguage_Response)},
  { 126, 133, -1, sizeof(::SiteServerUI_SetLanguage_Request)},
  { 134, -1, -1, sizeof(::SiteServerUI_SetLanguage_Response)},
  { 140, -1, -1, sizeof(::SiteServerUI_ClientStatus_Request)},
  { 146, 156, -1, sizeof(::SiteServerUI_ClientStatus_Response_ClientInfo)},
  { 160, 175, -1, sizeof(::SiteServerUI_ClientStatus_Response_Payment)},
  { 184, -1, -1, sizeof(::SiteServerUI_ClientStatus_Response)},
  { 192, -1, -1, sizeof(::SiteServerUI_ContentCacheStatus_Request)},
  { 198, 214, -1, sizeof(::SiteServerUI_ContentCacheStatus_Response)},
  { 224, 237, -1, sizeof(::SiteServerUI_ContentCacheConfig_Request)},
  { 244, -1, -1, sizeof(::SiteServerUI_ContentCacheConfig_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Login_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Login_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_LoginStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_LoginStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_CancelLogin_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_CancelLogin_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Logout_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Logout_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Quit_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Quit_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Status_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_Status_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_GetLanguage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_GetLanguage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_SetLanguage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_SetLanguage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ClientStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ClientStatus_Response_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ClientStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ContentCacheStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ContentCacheStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ContentCacheConfig_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SiteServerUI_ContentCacheConfig_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fsiteserverui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n steammessages_siteserverui.proto\032\030stea"
  "mmessages_base.proto\"s\n\032SiteServerUI_Log"
  "in_Request\022\020\n\010username\030\001 \001(\t\022\020\n\010password"
  "\030\002 \001(\t\022\026\n\016steamguardcode\030\003 \001(\t\022\031\n\021rememb"
  "er_password\030\004 \001(\010\"I\n\033SiteServerUI_Login_"
  "Response\022\023\n\013logon_state\030\001 \001(\005\022\025\n\rlogon_e"
  "result\030\002 \001(\005\"\"\n SiteServerUI_LoginStatus"
  "_Request\"}\n!SiteServerUI_LoginStatus_Res"
  "ponse\022\020\n\010username\030\001 \001(\t\022\032\n\022cached_creden"
  "tials\030\002 \001(\010\022\023\n\013logon_state\030\003 \001(\005\022\025\n\rlogo"
  "n_eresult\030\004 \001(\005\"\"\n SiteServerUI_CancelLo"
  "gin_Request\"O\n!SiteServerUI_CancelLogin_"
  "Response\022\023\n\013logon_state\030\001 \001(\005\022\025\n\rlogon_e"
  "result\030\002 \001(\005\"\035\n\033SiteServerUI_Logout_Requ"
  "est\"K\n\034SiteServerUI_Logout_Response\022\023\n\013l"
  "ogon_state\030\001 \001(\005\022\026\n\016logout_eresult\030\002 \001(\005"
  "\",\n\031SiteServerUI_Quit_Request\022\017\n\007restart"
  "\030\001 \001(\010\"\034\n\032SiteServerUI_Quit_Response\"\035\n\033"
  "SiteServerUI_Status_Request\"\211\001\n\034SiteServ"
  "erUI_Status_Response\022\023\n\013logon_state\030\001 \001("
  "\005\022\025\n\rlogon_eresult\030\002 \001(\005\022\021\n\tconnected\030\003 "
  "\001(\010\022\025\n\rcache_enabled\030\004 \001(\010\022\023\n\013acct_statu"
  "s\030\005 \001(\005\"\"\n SiteServerUI_GetLanguage_Requ"
  "est\"5\n!SiteServerUI_GetLanguage_Response"
  "\022\020\n\010language\030\001 \001(\t\"4\n SiteServerUI_SetLa"
  "nguage_Request\022\020\n\010language\030\001 \001(\t\"#\n!Site"
  "ServerUI_SetLanguage_Response\"#\n!SiteSer"
  "verUI_ClientStatus_Request\"\266\003\n\"SiteServe"
  "rUI_ClientStatus_Response\022\?\n\007clients\030\004 \003"
  "(\0132..SiteServerUI_ClientStatus_Response."
  "ClientInfo\022=\n\010payments\030\005 \003(\0132+.SiteServe"
  "rUI_ClientStatus_Response.Payment\032R\n\nCli"
  "entInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010hostname\030\002 \001(\t\022\021\n"
  "\tconnected\030\003 \001(\010\022\023\n\013instance_id\030\004 \001(\004\032\273\001"
  "\n\007Payment\022\017\n\007transid\030\001 \001(\004\022\017\n\007steamid\030\002 "
  "\001(\004\022\016\n\006amount\030\003 \001(\t\022\024\n\014time_created\030\004 \001("
  "\005\022\027\n\017purchase_status\030\005 \001(\005\022\020\n\010hostname\030\006"
  " \001(\t\022\024\n\014persona_name\030\007 \001(\t\022\023\n\013profile_ur"
  "l\030\010 \001(\t\022\022\n\navatar_url\030\t \001(\t\")\n\'SiteServe"
  "rUI_ContentCacheStatus_Request\"\213\002\n(SiteS"
  "erverUI_ContentCacheStatus_Response\022\017\n\007e"
  "nabled\030\001 \001(\010\022\014\n\004port\030\002 \001(\r\022\026\n\016cache_loca"
  "tion\030\003 \001(\t\022\023\n\013max_size_gb\030\004 \001(\r\022\023\n\013p2p_e"
  "nabled\030\005 \001(\010\022\033\n\023explicit_ip_address\030\t \001("
  "\t\022\030\n\020external_process\030\n \001(\010\022\027\n\017current_s"
  "ize_gb\030\006 \001(\r\022\022\n\ncurrent_bw\030\007 \001(\004\022\032\n\022tota"
  "l_bytes_served\030\010 \001(\004\"\301\001\n\'SiteServerUI_Co"
  "ntentCacheConfig_Request\022\017\n\007enabled\030\001 \001("
  "\010\022\014\n\004port\030\002 \001(\r\022\026\n\016cache_location\030\003 \001(\t\022"
  "\023\n\013max_size_gb\030\004 \001(\r\022\023\n\013p2p_enabled\030\005 \001("
  "\010\022\030\n\020external_process\030\006 \001(\010\022\033\n\023explicit_"
  "ip_address\030\007 \001(\t\"*\n(SiteServerUI_Content"
  "CacheConfig_ResponseB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fsiteserverui_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fsiteserverui_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsiteserverui_2eproto = {
  false, false, 2107, descriptor_table_protodef_steammessages_5fsiteserverui_2eproto, "steammessages_siteserverui.proto", 
  &descriptor_table_steammessages_5fsiteserverui_2eproto_once, descriptor_table_steammessages_5fsiteserverui_2eproto_deps, 1, 24,
  schemas, file_default_instances, TableStruct_steammessages_5fsiteserverui_2eproto::offsets,
  file_level_metadata_steammessages_5fsiteserverui_2eproto, file_level_enum_descriptors_steammessages_5fsiteserverui_2eproto, file_level_service_descriptors_steammessages_5fsiteserverui_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fsiteserverui_2eproto_getter() {
  return &descriptor_table_steammessages_5fsiteserverui_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fsiteserverui_2eproto(&descriptor_table_steammessages_5fsiteserverui_2eproto);

// ===================================================================

class SiteServerUI_Login_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_Login_Request>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamguardcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remember_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SiteServerUI_Login_Request::SiteServerUI_Login_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Login_Request)
}
SiteServerUI_Login_Request::SiteServerUI_Login_Request(const SiteServerUI_Login_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  steamguardcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    steamguardcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steamguardcode()) {
    steamguardcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamguardcode(), 
      GetArenaForAllocation());
  }
  remember_password_ = from.remember_password_;
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Login_Request)
}

inline void SiteServerUI_Login_Request::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamguardcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  steamguardcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remember_password_ = false;
}

SiteServerUI_Login_Request::~SiteServerUI_Login_Request() {
  // @@protoc_insertion_point(destructor:SiteServerUI_Login_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_Login_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamguardcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_Login_Request::ArenaDtor(void* object) {
  SiteServerUI_Login_Request* _this = reinterpret_cast< SiteServerUI_Login_Request* >(object);
  (void)_this;
}
void SiteServerUI_Login_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_Login_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_Login_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_Login_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      steamguardcode_.ClearNonDefaultToEmpty();
    }
  }
  remember_password_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_Login_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_Login_Request.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_Login_Request.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string steamguardcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_steamguardcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_Login_Request.steamguardcode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remember_password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_remember_password(&has_bits);
          remember_password_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_Login_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_Login_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_Login_Request.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_Login_Request.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional string steamguardcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamguardcode().data(), static_cast<int>(this->_internal_steamguardcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_Login_Request.steamguardcode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_steamguardcode(), target);
  }

  // optional bool remember_password = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_remember_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_Login_Request)
  return target;
}

size_t SiteServerUI_Login_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_Login_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string username = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string steamguardcode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamguardcode());
    }

    // optional bool remember_password = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Login_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_Login_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Login_Request::GetClassData() const { return &_class_data_; }

void SiteServerUI_Login_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_Login_Request *>(to)->MergeFrom(
      static_cast<const SiteServerUI_Login_Request &>(from));
}


void SiteServerUI_Login_Request::MergeFrom(const SiteServerUI_Login_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_Login_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_steamguardcode(from._internal_steamguardcode());
    }
    if (cached_has_bits & 0x00000008u) {
      remember_password_ = from.remember_password_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_Login_Request::CopyFrom(const SiteServerUI_Login_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_Login_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Login_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Login_Request::InternalSwap(SiteServerUI_Login_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &steamguardcode_, lhs_arena,
      &other->steamguardcode_, rhs_arena
  );
  swap(remember_password_, other->remember_password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Login_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[0]);
}

// ===================================================================

class SiteServerUI_Login_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_Login_Response>()._has_bits_);
  static void set_has_logon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logon_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SiteServerUI_Login_Response::SiteServerUI_Login_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Login_Response)
}
SiteServerUI_Login_Response::SiteServerUI_Login_Response(const SiteServerUI_Login_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Login_Response)
}

inline void SiteServerUI_Login_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logon_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
}

SiteServerUI_Login_Response::~SiteServerUI_Login_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_Login_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_Login_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_Login_Response::ArenaDtor(void* object) {
  SiteServerUI_Login_Response* _this = reinterpret_cast< SiteServerUI_Login_Response* >(object);
  (void)_this;
}
void SiteServerUI_Login_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_Login_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_Login_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_Login_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_Login_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logon_state(&has_bits);
          logon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logon_eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logon_eresult(&has_bits);
          logon_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_Login_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_Login_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logon_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_Login_Response)
  return target;
}

size_t SiteServerUI_Login_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_Login_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Login_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_Login_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Login_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_Login_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_Login_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_Login_Response &>(from));
}


void SiteServerUI_Login_Response::MergeFrom(const SiteServerUI_Login_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_Login_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_Login_Response::CopyFrom(const SiteServerUI_Login_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_Login_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Login_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Login_Response::InternalSwap(SiteServerUI_Login_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_Login_Response, logon_eresult_)
      + sizeof(SiteServerUI_Login_Response::logon_eresult_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_Login_Response, logon_state_)>(
          reinterpret_cast<char*>(&logon_state_),
          reinterpret_cast<char*>(&other->logon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Login_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[1]);
}

// ===================================================================

class SiteServerUI_LoginStatus_Request::_Internal {
 public:
};

SiteServerUI_LoginStatus_Request::SiteServerUI_LoginStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_LoginStatus_Request)
}
SiteServerUI_LoginStatus_Request::SiteServerUI_LoginStatus_Request(const SiteServerUI_LoginStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_LoginStatus_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_LoginStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_LoginStatus_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_LoginStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[2]);
}

// ===================================================================

class SiteServerUI_LoginStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_LoginStatus_Response>()._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cached_credentials(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logon_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SiteServerUI_LoginStatus_Response::SiteServerUI_LoginStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_LoginStatus_Response)
}
SiteServerUI_LoginStatus_Response::SiteServerUI_LoginStatus_Response(const SiteServerUI_LoginStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cached_credentials_, &from.cached_credentials_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_LoginStatus_Response)
}

inline void SiteServerUI_LoginStatus_Response::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cached_credentials_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
}

SiteServerUI_LoginStatus_Response::~SiteServerUI_LoginStatus_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_LoginStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_LoginStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_LoginStatus_Response::ArenaDtor(void* object) {
  SiteServerUI_LoginStatus_Response* _this = reinterpret_cast< SiteServerUI_LoginStatus_Response* >(object);
  (void)_this;
}
void SiteServerUI_LoginStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_LoginStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_LoginStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_LoginStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&cached_credentials_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_LoginStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_LoginStatus_Response.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cached_credentials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cached_credentials(&has_bits);
          cached_credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logon_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_logon_state(&has_bits);
          logon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logon_eresult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_logon_eresult(&has_bits);
          logon_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_LoginStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_LoginStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_LoginStatus_Response.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional bool cached_credentials = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cached_credentials(), target);
  }

  // optional int32 logon_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_logon_state(), target);
  }

  // optional int32 logon_eresult = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_logon_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_LoginStatus_Response)
  return target;
}

size_t SiteServerUI_LoginStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_LoginStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string username = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional bool cached_credentials = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 logon_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_state());
    }

    // optional int32 logon_eresult = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_LoginStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_LoginStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_LoginStatus_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_LoginStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_LoginStatus_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_LoginStatus_Response &>(from));
}


void SiteServerUI_LoginStatus_Response::MergeFrom(const SiteServerUI_LoginStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_LoginStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      cached_credentials_ = from.cached_credentials_;
    }
    if (cached_has_bits & 0x00000004u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_LoginStatus_Response::CopyFrom(const SiteServerUI_LoginStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_LoginStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_LoginStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_LoginStatus_Response::InternalSwap(SiteServerUI_LoginStatus_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_LoginStatus_Response, logon_eresult_)
      + sizeof(SiteServerUI_LoginStatus_Response::logon_eresult_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_LoginStatus_Response, cached_credentials_)>(
          reinterpret_cast<char*>(&cached_credentials_),
          reinterpret_cast<char*>(&other->cached_credentials_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_LoginStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[3]);
}

// ===================================================================

class SiteServerUI_CancelLogin_Request::_Internal {
 public:
};

SiteServerUI_CancelLogin_Request::SiteServerUI_CancelLogin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_CancelLogin_Request)
}
SiteServerUI_CancelLogin_Request::SiteServerUI_CancelLogin_Request(const SiteServerUI_CancelLogin_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_CancelLogin_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_CancelLogin_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_CancelLogin_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_CancelLogin_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[4]);
}

// ===================================================================

class SiteServerUI_CancelLogin_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_CancelLogin_Response>()._has_bits_);
  static void set_has_logon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logon_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SiteServerUI_CancelLogin_Response::SiteServerUI_CancelLogin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_CancelLogin_Response)
}
SiteServerUI_CancelLogin_Response::SiteServerUI_CancelLogin_Response(const SiteServerUI_CancelLogin_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_CancelLogin_Response)
}

inline void SiteServerUI_CancelLogin_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logon_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
}

SiteServerUI_CancelLogin_Response::~SiteServerUI_CancelLogin_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_CancelLogin_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_CancelLogin_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_CancelLogin_Response::ArenaDtor(void* object) {
  SiteServerUI_CancelLogin_Response* _this = reinterpret_cast< SiteServerUI_CancelLogin_Response* >(object);
  (void)_this;
}
void SiteServerUI_CancelLogin_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_CancelLogin_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_CancelLogin_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_CancelLogin_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_CancelLogin_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logon_state(&has_bits);
          logon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logon_eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logon_eresult(&has_bits);
          logon_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_CancelLogin_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_CancelLogin_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logon_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_CancelLogin_Response)
  return target;
}

size_t SiteServerUI_CancelLogin_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_CancelLogin_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_CancelLogin_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_CancelLogin_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_CancelLogin_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_CancelLogin_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_CancelLogin_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_CancelLogin_Response &>(from));
}


void SiteServerUI_CancelLogin_Response::MergeFrom(const SiteServerUI_CancelLogin_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_CancelLogin_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_CancelLogin_Response::CopyFrom(const SiteServerUI_CancelLogin_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_CancelLogin_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_CancelLogin_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_CancelLogin_Response::InternalSwap(SiteServerUI_CancelLogin_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_CancelLogin_Response, logon_eresult_)
      + sizeof(SiteServerUI_CancelLogin_Response::logon_eresult_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_CancelLogin_Response, logon_state_)>(
          reinterpret_cast<char*>(&logon_state_),
          reinterpret_cast<char*>(&other->logon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_CancelLogin_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[5]);
}

// ===================================================================

class SiteServerUI_Logout_Request::_Internal {
 public:
};

SiteServerUI_Logout_Request::SiteServerUI_Logout_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Logout_Request)
}
SiteServerUI_Logout_Request::SiteServerUI_Logout_Request(const SiteServerUI_Logout_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Logout_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Logout_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Logout_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Logout_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[6]);
}

// ===================================================================

class SiteServerUI_Logout_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_Logout_Response>()._has_bits_);
  static void set_has_logon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logout_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SiteServerUI_Logout_Response::SiteServerUI_Logout_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Logout_Response)
}
SiteServerUI_Logout_Response::SiteServerUI_Logout_Response(const SiteServerUI_Logout_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logout_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Logout_Response)
}

inline void SiteServerUI_Logout_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logon_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logout_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
}

SiteServerUI_Logout_Response::~SiteServerUI_Logout_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_Logout_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_Logout_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_Logout_Response::ArenaDtor(void* object) {
  SiteServerUI_Logout_Response* _this = reinterpret_cast< SiteServerUI_Logout_Response* >(object);
  (void)_this;
}
void SiteServerUI_Logout_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_Logout_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_Logout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_Logout_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logout_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_Logout_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logon_state(&has_bits);
          logon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logout_eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logout_eresult(&has_bits);
          logout_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_Logout_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_Logout_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logon_state(), target);
  }

  // optional int32 logout_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logout_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_Logout_Response)
  return target;
}

size_t SiteServerUI_Logout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_Logout_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_state());
    }

    // optional int32 logout_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logout_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Logout_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_Logout_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Logout_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_Logout_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_Logout_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_Logout_Response &>(from));
}


void SiteServerUI_Logout_Response::MergeFrom(const SiteServerUI_Logout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_Logout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logout_eresult_ = from.logout_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_Logout_Response::CopyFrom(const SiteServerUI_Logout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_Logout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Logout_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Logout_Response::InternalSwap(SiteServerUI_Logout_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_Logout_Response, logout_eresult_)
      + sizeof(SiteServerUI_Logout_Response::logout_eresult_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_Logout_Response, logon_state_)>(
          reinterpret_cast<char*>(&logon_state_),
          reinterpret_cast<char*>(&other->logon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Logout_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[7]);
}

// ===================================================================

class SiteServerUI_Quit_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_Quit_Request>()._has_bits_);
  static void set_has_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SiteServerUI_Quit_Request::SiteServerUI_Quit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Quit_Request)
}
SiteServerUI_Quit_Request::SiteServerUI_Quit_Request(const SiteServerUI_Quit_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  restart_ = from.restart_;
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Quit_Request)
}

inline void SiteServerUI_Quit_Request::SharedCtor() {
restart_ = false;
}

SiteServerUI_Quit_Request::~SiteServerUI_Quit_Request() {
  // @@protoc_insertion_point(destructor:SiteServerUI_Quit_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_Quit_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_Quit_Request::ArenaDtor(void* object) {
  SiteServerUI_Quit_Request* _this = reinterpret_cast< SiteServerUI_Quit_Request* >(object);
  (void)_this;
}
void SiteServerUI_Quit_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_Quit_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_Quit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_Quit_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restart_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_Quit_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_restart(&has_bits);
          restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_Quit_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_Quit_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool restart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_restart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_Quit_Request)
  return target;
}

size_t SiteServerUI_Quit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_Quit_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool restart = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Quit_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_Quit_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Quit_Request::GetClassData() const { return &_class_data_; }

void SiteServerUI_Quit_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_Quit_Request *>(to)->MergeFrom(
      static_cast<const SiteServerUI_Quit_Request &>(from));
}


void SiteServerUI_Quit_Request::MergeFrom(const SiteServerUI_Quit_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_Quit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_restart()) {
    _internal_set_restart(from._internal_restart());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_Quit_Request::CopyFrom(const SiteServerUI_Quit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_Quit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Quit_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Quit_Request::InternalSwap(SiteServerUI_Quit_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(restart_, other->restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Quit_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[8]);
}

// ===================================================================

class SiteServerUI_Quit_Response::_Internal {
 public:
};

SiteServerUI_Quit_Response::SiteServerUI_Quit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Quit_Response)
}
SiteServerUI_Quit_Response::SiteServerUI_Quit_Response(const SiteServerUI_Quit_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Quit_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Quit_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Quit_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Quit_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[9]);
}

// ===================================================================

class SiteServerUI_Status_Request::_Internal {
 public:
};

SiteServerUI_Status_Request::SiteServerUI_Status_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Status_Request)
}
SiteServerUI_Status_Request::SiteServerUI_Status_Request(const SiteServerUI_Status_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Status_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Status_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Status_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Status_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[10]);
}

// ===================================================================

class SiteServerUI_Status_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_Status_Response>()._has_bits_);
  static void set_has_logon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logon_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acct_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SiteServerUI_Status_Response::SiteServerUI_Status_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_Status_Response)
}
SiteServerUI_Status_Response::SiteServerUI_Status_Response(const SiteServerUI_Status_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&acct_status_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_Status_Response)
}

inline void SiteServerUI_Status_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logon_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acct_status_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
}

SiteServerUI_Status_Response::~SiteServerUI_Status_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_Status_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_Status_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_Status_Response::ArenaDtor(void* object) {
  SiteServerUI_Status_Response* _this = reinterpret_cast< SiteServerUI_Status_Response* >(object);
  (void)_this;
}
void SiteServerUI_Status_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_Status_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_Status_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_Status_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acct_status_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_Status_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_logon_state(&has_bits);
          logon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 logon_eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logon_eresult(&has_bits);
          logon_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cache_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cache_enabled(&has_bits);
          cache_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 acct_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_acct_status(&has_bits);
          acct_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_Status_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_Status_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logon_eresult(), target);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_connected(), target);
  }

  // optional bool cache_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cache_enabled(), target);
  }

  // optional int32 acct_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_acct_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_Status_Response)
  return target;
}

size_t SiteServerUI_Status_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_Status_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logon_eresult());
    }

    // optional bool connected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool cache_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 acct_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_acct_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_Status_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_Status_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_Status_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_Status_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_Status_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_Status_Response &>(from));
}


void SiteServerUI_Status_Response::MergeFrom(const SiteServerUI_Status_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      cache_enabled_ = from.cache_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      acct_status_ = from.acct_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_Status_Response::CopyFrom(const SiteServerUI_Status_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Status_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Status_Response::InternalSwap(SiteServerUI_Status_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_Status_Response, acct_status_)
      + sizeof(SiteServerUI_Status_Response::acct_status_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_Status_Response, logon_state_)>(
          reinterpret_cast<char*>(&logon_state_),
          reinterpret_cast<char*>(&other->logon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_Status_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[11]);
}

// ===================================================================

class SiteServerUI_GetLanguage_Request::_Internal {
 public:
};

SiteServerUI_GetLanguage_Request::SiteServerUI_GetLanguage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_GetLanguage_Request)
}
SiteServerUI_GetLanguage_Request::SiteServerUI_GetLanguage_Request(const SiteServerUI_GetLanguage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_GetLanguage_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_GetLanguage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_GetLanguage_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_GetLanguage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[12]);
}

// ===================================================================

class SiteServerUI_GetLanguage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_GetLanguage_Response>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SiteServerUI_GetLanguage_Response::SiteServerUI_GetLanguage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_GetLanguage_Response)
}
SiteServerUI_GetLanguage_Response::SiteServerUI_GetLanguage_Response(const SiteServerUI_GetLanguage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_GetLanguage_Response)
}

inline void SiteServerUI_GetLanguage_Response::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteServerUI_GetLanguage_Response::~SiteServerUI_GetLanguage_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_GetLanguage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_GetLanguage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_GetLanguage_Response::ArenaDtor(void* object) {
  SiteServerUI_GetLanguage_Response* _this = reinterpret_cast< SiteServerUI_GetLanguage_Response* >(object);
  (void)_this;
}
void SiteServerUI_GetLanguage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_GetLanguage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_GetLanguage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_GetLanguage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_GetLanguage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_GetLanguage_Response.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_GetLanguage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_GetLanguage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_GetLanguage_Response.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_GetLanguage_Response)
  return target;
}

size_t SiteServerUI_GetLanguage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_GetLanguage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_GetLanguage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_GetLanguage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_GetLanguage_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_GetLanguage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_GetLanguage_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_GetLanguage_Response &>(from));
}


void SiteServerUI_GetLanguage_Response::MergeFrom(const SiteServerUI_GetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_GetLanguage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_GetLanguage_Response::CopyFrom(const SiteServerUI_GetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_GetLanguage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_GetLanguage_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_GetLanguage_Response::InternalSwap(SiteServerUI_GetLanguage_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_GetLanguage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[13]);
}

// ===================================================================

class SiteServerUI_SetLanguage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_SetLanguage_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SiteServerUI_SetLanguage_Request::SiteServerUI_SetLanguage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_SetLanguage_Request)
}
SiteServerUI_SetLanguage_Request::SiteServerUI_SetLanguage_Request(const SiteServerUI_SetLanguage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_SetLanguage_Request)
}

inline void SiteServerUI_SetLanguage_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteServerUI_SetLanguage_Request::~SiteServerUI_SetLanguage_Request() {
  // @@protoc_insertion_point(destructor:SiteServerUI_SetLanguage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_SetLanguage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_SetLanguage_Request::ArenaDtor(void* object) {
  SiteServerUI_SetLanguage_Request* _this = reinterpret_cast< SiteServerUI_SetLanguage_Request* >(object);
  (void)_this;
}
void SiteServerUI_SetLanguage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_SetLanguage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_SetLanguage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_SetLanguage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_SetLanguage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_SetLanguage_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_SetLanguage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_SetLanguage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_SetLanguage_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_SetLanguage_Request)
  return target;
}

size_t SiteServerUI_SetLanguage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_SetLanguage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_SetLanguage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_SetLanguage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_SetLanguage_Request::GetClassData() const { return &_class_data_; }

void SiteServerUI_SetLanguage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_SetLanguage_Request *>(to)->MergeFrom(
      static_cast<const SiteServerUI_SetLanguage_Request &>(from));
}


void SiteServerUI_SetLanguage_Request::MergeFrom(const SiteServerUI_SetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_SetLanguage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_SetLanguage_Request::CopyFrom(const SiteServerUI_SetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_SetLanguage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_SetLanguage_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_SetLanguage_Request::InternalSwap(SiteServerUI_SetLanguage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_SetLanguage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[14]);
}

// ===================================================================

class SiteServerUI_SetLanguage_Response::_Internal {
 public:
};

SiteServerUI_SetLanguage_Response::SiteServerUI_SetLanguage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_SetLanguage_Response)
}
SiteServerUI_SetLanguage_Response::SiteServerUI_SetLanguage_Response(const SiteServerUI_SetLanguage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_SetLanguage_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_SetLanguage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_SetLanguage_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_SetLanguage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[15]);
}

// ===================================================================

class SiteServerUI_ClientStatus_Request::_Internal {
 public:
};

SiteServerUI_ClientStatus_Request::SiteServerUI_ClientStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ClientStatus_Request)
}
SiteServerUI_ClientStatus_Request::SiteServerUI_ClientStatus_Request(const SiteServerUI_ClientStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ClientStatus_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ClientStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ClientStatus_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ClientStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[16]);
}

// ===================================================================

class SiteServerUI_ClientStatus_Response_ClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_ClientStatus_Response_ClientInfo>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SiteServerUI_ClientStatus_Response_ClientInfo::SiteServerUI_ClientStatus_Response_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ClientStatus_Response.ClientInfo)
}
SiteServerUI_ClientStatus_Response_ClientInfo::SiteServerUI_ClientStatus_Response_ClientInfo(const SiteServerUI_ClientStatus_Response_ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ClientStatus_Response.ClientInfo)
}

inline void SiteServerUI_ClientStatus_Response_ClientInfo::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
}

SiteServerUI_ClientStatus_Response_ClientInfo::~SiteServerUI_ClientStatus_Response_ClientInfo() {
  // @@protoc_insertion_point(destructor:SiteServerUI_ClientStatus_Response.ClientInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_ClientStatus_Response_ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ClientStatus_Response_ClientInfo::ArenaDtor(void* object) {
  SiteServerUI_ClientStatus_Response_ClientInfo* _this = reinterpret_cast< SiteServerUI_ClientStatus_Response_ClientInfo* >(object);
  (void)_this;
}
void SiteServerUI_ClientStatus_Response_ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_ClientStatus_Response_ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_ClientStatus_Response_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_ClientStatus_Response.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_ClientStatus_Response_ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 instance_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_ClientStatus_Response_ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_ClientStatus_Response.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_connected(), target);
  }

  // optional uint64 instance_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_ClientStatus_Response.ClientInfo)
  return target;
}

size_t SiteServerUI_ClientStatus_Response_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_ClientStatus_Response.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

    // optional bool connected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 instance_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_instance_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ClientStatus_Response_ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_ClientStatus_Response_ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ClientStatus_Response_ClientInfo::GetClassData() const { return &_class_data_; }

void SiteServerUI_ClientStatus_Response_ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_ClientStatus_Response_ClientInfo *>(to)->MergeFrom(
      static_cast<const SiteServerUI_ClientStatus_Response_ClientInfo &>(from));
}


void SiteServerUI_ClientStatus_Response_ClientInfo::MergeFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_ClientStatus_Response.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_ClientStatus_Response_ClientInfo::CopyFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_ClientStatus_Response.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Response_ClientInfo::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Response_ClientInfo::InternalSwap(SiteServerUI_ClientStatus_Response_ClientInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_ClientStatus_Response_ClientInfo, instance_id_)
      + sizeof(SiteServerUI_ClientStatus_Response_ClientInfo::instance_id_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_ClientStatus_Response_ClientInfo, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ClientStatus_Response_ClientInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[17]);
}

// ===================================================================

class SiteServerUI_ClientStatus_Response_Payment::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_ClientStatus_Response_Payment>()._has_bits_);
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_purchase_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_profile_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SiteServerUI_ClientStatus_Response_Payment::SiteServerUI_ClientStatus_Response_Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ClientStatus_Response.Payment)
}
SiteServerUI_ClientStatus_Response_Payment::SiteServerUI_ClientStatus_Response_Payment(const SiteServerUI_ClientStatus_Response_Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_amount()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArenaForAllocation());
  }
  profile_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_url()) {
    profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_url(), 
      GetArenaForAllocation());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&transid_, &from.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_status_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(purchase_status_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ClientStatus_Response.Payment)
}

inline void SiteServerUI_ClientStatus_Response_Payment::SharedCtor() {
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_status_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(purchase_status_));
}

SiteServerUI_ClientStatus_Response_Payment::~SiteServerUI_ClientStatus_Response_Payment() {
  // @@protoc_insertion_point(destructor:SiteServerUI_ClientStatus_Response.Payment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_ClientStatus_Response_Payment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ClientStatus_Response_Payment::ArenaDtor(void* object) {
  SiteServerUI_ClientStatus_Response_Payment* _this = reinterpret_cast< SiteServerUI_ClientStatus_Response_Payment* >(object);
  (void)_this;
}
void SiteServerUI_ClientStatus_Response_Payment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_ClientStatus_Response_Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_ClientStatus_Response_Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_ClientStatus_Response.Payment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      amount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      profile_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&transid_)) + sizeof(time_created_));
  }
  purchase_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_ClientStatus_Response_Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 transid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_transid(&has_bits);
          transid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.Payment.amount");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_created = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_purchase_status(&has_bits);
          purchase_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.Payment.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.Payment.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_profile_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.Payment.profile_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ClientStatus_Response.Payment.avatar_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_ClientStatus_Response_Payment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_ClientStatus_Response.Payment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 transid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_transid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional string amount = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.Payment.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // optional int32 time_created = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_created(), target);
  }

  // optional int32 purchase_status = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_purchase_status(), target);
  }

  // optional string hostname = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.Payment.hostname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hostname(), target);
  }

  // optional string persona_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.Payment.persona_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_persona_name(), target);
  }

  // optional string profile_url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_url().data(), static_cast<int>(this->_internal_profile_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.Payment.profile_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_profile_url(), target);
  }

  // optional string avatar_url = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ClientStatus_Response.Payment.avatar_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_ClientStatus_Response.Payment)
  return target;
}

size_t SiteServerUI_ClientStatus_Response_Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_ClientStatus_Response.Payment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string amount = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_amount());
    }

    // optional string hostname = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string persona_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string profile_url = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_url());
    }

    // optional string avatar_url = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

    // optional uint64 transid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_transid());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional int32 time_created = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time_created());
    }

  }
  // optional int32 purchase_status = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ClientStatus_Response_Payment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_ClientStatus_Response_Payment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ClientStatus_Response_Payment::GetClassData() const { return &_class_data_; }

void SiteServerUI_ClientStatus_Response_Payment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_ClientStatus_Response_Payment *>(to)->MergeFrom(
      static_cast<const SiteServerUI_ClientStatus_Response_Payment &>(from));
}


void SiteServerUI_ClientStatus_Response_Payment::MergeFrom(const SiteServerUI_ClientStatus_Response_Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_ClientStatus_Response.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_amount(from._internal_amount());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_profile_url(from._internal_profile_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_avatar_url(from._internal_avatar_url());
    }
    if (cached_has_bits & 0x00000020u) {
      transid_ = from.transid_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_purchase_status(from._internal_purchase_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_ClientStatus_Response_Payment::CopyFrom(const SiteServerUI_ClientStatus_Response_Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_ClientStatus_Response.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Response_Payment::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Response_Payment::InternalSwap(SiteServerUI_ClientStatus_Response_Payment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, lhs_arena,
      &other->amount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_, lhs_arena,
      &other->persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_url_, lhs_arena,
      &other->profile_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_url_, lhs_arena,
      &other->avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_ClientStatus_Response_Payment, purchase_status_)
      + sizeof(SiteServerUI_ClientStatus_Response_Payment::purchase_status_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_ClientStatus_Response_Payment, transid_)>(
          reinterpret_cast<char*>(&transid_),
          reinterpret_cast<char*>(&other->transid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ClientStatus_Response_Payment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[18]);
}

// ===================================================================

class SiteServerUI_ClientStatus_Response::_Internal {
 public:
};

SiteServerUI_ClientStatus_Response::SiteServerUI_ClientStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  clients_(arena),
  payments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ClientStatus_Response)
}
SiteServerUI_ClientStatus_Response::SiteServerUI_ClientStatus_Response(const SiteServerUI_ClientStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      clients_(from.clients_),
      payments_(from.payments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ClientStatus_Response)
}

inline void SiteServerUI_ClientStatus_Response::SharedCtor() {
}

SiteServerUI_ClientStatus_Response::~SiteServerUI_ClientStatus_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_ClientStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_ClientStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteServerUI_ClientStatus_Response::ArenaDtor(void* object) {
  SiteServerUI_ClientStatus_Response* _this = reinterpret_cast< SiteServerUI_ClientStatus_Response* >(object);
  (void)_this;
}
void SiteServerUI_ClientStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_ClientStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_ClientStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_ClientStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clients_.Clear();
  payments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_ClientStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SiteServerUI_ClientStatus_Response.Payment payments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_ClientStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_ClientStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clients_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_clients(i), target, stream);
  }

  // repeated .SiteServerUI_ClientStatus_Response.Payment payments = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_payments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_ClientStatus_Response)
  return target;
}

size_t SiteServerUI_ClientStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_ClientStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  total_size += 1UL * this->_internal_clients_size();
  for (const auto& msg : this->clients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SiteServerUI_ClientStatus_Response.Payment payments = 5;
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ClientStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_ClientStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ClientStatus_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_ClientStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_ClientStatus_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_ClientStatus_Response &>(from));
}


void SiteServerUI_ClientStatus_Response::MergeFrom(const SiteServerUI_ClientStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_ClientStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  clients_.MergeFrom(from.clients_);
  payments_.MergeFrom(from.payments_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_ClientStatus_Response::CopyFrom(const SiteServerUI_ClientStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_ClientStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Response::InternalSwap(SiteServerUI_ClientStatus_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  clients_.InternalSwap(&other->clients_);
  payments_.InternalSwap(&other->payments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ClientStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[19]);
}

// ===================================================================

class SiteServerUI_ContentCacheStatus_Request::_Internal {
 public:
};

SiteServerUI_ContentCacheStatus_Request::SiteServerUI_ContentCacheStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ContentCacheStatus_Request)
}
SiteServerUI_ContentCacheStatus_Request::SiteServerUI_ContentCacheStatus_Request(const SiteServerUI_ContentCacheStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ContentCacheStatus_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ContentCacheStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ContentCacheStatus_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ContentCacheStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[20]);
}

// ===================================================================

class SiteServerUI_ContentCacheStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_ContentCacheStatus_Response>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_size_gb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p2p_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_explicit_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_external_process(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_current_size_gb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_current_bw(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_bytes_served(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

SiteServerUI_ContentCacheStatus_Response::SiteServerUI_ContentCacheStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ContentCacheStatus_Response)
}
SiteServerUI_ContentCacheStatus_Response::SiteServerUI_ContentCacheStatus_Response(const SiteServerUI_ContentCacheStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cache_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_location()) {
    cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_location(), 
      GetArenaForAllocation());
  }
  explicit_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_explicit_ip_address()) {
    explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explicit_ip_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_bytes_served_) -
    reinterpret_cast<char*>(&port_)) + sizeof(total_bytes_served_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ContentCacheStatus_Response)
}

inline void SiteServerUI_ContentCacheStatus_Response::SharedCtor() {
cache_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
explicit_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_bytes_served_) -
    reinterpret_cast<char*>(&port_)) + sizeof(total_bytes_served_));
}

SiteServerUI_ContentCacheStatus_Response::~SiteServerUI_ContentCacheStatus_Response() {
  // @@protoc_insertion_point(destructor:SiteServerUI_ContentCacheStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_ContentCacheStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cache_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explicit_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ContentCacheStatus_Response::ArenaDtor(void* object) {
  SiteServerUI_ContentCacheStatus_Response* _this = reinterpret_cast< SiteServerUI_ContentCacheStatus_Response* >(object);
  (void)_this;
}
void SiteServerUI_ContentCacheStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_ContentCacheStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_ContentCacheStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_ContentCacheStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      explicit_ip_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_size_gb_) -
        reinterpret_cast<char*>(&port_)) + sizeof(current_size_gb_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&current_bw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_bytes_served_) -
        reinterpret_cast<char*>(&current_bw_)) + sizeof(total_bytes_served_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_ContentCacheStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cache_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ContentCacheStatus_Response.cache_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_size_gb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_size_gb(&has_bits);
          max_size_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool p2p_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_p2p_enabled(&has_bits);
          p2p_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_size_gb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_current_size_gb(&has_bits);
          current_size_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 current_bw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_current_bw(&has_bits);
          current_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_bytes_served = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_total_bytes_served(&has_bits);
          total_bytes_served_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string explicit_ip_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_explicit_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ContentCacheStatus_Response.explicit_ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool external_process = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_external_process(&has_bits);
          external_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_ContentCacheStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_ContentCacheStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cache_location().data(), static_cast<int>(this->_internal_cache_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ContentCacheStatus_Response.cache_location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cache_location(), target);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_size_gb(), target);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_p2p_enabled(), target);
  }

  // optional uint32 current_size_gb = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_current_size_gb(), target);
  }

  // optional uint64 current_bw = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_current_bw(), target);
  }

  // optional uint64 total_bytes_served = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_total_bytes_served(), target);
  }

  // optional string explicit_ip_address = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_explicit_ip_address().data(), static_cast<int>(this->_internal_explicit_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ContentCacheStatus_Response.explicit_ip_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_explicit_ip_address(), target);
  }

  // optional bool external_process = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_external_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_ContentCacheStatus_Response)
  return target;
}

size_t SiteServerUI_ContentCacheStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_ContentCacheStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cache_location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_location());
    }

    // optional string explicit_ip_address = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_explicit_ip_address());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

    // optional uint32 max_size_gb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_size_gb());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool p2p_enabled = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool external_process = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 current_size_gb = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_size_gb());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 current_bw = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_current_bw());
    }

    // optional uint64 total_bytes_served = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_bytes_served());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ContentCacheStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_ContentCacheStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ContentCacheStatus_Response::GetClassData() const { return &_class_data_; }

void SiteServerUI_ContentCacheStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_ContentCacheStatus_Response *>(to)->MergeFrom(
      static_cast<const SiteServerUI_ContentCacheStatus_Response &>(from));
}


void SiteServerUI_ContentCacheStatus_Response::MergeFrom(const SiteServerUI_ContentCacheStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_ContentCacheStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_location(from._internal_cache_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_explicit_ip_address(from._internal_explicit_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_size_gb_ = from.max_size_gb_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      p2p_enabled_ = from.p2p_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      external_process_ = from.external_process_;
    }
    if (cached_has_bits & 0x00000080u) {
      current_size_gb_ = from.current_size_gb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      current_bw_ = from.current_bw_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_bytes_served_ = from.total_bytes_served_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_ContentCacheStatus_Response::CopyFrom(const SiteServerUI_ContentCacheStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_ContentCacheStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheStatus_Response::InternalSwap(SiteServerUI_ContentCacheStatus_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cache_location_, lhs_arena,
      &other->cache_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explicit_ip_address_, lhs_arena,
      &other->explicit_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_ContentCacheStatus_Response, total_bytes_served_)
      + sizeof(SiteServerUI_ContentCacheStatus_Response::total_bytes_served_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_ContentCacheStatus_Response, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ContentCacheStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[21]);
}

// ===================================================================

class SiteServerUI_ContentCacheConfig_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteServerUI_ContentCacheConfig_Request>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_size_gb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_p2p_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_external_process(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_explicit_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SiteServerUI_ContentCacheConfig_Request::SiteServerUI_ContentCacheConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ContentCacheConfig_Request)
}
SiteServerUI_ContentCacheConfig_Request::SiteServerUI_ContentCacheConfig_Request(const SiteServerUI_ContentCacheConfig_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cache_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cache_location()) {
    cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cache_location(), 
      GetArenaForAllocation());
  }
  explicit_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_explicit_ip_address()) {
    explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explicit_ip_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_process_) -
    reinterpret_cast<char*>(&port_)) + sizeof(external_process_));
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ContentCacheConfig_Request)
}

inline void SiteServerUI_ContentCacheConfig_Request::SharedCtor() {
cache_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
explicit_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&external_process_) -
    reinterpret_cast<char*>(&port_)) + sizeof(external_process_));
}

SiteServerUI_ContentCacheConfig_Request::~SiteServerUI_ContentCacheConfig_Request() {
  // @@protoc_insertion_point(destructor:SiteServerUI_ContentCacheConfig_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteServerUI_ContentCacheConfig_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cache_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explicit_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ContentCacheConfig_Request::ArenaDtor(void* object) {
  SiteServerUI_ContentCacheConfig_Request* _this = reinterpret_cast< SiteServerUI_ContentCacheConfig_Request* >(object);
  (void)_this;
}
void SiteServerUI_ContentCacheConfig_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteServerUI_ContentCacheConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteServerUI_ContentCacheConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteServerUI_ContentCacheConfig_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      explicit_ip_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&external_process_) -
        reinterpret_cast<char*>(&port_)) + sizeof(external_process_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteServerUI_ContentCacheConfig_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cache_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cache_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ContentCacheConfig_Request.cache_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_size_gb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_size_gb(&has_bits);
          max_size_gb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool p2p_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_p2p_enabled(&has_bits);
          p2p_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool external_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_external_process(&has_bits);
          external_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string explicit_ip_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_explicit_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SiteServerUI_ContentCacheConfig_Request.explicit_ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteServerUI_ContentCacheConfig_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SiteServerUI_ContentCacheConfig_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cache_location().data(), static_cast<int>(this->_internal_cache_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ContentCacheConfig_Request.cache_location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cache_location(), target);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_size_gb(), target);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_p2p_enabled(), target);
  }

  // optional bool external_process = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_external_process(), target);
  }

  // optional string explicit_ip_address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_explicit_ip_address().data(), static_cast<int>(this->_internal_explicit_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SiteServerUI_ContentCacheConfig_Request.explicit_ip_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_explicit_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SiteServerUI_ContentCacheConfig_Request)
  return target;
}

size_t SiteServerUI_ContentCacheConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteServerUI_ContentCacheConfig_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string cache_location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_location());
    }

    // optional string explicit_ip_address = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_explicit_ip_address());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

    // optional uint32 max_size_gb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_size_gb());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool p2p_enabled = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool external_process = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ContentCacheConfig_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteServerUI_ContentCacheConfig_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ContentCacheConfig_Request::GetClassData() const { return &_class_data_; }

void SiteServerUI_ContentCacheConfig_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteServerUI_ContentCacheConfig_Request *>(to)->MergeFrom(
      static_cast<const SiteServerUI_ContentCacheConfig_Request &>(from));
}


void SiteServerUI_ContentCacheConfig_Request::MergeFrom(const SiteServerUI_ContentCacheConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteServerUI_ContentCacheConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_location(from._internal_cache_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_explicit_ip_address(from._internal_explicit_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_size_gb_ = from.max_size_gb_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      p2p_enabled_ = from.p2p_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      external_process_ = from.external_process_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteServerUI_ContentCacheConfig_Request::CopyFrom(const SiteServerUI_ContentCacheConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteServerUI_ContentCacheConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheConfig_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheConfig_Request::InternalSwap(SiteServerUI_ContentCacheConfig_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cache_location_, lhs_arena,
      &other->cache_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explicit_ip_address_, lhs_arena,
      &other->explicit_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteServerUI_ContentCacheConfig_Request, external_process_)
      + sizeof(SiteServerUI_ContentCacheConfig_Request::external_process_)
      - PROTOBUF_FIELD_OFFSET(SiteServerUI_ContentCacheConfig_Request, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ContentCacheConfig_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[22]);
}

// ===================================================================

class SiteServerUI_ContentCacheConfig_Response::_Internal {
 public:
};

SiteServerUI_ContentCacheConfig_Response::SiteServerUI_ContentCacheConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SiteServerUI_ContentCacheConfig_Response)
}
SiteServerUI_ContentCacheConfig_Response::SiteServerUI_ContentCacheConfig_Response(const SiteServerUI_ContentCacheConfig_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SiteServerUI_ContentCacheConfig_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteServerUI_ContentCacheConfig_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteServerUI_ContentCacheConfig_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SiteServerUI_ContentCacheConfig_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsiteserverui_2eproto_getter, &descriptor_table_steammessages_5fsiteserverui_2eproto_once,
      file_level_metadata_steammessages_5fsiteserverui_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SiteServerUI_Login_Request* Arena::CreateMaybeMessage< ::SiteServerUI_Login_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Login_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Login_Response* Arena::CreateMaybeMessage< ::SiteServerUI_Login_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Login_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_LoginStatus_Request* Arena::CreateMaybeMessage< ::SiteServerUI_LoginStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_LoginStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_LoginStatus_Response* Arena::CreateMaybeMessage< ::SiteServerUI_LoginStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_LoginStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_CancelLogin_Request* Arena::CreateMaybeMessage< ::SiteServerUI_CancelLogin_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_CancelLogin_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_CancelLogin_Response* Arena::CreateMaybeMessage< ::SiteServerUI_CancelLogin_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_CancelLogin_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Logout_Request* Arena::CreateMaybeMessage< ::SiteServerUI_Logout_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Logout_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Logout_Response* Arena::CreateMaybeMessage< ::SiteServerUI_Logout_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Logout_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Quit_Request* Arena::CreateMaybeMessage< ::SiteServerUI_Quit_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Quit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Quit_Response* Arena::CreateMaybeMessage< ::SiteServerUI_Quit_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Quit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Status_Request* Arena::CreateMaybeMessage< ::SiteServerUI_Status_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Status_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_Status_Response* Arena::CreateMaybeMessage< ::SiteServerUI_Status_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_Status_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_GetLanguage_Request* Arena::CreateMaybeMessage< ::SiteServerUI_GetLanguage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_GetLanguage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_GetLanguage_Response* Arena::CreateMaybeMessage< ::SiteServerUI_GetLanguage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_GetLanguage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_SetLanguage_Request* Arena::CreateMaybeMessage< ::SiteServerUI_SetLanguage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_SetLanguage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_SetLanguage_Response* Arena::CreateMaybeMessage< ::SiteServerUI_SetLanguage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_SetLanguage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ClientStatus_Request* Arena::CreateMaybeMessage< ::SiteServerUI_ClientStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ClientStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ClientStatus_Response_ClientInfo* Arena::CreateMaybeMessage< ::SiteServerUI_ClientStatus_Response_ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ClientStatus_Response_ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ClientStatus_Response_Payment* Arena::CreateMaybeMessage< ::SiteServerUI_ClientStatus_Response_Payment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ClientStatus_Response_Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ClientStatus_Response* Arena::CreateMaybeMessage< ::SiteServerUI_ClientStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ClientStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ContentCacheStatus_Request* Arena::CreateMaybeMessage< ::SiteServerUI_ContentCacheStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ContentCacheStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ContentCacheStatus_Response* Arena::CreateMaybeMessage< ::SiteServerUI_ContentCacheStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ContentCacheStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ContentCacheConfig_Request* Arena::CreateMaybeMessage< ::SiteServerUI_ContentCacheConfig_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ContentCacheConfig_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteServerUI_ContentCacheConfig_Response* Arena::CreateMaybeMessage< ::SiteServerUI_ContentCacheConfig_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SiteServerUI_ContentCacheConfig_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
